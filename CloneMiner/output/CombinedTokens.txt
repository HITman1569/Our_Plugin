   No.   File  Line   Col. Cls.  Mthd.  Rep.  Tok.     Text
     0     0     1     1    -1    -1     0     121  STARTFILE C:\javasrc\java\nio\Bits.java
     1     0    26     1    -1    -1     0       5  package
     2     0    26     9    -1    -1     0     111  java.nio
     3     0    26    17    -1    -1     0     102  ;
     4     0    28     1    -1    -1     1      49  import
     5     0    28     8    -1    -1     1     111  java.security.AccessController
     6     0    28    38    -1    -1     1     102  ;
     7     0    29     1    -1    -1     1      49  import
     8     0    29     8    -1    -1     1     111  java.security.PrivilegedAction
     9     0    29    38    -1    -1     1     102  ;
    10     0    30     1    -1    -1     1      49  import
    11     0    30     8    -1    -1     1     111  sun.misc.Unsafe
    12     0    30    23    -1    -1     1     102  ;
    13     0    31     1    -1    -1     1      49  import
    14     0    31     8    -1    -1     1     111  sun.misc.VM
    15     0    31    19    -1    -1     1     102  ;
    16     0    37     1     0    -1     0     122  STARTCLASS
    17     0    37     1     0    -1     0      24  class
    18     0    37     7     0    -1     0     111  Bits
    19     0    37    12     0    -1     0      63  {
    20     0    37    12     0     0     0     123  STARTMETHOD
    21     0    39     5     0     0     0      41  private
    22     0    39    13     0     0     0     111  Bits
    23     0    39    17     0     0     0      59  (
    24     0    39    18     0     0     0      60  )
    25     0    39    20     0     0     0      63  {
    26     0    39    22     0     0     0      64  }
    27     0    39    22     0     0     0     124  ENDMETHOD
    28     0    39    22     0     1     0     125  STARTMETHOD
    29     0    44     5     0     1     0      45  static
    30     0    44    12     0     1     0      12  short
    31     0    44    18     0     1     0     111  swap
    32     0    44    22     0     1     0      59  (
    33     0    44    23     0     1     0      12  short
    34     0    44    29     0     1     0     111  x
    35     0    44    30     0     1     0      60  )
    36     0    44    32     0     1     0      63  {
    37     0    45     9     0     1     0      19  return
    38     0    45    16     0     1     0      59  (
    39     0    45    17     0     1     0      12  short
    40     0    45    22     0     1     0      60  )
    41     0    45    23     0     1     0      59  (
    42     0    45    24     0     1     0      59  (
    43     0    45    25     0     1     0     111  x
    44     0    45    27     0     1     0      90  <<
    45     0    45    30     0     1     0     112  8
    46     0    45    31     0     1     0      60  )
    47     0    45    33     0     1     0      96  |
    48     0    46    24     0     1     0      59  (
    49     0    46    25     0     1     0      59  (
    50     0    46    26     0     1     0      40  char
    51     0    46    30     0     1     0      60  )
    52     0    46    31     0     1     0     111  x
    53     0    46    33     0     1     0      86  >>>
    54     0    46    37     0     1     0     112  8
    55     0    46    38     0     1     0      60  )
    56     0    46    39     0     1     0      60  )
    57     0    46    40     0     1     0     102  ;
    58     0    47     5     0     1     0      64  }
    59     0    47     5     0     1     0     126  ENDMETHOD
    60     0    47     5     0     2     0     127  STARTMETHOD
    61     0    49     5     0     2     0      45  static
    62     0    49    12     0     2     0      40  char
    63     0    49    17     0     2     0     111  swap
    64     0    49    21     0     2     0      59  (
    65     0    49    22     0     2     0      40  char
    66     0    49    27     0     2     0     111  x
    67     0    49    28     0     2     0      60  )
    68     0    49    30     0     2     0      63  {
    69     0    50     9     0     2     0      19  return
    70     0    50    16     0     2     0      59  (
    71     0    50    17     0     2     0      40  char
    72     0    50    21     0     2     0      60  )
    73     0    50    22     0     2     0      59  (
    74     0    50    23     0     2     0      59  (
    75     0    50    24     0     2     0     111  x
    76     0    50    26     0     2     0      90  <<
    77     0    50    29     0     2     0     112  8
    78     0    50    30     0     2     0      60  )
    79     0    50    32     0     2     0      96  |
    80     0    51    23     0     2     0      59  (
    81     0    51    24     0     2     0     111  x
    82     0    51    26     0     2     0      86  >>>
    83     0    51    30     0     2     0     112  8
    84     0    51    31     0     2     0      60  )
    85     0    51    32     0     2     0      60  )
    86     0    51    33     0     2     0     102  ;
    87     0    52     5     0     2     0      64  }
    88     0    52     5     0     2     0     128  ENDMETHOD
    89     0    52     5     0     3     0     129  STARTMETHOD
    90     0    54     5     0     3     0      45  static
    91     0    54    12     0     3     0      36  int
    92     0    54    16     0     3     0     111  swap
    93     0    54    20     0     3     0      59  (
    94     0    54    21     0     3     0      36  int
    95     0    54    25     0     3     0     111  x
    96     0    54    26     0     3     0      60  )
    97     0    54    28     0     3     0      63  {
    98     0    55     9     0     3     0      19  return
    99     0    55    16     0     3     0      59  (
   100     0    55    17     0     3     0      59  (
   101     0    55    18     0     3     0     111  x
   102     0    55    20     0     3     0      90  <<
   103     0    55    23     0     3     0     112  24
   104     0    55    25     0     3     0      60  )
   105     0    55    27     0     3     0      96  |
   106     0    56    17     0     3     0      59  (
   107     0    56    18     0     3     0      59  (
   108     0    56    19     0     3     0     111  x
   109     0    56    21     0     3     0      99  &
   110     0    56    23     0     3     0     112  0x0000ff00
   111     0    56    33     0     3     0      60  )
   112     0    56    35     0     3     0      90  <<
   113     0    56    39     0     3     0     112  8
   114     0    56    40     0     3     0      60  )
   115     0    56    42     0     3     0      96  |
   116     0    57    17     0     3     0      59  (
   117     0    57    18     0     3     0      59  (
   118     0    57    19     0     3     0     111  x
   119     0    57    21     0     3     0      99  &
   120     0    57    23     0     3     0     112  0x00ff0000
   121     0    57    33     0     3     0      60  )
   122     0    57    35     0     3     0      86  >>>
   123     0    57    39     0     3     0     112  8
   124     0    57    40     0     3     0      60  )
   125     0    57    42     0     3     0      96  |
   126     0    58    17     0     3     0      59  (
   127     0    58    18     0     3     0     111  x
   128     0    58    20     0     3     0      86  >>>
   129     0    58    24     0     3     0     112  24
   130     0    58    26     0     3     0      60  )
   131     0    58    27     0     3     0      60  )
   132     0    58    28     0     3     0     102  ;
   133     0    59     5     0     3     0      64  }
   134     0    59     5     0     3     0     130  ENDMETHOD
   135     0    59     5     0     4     0     131  STARTMETHOD
   136     0    61     5     0     4     0      45  static
   137     0    61    12     0     4     0      53  long
   138     0    61    17     0     4     0     111  swap
   139     0    61    21     0     4     0      59  (
   140     0    61    22     0     4     0      53  long
   141     0    61    27     0     4     0     111  x
   142     0    61    28     0     4     0      60  )
   143     0    61    30     0     4     0      63  {
   144     0    62     9     0     4     0      19  return
   145     0    62    16     0     4     0      59  (
   146     0    62    17     0     4     0      59  (
   147     0    62    18     0     4     0      59  (
   148     0    62    19     0     4     0      53  long
   149     0    62    23     0     4     0      60  )
   150     0    62    24     0     4     0     111  swap
   151     0    62    28     0     4     0      59  (
   152     0    62    29     0     4     0      59  (
   153     0    62    30     0     4     0      36  int
   154     0    62    33     0     4     0      60  )
   155     0    62    34     0     4     0     111  x
   156     0    62    35     0     4     0      60  )
   157     0    62    37     0     4     0      90  <<
   158     0    62    40     0     4     0     112  32
   159     0    62    42     0     4     0      60  )
   160     0    62    44     0     4     0      96  |
   161     0    63    17     0     4     0      59  (
   162     0    63    18     0     4     0      59  (
   163     0    63    19     0     4     0      53  long
   164     0    63    23     0     4     0      60  )
   165     0    63    24     0     4     0     111  swap
   166     0    63    28     0     4     0      59  (
   167     0    63    29     0     4     0      59  (
   168     0    63    30     0     4     0      36  int
   169     0    63    33     0     4     0      60  )
   170     0    63    34     0     4     0      59  (
   171     0    63    35     0     4     0     111  x
   172     0    63    37     0     4     0      86  >>>
   173     0    63    41     0     4     0     112  32
   174     0    63    43     0     4     0      60  )
   175     0    63    44     0     4     0      60  )
   176     0    63    46     0     4     0      99  &
   177     0    63    48     0     4     0      55  0xffffffffL
   178     0    63    59     0     4     0      60  )
   179     0    63    60     0     4     0      60  )
   180     0    63    61     0     4     0     102  ;
   181     0    64     5     0     4     0      64  }
   182     0    64     5     0     4     0     132  ENDMETHOD
   183     0    64     5     0     5     0     133  STARTMETHOD
   184     0    69     5     0     5     0      45  static
   185     0    69    12     0     5     0      41  private
   186     0    69    20     0     5     0      40  char
   187     0    69    25     0     5     0     111  makeChar
   188     0    69    33     0     5     0      59  (
   189     0    69    34     0     5     0       9  byte
   190     0    69    39     0     5     0     111  b1
   191     0    69    41     0     5     0      66  ,
   192     0    69    43     0     5     0       9  byte
   193     0    69    48     0     5     0     111  b0
   194     0    69    50     0     5     0      60  )
   195     0    69    52     0     5     0      63  {
   196     0    70     9     0     5     0      19  return
   197     0    70    16     0     5     0      59  (
   198     0    70    17     0     5     0      40  char
   199     0    70    21     0     5     0      60  )
   200     0    70    22     0     5     0      59  (
   201     0    70    23     0     5     0      59  (
   202     0    70    24     0     5     0     111  b1
   203     0    70    27     0     5     0      90  <<
   204     0    70    30     0     5     0     112  8
   205     0    70    31     0     5     0      60  )
   206     0    70    33     0     5     0      96  |
   207     0    70    35     0     5     0      59  (
   208     0    70    36     0     5     0     111  b0
   209     0    70    39     0     5     0      99  &
   210     0    70    41     0     5     0     112  0xff
   211     0    70    45     0     5     0      60  )
   212     0    70    46     0     5     0      60  )
   213     0    70    47     0     5     0     102  ;
   214     0    71     5     0     5     0      64  }
   215     0    71     5     0     5     0     134  ENDMETHOD
   216     0    71     5     0     6     0     135  STARTMETHOD
   217     0    73     5     0     6     0      45  static
   218     0    73    12     0     6     0      40  char
   219     0    73    17     0     6     0     111  getCharL
   220     0    73    25     0     6     0      59  (
   221     0    73    26     0     6     0     111  ByteBuffer
   222     0    73    37     0     6     0     111  bb
   223     0    73    39     0     6     0      66  ,
   224     0    73    41     0     6     0      36  int
   225     0    73    45     0     6     0     111  bi
   226     0    73    47     0     6     0      60  )
   227     0    73    49     0     6     0      63  {
   228     0    74     9     0     6     0      19  return
   229     0    74    16     0     6     0     111  makeChar
   230     0    74    24     0     6     0      59  (
   231     0    74    25     0     6     0     111  bb._get
   232     0    74    32     0     6     0      59  (
   233     0    74    33     0     6     0     111  bi
   234     0    74    36     0     6     0      74  +
   235     0    74    38     0     6     0     112  1
   236     0    74    39     0     6     0      60  )
   237     0    74    40     0     6     0      66  ,
   238     0    75    25     0     6     0     111  bb._get
   239     0    75    32     0     6     0      59  (
   240     0    75    33     0     6     0     111  bi
   241     0    75    36     0     6     0      74  +
   242     0    75    38     0     6     0     112  0
   243     0    75    39     0     6     0      60  )
   244     0    75    40     0     6     0      60  )
   245     0    75    41     0     6     0     102  ;
   246     0    76     5     0     6     0      64  }
   247     0    76     5     0     6     0     136  ENDMETHOD
   248     0    76     5     0     7     0     137  STARTMETHOD
   249     0    78     5     0     7     0      45  static
   250     0    78    12     0     7     0      40  char
   251     0    78    17     0     7     0     111  getCharL
   252     0    78    25     0     7     0      59  (
   253     0    78    26     0     7     0      53  long
   254     0    78    31     0     7     0     111  a
   255     0    78    32     0     7     0      60  )
   256     0    78    34     0     7     0      63  {
   257     0    79     9     0     7     0      19  return
   258     0    79    16     0     7     0     111  makeChar
   259     0    79    24     0     7     0      59  (
   260     0    79    25     0     7     0     111  _get
   261     0    79    29     0     7     0      59  (
   262     0    79    30     0     7     0     111  a
   263     0    79    32     0     7     0      74  +
   264     0    79    34     0     7     0     112  1
   265     0    79    35     0     7     0      60  )
   266     0    79    36     0     7     0      66  ,
   267     0    80    25     0     7     0     111  _get
   268     0    80    29     0     7     0      59  (
   269     0    80    30     0     7     0     111  a
   270     0    80    32     0     7     0      74  +
   271     0    80    34     0     7     0     112  0
   272     0    80    35     0     7     0      60  )
   273     0    80    36     0     7     0      60  )
   274     0    80    37     0     7     0     102  ;
   275     0    81     5     0     7     0      64  }
   276     0    81     5     0     7     0     138  ENDMETHOD
   277     0    81     5     0     8     0     139  STARTMETHOD
   278     0    83     5     0     8     0      45  static
   279     0    83    12     0     8     0      40  char
   280     0    83    17     0     8     0     111  getCharB
   281     0    83    25     0     8     0      59  (
   282     0    83    26     0     8     0     111  ByteBuffer
   283     0    83    37     0     8     0     111  bb
   284     0    83    39     0     8     0      66  ,
   285     0    83    41     0     8     0      36  int
   286     0    83    45     0     8     0     111  bi
   287     0    83    47     0     8     0      60  )
   288     0    83    49     0     8     0      63  {
   289     0    84     9     0     8     0      19  return
   290     0    84    16     0     8     0     111  makeChar
   291     0    84    24     0     8     0      59  (
   292     0    84    25     0     8     0     111  bb._get
   293     0    84    32     0     8     0      59  (
   294     0    84    33     0     8     0     111  bi
   295     0    84    36     0     8     0      74  +
   296     0    84    38     0     8     0     112  0
   297     0    84    39     0     8     0      60  )
   298     0    84    40     0     8     0      66  ,
   299     0    85    25     0     8     0     111  bb._get
   300     0    85    32     0     8     0      59  (
   301     0    85    33     0     8     0     111  bi
   302     0    85    36     0     8     0      74  +
   303     0    85    38     0     8     0     112  1
   304     0    85    39     0     8     0      60  )
   305     0    85    40     0     8     0      60  )
   306     0    85    41     0     8     0     102  ;
   307     0    86     5     0     8     0      64  }
   308     0    86     5     0     8     0     140  ENDMETHOD
   309     0    86     5     0     9     0     141  STARTMETHOD
   310     0    88     5     0     9     0      45  static
   311     0    88    12     0     9     0      40  char
   312     0    88    17     0     9     0     111  getCharB
   313     0    88    25     0     9     0      59  (
   314     0    88    26     0     9     0      53  long
   315     0    88    31     0     9     0     111  a
   316     0    88    32     0     9     0      60  )
   317     0    88    34     0     9     0      63  {
   318     0    89     9     0     9     0      19  return
   319     0    89    16     0     9     0     111  makeChar
   320     0    89    24     0     9     0      59  (
   321     0    89    25     0     9     0     111  _get
   322     0    89    29     0     9     0      59  (
   323     0    89    30     0     9     0     111  a
   324     0    89    32     0     9     0      74  +
   325     0    89    34     0     9     0     112  0
   326     0    89    35     0     9     0      60  )
   327     0    89    36     0     9     0      66  ,
   328     0    90    25     0     9     0     111  _get
   329     0    90    29     0     9     0      59  (
   330     0    90    30     0     9     0     111  a
   331     0    90    32     0     9     0      74  +
   332     0    90    34     0     9     0     112  1
   333     0    90    35     0     9     0      60  )
   334     0    90    36     0     9     0      60  )
   335     0    90    37     0     9     0     102  ;
   336     0    91     5     0     9     0      64  }
   337     0    91     5     0     9     0     142  ENDMETHOD
   338     0    91     5     0    10     0     143  STARTMETHOD
   339     0    93     5     0    10     0      45  static
   340     0    93    12     0    10     0      40  char
   341     0    93    17     0    10     0     111  getChar
   342     0    93    24     0    10     0      59  (
   343     0    93    25     0    10     0     111  ByteBuffer
   344     0    93    36     0    10     0     111  bb
   345     0    93    38     0    10     0      66  ,
   346     0    93    40     0    10     0      36  int
   347     0    93    44     0    10     0     111  bi
   348     0    93    46     0    10     0      66  ,
   349     0    93    48     0    10     0      39  boolean
   350     0    93    56     0    10     0     111  bigEndian
   351     0    93    65     0    10     0      60  )
   352     0    93    67     0    10     0      63  {
   353     0    94     9     0    10     0      19  return
   354     0    94    16     0    10     0      59  (
   355     0    94    17     0    10     0     111  bigEndian
   356     0    94    27     0    10     0      58  ?
   357     0    94    29     0    10     0     111  getCharB
   358     0    94    37     0    10     0      59  (
   359     0    94    38     0    10     0     111  bb
   360     0    94    40     0    10     0      66  ,
   361     0    94    42     0    10     0     111  bi
   362     0    94    44     0    10     0      60  )
   363     0    94    46     0    10     0      65  :
   364     0    94    48     0    10     0     111  getCharL
   365     0    94    56     0    10     0      59  (
   366     0    94    57     0    10     0     111  bb
   367     0    94    59     0    10     0      66  ,
   368     0    94    61     0    10     0     111  bi
   369     0    94    63     0    10     0      60  )
   370     0    94    64     0    10     0      60  )
   371     0    94    65     0    10     0     102  ;
   372     0    95     5     0    10     0      64  }
   373     0    95     5     0    10     0     144  ENDMETHOD
   374     0    95     5     0    11     0     145  STARTMETHOD
   375     0    97     5     0    11     0      45  static
   376     0    97    12     0    11     0      40  char
   377     0    97    17     0    11     0     111  getChar
   378     0    97    24     0    11     0      59  (
   379     0    97    25     0    11     0      53  long
   380     0    97    30     0    11     0     111  a
   381     0    97    31     0    11     0      66  ,
   382     0    97    33     0    11     0      39  boolean
   383     0    97    41     0    11     0     111  bigEndian
   384     0    97    50     0    11     0      60  )
   385     0    97    52     0    11     0      63  {
   386     0    98     9     0    11     0      19  return
   387     0    98    16     0    11     0      59  (
   388     0    98    17     0    11     0     111  bigEndian
   389     0    98    27     0    11     0      58  ?
   390     0    98    29     0    11     0     111  getCharB
   391     0    98    37     0    11     0      59  (
   392     0    98    38     0    11     0     111  a
   393     0    98    39     0    11     0      60  )
   394     0    98    41     0    11     0      65  :
   395     0    98    43     0    11     0     111  getCharL
   396     0    98    51     0    11     0      59  (
   397     0    98    52     0    11     0     111  a
   398     0    98    53     0    11     0      60  )
   399     0    98    54     0    11     1      60  )
   400     0    98    55     0    11     1     102  ;
   401     0    99     5     0    11     1      64  }
   402     0    99     5     0    11     0     146  ENDMETHOD
   403     0    99     5     0    12     0     147  STARTMETHOD
   404     0   101     5     0    12     0      41  private
   405     0   101    13     0    12     0      45  static
   406     0   101    20     0    12     0       9  byte
   407     0   101    25     0    12     0     111  char1
   408     0   101    30     0    12     0      59  (
   409     0   101    31     0    12     0      40  char
   410     0   101    36     0    12     0     111  x
   411     0   101    37     0    12     0      60  )
   412     0   101    39     0    12     0      63  {
   413     0   101    41     0    12     0      19  return
   414     0   101    48     0    12     0      59  (
   415     0   101    49     0    12     0       9  byte
   416     0   101    53     0    12     0      60  )
   417     0   101    54     0    12     0      59  (
   418     0   101    55     0    12     0     111  x
   419     0   101    57     0    12     0      84  >>
   420     0   101    60     0    12     0     112  8
   421     0   101    61     0    12     1      60  )
   422     0   101    62     0    12     1     102  ;
   423     0   101    64     0    12     1      64  }
   424     0   101    64     0    12     0     148  ENDMETHOD
   425     0   101    64     0    13     0     149  STARTMETHOD
   426     0   102     5     0    13     0      41  private
   427     0   102    13     0    13     0      45  static
   428     0   102    20     0    13     0       9  byte
   429     0   102    25     0    13     0     111  char0
   430     0   102    30     0    13     0      59  (
   431     0   102    31     0    13     0      40  char
   432     0   102    36     0    13     0     111  x
   433     0   102    37     0    13     0      60  )
   434     0   102    39     0    13     0      63  {
   435     0   102    41     0    13     0      19  return
   436     0   102    48     0    13     0      59  (
   437     0   102    49     0    13     0       9  byte
   438     0   102    53     0    13     0      60  )
   439     0   102    54     0    13     0      59  (
   440     0   102    55     0    13     0     111  x
   441     0   102    57     0    13     0      84  >>
   442     0   102    60     0    13     0     112  0
   443     0   102    61     0    13     1      60  )
   444     0   102    62     0    13     1     102  ;
   445     0   102    64     0    13     1      64  }
   446     0   102    64     0    13     0     150  ENDMETHOD
   447     0   102    64     0    14     0     151  STARTMETHOD
   448     0   104     5     0    14     0      45  static
   449     0   104    12     0    14     0      50  void
   450     0   104    17     0    14     0     111  putCharL
   451     0   104    25     0    14     0      59  (
   452     0   104    26     0    14     0     111  ByteBuffer
   453     0   104    37     0    14     0     111  bb
   454     0   104    39     0    14     0      66  ,
   455     0   104    41     0    14     0      36  int
   456     0   104    45     0    14     0     111  bi
   457     0   104    47     0    14     0      66  ,
   458     0   104    49     0    14     0      40  char
   459     0   104    54     0    14     0     111  x
   460     0   104    55     0    14     0      60  )
   461     0   104    57     0    14     0      63  {
   462     0   105     9     0    14     1     111  bb._put
   463     0   105    16     0    14     1      59  (
   464     0   105    17     0    14     1     111  bi
   465     0   105    20     0    14     1      74  +
   466     0   105    22     0    14     1     112  0
   467     0   105    23     0    14     1      66  ,
   468     0   105    25     0    14     1     111  char0
   469     0   105    30     0    14     1      59  (
   470     0   105    31     0    14     1     111  x
   471     0   105    32     0    14     1      60  )
   472     0   105    33     0    14     1      60  )
   473     0   105    34     0    14     1     102  ;
   474     0   106     9     0    14     1     111  bb._put
   475     0   106    16     0    14     1      59  (
   476     0   106    17     0    14     1     111  bi
   477     0   106    20     0    14     1      74  +
   478     0   106    22     0    14     1     112  1
   479     0   106    23     0    14     1      66  ,
   480     0   106    25     0    14     1     111  char1
   481     0   106    30     0    14     1      59  (
   482     0   106    31     0    14     1     111  x
   483     0   106    32     0    14     1      60  )
   484     0   106    33     0    14     1      60  )
   485     0   106    34     0    14     1     102  ;
   486     0   107     5     0    14     0      64  }
   487     0   107     5     0    14     0     152  ENDMETHOD
   488     0   107     5     0    15     0     153  STARTMETHOD
   489     0   109     5     0    15     0      45  static
   490     0   109    12     0    15     0      50  void
   491     0   109    17     0    15     0     111  putCharL
   492     0   109    25     0    15     0      59  (
   493     0   109    26     0    15     0      53  long
   494     0   109    31     0    15     0     111  a
   495     0   109    32     0    15     0      66  ,
   496     0   109    34     0    15     0      40  char
   497     0   109    39     0    15     0     111  x
   498     0   109    40     0    15     0      60  )
   499     0   109    42     0    15     0      63  {
   500     0   110     9     0    15     1     111  _put
   501     0   110    13     0    15     1      59  (
   502     0   110    14     0    15     1     111  a
   503     0   110    16     0    15     1      74  +
   504     0   110    18     0    15     1     112  0
   505     0   110    19     0    15     1      66  ,
   506     0   110    21     0    15     1     111  char0
   507     0   110    26     0    15     1      59  (
   508     0   110    27     0    15     1     111  x
   509     0   110    28     0    15     1      60  )
   510     0   110    29     0    15     1      60  )
   511     0   110    30     0    15     1     102  ;
   512     0   111     9     0    15     1     111  _put
   513     0   111    13     0    15     1      59  (
   514     0   111    14     0    15     1     111  a
   515     0   111    16     0    15     1      74  +
   516     0   111    18     0    15     1     112  1
   517     0   111    19     0    15     1      66  ,
   518     0   111    21     0    15     1     111  char1
   519     0   111    26     0    15     1      59  (
   520     0   111    27     0    15     1     111  x
   521     0   111    28     0    15     1      60  )
   522     0   111    29     0    15     1      60  )
   523     0   111    30     0    15     1     102  ;
   524     0   112     5     0    15     0      64  }
   525     0   112     5     0    15     0     154  ENDMETHOD
   526     0   112     5     0    16     0     155  STARTMETHOD
   527     0   114     5     0    16     0      45  static
   528     0   114    12     0    16     0      50  void
   529     0   114    17     0    16     0     111  putCharB
   530     0   114    25     0    16     0      59  (
   531     0   114    26     0    16     0     111  ByteBuffer
   532     0   114    37     0    16     0     111  bb
   533     0   114    39     0    16     0      66  ,
   534     0   114    41     0    16     0      36  int
   535     0   114    45     0    16     0     111  bi
   536     0   114    47     0    16     0      66  ,
   537     0   114    49     0    16     0      40  char
   538     0   114    54     0    16     0     111  x
   539     0   114    55     0    16     0      60  )
   540     0   114    57     0    16     0      63  {
   541     0   115     9     0    16     1     111  bb._put
   542     0   115    16     0    16     1      59  (
   543     0   115    17     0    16     1     111  bi
   544     0   115    20     0    16     1      74  +
   545     0   115    22     0    16     1     112  0
   546     0   115    23     0    16     1      66  ,
   547     0   115    25     0    16     1     111  char1
   548     0   115    30     0    16     1      59  (
   549     0   115    31     0    16     1     111  x
   550     0   115    32     0    16     1      60  )
   551     0   115    33     0    16     1      60  )
   552     0   115    34     0    16     1     102  ;
   553     0   116     9     0    16     1     111  bb._put
   554     0   116    16     0    16     1      59  (
   555     0   116    17     0    16     1     111  bi
   556     0   116    20     0    16     1      74  +
   557     0   116    22     0    16     1     112  1
   558     0   116    23     0    16     1      66  ,
   559     0   116    25     0    16     1     111  char0
   560     0   116    30     0    16     1      59  (
   561     0   116    31     0    16     1     111  x
   562     0   116    32     0    16     1      60  )
   563     0   116    33     0    16     1      60  )
   564     0   116    34     0    16     1     102  ;
   565     0   117     5     0    16     0      64  }
   566     0   117     5     0    16     0     156  ENDMETHOD
   567     0   117     5     0    17     0     157  STARTMETHOD
   568     0   119     5     0    17     0      45  static
   569     0   119    12     0    17     0      50  void
   570     0   119    17     0    17     0     111  putCharB
   571     0   119    25     0    17     0      59  (
   572     0   119    26     0    17     0      53  long
   573     0   119    31     0    17     0     111  a
   574     0   119    32     0    17     0      66  ,
   575     0   119    34     0    17     0      40  char
   576     0   119    39     0    17     0     111  x
   577     0   119    40     0    17     0      60  )
   578     0   119    42     0    17     0      63  {
   579     0   120     9     0    17     1     111  _put
   580     0   120    13     0    17     1      59  (
   581     0   120    14     0    17     1     111  a
   582     0   120    16     0    17     1      74  +
   583     0   120    18     0    17     1     112  0
   584     0   120    19     0    17     1      66  ,
   585     0   120    21     0    17     1     111  char1
   586     0   120    26     0    17     1      59  (
   587     0   120    27     0    17     1     111  x
   588     0   120    28     0    17     1      60  )
   589     0   120    29     0    17     1      60  )
   590     0   120    30     0    17     1     102  ;
   591     0   121     9     0    17     1     111  _put
   592     0   121    13     0    17     1      59  (
   593     0   121    14     0    17     1     111  a
   594     0   121    16     0    17     1      74  +
   595     0   121    18     0    17     1     112  1
   596     0   121    19     0    17     1      66  ,
   597     0   121    21     0    17     1     111  char0
   598     0   121    26     0    17     1      59  (
   599     0   121    27     0    17     1     111  x
   600     0   121    28     0    17     1      60  )
   601     0   121    29     0    17     1      60  )
   602     0   121    30     0    17     1     102  ;
   603     0   122     5     0    17     0      64  }
   604     0   122     5     0    17     0     158  ENDMETHOD
   605     0   122     5     0    18     0     159  STARTMETHOD
   606     0   124     5     0    18     0      45  static
   607     0   124    12     0    18     0      50  void
   608     0   124    17     0    18     0     111  putChar
   609     0   124    24     0    18     0      59  (
   610     0   124    25     0    18     0     111  ByteBuffer
   611     0   124    36     0    18     0     111  bb
   612     0   124    38     0    18     0      66  ,
   613     0   124    40     0    18     0      36  int
   614     0   124    44     0    18     0     111  bi
   615     0   124    46     0    18     0      66  ,
   616     0   124    48     0    18     0      40  char
   617     0   124    53     0    18     0     111  x
   618     0   124    54     0    18     0      66  ,
   619     0   124    56     0    18     0      39  boolean
   620     0   124    64     0    18     0     111  bigEndian
   621     0   124    73     0    18     0      60  )
   622     0   124    75     0    18     0      63  {
   623     0   125     9     0    18     0      31  if
   624     0   125    12     0    18     0      59  (
   625     0   125    13     0    18     0     111  bigEndian
   626     0   125    22     0    18     0      60  )
   627     0   126    13     0    18     0     111  putCharB
   628     0   126    21     0    18     0      59  (
   629     0   126    22     0    18     0     111  bb
   630     0   126    24     0    18     0      66  ,
   631     0   126    26     0    18     0     111  bi
   632     0   126    28     0    18     0      66  ,
   633     0   126    30     0    18     0     111  x
   634     0   126    31     0    18     0      60  )
   635     0   126    32     0    18     0     102  ;
   636     0   127     9     0    18     0      48  else
   637     0   128    13     0    18     0     111  putCharL
   638     0   128    21     0    18     0      59  (
   639     0   128    22     0    18     0     111  bb
   640     0   128    24     0    18     0      66  ,
   641     0   128    26     0    18     0     111  bi
   642     0   128    28     0    18     0      66  ,
   643     0   128    30     0    18     0     111  x
   644     0   128    31     0    18     0      60  )
   645     0   128    32     0    18     0     102  ;
   646     0   129     5     0    18     0      64  }
   647     0   129     5     0    18     0     160  ENDMETHOD
   648     0   129     5     0    19     0     161  STARTMETHOD
   649     0   131     5     0    19     0      45  static
   650     0   131    12     0    19     0      50  void
   651     0   131    17     0    19     0     111  putChar
   652     0   131    24     0    19     0      59  (
   653     0   131    25     0    19     0      53  long
   654     0   131    30     0    19     0     111  a
   655     0   131    31     0    19     0      66  ,
   656     0   131    33     0    19     0      40  char
   657     0   131    38     0    19     0     111  x
   658     0   131    39     0    19     0      66  ,
   659     0   131    41     0    19     0      39  boolean
   660     0   131    49     0    19     0     111  bigEndian
   661     0   131    58     0    19     0      60  )
   662     0   131    60     0    19     0      63  {
   663     0   132     9     0    19     0      31  if
   664     0   132    12     0    19     0      59  (
   665     0   132    13     0    19     0     111  bigEndian
   666     0   132    22     0    19     0      60  )
   667     0   133    13     0    19     0     111  putCharB
   668     0   133    21     0    19     0      59  (
   669     0   133    22     0    19     0     111  a
   670     0   133    23     0    19     0      66  ,
   671     0   133    25     0    19     0     111  x
   672     0   133    26     0    19     0      60  )
   673     0   133    27     0    19     0     102  ;
   674     0   134     9     0    19     0      48  else
   675     0   135    13     0    19     0     111  putCharL
   676     0   135    21     0    19     0      59  (
   677     0   135    22     0    19     0     111  a
   678     0   135    23     0    19     0      66  ,
   679     0   135    25     0    19     0     111  x
   680     0   135    26     0    19     0      60  )
   681     0   135    27     0    19     0     102  ;
   682     0   136     5     0    19     0      64  }
   683     0   136     5     0    19     0     162  ENDMETHOD
   684     0   136     5     0    20     0     163  STARTMETHOD
   685     0   141     5     0    20     0      45  static
   686     0   141    12     0    20     0      41  private
   687     0   141    20     0    20     0      12  short
   688     0   141    26     0    20     0     111  makeShort
   689     0   141    35     0    20     0      59  (
   690     0   141    36     0    20     0       9  byte
   691     0   141    41     0    20     0     111  b1
   692     0   141    43     0    20     0      66  ,
   693     0   141    45     0    20     0       9  byte
   694     0   141    50     0    20     0     111  b0
   695     0   141    52     0    20     0      60  )
   696     0   141    54     0    20     0      63  {
   697     0   142     9     0    20     0      19  return
   698     0   142    16     0    20     0      59  (
   699     0   142    17     0    20     0      12  short
   700     0   142    22     0    20     0      60  )
   701     0   142    23     0    20     0      59  (
   702     0   142    24     0    20     0      59  (
   703     0   142    25     0    20     0     111  b1
   704     0   142    28     0    20     0      90  <<
   705     0   142    31     0    20     0     112  8
   706     0   142    32     0    20     0      60  )
   707     0   142    34     0    20     0      96  |
   708     0   142    36     0    20     0      59  (
   709     0   142    37     0    20     0     111  b0
   710     0   142    40     0    20     0      99  &
   711     0   142    42     0    20     0     112  0xff
   712     0   142    46     0    20     0      60  )
   713     0   142    47     0    20     0      60  )
   714     0   142    48     0    20     0     102  ;
   715     0   143     5     0    20     0      64  }
   716     0   143     5     0    20     0     164  ENDMETHOD
   717     0   143     5     0    21     0     165  STARTMETHOD
   718     0   145     5     0    21     0      45  static
   719     0   145    12     0    21     0      12  short
   720     0   145    18     0    21     0     111  getShortL
   721     0   145    27     0    21     0      59  (
   722     0   145    28     0    21     0     111  ByteBuffer
   723     0   145    39     0    21     0     111  bb
   724     0   145    41     0    21     0      66  ,
   725     0   145    43     0    21     0      36  int
   726     0   145    47     0    21     0     111  bi
   727     0   145    49     0    21     0      60  )
   728     0   145    51     0    21     0      63  {
   729     0   146     9     0    21     0      19  return
   730     0   146    16     0    21     0     111  makeShort
   731     0   146    25     0    21     0      59  (
   732     0   146    26     0    21     0     111  bb._get
   733     0   146    33     0    21     0      59  (
   734     0   146    34     0    21     0     111  bi
   735     0   146    37     0    21     0      74  +
   736     0   146    39     0    21     0     112  1
   737     0   146    40     0    21     0      60  )
   738     0   146    41     0    21     0      66  ,
   739     0   147    26     0    21     0     111  bb._get
   740     0   147    33     0    21     0      59  (
   741     0   147    34     0    21     0     111  bi
   742     0   147    37     0    21     0      74  +
   743     0   147    39     0    21     0     112  0
   744     0   147    40     0    21     0      60  )
   745     0   147    41     0    21     0      60  )
   746     0   147    42     0    21     0     102  ;
   747     0   148     5     0    21     0      64  }
   748     0   148     5     0    21     0     166  ENDMETHOD
   749     0   148     5     0    22     0     167  STARTMETHOD
   750     0   150     5     0    22     0      45  static
   751     0   150    12     0    22     0      12  short
   752     0   150    18     0    22     0     111  getShortL
   753     0   150    27     0    22     0      59  (
   754     0   150    28     0    22     0      53  long
   755     0   150    33     0    22     0     111  a
   756     0   150    34     0    22     0      60  )
   757     0   150    36     0    22     0      63  {
   758     0   151     9     0    22     0      19  return
   759     0   151    16     0    22     0     111  makeShort
   760     0   151    25     0    22     0      59  (
   761     0   151    26     0    22     0     111  _get
   762     0   151    30     0    22     0      59  (
   763     0   151    31     0    22     0     111  a
   764     0   151    33     0    22     0      74  +
   765     0   151    35     0    22     0     112  1
   766     0   151    36     0    22     0      60  )
   767     0   151    37     0    22     0      66  ,
   768     0   152    26     0    22     0     111  _get
   769     0   152    30     0    22     0      59  (
   770     0   152    31     0    22     0     111  a
   771     0   152    32     0    22     0      60  )
   772     0   152    33     0    22     0      60  )
   773     0   152    34     0    22     0     102  ;
   774     0   153     5     0    22     0      64  }
   775     0   153     5     0    22     0     168  ENDMETHOD
   776     0   153     5     0    23     0     169  STARTMETHOD
   777     0   155     5     0    23     0      45  static
   778     0   155    12     0    23     0      12  short
   779     0   155    18     0    23     0     111  getShortB
   780     0   155    27     0    23     0      59  (
   781     0   155    28     0    23     0     111  ByteBuffer
   782     0   155    39     0    23     0     111  bb
   783     0   155    41     0    23     0      66  ,
   784     0   155    43     0    23     0      36  int
   785     0   155    47     0    23     0     111  bi
   786     0   155    49     0    23     0      60  )
   787     0   155    51     0    23     0      63  {
   788     0   156     9     0    23     0      19  return
   789     0   156    16     0    23     0     111  makeShort
   790     0   156    25     0    23     0      59  (
   791     0   156    26     0    23     0     111  bb._get
   792     0   156    33     0    23     0      59  (
   793     0   156    34     0    23     0     111  bi
   794     0   156    37     0    23     0      74  +
   795     0   156    39     0    23     0     112  0
   796     0   156    40     0    23     0      60  )
   797     0   156    41     0    23     0      66  ,
   798     0   157    26     0    23     0     111  bb._get
   799     0   157    33     0    23     0      59  (
   800     0   157    34     0    23     0     111  bi
   801     0   157    37     0    23     0      74  +
   802     0   157    39     0    23     0     112  1
   803     0   157    40     0    23     0      60  )
   804     0   157    41     0    23     0      60  )
   805     0   157    42     0    23     0     102  ;
   806     0   158     5     0    23     0      64  }
   807     0   158     5     0    23     0     170  ENDMETHOD
   808     0   158     5     0    24     0     171  STARTMETHOD
   809     0   160     5     0    24     0      45  static
   810     0   160    12     0    24     0      12  short
   811     0   160    18     0    24     0     111  getShortB
   812     0   160    27     0    24     0      59  (
   813     0   160    28     0    24     0      53  long
   814     0   160    33     0    24     0     111  a
   815     0   160    34     0    24     0      60  )
   816     0   160    36     0    24     0      63  {
   817     0   161     9     0    24     0      19  return
   818     0   161    16     0    24     0     111  makeShort
   819     0   161    25     0    24     0      59  (
   820     0   161    26     0    24     0     111  _get
   821     0   161    30     0    24     0      59  (
   822     0   161    31     0    24     0     111  a
   823     0   161    32     0    24     0      60  )
   824     0   161    33     0    24     0      66  ,
   825     0   162    26     0    24     0     111  _get
   826     0   162    30     0    24     0      59  (
   827     0   162    31     0    24     0     111  a
   828     0   162    33     0    24     0      74  +
   829     0   162    35     0    24     0     112  1
   830     0   162    36     0    24     0      60  )
   831     0   162    37     0    24     0      60  )
   832     0   162    38     0    24     0     102  ;
   833     0   163     5     0    24     0      64  }
   834     0   163     5     0    24     0     172  ENDMETHOD
   835     0   163     5     0    25     0     173  STARTMETHOD
   836     0   165     5     0    25     0      45  static
   837     0   165    12     0    25     0      12  short
   838     0   165    18     0    25     0     111  getShort
   839     0   165    26     0    25     0      59  (
   840     0   165    27     0    25     0     111  ByteBuffer
   841     0   165    38     0    25     0     111  bb
   842     0   165    40     0    25     0      66  ,
   843     0   165    42     0    25     0      36  int
   844     0   165    46     0    25     0     111  bi
   845     0   165    48     0    25     0      66  ,
   846     0   165    50     0    25     0      39  boolean
   847     0   165    58     0    25     0     111  bigEndian
   848     0   165    67     0    25     0      60  )
   849     0   165    69     0    25     0      63  {
   850     0   166     9     0    25     0      19  return
   851     0   166    16     0    25     0      59  (
   852     0   166    17     0    25     0     111  bigEndian
   853     0   166    27     0    25     0      58  ?
   854     0   166    29     0    25     0     111  getShortB
   855     0   166    38     0    25     0      59  (
   856     0   166    39     0    25     0     111  bb
   857     0   166    41     0    25     0      66  ,
   858     0   166    43     0    25     0     111  bi
   859     0   166    45     0    25     0      60  )
   860     0   166    47     0    25     0      65  :
   861     0   166    49     0    25     0     111  getShortL
   862     0   166    58     0    25     0      59  (
   863     0   166    59     0    25     0     111  bb
   864     0   166    61     0    25     0      66  ,
   865     0   166    63     0    25     0     111  bi
   866     0   166    65     0    25     0      60  )
   867     0   166    66     0    25     0      60  )
   868     0   166    67     0    25     0     102  ;
   869     0   167     5     0    25     0      64  }
   870     0   167     5     0    25     0     174  ENDMETHOD
   871     0   167     5     0    26     0     175  STARTMETHOD
   872     0   169     5     0    26     0      45  static
   873     0   169    12     0    26     0      12  short
   874     0   169    18     0    26     0     111  getShort
   875     0   169    26     0    26     0      59  (
   876     0   169    27     0    26     0      53  long
   877     0   169    32     0    26     0     111  a
   878     0   169    33     0    26     0      66  ,
   879     0   169    35     0    26     0      39  boolean
   880     0   169    43     0    26     0     111  bigEndian
   881     0   169    52     0    26     0      60  )
   882     0   169    54     0    26     0      63  {
   883     0   170     9     0    26     0      19  return
   884     0   170    16     0    26     0      59  (
   885     0   170    17     0    26     0     111  bigEndian
   886     0   170    27     0    26     0      58  ?
   887     0   170    29     0    26     0     111  getShortB
   888     0   170    38     0    26     0      59  (
   889     0   170    39     0    26     0     111  a
   890     0   170    40     0    26     0      60  )
   891     0   170    42     0    26     0      65  :
   892     0   170    44     0    26     0     111  getShortL
   893     0   170    53     0    26     0      59  (
   894     0   170    54     0    26     0     111  a
   895     0   170    55     0    26     0      60  )
   896     0   170    56     0    26     1      60  )
   897     0   170    57     0    26     1     102  ;
   898     0   171     5     0    26     1      64  }
   899     0   171     5     0    26     0     176  ENDMETHOD
   900     0   171     5     0    27     0     177  STARTMETHOD
   901     0   173     5     0    27     0      41  private
   902     0   173    13     0    27     0      45  static
   903     0   173    20     0    27     0       9  byte
   904     0   173    25     0    27     0     111  short1
   905     0   173    31     0    27     0      59  (
   906     0   173    32     0    27     0      12  short
   907     0   173    38     0    27     0     111  x
   908     0   173    39     0    27     0      60  )
   909     0   173    41     0    27     0      63  {
   910     0   173    43     0    27     0      19  return
   911     0   173    50     0    27     0      59  (
   912     0   173    51     0    27     0       9  byte
   913     0   173    55     0    27     0      60  )
   914     0   173    56     0    27     0      59  (
   915     0   173    57     0    27     0     111  x
   916     0   173    59     0    27     0      84  >>
   917     0   173    62     0    27     0     112  8
   918     0   173    63     0    27     1      60  )
   919     0   173    64     0    27     1     102  ;
   920     0   173    66     0    27     1      64  }
   921     0   173    66     0    27     0     178  ENDMETHOD
   922     0   173    66     0    28     0     179  STARTMETHOD
   923     0   174     5     0    28     0      41  private
   924     0   174    13     0    28     0      45  static
   925     0   174    20     0    28     0       9  byte
   926     0   174    25     0    28     0     111  short0
   927     0   174    31     0    28     0      59  (
   928     0   174    32     0    28     0      12  short
   929     0   174    38     0    28     0     111  x
   930     0   174    39     0    28     0      60  )
   931     0   174    41     0    28     0      63  {
   932     0   174    43     0    28     0      19  return
   933     0   174    50     0    28     0      59  (
   934     0   174    51     0    28     0       9  byte
   935     0   174    55     0    28     0      60  )
   936     0   174    56     0    28     0      59  (
   937     0   174    57     0    28     0     111  x
   938     0   174    59     0    28     0      84  >>
   939     0   174    62     0    28     0     112  0
   940     0   174    63     0    28     1      60  )
   941     0   174    64     0    28     1     102  ;
   942     0   174    66     0    28     1      64  }
   943     0   174    66     0    28     0     180  ENDMETHOD
   944     0   174    66     0    29     0     181  STARTMETHOD
   945     0   176     5     0    29     0      45  static
   946     0   176    12     0    29     0      50  void
   947     0   176    17     0    29     0     111  putShortL
   948     0   176    26     0    29     0      59  (
   949     0   176    27     0    29     0     111  ByteBuffer
   950     0   176    38     0    29     0     111  bb
   951     0   176    40     0    29     0      66  ,
   952     0   176    42     0    29     0      36  int
   953     0   176    46     0    29     0     111  bi
   954     0   176    48     0    29     0      66  ,
   955     0   176    50     0    29     0      12  short
   956     0   176    56     0    29     0     111  x
   957     0   176    57     0    29     0      60  )
   958     0   176    59     0    29     0      63  {
   959     0   177     9     0    29     1     111  bb._put
   960     0   177    16     0    29     1      59  (
   961     0   177    17     0    29     1     111  bi
   962     0   177    20     0    29     1      74  +
   963     0   177    22     0    29     1     112  0
   964     0   177    23     0    29     1      66  ,
   965     0   177    25     0    29     1     111  short0
   966     0   177    31     0    29     1      59  (
   967     0   177    32     0    29     1     111  x
   968     0   177    33     0    29     1      60  )
   969     0   177    34     0    29     1      60  )
   970     0   177    35     0    29     1     102  ;
   971     0   178     9     0    29     1     111  bb._put
   972     0   178    16     0    29     1      59  (
   973     0   178    17     0    29     1     111  bi
   974     0   178    20     0    29     1      74  +
   975     0   178    22     0    29     1     112  1
   976     0   178    23     0    29     1      66  ,
   977     0   178    25     0    29     1     111  short1
   978     0   178    31     0    29     1      59  (
   979     0   178    32     0    29     1     111  x
   980     0   178    33     0    29     1      60  )
   981     0   178    34     0    29     1      60  )
   982     0   178    35     0    29     1     102  ;
   983     0   179     5     0    29     0      64  }
   984     0   179     5     0    29     0     182  ENDMETHOD
   985     0   179     5     0    30     0     183  STARTMETHOD
   986     0   181     5     0    30     0      45  static
   987     0   181    12     0    30     0      50  void
   988     0   181    17     0    30     0     111  putShortL
   989     0   181    26     0    30     0      59  (
   990     0   181    27     0    30     0      53  long
   991     0   181    32     0    30     0     111  a
   992     0   181    33     0    30     0      66  ,
   993     0   181    35     0    30     0      12  short
   994     0   181    41     0    30     0     111  x
   995     0   181    42     0    30     0      60  )
   996     0   181    44     0    30     0      63  {
   997     0   182     9     0    30     0     111  _put
   998     0   182    13     0    30     0      59  (
   999     0   182    14     0    30     0     111  a
  1000     0   182    15     0    30     0      66  ,
  1001     0   182    17     0    30     0     111  short0
  1002     0   182    23     0    30     0      59  (
  1003     0   182    24     0    30     0     111  x
  1004     0   182    25     0    30     0      60  )
  1005     0   182    26     0    30     0      60  )
  1006     0   182    27     0    30     0     102  ;
  1007     0   183     9     0    30     0     111  _put
  1008     0   183    13     0    30     0      59  (
  1009     0   183    14     0    30     0     111  a
  1010     0   183    16     0    30     0      74  +
  1011     0   183    18     0    30     0     112  1
  1012     0   183    19     0    30     0      66  ,
  1013     0   183    21     0    30     0     111  short1
  1014     0   183    27     0    30     0      59  (
  1015     0   183    28     0    30     0     111  x
  1016     0   183    29     0    30     0      60  )
  1017     0   183    30     0    30     0      60  )
  1018     0   183    31     0    30     0     102  ;
  1019     0   184     5     0    30     0      64  }
  1020     0   184     5     0    30     0     184  ENDMETHOD
  1021     0   184     5     0    31     0     185  STARTMETHOD
  1022     0   186     5     0    31     0      45  static
  1023     0   186    12     0    31     0      50  void
  1024     0   186    17     0    31     0     111  putShortB
  1025     0   186    26     0    31     0      59  (
  1026     0   186    27     0    31     0     111  ByteBuffer
  1027     0   186    38     0    31     0     111  bb
  1028     0   186    40     0    31     0      66  ,
  1029     0   186    42     0    31     0      36  int
  1030     0   186    46     0    31     0     111  bi
  1031     0   186    48     0    31     0      66  ,
  1032     0   186    50     0    31     0      12  short
  1033     0   186    56     0    31     0     111  x
  1034     0   186    57     0    31     0      60  )
  1035     0   186    59     0    31     0      63  {
  1036     0   187     9     0    31     1     111  bb._put
  1037     0   187    16     0    31     1      59  (
  1038     0   187    17     0    31     1     111  bi
  1039     0   187    20     0    31     1      74  +
  1040     0   187    22     0    31     1     112  0
  1041     0   187    23     0    31     1      66  ,
  1042     0   187    25     0    31     1     111  short1
  1043     0   187    31     0    31     1      59  (
  1044     0   187    32     0    31     1     111  x
  1045     0   187    33     0    31     1      60  )
  1046     0   187    34     0    31     1      60  )
  1047     0   187    35     0    31     1     102  ;
  1048     0   188     9     0    31     1     111  bb._put
  1049     0   188    16     0    31     1      59  (
  1050     0   188    17     0    31     1     111  bi
  1051     0   188    20     0    31     1      74  +
  1052     0   188    22     0    31     1     112  1
  1053     0   188    23     0    31     1      66  ,
  1054     0   188    25     0    31     1     111  short0
  1055     0   188    31     0    31     1      59  (
  1056     0   188    32     0    31     1     111  x
  1057     0   188    33     0    31     1      60  )
  1058     0   188    34     0    31     1      60  )
  1059     0   188    35     0    31     1     102  ;
  1060     0   189     5     0    31     0      64  }
  1061     0   189     5     0    31     0     186  ENDMETHOD
  1062     0   189     5     0    32     0     187  STARTMETHOD
  1063     0   191     5     0    32     0      45  static
  1064     0   191    12     0    32     0      50  void
  1065     0   191    17     0    32     0     111  putShortB
  1066     0   191    26     0    32     0      59  (
  1067     0   191    27     0    32     0      53  long
  1068     0   191    32     0    32     0     111  a
  1069     0   191    33     0    32     0      66  ,
  1070     0   191    35     0    32     0      12  short
  1071     0   191    41     0    32     0     111  x
  1072     0   191    42     0    32     0      60  )
  1073     0   191    44     0    32     0      63  {
  1074     0   192     9     0    32     0     111  _put
  1075     0   192    13     0    32     0      59  (
  1076     0   192    14     0    32     0     111  a
  1077     0   192    15     0    32     0      66  ,
  1078     0   192    17     0    32     0     111  short1
  1079     0   192    23     0    32     0      59  (
  1080     0   192    24     0    32     0     111  x
  1081     0   192    25     0    32     0      60  )
  1082     0   192    26     0    32     0      60  )
  1083     0   192    27     0    32     0     102  ;
  1084     0   193     9     0    32     0     111  _put
  1085     0   193    13     0    32     0      59  (
  1086     0   193    14     0    32     0     111  a
  1087     0   193    16     0    32     0      74  +
  1088     0   193    18     0    32     0     112  1
  1089     0   193    19     0    32     0      66  ,
  1090     0   193    21     0    32     0     111  short0
  1091     0   193    27     0    32     0      59  (
  1092     0   193    28     0    32     0     111  x
  1093     0   193    29     0    32     0      60  )
  1094     0   193    30     0    32     0      60  )
  1095     0   193    31     0    32     0     102  ;
  1096     0   194     5     0    32     0      64  }
  1097     0   194     5     0    32     0     188  ENDMETHOD
  1098     0   194     5     0    33     0     189  STARTMETHOD
  1099     0   196     5     0    33     0      45  static
  1100     0   196    12     0    33     0      50  void
  1101     0   196    17     0    33     0     111  putShort
  1102     0   196    25     0    33     0      59  (
  1103     0   196    26     0    33     0     111  ByteBuffer
  1104     0   196    37     0    33     0     111  bb
  1105     0   196    39     0    33     0      66  ,
  1106     0   196    41     0    33     0      36  int
  1107     0   196    45     0    33     0     111  bi
  1108     0   196    47     0    33     0      66  ,
  1109     0   196    49     0    33     0      12  short
  1110     0   196    55     0    33     0     111  x
  1111     0   196    56     0    33     0      66  ,
  1112     0   196    58     0    33     0      39  boolean
  1113     0   196    66     0    33     0     111  bigEndian
  1114     0   196    75     0    33     0      60  )
  1115     0   196    77     0    33     0      63  {
  1116     0   197     9     0    33     0      31  if
  1117     0   197    12     0    33     0      59  (
  1118     0   197    13     0    33     0     111  bigEndian
  1119     0   197    22     0    33     0      60  )
  1120     0   198    13     0    33     0     111  putShortB
  1121     0   198    22     0    33     0      59  (
  1122     0   198    23     0    33     0     111  bb
  1123     0   198    25     0    33     0      66  ,
  1124     0   198    27     0    33     0     111  bi
  1125     0   198    29     0    33     0      66  ,
  1126     0   198    31     0    33     0     111  x
  1127     0   198    32     0    33     0      60  )
  1128     0   198    33     0    33     0     102  ;
  1129     0   199     9     0    33     0      48  else
  1130     0   200    13     0    33     0     111  putShortL
  1131     0   200    22     0    33     0      59  (
  1132     0   200    23     0    33     0     111  bb
  1133     0   200    25     0    33     0      66  ,
  1134     0   200    27     0    33     0     111  bi
  1135     0   200    29     0    33     0      66  ,
  1136     0   200    31     0    33     0     111  x
  1137     0   200    32     0    33     0      60  )
  1138     0   200    33     0    33     0     102  ;
  1139     0   201     5     0    33     0      64  }
  1140     0   201     5     0    33     0     190  ENDMETHOD
  1141     0   201     5     0    34     0     191  STARTMETHOD
  1142     0   203     5     0    34     0      45  static
  1143     0   203    12     0    34     0      50  void
  1144     0   203    17     0    34     0     111  putShort
  1145     0   203    25     0    34     0      59  (
  1146     0   203    26     0    34     0      53  long
  1147     0   203    31     0    34     0     111  a
  1148     0   203    32     0    34     0      66  ,
  1149     0   203    34     0    34     0      12  short
  1150     0   203    40     0    34     0     111  x
  1151     0   203    41     0    34     0      66  ,
  1152     0   203    43     0    34     0      39  boolean
  1153     0   203    51     0    34     0     111  bigEndian
  1154     0   203    60     0    34     0      60  )
  1155     0   203    62     0    34     0      63  {
  1156     0   204     9     0    34     0      31  if
  1157     0   204    12     0    34     0      59  (
  1158     0   204    13     0    34     0     111  bigEndian
  1159     0   204    22     0    34     0      60  )
  1160     0   205    13     0    34     0     111  putShortB
  1161     0   205    22     0    34     0      59  (
  1162     0   205    23     0    34     0     111  a
  1163     0   205    24     0    34     0      66  ,
  1164     0   205    26     0    34     0     111  x
  1165     0   205    27     0    34     0      60  )
  1166     0   205    28     0    34     0     102  ;
  1167     0   206     9     0    34     0      48  else
  1168     0   207    13     0    34     0     111  putShortL
  1169     0   207    22     0    34     0      59  (
  1170     0   207    23     0    34     0     111  a
  1171     0   207    24     0    34     0      66  ,
  1172     0   207    26     0    34     0     111  x
  1173     0   207    27     0    34     0      60  )
  1174     0   207    28     0    34     0     102  ;
  1175     0   208     5     0    34     0      64  }
  1176     0   208     5     0    34     0     192  ENDMETHOD
  1177     0   208     5     0    35     0     193  STARTMETHOD
  1178     0   213     5     0    35     0      45  static
  1179     0   213    12     0    35     0      41  private
  1180     0   213    20     0    35     0      36  int
  1181     0   213    24     0    35     0     111  makeInt
  1182     0   213    31     0    35     0      59  (
  1183     0   213    32     0    35     0       9  byte
  1184     0   213    37     0    35     0     111  b3
  1185     0   213    39     0    35     0      66  ,
  1186     0   213    41     0    35     0       9  byte
  1187     0   213    46     0    35     0     111  b2
  1188     0   213    48     0    35     0      66  ,
  1189     0   213    50     0    35     0       9  byte
  1190     0   213    55     0    35     0     111  b1
  1191     0   213    57     0    35     0      66  ,
  1192     0   213    59     0    35     0       9  byte
  1193     0   213    64     0    35     0     111  b0
  1194     0   213    66     0    35     0      60  )
  1195     0   213    68     0    35     0      63  {
  1196     0   214     9     0    35     0      19  return
  1197     0   214    16     0    35     0      59  (
  1198     0   214    17     0    35     1      59  (
  1199     0   214    18     0    35     1      59  (
  1200     0   214    19     0    35     1     111  b3
  1201     0   214    22     0    35     1      99  &
  1202     0   214    24     0    35     1     112  0xff
  1203     0   214    28     0    35     1      60  )
  1204     0   214    30     0    35     0      90  <<
  1205     0   214    33     0    35     0     112  24
  1206     0   214    35     0    35     0      60  )
  1207     0   214    37     0    35     0      96  |
  1208     0   215    17     0    35     1      59  (
  1209     0   215    18     0    35     1      59  (
  1210     0   215    19     0    35     1     111  b2
  1211     0   215    22     0    35     1      99  &
  1212     0   215    24     0    35     1     112  0xff
  1213     0   215    28     0    35     1      60  )
  1214     0   215    30     0    35     1      90  <<
  1215     0   215    33     0    35     1     112  16
  1216     0   215    35     0    35     1      60  )
  1217     0   215    37     0    35     1      96  |
  1218     0   216    17     0    35     1      59  (
  1219     0   216    18     0    35     1      59  (
  1220     0   216    19     0    35     1     111  b1
  1221     0   216    22     0    35     1      99  &
  1222     0   216    24     0    35     1     112  0xff
  1223     0   216    28     0    35     1      60  )
  1224     0   216    30     0    35     1      90  <<
  1225     0   216    34     0    35     1     112  8
  1226     0   216    35     0    35     1      60  )
  1227     0   216    37     0    35     1      96  |
  1228     0   217    17     0    35     0      59  (
  1229     0   217    18     0    35     0      59  (
  1230     0   217    19     0    35     0     111  b0
  1231     0   217    22     0    35     0      99  &
  1232     0   217    24     0    35     0     112  0xff
  1233     0   217    28     0    35     0      60  )
  1234     0   217    30     0    35     0      90  <<
  1235     0   217    34     0    35     0     112  0
  1236     0   217    35     0    35     0      60  )
  1237     0   217    36     0    35     0      60  )
  1238     0   217    37     0    35     0     102  ;
  1239     0   218     5     0    35     0      64  }
  1240     0   218     5     0    35     0     194  ENDMETHOD
  1241     0   218     5     0    36     0     195  STARTMETHOD
  1242     0   220     5     0    36     0      45  static
  1243     0   220    12     0    36     0      36  int
  1244     0   220    16     0    36     0     111  getIntL
  1245     0   220    23     0    36     0      59  (
  1246     0   220    24     0    36     0     111  ByteBuffer
  1247     0   220    35     0    36     0     111  bb
  1248     0   220    37     0    36     0      66  ,
  1249     0   220    39     0    36     0      36  int
  1250     0   220    43     0    36     0     111  bi
  1251     0   220    45     0    36     0      60  )
  1252     0   220    47     0    36     0      63  {
  1253     0   221     9     0    36     0      19  return
  1254     0   221    16     0    36     0     111  makeInt
  1255     0   221    23     0    36     0      59  (
  1256     0   221    24     0    36     0     111  bb._get
  1257     0   221    31     0    36     0      59  (
  1258     0   221    32     0    36     0     111  bi
  1259     0   221    35     0    36     0      74  +
  1260     0   221    37     0    36     0     112  3
  1261     0   221    38     0    36     0      60  )
  1262     0   221    39     0    36     0      66  ,
  1263     0   222    24     0    36     1     111  bb._get
  1264     0   222    31     0    36     1      59  (
  1265     0   222    32     0    36     1     111  bi
  1266     0   222    35     0    36     1      74  +
  1267     0   222    37     0    36     1     112  2
  1268     0   222    38     0    36     1      60  )
  1269     0   222    39     0    36     1      66  ,
  1270     0   223    24     0    36     1     111  bb._get
  1271     0   223    31     0    36     1      59  (
  1272     0   223    32     0    36     1     111  bi
  1273     0   223    35     0    36     1      74  +
  1274     0   223    37     0    36     1     112  1
  1275     0   223    38     0    36     1      60  )
  1276     0   223    39     0    36     1      66  ,
  1277     0   224    24     0    36     0     111  bb._get
  1278     0   224    31     0    36     0      59  (
  1279     0   224    32     0    36     0     111  bi
  1280     0   224    35     0    36     0      74  +
  1281     0   224    37     0    36     0     112  0
  1282     0   224    38     0    36     0      60  )
  1283     0   224    39     0    36     0      60  )
  1284     0   224    40     0    36     0     102  ;
  1285     0   225     5     0    36     0      64  }
  1286     0   225     5     0    36     0     196  ENDMETHOD
  1287     0   225     5     0    37     0     197  STARTMETHOD
  1288     0   227     5     0    37     0      45  static
  1289     0   227    12     0    37     0      36  int
  1290     0   227    16     0    37     0     111  getIntL
  1291     0   227    23     0    37     0      59  (
  1292     0   227    24     0    37     0      53  long
  1293     0   227    29     0    37     0     111  a
  1294     0   227    30     0    37     0      60  )
  1295     0   227    32     0    37     0      63  {
  1296     0   228     9     0    37     0      19  return
  1297     0   228    16     0    37     0     111  makeInt
  1298     0   228    23     0    37     0      59  (
  1299     0   228    24     0    37     0     111  _get
  1300     0   228    28     0    37     0      59  (
  1301     0   228    29     0    37     0     111  a
  1302     0   228    31     0    37     0      74  +
  1303     0   228    33     0    37     0     112  3
  1304     0   228    34     0    37     0      60  )
  1305     0   228    35     0    37     0      66  ,
  1306     0   229    24     0    37     1     111  _get
  1307     0   229    28     0    37     1      59  (
  1308     0   229    29     0    37     1     111  a
  1309     0   229    31     0    37     1      74  +
  1310     0   229    33     0    37     1     112  2
  1311     0   229    34     0    37     1      60  )
  1312     0   229    35     0    37     1      66  ,
  1313     0   230    24     0    37     1     111  _get
  1314     0   230    28     0    37     1      59  (
  1315     0   230    29     0    37     1     111  a
  1316     0   230    31     0    37     1      74  +
  1317     0   230    33     0    37     1     112  1
  1318     0   230    34     0    37     1      60  )
  1319     0   230    35     0    37     1      66  ,
  1320     0   231    24     0    37     0     111  _get
  1321     0   231    28     0    37     0      59  (
  1322     0   231    29     0    37     0     111  a
  1323     0   231    31     0    37     0      74  +
  1324     0   231    33     0    37     0     112  0
  1325     0   231    34     0    37     0      60  )
  1326     0   231    35     0    37     0      60  )
  1327     0   231    36     0    37     0     102  ;
  1328     0   232     5     0    37     0      64  }
  1329     0   232     5     0    37     0     198  ENDMETHOD
  1330     0   232     5     0    38     0     199  STARTMETHOD
  1331     0   234     5     0    38     0      45  static
  1332     0   234    12     0    38     0      36  int
  1333     0   234    16     0    38     0     111  getIntB
  1334     0   234    23     0    38     0      59  (
  1335     0   234    24     0    38     0     111  ByteBuffer
  1336     0   234    35     0    38     0     111  bb
  1337     0   234    37     0    38     0      66  ,
  1338     0   234    39     0    38     0      36  int
  1339     0   234    43     0    38     0     111  bi
  1340     0   234    45     0    38     0      60  )
  1341     0   234    47     0    38     0      63  {
  1342     0   235     9     0    38     0      19  return
  1343     0   235    16     0    38     0     111  makeInt
  1344     0   235    23     0    38     0      59  (
  1345     0   235    24     0    38     0     111  bb._get
  1346     0   235    31     0    38     0      59  (
  1347     0   235    32     0    38     0     111  bi
  1348     0   235    35     0    38     0      74  +
  1349     0   235    37     0    38     0     112  0
  1350     0   235    38     0    38     0      60  )
  1351     0   235    39     0    38     0      66  ,
  1352     0   236    24     0    38     1     111  bb._get
  1353     0   236    31     0    38     1      59  (
  1354     0   236    32     0    38     1     111  bi
  1355     0   236    35     0    38     1      74  +
  1356     0   236    37     0    38     1     112  1
  1357     0   236    38     0    38     1      60  )
  1358     0   236    39     0    38     1      66  ,
  1359     0   237    24     0    38     1     111  bb._get
  1360     0   237    31     0    38     1      59  (
  1361     0   237    32     0    38     1     111  bi
  1362     0   237    35     0    38     1      74  +
  1363     0   237    37     0    38     1     112  2
  1364     0   237    38     0    38     1      60  )
  1365     0   237    39     0    38     1      66  ,
  1366     0   238    24     0    38     0     111  bb._get
  1367     0   238    31     0    38     0      59  (
  1368     0   238    32     0    38     0     111  bi
  1369     0   238    35     0    38     0      74  +
  1370     0   238    37     0    38     0     112  3
  1371     0   238    38     0    38     0      60  )
  1372     0   238    39     0    38     0      60  )
  1373     0   238    40     0    38     0     102  ;
  1374     0   239     5     0    38     0      64  }
  1375     0   239     5     0    38     0     200  ENDMETHOD
  1376     0   239     5     0    39     0     201  STARTMETHOD
  1377     0   241     5     0    39     0      45  static
  1378     0   241    12     0    39     0      36  int
  1379     0   241    16     0    39     0     111  getIntB
  1380     0   241    23     0    39     0      59  (
  1381     0   241    24     0    39     0      53  long
  1382     0   241    29     0    39     0     111  a
  1383     0   241    30     0    39     0      60  )
  1384     0   241    32     0    39     0      63  {
  1385     0   242     9     0    39     0      19  return
  1386     0   242    16     0    39     0     111  makeInt
  1387     0   242    23     0    39     0      59  (
  1388     0   242    24     0    39     0     111  _get
  1389     0   242    28     0    39     0      59  (
  1390     0   242    29     0    39     0     111  a
  1391     0   242    31     0    39     0      74  +
  1392     0   242    33     0    39     0     112  0
  1393     0   242    34     0    39     0      60  )
  1394     0   242    35     0    39     0      66  ,
  1395     0   243    24     0    39     1     111  _get
  1396     0   243    28     0    39     1      59  (
  1397     0   243    29     0    39     1     111  a
  1398     0   243    31     0    39     1      74  +
  1399     0   243    33     0    39     1     112  1
  1400     0   243    34     0    39     1      60  )
  1401     0   243    35     0    39     1      66  ,
  1402     0   244    24     0    39     1     111  _get
  1403     0   244    28     0    39     1      59  (
  1404     0   244    29     0    39     1     111  a
  1405     0   244    31     0    39     1      74  +
  1406     0   244    33     0    39     1     112  2
  1407     0   244    34     0    39     1      60  )
  1408     0   244    35     0    39     1      66  ,
  1409     0   245    24     0    39     0     111  _get
  1410     0   245    28     0    39     0      59  (
  1411     0   245    29     0    39     0     111  a
  1412     0   245    31     0    39     0      74  +
  1413     0   245    33     0    39     0     112  3
  1414     0   245    34     0    39     0      60  )
  1415     0   245    35     0    39     0      60  )
  1416     0   245    36     0    39     0     102  ;
  1417     0   246     5     0    39     0      64  }
  1418     0   246     5     0    39     0     202  ENDMETHOD
  1419     0   246     5     0    40     0     203  STARTMETHOD
  1420     0   248     5     0    40     0      45  static
  1421     0   248    12     0    40     0      36  int
  1422     0   248    16     0    40     0     111  getInt
  1423     0   248    22     0    40     0      59  (
  1424     0   248    23     0    40     0     111  ByteBuffer
  1425     0   248    34     0    40     0     111  bb
  1426     0   248    36     0    40     0      66  ,
  1427     0   248    38     0    40     0      36  int
  1428     0   248    42     0    40     0     111  bi
  1429     0   248    44     0    40     0      66  ,
  1430     0   248    46     0    40     0      39  boolean
  1431     0   248    54     0    40     0     111  bigEndian
  1432     0   248    63     0    40     0      60  )
  1433     0   248    65     0    40     0      63  {
  1434     0   249     9     0    40     0      19  return
  1435     0   249    16     0    40     0      59  (
  1436     0   249    17     0    40     0     111  bigEndian
  1437     0   249    27     0    40     0      58  ?
  1438     0   249    29     0    40     0     111  getIntB
  1439     0   249    36     0    40     0      59  (
  1440     0   249    37     0    40     0     111  bb
  1441     0   249    39     0    40     0      66  ,
  1442     0   249    41     0    40     0     111  bi
  1443     0   249    43     0    40     0      60  )
  1444     0   249    45     0    40     0      65  :
  1445     0   249    47     0    40     0     111  getIntL
  1446     0   249    54     0    40     0      59  (
  1447     0   249    55     0    40     0     111  bb
  1448     0   249    57     0    40     0      66  ,
  1449     0   249    59     0    40     0     111  bi
  1450     0   249    61     0    40     0      60  )
  1451     0   249    62     0    40     0      60  )
  1452     0   249    63     0    40     0     102  ;
  1453     0   250     5     0    40     0      64  }
  1454     0   250     5     0    40     0     204  ENDMETHOD
  1455     0   250     5     0    41     0     205  STARTMETHOD
  1456     0   252     5     0    41     0      45  static
  1457     0   252    12     0    41     0      36  int
  1458     0   252    16     0    41     0     111  getInt
  1459     0   252    22     0    41     0      59  (
  1460     0   252    23     0    41     0      53  long
  1461     0   252    28     0    41     0     111  a
  1462     0   252    29     0    41     0      66  ,
  1463     0   252    31     0    41     0      39  boolean
  1464     0   252    39     0    41     0     111  bigEndian
  1465     0   252    48     0    41     0      60  )
  1466     0   252    50     0    41     0      63  {
  1467     0   253     9     0    41     0      19  return
  1468     0   253    16     0    41     0      59  (
  1469     0   253    17     0    41     0     111  bigEndian
  1470     0   253    27     0    41     0      58  ?
  1471     0   253    29     0    41     0     111  getIntB
  1472     0   253    36     0    41     0      59  (
  1473     0   253    37     0    41     0     111  a
  1474     0   253    38     0    41     0      60  )
  1475     0   253    40     0    41     0      65  :
  1476     0   253    42     0    41     0     111  getIntL
  1477     0   253    49     0    41     0      59  (
  1478     0   253    50     0    41     0     111  a
  1479     0   253    51     0    41     0      60  )
  1480     0   253    52     0    41     1      60  )
  1481     0   253    53     0    41     1     102  ;
  1482     0   254     5     0    41     1      64  }
  1483     0   254     5     0    41     0     206  ENDMETHOD
  1484     0   254     5     0    42     0     207  STARTMETHOD
  1485     0   256     5     0    42     1      41  private
  1486     0   256    13     0    42     1      45  static
  1487     0   256    20     0    42     1       9  byte
  1488     0   256    25     0    42     1     111  int3
  1489     0   256    29     0    42     1      59  (
  1490     0   256    30     0    42     1      36  int
  1491     0   256    34     0    42     1     111  x
  1492     0   256    35     0    42     1      60  )
  1493     0   256    37     0    42     1      63  {
  1494     0   256    39     0    42     1      19  return
  1495     0   256    46     0    42     1      59  (
  1496     0   256    47     0    42     1       9  byte
  1497     0   256    51     0    42     1      60  )
  1498     0   256    52     0    42     1      59  (
  1499     0   256    53     0    42     1     111  x
  1500     0   256    55     0    42     1      84  >>
  1501     0   256    58     0    42     1     112  24
  1502     0   256    60     0    42     1      60  )
  1503     0   256    61     0    42     1     102  ;
  1504     0   256    63     0    42     1      64  }
  1505     0   256    63     0    42     0     208  ENDMETHOD
  1506     0   256    63     0    43     0     209  STARTMETHOD
  1507     0   257     5     0    43     1      41  private
  1508     0   257    13     0    43     1      45  static
  1509     0   257    20     0    43     1       9  byte
  1510     0   257    25     0    43     1     111  int2
  1511     0   257    29     0    43     1      59  (
  1512     0   257    30     0    43     1      36  int
  1513     0   257    34     0    43     1     111  x
  1514     0   257    35     0    43     1      60  )
  1515     0   257    37     0    43     1      63  {
  1516     0   257    39     0    43     1      19  return
  1517     0   257    46     0    43     1      59  (
  1518     0   257    47     0    43     1       9  byte
  1519     0   257    51     0    43     1      60  )
  1520     0   257    52     0    43     1      59  (
  1521     0   257    53     0    43     1     111  x
  1522     0   257    55     0    43     1      84  >>
  1523     0   257    58     0    43     1     112  16
  1524     0   257    60     0    43     1      60  )
  1525     0   257    61     0    43     1     102  ;
  1526     0   257    63     0    43     1      64  }
  1527     0   257    63     0    43     0     210  ENDMETHOD
  1528     0   257    63     0    44     0     211  STARTMETHOD
  1529     0   258     5     0    44     1      41  private
  1530     0   258    13     0    44     1      45  static
  1531     0   258    20     0    44     1       9  byte
  1532     0   258    25     0    44     1     111  int1
  1533     0   258    29     0    44     1      59  (
  1534     0   258    30     0    44     1      36  int
  1535     0   258    34     0    44     1     111  x
  1536     0   258    35     0    44     1      60  )
  1537     0   258    37     0    44     1      63  {
  1538     0   258    39     0    44     1      19  return
  1539     0   258    46     0    44     1      59  (
  1540     0   258    47     0    44     1       9  byte
  1541     0   258    51     0    44     1      60  )
  1542     0   258    52     0    44     1      59  (
  1543     0   258    53     0    44     1     111  x
  1544     0   258    55     0    44     1      84  >>
  1545     0   258    59     0    44     1     112  8
  1546     0   258    60     0    44     1      60  )
  1547     0   258    61     0    44     1     102  ;
  1548     0   258    63     0    44     1      64  }
  1549     0   258    63     0    44     0     212  ENDMETHOD
  1550     0   258    63     0    45     0     213  STARTMETHOD
  1551     0   259     5     0    45     1      41  private
  1552     0   259    13     0    45     1      45  static
  1553     0   259    20     0    45     1       9  byte
  1554     0   259    25     0    45     1     111  int0
  1555     0   259    29     0    45     1      59  (
  1556     0   259    30     0    45     1      36  int
  1557     0   259    34     0    45     1     111  x
  1558     0   259    35     0    45     1      60  )
  1559     0   259    37     0    45     1      63  {
  1560     0   259    39     0    45     1      19  return
  1561     0   259    46     0    45     1      59  (
  1562     0   259    47     0    45     1       9  byte
  1563     0   259    51     0    45     1      60  )
  1564     0   259    52     0    45     1      59  (
  1565     0   259    53     0    45     1     111  x
  1566     0   259    55     0    45     1      84  >>
  1567     0   259    59     0    45     1     112  0
  1568     0   259    60     0    45     1      60  )
  1569     0   259    61     0    45     1     102  ;
  1570     0   259    63     0    45     1      64  }
  1571     0   259    63     0    45     0     214  ENDMETHOD
  1572     0   259    63     0    46     0     215  STARTMETHOD
  1573     0   261     5     0    46     0      45  static
  1574     0   261    12     0    46     0      50  void
  1575     0   261    17     0    46     0     111  putIntL
  1576     0   261    24     0    46     0      59  (
  1577     0   261    25     0    46     0     111  ByteBuffer
  1578     0   261    36     0    46     0     111  bb
  1579     0   261    38     0    46     0      66  ,
  1580     0   261    40     0    46     0      36  int
  1581     0   261    44     0    46     0     111  bi
  1582     0   261    46     0    46     0      66  ,
  1583     0   261    48     0    46     0      36  int
  1584     0   261    52     0    46     0     111  x
  1585     0   261    53     0    46     0      60  )
  1586     0   261    55     0    46     0      63  {
  1587     0   262     9     0    46     1     111  bb._put
  1588     0   262    16     0    46     1      59  (
  1589     0   262    17     0    46     1     111  bi
  1590     0   262    20     0    46     1      74  +
  1591     0   262    22     0    46     1     112  3
  1592     0   262    23     0    46     1      66  ,
  1593     0   262    25     0    46     1     111  int3
  1594     0   262    29     0    46     1      59  (
  1595     0   262    30     0    46     1     111  x
  1596     0   262    31     0    46     1      60  )
  1597     0   262    32     0    46     1      60  )
  1598     0   262    33     0    46     1     102  ;
  1599     0   263     9     0    46     1     111  bb._put
  1600     0   263    16     0    46     1      59  (
  1601     0   263    17     0    46     1     111  bi
  1602     0   263    20     0    46     1      74  +
  1603     0   263    22     0    46     1     112  2
  1604     0   263    23     0    46     1      66  ,
  1605     0   263    25     0    46     1     111  int2
  1606     0   263    29     0    46     1      59  (
  1607     0   263    30     0    46     1     111  x
  1608     0   263    31     0    46     1      60  )
  1609     0   263    32     0    46     1      60  )
  1610     0   263    33     0    46     1     102  ;
  1611     0   264     9     0    46     1     111  bb._put
  1612     0   264    16     0    46     1      59  (
  1613     0   264    17     0    46     1     111  bi
  1614     0   264    20     0    46     1      74  +
  1615     0   264    22     0    46     1     112  1
  1616     0   264    23     0    46     1      66  ,
  1617     0   264    25     0    46     1     111  int1
  1618     0   264    29     0    46     1      59  (
  1619     0   264    30     0    46     1     111  x
  1620     0   264    31     0    46     1      60  )
  1621     0   264    32     0    46     1      60  )
  1622     0   264    33     0    46     1     102  ;
  1623     0   265     9     0    46     1     111  bb._put
  1624     0   265    16     0    46     1      59  (
  1625     0   265    17     0    46     1     111  bi
  1626     0   265    20     0    46     1      74  +
  1627     0   265    22     0    46     1     112  0
  1628     0   265    23     0    46     1      66  ,
  1629     0   265    25     0    46     1     111  int0
  1630     0   265    29     0    46     1      59  (
  1631     0   265    30     0    46     1     111  x
  1632     0   265    31     0    46     1      60  )
  1633     0   265    32     0    46     1      60  )
  1634     0   265    33     0    46     1     102  ;
  1635     0   266     5     0    46     0      64  }
  1636     0   266     5     0    46     0     216  ENDMETHOD
  1637     0   266     5     0    47     0     217  STARTMETHOD
  1638     0   268     5     0    47     0      45  static
  1639     0   268    12     0    47     0      50  void
  1640     0   268    17     0    47     0     111  putIntL
  1641     0   268    24     0    47     0      59  (
  1642     0   268    25     0    47     0      53  long
  1643     0   268    30     0    47     0     111  a
  1644     0   268    31     0    47     0      66  ,
  1645     0   268    33     0    47     0      36  int
  1646     0   268    37     0    47     0     111  x
  1647     0   268    38     0    47     0      60  )
  1648     0   268    40     0    47     0      63  {
  1649     0   269     9     0    47     1     111  _put
  1650     0   269    13     0    47     1      59  (
  1651     0   269    14     0    47     1     111  a
  1652     0   269    16     0    47     1      74  +
  1653     0   269    18     0    47     1     112  3
  1654     0   269    19     0    47     1      66  ,
  1655     0   269    21     0    47     1     111  int3
  1656     0   269    25     0    47     1      59  (
  1657     0   269    26     0    47     1     111  x
  1658     0   269    27     0    47     1      60  )
  1659     0   269    28     0    47     1      60  )
  1660     0   269    29     0    47     1     102  ;
  1661     0   270     9     0    47     1     111  _put
  1662     0   270    13     0    47     1      59  (
  1663     0   270    14     0    47     1     111  a
  1664     0   270    16     0    47     1      74  +
  1665     0   270    18     0    47     1     112  2
  1666     0   270    19     0    47     1      66  ,
  1667     0   270    21     0    47     1     111  int2
  1668     0   270    25     0    47     1      59  (
  1669     0   270    26     0    47     1     111  x
  1670     0   270    27     0    47     1      60  )
  1671     0   270    28     0    47     1      60  )
  1672     0   270    29     0    47     1     102  ;
  1673     0   271     9     0    47     1     111  _put
  1674     0   271    13     0    47     1      59  (
  1675     0   271    14     0    47     1     111  a
  1676     0   271    16     0    47     1      74  +
  1677     0   271    18     0    47     1     112  1
  1678     0   271    19     0    47     1      66  ,
  1679     0   271    21     0    47     1     111  int1
  1680     0   271    25     0    47     1      59  (
  1681     0   271    26     0    47     1     111  x
  1682     0   271    27     0    47     1      60  )
  1683     0   271    28     0    47     1      60  )
  1684     0   271    29     0    47     1     102  ;
  1685     0   272     9     0    47     1     111  _put
  1686     0   272    13     0    47     1      59  (
  1687     0   272    14     0    47     1     111  a
  1688     0   272    16     0    47     1      74  +
  1689     0   272    18     0    47     1     112  0
  1690     0   272    19     0    47     1      66  ,
  1691     0   272    21     0    47     1     111  int0
  1692     0   272    25     0    47     1      59  (
  1693     0   272    26     0    47     1     111  x
  1694     0   272    27     0    47     1      60  )
  1695     0   272    28     0    47     1      60  )
  1696     0   272    29     0    47     1     102  ;
  1697     0   273     5     0    47     0      64  }
  1698     0   273     5     0    47     0     218  ENDMETHOD
  1699     0   273     5     0    48     0     219  STARTMETHOD
  1700     0   275     5     0    48     0      45  static
  1701     0   275    12     0    48     0      50  void
  1702     0   275    17     0    48     0     111  putIntB
  1703     0   275    24     0    48     0      59  (
  1704     0   275    25     0    48     0     111  ByteBuffer
  1705     0   275    36     0    48     0     111  bb
  1706     0   275    38     0    48     0      66  ,
  1707     0   275    40     0    48     0      36  int
  1708     0   275    44     0    48     0     111  bi
  1709     0   275    46     0    48     0      66  ,
  1710     0   275    48     0    48     0      36  int
  1711     0   275    52     0    48     0     111  x
  1712     0   275    53     0    48     0      60  )
  1713     0   275    55     0    48     0      63  {
  1714     0   276     9     0    48     1     111  bb._put
  1715     0   276    16     0    48     1      59  (
  1716     0   276    17     0    48     1     111  bi
  1717     0   276    20     0    48     1      74  +
  1718     0   276    22     0    48     1     112  0
  1719     0   276    23     0    48     1      66  ,
  1720     0   276    25     0    48     1     111  int3
  1721     0   276    29     0    48     1      59  (
  1722     0   276    30     0    48     1     111  x
  1723     0   276    31     0    48     1      60  )
  1724     0   276    32     0    48     1      60  )
  1725     0   276    33     0    48     1     102  ;
  1726     0   277     9     0    48     1     111  bb._put
  1727     0   277    16     0    48     1      59  (
  1728     0   277    17     0    48     1     111  bi
  1729     0   277    20     0    48     1      74  +
  1730     0   277    22     0    48     1     112  1
  1731     0   277    23     0    48     1      66  ,
  1732     0   277    25     0    48     1     111  int2
  1733     0   277    29     0    48     1      59  (
  1734     0   277    30     0    48     1     111  x
  1735     0   277    31     0    48     1      60  )
  1736     0   277    32     0    48     1      60  )
  1737     0   277    33     0    48     1     102  ;
  1738     0   278     9     0    48     1     111  bb._put
  1739     0   278    16     0    48     1      59  (
  1740     0   278    17     0    48     1     111  bi
  1741     0   278    20     0    48     1      74  +
  1742     0   278    22     0    48     1     112  2
  1743     0   278    23     0    48     1      66  ,
  1744     0   278    25     0    48     1     111  int1
  1745     0   278    29     0    48     1      59  (
  1746     0   278    30     0    48     1     111  x
  1747     0   278    31     0    48     1      60  )
  1748     0   278    32     0    48     1      60  )
  1749     0   278    33     0    48     1     102  ;
  1750     0   279     9     0    48     1     111  bb._put
  1751     0   279    16     0    48     1      59  (
  1752     0   279    17     0    48     1     111  bi
  1753     0   279    20     0    48     1      74  +
  1754     0   279    22     0    48     1     112  3
  1755     0   279    23     0    48     1      66  ,
  1756     0   279    25     0    48     1     111  int0
  1757     0   279    29     0    48     1      59  (
  1758     0   279    30     0    48     1     111  x
  1759     0   279    31     0    48     1      60  )
  1760     0   279    32     0    48     1      60  )
  1761     0   279    33     0    48     1     102  ;
  1762     0   280     5     0    48     0      64  }
  1763     0   280     5     0    48     0     220  ENDMETHOD
  1764     0   280     5     0    49     0     221  STARTMETHOD
  1765     0   282     5     0    49     0      45  static
  1766     0   282    12     0    49     0      50  void
  1767     0   282    17     0    49     0     111  putIntB
  1768     0   282    24     0    49     0      59  (
  1769     0   282    25     0    49     0      53  long
  1770     0   282    30     0    49     0     111  a
  1771     0   282    31     0    49     0      66  ,
  1772     0   282    33     0    49     0      36  int
  1773     0   282    37     0    49     0     111  x
  1774     0   282    38     0    49     0      60  )
  1775     0   282    40     0    49     0      63  {
  1776     0   283     9     0    49     1     111  _put
  1777     0   283    13     0    49     1      59  (
  1778     0   283    14     0    49     1     111  a
  1779     0   283    16     0    49     1      74  +
  1780     0   283    18     0    49     1     112  0
  1781     0   283    19     0    49     1      66  ,
  1782     0   283    21     0    49     1     111  int3
  1783     0   283    25     0    49     1      59  (
  1784     0   283    26     0    49     1     111  x
  1785     0   283    27     0    49     1      60  )
  1786     0   283    28     0    49     1      60  )
  1787     0   283    29     0    49     1     102  ;
  1788     0   284     9     0    49     1     111  _put
  1789     0   284    13     0    49     1      59  (
  1790     0   284    14     0    49     1     111  a
  1791     0   284    16     0    49     1      74  +
  1792     0   284    18     0    49     1     112  1
  1793     0   284    19     0    49     1      66  ,
  1794     0   284    21     0    49     1     111  int2
  1795     0   284    25     0    49     1      59  (
  1796     0   284    26     0    49     1     111  x
  1797     0   284    27     0    49     1      60  )
  1798     0   284    28     0    49     1      60  )
  1799     0   284    29     0    49     1     102  ;
  1800     0   285     9     0    49     1     111  _put
  1801     0   285    13     0    49     1      59  (
  1802     0   285    14     0    49     1     111  a
  1803     0   285    16     0    49     1      74  +
  1804     0   285    18     0    49     1     112  2
  1805     0   285    19     0    49     1      66  ,
  1806     0   285    21     0    49     1     111  int1
  1807     0   285    25     0    49     1      59  (
  1808     0   285    26     0    49     1     111  x
  1809     0   285    27     0    49     1      60  )
  1810     0   285    28     0    49     1      60  )
  1811     0   285    29     0    49     1     102  ;
  1812     0   286     9     0    49     1     111  _put
  1813     0   286    13     0    49     1      59  (
  1814     0   286    14     0    49     1     111  a
  1815     0   286    16     0    49     1      74  +
  1816     0   286    18     0    49     1     112  3
  1817     0   286    19     0    49     1      66  ,
  1818     0   286    21     0    49     1     111  int0
  1819     0   286    25     0    49     1      59  (
  1820     0   286    26     0    49     1     111  x
  1821     0   286    27     0    49     1      60  )
  1822     0   286    28     0    49     1      60  )
  1823     0   286    29     0    49     1     102  ;
  1824     0   287     5     0    49     0      64  }
  1825     0   287     5     0    49     0     222  ENDMETHOD
  1826     0   287     5     0    50     0     223  STARTMETHOD
  1827     0   289     5     0    50     0      45  static
  1828     0   289    12     0    50     0      50  void
  1829     0   289    17     0    50     0     111  putInt
  1830     0   289    23     0    50     0      59  (
  1831     0   289    24     0    50     0     111  ByteBuffer
  1832     0   289    35     0    50     0     111  bb
  1833     0   289    37     0    50     0      66  ,
  1834     0   289    39     0    50     0      36  int
  1835     0   289    43     0    50     0     111  bi
  1836     0   289    45     0    50     0      66  ,
  1837     0   289    47     0    50     0      36  int
  1838     0   289    51     0    50     0     111  x
  1839     0   289    52     0    50     0      66  ,
  1840     0   289    54     0    50     0      39  boolean
  1841     0   289    62     0    50     0     111  bigEndian
  1842     0   289    71     0    50     0      60  )
  1843     0   289    73     0    50     0      63  {
  1844     0   290     9     0    50     0      31  if
  1845     0   290    12     0    50     0      59  (
  1846     0   290    13     0    50     0     111  bigEndian
  1847     0   290    22     0    50     0      60  )
  1848     0   291    13     0    50     0     111  putIntB
  1849     0   291    20     0    50     0      59  (
  1850     0   291    21     0    50     0     111  bb
  1851     0   291    23     0    50     0      66  ,
  1852     0   291    25     0    50     0     111  bi
  1853     0   291    27     0    50     0      66  ,
  1854     0   291    29     0    50     0     111  x
  1855     0   291    30     0    50     0      60  )
  1856     0   291    31     0    50     0     102  ;
  1857     0   292     9     0    50     0      48  else
  1858     0   293    13     0    50     0     111  putIntL
  1859     0   293    20     0    50     0      59  (
  1860     0   293    21     0    50     0     111  bb
  1861     0   293    23     0    50     0      66  ,
  1862     0   293    25     0    50     0     111  bi
  1863     0   293    27     0    50     0      66  ,
  1864     0   293    29     0    50     0     111  x
  1865     0   293    30     0    50     0      60  )
  1866     0   293    31     0    50     0     102  ;
  1867     0   294     5     0    50     0      64  }
  1868     0   294     5     0    50     0     224  ENDMETHOD
  1869     0   294     5     0    51     0     225  STARTMETHOD
  1870     0   296     5     0    51     0      45  static
  1871     0   296    12     0    51     0      50  void
  1872     0   296    17     0    51     0     111  putInt
  1873     0   296    23     0    51     0      59  (
  1874     0   296    24     0    51     0      53  long
  1875     0   296    29     0    51     0     111  a
  1876     0   296    30     0    51     0      66  ,
  1877     0   296    32     0    51     0      36  int
  1878     0   296    36     0    51     0     111  x
  1879     0   296    37     0    51     0      66  ,
  1880     0   296    39     0    51     0      39  boolean
  1881     0   296    47     0    51     0     111  bigEndian
  1882     0   296    56     0    51     0      60  )
  1883     0   296    58     0    51     0      63  {
  1884     0   297     9     0    51     0      31  if
  1885     0   297    12     0    51     0      59  (
  1886     0   297    13     0    51     0     111  bigEndian
  1887     0   297    22     0    51     0      60  )
  1888     0   298    13     0    51     0     111  putIntB
  1889     0   298    20     0    51     0      59  (
  1890     0   298    21     0    51     0     111  a
  1891     0   298    22     0    51     0      66  ,
  1892     0   298    24     0    51     0     111  x
  1893     0   298    25     0    51     0      60  )
  1894     0   298    26     0    51     0     102  ;
  1895     0   299     9     0    51     0      48  else
  1896     0   300    13     0    51     0     111  putIntL
  1897     0   300    20     0    51     0      59  (
  1898     0   300    21     0    51     0     111  a
  1899     0   300    22     0    51     0      66  ,
  1900     0   300    24     0    51     0     111  x
  1901     0   300    25     0    51     0      60  )
  1902     0   300    26     0    51     0     102  ;
  1903     0   301     5     0    51     0      64  }
  1904     0   301     5     0    51     0     226  ENDMETHOD
  1905     0   301     5     0    52     0     227  STARTMETHOD
  1906     0   306     5     0    52     0      45  static
  1907     0   306    12     0    52     0      41  private
  1908     0   306    20     0    52     0      53  long
  1909     0   306    25     0    52     0     111  makeLong
  1910     0   306    33     0    52     0      59  (
  1911     0   306    34     0    52     1       9  byte
  1912     0   306    39     0    52     1     111  b7
  1913     0   306    41     0    52     1      66  ,
  1914     0   306    43     0    52     1       9  byte
  1915     0   306    48     0    52     1     111  b6
  1916     0   306    50     0    52     1      66  ,
  1917     0   306    52     0    52     1       9  byte
  1918     0   306    57     0    52     1     111  b5
  1919     0   306    59     0    52     1      66  ,
  1920     0   306    61     0    52     1       9  byte
  1921     0   306    66     0    52     1     111  b4
  1922     0   306    68     0    52     1      66  ,
  1923     0   307    34     0    52     0       9  byte
  1924     0   307    39     0    52     0     111  b3
  1925     0   307    41     0    52     0      66  ,
  1926     0   307    43     0    52     0       9  byte
  1927     0   307    48     0    52     0     111  b2
  1928     0   307    50     0    52     0      66  ,
  1929     0   307    52     0    52     0       9  byte
  1930     0   307    57     0    52     0     111  b1
  1931     0   307    59     0    52     0      66  ,
  1932     0   307    61     0    52     0       9  byte
  1933     0   307    66     0    52     0     111  b0
  1934     0   307    68     0    52     0      60  )
  1935     0   308     5     0    52     0      63  {
  1936     0   309     9     0    52     0      19  return
  1937     0   309    16     0    52     0      59  (
  1938     0   309    17     0    52     1      59  (
  1939     0   309    18     0    52     1      59  (
  1940     0   309    19     0    52     1      59  (
  1941     0   309    20     0    52     1      53  long
  1942     0   309    24     0    52     1      60  )
  1943     0   309    25     0    52     1     111  b7
  1944     0   309    28     0    52     1      99  &
  1945     0   309    30     0    52     1     112  0xff
  1946     0   309    34     0    52     1      60  )
  1947     0   309    36     0    52     1      90  <<
  1948     0   309    39     0    52     1     112  56
  1949     0   309    41     0    52     1      60  )
  1950     0   309    43     0    52     1      96  |
  1951     0   310    17     0    52     1      59  (
  1952     0   310    18     0    52     1      59  (
  1953     0   310    19     0    52     1      59  (
  1954     0   310    20     0    52     1      53  long
  1955     0   310    24     0    52     1      60  )
  1956     0   310    25     0    52     1     111  b6
  1957     0   310    28     0    52     1      99  &
  1958     0   310    30     0    52     1     112  0xff
  1959     0   310    34     0    52     1      60  )
  1960     0   310    36     0    52     1      90  <<
  1961     0   310    39     0    52     1     112  48
  1962     0   310    41     0    52     1      60  )
  1963     0   310    43     0    52     1      96  |
  1964     0   311    17     0    52     1      59  (
  1965     0   311    18     0    52     1      59  (
  1966     0   311    19     0    52     1      59  (
  1967     0   311    20     0    52     1      53  long
  1968     0   311    24     0    52     1      60  )
  1969     0   311    25     0    52     1     111  b5
  1970     0   311    28     0    52     1      99  &
  1971     0   311    30     0    52     1     112  0xff
  1972     0   311    34     0    52     1      60  )
  1973     0   311    36     0    52     1      90  <<
  1974     0   311    39     0    52     1     112  40
  1975     0   311    41     0    52     1      60  )
  1976     0   311    43     0    52     1      96  |
  1977     0   312    17     0    52     1      59  (
  1978     0   312    18     0    52     1      59  (
  1979     0   312    19     0    52     1      59  (
  1980     0   312    20     0    52     1      53  long
  1981     0   312    24     0    52     1      60  )
  1982     0   312    25     0    52     1     111  b4
  1983     0   312    28     0    52     1      99  &
  1984     0   312    30     0    52     1     112  0xff
  1985     0   312    34     0    52     1      60  )
  1986     0   312    36     0    52     1      90  <<
  1987     0   312    39     0    52     1     112  32
  1988     0   312    41     0    52     1      60  )
  1989     0   312    43     0    52     1      96  |
  1990     0   313    17     0    52     1      59  (
  1991     0   313    18     0    52     1      59  (
  1992     0   313    19     0    52     1      59  (
  1993     0   313    20     0    52     1      53  long
  1994     0   313    24     0    52     1      60  )
  1995     0   313    25     0    52     1     111  b3
  1996     0   313    28     0    52     1      99  &
  1997     0   313    30     0    52     1     112  0xff
  1998     0   313    34     0    52     1      60  )
  1999     0   313    36     0    52     1      90  <<
  2000     0   313    39     0    52     1     112  24
  2001     0   313    41     0    52     1      60  )
  2002     0   313    43     0    52     1      96  |
  2003     0   314    17     0    52     1      59  (
  2004     0   314    18     0    52     1      59  (
  2005     0   314    19     0    52     1      59  (
  2006     0   314    20     0    52     1      53  long
  2007     0   314    24     0    52     1      60  )
  2008     0   314    25     0    52     1     111  b2
  2009     0   314    28     0    52     1      99  &
  2010     0   314    30     0    52     1     112  0xff
  2011     0   314    34     0    52     1      60  )
  2012     0   314    36     0    52     1      90  <<
  2013     0   314    39     0    52     1     112  16
  2014     0   314    41     0    52     1      60  )
  2015     0   314    43     0    52     1      96  |
  2016     0   315    17     0    52     1      59  (
  2017     0   315    18     0    52     1      59  (
  2018     0   315    19     0    52     1      59  (
  2019     0   315    20     0    52     1      53  long
  2020     0   315    24     0    52     1      60  )
  2021     0   315    25     0    52     1     111  b1
  2022     0   315    28     0    52     1      99  &
  2023     0   315    30     0    52     1     112  0xff
  2024     0   315    34     0    52     1      60  )
  2025     0   315    36     0    52     1      90  <<
  2026     0   315    40     0    52     1     112  8
  2027     0   315    41     0    52     1      60  )
  2028     0   315    43     0    52     1      96  |
  2029     0   316    17     0    52     1      59  (
  2030     0   316    18     0    52     1      59  (
  2031     0   316    19     0    52     1      59  (
  2032     0   316    20     0    52     1      53  long
  2033     0   316    24     0    52     1      60  )
  2034     0   316    25     0    52     1     111  b0
  2035     0   316    28     0    52     1      99  &
  2036     0   316    30     0    52     1     112  0xff
  2037     0   316    34     0    52     0      60  )
  2038     0   316    36     0    52     0      90  <<
  2039     0   316    40     0    52     0     112  0
  2040     0   316    41     0    52     0      60  )
  2041     0   316    42     0    52     0      60  )
  2042     0   316    43     0    52     0     102  ;
  2043     0   317     5     0    52     0      64  }
  2044     0   317     5     0    52     0     228  ENDMETHOD
  2045     0   317     5     0    53     0     229  STARTMETHOD
  2046     0   319     5     0    53     0      45  static
  2047     0   319    12     0    53     0      53  long
  2048     0   319    17     0    53     0     111  getLongL
  2049     0   319    25     0    53     0      59  (
  2050     0   319    26     0    53     0     111  ByteBuffer
  2051     0   319    37     0    53     0     111  bb
  2052     0   319    39     0    53     0      66  ,
  2053     0   319    41     0    53     0      36  int
  2054     0   319    45     0    53     0     111  bi
  2055     0   319    47     0    53     0      60  )
  2056     0   319    49     0    53     0      63  {
  2057     0   320     9     0    53     0      19  return
  2058     0   320    16     0    53     0     111  makeLong
  2059     0   320    24     0    53     0      59  (
  2060     0   320    25     0    53     0     111  bb._get
  2061     0   320    32     0    53     0      59  (
  2062     0   320    33     0    53     0     111  bi
  2063     0   320    36     0    53     0      74  +
  2064     0   320    38     0    53     0     112  7
  2065     0   320    39     0    53     0      60  )
  2066     0   320    40     0    53     0      66  ,
  2067     0   321    25     0    53     1     111  bb._get
  2068     0   321    32     0    53     1      59  (
  2069     0   321    33     0    53     1     111  bi
  2070     0   321    36     0    53     1      74  +
  2071     0   321    38     0    53     1     112  6
  2072     0   321    39     0    53     1      60  )
  2073     0   321    40     0    53     1      66  ,
  2074     0   322    25     0    53     1     111  bb._get
  2075     0   322    32     0    53     1      59  (
  2076     0   322    33     0    53     1     111  bi
  2077     0   322    36     0    53     1      74  +
  2078     0   322    38     0    53     1     112  5
  2079     0   322    39     0    53     1      60  )
  2080     0   322    40     0    53     1      66  ,
  2081     0   323    25     0    53     1     111  bb._get
  2082     0   323    32     0    53     1      59  (
  2083     0   323    33     0    53     1     111  bi
  2084     0   323    36     0    53     1      74  +
  2085     0   323    38     0    53     1     112  4
  2086     0   323    39     0    53     1      60  )
  2087     0   323    40     0    53     1      66  ,
  2088     0   324    25     0    53     1     111  bb._get
  2089     0   324    32     0    53     1      59  (
  2090     0   324    33     0    53     1     111  bi
  2091     0   324    36     0    53     1      74  +
  2092     0   324    38     0    53     1     112  3
  2093     0   324    39     0    53     1      60  )
  2094     0   324    40     0    53     1      66  ,
  2095     0   325    25     0    53     1     111  bb._get
  2096     0   325    32     0    53     1      59  (
  2097     0   325    33     0    53     1     111  bi
  2098     0   325    36     0    53     1      74  +
  2099     0   325    38     0    53     1     112  2
  2100     0   325    39     0    53     1      60  )
  2101     0   325    40     0    53     1      66  ,
  2102     0   326    25     0    53     1     111  bb._get
  2103     0   326    32     0    53     1      59  (
  2104     0   326    33     0    53     1     111  bi
  2105     0   326    36     0    53     1      74  +
  2106     0   326    38     0    53     1     112  1
  2107     0   326    39     0    53     1      60  )
  2108     0   326    40     0    53     1      66  ,
  2109     0   327    25     0    53     0     111  bb._get
  2110     0   327    32     0    53     0      59  (
  2111     0   327    33     0    53     0     111  bi
  2112     0   327    36     0    53     0      74  +
  2113     0   327    38     0    53     0     112  0
  2114     0   327    39     0    53     0      60  )
  2115     0   327    40     0    53     0      60  )
  2116     0   327    41     0    53     0     102  ;
  2117     0   328     5     0    53     0      64  }
  2118     0   328     5     0    53     0     230  ENDMETHOD
  2119     0   328     5     0    54     0     231  STARTMETHOD
  2120     0   330     5     0    54     0      45  static
  2121     0   330    12     0    54     0      53  long
  2122     0   330    17     0    54     0     111  getLongL
  2123     0   330    25     0    54     0      59  (
  2124     0   330    26     0    54     0      53  long
  2125     0   330    31     0    54     0     111  a
  2126     0   330    32     0    54     0      60  )
  2127     0   330    34     0    54     0      63  {
  2128     0   331     9     0    54     0      19  return
  2129     0   331    16     0    54     0     111  makeLong
  2130     0   331    24     0    54     0      59  (
  2131     0   331    25     0    54     0     111  _get
  2132     0   331    29     0    54     0      59  (
  2133     0   331    30     0    54     0     111  a
  2134     0   331    32     0    54     0      74  +
  2135     0   331    34     0    54     0     112  7
  2136     0   331    35     0    54     0      60  )
  2137     0   331    36     0    54     0      66  ,
  2138     0   332    25     0    54     1     111  _get
  2139     0   332    29     0    54     1      59  (
  2140     0   332    30     0    54     1     111  a
  2141     0   332    32     0    54     1      74  +
  2142     0   332    34     0    54     1     112  6
  2143     0   332    35     0    54     1      60  )
  2144     0   332    36     0    54     1      66  ,
  2145     0   333    25     0    54     1     111  _get
  2146     0   333    29     0    54     1      59  (
  2147     0   333    30     0    54     1     111  a
  2148     0   333    32     0    54     1      74  +
  2149     0   333    34     0    54     1     112  5
  2150     0   333    35     0    54     1      60  )
  2151     0   333    36     0    54     1      66  ,
  2152     0   334    25     0    54     1     111  _get
  2153     0   334    29     0    54     1      59  (
  2154     0   334    30     0    54     1     111  a
  2155     0   334    32     0    54     1      74  +
  2156     0   334    34     0    54     1     112  4
  2157     0   334    35     0    54     1      60  )
  2158     0   334    36     0    54     1      66  ,
  2159     0   335    25     0    54     1     111  _get
  2160     0   335    29     0    54     1      59  (
  2161     0   335    30     0    54     1     111  a
  2162     0   335    32     0    54     1      74  +
  2163     0   335    34     0    54     1     112  3
  2164     0   335    35     0    54     1      60  )
  2165     0   335    36     0    54     1      66  ,
  2166     0   336    25     0    54     1     111  _get
  2167     0   336    29     0    54     1      59  (
  2168     0   336    30     0    54     1     111  a
  2169     0   336    32     0    54     1      74  +
  2170     0   336    34     0    54     1     112  2
  2171     0   336    35     0    54     1      60  )
  2172     0   336    36     0    54     1      66  ,
  2173     0   337    25     0    54     1     111  _get
  2174     0   337    29     0    54     1      59  (
  2175     0   337    30     0    54     1     111  a
  2176     0   337    32     0    54     1      74  +
  2177     0   337    34     0    54     1     112  1
  2178     0   337    35     0    54     1      60  )
  2179     0   337    36     0    54     1      66  ,
  2180     0   338    25     0    54     0     111  _get
  2181     0   338    29     0    54     0      59  (
  2182     0   338    30     0    54     0     111  a
  2183     0   338    32     0    54     0      74  +
  2184     0   338    34     0    54     0     112  0
  2185     0   338    35     0    54     0      60  )
  2186     0   338    36     0    54     0      60  )
  2187     0   338    37     0    54     0     102  ;
  2188     0   339     5     0    54     0      64  }
  2189     0   339     5     0    54     0     232  ENDMETHOD
  2190     0   339     5     0    55     0     233  STARTMETHOD
  2191     0   341     5     0    55     0      45  static
  2192     0   341    12     0    55     0      53  long
  2193     0   341    17     0    55     0     111  getLongB
  2194     0   341    25     0    55     0      59  (
  2195     0   341    26     0    55     0     111  ByteBuffer
  2196     0   341    37     0    55     0     111  bb
  2197     0   341    39     0    55     0      66  ,
  2198     0   341    41     0    55     0      36  int
  2199     0   341    45     0    55     0     111  bi
  2200     0   341    47     0    55     0      60  )
  2201     0   341    49     0    55     0      63  {
  2202     0   342     9     0    55     0      19  return
  2203     0   342    16     0    55     0     111  makeLong
  2204     0   342    24     0    55     0      59  (
  2205     0   342    25     0    55     0     111  bb._get
  2206     0   342    32     0    55     0      59  (
  2207     0   342    33     0    55     0     111  bi
  2208     0   342    36     0    55     0      74  +
  2209     0   342    38     0    55     0     112  0
  2210     0   342    39     0    55     0      60  )
  2211     0   342    40     0    55     0      66  ,
  2212     0   343    25     0    55     1     111  bb._get
  2213     0   343    32     0    55     1      59  (
  2214     0   343    33     0    55     1     111  bi
  2215     0   343    36     0    55     1      74  +
  2216     0   343    38     0    55     1     112  1
  2217     0   343    39     0    55     1      60  )
  2218     0   343    40     0    55     1      66  ,
  2219     0   344    25     0    55     1     111  bb._get
  2220     0   344    32     0    55     1      59  (
  2221     0   344    33     0    55     1     111  bi
  2222     0   344    36     0    55     1      74  +
  2223     0   344    38     0    55     1     112  2
  2224     0   344    39     0    55     1      60  )
  2225     0   344    40     0    55     1      66  ,
  2226     0   345    25     0    55     1     111  bb._get
  2227     0   345    32     0    55     1      59  (
  2228     0   345    33     0    55     1     111  bi
  2229     0   345    36     0    55     1      74  +
  2230     0   345    38     0    55     1     112  3
  2231     0   345    39     0    55     1      60  )
  2232     0   345    40     0    55     1      66  ,
  2233     0   346    25     0    55     1     111  bb._get
  2234     0   346    32     0    55     1      59  (
  2235     0   346    33     0    55     1     111  bi
  2236     0   346    36     0    55     1      74  +
  2237     0   346    38     0    55     1     112  4
  2238     0   346    39     0    55     1      60  )
  2239     0   346    40     0    55     1      66  ,
  2240     0   347    25     0    55     1     111  bb._get
  2241     0   347    32     0    55     1      59  (
  2242     0   347    33     0    55     1     111  bi
  2243     0   347    36     0    55     1      74  +
  2244     0   347    38     0    55     1     112  5
  2245     0   347    39     0    55     1      60  )
  2246     0   347    40     0    55     1      66  ,
  2247     0   348    25     0    55     1     111  bb._get
  2248     0   348    32     0    55     1      59  (
  2249     0   348    33     0    55     1     111  bi
  2250     0   348    36     0    55     1      74  +
  2251     0   348    38     0    55     1     112  6
  2252     0   348    39     0    55     1      60  )
  2253     0   348    40     0    55     1      66  ,
  2254     0   349    25     0    55     0     111  bb._get
  2255     0   349    32     0    55     0      59  (
  2256     0   349    33     0    55     0     111  bi
  2257     0   349    36     0    55     0      74  +
  2258     0   349    38     0    55     0     112  7
  2259     0   349    39     0    55     0      60  )
  2260     0   349    40     0    55     0      60  )
  2261     0   349    41     0    55     0     102  ;
  2262     0   350     5     0    55     0      64  }
  2263     0   350     5     0    55     0     234  ENDMETHOD
  2264     0   350     5     0    56     0     235  STARTMETHOD
  2265     0   352     5     0    56     0      45  static
  2266     0   352    12     0    56     0      53  long
  2267     0   352    17     0    56     0     111  getLongB
  2268     0   352    25     0    56     0      59  (
  2269     0   352    26     0    56     0      53  long
  2270     0   352    31     0    56     0     111  a
  2271     0   352    32     0    56     0      60  )
  2272     0   352    34     0    56     0      63  {
  2273     0   353     9     0    56     0      19  return
  2274     0   353    16     0    56     0     111  makeLong
  2275     0   353    24     0    56     0      59  (
  2276     0   353    25     0    56     0     111  _get
  2277     0   353    29     0    56     0      59  (
  2278     0   353    30     0    56     0     111  a
  2279     0   353    32     0    56     0      74  +
  2280     0   353    34     0    56     0     112  0
  2281     0   353    35     0    56     0      60  )
  2282     0   353    36     0    56     0      66  ,
  2283     0   354    25     0    56     1     111  _get
  2284     0   354    29     0    56     1      59  (
  2285     0   354    30     0    56     1     111  a
  2286     0   354    32     0    56     1      74  +
  2287     0   354    34     0    56     1     112  1
  2288     0   354    35     0    56     1      60  )
  2289     0   354    36     0    56     1      66  ,
  2290     0   355    25     0    56     1     111  _get
  2291     0   355    29     0    56     1      59  (
  2292     0   355    30     0    56     1     111  a
  2293     0   355    32     0    56     1      74  +
  2294     0   355    34     0    56     1     112  2
  2295     0   355    35     0    56     1      60  )
  2296     0   355    36     0    56     1      66  ,
  2297     0   356    25     0    56     1     111  _get
  2298     0   356    29     0    56     1      59  (
  2299     0   356    30     0    56     1     111  a
  2300     0   356    32     0    56     1      74  +
  2301     0   356    34     0    56     1     112  3
  2302     0   356    35     0    56     1      60  )
  2303     0   356    36     0    56     1      66  ,
  2304     0   357    25     0    56     1     111  _get
  2305     0   357    29     0    56     1      59  (
  2306     0   357    30     0    56     1     111  a
  2307     0   357    32     0    56     1      74  +
  2308     0   357    34     0    56     1     112  4
  2309     0   357    35     0    56     1      60  )
  2310     0   357    36     0    56     1      66  ,
  2311     0   358    25     0    56     1     111  _get
  2312     0   358    29     0    56     1      59  (
  2313     0   358    30     0    56     1     111  a
  2314     0   358    32     0    56     1      74  +
  2315     0   358    34     0    56     1     112  5
  2316     0   358    35     0    56     1      60  )
  2317     0   358    36     0    56     1      66  ,
  2318     0   359    25     0    56     1     111  _get
  2319     0   359    29     0    56     1      59  (
  2320     0   359    30     0    56     1     111  a
  2321     0   359    32     0    56     1      74  +
  2322     0   359    34     0    56     1     112  6
  2323     0   359    35     0    56     1      60  )
  2324     0   359    36     0    56     1      66  ,
  2325     0   360    25     0    56     0     111  _get
  2326     0   360    29     0    56     0      59  (
  2327     0   360    30     0    56     0     111  a
  2328     0   360    32     0    56     0      74  +
  2329     0   360    34     0    56     0     112  7
  2330     0   360    35     0    56     0      60  )
  2331     0   360    36     0    56     0      60  )
  2332     0   360    37     0    56     0     102  ;
  2333     0   361     5     0    56     0      64  }
  2334     0   361     5     0    56     0     236  ENDMETHOD
  2335     0   361     5     0    57     0     237  STARTMETHOD
  2336     0   363     5     0    57     0      45  static
  2337     0   363    12     0    57     0      53  long
  2338     0   363    17     0    57     0     111  getLong
  2339     0   363    24     0    57     0      59  (
  2340     0   363    25     0    57     0     111  ByteBuffer
  2341     0   363    36     0    57     0     111  bb
  2342     0   363    38     0    57     0      66  ,
  2343     0   363    40     0    57     0      36  int
  2344     0   363    44     0    57     0     111  bi
  2345     0   363    46     0    57     0      66  ,
  2346     0   363    48     0    57     0      39  boolean
  2347     0   363    56     0    57     0     111  bigEndian
  2348     0   363    65     0    57     0      60  )
  2349     0   363    67     0    57     0      63  {
  2350     0   364     9     0    57     0      19  return
  2351     0   364    16     0    57     0      59  (
  2352     0   364    17     0    57     0     111  bigEndian
  2353     0   364    27     0    57     0      58  ?
  2354     0   364    29     0    57     0     111  getLongB
  2355     0   364    37     0    57     0      59  (
  2356     0   364    38     0    57     0     111  bb
  2357     0   364    40     0    57     0      66  ,
  2358     0   364    42     0    57     0     111  bi
  2359     0   364    44     0    57     0      60  )
  2360     0   364    46     0    57     0      65  :
  2361     0   364    48     0    57     0     111  getLongL
  2362     0   364    56     0    57     0      59  (
  2363     0   364    57     0    57     0     111  bb
  2364     0   364    59     0    57     0      66  ,
  2365     0   364    61     0    57     0     111  bi
  2366     0   364    63     0    57     0      60  )
  2367     0   364    64     0    57     0      60  )
  2368     0   364    65     0    57     0     102  ;
  2369     0   365     5     0    57     0      64  }
  2370     0   365     5     0    57     0     238  ENDMETHOD
  2371     0   365     5     0    58     0     239  STARTMETHOD
  2372     0   367     5     0    58     0      45  static
  2373     0   367    12     0    58     0      53  long
  2374     0   367    17     0    58     0     111  getLong
  2375     0   367    24     0    58     0      59  (
  2376     0   367    25     0    58     0      53  long
  2377     0   367    30     0    58     0     111  a
  2378     0   367    31     0    58     0      66  ,
  2379     0   367    33     0    58     0      39  boolean
  2380     0   367    41     0    58     0     111  bigEndian
  2381     0   367    50     0    58     0      60  )
  2382     0   367    52     0    58     0      63  {
  2383     0   368     9     0    58     0      19  return
  2384     0   368    16     0    58     0      59  (
  2385     0   368    17     0    58     0     111  bigEndian
  2386     0   368    27     0    58     0      58  ?
  2387     0   368    29     0    58     0     111  getLongB
  2388     0   368    37     0    58     0      59  (
  2389     0   368    38     0    58     0     111  a
  2390     0   368    39     0    58     0      60  )
  2391     0   368    41     0    58     0      65  :
  2392     0   368    43     0    58     0     111  getLongL
  2393     0   368    51     0    58     0      59  (
  2394     0   368    52     0    58     0     111  a
  2395     0   368    53     0    58     0      60  )
  2396     0   368    54     0    58     1      60  )
  2397     0   368    55     0    58     1     102  ;
  2398     0   369     5     0    58     1      64  }
  2399     0   369     5     0    58     0     240  ENDMETHOD
  2400     0   369     5     0    59     0     241  STARTMETHOD
  2401     0   371     5     0    59     1      41  private
  2402     0   371    13     0    59     1      45  static
  2403     0   371    20     0    59     1       9  byte
  2404     0   371    25     0    59     1     111  long7
  2405     0   371    30     0    59     1      59  (
  2406     0   371    31     0    59     1      53  long
  2407     0   371    36     0    59     1     111  x
  2408     0   371    37     0    59     1      60  )
  2409     0   371    39     0    59     1      63  {
  2410     0   371    41     0    59     1      19  return
  2411     0   371    48     0    59     1      59  (
  2412     0   371    49     0    59     1       9  byte
  2413     0   371    53     0    59     1      60  )
  2414     0   371    54     0    59     1      59  (
  2415     0   371    55     0    59     1     111  x
  2416     0   371    57     0    59     1      84  >>
  2417     0   371    60     0    59     1     112  56
  2418     0   371    62     0    59     1      60  )
  2419     0   371    63     0    59     1     102  ;
  2420     0   371    65     0    59     1      64  }
  2421     0   371    65     0    59     0     242  ENDMETHOD
  2422     0   371    65     0    60     0     243  STARTMETHOD
  2423     0   372     5     0    60     1      41  private
  2424     0   372    13     0    60     1      45  static
  2425     0   372    20     0    60     1       9  byte
  2426     0   372    25     0    60     1     111  long6
  2427     0   372    30     0    60     1      59  (
  2428     0   372    31     0    60     1      53  long
  2429     0   372    36     0    60     1     111  x
  2430     0   372    37     0    60     1      60  )
  2431     0   372    39     0    60     1      63  {
  2432     0   372    41     0    60     1      19  return
  2433     0   372    48     0    60     1      59  (
  2434     0   372    49     0    60     1       9  byte
  2435     0   372    53     0    60     1      60  )
  2436     0   372    54     0    60     1      59  (
  2437     0   372    55     0    60     1     111  x
  2438     0   372    57     0    60     1      84  >>
  2439     0   372    60     0    60     1     112  48
  2440     0   372    62     0    60     1      60  )
  2441     0   372    63     0    60     1     102  ;
  2442     0   372    65     0    60     1      64  }
  2443     0   372    65     0    60     0     244  ENDMETHOD
  2444     0   372    65     0    61     0     245  STARTMETHOD
  2445     0   373     5     0    61     1      41  private
  2446     0   373    13     0    61     1      45  static
  2447     0   373    20     0    61     1       9  byte
  2448     0   373    25     0    61     1     111  long5
  2449     0   373    30     0    61     1      59  (
  2450     0   373    31     0    61     1      53  long
  2451     0   373    36     0    61     1     111  x
  2452     0   373    37     0    61     1      60  )
  2453     0   373    39     0    61     1      63  {
  2454     0   373    41     0    61     1      19  return
  2455     0   373    48     0    61     1      59  (
  2456     0   373    49     0    61     1       9  byte
  2457     0   373    53     0    61     1      60  )
  2458     0   373    54     0    61     1      59  (
  2459     0   373    55     0    61     1     111  x
  2460     0   373    57     0    61     1      84  >>
  2461     0   373    60     0    61     1     112  40
  2462     0   373    62     0    61     1      60  )
  2463     0   373    63     0    61     1     102  ;
  2464     0   373    65     0    61     1      64  }
  2465     0   373    65     0    61     0     246  ENDMETHOD
  2466     0   373    65     0    62     0     247  STARTMETHOD
  2467     0   374     5     0    62     1      41  private
  2468     0   374    13     0    62     1      45  static
  2469     0   374    20     0    62     1       9  byte
  2470     0   374    25     0    62     1     111  long4
  2471     0   374    30     0    62     1      59  (
  2472     0   374    31     0    62     1      53  long
  2473     0   374    36     0    62     1     111  x
  2474     0   374    37     0    62     1      60  )
  2475     0   374    39     0    62     1      63  {
  2476     0   374    41     0    62     1      19  return
  2477     0   374    48     0    62     1      59  (
  2478     0   374    49     0    62     1       9  byte
  2479     0   374    53     0    62     1      60  )
  2480     0   374    54     0    62     1      59  (
  2481     0   374    55     0    62     1     111  x
  2482     0   374    57     0    62     1      84  >>
  2483     0   374    60     0    62     1     112  32
  2484     0   374    62     0    62     1      60  )
  2485     0   374    63     0    62     1     102  ;
  2486     0   374    65     0    62     1      64  }
  2487     0   374    65     0    62     0     248  ENDMETHOD
  2488     0   374    65     0    63     0     249  STARTMETHOD
  2489     0   375     5     0    63     1      41  private
  2490     0   375    13     0    63     1      45  static
  2491     0   375    20     0    63     1       9  byte
  2492     0   375    25     0    63     1     111  long3
  2493     0   375    30     0    63     1      59  (
  2494     0   375    31     0    63     1      53  long
  2495     0   375    36     0    63     1     111  x
  2496     0   375    37     0    63     1      60  )
  2497     0   375    39     0    63     1      63  {
  2498     0   375    41     0    63     1      19  return
  2499     0   375    48     0    63     1      59  (
  2500     0   375    49     0    63     1       9  byte
  2501     0   375    53     0    63     1      60  )
  2502     0   375    54     0    63     1      59  (
  2503     0   375    55     0    63     1     111  x
  2504     0   375    57     0    63     1      84  >>
  2505     0   375    60     0    63     1     112  24
  2506     0   375    62     0    63     1      60  )
  2507     0   375    63     0    63     1     102  ;
  2508     0   375    65     0    63     1      64  }
  2509     0   375    65     0    63     0     250  ENDMETHOD
  2510     0   375    65     0    64     0     251  STARTMETHOD
  2511     0   376     5     0    64     1      41  private
  2512     0   376    13     0    64     1      45  static
  2513     0   376    20     0    64     1       9  byte
  2514     0   376    25     0    64     1     111  long2
  2515     0   376    30     0    64     1      59  (
  2516     0   376    31     0    64     1      53  long
  2517     0   376    36     0    64     1     111  x
  2518     0   376    37     0    64     1      60  )
  2519     0   376    39     0    64     1      63  {
  2520     0   376    41     0    64     1      19  return
  2521     0   376    48     0    64     1      59  (
  2522     0   376    49     0    64     1       9  byte
  2523     0   376    53     0    64     1      60  )
  2524     0   376    54     0    64     1      59  (
  2525     0   376    55     0    64     1     111  x
  2526     0   376    57     0    64     1      84  >>
  2527     0   376    60     0    64     1     112  16
  2528     0   376    62     0    64     1      60  )
  2529     0   376    63     0    64     1     102  ;
  2530     0   376    65     0    64     1      64  }
  2531     0   376    65     0    64     0     252  ENDMETHOD
  2532     0   376    65     0    65     0     253  STARTMETHOD
  2533     0   377     5     0    65     1      41  private
  2534     0   377    13     0    65     1      45  static
  2535     0   377    20     0    65     1       9  byte
  2536     0   377    25     0    65     1     111  long1
  2537     0   377    30     0    65     1      59  (
  2538     0   377    31     0    65     1      53  long
  2539     0   377    36     0    65     1     111  x
  2540     0   377    37     0    65     1      60  )
  2541     0   377    39     0    65     1      63  {
  2542     0   377    41     0    65     1      19  return
  2543     0   377    48     0    65     1      59  (
  2544     0   377    49     0    65     1       9  byte
  2545     0   377    53     0    65     1      60  )
  2546     0   377    54     0    65     1      59  (
  2547     0   377    55     0    65     1     111  x
  2548     0   377    57     0    65     1      84  >>
  2549     0   377    61     0    65     1     112  8
  2550     0   377    62     0    65     1      60  )
  2551     0   377    63     0    65     1     102  ;
  2552     0   377    65     0    65     1      64  }
  2553     0   377    65     0    65     0     254  ENDMETHOD
  2554     0   377    65     0    66     0     255  STARTMETHOD
  2555     0   378     5     0    66     1      41  private
  2556     0   378    13     0    66     1      45  static
  2557     0   378    20     0    66     1       9  byte
  2558     0   378    25     0    66     1     111  long0
  2559     0   378    30     0    66     1      59  (
  2560     0   378    31     0    66     1      53  long
  2561     0   378    36     0    66     1     111  x
  2562     0   378    37     0    66     1      60  )
  2563     0   378    39     0    66     1      63  {
  2564     0   378    41     0    66     1      19  return
  2565     0   378    48     0    66     1      59  (
  2566     0   378    49     0    66     1       9  byte
  2567     0   378    53     0    66     1      60  )
  2568     0   378    54     0    66     1      59  (
  2569     0   378    55     0    66     1     111  x
  2570     0   378    57     0    66     1      84  >>
  2571     0   378    61     0    66     1     112  0
  2572     0   378    62     0    66     1      60  )
  2573     0   378    63     0    66     1     102  ;
  2574     0   378    65     0    66     1      64  }
  2575     0   378    65     0    66     0     256  ENDMETHOD
  2576     0   378    65     0    67     0     257  STARTMETHOD
  2577     0   380     5     0    67     0      45  static
  2578     0   380    12     0    67     0      50  void
  2579     0   380    17     0    67     0     111  putLongL
  2580     0   380    25     0    67     0      59  (
  2581     0   380    26     0    67     0     111  ByteBuffer
  2582     0   380    37     0    67     0     111  bb
  2583     0   380    39     0    67     0      66  ,
  2584     0   380    41     0    67     0      36  int
  2585     0   380    45     0    67     0     111  bi
  2586     0   380    47     0    67     0      66  ,
  2587     0   380    49     0    67     0      53  long
  2588     0   380    54     0    67     0     111  x
  2589     0   380    55     0    67     0      60  )
  2590     0   380    57     0    67     0      63  {
  2591     0   381     9     0    67     1     111  bb._put
  2592     0   381    16     0    67     1      59  (
  2593     0   381    17     0    67     1     111  bi
  2594     0   381    20     0    67     1      74  +
  2595     0   381    22     0    67     1     112  7
  2596     0   381    23     0    67     1      66  ,
  2597     0   381    25     0    67     1     111  long7
  2598     0   381    30     0    67     1      59  (
  2599     0   381    31     0    67     1     111  x
  2600     0   381    32     0    67     1      60  )
  2601     0   381    33     0    67     1      60  )
  2602     0   381    34     0    67     1     102  ;
  2603     0   382     9     0    67     1     111  bb._put
  2604     0   382    16     0    67     1      59  (
  2605     0   382    17     0    67     1     111  bi
  2606     0   382    20     0    67     1      74  +
  2607     0   382    22     0    67     1     112  6
  2608     0   382    23     0    67     1      66  ,
  2609     0   382    25     0    67     1     111  long6
  2610     0   382    30     0    67     1      59  (
  2611     0   382    31     0    67     1     111  x
  2612     0   382    32     0    67     1      60  )
  2613     0   382    33     0    67     1      60  )
  2614     0   382    34     0    67     1     102  ;
  2615     0   383     9     0    67     1     111  bb._put
  2616     0   383    16     0    67     1      59  (
  2617     0   383    17     0    67     1     111  bi
  2618     0   383    20     0    67     1      74  +
  2619     0   383    22     0    67     1     112  5
  2620     0   383    23     0    67     1      66  ,
  2621     0   383    25     0    67     1     111  long5
  2622     0   383    30     0    67     1      59  (
  2623     0   383    31     0    67     1     111  x
  2624     0   383    32     0    67     1      60  )
  2625     0   383    33     0    67     1      60  )
  2626     0   383    34     0    67     1     102  ;
  2627     0   384     9     0    67     1     111  bb._put
  2628     0   384    16     0    67     1      59  (
  2629     0   384    17     0    67     1     111  bi
  2630     0   384    20     0    67     1      74  +
  2631     0   384    22     0    67     1     112  4
  2632     0   384    23     0    67     1      66  ,
  2633     0   384    25     0    67     1     111  long4
  2634     0   384    30     0    67     1      59  (
  2635     0   384    31     0    67     1     111  x
  2636     0   384    32     0    67     1      60  )
  2637     0   384    33     0    67     1      60  )
  2638     0   384    34     0    67     1     102  ;
  2639     0   385     9     0    67     1     111  bb._put
  2640     0   385    16     0    67     1      59  (
  2641     0   385    17     0    67     1     111  bi
  2642     0   385    20     0    67     1      74  +
  2643     0   385    22     0    67     1     112  3
  2644     0   385    23     0    67     1      66  ,
  2645     0   385    25     0    67     1     111  long3
  2646     0   385    30     0    67     1      59  (
  2647     0   385    31     0    67     1     111  x
  2648     0   385    32     0    67     1      60  )
  2649     0   385    33     0    67     1      60  )
  2650     0   385    34     0    67     1     102  ;
  2651     0   386     9     0    67     1     111  bb._put
  2652     0   386    16     0    67     1      59  (
  2653     0   386    17     0    67     1     111  bi
  2654     0   386    20     0    67     1      74  +
  2655     0   386    22     0    67     1     112  2
  2656     0   386    23     0    67     1      66  ,
  2657     0   386    25     0    67     1     111  long2
  2658     0   386    30     0    67     1      59  (
  2659     0   386    31     0    67     1     111  x
  2660     0   386    32     0    67     1      60  )
  2661     0   386    33     0    67     1      60  )
  2662     0   386    34     0    67     1     102  ;
  2663     0   387     9     0    67     1     111  bb._put
  2664     0   387    16     0    67     1      59  (
  2665     0   387    17     0    67     1     111  bi
  2666     0   387    20     0    67     1      74  +
  2667     0   387    22     0    67     1     112  1
  2668     0   387    23     0    67     1      66  ,
  2669     0   387    25     0    67     1     111  long1
  2670     0   387    30     0    67     1      59  (
  2671     0   387    31     0    67     1     111  x
  2672     0   387    32     0    67     1      60  )
  2673     0   387    33     0    67     1      60  )
  2674     0   387    34     0    67     1     102  ;
  2675     0   388     9     0    67     1     111  bb._put
  2676     0   388    16     0    67     1      59  (
  2677     0   388    17     0    67     1     111  bi
  2678     0   388    20     0    67     1      74  +
  2679     0   388    22     0    67     1     112  0
  2680     0   388    23     0    67     1      66  ,
  2681     0   388    25     0    67     1     111  long0
  2682     0   388    30     0    67     1      59  (
  2683     0   388    31     0    67     1     111  x
  2684     0   388    32     0    67     1      60  )
  2685     0   388    33     0    67     1      60  )
  2686     0   388    34     0    67     1     102  ;
  2687     0   389     5     0    67     0      64  }
  2688     0   389     5     0    67     0     258  ENDMETHOD
  2689     0   389     5     0    68     0     259  STARTMETHOD
  2690     0   391     5     0    68     0      45  static
  2691     0   391    12     0    68     0      50  void
  2692     0   391    17     0    68     0     111  putLongL
  2693     0   391    25     0    68     0      59  (
  2694     0   391    26     0    68     0      53  long
  2695     0   391    31     0    68     0     111  a
  2696     0   391    32     0    68     0      66  ,
  2697     0   391    34     0    68     0      53  long
  2698     0   391    39     0    68     0     111  x
  2699     0   391    40     0    68     0      60  )
  2700     0   391    42     0    68     0      63  {
  2701     0   392     9     0    68     1     111  _put
  2702     0   392    13     0    68     1      59  (
  2703     0   392    14     0    68     1     111  a
  2704     0   392    16     0    68     1      74  +
  2705     0   392    18     0    68     1     112  7
  2706     0   392    19     0    68     1      66  ,
  2707     0   392    21     0    68     1     111  long7
  2708     0   392    26     0    68     1      59  (
  2709     0   392    27     0    68     1     111  x
  2710     0   392    28     0    68     1      60  )
  2711     0   392    29     0    68     1      60  )
  2712     0   392    30     0    68     1     102  ;
  2713     0   393     9     0    68     1     111  _put
  2714     0   393    13     0    68     1      59  (
  2715     0   393    14     0    68     1     111  a
  2716     0   393    16     0    68     1      74  +
  2717     0   393    18     0    68     1     112  6
  2718     0   393    19     0    68     1      66  ,
  2719     0   393    21     0    68     1     111  long6
  2720     0   393    26     0    68     1      59  (
  2721     0   393    27     0    68     1     111  x
  2722     0   393    28     0    68     1      60  )
  2723     0   393    29     0    68     1      60  )
  2724     0   393    30     0    68     1     102  ;
  2725     0   394     9     0    68     1     111  _put
  2726     0   394    13     0    68     1      59  (
  2727     0   394    14     0    68     1     111  a
  2728     0   394    16     0    68     1      74  +
  2729     0   394    18     0    68     1     112  5
  2730     0   394    19     0    68     1      66  ,
  2731     0   394    21     0    68     1     111  long5
  2732     0   394    26     0    68     1      59  (
  2733     0   394    27     0    68     1     111  x
  2734     0   394    28     0    68     1      60  )
  2735     0   394    29     0    68     1      60  )
  2736     0   394    30     0    68     1     102  ;
  2737     0   395     9     0    68     1     111  _put
  2738     0   395    13     0    68     1      59  (
  2739     0   395    14     0    68     1     111  a
  2740     0   395    16     0    68     1      74  +
  2741     0   395    18     0    68     1     112  4
  2742     0   395    19     0    68     1      66  ,
  2743     0   395    21     0    68     1     111  long4
  2744     0   395    26     0    68     1      59  (
  2745     0   395    27     0    68     1     111  x
  2746     0   395    28     0    68     1      60  )
  2747     0   395    29     0    68     1      60  )
  2748     0   395    30     0    68     1     102  ;
  2749     0   396     9     0    68     1     111  _put
  2750     0   396    13     0    68     1      59  (
  2751     0   396    14     0    68     1     111  a
  2752     0   396    16     0    68     1      74  +
  2753     0   396    18     0    68     1     112  3
  2754     0   396    19     0    68     1      66  ,
  2755     0   396    21     0    68     1     111  long3
  2756     0   396    26     0    68     1      59  (
  2757     0   396    27     0    68     1     111  x
  2758     0   396    28     0    68     1      60  )
  2759     0   396    29     0    68     1      60  )
  2760     0   396    30     0    68     1     102  ;
  2761     0   397     9     0    68     1     111  _put
  2762     0   397    13     0    68     1      59  (
  2763     0   397    14     0    68     1     111  a
  2764     0   397    16     0    68     1      74  +
  2765     0   397    18     0    68     1     112  2
  2766     0   397    19     0    68     1      66  ,
  2767     0   397    21     0    68     1     111  long2
  2768     0   397    26     0    68     1      59  (
  2769     0   397    27     0    68     1     111  x
  2770     0   397    28     0    68     1      60  )
  2771     0   397    29     0    68     1      60  )
  2772     0   397    30     0    68     1     102  ;
  2773     0   398     9     0    68     1     111  _put
  2774     0   398    13     0    68     1      59  (
  2775     0   398    14     0    68     1     111  a
  2776     0   398    16     0    68     1      74  +
  2777     0   398    18     0    68     1     112  1
  2778     0   398    19     0    68     1      66  ,
  2779     0   398    21     0    68     1     111  long1
  2780     0   398    26     0    68     1      59  (
  2781     0   398    27     0    68     1     111  x
  2782     0   398    28     0    68     1      60  )
  2783     0   398    29     0    68     1      60  )
  2784     0   398    30     0    68     1     102  ;
  2785     0   399     9     0    68     1     111  _put
  2786     0   399    13     0    68     1      59  (
  2787     0   399    14     0    68     1     111  a
  2788     0   399    16     0    68     1      74  +
  2789     0   399    18     0    68     1     112  0
  2790     0   399    19     0    68     1      66  ,
  2791     0   399    21     0    68     1     111  long0
  2792     0   399    26     0    68     1      59  (
  2793     0   399    27     0    68     1     111  x
  2794     0   399    28     0    68     1      60  )
  2795     0   399    29     0    68     1      60  )
  2796     0   399    30     0    68     1     102  ;
  2797     0   400     5     0    68     0      64  }
  2798     0   400     5     0    68     0     260  ENDMETHOD
  2799     0   400     5     0    69     0     261  STARTMETHOD
  2800     0   402     5     0    69     0      45  static
  2801     0   402    12     0    69     0      50  void
  2802     0   402    17     0    69     0     111  putLongB
  2803     0   402    25     0    69     0      59  (
  2804     0   402    26     0    69     0     111  ByteBuffer
  2805     0   402    37     0    69     0     111  bb
  2806     0   402    39     0    69     0      66  ,
  2807     0   402    41     0    69     0      36  int
  2808     0   402    45     0    69     0     111  bi
  2809     0   402    47     0    69     0      66  ,
  2810     0   402    49     0    69     0      53  long
  2811     0   402    54     0    69     0     111  x
  2812     0   402    55     0    69     0      60  )
  2813     0   402    57     0    69     0      63  {
  2814     0   403     9     0    69     1     111  bb._put
  2815     0   403    16     0    69     1      59  (
  2816     0   403    17     0    69     1     111  bi
  2817     0   403    20     0    69     1      74  +
  2818     0   403    22     0    69     1     112  0
  2819     0   403    23     0    69     1      66  ,
  2820     0   403    25     0    69     1     111  long7
  2821     0   403    30     0    69     1      59  (
  2822     0   403    31     0    69     1     111  x
  2823     0   403    32     0    69     1      60  )
  2824     0   403    33     0    69     1      60  )
  2825     0   403    34     0    69     1     102  ;
  2826     0   404     9     0    69     1     111  bb._put
  2827     0   404    16     0    69     1      59  (
  2828     0   404    17     0    69     1     111  bi
  2829     0   404    20     0    69     1      74  +
  2830     0   404    22     0    69     1     112  1
  2831     0   404    23     0    69     1      66  ,
  2832     0   404    25     0    69     1     111  long6
  2833     0   404    30     0    69     1      59  (
  2834     0   404    31     0    69     1     111  x
  2835     0   404    32     0    69     1      60  )
  2836     0   404    33     0    69     1      60  )
  2837     0   404    34     0    69     1     102  ;
  2838     0   405     9     0    69     1     111  bb._put
  2839     0   405    16     0    69     1      59  (
  2840     0   405    17     0    69     1     111  bi
  2841     0   405    20     0    69     1      74  +
  2842     0   405    22     0    69     1     112  2
  2843     0   405    23     0    69     1      66  ,
  2844     0   405    25     0    69     1     111  long5
  2845     0   405    30     0    69     1      59  (
  2846     0   405    31     0    69     1     111  x
  2847     0   405    32     0    69     1      60  )
  2848     0   405    33     0    69     1      60  )
  2849     0   405    34     0    69     1     102  ;
  2850     0   406     9     0    69     1     111  bb._put
  2851     0   406    16     0    69     1      59  (
  2852     0   406    17     0    69     1     111  bi
  2853     0   406    20     0    69     1      74  +
  2854     0   406    22     0    69     1     112  3
  2855     0   406    23     0    69     1      66  ,
  2856     0   406    25     0    69     1     111  long4
  2857     0   406    30     0    69     1      59  (
  2858     0   406    31     0    69     1     111  x
  2859     0   406    32     0    69     1      60  )
  2860     0   406    33     0    69     1      60  )
  2861     0   406    34     0    69     1     102  ;
  2862     0   407     9     0    69     1     111  bb._put
  2863     0   407    16     0    69     1      59  (
  2864     0   407    17     0    69     1     111  bi
  2865     0   407    20     0    69     1      74  +
  2866     0   407    22     0    69     1     112  4
  2867     0   407    23     0    69     1      66  ,
  2868     0   407    25     0    69     1     111  long3
  2869     0   407    30     0    69     1      59  (
  2870     0   407    31     0    69     1     111  x
  2871     0   407    32     0    69     1      60  )
  2872     0   407    33     0    69     1      60  )
  2873     0   407    34     0    69     1     102  ;
  2874     0   408     9     0    69     1     111  bb._put
  2875     0   408    16     0    69     1      59  (
  2876     0   408    17     0    69     1     111  bi
  2877     0   408    20     0    69     1      74  +
  2878     0   408    22     0    69     1     112  5
  2879     0   408    23     0    69     1      66  ,
  2880     0   408    25     0    69     1     111  long2
  2881     0   408    30     0    69     1      59  (
  2882     0   408    31     0    69     1     111  x
  2883     0   408    32     0    69     1      60  )
  2884     0   408    33     0    69     1      60  )
  2885     0   408    34     0    69     1     102  ;
  2886     0   409     9     0    69     1     111  bb._put
  2887     0   409    16     0    69     1      59  (
  2888     0   409    17     0    69     1     111  bi
  2889     0   409    20     0    69     1      74  +
  2890     0   409    22     0    69     1     112  6
  2891     0   409    23     0    69     1      66  ,
  2892     0   409    25     0    69     1     111  long1
  2893     0   409    30     0    69     1      59  (
  2894     0   409    31     0    69     1     111  x
  2895     0   409    32     0    69     1      60  )
  2896     0   409    33     0    69     1      60  )
  2897     0   409    34     0    69     1     102  ;
  2898     0   410     9     0    69     1     111  bb._put
  2899     0   410    16     0    69     1      59  (
  2900     0   410    17     0    69     1     111  bi
  2901     0   410    20     0    69     1      74  +
  2902     0   410    22     0    69     1     112  7
  2903     0   410    23     0    69     1      66  ,
  2904     0   410    25     0    69     1     111  long0
  2905     0   410    30     0    69     1      59  (
  2906     0   410    31     0    69     1     111  x
  2907     0   410    32     0    69     1      60  )
  2908     0   410    33     0    69     1      60  )
  2909     0   410    34     0    69     1     102  ;
  2910     0   411     5     0    69     0      64  }
  2911     0   411     5     0    69     0     262  ENDMETHOD
  2912     0   411     5     0    70     0     263  STARTMETHOD
  2913     0   413     5     0    70     0      45  static
  2914     0   413    12     0    70     0      50  void
  2915     0   413    17     0    70     0     111  putLongB
  2916     0   413    25     0    70     0      59  (
  2917     0   413    26     0    70     0      53  long
  2918     0   413    31     0    70     0     111  a
  2919     0   413    32     0    70     0      66  ,
  2920     0   413    34     0    70     0      53  long
  2921     0   413    39     0    70     0     111  x
  2922     0   413    40     0    70     0      60  )
  2923     0   413    42     0    70     0      63  {
  2924     0   414     9     0    70     1     111  _put
  2925     0   414    13     0    70     1      59  (
  2926     0   414    14     0    70     1     111  a
  2927     0   414    16     0    70     1      74  +
  2928     0   414    18     0    70     1     112  0
  2929     0   414    19     0    70     1      66  ,
  2930     0   414    21     0    70     1     111  long7
  2931     0   414    26     0    70     1      59  (
  2932     0   414    27     0    70     1     111  x
  2933     0   414    28     0    70     1      60  )
  2934     0   414    29     0    70     1      60  )
  2935     0   414    30     0    70     1     102  ;
  2936     0   415     9     0    70     1     111  _put
  2937     0   415    13     0    70     1      59  (
  2938     0   415    14     0    70     1     111  a
  2939     0   415    16     0    70     1      74  +
  2940     0   415    18     0    70     1     112  1
  2941     0   415    19     0    70     1      66  ,
  2942     0   415    21     0    70     1     111  long6
  2943     0   415    26     0    70     1      59  (
  2944     0   415    27     0    70     1     111  x
  2945     0   415    28     0    70     1      60  )
  2946     0   415    29     0    70     1      60  )
  2947     0   415    30     0    70     1     102  ;
  2948     0   416     9     0    70     1     111  _put
  2949     0   416    13     0    70     1      59  (
  2950     0   416    14     0    70     1     111  a
  2951     0   416    16     0    70     1      74  +
  2952     0   416    18     0    70     1     112  2
  2953     0   416    19     0    70     1      66  ,
  2954     0   416    21     0    70     1     111  long5
  2955     0   416    26     0    70     1      59  (
  2956     0   416    27     0    70     1     111  x
  2957     0   416    28     0    70     1      60  )
  2958     0   416    29     0    70     1      60  )
  2959     0   416    30     0    70     1     102  ;
  2960     0   417     9     0    70     1     111  _put
  2961     0   417    13     0    70     1      59  (
  2962     0   417    14     0    70     1     111  a
  2963     0   417    16     0    70     1      74  +
  2964     0   417    18     0    70     1     112  3
  2965     0   417    19     0    70     1      66  ,
  2966     0   417    21     0    70     1     111  long4
  2967     0   417    26     0    70     1      59  (
  2968     0   417    27     0    70     1     111  x
  2969     0   417    28     0    70     1      60  )
  2970     0   417    29     0    70     1      60  )
  2971     0   417    30     0    70     1     102  ;
  2972     0   418     9     0    70     1     111  _put
  2973     0   418    13     0    70     1      59  (
  2974     0   418    14     0    70     1     111  a
  2975     0   418    16     0    70     1      74  +
  2976     0   418    18     0    70     1     112  4
  2977     0   418    19     0    70     1      66  ,
  2978     0   418    21     0    70     1     111  long3
  2979     0   418    26     0    70     1      59  (
  2980     0   418    27     0    70     1     111  x
  2981     0   418    28     0    70     1      60  )
  2982     0   418    29     0    70     1      60  )
  2983     0   418    30     0    70     1     102  ;
  2984     0   419     9     0    70     1     111  _put
  2985     0   419    13     0    70     1      59  (
  2986     0   419    14     0    70     1     111  a
  2987     0   419    16     0    70     1      74  +
  2988     0   419    18     0    70     1     112  5
  2989     0   419    19     0    70     1      66  ,
  2990     0   419    21     0    70     1     111  long2
  2991     0   419    26     0    70     1      59  (
  2992     0   419    27     0    70     1     111  x
  2993     0   419    28     0    70     1      60  )
  2994     0   419    29     0    70     1      60  )
  2995     0   419    30     0    70     1     102  ;
  2996     0   420     9     0    70     1     111  _put
  2997     0   420    13     0    70     1      59  (
  2998     0   420    14     0    70     1     111  a
  2999     0   420    16     0    70     1      74  +
  3000     0   420    18     0    70     1     112  6
  3001     0   420    19     0    70     1      66  ,
  3002     0   420    21     0    70     1     111  long1
  3003     0   420    26     0    70     1      59  (
  3004     0   420    27     0    70     1     111  x
  3005     0   420    28     0    70     1      60  )
  3006     0   420    29     0    70     1      60  )
  3007     0   420    30     0    70     1     102  ;
  3008     0   421     9     0    70     1     111  _put
  3009     0   421    13     0    70     1      59  (
  3010     0   421    14     0    70     1     111  a
  3011     0   421    16     0    70     1      74  +
  3012     0   421    18     0    70     1     112  7
  3013     0   421    19     0    70     1      66  ,
  3014     0   421    21     0    70     1     111  long0
  3015     0   421    26     0    70     1      59  (
  3016     0   421    27     0    70     1     111  x
  3017     0   421    28     0    70     1      60  )
  3018     0   421    29     0    70     1      60  )
  3019     0   421    30     0    70     1     102  ;
  3020     0   422     5     0    70     0      64  }
  3021     0   422     5     0    70     0     264  ENDMETHOD
  3022     0   422     5     0    71     0     265  STARTMETHOD
  3023     0   424     5     0    71     0      45  static
  3024     0   424    12     0    71     0      50  void
  3025     0   424    17     0    71     0     111  putLong
  3026     0   424    24     0    71     0      59  (
  3027     0   424    25     0    71     0     111  ByteBuffer
  3028     0   424    36     0    71     0     111  bb
  3029     0   424    38     0    71     0      66  ,
  3030     0   424    40     0    71     0      36  int
  3031     0   424    44     0    71     0     111  bi
  3032     0   424    46     0    71     0      66  ,
  3033     0   424    48     0    71     0      53  long
  3034     0   424    53     0    71     0     111  x
  3035     0   424    54     0    71     0      66  ,
  3036     0   424    56     0    71     0      39  boolean
  3037     0   424    64     0    71     0     111  bigEndian
  3038     0   424    73     0    71     0      60  )
  3039     0   424    75     0    71     0      63  {
  3040     0   425     9     0    71     0      31  if
  3041     0   425    12     0    71     0      59  (
  3042     0   425    13     0    71     0     111  bigEndian
  3043     0   425    22     0    71     0      60  )
  3044     0   426    13     0    71     0     111  putLongB
  3045     0   426    21     0    71     0      59  (
  3046     0   426    22     0    71     0     111  bb
  3047     0   426    24     0    71     0      66  ,
  3048     0   426    26     0    71     0     111  bi
  3049     0   426    28     0    71     0      66  ,
  3050     0   426    30     0    71     0     111  x
  3051     0   426    31     0    71     0      60  )
  3052     0   426    32     0    71     0     102  ;
  3053     0   427     9     0    71     0      48  else
  3054     0   428    13     0    71     0     111  putLongL
  3055     0   428    21     0    71     0      59  (
  3056     0   428    22     0    71     0     111  bb
  3057     0   428    24     0    71     0      66  ,
  3058     0   428    26     0    71     0     111  bi
  3059     0   428    28     0    71     0      66  ,
  3060     0   428    30     0    71     0     111  x
  3061     0   428    31     0    71     0      60  )
  3062     0   428    32     0    71     0     102  ;
  3063     0   429     5     0    71     0      64  }
  3064     0   429     5     0    71     0     266  ENDMETHOD
  3065     0   429     5     0    72     0     267  STARTMETHOD
  3066     0   431     5     0    72     0      45  static
  3067     0   431    12     0    72     0      50  void
  3068     0   431    17     0    72     0     111  putLong
  3069     0   431    24     0    72     0      59  (
  3070     0   431    25     0    72     0      53  long
  3071     0   431    30     0    72     0     111  a
  3072     0   431    31     0    72     0      66  ,
  3073     0   431    33     0    72     0      53  long
  3074     0   431    38     0    72     0     111  x
  3075     0   431    39     0    72     0      66  ,
  3076     0   431    41     0    72     0      39  boolean
  3077     0   431    49     0    72     0     111  bigEndian
  3078     0   431    58     0    72     0      60  )
  3079     0   431    60     0    72     0      63  {
  3080     0   432     9     0    72     0      31  if
  3081     0   432    12     0    72     0      59  (
  3082     0   432    13     0    72     0     111  bigEndian
  3083     0   432    22     0    72     0      60  )
  3084     0   433    13     0    72     0     111  putLongB
  3085     0   433    21     0    72     0      59  (
  3086     0   433    22     0    72     0     111  a
  3087     0   433    23     0    72     0      66  ,
  3088     0   433    25     0    72     0     111  x
  3089     0   433    26     0    72     0      60  )
  3090     0   433    27     0    72     0     102  ;
  3091     0   434     9     0    72     0      48  else
  3092     0   435    13     0    72     0     111  putLongL
  3093     0   435    21     0    72     0      59  (
  3094     0   435    22     0    72     0     111  a
  3095     0   435    23     0    72     0      66  ,
  3096     0   435    25     0    72     0     111  x
  3097     0   435    26     0    72     0      60  )
  3098     0   435    27     0    72     0     102  ;
  3099     0   436     5     0    72     0      64  }
  3100     0   436     5     0    72     0     268  ENDMETHOD
  3101     0   436     5     0    73     0     269  STARTMETHOD
  3102     0   441     5     0    73     1      45  static
  3103     0   441    12     0    73     1       4  float
  3104     0   441    18     0    73     0     111  getFloatL
  3105     0   441    27     0    73     0      59  (
  3106     0   441    28     0    73     0     111  ByteBuffer
  3107     0   441    39     0    73     0     111  bb
  3108     0   441    41     0    73     0      66  ,
  3109     0   441    43     0    73     0      36  int
  3110     0   441    47     0    73     0     111  bi
  3111     0   441    49     0    73     0      60  )
  3112     0   441    51     0    73     0      63  {
  3113     0   442     9     0    73     0      19  return
  3114     0   442    16     0    73     0     111  Float.intBitsToFloat
  3115     0   442    36     0    73     0      59  (
  3116     0   442    37     0    73     0     111  getIntL
  3117     0   442    44     0    73     0      59  (
  3118     0   442    45     0    73     0     111  bb
  3119     0   442    47     0    73     0      66  ,
  3120     0   442    49     0    73     0     111  bi
  3121     0   442    51     0    73     0      60  )
  3122     0   442    52     0    73     0      60  )
  3123     0   442    53     0    73     0     102  ;
  3124     0   443     5     0    73     0      64  }
  3125     0   443     5     0    73     0     270  ENDMETHOD
  3126     0   443     5     0    74     0     271  STARTMETHOD
  3127     0   445     5     0    74     0      45  static
  3128     0   445    12     0    74     0       4  float
  3129     0   445    18     0    74     0     111  getFloatL
  3130     0   445    27     0    74     0      59  (
  3131     0   445    28     0    74     0      53  long
  3132     0   445    33     0    74     0     111  a
  3133     0   445    34     0    74     0      60  )
  3134     0   445    36     0    74     0      63  {
  3135     0   446     9     0    74     0      19  return
  3136     0   446    16     0    74     0     111  Float.intBitsToFloat
  3137     0   446    36     0    74     0      59  (
  3138     0   446    37     0    74     0     111  getIntL
  3139     0   446    44     0    74     0      59  (
  3140     0   446    45     0    74     0     111  a
  3141     0   446    46     0    74     0      60  )
  3142     0   446    47     0    74     0      60  )
  3143     0   446    48     0    74     0     102  ;
  3144     0   447     5     0    74     0      64  }
  3145     0   447     5     0    74     0     272  ENDMETHOD
  3146     0   447     5     0    75     0     273  STARTMETHOD
  3147     0   449     5     0    75     1      45  static
  3148     0   449    12     0    75     1       4  float
  3149     0   449    18     0    75     0     111  getFloatB
  3150     0   449    27     0    75     0      59  (
  3151     0   449    28     0    75     0     111  ByteBuffer
  3152     0   449    39     0    75     0     111  bb
  3153     0   449    41     0    75     0      66  ,
  3154     0   449    43     0    75     0      36  int
  3155     0   449    47     0    75     0     111  bi
  3156     0   449    49     0    75     0      60  )
  3157     0   449    51     0    75     0      63  {
  3158     0   450     9     0    75     0      19  return
  3159     0   450    16     0    75     0     111  Float.intBitsToFloat
  3160     0   450    36     0    75     0      59  (
  3161     0   450    37     0    75     0     111  getIntB
  3162     0   450    44     0    75     0      59  (
  3163     0   450    45     0    75     0     111  bb
  3164     0   450    47     0    75     0      66  ,
  3165     0   450    49     0    75     0     111  bi
  3166     0   450    51     0    75     0      60  )
  3167     0   450    52     0    75     0      60  )
  3168     0   450    53     0    75     0     102  ;
  3169     0   451     5     0    75     0      64  }
  3170     0   451     5     0    75     0     274  ENDMETHOD
  3171     0   451     5     0    76     0     275  STARTMETHOD
  3172     0   453     5     0    76     0      45  static
  3173     0   453    12     0    76     0       4  float
  3174     0   453    18     0    76     0     111  getFloatB
  3175     0   453    27     0    76     0      59  (
  3176     0   453    28     0    76     0      53  long
  3177     0   453    33     0    76     0     111  a
  3178     0   453    34     0    76     0      60  )
  3179     0   453    36     0    76     0      63  {
  3180     0   454     9     0    76     0      19  return
  3181     0   454    16     0    76     0     111  Float.intBitsToFloat
  3182     0   454    36     0    76     0      59  (
  3183     0   454    37     0    76     0     111  getIntB
  3184     0   454    44     0    76     0      59  (
  3185     0   454    45     0    76     0     111  a
  3186     0   454    46     0    76     0      60  )
  3187     0   454    47     0    76     0      60  )
  3188     0   454    48     0    76     0     102  ;
  3189     0   455     5     0    76     0      64  }
  3190     0   455     5     0    76     0     276  ENDMETHOD
  3191     0   455     5     0    77     0     277  STARTMETHOD
  3192     0   457     5     0    77     1      45  static
  3193     0   457    12     0    77     1       4  float
  3194     0   457    18     0    77     0     111  getFloat
  3195     0   457    26     0    77     0      59  (
  3196     0   457    27     0    77     0     111  ByteBuffer
  3197     0   457    38     0    77     0     111  bb
  3198     0   457    40     0    77     0      66  ,
  3199     0   457    42     0    77     0      36  int
  3200     0   457    46     0    77     0     111  bi
  3201     0   457    48     0    77     0      66  ,
  3202     0   457    50     0    77     0      39  boolean
  3203     0   457    58     0    77     0     111  bigEndian
  3204     0   457    67     0    77     0      60  )
  3205     0   457    69     0    77     0      63  {
  3206     0   458     9     0    77     0      19  return
  3207     0   458    16     0    77     0      59  (
  3208     0   458    17     0    77     0     111  bigEndian
  3209     0   458    27     0    77     0      58  ?
  3210     0   458    29     0    77     0     111  getFloatB
  3211     0   458    38     0    77     0      59  (
  3212     0   458    39     0    77     0     111  bb
  3213     0   458    41     0    77     0      66  ,
  3214     0   458    43     0    77     0     111  bi
  3215     0   458    45     0    77     0      60  )
  3216     0   458    47     0    77     0      65  :
  3217     0   458    49     0    77     0     111  getFloatL
  3218     0   458    58     0    77     0      59  (
  3219     0   458    59     0    77     0     111  bb
  3220     0   458    61     0    77     0      66  ,
  3221     0   458    63     0    77     1     111  bi
  3222     0   458    65     0    77     1      60  )
  3223     0   458    66     0    77     1      60  )
  3224     0   458    67     0    77     1     102  ;
  3225     0   459     5     0    77     1      64  }
  3226     0   459     5     0    77     0     278  ENDMETHOD
  3227     0   459     5     0    78     0     279  STARTMETHOD
  3228     0   461     5     0    78     0      45  static
  3229     0   461    12     0    78     0       4  float
  3230     0   461    18     0    78     0     111  getFloat
  3231     0   461    26     0    78     0      59  (
  3232     0   461    27     0    78     0      53  long
  3233     0   461    32     0    78     0     111  a
  3234     0   461    33     0    78     0      66  ,
  3235     0   461    35     0    78     0      39  boolean
  3236     0   461    43     0    78     0     111  bigEndian
  3237     0   461    52     0    78     0      60  )
  3238     0   461    54     0    78     0      63  {
  3239     0   462     9     0    78     0      19  return
  3240     0   462    16     0    78     0      59  (
  3241     0   462    17     0    78     0     111  bigEndian
  3242     0   462    27     0    78     0      58  ?
  3243     0   462    29     0    78     0     111  getFloatB
  3244     0   462    38     0    78     0      59  (
  3245     0   462    39     0    78     0     111  a
  3246     0   462    40     0    78     0      60  )
  3247     0   462    42     0    78     0      65  :
  3248     0   462    44     0    78     0     111  getFloatL
  3249     0   462    53     0    78     0      59  (
  3250     0   462    54     0    78     1     111  a
  3251     0   462    55     0    78     1      60  )
  3252     0   462    56     0    78     1      60  )
  3253     0   462    57     0    78     1     102  ;
  3254     0   463     5     0    78     1      64  }
  3255     0   463     5     0    78     0     280  ENDMETHOD
  3256     0   463     5     0    79     0     281  STARTMETHOD
  3257     0   465     5     0    79     0      45  static
  3258     0   465    12     0    79     0      50  void
  3259     0   465    17     0    79     0     111  putFloatL
  3260     0   465    26     0    79     0      59  (
  3261     0   465    27     0    79     0     111  ByteBuffer
  3262     0   465    38     0    79     0     111  bb
  3263     0   465    40     0    79     0      66  ,
  3264     0   465    42     0    79     0      36  int
  3265     0   465    46     0    79     0     111  bi
  3266     0   465    48     0    79     0      66  ,
  3267     0   465    50     0    79     0       4  float
  3268     0   465    56     0    79     0     111  x
  3269     0   465    57     0    79     0      60  )
  3270     0   465    59     0    79     0      63  {
  3271     0   466     9     0    79     0     111  putIntL
  3272     0   466    16     0    79     0      59  (
  3273     0   466    17     0    79     0     111  bb
  3274     0   466    19     0    79     0      66  ,
  3275     0   466    21     0    79     0     111  bi
  3276     0   466    23     0    79     0      66  ,
  3277     0   466    25     0    79     0     111  Float.floatToRawIntBits
  3278     0   466    48     0    79     0      59  (
  3279     0   466    49     0    79     1     111  x
  3280     0   466    50     0    79     1      60  )
  3281     0   466    51     0    79     1      60  )
  3282     0   466    52     0    79     1     102  ;
  3283     0   467     5     0    79     1      64  }
  3284     0   467     5     0    79     0     282  ENDMETHOD
  3285     0   467     5     0    80     0     283  STARTMETHOD
  3286     0   469     5     0    80     0      45  static
  3287     0   469    12     0    80     0      50  void
  3288     0   469    17     0    80     0     111  putFloatL
  3289     0   469    26     0    80     0      59  (
  3290     0   469    27     0    80     0      53  long
  3291     0   469    32     0    80     0     111  a
  3292     0   469    33     0    80     0      66  ,
  3293     0   469    35     0    80     0       4  float
  3294     0   469    41     0    80     0     111  x
  3295     0   469    42     0    80     0      60  )
  3296     0   469    44     0    80     0      63  {
  3297     0   470     9     0    80     0     111  putIntL
  3298     0   470    16     0    80     0      59  (
  3299     0   470    17     0    80     0     111  a
  3300     0   470    18     0    80     0      66  ,
  3301     0   470    20     0    80     0     111  Float.floatToRawIntBits
  3302     0   470    43     0    80     0      59  (
  3303     0   470    44     0    80     0     111  x
  3304     0   470    45     0    80     0      60  )
  3305     0   470    46     0    80     0      60  )
  3306     0   470    47     0    80     0     102  ;
  3307     0   471     5     0    80     0      64  }
  3308     0   471     5     0    80     0     284  ENDMETHOD
  3309     0   471     5     0    81     0     285  STARTMETHOD
  3310     0   473     5     0    81     0      45  static
  3311     0   473    12     0    81     0      50  void
  3312     0   473    17     0    81     0     111  putFloatB
  3313     0   473    26     0    81     0      59  (
  3314     0   473    27     0    81     0     111  ByteBuffer
  3315     0   473    38     0    81     0     111  bb
  3316     0   473    40     0    81     0      66  ,
  3317     0   473    42     0    81     0      36  int
  3318     0   473    46     0    81     0     111  bi
  3319     0   473    48     0    81     0      66  ,
  3320     0   473    50     0    81     0       4  float
  3321     0   473    56     0    81     0     111  x
  3322     0   473    57     0    81     0      60  )
  3323     0   473    59     0    81     0      63  {
  3324     0   474     9     0    81     0     111  putIntB
  3325     0   474    16     0    81     0      59  (
  3326     0   474    17     0    81     0     111  bb
  3327     0   474    19     0    81     0      66  ,
  3328     0   474    21     0    81     0     111  bi
  3329     0   474    23     0    81     0      66  ,
  3330     0   474    25     0    81     0     111  Float.floatToRawIntBits
  3331     0   474    48     0    81     0      59  (
  3332     0   474    49     0    81     0     111  x
  3333     0   474    50     0    81     0      60  )
  3334     0   474    51     0    81     0      60  )
  3335     0   474    52     0    81     0     102  ;
  3336     0   475     5     0    81     0      64  }
  3337     0   475     5     0    81     0     286  ENDMETHOD
  3338     0   475     5     0    82     0     287  STARTMETHOD
  3339     0   477     5     0    82     0      45  static
  3340     0   477    12     0    82     0      50  void
  3341     0   477    17     0    82     0     111  putFloatB
  3342     0   477    26     0    82     0      59  (
  3343     0   477    27     0    82     0      53  long
  3344     0   477    32     0    82     0     111  a
  3345     0   477    33     0    82     0      66  ,
  3346     0   477    35     0    82     0       4  float
  3347     0   477    41     0    82     0     111  x
  3348     0   477    42     0    82     0      60  )
  3349     0   477    44     0    82     0      63  {
  3350     0   478     9     0    82     0     111  putIntB
  3351     0   478    16     0    82     0      59  (
  3352     0   478    17     0    82     0     111  a
  3353     0   478    18     0    82     0      66  ,
  3354     0   478    20     0    82     0     111  Float.floatToRawIntBits
  3355     0   478    43     0    82     0      59  (
  3356     0   478    44     0    82     0     111  x
  3357     0   478    45     0    82     0      60  )
  3358     0   478    46     0    82     0      60  )
  3359     0   478    47     0    82     0     102  ;
  3360     0   479     5     0    82     0      64  }
  3361     0   479     5     0    82     0     288  ENDMETHOD
  3362     0   479     5     0    83     0     289  STARTMETHOD
  3363     0   481     5     0    83     0      45  static
  3364     0   481    12     0    83     0      50  void
  3365     0   481    17     0    83     0     111  putFloat
  3366     0   481    25     0    83     0      59  (
  3367     0   481    26     0    83     0     111  ByteBuffer
  3368     0   481    37     0    83     0     111  bb
  3369     0   481    39     0    83     0      66  ,
  3370     0   481    41     0    83     0      36  int
  3371     0   481    45     0    83     0     111  bi
  3372     0   481    47     0    83     0      66  ,
  3373     0   481    49     0    83     0       4  float
  3374     0   481    55     0    83     0     111  x
  3375     0   481    56     0    83     0      66  ,
  3376     0   481    58     0    83     0      39  boolean
  3377     0   481    66     0    83     0     111  bigEndian
  3378     0   481    75     0    83     0      60  )
  3379     0   481    77     0    83     0      63  {
  3380     0   482     9     0    83     0      31  if
  3381     0   482    12     0    83     0      59  (
  3382     0   482    13     0    83     0     111  bigEndian
  3383     0   482    22     0    83     0      60  )
  3384     0   483    13     0    83     0     111  putFloatB
  3385     0   483    22     0    83     0      59  (
  3386     0   483    23     0    83     0     111  bb
  3387     0   483    25     0    83     0      66  ,
  3388     0   483    27     0    83     0     111  bi
  3389     0   483    29     0    83     0      66  ,
  3390     0   483    31     0    83     0     111  x
  3391     0   483    32     0    83     0      60  )
  3392     0   483    33     0    83     0     102  ;
  3393     0   484     9     0    83     0      48  else
  3394     0   485    13     0    83     0     111  putFloatL
  3395     0   485    22     0    83     0      59  (
  3396     0   485    23     0    83     0     111  bb
  3397     0   485    25     0    83     0      66  ,
  3398     0   485    27     0    83     0     111  bi
  3399     0   485    29     0    83     0      66  ,
  3400     0   485    31     0    83     0     111  x
  3401     0   485    32     0    83     0      60  )
  3402     0   485    33     0    83     0     102  ;
  3403     0   486     5     0    83     0      64  }
  3404     0   486     5     0    83     0     290  ENDMETHOD
  3405     0   486     5     0    84     0     291  STARTMETHOD
  3406     0   488     5     0    84     0      45  static
  3407     0   488    12     0    84     0      50  void
  3408     0   488    17     0    84     0     111  putFloat
  3409     0   488    25     0    84     0      59  (
  3410     0   488    26     0    84     0      53  long
  3411     0   488    31     0    84     0     111  a
  3412     0   488    32     0    84     0      66  ,
  3413     0   488    34     0    84     0       4  float
  3414     0   488    40     0    84     0     111  x
  3415     0   488    41     0    84     0      66  ,
  3416     0   488    43     0    84     0      39  boolean
  3417     0   488    51     0    84     0     111  bigEndian
  3418     0   488    60     0    84     0      60  )
  3419     0   488    62     0    84     0      63  {
  3420     0   489     9     0    84     0      31  if
  3421     0   489    12     0    84     0      59  (
  3422     0   489    13     0    84     0     111  bigEndian
  3423     0   489    22     0    84     0      60  )
  3424     0   490    13     0    84     0     111  putFloatB
  3425     0   490    22     0    84     0      59  (
  3426     0   490    23     0    84     0     111  a
  3427     0   490    24     0    84     0      66  ,
  3428     0   490    26     0    84     0     111  x
  3429     0   490    27     0    84     0      60  )
  3430     0   490    28     0    84     0     102  ;
  3431     0   491     9     0    84     0      48  else
  3432     0   492    13     0    84     0     111  putFloatL
  3433     0   492    22     0    84     0      59  (
  3434     0   492    23     0    84     0     111  a
  3435     0   492    24     0    84     0      66  ,
  3436     0   492    26     0    84     0     111  x
  3437     0   492    27     0    84     0      60  )
  3438     0   492    28     0    84     0     102  ;
  3439     0   493     5     0    84     0      64  }
  3440     0   493     5     0    84     0     292  ENDMETHOD
  3441     0   493     5     0    85     0     293  STARTMETHOD
  3442     0   498     5     0    85     1      45  static
  3443     0   498    12     0    85     1      32  double
  3444     0   498    19     0    85     0     111  getDoubleL
  3445     0   498    29     0    85     0      59  (
  3446     0   498    30     0    85     0     111  ByteBuffer
  3447     0   498    41     0    85     0     111  bb
  3448     0   498    43     0    85     0      66  ,
  3449     0   498    45     0    85     0      36  int
  3450     0   498    49     0    85     0     111  bi
  3451     0   498    51     0    85     0      60  )
  3452     0   498    53     0    85     0      63  {
  3453     0   499     9     0    85     0      19  return
  3454     0   499    16     0    85     0     111  Double.longBitsToDouble
  3455     0   499    39     0    85     0      59  (
  3456     0   499    40     0    85     0     111  getLongL
  3457     0   499    48     0    85     0      59  (
  3458     0   499    49     0    85     0     111  bb
  3459     0   499    51     0    85     0      66  ,
  3460     0   499    53     0    85     0     111  bi
  3461     0   499    55     0    85     0      60  )
  3462     0   499    56     0    85     0      60  )
  3463     0   499    57     0    85     0     102  ;
  3464     0   500     5     0    85     0      64  }
  3465     0   500     5     0    85     0     294  ENDMETHOD
  3466     0   500     5     0    86     0     295  STARTMETHOD
  3467     0   502     5     0    86     0      45  static
  3468     0   502    12     0    86     0      32  double
  3469     0   502    19     0    86     0     111  getDoubleL
  3470     0   502    29     0    86     0      59  (
  3471     0   502    30     0    86     0      53  long
  3472     0   502    35     0    86     0     111  a
  3473     0   502    36     0    86     0      60  )
  3474     0   502    38     0    86     0      63  {
  3475     0   503     9     0    86     0      19  return
  3476     0   503    16     0    86     0     111  Double.longBitsToDouble
  3477     0   503    39     0    86     0      59  (
  3478     0   503    40     0    86     0     111  getLongL
  3479     0   503    48     0    86     0      59  (
  3480     0   503    49     0    86     0     111  a
  3481     0   503    50     0    86     0      60  )
  3482     0   503    51     0    86     0      60  )
  3483     0   503    52     0    86     0     102  ;
  3484     0   504     5     0    86     0      64  }
  3485     0   504     5     0    86     0     296  ENDMETHOD
  3486     0   504     5     0    87     0     297  STARTMETHOD
  3487     0   506     5     0    87     1      45  static
  3488     0   506    12     0    87     1      32  double
  3489     0   506    19     0    87     0     111  getDoubleB
  3490     0   506    29     0    87     0      59  (
  3491     0   506    30     0    87     0     111  ByteBuffer
  3492     0   506    41     0    87     0     111  bb
  3493     0   506    43     0    87     0      66  ,
  3494     0   506    45     0    87     0      36  int
  3495     0   506    49     0    87     0     111  bi
  3496     0   506    51     0    87     0      60  )
  3497     0   506    53     0    87     0      63  {
  3498     0   507     9     0    87     0      19  return
  3499     0   507    16     0    87     0     111  Double.longBitsToDouble
  3500     0   507    39     0    87     0      59  (
  3501     0   507    40     0    87     0     111  getLongB
  3502     0   507    48     0    87     0      59  (
  3503     0   507    49     0    87     0     111  bb
  3504     0   507    51     0    87     0      66  ,
  3505     0   507    53     0    87     0     111  bi
  3506     0   507    55     0    87     0      60  )
  3507     0   507    56     0    87     0      60  )
  3508     0   507    57     0    87     0     102  ;
  3509     0   508     5     0    87     0      64  }
  3510     0   508     5     0    87     0     298  ENDMETHOD
  3511     0   508     5     0    88     0     299  STARTMETHOD
  3512     0   510     5     0    88     0      45  static
  3513     0   510    12     0    88     0      32  double
  3514     0   510    19     0    88     0     111  getDoubleB
  3515     0   510    29     0    88     0      59  (
  3516     0   510    30     0    88     0      53  long
  3517     0   510    35     0    88     0     111  a
  3518     0   510    36     0    88     0      60  )
  3519     0   510    38     0    88     0      63  {
  3520     0   511     9     0    88     0      19  return
  3521     0   511    16     0    88     0     111  Double.longBitsToDouble
  3522     0   511    39     0    88     0      59  (
  3523     0   511    40     0    88     0     111  getLongB
  3524     0   511    48     0    88     0      59  (
  3525     0   511    49     0    88     0     111  a
  3526     0   511    50     0    88     0      60  )
  3527     0   511    51     0    88     0      60  )
  3528     0   511    52     0    88     0     102  ;
  3529     0   512     5     0    88     0      64  }
  3530     0   512     5     0    88     0     300  ENDMETHOD
  3531     0   512     5     0    89     0     301  STARTMETHOD
  3532     0   514     5     0    89     1      45  static
  3533     0   514    12     0    89     1      32  double
  3534     0   514    19     0    89     0     111  getDouble
  3535     0   514    28     0    89     0      59  (
  3536     0   514    29     0    89     0     111  ByteBuffer
  3537     0   514    40     0    89     0     111  bb
  3538     0   514    42     0    89     0      66  ,
  3539     0   514    44     0    89     0      36  int
  3540     0   514    48     0    89     0     111  bi
  3541     0   514    50     0    89     0      66  ,
  3542     0   514    52     0    89     0      39  boolean
  3543     0   514    60     0    89     0     111  bigEndian
  3544     0   514    69     0    89     0      60  )
  3545     0   514    71     0    89     0      63  {
  3546     0   515     9     0    89     0      19  return
  3547     0   515    16     0    89     0      59  (
  3548     0   515    17     0    89     0     111  bigEndian
  3549     0   515    27     0    89     0      58  ?
  3550     0   515    29     0    89     0     111  getDoubleB
  3551     0   515    39     0    89     0      59  (
  3552     0   515    40     0    89     0     111  bb
  3553     0   515    42     0    89     0      66  ,
  3554     0   515    44     0    89     0     111  bi
  3555     0   515    46     0    89     0      60  )
  3556     0   515    48     0    89     0      65  :
  3557     0   515    50     0    89     0     111  getDoubleL
  3558     0   515    60     0    89     0      59  (
  3559     0   515    61     0    89     0     111  bb
  3560     0   515    63     0    89     0      66  ,
  3561     0   515    65     0    89     1     111  bi
  3562     0   515    67     0    89     1      60  )
  3563     0   515    68     0    89     1      60  )
  3564     0   515    69     0    89     1     102  ;
  3565     0   516     5     0    89     1      64  }
  3566     0   516     5     0    89     0     302  ENDMETHOD
  3567     0   516     5     0    90     0     303  STARTMETHOD
  3568     0   518     5     0    90     0      45  static
  3569     0   518    12     0    90     0      32  double
  3570     0   518    19     0    90     0     111  getDouble
  3571     0   518    28     0    90     0      59  (
  3572     0   518    29     0    90     0      53  long
  3573     0   518    34     0    90     0     111  a
  3574     0   518    35     0    90     0      66  ,
  3575     0   518    37     0    90     0      39  boolean
  3576     0   518    45     0    90     0     111  bigEndian
  3577     0   518    54     0    90     0      60  )
  3578     0   518    56     0    90     0      63  {
  3579     0   519     9     0    90     0      19  return
  3580     0   519    16     0    90     0      59  (
  3581     0   519    17     0    90     0     111  bigEndian
  3582     0   519    27     0    90     0      58  ?
  3583     0   519    29     0    90     0     111  getDoubleB
  3584     0   519    39     0    90     0      59  (
  3585     0   519    40     0    90     0     111  a
  3586     0   519    41     0    90     0      60  )
  3587     0   519    43     0    90     0      65  :
  3588     0   519    45     0    90     0     111  getDoubleL
  3589     0   519    55     0    90     0      59  (
  3590     0   519    56     0    90     1     111  a
  3591     0   519    57     0    90     1      60  )
  3592     0   519    58     0    90     1      60  )
  3593     0   519    59     0    90     1     102  ;
  3594     0   520     5     0    90     1      64  }
  3595     0   520     5     0    90     0     304  ENDMETHOD
  3596     0   520     5     0    91     0     305  STARTMETHOD
  3597     0   522     5     0    91     0      45  static
  3598     0   522    12     0    91     0      50  void
  3599     0   522    17     0    91     0     111  putDoubleL
  3600     0   522    27     0    91     0      59  (
  3601     0   522    28     0    91     0     111  ByteBuffer
  3602     0   522    39     0    91     0     111  bb
  3603     0   522    41     0    91     0      66  ,
  3604     0   522    43     0    91     0      36  int
  3605     0   522    47     0    91     0     111  bi
  3606     0   522    49     0    91     0      66  ,
  3607     0   522    51     0    91     0      32  double
  3608     0   522    58     0    91     0     111  x
  3609     0   522    59     0    91     0      60  )
  3610     0   522    61     0    91     0      63  {
  3611     0   523     9     0    91     0     111  putLongL
  3612     0   523    17     0    91     0      59  (
  3613     0   523    18     0    91     0     111  bb
  3614     0   523    20     0    91     0      66  ,
  3615     0   523    22     0    91     0     111  bi
  3616     0   523    24     0    91     0      66  ,
  3617     0   523    26     0    91     0     111  Double.doubleToRawLongBits
  3618     0   523    52     0    91     0      59  (
  3619     0   523    53     0    91     1     111  x
  3620     0   523    54     0    91     1      60  )
  3621     0   523    55     0    91     1      60  )
  3622     0   523    56     0    91     1     102  ;
  3623     0   524     5     0    91     1      64  }
  3624     0   524     5     0    91     0     306  ENDMETHOD
  3625     0   524     5     0    92     0     307  STARTMETHOD
  3626     0   526     5     0    92     0      45  static
  3627     0   526    12     0    92     0      50  void
  3628     0   526    17     0    92     0     111  putDoubleL
  3629     0   526    27     0    92     0      59  (
  3630     0   526    28     0    92     0      53  long
  3631     0   526    33     0    92     0     111  a
  3632     0   526    34     0    92     0      66  ,
  3633     0   526    36     0    92     0      32  double
  3634     0   526    43     0    92     0     111  x
  3635     0   526    44     0    92     0      60  )
  3636     0   526    46     0    92     0      63  {
  3637     0   527     9     0    92     0     111  putLongL
  3638     0   527    17     0    92     0      59  (
  3639     0   527    18     0    92     0     111  a
  3640     0   527    19     0    92     0      66  ,
  3641     0   527    21     0    92     0     111  Double.doubleToRawLongBits
  3642     0   527    47     0    92     0      59  (
  3643     0   527    48     0    92     0     111  x
  3644     0   527    49     0    92     0      60  )
  3645     0   527    50     0    92     0      60  )
  3646     0   527    51     0    92     0     102  ;
  3647     0   528     5     0    92     0      64  }
  3648     0   528     5     0    92     0     308  ENDMETHOD
  3649     0   528     5     0    93     0     309  STARTMETHOD
  3650     0   530     5     0    93     0      45  static
  3651     0   530    12     0    93     0      50  void
  3652     0   530    17     0    93     0     111  putDoubleB
  3653     0   530    27     0    93     0      59  (
  3654     0   530    28     0    93     0     111  ByteBuffer
  3655     0   530    39     0    93     0     111  bb
  3656     0   530    41     0    93     0      66  ,
  3657     0   530    43     0    93     0      36  int
  3658     0   530    47     0    93     0     111  bi
  3659     0   530    49     0    93     0      66  ,
  3660     0   530    51     0    93     0      32  double
  3661     0   530    58     0    93     0     111  x
  3662     0   530    59     0    93     0      60  )
  3663     0   530    61     0    93     0      63  {
  3664     0   531     9     0    93     0     111  putLongB
  3665     0   531    17     0    93     0      59  (
  3666     0   531    18     0    93     0     111  bb
  3667     0   531    20     0    93     0      66  ,
  3668     0   531    22     0    93     0     111  bi
  3669     0   531    24     0    93     0      66  ,
  3670     0   531    26     0    93     0     111  Double.doubleToRawLongBits
  3671     0   531    52     0    93     0      59  (
  3672     0   531    53     0    93     0     111  x
  3673     0   531    54     0    93     0      60  )
  3674     0   531    55     0    93     0      60  )
  3675     0   531    56     0    93     0     102  ;
  3676     0   532     5     0    93     0      64  }
  3677     0   532     5     0    93     0     310  ENDMETHOD
  3678     0   532     5     0    94     0     311  STARTMETHOD
  3679     0   534     5     0    94     0      45  static
  3680     0   534    12     0    94     0      50  void
  3681     0   534    17     0    94     0     111  putDoubleB
  3682     0   534    27     0    94     0      59  (
  3683     0   534    28     0    94     0      53  long
  3684     0   534    33     0    94     0     111  a
  3685     0   534    34     0    94     0      66  ,
  3686     0   534    36     0    94     0      32  double
  3687     0   534    43     0    94     0     111  x
  3688     0   534    44     0    94     0      60  )
  3689     0   534    46     0    94     0      63  {
  3690     0   535     9     0    94     0     111  putLongB
  3691     0   535    17     0    94     0      59  (
  3692     0   535    18     0    94     0     111  a
  3693     0   535    19     0    94     0      66  ,
  3694     0   535    21     0    94     0     111  Double.doubleToRawLongBits
  3695     0   535    47     0    94     0      59  (
  3696     0   535    48     0    94     0     111  x
  3697     0   535    49     0    94     0      60  )
  3698     0   535    50     0    94     0      60  )
  3699     0   535    51     0    94     0     102  ;
  3700     0   536     5     0    94     0      64  }
  3701     0   536     5     0    94     0     312  ENDMETHOD
  3702     0   536     5     0    95     0     313  STARTMETHOD
  3703     0   538     5     0    95     0      45  static
  3704     0   538    12     0    95     0      50  void
  3705     0   538    17     0    95     0     111  putDouble
  3706     0   538    26     0    95     0      59  (
  3707     0   538    27     0    95     0     111  ByteBuffer
  3708     0   538    38     0    95     0     111  bb
  3709     0   538    40     0    95     0      66  ,
  3710     0   538    42     0    95     0      36  int
  3711     0   538    46     0    95     0     111  bi
  3712     0   538    48     0    95     0      66  ,
  3713     0   538    50     0    95     0      32  double
  3714     0   538    57     0    95     0     111  x
  3715     0   538    58     0    95     0      66  ,
  3716     0   538    60     0    95     0      39  boolean
  3717     0   538    68     0    95     0     111  bigEndian
  3718     0   538    77     0    95     0      60  )
  3719     0   538    79     0    95     0      63  {
  3720     0   539     9     0    95     0      31  if
  3721     0   539    12     0    95     0      59  (
  3722     0   539    13     0    95     0     111  bigEndian
  3723     0   539    22     0    95     0      60  )
  3724     0   540    13     0    95     0     111  putDoubleB
  3725     0   540    23     0    95     0      59  (
  3726     0   540    24     0    95     0     111  bb
  3727     0   540    26     0    95     0      66  ,
  3728     0   540    28     0    95     0     111  bi
  3729     0   540    30     0    95     0      66  ,
  3730     0   540    32     0    95     0     111  x
  3731     0   540    33     0    95     0      60  )
  3732     0   540    34     0    95     0     102  ;
  3733     0   541     9     0    95     0      48  else
  3734     0   542    13     0    95     0     111  putDoubleL
  3735     0   542    23     0    95     0      59  (
  3736     0   542    24     0    95     0     111  bb
  3737     0   542    26     0    95     0      66  ,
  3738     0   542    28     0    95     0     111  bi
  3739     0   542    30     0    95     0      66  ,
  3740     0   542    32     0    95     0     111  x
  3741     0   542    33     0    95     0      60  )
  3742     0   542    34     0    95     0     102  ;
  3743     0   543     5     0    95     0      64  }
  3744     0   543     5     0    95     0     314  ENDMETHOD
  3745     0   543     5     0    96     0     315  STARTMETHOD
  3746     0   545     5     0    96     0      45  static
  3747     0   545    12     0    96     0      50  void
  3748     0   545    17     0    96     0     111  putDouble
  3749     0   545    26     0    96     0      59  (
  3750     0   545    27     0    96     0      53  long
  3751     0   545    32     0    96     0     111  a
  3752     0   545    33     0    96     0      66  ,
  3753     0   545    35     0    96     0      32  double
  3754     0   545    42     0    96     0     111  x
  3755     0   545    43     0    96     0      66  ,
  3756     0   545    45     0    96     0      39  boolean
  3757     0   545    53     0    96     0     111  bigEndian
  3758     0   545    62     0    96     0      60  )
  3759     0   545    64     0    96     0      63  {
  3760     0   546     9     0    96     0      31  if
  3761     0   546    12     0    96     0      59  (
  3762     0   546    13     0    96     0     111  bigEndian
  3763     0   546    22     0    96     0      60  )
  3764     0   547    13     0    96     0     111  putDoubleB
  3765     0   547    23     0    96     0      59  (
  3766     0   547    24     0    96     0     111  a
  3767     0   547    25     0    96     0      66  ,
  3768     0   547    27     0    96     0     111  x
  3769     0   547    28     0    96     0      60  )
  3770     0   547    29     0    96     0     102  ;
  3771     0   548     9     0    96     0      48  else
  3772     0   549    13     0    96     0     111  putDoubleL
  3773     0   549    23     0    96     0      59  (
  3774     0   549    24     0    96     0     111  a
  3775     0   549    25     0    96     0      66  ,
  3776     0   549    27     0    96     0     111  x
  3777     0   549    28     0    96     0      60  )
  3778     0   549    29     0    96     0     102  ;
  3779     0   550     5     0    96     0      64  }
  3780     0   550     5     0    96     0     316  ENDMETHOD
  3781     0   555     5     0    -1     0      41  private
  3782     0   555    13     0    -1     0      45  static
  3783     0   555    20     0    -1     0       6  final
  3784     0   555    26     0    -1     0     111  Unsafe
  3785     0   555    33     0    -1     0     111  unsafe
  3786     0   555    40     0    -1     0      67  =
  3787     0   555    42     0    -1     0     111  Unsafe.getUnsafe
  3788     0   555    58     0    -1     0      59  (
  3789     0   555    59     0    -1     0      60  )
  3790     0   555    60     0    -1     0     102  ;
  3791     0   555    60     0    97     0     317  STARTMETHOD
  3792     0   557     5     0    97     0      41  private
  3793     0   557    13     0    97     0      45  static
  3794     0   557    20     0    97     0       9  byte
  3795     0   557    25     0    97     0     111  _get
  3796     0   557    29     0    97     0      59  (
  3797     0   557    30     0    97     0      53  long
  3798     0   557    35     0    97     0     111  a
  3799     0   557    36     0    97     0      60  )
  3800     0   557    38     0    97     0      63  {
  3801     0   558     9     0    97     0      19  return
  3802     0   558    16     0    97     0     111  unsafe.getByte
  3803     0   558    30     0    97     0      59  (
  3804     0   558    31     0    97     0     111  a
  3805     0   558    32     0    97     0      60  )
  3806     0   558    33     0    97     0     102  ;
  3807     0   559     5     0    97     0      64  }
  3808     0   559     5     0    97     0     318  ENDMETHOD
  3809     0   559     5     0    98     0     319  STARTMETHOD
  3810     0   561     5     0    98     0      41  private
  3811     0   561    13     0    98     0      45  static
  3812     0   561    20     0    98     0      50  void
  3813     0   561    25     0    98     0     111  _put
  3814     0   561    29     0    98     0      59  (
  3815     0   561    30     0    98     0      53  long
  3816     0   561    35     0    98     0     111  a
  3817     0   561    36     0    98     0      66  ,
  3818     0   561    38     0    98     0       9  byte
  3819     0   561    43     0    98     0     111  b
  3820     0   561    44     0    98     0      60  )
  3821     0   561    46     0    98     0      63  {
  3822     0   562     9     0    98     0     111  unsafe.putByte
  3823     0   562    23     0    98     0      59  (
  3824     0   562    24     0    98     0     111  a
  3825     0   562    25     0    98     0      66  ,
  3826     0   562    27     0    98     0     111  b
  3827     0   562    28     0    98     0      60  )
  3828     0   562    29     0    98     0     102  ;
  3829     0   563     5     0    98     0      64  }
  3830     0   563     5     0    98     0     320  ENDMETHOD
  3831     0   563     5     0    99     0     321  STARTMETHOD
  3832     0   565     5     0    99     0      45  static
  3833     0   565    12     0    99     0     111  Unsafe
  3834     0   565    19     0    99     0     111  unsafe
  3835     0   565    25     0    99     0      59  (
  3836     0   565    26     0    99     0      60  )
  3837     0   565    28     0    99     0      63  {
  3838     0   566     9     0    99     0      19  return
  3839     0   566    16     0    99     0     111  unsafe
  3840     0   566    22     0    99     0     102  ;
  3841     0   567     5     0    99     0      64  }
  3842     0   567     5     0    99     0     322  ENDMETHOD
  3843     0   572     5     0    -1     0      41  private
  3844     0   572    13     0    -1     0      45  static
  3845     0   572    20     0    -1     0       6  final
  3846     0   572    26     0    -1     0     111  ByteOrder
  3847     0   572    36     0    -1     0     111  byteOrder
  3848     0   572    45     0    -1     0     102  ;
  3849     0   572    45     0   100     0     323  STARTMETHOD
  3850     0   574     5     0   100     0      45  static
  3851     0   574    12     0   100     0     111  ByteOrder
  3852     0   574    22     0   100     0     111  byteOrder
  3853     0   574    31     0   100     0      59  (
  3854     0   574    32     0   100     0      60  )
  3855     0   574    34     0   100     0      63  {
  3856     0   575     9     0   100     0      31  if
  3857     0   575    12     0   100     0      59  (
  3858     0   575    13     0   100     0     111  byteOrder
  3859     0   575    23     0   100     0      68  ==
  3860     0   575    26     0   100     0      21  null
  3861     0   575    30     0   100     0      60  )
  3862     0   576    13     0   100     0      20  throw
  3863     0   576    19     0   100     0      15  new
  3864     0   576    23     0   100     0     111  Error
  3865     0   576    28     0   100     0      59  (
  3866     0   576    29     0   100     0     107  "Unknown byte order"
  3867     0   576    49     0   100     0      60  )
  3868     0   576    50     0   100     0     102  ;
  3869     0   577     9     0   100     0      19  return
  3870     0   577    16     0   100     0     111  byteOrder
  3871     0   577    25     0   100     0     102  ;
  3872     0   578     5     0   100     0      64  }
  3873     0   578     5     0   100     0     324  ENDMETHOD
  3874     0   580     5     0    -1     0      45  static
  3875     0   580    12     0    -1     0      63  {
  3876     0   581     9     0    -1     0      53  long
  3877     0   581    14     0    -1     0     111  a
  3878     0   581    16     0    -1     0      67  =
  3879     0   581    18     0    -1     0     111  unsafe.allocateMemory
  3880     0   581    39     0    -1     0      59  (
  3881     0   581    40     0    -1     0     112  8
  3882     0   581    41     0    -1     0      60  )
  3883     0   581    42     0    -1     0     102  ;
  3884     0   582     9     0    -1     0      35  try
  3885     0   582    13     0    -1     0      63  {
  3886     0   583    13     0    -1     0     111  unsafe.putLong
  3887     0   583    27     0    -1     0      59  (
  3888     0   583    28     0    -1     0     111  a
  3889     0   583    29     0    -1     0      66  ,
  3890     0   583    31     0    -1     0      55  0x0102030405060708L
  3891     0   583    50     0    -1     0      60  )
  3892     0   583    51     0    -1     0     102  ;
  3893     0   584    13     0    -1     0       9  byte
  3894     0   584    18     0    -1     0     111  b
  3895     0   584    20     0    -1     0      67  =
  3896     0   584    22     0    -1     0     111  unsafe.getByte
  3897     0   584    36     0    -1     0      59  (
  3898     0   584    37     0    -1     0     111  a
  3899     0   584    38     0    -1     0      60  )
  3900     0   584    39     0    -1     0     102  ;
  3901     0   585    13     0    -1     0      51  switch
  3902     0   585    20     0    -1     0      59  (
  3903     0   585    21     0    -1     0     111  b
  3904     0   585    22     0    -1     0      60  )
  3905     0   585    24     0    -1     0      63  {
  3906     0   586    13     0    -1     1      11  case
  3907     0   586    18     0    -1     1     112  0x01
  3908     0   586    22     0    -1     1      65  :
  3909     0   586    24     0    -1     1     111  byteOrder
  3910     0   586    34     0    -1     1      67  =
  3911     0   586    36     0    -1     1     111  ByteOrder.BIG_ENDIAN
  3912     0   586    56     0    -1     1     102  ;
  3913     0   586    62     0    -1     1      13  break
  3914     0   586    67     0    -1     1     102  ;
  3915     0   587    13     0    -1     1      11  case
  3916     0   587    18     0    -1     1     112  0x08
  3917     0   587    22     0    -1     1      65  :
  3918     0   587    24     0    -1     1     111  byteOrder
  3919     0   587    34     0    -1     1      67  =
  3920     0   587    36     0    -1     1     111  ByteOrder.LITTLE_ENDIAN
  3921     0   587    59     0    -1     1     102  ;
  3922     0   587    62     0    -1     1      13  break
  3923     0   587    67     0    -1     1     102  ;
  3924     0   588    13     0    -1     0      42  default
  3925     0   588    20     0    -1     0      65  :
  3926     0   589    17     0    -1     0     111  assert
  3927     0   589    24     0    -1     0      43  false
  3928     0   589    29     0    -1     0     102  ;
  3929     0   590    17     0    -1     0     111  byteOrder
  3930     0   590    27     0    -1     0      67  =
  3931     0   590    29     0    -1     0      21  null
  3932     0   590    33     0    -1     0     102  ;
  3933     0   591    13     0    -1     0      64  }
  3934     0   592     9     0    -1     0      64  }
  3935     0   592    11     0    -1     0      47  finally
  3936     0   592    19     0    -1     0      63  {
  3937     0   593    13     0    -1     0     111  unsafe.freeMemory
  3938     0   593    30     0    -1     0      59  (
  3939     0   593    31     0    -1     0     111  a
  3940     0   593    32     0    -1     0      60  )
  3941     0   593    33     0    -1     0     102  ;
  3942     0   594     9     0    -1     1      64  }
  3943     0   595     5     0    -1     1      64  }
  3944     0   598     5     0    -1     0      41  private
  3945     0   598    13     0    -1     0      45  static
  3946     0   598    20     0    -1     0      36  int
  3947     0   598    24     0    -1     0     111  pageSize
  3948     0   598    33     0    -1     0      67  =
  3949     0   598    35     0    -1     0      77  -
  3950     0   598    36     0    -1     0     112  1
  3951     0   598    37     0    -1     0     102  ;
  3952     0   598    37     0   101     0     325  STARTMETHOD
  3953     0   600     5     0   101     0      45  static
  3954     0   600    12     0   101     0      36  int
  3955     0   600    16     0   101     0     111  pageSize
  3956     0   600    24     0   101     0      59  (
  3957     0   600    25     0   101     0      60  )
  3958     0   600    27     0   101     0      63  {
  3959     0   601     9     0   101     0      31  if
  3960     0   601    12     0   101     0      59  (
  3961     0   601    13     0   101     0     111  pageSize
  3962     0   601    22     0   101     0      68  ==
  3963     0   601    25     0   101     0      77  -
  3964     0   601    26     0   101     0     112  1
  3965     0   601    27     0   101     0      60  )
  3966     0   602    13     0   101     0     111  pageSize
  3967     0   602    22     0   101     0      67  =
  3968     0   602    24     0   101     0     111  unsafe
  3969     0   602    30     0   101     0      59  (
  3970     0   602    31     0   101     0      60  )
  3971     0   602    32     0   101     0      54  .
  3972     0   602    33     0   101     0     111  pageSize
  3973     0   602    41     0   101     0      59  (
  3974     0   602    42     0   101     0      60  )
  3975     0   602    43     0   101     0     102  ;
  3976     0   603     9     0   101     0      19  return
  3977     0   603    16     0   101     0     111  pageSize
  3978     0   603    24     0   101     0     102  ;
  3979     0   604     5     0   101     0      64  }
  3980     0   604     5     0   101     0     326  ENDMETHOD
  3981     0   607     5     0    -1     0      41  private
  3982     0   607    13     0    -1     0      45  static
  3983     0   607    20     0    -1     0      39  boolean
  3984     0   607    28     0    -1     0     111  unaligned
  3985     0   607    37     0    -1     0     102  ;
  3986     0   608     5     0    -1     0      41  private
  3987     0   608    13     0    -1     0      45  static
  3988     0   608    20     0    -1     0      39  boolean
  3989     0   608    28     0    -1     0     111  unalignedKnown
  3990     0   608    43     0    -1     0      67  =
  3991     0   608    45     0    -1     0      43  false
  3992     0   608    50     0    -1     0     102  ;
  3993     0   608    50     0   102     0     327  STARTMETHOD
  3994     0   610     5     0   102     0      45  static
  3995     0   610    12     0   102     0      39  boolean
  3996     0   610    20     0   102     0     111  unaligned
  3997     0   610    29     0   102     0      59  (
  3998     0   610    30     0   102     0      60  )
  3999     0   610    32     0   102     0      63  {
  4000     0   611     9     0   102     0      31  if
  4001     0   611    12     0   102     0      59  (
  4002     0   611    13     0   102     0     111  unalignedKnown
  4003     0   611    27     0   102     0      60  )
  4004     0   612    13     0   102     0      19  return
  4005     0   612    20     0   102     0     111  unaligned
  4006     0   612    29     0   102     0     102  ;
  4007     0   613     9     0   102     0     111  String
  4008     0   613    16     0   102     0     111  arch
  4009     0   613    21     0   102     0      67  =
  4010     0   613    23     0   102     0     111  AccessController.doPrivileged
  4011     0   613    52     0   102     0      59  (
  4012     0   614    13     0   102     0      15  new
  4013     0   614    17     0   102     0     111  sun.security.action.GetPropertyAction
  4014     0   614    54     0   102     0      59  (
  4015     0   614    55     0   102     0     107  "os.arch"
  4016     0   614    64     0   102     0      60  )
  4017     0   614    65     0   102     0      60  )
  4018     0   614    66     0   102     0     102  ;
  4019     0   615     9     0   102     0     111  unaligned
  4020     0   615    19     0   102     0      67  =
  4021     0   615    21     0   102     0     111  arch.equals
  4022     0   615    32     0   102     0      59  (
  4023     0   615    33     0   102     0     107  "i386"
  4024     0   615    39     0   102     0      60  )
  4025     0   615    41     0   102     0      98  ||
  4026     0   615    44     0   102     0     111  arch.equals
  4027     0   615    55     0   102     0      59  (
  4028     0   615    56     0   102     0     107  "x86"
  4029     0   615    61     0   102     0      60  )
  4030     0   616    13     0   102     0      98  ||
  4031     0   616    16     0   102     0     111  arch.equals
  4032     0   616    27     0   102     0      59  (
  4033     0   616    28     0   102     0     107  "amd64"
  4034     0   616    35     0   102     0      60  )
  4035     0   616    36     0   102     0     102  ;
  4036     0   617     9     0   102     0     111  unalignedKnown
  4037     0   617    24     0   102     0      67  =
  4038     0   617    26     0   102     0      52  true
  4039     0   617    30     0   102     0     102  ;
  4040     0   618     9     0   102     0      19  return
  4041     0   618    16     0   102     0     111  unaligned
  4042     0   618    25     0   102     0     102  ;
  4043     0   619     5     0   102     0      64  }
  4044     0   619     5     0   102     0     328  ENDMETHOD
  4045     0   627     5     0    -1     0      41  private
  4046     0   627    13     0    -1     0      45  static
  4047     0   627    20     0    -1     0      33  volatile
  4048     0   627    29     0    -1     0      53  long
  4049     0   627    34     0    -1     0     111  maxMemory
  4050     0   627    44     0    -1     0      67  =
  4051     0   627    46     0    -1     0     111  VM.maxDirectMemory
  4052     0   627    64     0    -1     0      59  (
  4053     0   627    65     0    -1     0      60  )
  4054     0   627    66     0    -1     0     102  ;
  4055     0   628     5     0    -1     0      41  private
  4056     0   628    13     0    -1     0      45  static
  4057     0   628    20     0    -1     0      33  volatile
  4058     0   628    29     0    -1     0      53  long
  4059     0   628    34     0    -1     0     111  reservedMemory
  4060     0   628    49     0    -1     0      67  =
  4061     0   628    51     0    -1     0     112  0
  4062     0   628    52     0    -1     0     102  ;
  4063     0   629     5     0    -1     0      41  private
  4064     0   629    13     0    -1     0      45  static
  4065     0   629    20     0    -1     0      39  boolean
  4066     0   629    28     0    -1     0     111  memoryLimitSet
  4067     0   629    43     0    -1     0      67  =
  4068     0   629    45     0    -1     0      43  false
  4069     0   629    50     0    -1     0     102  ;
  4070     0   629    50     0   103     0     329  STARTMETHOD
  4071     0   634     5     0   103     0      45  static
  4072     0   634    12     0   103     0      50  void
  4073     0   634    17     0   103     0     111  reserveMemory
  4074     0   634    30     0   103     0      59  (
  4075     0   634    31     0   103     0      53  long
  4076     0   634    36     0   103     0     111  size
  4077     0   634    40     0   103     0      60  )
  4078     0   634    42     0   103     0      63  {
  4079     0   636     9     0   103     0      18  synchronized
  4080     0   636    22     0   103     0      59  (
  4081     0   636    23     0   103     0     111  Bits.class
  4082     0   636    33     0   103     0      60  )
  4083     0   636    35     0   103     0      63  {
  4084     0   637    13     0   103     0      31  if
  4085     0   637    16     0   103     0      59  (
  4086     0   637    17     0   103     0      69  !
  4087     0   637    18     0   103     0     111  memoryLimitSet
  4088     0   637    33     0   103     0     101  &&
  4089     0   637    36     0   103     0     111  VM.isBooted
  4090     0   637    47     0   103     0      59  (
  4091     0   637    48     0   103     0      60  )
  4092     0   637    49     0   103     0      60  )
  4093     0   637    51     0   103     0      63  {
  4094     0   638    17     0   103     0     111  maxMemory
  4095     0   638    27     0   103     0      67  =
  4096     0   638    29     0   103     0     111  VM.maxDirectMemory
  4097     0   638    47     0   103     0      59  (
  4098     0   638    48     0   103     0      60  )
  4099     0   638    49     0   103     0     102  ;
  4100     0   639    17     0   103     0     111  memoryLimitSet
  4101     0   639    32     0   103     0      67  =
  4102     0   639    34     0   103     0      52  true
  4103     0   639    38     0   103     0     102  ;
  4104     0   640    13     0   103     0      64  }
  4105     0   641    13     0   103     0      31  if
  4106     0   641    16     0   103     0      59  (
  4107     0   641    17     0   103     0     111  size
  4108     0   641    22     0   103     0      92  <=
  4109     0   641    25     0   103     0     111  maxMemory
  4110     0   641    35     0   103     0      77  -
  4111     0   641    37     0   103     0     111  reservedMemory
  4112     0   641    51     0   103     0      60  )
  4113     0   641    53     0   103     0      63  {
  4114     0   642    17     0   103     0     111  reservedMemory
  4115     0   642    32     0   103     0      75  +=
  4116     0   642    35     0   103     0     111  size
  4117     0   642    39     0   103     0     102  ;
  4118     0   643    17     0   103     0      19  return
  4119     0   643    23     0   103     0     102  ;
  4120     0   644    13     0   103     1      64  }
  4121     0   645     9     0   103     1      64  }
  4122     0   647     9     0   103     0     111  System.gc
  4123     0   647    18     0   103     0      59  (
  4124     0   647    19     0   103     0      60  )
  4125     0   647    20     0   103     0     102  ;
  4126     0   648     9     0   103     0      35  try
  4127     0   648    13     0   103     0      63  {
  4128     0   649    13     0   103     0     111  Thread.sleep
  4129     0   649    25     0   103     0      59  (
  4130     0   649    26     0   103     0     112  100
  4131     0   649    29     0   103     0      60  )
  4132     0   649    30     0   103     0     102  ;
  4133     0   650     9     0   103     0      64  }
  4134     0   650    11     0   103     0      34  catch
  4135     0   650    17     0   103     0      59  (
  4136     0   650    18     0   103     0     111  InterruptedException
  4137     0   650    39     0   103     0     111  x
  4138     0   650    40     0   103     0      60  )
  4139     0   650    42     0   103     0      63  {
  4140     0   652    13     0   103     0     111  Thread.currentThread
  4141     0   652    33     0   103     0      59  (
  4142     0   652    34     0   103     0      60  )
  4143     0   652    35     0   103     0      54  .
  4144     0   652    36     0   103     0     111  interrupt
  4145     0   652    45     0   103     0      59  (
  4146     0   652    46     0   103     0      60  )
  4147     0   652    47     0   103     0     102  ;
  4148     0   653     9     0   103     0      64  }
  4149     0   654     9     0   103     0      18  synchronized
  4150     0   654    22     0   103     0      59  (
  4151     0   654    23     0   103     0     111  Bits.class
  4152     0   654    33     0   103     0      60  )
  4153     0   654    35     0   103     0      63  {
  4154     0   655    13     0   103     0      31  if
  4155     0   655    16     0   103     0      59  (
  4156     0   655    17     0   103     0     111  reservedMemory
  4157     0   655    32     0   103     0      74  +
  4158     0   655    34     0   103     0     111  size
  4159     0   655    39     0   103     0      89  >
  4160     0   655    41     0   103     0     111  maxMemory
  4161     0   655    50     0   103     0      60  )
  4162     0   656    17     0   103     0      20  throw
  4163     0   656    23     0   103     0      15  new
  4164     0   656    27     0   103     0     111  OutOfMemoryError
  4165     0   656    43     0   103     0      59  (
  4166     0   656    44     0   103     0     107  "Direct buffer memory"
  4167     0   656    66     0   103     0      60  )
  4168     0   656    67     0   103     0     102  ;
  4169     0   657    13     0   103     0     111  reservedMemory
  4170     0   657    28     0   103     0      75  +=
  4171     0   657    31     0   103     0     111  size
  4172     0   657    35     0   103     0     102  ;
  4173     0   658     9     0   103     0      64  }
  4174     0   660     5     0   103     0      64  }
  4175     0   660     5     0   103     0     330  ENDMETHOD
  4176     0   660     5     0   104     0     331  STARTMETHOD
  4177     0   662     5     0   104     0      45  static
  4178     0   662    12     0   104     0      18  synchronized
  4179     0   662    25     0   104     0      50  void
  4180     0   662    30     0   104     0     111  unreserveMemory
  4181     0   662    45     0   104     0      59  (
  4182     0   662    46     0   104     0      53  long
  4183     0   662    51     0   104     0     111  size
  4184     0   662    55     0   104     0      60  )
  4185     0   662    57     0   104     0      63  {
  4186     0   663     9     0   104     0      31  if
  4187     0   663    12     0   104     0      59  (
  4188     0   663    13     0   104     0     111  reservedMemory
  4189     0   663    28     0   104     0      89  >
  4190     0   663    30     0   104     0     112  0
  4191     0   663    31     0   104     0      60  )
  4192     0   663    33     0   104     0      63  {
  4193     0   664    13     0   104     0     111  reservedMemory
  4194     0   664    28     0   104     0      78  -=
  4195     0   664    31     0   104     0     111  size
  4196     0   664    35     0   104     0     102  ;
  4197     0   665    13     0   104     0     111  assert
  4198     0   665    20     0   104     0      59  (
  4199     0   665    21     0   104     0     111  reservedMemory
  4200     0   665    36     0   104     0      89  >
  4201     0   665    38     0   104     0      77  -
  4202     0   665    39     0   104     0     112  1
  4203     0   665    40     0   104     0      60  )
  4204     0   665    41     0   104     0     102  ;
  4205     0   666     9     0   104     0      64  }
  4206     0   667     5     0   104     0      64  }
  4207     0   667     5     0   104     0     332  ENDMETHOD
  4208     0   675     5     0    -1     1      45  static
  4209     0   675    12     0    -1     1       6  final
  4210     0   675    18     0    -1     1      36  int
  4211     0   675    22     0    -1     1     111  JNI_COPY_TO_ARRAY_THRESHOLD
  4212     0   675    52     0    -1     1      67  =
  4213     0   675    54     0    -1     1     112  6
  4214     0   675    55     0    -1     1     102  ;
  4215     0   676     5     0    -1     1      45  static
  4216     0   676    12     0    -1     1       6  final
  4217     0   676    18     0    -1     1      36  int
  4218     0   676    22     0    -1     1     111  JNI_COPY_FROM_ARRAY_THRESHOLD
  4219     0   676    52     0    -1     1      67  =
  4220     0   676    54     0    -1     1     112  6
  4221     0   676    55     0    -1     1     102  ;
  4222     0   682     5     0    -1     0      45  static
  4223     0   682    12     0    -1     0      29  native
  4224     0   682    19     0    -1     0      50  void
  4225     0   682    24     0    -1     0     111  copyFromByteArray
  4226     0   682    41     0    -1     0      59  (
  4227     0   682    42     0    -1     0     111  Object
  4228     0   682    49     0    -1     0     111  src
  4229     0   682    52     0    -1     0      66  ,
  4230     0   682    54     0    -1     0      53  long
  4231     0   682    59     0    -1     0     111  srcPos
  4232     0   682    65     0    -1     0      66  ,
  4233     0   682    67     0    -1     0      53  long
  4234     0   682    72     0    -1     0     111  dstAddr
  4235     0   682    79     0    -1     0      66  ,
  4236     0   683    42     0    -1     0      53  long
  4237     0   683    47     0    -1     0     111  length
  4238     0   683    53     0    -1     0      60  )
  4239     0   683    54     0    -1     0     102  ;
  4240     0   684     5     0    -1     0      45  static
  4241     0   684    12     0    -1     0      29  native
  4242     0   684    19     0    -1     0      50  void
  4243     0   684    24     0    -1     0     111  copyToByteArray
  4244     0   684    39     0    -1     0      59  (
  4245     0   684    40     0    -1     0      53  long
  4246     0   684    45     0    -1     0     111  srcAddr
  4247     0   684    52     0    -1     0      66  ,
  4248     0   684    54     0    -1     0     111  Object
  4249     0   684    61     0    -1     0     111  dst
  4250     0   684    64     0    -1     0      66  ,
  4251     0   684    66     0    -1     0      53  long
  4252     0   684    71     0    -1     0     111  dstPos
  4253     0   684    77     0    -1     0      66  ,
  4254     0   685    40     0    -1     0      53  long
  4255     0   685    45     0    -1     0     111  length
  4256     0   685    51     0    -1     0      60  )
  4257     0   685    52     0    -1     0     102  ;
  4258     0   685    52     0   105     0     333  STARTMETHOD
  4259     0   687     5     0   105     0      45  static
  4260     0   687    12     0   105     0      50  void
  4261     0   687    17     0   105     0     111  copyFromCharArray
  4262     0   687    34     0   105     0      59  (
  4263     0   687    35     0   105     0     111  Object
  4264     0   687    42     0   105     0     111  src
  4265     0   687    45     0   105     0      66  ,
  4266     0   687    47     0   105     0      53  long
  4267     0   687    52     0   105     1     111  srcPos
  4268     0   687    58     0   105     1      66  ,
  4269     0   687    60     0   105     0      53  long
  4270     0   687    65     0   105     0     111  dstAddr
  4271     0   687    72     0   105     0      66  ,
  4272     0   688    35     0   105     0      53  long
  4273     0   688    40     0   105     0     111  length
  4274     0   688    46     0   105     0      60  )
  4275     0   689     5     0   105     0      63  {
  4276     0   690     9     0   105     0     111  copyFromShortArray
  4277     0   690    27     0   105     0      59  (
  4278     0   690    28     0   105     0     111  src
  4279     0   690    31     0   105     0      66  ,
  4280     0   690    33     0   105     0     111  srcPos
  4281     0   690    39     0   105     0      66  ,
  4282     0   690    41     0   105     0     111  dstAddr
  4283     0   690    48     0   105     0      66  ,
  4284     0   690    50     0   105     0     111  length
  4285     0   690    56     0   105     0      60  )
  4286     0   690    57     0   105     0     102  ;
  4287     0   691     5     0   105     0      64  }
  4288     0   691     5     0   105     0     334  ENDMETHOD
  4289     0   691     5     0   106     0     335  STARTMETHOD
  4290     0   693     5     0   106     0      45  static
  4291     0   693    12     0   106     0      50  void
  4292     0   693    17     0   106     0     111  copyToCharArray
  4293     0   693    32     0   106     0      59  (
  4294     0   693    33     0   106     0      53  long
  4295     0   693    38     0   106     0     111  srcAddr
  4296     0   693    45     0   106     0      66  ,
  4297     0   693    47     0   106     0     111  Object
  4298     0   693    54     0   106     1     111  dst
  4299     0   693    57     0   106     1      66  ,
  4300     0   693    59     0   106     0      53  long
  4301     0   693    64     0   106     0     111  dstPos
  4302     0   693    70     0   106     0      66  ,
  4303     0   694    33     0   106     0      53  long
  4304     0   694    38     0   106     0     111  length
  4305     0   694    44     0   106     0      60  )
  4306     0   695     5     0   106     0      63  {
  4307     0   696     9     0   106     0     111  copyToShortArray
  4308     0   696    25     0   106     0      59  (
  4309     0   696    26     0   106     0     111  srcAddr
  4310     0   696    33     0   106     0      66  ,
  4311     0   696    35     0   106     0     111  dst
  4312     0   696    38     0   106     0      66  ,
  4313     0   696    40     0   106     0     111  dstPos
  4314     0   696    46     0   106     0      66  ,
  4315     0   696    48     0   106     0     111  length
  4316     0   696    54     0   106     0      60  )
  4317     0   696    55     0   106     0     102  ;
  4318     0   697     5     0   106     0      64  }
  4319     0   697     5     0   106     0     336  ENDMETHOD
  4320     0   699     5     0    -1     1      45  static
  4321     0   699    12     0    -1     1      29  native
  4322     0   699    19     0    -1     1      50  void
  4323     0   699    24     0    -1     1     111  copyFromShortArray
  4324     0   699    42     0    -1     1      59  (
  4325     0   699    43     0    -1     1     111  Object
  4326     0   699    50     0    -1     1     111  src
  4327     0   699    53     0    -1     1      66  ,
  4328     0   699    55     0    -1     1      53  long
  4329     0   699    60     0    -1     1     111  srcPos
  4330     0   699    66     0    -1     1      66  ,
  4331     0   699    68     0    -1     1      53  long
  4332     0   699    73     0    -1     1     111  dstAddr
  4333     0   699    80     0    -1     1      66  ,
  4334     0   700    43     0    -1     1      53  long
  4335     0   700    48     0    -1     1     111  length
  4336     0   700    54     0    -1     1      60  )
  4337     0   700    55     0    -1     1     102  ;
  4338     0   701     5     0    -1     1      45  static
  4339     0   701    12     0    -1     1      29  native
  4340     0   701    19     0    -1     1      50  void
  4341     0   701    24     0    -1     1     111  copyToShortArray
  4342     0   701    40     0    -1     1      59  (
  4343     0   701    41     0    -1     1      53  long
  4344     0   701    46     0    -1     1     111  srcAddr
  4345     0   701    53     0    -1     1      66  ,
  4346     0   701    55     0    -1     1     111  Object
  4347     0   701    62     0    -1     1     111  dst
  4348     0   701    65     0    -1     1      66  ,
  4349     0   701    67     0    -1     1      53  long
  4350     0   701    72     0    -1     1     111  dstPos
  4351     0   701    78     0    -1     1      66  ,
  4352     0   702    41     0    -1     1      53  long
  4353     0   702    46     0    -1     0     111  length
  4354     0   702    52     0    -1     0      60  )
  4355     0   702    53     0    -1     0     102  ;
  4356     0   704     5     0    -1     1      45  static
  4357     0   704    12     0    -1     1      29  native
  4358     0   704    19     0    -1     1      50  void
  4359     0   704    24     0    -1     1     111  copyFromIntArray
  4360     0   704    40     0    -1     1      59  (
  4361     0   704    41     0    -1     1     111  Object
  4362     0   704    48     0    -1     1     111  src
  4363     0   704    51     0    -1     1      66  ,
  4364     0   704    53     0    -1     1      53  long
  4365     0   704    58     0    -1     0     111  srcPos
  4366     0   704    64     0    -1     0      66  ,
  4367     0   704    66     0    -1     1      53  long
  4368     0   704    71     0    -1     1     111  dstAddr
  4369     0   704    78     0    -1     1      66  ,
  4370     0   705    41     0    -1     1      53  long
  4371     0   705    46     0    -1     1     111  length
  4372     0   705    52     0    -1     1      60  )
  4373     0   705    53     0    -1     1     102  ;
  4374     0   706     5     0    -1     1      45  static
  4375     0   706    12     0    -1     1      29  native
  4376     0   706    19     0    -1     1      50  void
  4377     0   706    24     0    -1     1     111  copyToIntArray
  4378     0   706    38     0    -1     1      59  (
  4379     0   706    39     0    -1     1      53  long
  4380     0   706    44     0    -1     1     111  srcAddr
  4381     0   706    51     0    -1     1      66  ,
  4382     0   706    53     0    -1     1     111  Object
  4383     0   706    60     0    -1     1     111  dst
  4384     0   706    63     0    -1     1      66  ,
  4385     0   706    65     0    -1     1      53  long
  4386     0   706    70     0    -1     1     111  dstPos
  4387     0   706    76     0    -1     1      66  ,
  4388     0   707    41     0    -1     1      53  long
  4389     0   707    46     0    -1     0     111  length
  4390     0   707    52     0    -1     0      60  )
  4391     0   707    53     0    -1     0     102  ;
  4392     0   709     5     0    -1     1      45  static
  4393     0   709    12     0    -1     1      29  native
  4394     0   709    19     0    -1     1      50  void
  4395     0   709    24     0    -1     1     111  copyFromLongArray
  4396     0   709    41     0    -1     1      59  (
  4397     0   709    42     0    -1     1     111  Object
  4398     0   709    49     0    -1     1     111  src
  4399     0   709    52     0    -1     1      66  ,
  4400     0   709    54     0    -1     1      53  long
  4401     0   709    59     0    -1     0     111  srcPos
  4402     0   709    65     0    -1     0      66  ,
  4403     0   709    67     0    -1     1      53  long
  4404     0   709    72     0    -1     1     111  dstAddr
  4405     0   709    79     0    -1     1      66  ,
  4406     0   710    42     0    -1     1      53  long
  4407     0   710    47     0    -1     1     111  length
  4408     0   710    53     0    -1     1      60  )
  4409     0   710    54     0    -1     1     102  ;
  4410     0   711     5     0    -1     1      45  static
  4411     0   711    12     0    -1     1      29  native
  4412     0   711    19     0    -1     1      50  void
  4413     0   711    24     0    -1     1     111  copyToLongArray
  4414     0   711    39     0    -1     1      59  (
  4415     0   711    40     0    -1     1      53  long
  4416     0   711    45     0    -1     1     111  srcAddr
  4417     0   711    52     0    -1     1      66  ,
  4418     0   711    54     0    -1     1     111  Object
  4419     0   711    61     0    -1     1     111  dst
  4420     0   711    64     0    -1     1      66  ,
  4421     0   711    66     0    -1     1      53  long
  4422     0   711    71     0    -1     1     111  dstPos
  4423     0   711    77     0    -1     1      66  ,
  4424     0   712    40     0    -1     1      53  long
  4425     0   712    45     0    -1     0     111  length
  4426     0   712    51     0    -1     0      60  )
  4427     0   712    52     0    -1     0     102  ;
  4428     0   714     1     0    -1     0      64  }
  4429     0   714     1     0    -1     1     337  ENDCLASS
  4430     0   714     1    -1    -1     1     338  ENDFILE C:\javasrc\java\nio\Bits.java
  4431     1     1     1    -1    -1     1     339  STARTFILE C:\javasrc\java\nio\Buffer.java
  4432     1    26     1    -1    -1     0       5  package
  4433     1    26     9    -1    -1     0     111  java.nio
  4434     1    26    17    -1    -1     0     102  ;
  4435     1   173     1    -1    -1     0      10  public
  4436     1   173     8    -1    -1     0       7  abstract
  4437     1   173    17     1    -1     0     340  STARTCLASS
  4438     1   173    17     1    -1     0      24  class
  4439     1   173    23     1    -1     0     111  Buffer
  4440     1   173    30     1    -1     0      63  {
  4441     1   176     5     1    -1     0      41  private
  4442     1   176    13     1    -1     0      36  int
  4443     1   176    17     1    -1     0     111  mark
  4444     1   176    22     1    -1     0      67  =
  4445     1   176    24     1    -1     0      77  -
  4446     1   176    25     1    -1     0     112  1
  4447     1   176    26     1    -1     0     102  ;
  4448     1   177     5     1    -1     0      41  private
  4449     1   177    13     1    -1     0      36  int
  4450     1   177    17     1    -1     0     111  position
  4451     1   177    26     1    -1     0      67  =
  4452     1   177    28     1    -1     0     112  0
  4453     1   177    29     1    -1     0     102  ;
  4454     1   178     5     1    -1     1      41  private
  4455     1   178    13     1    -1     1      36  int
  4456     1   178    17     1    -1     1     111  limit
  4457     1   178    22     1    -1     1     102  ;
  4458     1   179     5     1    -1     1      41  private
  4459     1   179    13     1    -1     1      36  int
  4460     1   179    17     1    -1     1     111  capacity
  4461     1   179    25     1    -1     1     102  ;
  4462     1   183     5     1    -1     0      53  long
  4463     1   183    10     1    -1     0     111  address
  4464     1   183    17     1    -1     0     102  ;
  4465     1   183    17     1   107     0     341  STARTMETHOD
  4466     1   188     5     1   107     0     111  Buffer
  4467     1   188    11     1   107     0      59  (
  4468     1   188    12     1   107     0      36  int
  4469     1   188    16     1   107     0     111  mark
  4470     1   188    20     1   107     0      66  ,
  4471     1   188    22     1   107     0      36  int
  4472     1   188    26     1   107     0     111  pos
  4473     1   188    29     1   107     0      66  ,
  4474     1   188    31     1   107     0      36  int
  4475     1   188    35     1   107     0     111  lim
  4476     1   188    38     1   107     0      66  ,
  4477     1   188    40     1   107     0      36  int
  4478     1   188    44     1   107     0     111  cap
  4479     1   188    47     1   107     0      60  )
  4480     1   188    49     1   107     0      63  {
  4481     1   189     9     1   107     0      31  if
  4482     1   189    12     1   107     0      59  (
  4483     1   189    13     1   107     0     111  cap
  4484     1   189    17     1   107     0      93  <
  4485     1   189    19     1   107     0     112  0
  4486     1   189    20     1   107     0      60  )
  4487     1   190    13     1   107     0      20  throw
  4488     1   190    19     1   107     0      15  new
  4489     1   190    23     1   107     0     111  IllegalArgumentException
  4490     1   190    47     1   107     0      59  (
  4491     1   190    48     1   107     0     107  "Negative capacity: "
  4492     1   190    70     1   107     0      74  +
  4493     1   190    72     1   107     0     111  cap
  4494     1   190    75     1   107     0      60  )
  4495     1   190    76     1   107     0     102  ;
  4496     1   191     9     1   107     0     111  this.capacity
  4497     1   191    23     1   107     0      67  =
  4498     1   191    25     1   107     0     111  cap
  4499     1   191    28     1   107     0     102  ;
  4500     1   192     9     1   107     1     111  limit
  4501     1   192    14     1   107     1      59  (
  4502     1   192    15     1   107     1     111  lim
  4503     1   192    18     1   107     1      60  )
  4504     1   192    19     1   107     1     102  ;
  4505     1   193     9     1   107     1     111  position
  4506     1   193    17     1   107     1      59  (
  4507     1   193    18     1   107     1     111  pos
  4508     1   193    21     1   107     1      60  )
  4509     1   193    22     1   107     1     102  ;
  4510     1   194     9     1   107     0      31  if
  4511     1   194    12     1   107     0      59  (
  4512     1   194    13     1   107     0     111  mark
  4513     1   194    18     1   107     0      88  >=
  4514     1   194    21     1   107     0     112  0
  4515     1   194    22     1   107     0      60  )
  4516     1   194    24     1   107     0      63  {
  4517     1   195    13     1   107     0      31  if
  4518     1   195    16     1   107     0      59  (
  4519     1   195    17     1   107     0     111  mark
  4520     1   195    22     1   107     0      89  >
  4521     1   195    24     1   107     0     111  pos
  4522     1   195    27     1   107     0      60  )
  4523     1   196    17     1   107     0      20  throw
  4524     1   196    23     1   107     0      15  new
  4525     1   196    27     1   107     0     111  IllegalArgumentException
  4526     1   196    51     1   107     0      59  (
  4527     1   196    52     1   107     0     107  "mark > position: ("
  4528     1   197    52     1   107     0      74  +
  4529     1   197    54     1   107     0     111  mark
  4530     1   197    59     1   107     0      74  +
  4531     1   197    61     1   107     0     107  " > "
  4532     1   197    67     1   107     0      74  +
  4533     1   197    69     1   107     0     111  pos
  4534     1   197    73     1   107     0      74  +
  4535     1   197    75     1   107     0     107  ")"
  4536     1   197    78     1   107     0      60  )
  4537     1   197    79     1   107     0     102  ;
  4538     1   198    13     1   107     0     111  this.mark
  4539     1   198    23     1   107     0      67  =
  4540     1   198    25     1   107     0     111  mark
  4541     1   198    29     1   107     0     102  ;
  4542     1   199     9     1   107     0      64  }
  4543     1   200     5     1   107     1      64  }
  4544     1   200     5     1   107     0     342  ENDMETHOD
  4545     1   200     5     1   108     0     343  STARTMETHOD
  4546     1   207     5     1   108     0      10  public
  4547     1   207    12     1   108     0       6  final
  4548     1   207    18     1   108     0      36  int
  4549     1   207    22     1   108     0     111  capacity
  4550     1   207    30     1   108     0      59  (
  4551     1   207    31     1   108     0      60  )
  4552     1   207    33     1   108     0      63  {
  4553     1   208     9     1   108     0      19  return
  4554     1   208    16     1   108     0     111  capacity
  4555     1   208    24     1   108     0     102  ;
  4556     1   209     5     1   108     1      64  }
  4557     1   209     5     1   108     0     344  ENDMETHOD
  4558     1   209     5     1   109     0     345  STARTMETHOD
  4559     1   216     5     1   109     0      10  public
  4560     1   216    12     1   109     0       6  final
  4561     1   216    18     1   109     0      36  int
  4562     1   216    22     1   109     0     111  position
  4563     1   216    30     1   109     0      59  (
  4564     1   216    31     1   109     0      60  )
  4565     1   216    33     1   109     0      63  {
  4566     1   217     9     1   109     0      19  return
  4567     1   217    16     1   109     0     111  position
  4568     1   217    24     1   109     0     102  ;
  4569     1   218     5     1   109     1      64  }
  4570     1   218     5     1   109     0     346  ENDMETHOD
  4571     1   218     5     1   110     0     347  STARTMETHOD
  4572     1   233     5     1   110     0      10  public
  4573     1   233    12     1   110     0       6  final
  4574     1   233    18     1   110     0     111  Buffer
  4575     1   233    25     1   110     0     111  position
  4576     1   233    33     1   110     0      59  (
  4577     1   233    34     1   110     0      36  int
  4578     1   233    38     1   110     0     111  newPosition
  4579     1   233    49     1   110     0      60  )
  4580     1   233    51     1   110     0      63  {
  4581     1   234     9     1   110     0      31  if
  4582     1   234    12     1   110     0      59  (
  4583     1   234    13     1   110     0      59  (
  4584     1   234    14     1   110     0     111  newPosition
  4585     1   234    26     1   110     0      89  >
  4586     1   234    28     1   110     0     111  limit
  4587     1   234    33     1   110     0      60  )
  4588     1   234    35     1   110     0      98  ||
  4589     1   234    38     1   110     0      59  (
  4590     1   234    39     1   110     0     111  newPosition
  4591     1   234    51     1   110     0      93  <
  4592     1   234    53     1   110     0     112  0
  4593     1   234    54     1   110     0      60  )
  4594     1   234    55     1   110     0      60  )
  4595     1   235    13     1   110     0      20  throw
  4596     1   235    19     1   110     0      15  new
  4597     1   235    23     1   110     0     111  IllegalArgumentException
  4598     1   235    47     1   110     0      59  (
  4599     1   235    48     1   110     0      60  )
  4600     1   235    49     1   110     0     102  ;
  4601     1   236     9     1   110     0     111  position
  4602     1   236    18     1   110     0      67  =
  4603     1   236    20     1   110     0     111  newPosition
  4604     1   236    31     1   110     0     102  ;
  4605     1   237     9     1   110     0      31  if
  4606     1   237    12     1   110     0      59  (
  4607     1   237    13     1   110     0     111  mark
  4608     1   237    18     1   110     0      89  >
  4609     1   237    20     1   110     0     111  position
  4610     1   237    28     1   110     0      60  )
  4611     1   237    30     1   110     0     111  mark
  4612     1   237    35     1   110     0      67  =
  4613     1   237    37     1   110     0      77  -
  4614     1   237    38     1   110     0     112  1
  4615     1   237    39     1   110     0     102  ;
  4616     1   238     9     1   110     0      19  return
  4617     1   238    16     1   110     0      44  this
  4618     1   238    20     1   110     0     102  ;
  4619     1   239     5     1   110     0      64  }
  4620     1   239     5     1   110     0     348  ENDMETHOD
  4621     1   239     5     1   111     0     349  STARTMETHOD
  4622     1   246     5     1   111     0      10  public
  4623     1   246    12     1   111     0       6  final
  4624     1   246    18     1   111     0      36  int
  4625     1   246    22     1   111     0     111  limit
  4626     1   246    27     1   111     0      59  (
  4627     1   246    28     1   111     0      60  )
  4628     1   246    30     1   111     0      63  {
  4629     1   247     9     1   111     0      19  return
  4630     1   247    16     1   111     0     111  limit
  4631     1   247    21     1   111     0     102  ;
  4632     1   248     5     1   111     0      64  }
  4633     1   248     5     1   111     0     350  ENDMETHOD
  4634     1   248     5     1   112     0     351  STARTMETHOD
  4635     1   264     5     1   112     0      10  public
  4636     1   264    12     1   112     0       6  final
  4637     1   264    18     1   112     0     111  Buffer
  4638     1   264    25     1   112     0     111  limit
  4639     1   264    30     1   112     0      59  (
  4640     1   264    31     1   112     0      36  int
  4641     1   264    35     1   112     0     111  newLimit
  4642     1   264    43     1   112     0      60  )
  4643     1   264    45     1   112     0      63  {
  4644     1   265     9     1   112     0      31  if
  4645     1   265    12     1   112     0      59  (
  4646     1   265    13     1   112     0      59  (
  4647     1   265    14     1   112     0     111  newLimit
  4648     1   265    23     1   112     0      89  >
  4649     1   265    25     1   112     0     111  capacity
  4650     1   265    33     1   112     0      60  )
  4651     1   265    35     1   112     0      98  ||
  4652     1   265    38     1   112     0      59  (
  4653     1   265    39     1   112     0     111  newLimit
  4654     1   265    48     1   112     0      93  <
  4655     1   265    50     1   112     0     112  0
  4656     1   265    51     1   112     0      60  )
  4657     1   265    52     1   112     0      60  )
  4658     1   266    13     1   112     0      20  throw
  4659     1   266    19     1   112     0      15  new
  4660     1   266    23     1   112     0     111  IllegalArgumentException
  4661     1   266    47     1   112     0      59  (
  4662     1   266    48     1   112     0      60  )
  4663     1   266    49     1   112     0     102  ;
  4664     1   267     9     1   112     0     111  limit
  4665     1   267    15     1   112     0      67  =
  4666     1   267    17     1   112     0     111  newLimit
  4667     1   267    25     1   112     0     102  ;
  4668     1   268     9     1   112     0      31  if
  4669     1   268    12     1   112     0      59  (
  4670     1   268    13     1   112     0     111  position
  4671     1   268    22     1   112     0      89  >
  4672     1   268    24     1   112     0     111  limit
  4673     1   268    29     1   112     0      60  )
  4674     1   268    31     1   112     0     111  position
  4675     1   268    40     1   112     0      67  =
  4676     1   268    42     1   112     0     111  limit
  4677     1   268    47     1   112     0     102  ;
  4678     1   269     9     1   112     0      31  if
  4679     1   269    12     1   112     0      59  (
  4680     1   269    13     1   112     0     111  mark
  4681     1   269    18     1   112     0      89  >
  4682     1   269    20     1   112     0     111  limit
  4683     1   269    25     1   112     0      60  )
  4684     1   269    27     1   112     0     111  mark
  4685     1   269    32     1   112     0      67  =
  4686     1   269    34     1   112     0      77  -
  4687     1   269    35     1   112     0     112  1
  4688     1   269    36     1   112     0     102  ;
  4689     1   270     9     1   112     0      19  return
  4690     1   270    16     1   112     0      44  this
  4691     1   270    20     1   112     0     102  ;
  4692     1   271     5     1   112     0      64  }
  4693     1   271     5     1   112     0     352  ENDMETHOD
  4694     1   271     5     1   113     0     353  STARTMETHOD
  4695     1   278     5     1   113     0      10  public
  4696     1   278    12     1   113     0       6  final
  4697     1   278    18     1   113     0     111  Buffer
  4698     1   278    25     1   113     0     111  mark
  4699     1   278    29     1   113     0      59  (
  4700     1   278    30     1   113     0      60  )
  4701     1   278    32     1   113     0      63  {
  4702     1   279     9     1   113     0     111  mark
  4703     1   279    14     1   113     0      67  =
  4704     1   279    16     1   113     0     111  position
  4705     1   279    24     1   113     0     102  ;
  4706     1   280     9     1   113     0      19  return
  4707     1   280    16     1   113     0      44  this
  4708     1   280    20     1   113     0     102  ;
  4709     1   281     5     1   113     0      64  }
  4710     1   281     5     1   113     0     354  ENDMETHOD
  4711     1   281     5     1   114     0     355  STARTMETHOD
  4712     1   294     5     1   114     0      10  public
  4713     1   294    12     1   114     0       6  final
  4714     1   294    18     1   114     0     111  Buffer
  4715     1   294    25     1   114     0     111  reset
  4716     1   294    30     1   114     0      59  (
  4717     1   294    31     1   114     0      60  )
  4718     1   294    33     1   114     0      63  {
  4719     1   295     9     1   114     0      36  int
  4720     1   295    13     1   114     0     111  m
  4721     1   295    15     1   114     0      67  =
  4722     1   295    17     1   114     0     111  mark
  4723     1   295    21     1   114     0     102  ;
  4724     1   296     9     1   114     0      31  if
  4725     1   296    12     1   114     0      59  (
  4726     1   296    13     1   114     0     111  m
  4727     1   296    15     1   114     0      93  <
  4728     1   296    17     1   114     0     112  0
  4729     1   296    18     1   114     0      60  )
  4730     1   297    13     1   114     0      20  throw
  4731     1   297    19     1   114     0      15  new
  4732     1   297    23     1   114     0     111  InvalidMarkException
  4733     1   297    43     1   114     0      59  (
  4734     1   297    44     1   114     0      60  )
  4735     1   297    45     1   114     0     102  ;
  4736     1   298     9     1   114     0     111  position
  4737     1   298    18     1   114     0      67  =
  4738     1   298    20     1   114     0     111  m
  4739     1   298    21     1   114     1     102  ;
  4740     1   299     9     1   114     1      19  return
  4741     1   299    16     1   114     1      44  this
  4742     1   299    20     1   114     1     102  ;
  4743     1   300     5     1   114     1      64  }
  4744     1   300     5     1   114     0     356  ENDMETHOD
  4745     1   300     5     1   115     0     357  STARTMETHOD
  4746     1   319     5     1   115     0      10  public
  4747     1   319    12     1   115     0       6  final
  4748     1   319    18     1   115     0     111  Buffer
  4749     1   319    25     1   115     0     111  clear
  4750     1   319    30     1   115     0      59  (
  4751     1   319    31     1   115     0      60  )
  4752     1   319    33     1   115     0      63  {
  4753     1   320     9     1   115     0     111  position
  4754     1   320    18     1   115     0      67  =
  4755     1   320    20     1   115     0     112  0
  4756     1   320    21     1   115     0     102  ;
  4757     1   321     9     1   115     0     111  limit
  4758     1   321    15     1   115     0      67  =
  4759     1   321    17     1   115     0     111  capacity
  4760     1   321    25     1   115     0     102  ;
  4761     1   322     9     1   115     0     111  mark
  4762     1   322    14     1   115     0      67  =
  4763     1   322    16     1   115     0      77  -
  4764     1   322    17     1   115     0     112  1
  4765     1   322    18     1   115     1     102  ;
  4766     1   323     9     1   115     1      19  return
  4767     1   323    16     1   115     1      44  this
  4768     1   323    20     1   115     1     102  ;
  4769     1   324     5     1   115     1      64  }
  4770     1   324     5     1   115     0     358  ENDMETHOD
  4771     1   324     5     1   116     0     359  STARTMETHOD
  4772     1   347     5     1   116     0      10  public
  4773     1   347    12     1   116     0       6  final
  4774     1   347    18     1   116     0     111  Buffer
  4775     1   347    25     1   116     0     111  flip
  4776     1   347    29     1   116     0      59  (
  4777     1   347    30     1   116     0      60  )
  4778     1   347    32     1   116     0      63  {
  4779     1   348     9     1   116     0     111  limit
  4780     1   348    15     1   116     0      67  =
  4781     1   348    17     1   116     0     111  position
  4782     1   348    25     1   116     0     102  ;
  4783     1   349     9     1   116     0     111  position
  4784     1   349    18     1   116     0      67  =
  4785     1   349    20     1   116     0     112  0
  4786     1   349    21     1   116     0     102  ;
  4787     1   350     9     1   116     0     111  mark
  4788     1   350    14     1   116     0      67  =
  4789     1   350    16     1   116     0      77  -
  4790     1   350    17     1   116     0     112  1
  4791     1   350    18     1   116     1     102  ;
  4792     1   351     9     1   116     1      19  return
  4793     1   351    16     1   116     1      44  this
  4794     1   351    20     1   116     1     102  ;
  4795     1   352     5     1   116     1      64  }
  4796     1   352     5     1   116     0     360  ENDMETHOD
  4797     1   352     5     1   117     0     361  STARTMETHOD
  4798     1   369     5     1   117     0      10  public
  4799     1   369    12     1   117     0       6  final
  4800     1   369    18     1   117     0     111  Buffer
  4801     1   369    25     1   117     0     111  rewind
  4802     1   369    31     1   117     0      59  (
  4803     1   369    32     1   117     0      60  )
  4804     1   369    34     1   117     0      63  {
  4805     1   370     9     1   117     0     111  position
  4806     1   370    18     1   117     0      67  =
  4807     1   370    20     1   117     0     112  0
  4808     1   370    21     1   117     0     102  ;
  4809     1   371     9     1   117     0     111  mark
  4810     1   371    14     1   117     0      67  =
  4811     1   371    16     1   117     0      77  -
  4812     1   371    17     1   117     0     112  1
  4813     1   371    18     1   117     0     102  ;
  4814     1   372     9     1   117     0      19  return
  4815     1   372    16     1   117     0      44  this
  4816     1   372    20     1   117     1     102  ;
  4817     1   373     5     1   117     1      64  }
  4818     1   373     5     1   117     0     362  ENDMETHOD
  4819     1   373     5     1   118     0     363  STARTMETHOD
  4820     1   381     5     1   118     0      10  public
  4821     1   381    12     1   118     0       6  final
  4822     1   381    18     1   118     0      36  int
  4823     1   381    22     1   118     0     111  remaining
  4824     1   381    31     1   118     0      59  (
  4825     1   381    32     1   118     0      60  )
  4826     1   381    34     1   118     0      63  {
  4827     1   382     9     1   118     0      19  return
  4828     1   382    16     1   118     0     111  limit
  4829     1   382    22     1   118     0      77  -
  4830     1   382    24     1   118     0     111  position
  4831     1   382    32     1   118     1     102  ;
  4832     1   383     5     1   118     1      64  }
  4833     1   383     5     1   118     0     364  ENDMETHOD
  4834     1   383     5     1   119     0     365  STARTMETHOD
  4835     1   392     5     1   119     0      10  public
  4836     1   392    12     1   119     0       6  final
  4837     1   392    18     1   119     0      39  boolean
  4838     1   392    26     1   119     0     111  hasRemaining
  4839     1   392    38     1   119     0      59  (
  4840     1   392    39     1   119     0      60  )
  4841     1   392    41     1   119     0      63  {
  4842     1   393     9     1   119     0      19  return
  4843     1   393    16     1   119     0     111  position
  4844     1   393    25     1   119     0      93  <
  4845     1   393    27     1   119     0     111  limit
  4846     1   393    32     1   119     1     102  ;
  4847     1   394     5     1   119     1      64  }
  4848     1   394     5     1   119     0     366  ENDMETHOD
  4849     1   401     5     1    -1     1      10  public
  4850     1   401    12     1    -1     1       7  abstract
  4851     1   401    21     1    -1     1      39  boolean
  4852     1   401    29     1    -1     1     111  isReadOnly
  4853     1   401    39     1    -1     1      59  (
  4854     1   401    40     1    -1     1      60  )
  4855     1   401    41     1    -1     1     102  ;
  4856     1   416     5     1    -1     1      10  public
  4857     1   416    12     1    -1     1       7  abstract
  4858     1   416    21     1    -1     1      39  boolean
  4859     1   416    29     1    -1     1     111  hasArray
  4860     1   416    37     1    -1     1      59  (
  4861     1   416    38     1    -1     1      60  )
  4862     1   416    39     1    -1     1     102  ;
  4863     1   443     5     1    -1     0      10  public
  4864     1   443    12     1    -1     0       7  abstract
  4865     1   443    21     1    -1     0     111  Object
  4866     1   443    28     1    -1     0     111  array
  4867     1   443    33     1    -1     0      59  (
  4868     1   443    34     1    -1     0      60  )
  4869     1   443    35     1    -1     0     102  ;
  4870     1   467     5     1    -1     0      10  public
  4871     1   467    12     1    -1     0       7  abstract
  4872     1   467    21     1    -1     0      36  int
  4873     1   467    25     1    -1     0     111  arrayOffset
  4874     1   467    36     1    -1     0      59  (
  4875     1   467    37     1    -1     0      60  )
  4876     1   467    38     1    -1     0     102  ;
  4877     1   477     5     1    -1     0      10  public
  4878     1   477    12     1    -1     0       7  abstract
  4879     1   477    21     1    -1     0      39  boolean
  4880     1   477    29     1    -1     0     111  isDirect
  4881     1   477    37     1    -1     0      59  (
  4882     1   477    38     1    -1     0      60  )
  4883     1   477    39     1    -1     0     102  ;
  4884     1   477    39     1   120     0     367  STARTMETHOD
  4885     1   489     5     1   120     0       6  final
  4886     1   489    11     1   120     0      36  int
  4887     1   489    15     1   120     0     111  nextGetIndex
  4888     1   489    27     1   120     0      59  (
  4889     1   489    28     1   120     0      60  )
  4890     1   489    30     1   120     0      63  {
  4891     1   490     9     1   120     0      31  if
  4892     1   490    12     1   120     0      59  (
  4893     1   490    13     1   120     0     111  position
  4894     1   490    22     1   120     0      88  >=
  4895     1   490    25     1   120     0     111  limit
  4896     1   490    30     1   120     0      60  )
  4897     1   491    13     1   120     0      20  throw
  4898     1   491    19     1   120     0      15  new
  4899     1   491    23     1   120     0     111  BufferUnderflowException
  4900     1   491    47     1   120     0      59  (
  4901     1   491    48     1   120     0      60  )
  4902     1   491    49     1   120     0     102  ;
  4903     1   492     9     1   120     0      19  return
  4904     1   492    16     1   120     0     111  position
  4905     1   492    24     1   120     0      76  ++
  4906     1   492    26     1   120     0     102  ;
  4907     1   493     5     1   120     0      64  }
  4908     1   493     5     1   120     0     368  ENDMETHOD
  4909     1   493     5     1   121     0     369  STARTMETHOD
  4910     1   495     5     1   121     0       6  final
  4911     1   495    11     1   121     0      36  int
  4912     1   495    15     1   121     0     111  nextGetIndex
  4913     1   495    27     1   121     0      59  (
  4914     1   495    28     1   121     0      36  int
  4915     1   495    32     1   121     0     111  nb
  4916     1   495    34     1   121     0      60  )
  4917     1   495    36     1   121     0      63  {
  4918     1   496     9     1   121     0      31  if
  4919     1   496    12     1   121     0      59  (
  4920     1   496    13     1   121     0     111  limit
  4921     1   496    19     1   121     0      77  -
  4922     1   496    21     1   121     0     111  position
  4923     1   496    30     1   121     0      93  <
  4924     1   496    32     1   121     0     111  nb
  4925     1   496    34     1   121     0      60  )
  4926     1   497    13     1   121     0      20  throw
  4927     1   497    19     1   121     0      15  new
  4928     1   497    23     1   121     0     111  BufferUnderflowException
  4929     1   497    47     1   121     0      59  (
  4930     1   497    48     1   121     0      60  )
  4931     1   497    49     1   121     0     102  ;
  4932     1   498     9     1   121     0      36  int
  4933     1   498    13     1   121     0     111  p
  4934     1   498    15     1   121     0      67  =
  4935     1   498    17     1   121     0     111  position
  4936     1   498    25     1   121     0     102  ;
  4937     1   499     9     1   121     0     111  position
  4938     1   499    18     1   121     0      75  +=
  4939     1   499    21     1   121     0     111  nb
  4940     1   499    23     1   121     0     102  ;
  4941     1   500     9     1   121     0      19  return
  4942     1   500    16     1   121     0     111  p
  4943     1   500    17     1   121     0     102  ;
  4944     1   501     5     1   121     0      64  }
  4945     1   501     5     1   121     0     370  ENDMETHOD
  4946     1   501     5     1   122     0     371  STARTMETHOD
  4947     1   510     5     1   122     0       6  final
  4948     1   510    11     1   122     0      36  int
  4949     1   510    15     1   122     0     111  nextPutIndex
  4950     1   510    27     1   122     0      59  (
  4951     1   510    28     1   122     0      60  )
  4952     1   510    30     1   122     0      63  {
  4953     1   511     9     1   122     0      31  if
  4954     1   511    12     1   122     0      59  (
  4955     1   511    13     1   122     0     111  position
  4956     1   511    22     1   122     0      88  >=
  4957     1   511    25     1   122     0     111  limit
  4958     1   511    30     1   122     0      60  )
  4959     1   512    13     1   122     0      20  throw
  4960     1   512    19     1   122     0      15  new
  4961     1   512    23     1   122     0     111  BufferOverflowException
  4962     1   512    46     1   122     0      59  (
  4963     1   512    47     1   122     0      60  )
  4964     1   512    48     1   122     0     102  ;
  4965     1   513     9     1   122     0      19  return
  4966     1   513    16     1   122     0     111  position
  4967     1   513    24     1   122     0      76  ++
  4968     1   513    26     1   122     0     102  ;
  4969     1   514     5     1   122     0      64  }
  4970     1   514     5     1   122     0     372  ENDMETHOD
  4971     1   514     5     1   123     0     373  STARTMETHOD
  4972     1   516     5     1   123     0       6  final
  4973     1   516    11     1   123     0      36  int
  4974     1   516    15     1   123     0     111  nextPutIndex
  4975     1   516    27     1   123     0      59  (
  4976     1   516    28     1   123     0      36  int
  4977     1   516    32     1   123     0     111  nb
  4978     1   516    34     1   123     0      60  )
  4979     1   516    36     1   123     0      63  {
  4980     1   517     9     1   123     0      31  if
  4981     1   517    12     1   123     0      59  (
  4982     1   517    13     1   123     0     111  limit
  4983     1   517    19     1   123     0      77  -
  4984     1   517    21     1   123     0     111  position
  4985     1   517    30     1   123     0      93  <
  4986     1   517    32     1   123     0     111  nb
  4987     1   517    34     1   123     0      60  )
  4988     1   518    13     1   123     0      20  throw
  4989     1   518    19     1   123     0      15  new
  4990     1   518    23     1   123     0     111  BufferOverflowException
  4991     1   518    46     1   123     0      59  (
  4992     1   518    47     1   123     0      60  )
  4993     1   518    48     1   123     0     102  ;
  4994     1   519     9     1   123     0      36  int
  4995     1   519    13     1   123     0     111  p
  4996     1   519    15     1   123     0      67  =
  4997     1   519    17     1   123     0     111  position
  4998     1   519    25     1   123     0     102  ;
  4999     1   520     9     1   123     0     111  position
  5000     1   520    18     1   123     0      75  +=
  5001     1   520    21     1   123     0     111  nb
  5002     1   520    23     1   123     0     102  ;
  5003     1   521     9     1   123     0      19  return
  5004     1   521    16     1   123     0     111  p
  5005     1   521    17     1   123     0     102  ;
  5006     1   522     5     1   123     0      64  }
  5007     1   522     5     1   123     0     374  ENDMETHOD
  5008     1   522     5     1   124     0     375  STARTMETHOD
  5009     1   529     5     1   124     0       6  final
  5010     1   529    11     1   124     0      36  int
  5011     1   529    15     1   124     0     111  checkIndex
  5012     1   529    25     1   124     0      59  (
  5013     1   529    26     1   124     0      36  int
  5014     1   529    30     1   124     0     111  i
  5015     1   529    31     1   124     0      60  )
  5016     1   529    33     1   124     0      63  {
  5017     1   530     9     1   124     0      31  if
  5018     1   530    12     1   124     0      59  (
  5019     1   530    13     1   124     0      59  (
  5020     1   530    14     1   124     0     111  i
  5021     1   530    16     1   124     0      93  <
  5022     1   530    18     1   124     0     112  0
  5023     1   530    19     1   124     0      60  )
  5024     1   530    21     1   124     0      98  ||
  5025     1   530    24     1   124     0      59  (
  5026     1   530    25     1   124     0     111  i
  5027     1   530    27     1   124     0      88  >=
  5028     1   530    30     1   124     0     111  limit
  5029     1   530    35     1   124     0      60  )
  5030     1   530    36     1   124     0      60  )
  5031     1   531    13     1   124     0      20  throw
  5032     1   531    19     1   124     0      15  new
  5033     1   531    23     1   124     0     111  IndexOutOfBoundsException
  5034     1   531    48     1   124     0      59  (
  5035     1   531    49     1   124     0      60  )
  5036     1   531    50     1   124     0     102  ;
  5037     1   532     9     1   124     0      19  return
  5038     1   532    16     1   124     0     111  i
  5039     1   532    17     1   124     0     102  ;
  5040     1   533     5     1   124     0      64  }
  5041     1   533     5     1   124     0     376  ENDMETHOD
  5042     1   533     5     1   125     0     377  STARTMETHOD
  5043     1   535     5     1   125     0       6  final
  5044     1   535    11     1   125     0      36  int
  5045     1   535    15     1   125     0     111  checkIndex
  5046     1   535    25     1   125     0      59  (
  5047     1   535    26     1   125     0      36  int
  5048     1   535    30     1   125     0     111  i
  5049     1   535    31     1   125     0      66  ,
  5050     1   535    33     1   125     0      36  int
  5051     1   535    37     1   125     0     111  nb
  5052     1   535    39     1   125     0      60  )
  5053     1   535    41     1   125     0      63  {
  5054     1   536     9     1   125     0      31  if
  5055     1   536    12     1   125     0      59  (
  5056     1   536    13     1   125     0      59  (
  5057     1   536    14     1   125     0     111  i
  5058     1   536    16     1   125     0      93  <
  5059     1   536    18     1   125     0     112  0
  5060     1   536    19     1   125     0      60  )
  5061     1   536    21     1   125     0      98  ||
  5062     1   536    24     1   125     0      59  (
  5063     1   536    25     1   125     0     111  nb
  5064     1   536    28     1   125     0      89  >
  5065     1   536    30     1   125     0     111  limit
  5066     1   536    36     1   125     0      77  -
  5067     1   536    38     1   125     0     111  i
  5068     1   536    39     1   125     0      60  )
  5069     1   536    40     1   125     0      60  )
  5070     1   537    13     1   125     0      20  throw
  5071     1   537    19     1   125     0      15  new
  5072     1   537    23     1   125     0     111  IndexOutOfBoundsException
  5073     1   537    48     1   125     0      59  (
  5074     1   537    49     1   125     0      60  )
  5075     1   537    50     1   125     0     102  ;
  5076     1   538     9     1   125     0      19  return
  5077     1   538    16     1   125     0     111  i
  5078     1   538    17     1   125     0     102  ;
  5079     1   539     5     1   125     0      64  }
  5080     1   539     5     1   125     0     378  ENDMETHOD
  5081     1   539     5     1   126     0     379  STARTMETHOD
  5082     1   541     5     1   126     0       6  final
  5083     1   541    11     1   126     0      36  int
  5084     1   541    15     1   126     0     111  markValue
  5085     1   541    24     1   126     0      59  (
  5086     1   541    25     1   126     0      60  )
  5087     1   541    27     1   126     0      63  {
  5088     1   542     9     1   126     0      19  return
  5089     1   542    16     1   126     0     111  mark
  5090     1   542    20     1   126     0     102  ;
  5091     1   543     5     1   126     0      64  }
  5092     1   543     5     1   126     0     380  ENDMETHOD
  5093     1   543     5     1   127     0     381  STARTMETHOD
  5094     1   545     5     1   127     0      45  static
  5095     1   545    12     1   127     0      50  void
  5096     1   545    17     1   127     0     111  checkBounds
  5097     1   545    28     1   127     0      59  (
  5098     1   545    29     1   127     0      36  int
  5099     1   545    33     1   127     0     111  off
  5100     1   545    36     1   127     0      66  ,
  5101     1   545    38     1   127     0      36  int
  5102     1   545    42     1   127     0     111  len
  5103     1   545    45     1   127     0      66  ,
  5104     1   545    47     1   127     0      36  int
  5105     1   545    51     1   127     0     111  size
  5106     1   545    55     1   127     0      60  )
  5107     1   545    57     1   127     0      63  {
  5108     1   546     9     1   127     0      31  if
  5109     1   546    12     1   127     0      59  (
  5110     1   546    13     1   127     0      59  (
  5111     1   546    14     1   127     0     111  off
  5112     1   546    18     1   127     0      96  |
  5113     1   546    20     1   127     0     111  len
  5114     1   546    24     1   127     0      96  |
  5115     1   546    26     1   127     0      59  (
  5116     1   546    27     1   127     0     111  off
  5117     1   546    31     1   127     0      74  +
  5118     1   546    33     1   127     0     111  len
  5119     1   546    36     1   127     0      60  )
  5120     1   546    38     1   127     0      96  |
  5121     1   546    40     1   127     0      59  (
  5122     1   546    41     1   127     0     111  size
  5123     1   546    46     1   127     0      77  -
  5124     1   546    48     1   127     0      59  (
  5125     1   546    49     1   127     0     111  off
  5126     1   546    53     1   127     0      74  +
  5127     1   546    55     1   127     0     111  len
  5128     1   546    58     1   127     0      60  )
  5129     1   546    59     1   127     0      60  )
  5130     1   546    60     1   127     0      60  )
  5131     1   546    62     1   127     0      93  <
  5132     1   546    64     1   127     0     112  0
  5133     1   546    65     1   127     0      60  )
  5134     1   547    13     1   127     0      20  throw
  5135     1   547    19     1   127     0      15  new
  5136     1   547    23     1   127     0     111  IndexOutOfBoundsException
  5137     1   547    48     1   127     0      59  (
  5138     1   547    49     1   127     0      60  )
  5139     1   547    50     1   127     0     102  ;
  5140     1   548     5     1   127     0      64  }
  5141     1   548     5     1   127     0     382  ENDMETHOD
  5142     1   550     1     1    -1     0      64  }
  5143     1   550     1     1    -1     1     383  ENDCLASS
  5144     1   550     1    -1    -1     1     384  ENDFILE C:\javasrc\java\nio\Buffer.java
  5145     2     1     1    -1    -1     1     385  STARTFILE C:\javasrc\java\nio\BufferOverflowException.java
  5146     2    30     1    -1    -1     0       5  package
  5147     2    30     9    -1    -1     0     111  java.nio
  5148     2    30    17    -1    -1     0     102  ;
  5149     2    40     1    -1    -1     0      10  public
  5150     2    40     8     2    -1     0     386  STARTCLASS
  5151     2    40     8     2    -1     0      24  class
  5152     2    40    14     2    -1     0     111  BufferOverflowException
  5153     2    41     5     2    -1     0      38  extends
  5154     2    41    13     2    -1     0     111  RuntimeException
  5155     2    42     1     2    -1     0      63  {
  5156     2    44     5     2    -1     0      41  private
  5157     2    44    13     2    -1     0      45  static
  5158     2    44    20     2    -1     0       6  final
  5159     2    44    26     2    -1     0      53  long
  5160     2    44    31     2    -1     0     111  serialVersionUID
  5161     2    44    48     2    -1     0      67  =
  5162     2    44    50     2    -1     0      77  -
  5163     2    44    51     2    -1     0      55  5484897634319144535L
  5164     2    44    71     2    -1     0     102  ;
  5165     2    44    71     2   128     0     387  STARTMETHOD
  5166     2    49     5     2   128     0      10  public
  5167     2    49    12     2   128     0     111  BufferOverflowException
  5168     2    49    35     2   128     0      59  (
  5169     2    49    36     2   128     0      60  )
  5170     2    49    38     2   128     0      63  {
  5171     2    49    40     2   128     0      64  }
  5172     2    49    40     2   128     0     388  ENDMETHOD
  5173     2    51     1     2    -1     0      64  }
  5174     2    51     1     2    -1     1     389  ENDCLASS
  5175     2    51     1    -1    -1     1     390  ENDFILE C:\javasrc\java\nio\BufferOverflowException.java
  5176     3     1     1    -1    -1     1     391  STARTFILE C:\javasrc\java\nio\BufferUnderflowException.java
  5177     3    30     1    -1    -1     0       5  package
  5178     3    30     9    -1    -1     0     111  java.nio
  5179     3    30    17    -1    -1     0     102  ;
  5180     3    40     1    -1    -1     0      10  public
  5181     3    40     8     3    -1     0     392  STARTCLASS
  5182     3    40     8     3    -1     0      24  class
  5183     3    40    14     3    -1     0     111  BufferUnderflowException
  5184     3    41     5     3    -1     0      38  extends
  5185     3    41    13     3    -1     0     111  RuntimeException
  5186     3    42     1     3    -1     0      63  {
  5187     3    44     5     3    -1     0      41  private
  5188     3    44    13     3    -1     0      45  static
  5189     3    44    20     3    -1     0       6  final
  5190     3    44    26     3    -1     0      53  long
  5191     3    44    31     3    -1     0     111  serialVersionUID
  5192     3    44    48     3    -1     0      67  =
  5193     3    44    50     3    -1     0      77  -
  5194     3    44    51     3    -1     0      55  1713313658691622206L
  5195     3    44    71     3    -1     0     102  ;
  5196     3    44    71     3   129     0     393  STARTMETHOD
  5197     3    49     5     3   129     0      10  public
  5198     3    49    12     3   129     0     111  BufferUnderflowException
  5199     3    49    36     3   129     0      59  (
  5200     3    49    37     3   129     0      60  )
  5201     3    49    39     3   129     0      63  {
  5202     3    49    41     3   129     0      64  }
  5203     3    49    41     3   129     0     394  ENDMETHOD
  5204     3    51     1     3    -1     0      64  }
  5205     3    51     1     3    -1     1     395  ENDCLASS
  5206     3    51     1    -1    -1     1     396  ENDFILE C:\javasrc\java\nio\BufferUnderflowException.java
  5207     4     1     1    -1    -1     1     397  STARTFILE C:\javasrc\java\nio\ByteBuffer.java
  5208     4    28     1    -1    -1     0       5  package
  5209     4    28     9    -1    -1     0     111  java.nio
  5210     4    28    17    -1    -1     0     102  ;
  5211     4   257     1    -1    -1     0      10  public
  5212     4   257     8    -1    -1     0       7  abstract
  5213     4   257    17     4    -1     0     398  STARTCLASS
  5214     4   257    17     4    -1     0      24  class
  5215     4   257    23     4    -1     0     111  ByteBuffer
  5216     4   258     5     4    -1     0      38  extends
  5217     4   258    13     4    -1     0     111  Buffer
  5218     4   259     5     4    -1     0      17  implements
  5219     4   259    16     4    -1     0     111  Comparable
  5220     4   259    26     4    -1     0      93  <
  5221     4   259    27     4    -1     0     111  ByteBuffer
  5222     4   259    37     4    -1     0      89  >
  5223     4   260     1     4    -1     0      63  {
  5224     4   266     5     4    -1     0       6  final
  5225     4   266    11     4    -1     0       9  byte
  5226     4   266    15     4    -1     0      61  [
  5227     4   266    16     4    -1     0      62  ]
  5228     4   266    18     4    -1     0     111  hb
  5229     4   266    20     4    -1     0     102  ;
  5230     4   267     5     4    -1     0       6  final
  5231     4   267    11     4    -1     0      36  int
  5232     4   267    15     4    -1     0     111  offset
  5233     4   267    21     4    -1     0     102  ;
  5234     4   268     5     4    -1     0      39  boolean
  5235     4   268    13     4    -1     0     111  isReadOnly
  5236     4   268    23     4    -1     0     102  ;
  5237     4   268    23     4   130     0     399  STARTMETHOD
  5238     4   273     5     4   130     0     111  ByteBuffer
  5239     4   273    15     4   130     0      59  (
  5240     4   273    16     4   130     0      36  int
  5241     4   273    20     4   130     0     111  mark
  5242     4   273    24     4   130     0      66  ,
  5243     4   273    26     4   130     0      36  int
  5244     4   273    30     4   130     0     111  pos
  5245     4   273    33     4   130     0      66  ,
  5246     4   273    35     4   130     0      36  int
  5247     4   273    39     4   130     0     111  lim
  5248     4   273    42     4   130     0      66  ,
  5249     4   273    44     4   130     0      36  int
  5250     4   273    48     4   130     0     111  cap
  5251     4   273    51     4   130     0      66  ,
  5252     4   274    18     4   130     0       9  byte
  5253     4   274    22     4   130     0      61  [
  5254     4   274    23     4   130     0      62  ]
  5255     4   274    25     4   130     0     111  hb
  5256     4   274    27     4   130     0      66  ,
  5257     4   274    29     4   130     0      36  int
  5258     4   274    33     4   130     0     111  offset
  5259     4   274    39     4   130     0      60  )
  5260     4   275     5     4   130     0      63  {
  5261     4   276     9     4   130     0      27  super
  5262     4   276    14     4   130     0      59  (
  5263     4   276    15     4   130     0     111  mark
  5264     4   276    19     4   130     0      66  ,
  5265     4   276    21     4   130     0     111  pos
  5266     4   276    24     4   130     0      66  ,
  5267     4   276    26     4   130     0     111  lim
  5268     4   276    29     4   130     0      66  ,
  5269     4   276    31     4   130     0     111  cap
  5270     4   276    34     4   130     0      60  )
  5271     4   276    35     4   130     0     102  ;
  5272     4   277     9     4   130     1     111  this.hb
  5273     4   277    17     4   130     1      67  =
  5274     4   277    19     4   130     1     111  hb
  5275     4   277    21     4   130     1     102  ;
  5276     4   278     9     4   130     1     111  this.offset
  5277     4   278    21     4   130     1      67  =
  5278     4   278    23     4   130     1     111  offset
  5279     4   278    29     4   130     1     102  ;
  5280     4   279     5     4   130     0      64  }
  5281     4   279     5     4   130     0     400  ENDMETHOD
  5282     4   279     5     4   131     0     401  STARTMETHOD
  5283     4   283     5     4   131     0     111  ByteBuffer
  5284     4   283    15     4   131     0      59  (
  5285     4   283    16     4   131     0      36  int
  5286     4   283    20     4   131     0     111  mark
  5287     4   283    24     4   131     0      66  ,
  5288     4   283    26     4   131     0      36  int
  5289     4   283    30     4   131     0     111  pos
  5290     4   283    33     4   131     0      66  ,
  5291     4   283    35     4   131     0      36  int
  5292     4   283    39     4   131     0     111  lim
  5293     4   283    42     4   131     0      66  ,
  5294     4   283    44     4   131     0      36  int
  5295     4   283    48     4   131     0     111  cap
  5296     4   283    51     4   131     0      60  )
  5297     4   283    53     4   131     0      63  {
  5298     4   284     9     4   131     0      44  this
  5299     4   284    13     4   131     0      59  (
  5300     4   284    14     4   131     0     111  mark
  5301     4   284    18     4   131     0      66  ,
  5302     4   284    20     4   131     0     111  pos
  5303     4   284    23     4   131     0      66  ,
  5304     4   284    25     4   131     0     111  lim
  5305     4   284    28     4   131     0      66  ,
  5306     4   284    30     4   131     0     111  cap
  5307     4   284    33     4   131     0      66  ,
  5308     4   284    35     4   131     0      21  null
  5309     4   284    39     4   131     0      66  ,
  5310     4   284    41     4   131     0     112  0
  5311     4   284    42     4   131     0      60  )
  5312     4   284    43     4   131     0     102  ;
  5313     4   285     5     4   131     0      64  }
  5314     4   285     5     4   131     0     402  ENDMETHOD
  5315     4   285     5     4   132     0     403  STARTMETHOD
  5316     4   304     5     4   132     0      10  public
  5317     4   304    12     4   132     0      45  static
  5318     4   304    19     4   132     0     111  ByteBuffer
  5319     4   304    30     4   132     0     111  allocateDirect
  5320     4   304    44     4   132     0      59  (
  5321     4   304    45     4   132     0      36  int
  5322     4   304    49     4   132     0     111  capacity
  5323     4   304    57     4   132     0      60  )
  5324     4   304    59     4   132     0      63  {
  5325     4   305     9     4   132     0      19  return
  5326     4   305    16     4   132     0      15  new
  5327     4   305    20     4   132     0     111  DirectByteBuffer
  5328     4   305    36     4   132     0      59  (
  5329     4   305    37     4   132     0     111  capacity
  5330     4   305    45     4   132     0      60  )
  5331     4   305    46     4   132     0     102  ;
  5332     4   306     5     4   132     0      64  }
  5333     4   306     5     4   132     0     404  ENDMETHOD
  5334     4   306     5     4   133     0     405  STARTMETHOD
  5335     4   326     5     4   133     0      10  public
  5336     4   326    12     4   133     0      45  static
  5337     4   326    19     4   133     0     111  ByteBuffer
  5338     4   326    30     4   133     0     111  allocate
  5339     4   326    38     4   133     0      59  (
  5340     4   326    39     4   133     0      36  int
  5341     4   326    43     4   133     0     111  capacity
  5342     4   326    51     4   133     0      60  )
  5343     4   326    53     4   133     0      63  {
  5344     4   327     9     4   133     0      31  if
  5345     4   327    12     4   133     0      59  (
  5346     4   327    13     4   133     0     111  capacity
  5347     4   327    22     4   133     0      93  <
  5348     4   327    24     4   133     0     112  0
  5349     4   327    25     4   133     0      60  )
  5350     4   328    13     4   133     0      20  throw
  5351     4   328    19     4   133     0      15  new
  5352     4   328    23     4   133     0     111  IllegalArgumentException
  5353     4   328    47     4   133     0      59  (
  5354     4   328    48     4   133     0      60  )
  5355     4   328    49     4   133     0     102  ;
  5356     4   329     9     4   133     0      19  return
  5357     4   329    16     4   133     0      15  new
  5358     4   329    20     4   133     0     111  HeapByteBuffer
  5359     4   329    34     4   133     0      59  (
  5360     4   329    35     4   133     0     111  capacity
  5361     4   329    43     4   133     0      66  ,
  5362     4   329    45     4   133     0     111  capacity
  5363     4   329    53     4   133     0      60  )
  5364     4   329    54     4   133     0     102  ;
  5365     4   330     5     4   133     0      64  }
  5366     4   330     5     4   133     0     406  ENDMETHOD
  5367     4   330     5     4   134     0     407  STARTMETHOD
  5368     4   363     5     4   134     0      10  public
  5369     4   363    12     4   134     0      45  static
  5370     4   363    19     4   134     0     111  ByteBuffer
  5371     4   363    30     4   134     0     111  wrap
  5372     4   363    34     4   134     0      59  (
  5373     4   363    35     4   134     0       9  byte
  5374     4   363    39     4   134     0      61  [
  5375     4   363    40     4   134     0      62  ]
  5376     4   363    42     4   134     0     111  array
  5377     4   363    47     4   134     0      66  ,
  5378     4   364    37     4   134     0      36  int
  5379     4   364    41     4   134     0     111  offset
  5380     4   364    47     4   134     0      66  ,
  5381     4   364    49     4   134     0      36  int
  5382     4   364    53     4   134     0     111  length
  5383     4   364    59     4   134     0      60  )
  5384     4   365     5     4   134     0      63  {
  5385     4   366     9     4   134     0      35  try
  5386     4   366    13     4   134     0      63  {
  5387     4   367    13     4   134     0      19  return
  5388     4   367    20     4   134     0      15  new
  5389     4   367    24     4   134     0     111  HeapByteBuffer
  5390     4   367    38     4   134     0      59  (
  5391     4   367    39     4   134     0     111  array
  5392     4   367    44     4   134     0      66  ,
  5393     4   367    46     4   134     0     111  offset
  5394     4   367    52     4   134     0      66  ,
  5395     4   367    54     4   134     0     111  length
  5396     4   367    60     4   134     0      60  )
  5397     4   367    61     4   134     0     102  ;
  5398     4   368     9     4   134     0      64  }
  5399     4   368    11     4   134     0      34  catch
  5400     4   368    17     4   134     0      59  (
  5401     4   368    18     4   134     0     111  IllegalArgumentException
  5402     4   368    43     4   134     0     111  x
  5403     4   368    44     4   134     0      60  )
  5404     4   368    46     4   134     0      63  {
  5405     4   369    13     4   134     0      20  throw
  5406     4   369    19     4   134     0      15  new
  5407     4   369    23     4   134     0     111  IndexOutOfBoundsException
  5408     4   369    48     4   134     0      59  (
  5409     4   369    49     4   134     0      60  )
  5410     4   369    50     4   134     0     102  ;
  5411     4   370     9     4   134     0      64  }
  5412     4   371     5     4   134     0      64  }
  5413     4   371     5     4   134     0     408  ENDMETHOD
  5414     4   371     5     4   135     0     409  STARTMETHOD
  5415     4   389     5     4   135     0      10  public
  5416     4   389    12     4   135     0      45  static
  5417     4   389    19     4   135     0     111  ByteBuffer
  5418     4   389    30     4   135     0     111  wrap
  5419     4   389    34     4   135     0      59  (
  5420     4   389    35     4   135     0       9  byte
  5421     4   389    39     4   135     0      61  [
  5422     4   389    40     4   135     0      62  ]
  5423     4   389    42     4   135     0     111  array
  5424     4   389    47     4   135     0      60  )
  5425     4   389    49     4   135     0      63  {
  5426     4   390     9     4   135     0      19  return
  5427     4   390    16     4   135     0     111  wrap
  5428     4   390    20     4   135     0      59  (
  5429     4   390    21     4   135     0     111  array
  5430     4   390    26     4   135     0      66  ,
  5431     4   390    28     4   135     0     112  0
  5432     4   390    29     4   135     0      66  ,
  5433     4   390    31     4   135     0     111  array.length
  5434     4   390    43     4   135     0      60  )
  5435     4   390    44     4   135     0     102  ;
  5436     4   391     5     4   135     0      64  }
  5437     4   391     5     4   135     0     410  ENDMETHOD
  5438     4   503     5     4    -1     1      10  public
  5439     4   503    12     4    -1     1       7  abstract
  5440     4   503    21     4    -1     1     111  ByteBuffer
  5441     4   503    32     4    -1     1     111  slice
  5442     4   503    37     4    -1     1      59  (
  5443     4   503    38     4    -1     1      60  )
  5444     4   503    39     4    -1     1     102  ;
  5445     4   520     5     4    -1     1      10  public
  5446     4   520    12     4    -1     1       7  abstract
  5447     4   520    21     4    -1     1     111  ByteBuffer
  5448     4   520    32     4    -1     1     111  duplicate
  5449     4   520    41     4    -1     1      59  (
  5450     4   520    42     4    -1     1      60  )
  5451     4   520    43     4    -1     1     102  ;
  5452     4   540     5     4    -1     1      10  public
  5453     4   540    12     4    -1     1       7  abstract
  5454     4   540    21     4    -1     1     111  ByteBuffer
  5455     4   540    32     4    -1     1     111  asReadOnlyBuffer
  5456     4   540    48     4    -1     1      59  (
  5457     4   540    49     4    -1     1      60  )
  5458     4   540    50     4    -1     1     102  ;
  5459     4   554     5     4    -1     0      10  public
  5460     4   554    12     4    -1     0       7  abstract
  5461     4   554    21     4    -1     0       9  byte
  5462     4   554    26     4    -1     0     111  get
  5463     4   554    29     4    -1     0      59  (
  5464     4   554    30     4    -1     0      60  )
  5465     4   554    31     4    -1     0     102  ;
  5466     4   573     5     4    -1     0      10  public
  5467     4   573    12     4    -1     0       7  abstract
  5468     4   573    21     4    -1     0     111  ByteBuffer
  5469     4   573    32     4    -1     0     111  put
  5470     4   573    35     4    -1     0      59  (
  5471     4   573    36     4    -1     0       9  byte
  5472     4   573    41     4    -1     0     111  b
  5473     4   573    42     4    -1     0      60  )
  5474     4   573    43     4    -1     0     102  ;
  5475     4   588     5     4    -1     0      10  public
  5476     4   588    12     4    -1     0       7  abstract
  5477     4   588    21     4    -1     0       9  byte
  5478     4   588    26     4    -1     0     111  get
  5479     4   588    29     4    -1     0      59  (
  5480     4   588    30     4    -1     0      36  int
  5481     4   588    34     4    -1     0     111  index
  5482     4   588    39     4    -1     0      60  )
  5483     4   588    40     4    -1     0     102  ;
  5484     4   611     5     4    -1     0      10  public
  5485     4   611    12     4    -1     0       7  abstract
  5486     4   611    21     4    -1     0     111  ByteBuffer
  5487     4   611    32     4    -1     0     111  put
  5488     4   611    35     4    -1     0      59  (
  5489     4   611    36     4    -1     0      36  int
  5490     4   611    40     4    -1     0     111  index
  5491     4   611    45     4    -1     0      66  ,
  5492     4   611    47     4    -1     0       9  byte
  5493     4   611    52     4    -1     0     111  b
  5494     4   611    53     4    -1     0      60  )
  5495     4   611    54     4    -1     0     102  ;
  5496     4   611    54     4   136     0     411  STARTMETHOD
  5497     4   665     5     4   136     0      10  public
  5498     4   665    12     4   136     0     111  ByteBuffer
  5499     4   665    23     4   136     0     111  get
  5500     4   665    26     4   136     0      59  (
  5501     4   665    27     4   136     0       9  byte
  5502     4   665    31     4   136     0      61  [
  5503     4   665    32     4   136     0      62  ]
  5504     4   665    34     4   136     0     111  dst
  5505     4   665    37     4   136     0      66  ,
  5506     4   665    39     4   136     0      36  int
  5507     4   665    43     4   136     0     111  offset
  5508     4   665    49     4   136     0      66  ,
  5509     4   665    51     4   136     0      36  int
  5510     4   665    55     4   136     0     111  length
  5511     4   665    61     4   136     0      60  )
  5512     4   665    63     4   136     0      63  {
  5513     4   666     9     4   136     0     111  checkBounds
  5514     4   666    20     4   136     0      59  (
  5515     4   666    21     4   136     0     111  offset
  5516     4   666    27     4   136     0      66  ,
  5517     4   666    29     4   136     0     111  length
  5518     4   666    35     4   136     0      66  ,
  5519     4   666    37     4   136     0     111  dst.length
  5520     4   666    47     4   136     0      60  )
  5521     4   666    48     4   136     0     102  ;
  5522     4   667     9     4   136     0      31  if
  5523     4   667    12     4   136     0      59  (
  5524     4   667    13     4   136     0     111  length
  5525     4   667    20     4   136     0      89  >
  5526     4   667    22     4   136     0     111  remaining
  5527     4   667    31     4   136     0      59  (
  5528     4   667    32     4   136     0      60  )
  5529     4   667    33     4   136     0      60  )
  5530     4   668    13     4   136     0      20  throw
  5531     4   668    19     4   136     0      15  new
  5532     4   668    23     4   136     0     111  BufferUnderflowException
  5533     4   668    47     4   136     0      59  (
  5534     4   668    48     4   136     0      60  )
  5535     4   668    49     4   136     0     102  ;
  5536     4   669     9     4   136     0      36  int
  5537     4   669    13     4   136     0     111  end
  5538     4   669    17     4   136     0      67  =
  5539     4   669    19     4   136     0     111  offset
  5540     4   669    26     4   136     0      74  +
  5541     4   669    28     4   136     0     111  length
  5542     4   669    34     4   136     0     102  ;
  5543     4   670     9     4   136     0      37  for
  5544     4   670    13     4   136     0      59  (
  5545     4   670    14     4   136     0      36  int
  5546     4   670    18     4   136     0     111  i
  5547     4   670    20     4   136     0      67  =
  5548     4   670    22     4   136     0     111  offset
  5549     4   670    28     4   136     0     102  ;
  5550     4   670    30     4   136     0     111  i
  5551     4   670    32     4   136     0      93  <
  5552     4   670    34     4   136     0     111  end
  5553     4   670    37     4   136     0     102  ;
  5554     4   670    39     4   136     0     111  i
  5555     4   670    40     4   136     0      76  ++
  5556     4   670    42     4   136     0      60  )
  5557     4   671    13     4   136     0     111  dst
  5558     4   671    16     4   136     0      61  [
  5559     4   671    17     4   136     0     111  i
  5560     4   671    18     4   136     0      62  ]
  5561     4   671    20     4   136     0      67  =
  5562     4   671    22     4   136     0     111  get
  5563     4   671    25     4   136     0      59  (
  5564     4   671    26     4   136     0      60  )
  5565     4   671    27     4   136     0     102  ;
  5566     4   672     9     4   136     0      19  return
  5567     4   672    16     4   136     0      44  this
  5568     4   672    20     4   136     0     102  ;
  5569     4   673     5     4   136     0      64  }
  5570     4   673     5     4   136     0     412  ENDMETHOD
  5571     4   673     5     4   137     0     413  STARTMETHOD
  5572     4   691     5     4   137     0      10  public
  5573     4   691    12     4   137     0     111  ByteBuffer
  5574     4   691    23     4   137     0     111  get
  5575     4   691    26     4   137     0      59  (
  5576     4   691    27     4   137     0       9  byte
  5577     4   691    31     4   137     0      61  [
  5578     4   691    32     4   137     0      62  ]
  5579     4   691    34     4   137     0     111  dst
  5580     4   691    37     4   137     0      60  )
  5581     4   691    39     4   137     0      63  {
  5582     4   692     9     4   137     0      19  return
  5583     4   692    16     4   137     0     111  get
  5584     4   692    19     4   137     0      59  (
  5585     4   692    20     4   137     0     111  dst
  5586     4   692    23     4   137     0      66  ,
  5587     4   692    25     4   137     0     112  0
  5588     4   692    26     4   137     0      66  ,
  5589     4   692    28     4   137     0     111  dst.length
  5590     4   692    38     4   137     0      60  )
  5591     4   692    39     4   137     0     102  ;
  5592     4   693     5     4   137     0      64  }
  5593     4   693     5     4   137     0     414  ENDMETHOD
  5594     4   693     5     4   138     0     415  STARTMETHOD
  5595     4   739     5     4   138     0      10  public
  5596     4   739    12     4   138     0     111  ByteBuffer
  5597     4   739    23     4   138     0     111  put
  5598     4   739    26     4   138     0      59  (
  5599     4   739    27     4   138     0     111  ByteBuffer
  5600     4   739    38     4   138     0     111  src
  5601     4   739    41     4   138     0      60  )
  5602     4   739    43     4   138     0      63  {
  5603     4   740     9     4   138     0      31  if
  5604     4   740    12     4   138     0      59  (
  5605     4   740    13     4   138     0     111  src
  5606     4   740    17     4   138     0      68  ==
  5607     4   740    20     4   138     0      44  this
  5608     4   740    24     4   138     0      60  )
  5609     4   741    13     4   138     0      20  throw
  5610     4   741    19     4   138     0      15  new
  5611     4   741    23     4   138     0     111  IllegalArgumentException
  5612     4   741    47     4   138     0      59  (
  5613     4   741    48     4   138     0      60  )
  5614     4   741    49     4   138     0     102  ;
  5615     4   742     9     4   138     0      36  int
  5616     4   742    13     4   138     0     111  n
  5617     4   742    15     4   138     0      67  =
  5618     4   742    17     4   138     0     111  src.remaining
  5619     4   742    30     4   138     0      59  (
  5620     4   742    31     4   138     0      60  )
  5621     4   742    32     4   138     0     102  ;
  5622     4   743     9     4   138     0      31  if
  5623     4   743    12     4   138     0      59  (
  5624     4   743    13     4   138     0     111  n
  5625     4   743    15     4   138     0      89  >
  5626     4   743    17     4   138     0     111  remaining
  5627     4   743    26     4   138     0      59  (
  5628     4   743    27     4   138     0      60  )
  5629     4   743    28     4   138     0      60  )
  5630     4   744    13     4   138     0      20  throw
  5631     4   744    19     4   138     0      15  new
  5632     4   744    23     4   138     0     111  BufferOverflowException
  5633     4   744    46     4   138     0      59  (
  5634     4   744    47     4   138     0      60  )
  5635     4   744    48     4   138     0     102  ;
  5636     4   745     9     4   138     0      37  for
  5637     4   745    13     4   138     0      59  (
  5638     4   745    14     4   138     0      36  int
  5639     4   745    18     4   138     0     111  i
  5640     4   745    20     4   138     0      67  =
  5641     4   745    22     4   138     0     112  0
  5642     4   745    23     4   138     0     102  ;
  5643     4   745    25     4   138     0     111  i
  5644     4   745    27     4   138     0      93  <
  5645     4   745    29     4   138     0     111  n
  5646     4   745    30     4   138     0     102  ;
  5647     4   745    32     4   138     0     111  i
  5648     4   745    33     4   138     0      76  ++
  5649     4   745    35     4   138     0      60  )
  5650     4   746    13     4   138     0     111  put
  5651     4   746    16     4   138     0      59  (
  5652     4   746    17     4   138     0     111  src.get
  5653     4   746    24     4   138     0      59  (
  5654     4   746    25     4   138     0      60  )
  5655     4   746    26     4   138     0      60  )
  5656     4   746    27     4   138     0     102  ;
  5657     4   747     9     4   138     0      19  return
  5658     4   747    16     4   138     0      44  this
  5659     4   747    20     4   138     0     102  ;
  5660     4   748     5     4   138     0      64  }
  5661     4   748     5     4   138     0     416  ENDMETHOD
  5662     4   748     5     4   139     0     417  STARTMETHOD
  5663     4   800     5     4   139     0      10  public
  5664     4   800    12     4   139     0     111  ByteBuffer
  5665     4   800    23     4   139     0     111  put
  5666     4   800    26     4   139     0      59  (
  5667     4   800    27     4   139     0       9  byte
  5668     4   800    31     4   139     0      61  [
  5669     4   800    32     4   139     0      62  ]
  5670     4   800    34     4   139     0     111  src
  5671     4   800    37     4   139     0      66  ,
  5672     4   800    39     4   139     0      36  int
  5673     4   800    43     4   139     0     111  offset
  5674     4   800    49     4   139     0      66  ,
  5675     4   800    51     4   139     0      36  int
  5676     4   800    55     4   139     0     111  length
  5677     4   800    61     4   139     0      60  )
  5678     4   800    63     4   139     0      63  {
  5679     4   801     9     4   139     0     111  checkBounds
  5680     4   801    20     4   139     0      59  (
  5681     4   801    21     4   139     0     111  offset
  5682     4   801    27     4   139     0      66  ,
  5683     4   801    29     4   139     0     111  length
  5684     4   801    35     4   139     0      66  ,
  5685     4   801    37     4   139     0     111  src.length
  5686     4   801    47     4   139     0      60  )
  5687     4   801    48     4   139     0     102  ;
  5688     4   802     9     4   139     0      31  if
  5689     4   802    12     4   139     0      59  (
  5690     4   802    13     4   139     0     111  length
  5691     4   802    20     4   139     0      89  >
  5692     4   802    22     4   139     0     111  remaining
  5693     4   802    31     4   139     0      59  (
  5694     4   802    32     4   139     0      60  )
  5695     4   802    33     4   139     0      60  )
  5696     4   803    13     4   139     0      20  throw
  5697     4   803    19     4   139     0      15  new
  5698     4   803    23     4   139     0     111  BufferOverflowException
  5699     4   803    46     4   139     0      59  (
  5700     4   803    47     4   139     0      60  )
  5701     4   803    48     4   139     0     102  ;
  5702     4   804     9     4   139     0      36  int
  5703     4   804    13     4   139     0     111  end
  5704     4   804    17     4   139     0      67  =
  5705     4   804    19     4   139     0     111  offset
  5706     4   804    26     4   139     0      74  +
  5707     4   804    28     4   139     0     111  length
  5708     4   804    34     4   139     0     102  ;
  5709     4   805     9     4   139     0      37  for
  5710     4   805    13     4   139     0      59  (
  5711     4   805    14     4   139     0      36  int
  5712     4   805    18     4   139     0     111  i
  5713     4   805    20     4   139     0      67  =
  5714     4   805    22     4   139     0     111  offset
  5715     4   805    28     4   139     0     102  ;
  5716     4   805    30     4   139     0     111  i
  5717     4   805    32     4   139     0      93  <
  5718     4   805    34     4   139     0     111  end
  5719     4   805    37     4   139     0     102  ;
  5720     4   805    39     4   139     0     111  i
  5721     4   805    40     4   139     0      76  ++
  5722     4   805    42     4   139     0      60  )
  5723     4   806    13     4   139     0     111  this.put
  5724     4   806    21     4   139     0      59  (
  5725     4   806    22     4   139     0     111  src
  5726     4   806    25     4   139     0      61  [
  5727     4   806    26     4   139     0     111  i
  5728     4   806    27     4   139     0      62  ]
  5729     4   806    28     4   139     0      60  )
  5730     4   806    29     4   139     0     102  ;
  5731     4   807     9     4   139     0      19  return
  5732     4   807    16     4   139     0      44  this
  5733     4   807    20     4   139     0     102  ;
  5734     4   808     5     4   139     0      64  }
  5735     4   808     5     4   139     0     418  ENDMETHOD
  5736     4   808     5     4   140     0     419  STARTMETHOD
  5737     4   829     5     4   140     0      10  public
  5738     4   829    12     4   140     0       6  final
  5739     4   829    18     4   140     0     111  ByteBuffer
  5740     4   829    29     4   140     0     111  put
  5741     4   829    32     4   140     0      59  (
  5742     4   829    33     4   140     0       9  byte
  5743     4   829    37     4   140     0      61  [
  5744     4   829    38     4   140     0      62  ]
  5745     4   829    40     4   140     0     111  src
  5746     4   829    43     4   140     0      60  )
  5747     4   829    45     4   140     0      63  {
  5748     4   830     9     4   140     0      19  return
  5749     4   830    16     4   140     0     111  put
  5750     4   830    19     4   140     0      59  (
  5751     4   830    20     4   140     0     111  src
  5752     4   830    23     4   140     0      66  ,
  5753     4   830    25     4   140     0     112  0
  5754     4   830    26     4   140     0      66  ,
  5755     4   830    28     4   140     0     111  src.length
  5756     4   830    38     4   140     0      60  )
  5757     4   830    39     4   140     0     102  ;
  5758     4   831     5     4   140     0      64  }
  5759     4   831     5     4   140     0     420  ENDMETHOD
  5760     4   831     5     4   141     0     421  STARTMETHOD
  5761     4   932     5     4   141     0      10  public
  5762     4   932    12     4   141     0       6  final
  5763     4   932    18     4   141     0      39  boolean
  5764     4   932    26     4   141     0     111  hasArray
  5765     4   932    34     4   141     0      59  (
  5766     4   932    35     4   141     0      60  )
  5767     4   932    37     4   141     0      63  {
  5768     4   933     9     4   141     0      19  return
  5769     4   933    16     4   141     0      59  (
  5770     4   933    17     4   141     0     111  hb
  5771     4   933    20     4   141     0      71  !=
  5772     4   933    23     4   141     0      21  null
  5773     4   933    27     4   141     0      60  )
  5774     4   933    29     4   141     0     101  &&
  5775     4   933    32     4   141     0      69  !
  5776     4   933    33     4   141     0     111  isReadOnly
  5777     4   933    43     4   141     0     102  ;
  5778     4   934     5     4   141     0      64  }
  5779     4   934     5     4   141     0     422  ENDMETHOD
  5780     4   934     5     4   142     0     423  STARTMETHOD
  5781     4   955     5     4   142     0      10  public
  5782     4   955    12     4   142     0       6  final
  5783     4   955    18     4   142     0       9  byte
  5784     4   955    22     4   142     0      61  [
  5785     4   955    23     4   142     0      62  ]
  5786     4   955    25     4   142     0     111  array
  5787     4   955    30     4   142     0      59  (
  5788     4   955    31     4   142     0      60  )
  5789     4   955    33     4   142     0      63  {
  5790     4   956     9     4   142     0      31  if
  5791     4   956    12     4   142     0      59  (
  5792     4   956    13     4   142     0     111  hb
  5793     4   956    16     4   142     0      68  ==
  5794     4   956    19     4   142     0      21  null
  5795     4   956    23     4   142     0      60  )
  5796     4   957    13     4   142     0      20  throw
  5797     4   957    19     4   142     0      15  new
  5798     4   957    23     4   142     0     111  UnsupportedOperationException
  5799     4   957    52     4   142     0      59  (
  5800     4   957    53     4   142     0      60  )
  5801     4   957    54     4   142     0     102  ;
  5802     4   958     9     4   142     0      31  if
  5803     4   958    12     4   142     0      59  (
  5804     4   958    13     4   142     0     111  isReadOnly
  5805     4   958    23     4   142     0      60  )
  5806     4   959    13     4   142     0      20  throw
  5807     4   959    19     4   142     0      15  new
  5808     4   959    23     4   142     0     111  ReadOnlyBufferException
  5809     4   959    46     4   142     0      59  (
  5810     4   959    47     4   142     0      60  )
  5811     4   959    48     4   142     0     102  ;
  5812     4   960     9     4   142     0      19  return
  5813     4   960    16     4   142     0     111  hb
  5814     4   960    18     4   142     0     102  ;
  5815     4   961     5     4   142     0      64  }
  5816     4   961     5     4   142     0     424  ENDMETHOD
  5817     4   961     5     4   143     0     425  STARTMETHOD
  5818     4   983     5     4   143     0      10  public
  5819     4   983    12     4   143     0       6  final
  5820     4   983    18     4   143     0      36  int
  5821     4   983    22     4   143     0     111  arrayOffset
  5822     4   983    33     4   143     0      59  (
  5823     4   983    34     4   143     0      60  )
  5824     4   983    36     4   143     0      63  {
  5825     4   984     9     4   143     0      31  if
  5826     4   984    12     4   143     0      59  (
  5827     4   984    13     4   143     0     111  hb
  5828     4   984    16     4   143     0      68  ==
  5829     4   984    19     4   143     0      21  null
  5830     4   984    23     4   143     0      60  )
  5831     4   985    13     4   143     0      20  throw
  5832     4   985    19     4   143     0      15  new
  5833     4   985    23     4   143     0     111  UnsupportedOperationException
  5834     4   985    52     4   143     0      59  (
  5835     4   985    53     4   143     0      60  )
  5836     4   985    54     4   143     0     102  ;
  5837     4   986     9     4   143     0      31  if
  5838     4   986    12     4   143     0      59  (
  5839     4   986    13     4   143     0     111  isReadOnly
  5840     4   986    23     4   143     0      60  )
  5841     4   987    13     4   143     0      20  throw
  5842     4   987    19     4   143     0      15  new
  5843     4   987    23     4   143     0     111  ReadOnlyBufferException
  5844     4   987    46     4   143     0      59  (
  5845     4   987    47     4   143     0      60  )
  5846     4   987    48     4   143     0     102  ;
  5847     4   988     9     4   143     0      19  return
  5848     4   988    16     4   143     0     111  offset
  5849     4   988    22     4   143     0     102  ;
  5850     4   989     5     4   143     0      64  }
  5851     4   989     5     4   143     0     426  ENDMETHOD
  5852     4  1030     5     4    -1     0      10  public
  5853     4  1030    12     4    -1     0       7  abstract
  5854     4  1030    21     4    -1     0     111  ByteBuffer
  5855     4  1030    32     4    -1     0     111  compact
  5856     4  1030    39     4    -1     0      59  (
  5857     4  1030    40     4    -1     0      60  )
  5858     4  1030    41     4    -1     0     102  ;
  5859     4  1037     5     4    -1     0      10  public
  5860     4  1037    12     4    -1     0       7  abstract
  5861     4  1037    21     4    -1     0      39  boolean
  5862     4  1037    29     4    -1     0     111  isDirect
  5863     4  1037    37     4    -1     0      59  (
  5864     4  1037    38     4    -1     0      60  )
  5865     4  1037    39     4    -1     0     102  ;
  5866     4  1037    39     4   144     0     427  STARTMETHOD
  5867     4  1046     5     4   144     0      10  public
  5868     4  1046    12     4   144     0     111  String
  5869     4  1046    19     4   144     0     111  toString
  5870     4  1046    27     4   144     0      59  (
  5871     4  1046    28     4   144     0      60  )
  5872     4  1046    30     4   144     0      63  {
  5873     4  1047     9     4   144     0     111  StringBuffer
  5874     4  1047    22     4   144     0     111  sb
  5875     4  1047    25     4   144     0      67  =
  5876     4  1047    27     4   144     0      15  new
  5877     4  1047    31     4   144     0     111  StringBuffer
  5878     4  1047    43     4   144     0      59  (
  5879     4  1047    44     4   144     0      60  )
  5880     4  1047    45     4   144     0     102  ;
  5881     4  1048     9     4   144     0     111  sb.append
  5882     4  1048    18     4   144     0      59  (
  5883     4  1048    19     4   144     0     111  getClass
  5884     4  1048    27     4   144     0      59  (
  5885     4  1048    28     4   144     0      60  )
  5886     4  1048    29     4   144     0      54  .
  5887     4  1048    30     4   144     0     111  getName
  5888     4  1048    37     4   144     0      59  (
  5889     4  1048    38     4   144     0      60  )
  5890     4  1048    39     4   144     0      60  )
  5891     4  1048    40     4   144     0     102  ;
  5892     4  1049     9     4   144     0     111  sb.append
  5893     4  1049    18     4   144     0      59  (
  5894     4  1049    19     4   144     0     107  "[pos="
  5895     4  1049    26     4   144     0      60  )
  5896     4  1049    27     4   144     0     102  ;
  5897     4  1050     9     4   144     0     111  sb.append
  5898     4  1050    18     4   144     0      59  (
  5899     4  1050    19     4   144     0     111  position
  5900     4  1050    27     4   144     0      59  (
  5901     4  1050    28     4   144     0      60  )
  5902     4  1050    29     4   144     0      60  )
  5903     4  1050    30     4   144     0     102  ;
  5904     4  1051     9     4   144     0     111  sb.append
  5905     4  1051    18     4   144     0      59  (
  5906     4  1051    19     4   144     0     107  " lim="
  5907     4  1051    26     4   144     0      60  )
  5908     4  1051    27     4   144     0     102  ;
  5909     4  1052     9     4   144     0     111  sb.append
  5910     4  1052    18     4   144     0      59  (
  5911     4  1052    19     4   144     0     111  limit
  5912     4  1052    24     4   144     0      59  (
  5913     4  1052    25     4   144     0      60  )
  5914     4  1052    26     4   144     0      60  )
  5915     4  1052    27     4   144     0     102  ;
  5916     4  1053     9     4   144     0     111  sb.append
  5917     4  1053    18     4   144     0      59  (
  5918     4  1053    19     4   144     0     107  " cap="
  5919     4  1053    26     4   144     0      60  )
  5920     4  1053    27     4   144     0     102  ;
  5921     4  1054     9     4   144     0     111  sb.append
  5922     4  1054    18     4   144     0      59  (
  5923     4  1054    19     4   144     0     111  capacity
  5924     4  1054    27     4   144     0      59  (
  5925     4  1054    28     4   144     0      60  )
  5926     4  1054    29     4   144     0      60  )
  5927     4  1054    30     4   144     0     102  ;
  5928     4  1055     9     4   144     0     111  sb.append
  5929     4  1055    18     4   144     0      59  (
  5930     4  1055    19     4   144     0     107  "]"
  5931     4  1055    22     4   144     0      60  )
  5932     4  1055    23     4   144     0     102  ;
  5933     4  1056     9     4   144     0      19  return
  5934     4  1056    16     4   144     0     111  sb.toString
  5935     4  1056    27     4   144     0      59  (
  5936     4  1056    28     4   144     0      60  )
  5937     4  1056    29     4   144     0     102  ;
  5938     4  1057     5     4   144     0      64  }
  5939     4  1057     5     4   144     0     428  ENDMETHOD
  5940     4  1057     5     4   145     0     429  STARTMETHOD
  5941     4  1077     5     4   145     0      10  public
  5942     4  1077    12     4   145     0      36  int
  5943     4  1077    16     4   145     0     111  hashCode
  5944     4  1077    24     4   145     0      59  (
  5945     4  1077    25     4   145     0      60  )
  5946     4  1077    27     4   145     0      63  {
  5947     4  1078     9     4   145     0      36  int
  5948     4  1078    13     4   145     0     111  h
  5949     4  1078    15     4   145     0      67  =
  5950     4  1078    17     4   145     0     112  1
  5951     4  1078    18     4   145     0     102  ;
  5952     4  1079     9     4   145     0      36  int
  5953     4  1079    13     4   145     0     111  p
  5954     4  1079    15     4   145     0      67  =
  5955     4  1079    17     4   145     0     111  position
  5956     4  1079    25     4   145     0      59  (
  5957     4  1079    26     4   145     0      60  )
  5958     4  1079    27     4   145     0     102  ;
  5959     4  1080     9     4   145     0      37  for
  5960     4  1080    13     4   145     0      59  (
  5961     4  1080    14     4   145     0      36  int
  5962     4  1080    18     4   145     0     111  i
  5963     4  1080    20     4   145     0      67  =
  5964     4  1080    22     4   145     0     111  limit
  5965     4  1080    27     4   145     0      59  (
  5966     4  1080    28     4   145     0      60  )
  5967     4  1080    30     4   145     0      77  -
  5968     4  1080    32     4   145     0     112  1
  5969     4  1080    33     4   145     0     102  ;
  5970     4  1080    35     4   145     0     111  i
  5971     4  1080    37     4   145     0      88  >=
  5972     4  1080    40     4   145     0     111  p
  5973     4  1080    41     4   145     0     102  ;
  5974     4  1080    43     4   145     0     111  i
  5975     4  1080    44     4   145     0      79  --
  5976     4  1080    46     4   145     0      60  )
  5977     4  1081    13     4   145     0     111  h
  5978     4  1081    15     4   145     0      67  =
  5979     4  1081    17     4   145     0     112  31
  5980     4  1081    20     4   145     0      80  *
  5981     4  1081    22     4   145     0     111  h
  5982     4  1081    24     4   145     0      74  +
  5983     4  1081    26     4   145     0      59  (
  5984     4  1081    27     4   145     0      36  int
  5985     4  1081    30     4   145     0      60  )
  5986     4  1081    31     4   145     0     111  get
  5987     4  1081    34     4   145     0      59  (
  5988     4  1081    35     4   145     0     111  i
  5989     4  1081    36     4   145     0      60  )
  5990     4  1081    37     4   145     0     102  ;
  5991     4  1082     9     4   145     0      19  return
  5992     4  1082    16     4   145     0     111  h
  5993     4  1082    17     4   145     0     102  ;
  5994     4  1083     5     4   145     0      64  }
  5995     4  1083     5     4   145     0     430  ENDMETHOD
  5996     4  1083     5     4   146     0     431  STARTMETHOD
  5997     4  1110     5     4   146     0      10  public
  5998     4  1110    12     4   146     0      39  boolean
  5999     4  1110    20     4   146     0     111  equals
  6000     4  1110    26     4   146     0      59  (
  6001     4  1110    27     4   146     0     111  Object
  6002     4  1110    34     4   146     0     111  ob
  6003     4  1110    36     4   146     0      60  )
  6004     4  1110    38     4   146     0      63  {
  6005     4  1111     9     4   146     0      31  if
  6006     4  1111    12     4   146     0      59  (
  6007     4  1111    13     4   146     0      44  this
  6008     4  1111    18     4   146     0      68  ==
  6009     4  1111    21     4   146     0     111  ob
  6010     4  1111    23     4   146     0      60  )
  6011     4  1112    13     4   146     0      19  return
  6012     4  1112    20     4   146     0      52  true
  6013     4  1112    24     4   146     0     102  ;
  6014     4  1113     9     4   146     0      31  if
  6015     4  1113    12     4   146     0      59  (
  6016     4  1113    13     4   146     0      69  !
  6017     4  1113    14     4   146     0      59  (
  6018     4  1113    15     4   146     0     111  ob
  6019     4  1113    18     4   146     0      16  instanceof
  6020     4  1113    29     4   146     0     111  ByteBuffer
  6021     4  1113    39     4   146     0      60  )
  6022     4  1113    40     4   146     0      60  )
  6023     4  1114    13     4   146     0      19  return
  6024     4  1114    20     4   146     0      43  false
  6025     4  1114    25     4   146     0     102  ;
  6026     4  1115     9     4   146     0     111  ByteBuffer
  6027     4  1115    20     4   146     0     111  that
  6028     4  1115    25     4   146     0      67  =
  6029     4  1115    27     4   146     0      59  (
  6030     4  1115    28     4   146     0     111  ByteBuffer
  6031     4  1115    38     4   146     0      60  )
  6032     4  1115    39     4   146     0     111  ob
  6033     4  1115    41     4   146     0     102  ;
  6034     4  1116     9     4   146     0      31  if
  6035     4  1116    12     4   146     0      59  (
  6036     4  1116    13     4   146     0     111  this.remaining
  6037     4  1116    27     4   146     0      59  (
  6038     4  1116    28     4   146     0      60  )
  6039     4  1116    30     4   146     0      71  !=
  6040     4  1116    33     4   146     0     111  that.remaining
  6041     4  1116    47     4   146     0      59  (
  6042     4  1116    48     4   146     0      60  )
  6043     4  1116    49     4   146     0      60  )
  6044     4  1117    13     4   146     0      19  return
  6045     4  1117    20     4   146     0      43  false
  6046     4  1117    25     4   146     0     102  ;
  6047     4  1118     9     4   146     0      36  int
  6048     4  1118    13     4   146     0     111  p
  6049     4  1118    15     4   146     0      67  =
  6050     4  1118    17     4   146     0     111  this.position
  6051     4  1118    30     4   146     0      59  (
  6052     4  1118    31     4   146     0      60  )
  6053     4  1118    32     4   146     0     102  ;
  6054     4  1119     9     4   146     0      37  for
  6055     4  1119    13     4   146     0      59  (
  6056     4  1119    14     4   146     0      36  int
  6057     4  1119    18     4   146     0     111  i
  6058     4  1119    20     4   146     0      67  =
  6059     4  1119    22     4   146     0     111  this.limit
  6060     4  1119    32     4   146     0      59  (
  6061     4  1119    33     4   146     0      60  )
  6062     4  1119    35     4   146     0      77  -
  6063     4  1119    37     4   146     0     112  1
  6064     4  1119    38     4   146     0      66  ,
  6065     4  1119    40     4   146     0     111  j
  6066     4  1119    42     4   146     0      67  =
  6067     4  1119    44     4   146     0     111  that.limit
  6068     4  1119    54     4   146     0      59  (
  6069     4  1119    55     4   146     0      60  )
  6070     4  1119    57     4   146     0      77  -
  6071     4  1119    59     4   146     0     112  1
  6072     4  1119    60     4   146     0     102  ;
  6073     4  1119    62     4   146     0     111  i
  6074     4  1119    64     4   146     0      88  >=
  6075     4  1119    67     4   146     0     111  p
  6076     4  1119    68     4   146     0     102  ;
  6077     4  1119    70     4   146     0     111  i
  6078     4  1119    71     4   146     0      79  --
  6079     4  1119    73     4   146     0      66  ,
  6080     4  1119    75     4   146     0     111  j
  6081     4  1119    76     4   146     0      79  --
  6082     4  1119    78     4   146     0      60  )
  6083     4  1119    80     4   146     0      63  {
  6084     4  1120    13     4   146     1       9  byte
  6085     4  1120    18     4   146     1     111  v1
  6086     4  1120    21     4   146     1      67  =
  6087     4  1120    23     4   146     1     111  this.get
  6088     4  1120    31     4   146     1      59  (
  6089     4  1120    32     4   146     1     111  i
  6090     4  1120    33     4   146     1      60  )
  6091     4  1120    34     4   146     1     102  ;
  6092     4  1121    13     4   146     1       9  byte
  6093     4  1121    18     4   146     1     111  v2
  6094     4  1121    21     4   146     1      67  =
  6095     4  1121    23     4   146     1     111  that.get
  6096     4  1121    31     4   146     1      59  (
  6097     4  1121    32     4   146     1     111  j
  6098     4  1121    33     4   146     1      60  )
  6099     4  1121    34     4   146     1     102  ;
  6100     4  1122    13     4   146     0      31  if
  6101     4  1122    16     4   146     0      59  (
  6102     4  1122    17     4   146     0     111  v1
  6103     4  1122    20     4   146     0      71  !=
  6104     4  1122    23     4   146     0     111  v2
  6105     4  1122    25     4   146     0      60  )
  6106     4  1122    27     4   146     0      63  {
  6107     4  1123    17     4   146     0      31  if
  6108     4  1123    20     4   146     0      59  (
  6109     4  1123    21     4   146     0      59  (
  6110     4  1123    22     4   146     0     111  v1
  6111     4  1123    25     4   146     0      71  !=
  6112     4  1123    28     4   146     0     111  v1
  6113     4  1123    30     4   146     0      60  )
  6114     4  1123    32     4   146     0     101  &&
  6115     4  1123    35     4   146     0      59  (
  6116     4  1123    36     4   146     0     111  v2
  6117     4  1123    39     4   146     0      71  !=
  6118     4  1123    42     4   146     0     111  v2
  6119     4  1123    44     4   146     0      60  )
  6120     4  1123    45     4   146     0      60  )
  6121     4  1124    21     4   146     0      46  continue
  6122     4  1124    29     4   146     0     102  ;
  6123     4  1125    17     4   146     0      19  return
  6124     4  1125    24     4   146     0      43  false
  6125     4  1125    29     4   146     0     102  ;
  6126     4  1126    13     4   146     1      64  }
  6127     4  1127     9     4   146     1      64  }
  6128     4  1128     9     4   146     0      19  return
  6129     4  1128    16     4   146     0      52  true
  6130     4  1128    20     4   146     0     102  ;
  6131     4  1129     5     4   146     0      64  }
  6132     4  1129     5     4   146     0     432  ENDMETHOD
  6133     4  1129     5     4   147     0     433  STARTMETHOD
  6134     4  1143     5     4   147     0      10  public
  6135     4  1143    12     4   147     0      36  int
  6136     4  1143    16     4   147     0     111  compareTo
  6137     4  1143    25     4   147     0      59  (
  6138     4  1143    26     4   147     0     111  ByteBuffer
  6139     4  1143    37     4   147     0     111  that
  6140     4  1143    41     4   147     0      60  )
  6141     4  1143    43     4   147     0      63  {
  6142     4  1144     9     4   147     0      36  int
  6143     4  1144    13     4   147     0     111  n
  6144     4  1144    15     4   147     0      67  =
  6145     4  1144    17     4   147     0     111  this.position
  6146     4  1144    30     4   147     0      59  (
  6147     4  1144    31     4   147     0      60  )
  6148     4  1144    33     4   147     0      74  +
  6149     4  1144    35     4   147     0     111  Math.min
  6150     4  1144    43     4   147     0      59  (
  6151     4  1144    44     4   147     0     111  this.remaining
  6152     4  1144    58     4   147     0      59  (
  6153     4  1144    59     4   147     0      60  )
  6154     4  1144    60     4   147     0      66  ,
  6155     4  1144    62     4   147     0     111  that.remaining
  6156     4  1144    76     4   147     0      59  (
  6157     4  1144    77     4   147     0      60  )
  6158     4  1144    78     4   147     0      60  )
  6159     4  1144    79     4   147     0     102  ;
  6160     4  1145     9     4   147     0      37  for
  6161     4  1145    13     4   147     0      59  (
  6162     4  1145    14     4   147     0      36  int
  6163     4  1145    18     4   147     0     111  i
  6164     4  1145    20     4   147     0      67  =
  6165     4  1145    22     4   147     0     111  this.position
  6166     4  1145    35     4   147     0      59  (
  6167     4  1145    36     4   147     0      60  )
  6168     4  1145    37     4   147     0      66  ,
  6169     4  1145    39     4   147     0     111  j
  6170     4  1145    41     4   147     0      67  =
  6171     4  1145    43     4   147     0     111  that.position
  6172     4  1145    56     4   147     0      59  (
  6173     4  1145    57     4   147     0      60  )
  6174     4  1145    58     4   147     0     102  ;
  6175     4  1145    60     4   147     0     111  i
  6176     4  1145    62     4   147     0      93  <
  6177     4  1145    64     4   147     0     111  n
  6178     4  1145    65     4   147     0     102  ;
  6179     4  1145    67     4   147     0     111  i
  6180     4  1145    68     4   147     0      76  ++
  6181     4  1145    70     4   147     0      66  ,
  6182     4  1145    72     4   147     0     111  j
  6183     4  1145    73     4   147     0      76  ++
  6184     4  1145    75     4   147     0      60  )
  6185     4  1145    77     4   147     0      63  {
  6186     4  1146    13     4   147     1       9  byte
  6187     4  1146    18     4   147     1     111  v1
  6188     4  1146    21     4   147     1      67  =
  6189     4  1146    23     4   147     1     111  this.get
  6190     4  1146    31     4   147     1      59  (
  6191     4  1146    32     4   147     1     111  i
  6192     4  1146    33     4   147     1      60  )
  6193     4  1146    34     4   147     1     102  ;
  6194     4  1147    13     4   147     1       9  byte
  6195     4  1147    18     4   147     1     111  v2
  6196     4  1147    21     4   147     1      67  =
  6197     4  1147    23     4   147     1     111  that.get
  6198     4  1147    31     4   147     1      59  (
  6199     4  1147    32     4   147     1     111  j
  6200     4  1147    33     4   147     1      60  )
  6201     4  1147    34     4   147     1     102  ;
  6202     4  1148    13     4   147     0      31  if
  6203     4  1148    16     4   147     0      59  (
  6204     4  1148    17     4   147     0     111  v1
  6205     4  1148    20     4   147     0      68  ==
  6206     4  1148    23     4   147     0     111  v2
  6207     4  1148    25     4   147     0      60  )
  6208     4  1149    17     4   147     0      46  continue
  6209     4  1149    25     4   147     0     102  ;
  6210     4  1150    13     4   147     0      31  if
  6211     4  1150    16     4   147     0      59  (
  6212     4  1150    17     4   147     0      59  (
  6213     4  1150    18     4   147     0     111  v1
  6214     4  1150    21     4   147     0      71  !=
  6215     4  1150    24     4   147     0     111  v1
  6216     4  1150    26     4   147     0      60  )
  6217     4  1150    28     4   147     0     101  &&
  6218     4  1150    31     4   147     0      59  (
  6219     4  1150    32     4   147     0     111  v2
  6220     4  1150    35     4   147     0      71  !=
  6221     4  1150    38     4   147     0     111  v2
  6222     4  1150    40     4   147     0      60  )
  6223     4  1150    41     4   147     0      60  )
  6224     4  1151    17     4   147     0      46  continue
  6225     4  1151    25     4   147     0     102  ;
  6226     4  1152    13     4   147     0      31  if
  6227     4  1152    16     4   147     0      59  (
  6228     4  1152    17     4   147     0     111  v1
  6229     4  1152    20     4   147     0      93  <
  6230     4  1152    22     4   147     0     111  v2
  6231     4  1152    24     4   147     0      60  )
  6232     4  1153    17     4   147     0      19  return
  6233     4  1153    24     4   147     0      77  -
  6234     4  1153    25     4   147     0     112  1
  6235     4  1153    26     4   147     0     102  ;
  6236     4  1154    13     4   147     0      19  return
  6237     4  1154    20     4   147     0      74  +
  6238     4  1154    21     4   147     0     112  1
  6239     4  1154    22     4   147     0     102  ;
  6240     4  1155     9     4   147     0      64  }
  6241     4  1156     9     4   147     0      19  return
  6242     4  1156    16     4   147     0     111  this.remaining
  6243     4  1156    30     4   147     0      59  (
  6244     4  1156    31     4   147     0      60  )
  6245     4  1156    33     4   147     0      77  -
  6246     4  1156    35     4   147     0     111  that.remaining
  6247     4  1156    49     4   147     0      59  (
  6248     4  1156    50     4   147     0      60  )
  6249     4  1156    51     4   147     0     102  ;
  6250     4  1157     5     4   147     0      64  }
  6251     4  1157     5     4   147     0     434  ENDMETHOD
  6252     4  1378     5     4    -1     0      39  boolean
  6253     4  1378    13     4    -1     0     111  bigEndian
  6254     4  1379     9     4    -1     0      67  =
  6255     4  1379    11     4    -1     0      52  true
  6256     4  1379    15     4    -1     0     102  ;
  6257     4  1380     5     4    -1     0      39  boolean
  6258     4  1380    13     4    -1     0     111  nativeByteOrder
  6259     4  1381     9     4    -1     0      67  =
  6260     4  1381    11     4    -1     0      59  (
  6261     4  1381    12     4    -1     0     111  Bits.byteOrder
  6262     4  1381    26     4    -1     0      59  (
  6263     4  1381    27     4    -1     0      60  )
  6264     4  1381    29     4    -1     0      68  ==
  6265     4  1381    32     4    -1     0     111  ByteOrder.BIG_ENDIAN
  6266     4  1381    52     4    -1     0      60  )
  6267     4  1381    53     4    -1     0     102  ;
  6268     4  1381    53     4   148     0     435  STARTMETHOD
  6269     4  1393     5     4   148     0      10  public
  6270     4  1393    12     4   148     0       6  final
  6271     4  1393    18     4   148     0     111  ByteOrder
  6272     4  1393    28     4   148     0     111  order
  6273     4  1393    33     4   148     0      59  (
  6274     4  1393    34     4   148     0      60  )
  6275     4  1393    36     4   148     0      63  {
  6276     4  1394     9     4   148     0      19  return
  6277     4  1394    16     4   148     0     111  bigEndian
  6278     4  1394    26     4   148     0      58  ?
  6279     4  1394    28     4   148     0     111  ByteOrder.BIG_ENDIAN
  6280     4  1394    49     4   148     0      65  :
  6281     4  1394    51     4   148     0     111  ByteOrder.LITTLE_ENDIAN
  6282     4  1394    74     4   148     0     102  ;
  6283     4  1395     5     4   148     0      64  }
  6284     4  1395     5     4   148     0     436  ENDMETHOD
  6285     4  1395     5     4   149     0     437  STARTMETHOD
  6286     4  1407     5     4   149     0      10  public
  6287     4  1407    12     4   149     0       6  final
  6288     4  1407    18     4   149     0     111  ByteBuffer
  6289     4  1407    29     4   149     0     111  order
  6290     4  1407    34     4   149     0      59  (
  6291     4  1407    35     4   149     0     111  ByteOrder
  6292     4  1407    45     4   149     0     111  bo
  6293     4  1407    47     4   149     0      60  )
  6294     4  1407    49     4   149     0      63  {
  6295     4  1408     9     4   149     0     111  bigEndian
  6296     4  1408    19     4   149     0      67  =
  6297     4  1408    21     4   149     0      59  (
  6298     4  1408    22     4   149     0     111  bo
  6299     4  1408    25     4   149     0      68  ==
  6300     4  1408    28     4   149     0     111  ByteOrder.BIG_ENDIAN
  6301     4  1408    48     4   149     0      60  )
  6302     4  1408    49     4   149     0     102  ;
  6303     4  1409     9     4   149     0     111  nativeByteOrder
  6304     4  1409    25     4   149     0      67  =
  6305     4  1410    13     4   149     0      59  (
  6306     4  1410    14     4   149     0     111  bigEndian
  6307     4  1410    24     4   149     0      68  ==
  6308     4  1410    27     4   149     0      59  (
  6309     4  1410    28     4   149     0     111  Bits.byteOrder
  6310     4  1410    42     4   149     0      59  (
  6311     4  1410    43     4   149     0      60  )
  6312     4  1410    45     4   149     0      68  ==
  6313     4  1410    48     4   149     0     111  ByteOrder.BIG_ENDIAN
  6314     4  1410    68     4   149     0      60  )
  6315     4  1410    69     4   149     0      60  )
  6316     4  1410    70     4   149     0     102  ;
  6317     4  1411     9     4   149     0      19  return
  6318     4  1411    16     4   149     0      44  this
  6319     4  1411    20     4   149     0     102  ;
  6320     4  1412     5     4   149     0      64  }
  6321     4  1412     5     4   149     0     438  ENDMETHOD
  6322     4  1416     5     4    -1     0       7  abstract
  6323     4  1416    14     4    -1     0       9  byte
  6324     4  1416    19     4    -1     0     111  _get
  6325     4  1416    23     4    -1     0      59  (
  6326     4  1416    24     4    -1     0      36  int
  6327     4  1416    28     4    -1     0     111  i
  6328     4  1416    29     4    -1     0      60  )
  6329     4  1416    30     4    -1     0     102  ;
  6330     4  1417     5     4    -1     0       7  abstract
  6331     4  1417    14     4    -1     0      50  void
  6332     4  1417    19     4    -1     0     111  _put
  6333     4  1417    23     4    -1     0      59  (
  6334     4  1417    24     4    -1     0      36  int
  6335     4  1417    28     4    -1     0     111  i
  6336     4  1417    29     4    -1     0      66  ,
  6337     4  1417    31     4    -1     0       9  byte
  6338     4  1417    36     4    -1     0     111  b
  6339     4  1417    37     4    -1     0      60  )
  6340     4  1417    38     4    -1     0     102  ;
  6341     4  1433     5     4    -1     0      10  public
  6342     4  1433    12     4    -1     0       7  abstract
  6343     4  1433    21     4    -1     0      40  char
  6344     4  1433    26     4    -1     0     111  getChar
  6345     4  1433    33     4    -1     0      59  (
  6346     4  1433    34     4    -1     0      60  )
  6347     4  1433    35     4    -1     0     102  ;
  6348     4  1455     5     4    -1     0      10  public
  6349     4  1455    12     4    -1     0       7  abstract
  6350     4  1455    21     4    -1     0     111  ByteBuffer
  6351     4  1455    32     4    -1     0     111  putChar
  6352     4  1455    39     4    -1     0      59  (
  6353     4  1455    40     4    -1     0      40  char
  6354     4  1455    45     4    -1     0     111  value
  6355     4  1455    50     4    -1     0      60  )
  6356     4  1455    51     4    -1     0     102  ;
  6357     4  1473     5     4    -1     0      10  public
  6358     4  1473    12     4    -1     0       7  abstract
  6359     4  1473    21     4    -1     0      40  char
  6360     4  1473    26     4    -1     0     111  getChar
  6361     4  1473    33     4    -1     0      59  (
  6362     4  1473    34     4    -1     0      36  int
  6363     4  1473    38     4    -1     0     111  index
  6364     4  1473    43     4    -1     0      60  )
  6365     4  1473    44     4    -1     0     102  ;
  6366     4  1498     5     4    -1     0      10  public
  6367     4  1498    12     4    -1     0       7  abstract
  6368     4  1498    21     4    -1     0     111  ByteBuffer
  6369     4  1498    32     4    -1     0     111  putChar
  6370     4  1498    39     4    -1     0      59  (
  6371     4  1498    40     4    -1     0      36  int
  6372     4  1498    44     4    -1     0     111  index
  6373     4  1498    49     4    -1     0      66  ,
  6374     4  1498    51     4    -1     0      40  char
  6375     4  1498    56     4    -1     0     111  value
  6376     4  1498    61     4    -1     0      60  )
  6377     4  1498    62     4    -1     0     102  ;
  6378     4  1516     5     4    -1     0      10  public
  6379     4  1516    12     4    -1     0       7  abstract
  6380     4  1516    21     4    -1     0     111  CharBuffer
  6381     4  1516    32     4    -1     0     111  asCharBuffer
  6382     4  1516    44     4    -1     0      59  (
  6383     4  1516    45     4    -1     0      60  )
  6384     4  1516    46     4    -1     0     102  ;
  6385     4  1532     5     4    -1     0      10  public
  6386     4  1532    12     4    -1     0       7  abstract
  6387     4  1532    21     4    -1     0      12  short
  6388     4  1532    27     4    -1     0     111  getShort
  6389     4  1532    35     4    -1     0      59  (
  6390     4  1532    36     4    -1     0      60  )
  6391     4  1532    37     4    -1     0     102  ;
  6392     4  1554     5     4    -1     0      10  public
  6393     4  1554    12     4    -1     0       7  abstract
  6394     4  1554    21     4    -1     0     111  ByteBuffer
  6395     4  1554    32     4    -1     0     111  putShort
  6396     4  1554    40     4    -1     0      59  (
  6397     4  1554    41     4    -1     0      12  short
  6398     4  1554    47     4    -1     0     111  value
  6399     4  1554    52     4    -1     0      60  )
  6400     4  1554    53     4    -1     0     102  ;
  6401     4  1572     5     4    -1     0      10  public
  6402     4  1572    12     4    -1     0       7  abstract
  6403     4  1572    21     4    -1     0      12  short
  6404     4  1572    27     4    -1     0     111  getShort
  6405     4  1572    35     4    -1     0      59  (
  6406     4  1572    36     4    -1     0      36  int
  6407     4  1572    40     4    -1     0     111  index
  6408     4  1572    45     4    -1     0      60  )
  6409     4  1572    46     4    -1     0     102  ;
  6410     4  1597     5     4    -1     0      10  public
  6411     4  1597    12     4    -1     0       7  abstract
  6412     4  1597    21     4    -1     0     111  ByteBuffer
  6413     4  1597    32     4    -1     0     111  putShort
  6414     4  1597    40     4    -1     0      59  (
  6415     4  1597    41     4    -1     0      36  int
  6416     4  1597    45     4    -1     0     111  index
  6417     4  1597    50     4    -1     0      66  ,
  6418     4  1597    52     4    -1     0      12  short
  6419     4  1597    58     4    -1     0     111  value
  6420     4  1597    63     4    -1     0      60  )
  6421     4  1597    64     4    -1     0     102  ;
  6422     4  1615     5     4    -1     0      10  public
  6423     4  1615    12     4    -1     0       7  abstract
  6424     4  1615    21     4    -1     0     111  ShortBuffer
  6425     4  1615    33     4    -1     0     111  asShortBuffer
  6426     4  1615    46     4    -1     0      59  (
  6427     4  1615    47     4    -1     0      60  )
  6428     4  1615    48     4    -1     0     102  ;
  6429     4  1631     5     4    -1     0      10  public
  6430     4  1631    12     4    -1     0       7  abstract
  6431     4  1631    21     4    -1     0      36  int
  6432     4  1631    25     4    -1     0     111  getInt
  6433     4  1631    31     4    -1     0      59  (
  6434     4  1631    32     4    -1     0      60  )
  6435     4  1631    33     4    -1     0     102  ;
  6436     4  1653     5     4    -1     0      10  public
  6437     4  1653    12     4    -1     0       7  abstract
  6438     4  1653    21     4    -1     0     111  ByteBuffer
  6439     4  1653    32     4    -1     0     111  putInt
  6440     4  1653    38     4    -1     0      59  (
  6441     4  1653    39     4    -1     0      36  int
  6442     4  1653    43     4    -1     0     111  value
  6443     4  1653    48     4    -1     0      60  )
  6444     4  1653    49     4    -1     0     102  ;
  6445     4  1671     5     4    -1     0      10  public
  6446     4  1671    12     4    -1     0       7  abstract
  6447     4  1671    21     4    -1     0      36  int
  6448     4  1671    25     4    -1     0     111  getInt
  6449     4  1671    31     4    -1     0      59  (
  6450     4  1671    32     4    -1     0      36  int
  6451     4  1671    36     4    -1     0     111  index
  6452     4  1671    41     4    -1     0      60  )
  6453     4  1671    42     4    -1     0     102  ;
  6454     4  1696     5     4    -1     0      10  public
  6455     4  1696    12     4    -1     0       7  abstract
  6456     4  1696    21     4    -1     0     111  ByteBuffer
  6457     4  1696    32     4    -1     0     111  putInt
  6458     4  1696    38     4    -1     0      59  (
  6459     4  1696    39     4    -1     0      36  int
  6460     4  1696    43     4    -1     0     111  index
  6461     4  1696    48     4    -1     0      66  ,
  6462     4  1696    50     4    -1     0      36  int
  6463     4  1696    54     4    -1     0     111  value
  6464     4  1696    59     4    -1     0      60  )
  6465     4  1696    60     4    -1     0     102  ;
  6466     4  1714     5     4    -1     0      10  public
  6467     4  1714    12     4    -1     0       7  abstract
  6468     4  1714    21     4    -1     0     111  IntBuffer
  6469     4  1714    31     4    -1     0     111  asIntBuffer
  6470     4  1714    42     4    -1     0      59  (
  6471     4  1714    43     4    -1     0      60  )
  6472     4  1714    44     4    -1     0     102  ;
  6473     4  1730     5     4    -1     0      10  public
  6474     4  1730    12     4    -1     0       7  abstract
  6475     4  1730    21     4    -1     0      53  long
  6476     4  1730    26     4    -1     0     111  getLong
  6477     4  1730    33     4    -1     0      59  (
  6478     4  1730    34     4    -1     0      60  )
  6479     4  1730    35     4    -1     0     102  ;
  6480     4  1752     5     4    -1     0      10  public
  6481     4  1752    12     4    -1     0       7  abstract
  6482     4  1752    21     4    -1     0     111  ByteBuffer
  6483     4  1752    32     4    -1     0     111  putLong
  6484     4  1752    39     4    -1     0      59  (
  6485     4  1752    40     4    -1     0      53  long
  6486     4  1752    45     4    -1     0     111  value
  6487     4  1752    50     4    -1     0      60  )
  6488     4  1752    51     4    -1     0     102  ;
  6489     4  1770     5     4    -1     0      10  public
  6490     4  1770    12     4    -1     0       7  abstract
  6491     4  1770    21     4    -1     0      53  long
  6492     4  1770    26     4    -1     0     111  getLong
  6493     4  1770    33     4    -1     0      59  (
  6494     4  1770    34     4    -1     0      36  int
  6495     4  1770    38     4    -1     0     111  index
  6496     4  1770    43     4    -1     0      60  )
  6497     4  1770    44     4    -1     0     102  ;
  6498     4  1795     5     4    -1     0      10  public
  6499     4  1795    12     4    -1     0       7  abstract
  6500     4  1795    21     4    -1     0     111  ByteBuffer
  6501     4  1795    32     4    -1     0     111  putLong
  6502     4  1795    39     4    -1     0      59  (
  6503     4  1795    40     4    -1     0      36  int
  6504     4  1795    44     4    -1     0     111  index
  6505     4  1795    49     4    -1     0      66  ,
  6506     4  1795    51     4    -1     0      53  long
  6507     4  1795    56     4    -1     0     111  value
  6508     4  1795    61     4    -1     0      60  )
  6509     4  1795    62     4    -1     0     102  ;
  6510     4  1813     5     4    -1     0      10  public
  6511     4  1813    12     4    -1     0       7  abstract
  6512     4  1813    21     4    -1     0     111  LongBuffer
  6513     4  1813    32     4    -1     0     111  asLongBuffer
  6514     4  1813    44     4    -1     0      59  (
  6515     4  1813    45     4    -1     0      60  )
  6516     4  1813    46     4    -1     0     102  ;
  6517     4  1829     5     4    -1     0      10  public
  6518     4  1829    12     4    -1     0       7  abstract
  6519     4  1829    21     4    -1     0       4  float
  6520     4  1829    27     4    -1     0     111  getFloat
  6521     4  1829    35     4    -1     0      59  (
  6522     4  1829    36     4    -1     0      60  )
  6523     4  1829    37     4    -1     0     102  ;
  6524     4  1851     5     4    -1     0      10  public
  6525     4  1851    12     4    -1     0       7  abstract
  6526     4  1851    21     4    -1     0     111  ByteBuffer
  6527     4  1851    32     4    -1     0     111  putFloat
  6528     4  1851    40     4    -1     0      59  (
  6529     4  1851    41     4    -1     0       4  float
  6530     4  1851    47     4    -1     0     111  value
  6531     4  1851    52     4    -1     0      60  )
  6532     4  1851    53     4    -1     0     102  ;
  6533     4  1869     5     4    -1     0      10  public
  6534     4  1869    12     4    -1     0       7  abstract
  6535     4  1869    21     4    -1     0       4  float
  6536     4  1869    27     4    -1     0     111  getFloat
  6537     4  1869    35     4    -1     0      59  (
  6538     4  1869    36     4    -1     0      36  int
  6539     4  1869    40     4    -1     0     111  index
  6540     4  1869    45     4    -1     0      60  )
  6541     4  1869    46     4    -1     0     102  ;
  6542     4  1894     5     4    -1     0      10  public
  6543     4  1894    12     4    -1     0       7  abstract
  6544     4  1894    21     4    -1     0     111  ByteBuffer
  6545     4  1894    32     4    -1     0     111  putFloat
  6546     4  1894    40     4    -1     0      59  (
  6547     4  1894    41     4    -1     0      36  int
  6548     4  1894    45     4    -1     0     111  index
  6549     4  1894    50     4    -1     0      66  ,
  6550     4  1894    52     4    -1     0       4  float
  6551     4  1894    58     4    -1     0     111  value
  6552     4  1894    63     4    -1     0      60  )
  6553     4  1894    64     4    -1     0     102  ;
  6554     4  1912     5     4    -1     0      10  public
  6555     4  1912    12     4    -1     0       7  abstract
  6556     4  1912    21     4    -1     0     111  FloatBuffer
  6557     4  1912    33     4    -1     0     111  asFloatBuffer
  6558     4  1912    46     4    -1     0      59  (
  6559     4  1912    47     4    -1     0      60  )
  6560     4  1912    48     4    -1     0     102  ;
  6561     4  1928     5     4    -1     0      10  public
  6562     4  1928    12     4    -1     0       7  abstract
  6563     4  1928    21     4    -1     0      32  double
  6564     4  1928    28     4    -1     0     111  getDouble
  6565     4  1928    37     4    -1     0      59  (
  6566     4  1928    38     4    -1     0      60  )
  6567     4  1928    39     4    -1     0     102  ;
  6568     4  1950     5     4    -1     0      10  public
  6569     4  1950    12     4    -1     0       7  abstract
  6570     4  1950    21     4    -1     0     111  ByteBuffer
  6571     4  1950    32     4    -1     0     111  putDouble
  6572     4  1950    41     4    -1     0      59  (
  6573     4  1950    42     4    -1     0      32  double
  6574     4  1950    49     4    -1     0     111  value
  6575     4  1950    54     4    -1     0      60  )
  6576     4  1950    55     4    -1     0     102  ;
  6577     4  1968     5     4    -1     0      10  public
  6578     4  1968    12     4    -1     0       7  abstract
  6579     4  1968    21     4    -1     0      32  double
  6580     4  1968    28     4    -1     0     111  getDouble
  6581     4  1968    37     4    -1     0      59  (
  6582     4  1968    38     4    -1     0      36  int
  6583     4  1968    42     4    -1     0     111  index
  6584     4  1968    47     4    -1     0      60  )
  6585     4  1968    48     4    -1     0     102  ;
  6586     4  1993     5     4    -1     0      10  public
  6587     4  1993    12     4    -1     0       7  abstract
  6588     4  1993    21     4    -1     0     111  ByteBuffer
  6589     4  1993    32     4    -1     0     111  putDouble
  6590     4  1993    41     4    -1     0      59  (
  6591     4  1993    42     4    -1     0      36  int
  6592     4  1993    46     4    -1     0     111  index
  6593     4  1993    51     4    -1     0      66  ,
  6594     4  1993    53     4    -1     0      32  double
  6595     4  1993    60     4    -1     0     111  value
  6596     4  1993    65     4    -1     0      60  )
  6597     4  1993    66     4    -1     0     102  ;
  6598     4  2011     5     4    -1     0      10  public
  6599     4  2011    12     4    -1     0       7  abstract
  6600     4  2011    21     4    -1     0     111  DoubleBuffer
  6601     4  2011    34     4    -1     0     111  asDoubleBuffer
  6602     4  2011    48     4    -1     0      59  (
  6603     4  2011    49     4    -1     0      60  )
  6604     4  2011    50     4    -1     0     102  ;
  6605     4  2013     1     4    -1     0      64  }
  6606     4  2013     1     4    -1     1     439  ENDCLASS
  6607     4  2013     1    -1    -1     1     440  ENDFILE C:\javasrc\java\nio\ByteBuffer.java
  6608     5     1     1    -1    -1     1     441  STARTFILE C:\javasrc\java\nio\ByteBufferAsCharBufferB.java
  6609     5    28     1    -1    -1     0       5  package
  6610     5    28     9    -1    -1     0     111  java.nio
  6611     5    28    17    -1    -1     0     102  ;
  6612     5    31     1     5    -1     0     442  STARTCLASS
  6613     5    31     1     5    -1     0      24  class
  6614     5    31     7     5    -1     0     111  ByteBufferAsCharBufferB
  6615     5    32     5     5    -1     0      38  extends
  6616     5    32    13     5    -1     0     111  CharBuffer
  6617     5    33     1     5    -1     0      63  {
  6618     5    37     5     5    -1     0      23  protected
  6619     5    37    15     5    -1     0       6  final
  6620     5    37    21     5    -1     0     111  ByteBuffer
  6621     5    37    32     5    -1     0     111  bb
  6622     5    37    34     5    -1     0     102  ;
  6623     5    38     5     5    -1     0      23  protected
  6624     5    38    15     5    -1     0       6  final
  6625     5    38    21     5    -1     0      36  int
  6626     5    38    25     5    -1     0     111  offset
  6627     5    38    31     5    -1     0     102  ;
  6628     5    38    31     5   150     0     443  STARTMETHOD
  6629     5    42     5     5   150     0     111  ByteBufferAsCharBufferB
  6630     5    42    28     5   150     0      59  (
  6631     5    42    29     5   150     0     111  ByteBuffer
  6632     5    42    40     5   150     0     111  bb
  6633     5    42    42     5   150     0      60  )
  6634     5    42    44     5   150     0      63  {
  6635     5    44     9     5   150     0      27  super
  6636     5    44    14     5   150     0      59  (
  6637     5    44    15     5   150     0      77  -
  6638     5    44    16     5   150     0     112  1
  6639     5    44    17     5   150     0      66  ,
  6640     5    44    19     5   150     0     112  0
  6641     5    44    20     5   150     0      66  ,
  6642     5    45    15     5   150     0     111  bb.remaining
  6643     5    45    27     5   150     0      59  (
  6644     5    45    28     5   150     0      60  )
  6645     5    45    30     5   150     0      84  >>
  6646     5    45    33     5   150     0     112  1
  6647     5    45    34     5   150     0      66  ,
  6648     5    46    15     5   150     0     111  bb.remaining
  6649     5    46    27     5   150     0      59  (
  6650     5    46    28     5   150     0      60  )
  6651     5    46    30     5   150     0      84  >>
  6652     5    46    33     5   150     0     112  1
  6653     5    46    34     5   150     0      60  )
  6654     5    46    35     5   150     0     102  ;
  6655     5    47     9     5   150     0     111  this.bb
  6656     5    47    17     5   150     0      67  =
  6657     5    47    19     5   150     0     111  bb
  6658     5    47    21     5   150     0     102  ;
  6659     5    49     9     5   150     0      36  int
  6660     5    49    13     5   150     0     111  cap
  6661     5    49    17     5   150     0      67  =
  6662     5    49    19     5   150     0     111  this.capacity
  6663     5    49    32     5   150     0      59  (
  6664     5    49    33     5   150     0      60  )
  6665     5    49    34     5   150     0     102  ;
  6666     5    50     9     5   150     0     111  this.limit
  6667     5    50    19     5   150     0      59  (
  6668     5    50    20     5   150     0     111  cap
  6669     5    50    23     5   150     0      60  )
  6670     5    50    24     5   150     0     102  ;
  6671     5    51     9     5   150     0      36  int
  6672     5    51    13     5   150     0     111  pos
  6673     5    51    17     5   150     0      67  =
  6674     5    51    19     5   150     0     111  this.position
  6675     5    51    32     5   150     0      59  (
  6676     5    51    33     5   150     0      60  )
  6677     5    51    34     5   150     0     102  ;
  6678     5    52     9     5   150     0     111  assert
  6679     5    52    16     5   150     0      59  (
  6680     5    52    17     5   150     0     111  pos
  6681     5    52    21     5   150     0      92  <=
  6682     5    52    24     5   150     0     111  cap
  6683     5    52    27     5   150     0      60  )
  6684     5    52    28     5   150     0     102  ;
  6685     5    53     9     5   150     0     111  offset
  6686     5    53    16     5   150     0      67  =
  6687     5    53    18     5   150     0     111  pos
  6688     5    53    21     5   150     0     102  ;
  6689     5    57     5     5   150     0      64  }
  6690     5    57     5     5   150     0     444  ENDMETHOD
  6691     5    57     5     5   151     0     445  STARTMETHOD
  6692     5    59     5     5   151     0     111  ByteBufferAsCharBufferB
  6693     5    59    28     5   151     0      59  (
  6694     5    59    29     5   151     0     111  ByteBuffer
  6695     5    59    40     5   151     0     111  bb
  6696     5    59    42     5   151     0      66  ,
  6697     5    60    38     5   151     0      36  int
  6698     5    60    42     5   151     0     111  mark
  6699     5    60    46     5   151     0      66  ,
  6700     5    60    48     5   151     0      36  int
  6701     5    60    52     5   151     0     111  pos
  6702     5    60    55     5   151     0      66  ,
  6703     5    60    57     5   151     0      36  int
  6704     5    60    61     5   151     0     111  lim
  6705     5    60    64     5   151     0      66  ,
  6706     5    60    66     5   151     0      36  int
  6707     5    60    70     5   151     0     111  cap
  6708     5    60    73     5   151     0      66  ,
  6709     5    61    38     5   151     0      36  int
  6710     5    61    42     5   151     0     111  off
  6711     5    61    45     5   151     0      60  )
  6712     5    62     5     5   151     0      63  {
  6713     5    64     9     5   151     0      27  super
  6714     5    64    14     5   151     0      59  (
  6715     5    64    15     5   151     0     111  mark
  6716     5    64    19     5   151     0      66  ,
  6717     5    64    21     5   151     0     111  pos
  6718     5    64    24     5   151     0      66  ,
  6719     5    64    26     5   151     0     111  lim
  6720     5    64    29     5   151     0      66  ,
  6721     5    64    31     5   151     0     111  cap
  6722     5    64    34     5   151     0      60  )
  6723     5    64    35     5   151     0     102  ;
  6724     5    65     9     5   151     1     111  this.bb
  6725     5    65    17     5   151     1      67  =
  6726     5    65    19     5   151     1     111  bb
  6727     5    65    21     5   151     1     102  ;
  6728     5    66     9     5   151     1     111  offset
  6729     5    66    16     5   151     1      67  =
  6730     5    66    18     5   151     1     111  off
  6731     5    66    21     5   151     1     102  ;
  6732     5    70     5     5   151     0      64  }
  6733     5    70     5     5   151     0     446  ENDMETHOD
  6734     5    70     5     5   152     0     447  STARTMETHOD
  6735     5    72     5     5   152     0      10  public
  6736     5    72    12     5   152     0     111  CharBuffer
  6737     5    72    23     5   152     0     111  slice
  6738     5    72    28     5   152     0      59  (
  6739     5    72    29     5   152     0      60  )
  6740     5    72    31     5   152     0      63  {
  6741     5    73     9     5   152     1      36  int
  6742     5    73    13     5   152     1     111  pos
  6743     5    73    17     5   152     1      67  =
  6744     5    73    19     5   152     1     111  this.position
  6745     5    73    32     5   152     1      59  (
  6746     5    73    33     5   152     1      60  )
  6747     5    73    34     5   152     1     102  ;
  6748     5    74     9     5   152     1      36  int
  6749     5    74    13     5   152     1     111  lim
  6750     5    74    17     5   152     1      67  =
  6751     5    74    19     5   152     1     111  this.limit
  6752     5    74    29     5   152     1      59  (
  6753     5    74    30     5   152     1      60  )
  6754     5    74    31     5   152     1     102  ;
  6755     5    75     9     5   152     0     111  assert
  6756     5    75    16     5   152     0      59  (
  6757     5    75    17     5   152     0     111  pos
  6758     5    75    21     5   152     0      92  <=
  6759     5    75    24     5   152     0     111  lim
  6760     5    75    27     5   152     0      60  )
  6761     5    75    28     5   152     0     102  ;
  6762     5    76     9     5   152     0      36  int
  6763     5    76    13     5   152     0     111  rem
  6764     5    76    17     5   152     0      67  =
  6765     5    76    19     5   152     0      59  (
  6766     5    76    20     5   152     0     111  pos
  6767     5    76    24     5   152     0      92  <=
  6768     5    76    27     5   152     0     111  lim
  6769     5    76    31     5   152     0      58  ?
  6770     5    76    33     5   152     0     111  lim
  6771     5    76    37     5   152     0      77  -
  6772     5    76    39     5   152     0     111  pos
  6773     5    76    43     5   152     0      65  :
  6774     5    76    45     5   152     0     112  0
  6775     5    76    46     5   152     0      60  )
  6776     5    76    47     5   152     0     102  ;
  6777     5    77     9     5   152     0      36  int
  6778     5    77    13     5   152     0     111  off
  6779     5    77    17     5   152     0      67  =
  6780     5    77    19     5   152     0      59  (
  6781     5    77    20     5   152     0     111  pos
  6782     5    77    24     5   152     0      90  <<
  6783     5    77    27     5   152     0     112  1
  6784     5    77    28     5   152     0      60  )
  6785     5    77    30     5   152     0      74  +
  6786     5    77    32     5   152     0     111  offset
  6787     5    77    38     5   152     0     102  ;
  6788     5    78     9     5   152     0     111  assert
  6789     5    78    16     5   152     0      59  (
  6790     5    78    17     5   152     0     111  off
  6791     5    78    21     5   152     0      88  >=
  6792     5    78    24     5   152     0     112  0
  6793     5    78    25     5   152     0      60  )
  6794     5    78    26     5   152     0     102  ;
  6795     5    79     9     5   152     0      19  return
  6796     5    79    16     5   152     0      15  new
  6797     5    79    20     5   152     0     111  ByteBufferAsCharBufferB
  6798     5    79    43     5   152     0      59  (
  6799     5    79    44     5   152     0     111  bb
  6800     5    79    46     5   152     0      66  ,
  6801     5    79    48     5   152     0      77  -
  6802     5    79    49     5   152     0     112  1
  6803     5    79    50     5   152     0      66  ,
  6804     5    79    52     5   152     0     112  0
  6805     5    79    53     5   152     0      66  ,
  6806     5    79    55     5   152     0     111  rem
  6807     5    79    58     5   152     0      66  ,
  6808     5    79    60     5   152     0     111  rem
  6809     5    79    63     5   152     1      66  ,
  6810     5    79    65     5   152     1     111  off
  6811     5    79    68     5   152     1      60  )
  6812     5    79    69     5   152     1     102  ;
  6813     5    80     5     5   152     1      64  }
  6814     5    80     5     5   152     0     448  ENDMETHOD
  6815     5    80     5     5   153     0     449  STARTMETHOD
  6816     5    82     5     5   153     0      10  public
  6817     5    82    12     5   153     0     111  CharBuffer
  6818     5    82    23     5   153     0     111  duplicate
  6819     5    82    32     5   153     0      59  (
  6820     5    82    33     5   153     0      60  )
  6821     5    82    35     5   153     0      63  {
  6822     5    83     9     5   153     0      19  return
  6823     5    83    16     5   153     0      15  new
  6824     5    83    20     5   153     0     111  ByteBufferAsCharBufferB
  6825     5    83    43     5   153     0      59  (
  6826     5    83    44     5   153     0     111  bb
  6827     5    83    46     5   153     0      66  ,
  6828     5    84    53     5   153     1     111  this.markValue
  6829     5    84    67     5   153     1      59  (
  6830     5    84    68     5   153     1      60  )
  6831     5    84    69     5   153     1      66  ,
  6832     5    85    53     5   153     1     111  this.position
  6833     5    85    66     5   153     1      59  (
  6834     5    85    67     5   153     1      60  )
  6835     5    85    68     5   153     1      66  ,
  6836     5    86    53     5   153     1     111  this.limit
  6837     5    86    63     5   153     1      59  (
  6838     5    86    64     5   153     1      60  )
  6839     5    86    65     5   153     1      66  ,
  6840     5    87    53     5   153     1     111  this.capacity
  6841     5    87    66     5   153     1      59  (
  6842     5    87    67     5   153     1      60  )
  6843     5    87    68     5   153     1      66  ,
  6844     5    88    53     5   153     1     111  offset
  6845     5    88    59     5   153     1      60  )
  6846     5    88    60     5   153     1     102  ;
  6847     5    89     5     5   153     1      64  }
  6848     5    89     5     5   153     0     450  ENDMETHOD
  6849     5    89     5     5   154     0     451  STARTMETHOD
  6850     5    91     5     5   154     0      10  public
  6851     5    91    12     5   154     0     111  CharBuffer
  6852     5    91    23     5   154     0     111  asReadOnlyBuffer
  6853     5    91    39     5   154     0      59  (
  6854     5    91    40     5   154     0      60  )
  6855     5    91    42     5   154     0      63  {
  6856     5    93     9     5   154     0      19  return
  6857     5    93    16     5   154     0      15  new
  6858     5    93    20     5   154     0     111  ByteBufferAsCharBufferRB
  6859     5    93    44     5   154     0      59  (
  6860     5    93    45     5   154     0     111  bb
  6861     5    93    47     5   154     0      66  ,
  6862     5    94    50     5   154     1     111  this.markValue
  6863     5    94    64     5   154     1      59  (
  6864     5    94    65     5   154     1      60  )
  6865     5    94    66     5   154     1      66  ,
  6866     5    95    50     5   154     1     111  this.position
  6867     5    95    63     5   154     1      59  (
  6868     5    95    64     5   154     1      60  )
  6869     5    95    65     5   154     1      66  ,
  6870     5    96    50     5   154     1     111  this.limit
  6871     5    96    60     5   154     1      59  (
  6872     5    96    61     5   154     1      60  )
  6873     5    96    62     5   154     1      66  ,
  6874     5    97    50     5   154     1     111  this.capacity
  6875     5    97    63     5   154     1      59  (
  6876     5    97    64     5   154     1      60  )
  6877     5    97    65     5   154     1      66  ,
  6878     5    98    50     5   154     1     111  offset
  6879     5    98    56     5   154     1      60  )
  6880     5    98    57     5   154     1     102  ;
  6881     5   102     5     5   154     1      64  }
  6882     5   102     5     5   154     0     452  ENDMETHOD
  6883     5   102     5     5   155     0     453  STARTMETHOD
  6884     5   106     5     5   155     0      23  protected
  6885     5   106    15     5   155     0      36  int
  6886     5   106    19     5   155     0     111  ix
  6887     5   106    21     5   155     0      59  (
  6888     5   106    22     5   155     0      36  int
  6889     5   106    26     5   155     0     111  i
  6890     5   106    27     5   155     0      60  )
  6891     5   106    29     5   155     0      63  {
  6892     5   107     9     5   155     0      19  return
  6893     5   107    16     5   155     0      59  (
  6894     5   107    17     5   155     0     111  i
  6895     5   107    19     5   155     0      90  <<
  6896     5   107    22     5   155     0     112  1
  6897     5   107    23     5   155     0      60  )
  6898     5   107    25     5   155     0      74  +
  6899     5   107    27     5   155     0     111  offset
  6900     5   107    33     5   155     0     102  ;
  6901     5   108     5     5   155     0      64  }
  6902     5   108     5     5   155     0     454  ENDMETHOD
  6903     5   108     5     5   156     0     455  STARTMETHOD
  6904     5   110     5     5   156     0      10  public
  6905     5   110    12     5   156     0      40  char
  6906     5   110    17     5   156     0     111  get
  6907     5   110    20     5   156     0      59  (
  6908     5   110    21     5   156     0      60  )
  6909     5   110    23     5   156     0      63  {
  6910     5   111     9     5   156     0      19  return
  6911     5   111    16     5   156     0     111  Bits.getCharB
  6912     5   111    29     5   156     0      59  (
  6913     5   111    30     5   156     0     111  bb
  6914     5   111    32     5   156     0      66  ,
  6915     5   111    34     5   156     0     111  ix
  6916     5   111    36     5   156     0      59  (
  6917     5   111    37     5   156     0     111  nextGetIndex
  6918     5   111    49     5   156     0      59  (
  6919     5   111    50     5   156     0      60  )
  6920     5   111    51     5   156     0      60  )
  6921     5   111    52     5   156     0      60  )
  6922     5   111    53     5   156     0     102  ;
  6923     5   112     5     5   156     0      64  }
  6924     5   112     5     5   156     0     456  ENDMETHOD
  6925     5   112     5     5   157     0     457  STARTMETHOD
  6926     5   114     5     5   157     0      10  public
  6927     5   114    12     5   157     0      40  char
  6928     5   114    17     5   157     0     111  get
  6929     5   114    20     5   157     0      59  (
  6930     5   114    21     5   157     0      36  int
  6931     5   114    25     5   157     0     111  i
  6932     5   114    26     5   157     0      60  )
  6933     5   114    28     5   157     0      63  {
  6934     5   115     9     5   157     0      19  return
  6935     5   115    16     5   157     0     111  Bits.getCharB
  6936     5   115    29     5   157     0      59  (
  6937     5   115    30     5   157     0     111  bb
  6938     5   115    32     5   157     0      66  ,
  6939     5   115    34     5   157     0     111  ix
  6940     5   115    36     5   157     0      59  (
  6941     5   115    37     5   157     0     111  checkIndex
  6942     5   115    47     5   157     0      59  (
  6943     5   115    48     5   157     0     111  i
  6944     5   115    49     5   157     0      60  )
  6945     5   115    50     5   157     0      60  )
  6946     5   115    51     5   157     0      60  )
  6947     5   115    52     5   157     0     102  ;
  6948     5   116     5     5   157     0      64  }
  6949     5   116     5     5   157     0     458  ENDMETHOD
  6950     5   116     5     5   158     0     459  STARTMETHOD
  6951     5   120     5     5   158     0      10  public
  6952     5   120    12     5   158     0     111  CharBuffer
  6953     5   120    23     5   158     0     111  put
  6954     5   120    26     5   158     0      59  (
  6955     5   120    27     5   158     0      40  char
  6956     5   120    32     5   158     0     111  x
  6957     5   120    33     5   158     0      60  )
  6958     5   120    35     5   158     0      63  {
  6959     5   122     9     5   158     0     111  Bits.putCharB
  6960     5   122    22     5   158     0      59  (
  6961     5   122    23     5   158     0     111  bb
  6962     5   122    25     5   158     0      66  ,
  6963     5   122    27     5   158     0     111  ix
  6964     5   122    29     5   158     0      59  (
  6965     5   122    30     5   158     0     111  nextPutIndex
  6966     5   122    42     5   158     0      59  (
  6967     5   122    43     5   158     0      60  )
  6968     5   122    44     5   158     0      60  )
  6969     5   122    45     5   158     0      66  ,
  6970     5   122    47     5   158     0     111  x
  6971     5   122    48     5   158     0      60  )
  6972     5   122    49     5   158     0     102  ;
  6973     5   123     9     5   158     0      19  return
  6974     5   123    16     5   158     0      44  this
  6975     5   123    20     5   158     0     102  ;
  6976     5   127     5     5   158     0      64  }
  6977     5   127     5     5   158     0     460  ENDMETHOD
  6978     5   127     5     5   159     0     461  STARTMETHOD
  6979     5   129     5     5   159     0      10  public
  6980     5   129    12     5   159     0     111  CharBuffer
  6981     5   129    23     5   159     0     111  put
  6982     5   129    26     5   159     0      59  (
  6983     5   129    27     5   159     0      36  int
  6984     5   129    31     5   159     0     111  i
  6985     5   129    32     5   159     0      66  ,
  6986     5   129    34     5   159     0      40  char
  6987     5   129    39     5   159     0     111  x
  6988     5   129    40     5   159     0      60  )
  6989     5   129    42     5   159     0      63  {
  6990     5   131     9     5   159     0     111  Bits.putCharB
  6991     5   131    22     5   159     0      59  (
  6992     5   131    23     5   159     0     111  bb
  6993     5   131    25     5   159     0      66  ,
  6994     5   131    27     5   159     0     111  ix
  6995     5   131    29     5   159     0      59  (
  6996     5   131    30     5   159     0     111  checkIndex
  6997     5   131    40     5   159     0      59  (
  6998     5   131    41     5   159     0     111  i
  6999     5   131    42     5   159     0      60  )
  7000     5   131    43     5   159     0      60  )
  7001     5   131    44     5   159     0      66  ,
  7002     5   131    46     5   159     0     111  x
  7003     5   131    47     5   159     0      60  )
  7004     5   131    48     5   159     0     102  ;
  7005     5   132     9     5   159     0      19  return
  7006     5   132    16     5   159     0      44  this
  7007     5   132    20     5   159     0     102  ;
  7008     5   136     5     5   159     0      64  }
  7009     5   136     5     5   159     0     462  ENDMETHOD
  7010     5   136     5     5   160     0     463  STARTMETHOD
  7011     5   138     5     5   160     0      10  public
  7012     5   138    12     5   160     0     111  CharBuffer
  7013     5   138    23     5   160     0     111  compact
  7014     5   138    30     5   160     0      59  (
  7015     5   138    31     5   160     0      60  )
  7016     5   138    33     5   160     0      63  {
  7017     5   140     9     5   160     1      36  int
  7018     5   140    13     5   160     1     111  pos
  7019     5   140    17     5   160     1      67  =
  7020     5   140    19     5   160     1     111  position
  7021     5   140    27     5   160     1      59  (
  7022     5   140    28     5   160     1      60  )
  7023     5   140    29     5   160     1     102  ;
  7024     5   141     9     5   160     1      36  int
  7025     5   141    13     5   160     1     111  lim
  7026     5   141    17     5   160     1      67  =
  7027     5   141    19     5   160     1     111  limit
  7028     5   141    24     5   160     1      59  (
  7029     5   141    25     5   160     1      60  )
  7030     5   141    26     5   160     1     102  ;
  7031     5   142     9     5   160     0     111  assert
  7032     5   142    16     5   160     0      59  (
  7033     5   142    17     5   160     0     111  pos
  7034     5   142    21     5   160     0      92  <=
  7035     5   142    24     5   160     0     111  lim
  7036     5   142    27     5   160     0      60  )
  7037     5   142    28     5   160     0     102  ;
  7038     5   143     9     5   160     0      36  int
  7039     5   143    13     5   160     0     111  rem
  7040     5   143    17     5   160     0      67  =
  7041     5   143    19     5   160     0      59  (
  7042     5   143    20     5   160     0     111  pos
  7043     5   143    24     5   160     0      92  <=
  7044     5   143    27     5   160     0     111  lim
  7045     5   143    31     5   160     0      58  ?
  7046     5   143    33     5   160     0     111  lim
  7047     5   143    37     5   160     0      77  -
  7048     5   143    39     5   160     0     111  pos
  7049     5   143    43     5   160     0      65  :
  7050     5   143    45     5   160     0     112  0
  7051     5   143    46     5   160     0      60  )
  7052     5   143    47     5   160     0     102  ;
  7053     5   145     9     5   160     0     111  ByteBuffer
  7054     5   145    20     5   160     0     111  db
  7055     5   145    23     5   160     0      67  =
  7056     5   145    25     5   160     0     111  bb.duplicate
  7057     5   145    37     5   160     0      59  (
  7058     5   145    38     5   160     0      60  )
  7059     5   145    39     5   160     0     102  ;
  7060     5   146     9     5   160     0     111  db.limit
  7061     5   146    17     5   160     0      59  (
  7062     5   146    18     5   160     0     111  ix
  7063     5   146    20     5   160     0      59  (
  7064     5   146    21     5   160     0     111  lim
  7065     5   146    24     5   160     0      60  )
  7066     5   146    25     5   160     0      60  )
  7067     5   146    26     5   160     0     102  ;
  7068     5   147     9     5   160     0     111  db.position
  7069     5   147    20     5   160     0      59  (
  7070     5   147    21     5   160     0     111  ix
  7071     5   147    23     5   160     0      59  (
  7072     5   147    24     5   160     0     112  0
  7073     5   147    25     5   160     0      60  )
  7074     5   147    26     5   160     0      60  )
  7075     5   147    27     5   160     0     102  ;
  7076     5   148     9     5   160     0     111  ByteBuffer
  7077     5   148    20     5   160     0     111  sb
  7078     5   148    23     5   160     0      67  =
  7079     5   148    25     5   160     0     111  db.slice
  7080     5   148    33     5   160     0      59  (
  7081     5   148    34     5   160     0      60  )
  7082     5   148    35     5   160     0     102  ;
  7083     5   149     9     5   160     0     111  sb.position
  7084     5   149    20     5   160     0      59  (
  7085     5   149    21     5   160     0     111  pos
  7086     5   149    25     5   160     0      90  <<
  7087     5   149    28     5   160     0     112  1
  7088     5   149    29     5   160     0      60  )
  7089     5   149    30     5   160     0     102  ;
  7090     5   150     9     5   160     0     111  sb.compact
  7091     5   150    19     5   160     0      59  (
  7092     5   150    20     5   160     0      60  )
  7093     5   150    21     5   160     0     102  ;
  7094     5   151     9     5   160     0     111  position
  7095     5   151    17     5   160     0      59  (
  7096     5   151    18     5   160     0     111  rem
  7097     5   151    21     5   160     0      60  )
  7098     5   151    22     5   160     0     102  ;
  7099     5   152     9     5   160     0     111  limit
  7100     5   152    14     5   160     0      59  (
  7101     5   152    15     5   160     0     111  capacity
  7102     5   152    23     5   160     0      59  (
  7103     5   152    24     5   160     0      60  )
  7104     5   152    25     5   160     0      60  )
  7105     5   152    26     5   160     0     102  ;
  7106     5   153     9     5   160     0      19  return
  7107     5   153    16     5   160     0      44  this
  7108     5   153    20     5   160     0     102  ;
  7109     5   157     5     5   160     0      64  }
  7110     5   157     5     5   160     0     464  ENDMETHOD
  7111     5   157     5     5   161     0     465  STARTMETHOD
  7112     5   159     5     5   161     0      10  public
  7113     5   159    12     5   161     0      39  boolean
  7114     5   159    20     5   161     0     111  isDirect
  7115     5   159    28     5   161     0      59  (
  7116     5   159    29     5   161     0      60  )
  7117     5   159    31     5   161     0      63  {
  7118     5   160     9     5   161     0      19  return
  7119     5   160    16     5   161     0     111  bb.isDirect
  7120     5   160    27     5   161     0      59  (
  7121     5   160    28     5   161     0      60  )
  7122     5   160    29     5   161     0     102  ;
  7123     5   161     5     5   161     0      64  }
  7124     5   161     5     5   161     0     466  ENDMETHOD
  7125     5   161     5     5   162     0     467  STARTMETHOD
  7126     5   163     5     5   162     0      10  public
  7127     5   163    12     5   162     0      39  boolean
  7128     5   163    20     5   162     0     111  isReadOnly
  7129     5   163    30     5   162     0      59  (
  7130     5   163    31     5   162     0      60  )
  7131     5   163    33     5   162     0      63  {
  7132     5   164     9     5   162     0      19  return
  7133     5   164    16     5   162     0      43  false
  7134     5   164    21     5   162     0     102  ;
  7135     5   165     5     5   162     0      64  }
  7136     5   165     5     5   162     0     468  ENDMETHOD
  7137     5   165     5     5   163     0     469  STARTMETHOD
  7138     5   169     5     5   163     0      10  public
  7139     5   169    12     5   163     0     111  String
  7140     5   169    19     5   163     0     111  toString
  7141     5   169    27     5   163     0      59  (
  7142     5   169    28     5   163     0      36  int
  7143     5   169    32     5   163     0     111  start
  7144     5   169    37     5   163     0      66  ,
  7145     5   169    39     5   163     0      36  int
  7146     5   169    43     5   163     0     111  end
  7147     5   169    46     5   163     0      60  )
  7148     5   169    48     5   163     0      63  {
  7149     5   170     9     5   163     0      31  if
  7150     5   170    12     5   163     0      59  (
  7151     5   170    13     5   163     0      59  (
  7152     5   170    14     5   163     0     111  end
  7153     5   170    18     5   163     0      89  >
  7154     5   170    20     5   163     0     111  limit
  7155     5   170    25     5   163     0      59  (
  7156     5   170    26     5   163     0      60  )
  7157     5   170    27     5   163     0      60  )
  7158     5   170    29     5   163     0      98  ||
  7159     5   170    32     5   163     0      59  (
  7160     5   170    33     5   163     0     111  start
  7161     5   170    39     5   163     0      89  >
  7162     5   170    41     5   163     0     111  end
  7163     5   170    44     5   163     0      60  )
  7164     5   170    45     5   163     0      60  )
  7165     5   171    13     5   163     0      20  throw
  7166     5   171    19     5   163     0      15  new
  7167     5   171    23     5   163     0     111  IndexOutOfBoundsException
  7168     5   171    48     5   163     0      59  (
  7169     5   171    49     5   163     0      60  )
  7170     5   171    50     5   163     0     102  ;
  7171     5   172     9     5   163     0      35  try
  7172     5   172    13     5   163     0      63  {
  7173     5   173    13     5   163     0      36  int
  7174     5   173    17     5   163     0     111  len
  7175     5   173    21     5   163     0      67  =
  7176     5   173    23     5   163     0     111  end
  7177     5   173    27     5   163     0      77  -
  7178     5   173    29     5   163     0     111  start
  7179     5   173    34     5   163     0     102  ;
  7180     5   174    13     5   163     0      40  char
  7181     5   174    17     5   163     0      61  [
  7182     5   174    18     5   163     0      62  ]
  7183     5   174    20     5   163     0     111  ca
  7184     5   174    23     5   163     0      67  =
  7185     5   174    25     5   163     0      15  new
  7186     5   174    29     5   163     0      40  char
  7187     5   174    33     5   163     0      61  [
  7188     5   174    34     5   163     0     111  len
  7189     5   174    37     5   163     0      62  ]
  7190     5   174    38     5   163     0     102  ;
  7191     5   175    13     5   163     0     111  CharBuffer
  7192     5   175    24     5   163     0     111  cb
  7193     5   175    27     5   163     0      67  =
  7194     5   175    29     5   163     0     111  CharBuffer.wrap
  7195     5   175    44     5   163     0      59  (
  7196     5   175    45     5   163     0     111  ca
  7197     5   175    47     5   163     0      60  )
  7198     5   175    48     5   163     0     102  ;
  7199     5   176    13     5   163     0     111  CharBuffer
  7200     5   176    24     5   163     0     111  db
  7201     5   176    27     5   163     0      67  =
  7202     5   176    29     5   163     0     111  this.duplicate
  7203     5   176    43     5   163     0      59  (
  7204     5   176    44     5   163     0      60  )
  7205     5   176    45     5   163     0     102  ;
  7206     5   177    13     5   163     1     111  db.position
  7207     5   177    24     5   163     1      59  (
  7208     5   177    25     5   163     1     111  start
  7209     5   177    30     5   163     1      60  )
  7210     5   177    31     5   163     1     102  ;
  7211     5   178    13     5   163     1     111  db.limit
  7212     5   178    21     5   163     1      59  (
  7213     5   178    22     5   163     1     111  end
  7214     5   178    25     5   163     1      60  )
  7215     5   178    26     5   163     1     102  ;
  7216     5   179    13     5   163     1     111  cb.put
  7217     5   179    19     5   163     1      59  (
  7218     5   179    20     5   163     1     111  db
  7219     5   179    22     5   163     1      60  )
  7220     5   179    23     5   163     1     102  ;
  7221     5   180    13     5   163     0      19  return
  7222     5   180    20     5   163     0      15  new
  7223     5   180    24     5   163     0     111  String
  7224     5   180    30     5   163     0      59  (
  7225     5   180    31     5   163     0     111  ca
  7226     5   180    33     5   163     0      60  )
  7227     5   180    34     5   163     0     102  ;
  7228     5   181     9     5   163     0      64  }
  7229     5   181    11     5   163     0      34  catch
  7230     5   181    17     5   163     0      59  (
  7231     5   181    18     5   163     0     111  StringIndexOutOfBoundsException
  7232     5   181    50     5   163     0     111  x
  7233     5   181    51     5   163     0      60  )
  7234     5   181    53     5   163     0      63  {
  7235     5   182    13     5   163     0      20  throw
  7236     5   182    19     5   163     0      15  new
  7237     5   182    23     5   163     0     111  IndexOutOfBoundsException
  7238     5   182    48     5   163     0      59  (
  7239     5   182    49     5   163     0      60  )
  7240     5   182    50     5   163     0     102  ;
  7241     5   183     9     5   163     0      64  }
  7242     5   184     5     5   163     0      64  }
  7243     5   184     5     5   163     0     470  ENDMETHOD
  7244     5   184     5     5   164     0     471  STARTMETHOD
  7245     5   189     5     5   164     0      10  public
  7246     5   189    12     5   164     0     111  CharSequence
  7247     5   189    25     5   164     0     111  subSequence
  7248     5   189    36     5   164     0      59  (
  7249     5   189    37     5   164     0      36  int
  7250     5   189    41     5   164     0     111  start
  7251     5   189    46     5   164     0      66  ,
  7252     5   189    48     5   164     0      36  int
  7253     5   189    52     5   164     0     111  end
  7254     5   189    55     5   164     0      60  )
  7255     5   189    57     5   164     0      63  {
  7256     5   190     9     5   164     1      36  int
  7257     5   190    13     5   164     1     111  pos
  7258     5   190    17     5   164     1      67  =
  7259     5   190    19     5   164     1     111  position
  7260     5   190    27     5   164     1      59  (
  7261     5   190    28     5   164     1      60  )
  7262     5   190    29     5   164     1     102  ;
  7263     5   191     9     5   164     1      36  int
  7264     5   191    13     5   164     1     111  lim
  7265     5   191    17     5   164     1      67  =
  7266     5   191    19     5   164     1     111  limit
  7267     5   191    24     5   164     1      59  (
  7268     5   191    25     5   164     1      60  )
  7269     5   191    26     5   164     1     102  ;
  7270     5   192     9     5   164     0     111  assert
  7271     5   192    16     5   164     0      59  (
  7272     5   192    17     5   164     0     111  pos
  7273     5   192    21     5   164     0      92  <=
  7274     5   192    24     5   164     0     111  lim
  7275     5   192    27     5   164     0      60  )
  7276     5   192    28     5   164     0     102  ;
  7277     5   193     9     5   164     0     111  pos
  7278     5   193    13     5   164     0      67  =
  7279     5   193    15     5   164     0      59  (
  7280     5   193    16     5   164     0     111  pos
  7281     5   193    20     5   164     0      92  <=
  7282     5   193    23     5   164     0     111  lim
  7283     5   193    27     5   164     0      58  ?
  7284     5   193    29     5   164     0     111  pos
  7285     5   193    33     5   164     0      65  :
  7286     5   193    35     5   164     0     111  lim
  7287     5   193    38     5   164     0      60  )
  7288     5   193    39     5   164     0     102  ;
  7289     5   194     9     5   164     0      36  int
  7290     5   194    13     5   164     0     111  len
  7291     5   194    17     5   164     0      67  =
  7292     5   194    19     5   164     0     111  lim
  7293     5   194    23     5   164     0      77  -
  7294     5   194    25     5   164     0     111  pos
  7295     5   194    28     5   164     0     102  ;
  7296     5   196     9     5   164     0      31  if
  7297     5   196    12     5   164     0      59  (
  7298     5   196    13     5   164     0      59  (
  7299     5   196    14     5   164     0     111  start
  7300     5   196    20     5   164     0      93  <
  7301     5   196    22     5   164     0     112  0
  7302     5   196    23     5   164     0      60  )
  7303     5   196    25     5   164     0      98  ||
  7304     5   196    28     5   164     0      59  (
  7305     5   196    29     5   164     0     111  end
  7306     5   196    33     5   164     0      89  >
  7307     5   196    35     5   164     0     111  len
  7308     5   196    38     5   164     0      60  )
  7309     5   196    40     5   164     0      98  ||
  7310     5   196    43     5   164     0      59  (
  7311     5   196    44     5   164     0     111  start
  7312     5   196    50     5   164     0      89  >
  7313     5   196    52     5   164     0     111  end
  7314     5   196    55     5   164     0      60  )
  7315     5   196    56     5   164     0      60  )
  7316     5   197    13     5   164     0      20  throw
  7317     5   197    19     5   164     0      15  new
  7318     5   197    23     5   164     0     111  IndexOutOfBoundsException
  7319     5   197    48     5   164     0      59  (
  7320     5   197    49     5   164     0      60  )
  7321     5   197    50     5   164     0     102  ;
  7322     5   198     9     5   164     0      36  int
  7323     5   198    13     5   164     0     111  sublen
  7324     5   198    20     5   164     0      67  =
  7325     5   198    22     5   164     0     111  end
  7326     5   198    26     5   164     0      77  -
  7327     5   198    28     5   164     0     111  start
  7328     5   198    33     5   164     0     102  ;
  7329     5   199     9     5   164     0      36  int
  7330     5   199    13     5   164     0     111  off
  7331     5   199    17     5   164     0      67  =
  7332     5   199    19     5   164     0     111  offset
  7333     5   199    26     5   164     0      74  +
  7334     5   199    28     5   164     0      59  (
  7335     5   199    29     5   164     0      59  (
  7336     5   199    30     5   164     0     111  pos
  7337     5   199    34     5   164     0      74  +
  7338     5   199    36     5   164     0     111  start
  7339     5   199    41     5   164     0      60  )
  7340     5   199    43     5   164     0      90  <<
  7341     5   199    46     5   164     0     112  1
  7342     5   199    47     5   164     0      60  )
  7343     5   199    48     5   164     0     102  ;
  7344     5   200     9     5   164     0     111  assert
  7345     5   200    16     5   164     0      59  (
  7346     5   200    17     5   164     0     111  off
  7347     5   200    21     5   164     0      88  >=
  7348     5   200    24     5   164     0     112  0
  7349     5   200    25     5   164     0      60  )
  7350     5   200    26     5   164     0     102  ;
  7351     5   201     9     5   164     0      19  return
  7352     5   201    16     5   164     0      15  new
  7353     5   201    20     5   164     0     111  ByteBufferAsCharBufferB
  7354     5   201    43     5   164     0      59  (
  7355     5   201    44     5   164     0     111  bb
  7356     5   201    46     5   164     0      66  ,
  7357     5   201    48     5   164     0      77  -
  7358     5   201    49     5   164     0     112  1
  7359     5   201    50     5   164     0      66  ,
  7360     5   201    52     5   164     0     112  0
  7361     5   201    53     5   164     0      66  ,
  7362     5   201    55     5   164     0     111  sublen
  7363     5   201    61     5   164     0      66  ,
  7364     5   201    63     5   164     0     111  sublen
  7365     5   201    69     5   164     0      66  ,
  7366     5   201    71     5   164     0     111  off
  7367     5   201    74     5   164     0      60  )
  7368     5   201    75     5   164     0     102  ;
  7369     5   202     5     5   164     0      64  }
  7370     5   202     5     5   164     0     472  ENDMETHOD
  7371     5   202     5     5   165     0     473  STARTMETHOD
  7372     5   207     5     5   165     0      10  public
  7373     5   207    12     5   165     0     111  ByteOrder
  7374     5   207    22     5   165     0     111  order
  7375     5   207    27     5   165     0      59  (
  7376     5   207    28     5   165     0      60  )
  7377     5   207    30     5   165     0      63  {
  7378     5   209     9     5   165     0      19  return
  7379     5   209    16     5   165     0     111  ByteOrder.BIG_ENDIAN
  7380     5   209    36     5   165     0     102  ;
  7381     5   214     5     5   165     0      64  }
  7382     5   214     5     5   165     0     474  ENDMETHOD
  7383     5   216     1     5    -1     0      64  }
  7384     5   216     1     5    -1     1     475  ENDCLASS
  7385     5   216     1    -1    -1     1     476  ENDFILE C:\javasrc\java\nio\ByteBufferAsCharBufferB.java
  7386     6     1     1    -1    -1     1     477  STARTFILE C:\javasrc\java\nio\ByteBufferAsCharBufferL.java
  7387     6    28     1    -1    -1     0       5  package
  7388     6    28     9    -1    -1     0     111  java.nio
  7389     6    28    17    -1    -1     0     102  ;
  7390     6    31     1     6    -1     0     478  STARTCLASS
  7391     6    31     1     6    -1     0      24  class
  7392     6    31     7     6    -1     0     111  ByteBufferAsCharBufferL
  7393     6    32     5     6    -1     0      38  extends
  7394     6    32    13     6    -1     0     111  CharBuffer
  7395     6    33     1     6    -1     0      63  {
  7396     6    37     5     6    -1     0      23  protected
  7397     6    37    15     6    -1     0       6  final
  7398     6    37    21     6    -1     0     111  ByteBuffer
  7399     6    37    32     6    -1     0     111  bb
  7400     6    37    34     6    -1     0     102  ;
  7401     6    38     5     6    -1     0      23  protected
  7402     6    38    15     6    -1     0       6  final
  7403     6    38    21     6    -1     0      36  int
  7404     6    38    25     6    -1     0     111  offset
  7405     6    38    31     6    -1     0     102  ;
  7406     6    38    31     6   166     0     479  STARTMETHOD
  7407     6    42     5     6   166     0     111  ByteBufferAsCharBufferL
  7408     6    42    28     6   166     0      59  (
  7409     6    42    29     6   166     0     111  ByteBuffer
  7410     6    42    40     6   166     0     111  bb
  7411     6    42    42     6   166     0      60  )
  7412     6    42    44     6   166     0      63  {
  7413     6    44     9     6   166     0      27  super
  7414     6    44    14     6   166     0      59  (
  7415     6    44    15     6   166     0      77  -
  7416     6    44    16     6   166     0     112  1
  7417     6    44    17     6   166     0      66  ,
  7418     6    44    19     6   166     0     112  0
  7419     6    44    20     6   166     0      66  ,
  7420     6    45    15     6   166     0     111  bb.remaining
  7421     6    45    27     6   166     0      59  (
  7422     6    45    28     6   166     0      60  )
  7423     6    45    30     6   166     0      84  >>
  7424     6    45    33     6   166     0     112  1
  7425     6    45    34     6   166     0      66  ,
  7426     6    46    15     6   166     0     111  bb.remaining
  7427     6    46    27     6   166     0      59  (
  7428     6    46    28     6   166     0      60  )
  7429     6    46    30     6   166     0      84  >>
  7430     6    46    33     6   166     0     112  1
  7431     6    46    34     6   166     0      60  )
  7432     6    46    35     6   166     0     102  ;
  7433     6    47     9     6   166     0     111  this.bb
  7434     6    47    17     6   166     0      67  =
  7435     6    47    19     6   166     0     111  bb
  7436     6    47    21     6   166     0     102  ;
  7437     6    49     9     6   166     0      36  int
  7438     6    49    13     6   166     0     111  cap
  7439     6    49    17     6   166     0      67  =
  7440     6    49    19     6   166     0     111  this.capacity
  7441     6    49    32     6   166     0      59  (
  7442     6    49    33     6   166     0      60  )
  7443     6    49    34     6   166     0     102  ;
  7444     6    50     9     6   166     0     111  this.limit
  7445     6    50    19     6   166     0      59  (
  7446     6    50    20     6   166     0     111  cap
  7447     6    50    23     6   166     0      60  )
  7448     6    50    24     6   166     0     102  ;
  7449     6    51     9     6   166     0      36  int
  7450     6    51    13     6   166     0     111  pos
  7451     6    51    17     6   166     0      67  =
  7452     6    51    19     6   166     0     111  this.position
  7453     6    51    32     6   166     0      59  (
  7454     6    51    33     6   166     0      60  )
  7455     6    51    34     6   166     0     102  ;
  7456     6    52     9     6   166     0     111  assert
  7457     6    52    16     6   166     0      59  (
  7458     6    52    17     6   166     0     111  pos
  7459     6    52    21     6   166     0      92  <=
  7460     6    52    24     6   166     0     111  cap
  7461     6    52    27     6   166     0      60  )
  7462     6    52    28     6   166     0     102  ;
  7463     6    53     9     6   166     0     111  offset
  7464     6    53    16     6   166     0      67  =
  7465     6    53    18     6   166     0     111  pos
  7466     6    53    21     6   166     0     102  ;
  7467     6    57     5     6   166     0      64  }
  7468     6    57     5     6   166     0     480  ENDMETHOD
  7469     6    57     5     6   167     0     481  STARTMETHOD
  7470     6    59     5     6   167     0     111  ByteBufferAsCharBufferL
  7471     6    59    28     6   167     0      59  (
  7472     6    59    29     6   167     0     111  ByteBuffer
  7473     6    59    40     6   167     0     111  bb
  7474     6    59    42     6   167     0      66  ,
  7475     6    60    38     6   167     0      36  int
  7476     6    60    42     6   167     0     111  mark
  7477     6    60    46     6   167     0      66  ,
  7478     6    60    48     6   167     0      36  int
  7479     6    60    52     6   167     0     111  pos
  7480     6    60    55     6   167     0      66  ,
  7481     6    60    57     6   167     0      36  int
  7482     6    60    61     6   167     0     111  lim
  7483     6    60    64     6   167     0      66  ,
  7484     6    60    66     6   167     0      36  int
  7485     6    60    70     6   167     0     111  cap
  7486     6    60    73     6   167     0      66  ,
  7487     6    61    38     6   167     0      36  int
  7488     6    61    42     6   167     0     111  off
  7489     6    61    45     6   167     0      60  )
  7490     6    62     5     6   167     0      63  {
  7491     6    64     9     6   167     0      27  super
  7492     6    64    14     6   167     0      59  (
  7493     6    64    15     6   167     0     111  mark
  7494     6    64    19     6   167     0      66  ,
  7495     6    64    21     6   167     0     111  pos
  7496     6    64    24     6   167     0      66  ,
  7497     6    64    26     6   167     0     111  lim
  7498     6    64    29     6   167     0      66  ,
  7499     6    64    31     6   167     0     111  cap
  7500     6    64    34     6   167     0      60  )
  7501     6    64    35     6   167     0     102  ;
  7502     6    65     9     6   167     1     111  this.bb
  7503     6    65    17     6   167     1      67  =
  7504     6    65    19     6   167     1     111  bb
  7505     6    65    21     6   167     1     102  ;
  7506     6    66     9     6   167     1     111  offset
  7507     6    66    16     6   167     1      67  =
  7508     6    66    18     6   167     1     111  off
  7509     6    66    21     6   167     1     102  ;
  7510     6    70     5     6   167     0      64  }
  7511     6    70     5     6   167     0     482  ENDMETHOD
  7512     6    70     5     6   168     0     483  STARTMETHOD
  7513     6    72     5     6   168     0      10  public
  7514     6    72    12     6   168     0     111  CharBuffer
  7515     6    72    23     6   168     0     111  slice
  7516     6    72    28     6   168     0      59  (
  7517     6    72    29     6   168     0      60  )
  7518     6    72    31     6   168     0      63  {
  7519     6    73     9     6   168     1      36  int
  7520     6    73    13     6   168     1     111  pos
  7521     6    73    17     6   168     1      67  =
  7522     6    73    19     6   168     1     111  this.position
  7523     6    73    32     6   168     1      59  (
  7524     6    73    33     6   168     1      60  )
  7525     6    73    34     6   168     1     102  ;
  7526     6    74     9     6   168     1      36  int
  7527     6    74    13     6   168     1     111  lim
  7528     6    74    17     6   168     1      67  =
  7529     6    74    19     6   168     1     111  this.limit
  7530     6    74    29     6   168     1      59  (
  7531     6    74    30     6   168     1      60  )
  7532     6    74    31     6   168     1     102  ;
  7533     6    75     9     6   168     0     111  assert
  7534     6    75    16     6   168     0      59  (
  7535     6    75    17     6   168     0     111  pos
  7536     6    75    21     6   168     0      92  <=
  7537     6    75    24     6   168     0     111  lim
  7538     6    75    27     6   168     0      60  )
  7539     6    75    28     6   168     0     102  ;
  7540     6    76     9     6   168     0      36  int
  7541     6    76    13     6   168     0     111  rem
  7542     6    76    17     6   168     0      67  =
  7543     6    76    19     6   168     0      59  (
  7544     6    76    20     6   168     0     111  pos
  7545     6    76    24     6   168     0      92  <=
  7546     6    76    27     6   168     0     111  lim
  7547     6    76    31     6   168     0      58  ?
  7548     6    76    33     6   168     0     111  lim
  7549     6    76    37     6   168     0      77  -
  7550     6    76    39     6   168     0     111  pos
  7551     6    76    43     6   168     0      65  :
  7552     6    76    45     6   168     0     112  0
  7553     6    76    46     6   168     0      60  )
  7554     6    76    47     6   168     0     102  ;
  7555     6    77     9     6   168     0      36  int
  7556     6    77    13     6   168     0     111  off
  7557     6    77    17     6   168     0      67  =
  7558     6    77    19     6   168     0      59  (
  7559     6    77    20     6   168     0     111  pos
  7560     6    77    24     6   168     0      90  <<
  7561     6    77    27     6   168     0     112  1
  7562     6    77    28     6   168     0      60  )
  7563     6    77    30     6   168     0      74  +
  7564     6    77    32     6   168     0     111  offset
  7565     6    77    38     6   168     0     102  ;
  7566     6    78     9     6   168     0     111  assert
  7567     6    78    16     6   168     0      59  (
  7568     6    78    17     6   168     0     111  off
  7569     6    78    21     6   168     0      88  >=
  7570     6    78    24     6   168     0     112  0
  7571     6    78    25     6   168     0      60  )
  7572     6    78    26     6   168     0     102  ;
  7573     6    79     9     6   168     0      19  return
  7574     6    79    16     6   168     0      15  new
  7575     6    79    20     6   168     0     111  ByteBufferAsCharBufferL
  7576     6    79    43     6   168     0      59  (
  7577     6    79    44     6   168     0     111  bb
  7578     6    79    46     6   168     0      66  ,
  7579     6    79    48     6   168     0      77  -
  7580     6    79    49     6   168     0     112  1
  7581     6    79    50     6   168     0      66  ,
  7582     6    79    52     6   168     0     112  0
  7583     6    79    53     6   168     0      66  ,
  7584     6    79    55     6   168     0     111  rem
  7585     6    79    58     6   168     0      66  ,
  7586     6    79    60     6   168     0     111  rem
  7587     6    79    63     6   168     1      66  ,
  7588     6    79    65     6   168     1     111  off
  7589     6    79    68     6   168     1      60  )
  7590     6    79    69     6   168     1     102  ;
  7591     6    80     5     6   168     1      64  }
  7592     6    80     5     6   168     0     484  ENDMETHOD
  7593     6    80     5     6   169     0     485  STARTMETHOD
  7594     6    82     5     6   169     0      10  public
  7595     6    82    12     6   169     0     111  CharBuffer
  7596     6    82    23     6   169     0     111  duplicate
  7597     6    82    32     6   169     0      59  (
  7598     6    82    33     6   169     0      60  )
  7599     6    82    35     6   169     0      63  {
  7600     6    83     9     6   169     0      19  return
  7601     6    83    16     6   169     0      15  new
  7602     6    83    20     6   169     0     111  ByteBufferAsCharBufferL
  7603     6    83    43     6   169     0      59  (
  7604     6    83    44     6   169     0     111  bb
  7605     6    83    46     6   169     0      66  ,
  7606     6    84    53     6   169     1     111  this.markValue
  7607     6    84    67     6   169     1      59  (
  7608     6    84    68     6   169     1      60  )
  7609     6    84    69     6   169     1      66  ,
  7610     6    85    53     6   169     1     111  this.position
  7611     6    85    66     6   169     1      59  (
  7612     6    85    67     6   169     1      60  )
  7613     6    85    68     6   169     1      66  ,
  7614     6    86    53     6   169     1     111  this.limit
  7615     6    86    63     6   169     1      59  (
  7616     6    86    64     6   169     1      60  )
  7617     6    86    65     6   169     1      66  ,
  7618     6    87    53     6   169     1     111  this.capacity
  7619     6    87    66     6   169     1      59  (
  7620     6    87    67     6   169     1      60  )
  7621     6    87    68     6   169     1      66  ,
  7622     6    88    53     6   169     1     111  offset
  7623     6    88    59     6   169     1      60  )
  7624     6    88    60     6   169     1     102  ;
  7625     6    89     5     6   169     1      64  }
  7626     6    89     5     6   169     0     486  ENDMETHOD
  7627     6    89     5     6   170     0     487  STARTMETHOD
  7628     6    91     5     6   170     0      10  public
  7629     6    91    12     6   170     0     111  CharBuffer
  7630     6    91    23     6   170     0     111  asReadOnlyBuffer
  7631     6    91    39     6   170     0      59  (
  7632     6    91    40     6   170     0      60  )
  7633     6    91    42     6   170     0      63  {
  7634     6    93     9     6   170     0      19  return
  7635     6    93    16     6   170     0      15  new
  7636     6    93    20     6   170     0     111  ByteBufferAsCharBufferRL
  7637     6    93    44     6   170     0      59  (
  7638     6    93    45     6   170     0     111  bb
  7639     6    93    47     6   170     0      66  ,
  7640     6    94    50     6   170     1     111  this.markValue
  7641     6    94    64     6   170     1      59  (
  7642     6    94    65     6   170     1      60  )
  7643     6    94    66     6   170     1      66  ,
  7644     6    95    50     6   170     1     111  this.position
  7645     6    95    63     6   170     1      59  (
  7646     6    95    64     6   170     1      60  )
  7647     6    95    65     6   170     1      66  ,
  7648     6    96    50     6   170     1     111  this.limit
  7649     6    96    60     6   170     1      59  (
  7650     6    96    61     6   170     1      60  )
  7651     6    96    62     6   170     1      66  ,
  7652     6    97    50     6   170     1     111  this.capacity
  7653     6    97    63     6   170     1      59  (
  7654     6    97    64     6   170     1      60  )
  7655     6    97    65     6   170     1      66  ,
  7656     6    98    50     6   170     1     111  offset
  7657     6    98    56     6   170     1      60  )
  7658     6    98    57     6   170     1     102  ;
  7659     6   102     5     6   170     1      64  }
  7660     6   102     5     6   170     0     488  ENDMETHOD
  7661     6   102     5     6   171     0     489  STARTMETHOD
  7662     6   106     5     6   171     0      23  protected
  7663     6   106    15     6   171     0      36  int
  7664     6   106    19     6   171     0     111  ix
  7665     6   106    21     6   171     0      59  (
  7666     6   106    22     6   171     0      36  int
  7667     6   106    26     6   171     0     111  i
  7668     6   106    27     6   171     0      60  )
  7669     6   106    29     6   171     0      63  {
  7670     6   107     9     6   171     0      19  return
  7671     6   107    16     6   171     0      59  (
  7672     6   107    17     6   171     0     111  i
  7673     6   107    19     6   171     0      90  <<
  7674     6   107    22     6   171     0     112  1
  7675     6   107    23     6   171     0      60  )
  7676     6   107    25     6   171     0      74  +
  7677     6   107    27     6   171     0     111  offset
  7678     6   107    33     6   171     0     102  ;
  7679     6   108     5     6   171     0      64  }
  7680     6   108     5     6   171     0     490  ENDMETHOD
  7681     6   108     5     6   172     0     491  STARTMETHOD
  7682     6   110     5     6   172     0      10  public
  7683     6   110    12     6   172     0      40  char
  7684     6   110    17     6   172     0     111  get
  7685     6   110    20     6   172     0      59  (
  7686     6   110    21     6   172     0      60  )
  7687     6   110    23     6   172     0      63  {
  7688     6   111     9     6   172     0      19  return
  7689     6   111    16     6   172     0     111  Bits.getCharL
  7690     6   111    29     6   172     0      59  (
  7691     6   111    30     6   172     0     111  bb
  7692     6   111    32     6   172     0      66  ,
  7693     6   111    34     6   172     0     111  ix
  7694     6   111    36     6   172     0      59  (
  7695     6   111    37     6   172     0     111  nextGetIndex
  7696     6   111    49     6   172     0      59  (
  7697     6   111    50     6   172     0      60  )
  7698     6   111    51     6   172     0      60  )
  7699     6   111    52     6   172     0      60  )
  7700     6   111    53     6   172     0     102  ;
  7701     6   112     5     6   172     0      64  }
  7702     6   112     5     6   172     0     492  ENDMETHOD
  7703     6   112     5     6   173     0     493  STARTMETHOD
  7704     6   114     5     6   173     0      10  public
  7705     6   114    12     6   173     0      40  char
  7706     6   114    17     6   173     0     111  get
  7707     6   114    20     6   173     0      59  (
  7708     6   114    21     6   173     0      36  int
  7709     6   114    25     6   173     0     111  i
  7710     6   114    26     6   173     0      60  )
  7711     6   114    28     6   173     0      63  {
  7712     6   115     9     6   173     0      19  return
  7713     6   115    16     6   173     0     111  Bits.getCharL
  7714     6   115    29     6   173     0      59  (
  7715     6   115    30     6   173     0     111  bb
  7716     6   115    32     6   173     0      66  ,
  7717     6   115    34     6   173     0     111  ix
  7718     6   115    36     6   173     0      59  (
  7719     6   115    37     6   173     0     111  checkIndex
  7720     6   115    47     6   173     0      59  (
  7721     6   115    48     6   173     0     111  i
  7722     6   115    49     6   173     0      60  )
  7723     6   115    50     6   173     0      60  )
  7724     6   115    51     6   173     0      60  )
  7725     6   115    52     6   173     0     102  ;
  7726     6   116     5     6   173     0      64  }
  7727     6   116     5     6   173     0     494  ENDMETHOD
  7728     6   116     5     6   174     0     495  STARTMETHOD
  7729     6   120     5     6   174     0      10  public
  7730     6   120    12     6   174     0     111  CharBuffer
  7731     6   120    23     6   174     0     111  put
  7732     6   120    26     6   174     0      59  (
  7733     6   120    27     6   174     0      40  char
  7734     6   120    32     6   174     0     111  x
  7735     6   120    33     6   174     0      60  )
  7736     6   120    35     6   174     0      63  {
  7737     6   122     9     6   174     0     111  Bits.putCharL
  7738     6   122    22     6   174     0      59  (
  7739     6   122    23     6   174     0     111  bb
  7740     6   122    25     6   174     0      66  ,
  7741     6   122    27     6   174     0     111  ix
  7742     6   122    29     6   174     0      59  (
  7743     6   122    30     6   174     0     111  nextPutIndex
  7744     6   122    42     6   174     0      59  (
  7745     6   122    43     6   174     0      60  )
  7746     6   122    44     6   174     0      60  )
  7747     6   122    45     6   174     0      66  ,
  7748     6   122    47     6   174     0     111  x
  7749     6   122    48     6   174     0      60  )
  7750     6   122    49     6   174     0     102  ;
  7751     6   123     9     6   174     0      19  return
  7752     6   123    16     6   174     0      44  this
  7753     6   123    20     6   174     0     102  ;
  7754     6   127     5     6   174     0      64  }
  7755     6   127     5     6   174     0     496  ENDMETHOD
  7756     6   127     5     6   175     0     497  STARTMETHOD
  7757     6   129     5     6   175     0      10  public
  7758     6   129    12     6   175     0     111  CharBuffer
  7759     6   129    23     6   175     0     111  put
  7760     6   129    26     6   175     0      59  (
  7761     6   129    27     6   175     0      36  int
  7762     6   129    31     6   175     0     111  i
  7763     6   129    32     6   175     0      66  ,
  7764     6   129    34     6   175     0      40  char
  7765     6   129    39     6   175     0     111  x
  7766     6   129    40     6   175     0      60  )
  7767     6   129    42     6   175     0      63  {
  7768     6   131     9     6   175     0     111  Bits.putCharL
  7769     6   131    22     6   175     0      59  (
  7770     6   131    23     6   175     0     111  bb
  7771     6   131    25     6   175     0      66  ,
  7772     6   131    27     6   175     0     111  ix
  7773     6   131    29     6   175     0      59  (
  7774     6   131    30     6   175     0     111  checkIndex
  7775     6   131    40     6   175     0      59  (
  7776     6   131    41     6   175     0     111  i
  7777     6   131    42     6   175     0      60  )
  7778     6   131    43     6   175     0      60  )
  7779     6   131    44     6   175     0      66  ,
  7780     6   131    46     6   175     0     111  x
  7781     6   131    47     6   175     0      60  )
  7782     6   131    48     6   175     0     102  ;
  7783     6   132     9     6   175     0      19  return
  7784     6   132    16     6   175     0      44  this
  7785     6   132    20     6   175     0     102  ;
  7786     6   136     5     6   175     0      64  }
  7787     6   136     5     6   175     0     498  ENDMETHOD
  7788     6   136     5     6   176     0     499  STARTMETHOD
  7789     6   138     5     6   176     0      10  public
  7790     6   138    12     6   176     0     111  CharBuffer
  7791     6   138    23     6   176     0     111  compact
  7792     6   138    30     6   176     0      59  (
  7793     6   138    31     6   176     0      60  )
  7794     6   138    33     6   176     0      63  {
  7795     6   140     9     6   176     1      36  int
  7796     6   140    13     6   176     1     111  pos
  7797     6   140    17     6   176     1      67  =
  7798     6   140    19     6   176     1     111  position
  7799     6   140    27     6   176     1      59  (
  7800     6   140    28     6   176     1      60  )
  7801     6   140    29     6   176     1     102  ;
  7802     6   141     9     6   176     1      36  int
  7803     6   141    13     6   176     1     111  lim
  7804     6   141    17     6   176     1      67  =
  7805     6   141    19     6   176     1     111  limit
  7806     6   141    24     6   176     1      59  (
  7807     6   141    25     6   176     1      60  )
  7808     6   141    26     6   176     1     102  ;
  7809     6   142     9     6   176     0     111  assert
  7810     6   142    16     6   176     0      59  (
  7811     6   142    17     6   176     0     111  pos
  7812     6   142    21     6   176     0      92  <=
  7813     6   142    24     6   176     0     111  lim
  7814     6   142    27     6   176     0      60  )
  7815     6   142    28     6   176     0     102  ;
  7816     6   143     9     6   176     0      36  int
  7817     6   143    13     6   176     0     111  rem
  7818     6   143    17     6   176     0      67  =
  7819     6   143    19     6   176     0      59  (
  7820     6   143    20     6   176     0     111  pos
  7821     6   143    24     6   176     0      92  <=
  7822     6   143    27     6   176     0     111  lim
  7823     6   143    31     6   176     0      58  ?
  7824     6   143    33     6   176     0     111  lim
  7825     6   143    37     6   176     0      77  -
  7826     6   143    39     6   176     0     111  pos
  7827     6   143    43     6   176     0      65  :
  7828     6   143    45     6   176     0     112  0
  7829     6   143    46     6   176     0      60  )
  7830     6   143    47     6   176     0     102  ;
  7831     6   145     9     6   176     0     111  ByteBuffer
  7832     6   145    20     6   176     0     111  db
  7833     6   145    23     6   176     0      67  =
  7834     6   145    25     6   176     0     111  bb.duplicate
  7835     6   145    37     6   176     0      59  (
  7836     6   145    38     6   176     0      60  )
  7837     6   145    39     6   176     0     102  ;
  7838     6   146     9     6   176     0     111  db.limit
  7839     6   146    17     6   176     0      59  (
  7840     6   146    18     6   176     0     111  ix
  7841     6   146    20     6   176     0      59  (
  7842     6   146    21     6   176     0     111  lim
  7843     6   146    24     6   176     0      60  )
  7844     6   146    25     6   176     0      60  )
  7845     6   146    26     6   176     0     102  ;
  7846     6   147     9     6   176     0     111  db.position
  7847     6   147    20     6   176     0      59  (
  7848     6   147    21     6   176     0     111  ix
  7849     6   147    23     6   176     0      59  (
  7850     6   147    24     6   176     0     112  0
  7851     6   147    25     6   176     0      60  )
  7852     6   147    26     6   176     0      60  )
  7853     6   147    27     6   176     0     102  ;
  7854     6   148     9     6   176     0     111  ByteBuffer
  7855     6   148    20     6   176     0     111  sb
  7856     6   148    23     6   176     0      67  =
  7857     6   148    25     6   176     0     111  db.slice
  7858     6   148    33     6   176     0      59  (
  7859     6   148    34     6   176     0      60  )
  7860     6   148    35     6   176     0     102  ;
  7861     6   149     9     6   176     0     111  sb.position
  7862     6   149    20     6   176     0      59  (
  7863     6   149    21     6   176     0     111  pos
  7864     6   149    25     6   176     0      90  <<
  7865     6   149    28     6   176     0     112  1
  7866     6   149    29     6   176     0      60  )
  7867     6   149    30     6   176     0     102  ;
  7868     6   150     9     6   176     0     111  sb.compact
  7869     6   150    19     6   176     0      59  (
  7870     6   150    20     6   176     0      60  )
  7871     6   150    21     6   176     0     102  ;
  7872     6   151     9     6   176     0     111  position
  7873     6   151    17     6   176     0      59  (
  7874     6   151    18     6   176     0     111  rem
  7875     6   151    21     6   176     0      60  )
  7876     6   151    22     6   176     0     102  ;
  7877     6   152     9     6   176     0     111  limit
  7878     6   152    14     6   176     0      59  (
  7879     6   152    15     6   176     0     111  capacity
  7880     6   152    23     6   176     0      59  (
  7881     6   152    24     6   176     0      60  )
  7882     6   152    25     6   176     0      60  )
  7883     6   152    26     6   176     0     102  ;
  7884     6   153     9     6   176     0      19  return
  7885     6   153    16     6   176     0      44  this
  7886     6   153    20     6   176     0     102  ;
  7887     6   157     5     6   176     0      64  }
  7888     6   157     5     6   176     0     500  ENDMETHOD
  7889     6   157     5     6   177     0     501  STARTMETHOD
  7890     6   159     5     6   177     0      10  public
  7891     6   159    12     6   177     0      39  boolean
  7892     6   159    20     6   177     0     111  isDirect
  7893     6   159    28     6   177     0      59  (
  7894     6   159    29     6   177     0      60  )
  7895     6   159    31     6   177     0      63  {
  7896     6   160     9     6   177     0      19  return
  7897     6   160    16     6   177     0     111  bb.isDirect
  7898     6   160    27     6   177     0      59  (
  7899     6   160    28     6   177     0      60  )
  7900     6   160    29     6   177     0     102  ;
  7901     6   161     5     6   177     0      64  }
  7902     6   161     5     6   177     0     502  ENDMETHOD
  7903     6   161     5     6   178     0     503  STARTMETHOD
  7904     6   163     5     6   178     0      10  public
  7905     6   163    12     6   178     0      39  boolean
  7906     6   163    20     6   178     0     111  isReadOnly
  7907     6   163    30     6   178     0      59  (
  7908     6   163    31     6   178     0      60  )
  7909     6   163    33     6   178     0      63  {
  7910     6   164     9     6   178     0      19  return
  7911     6   164    16     6   178     0      43  false
  7912     6   164    21     6   178     0     102  ;
  7913     6   165     5     6   178     0      64  }
  7914     6   165     5     6   178     0     504  ENDMETHOD
  7915     6   165     5     6   179     0     505  STARTMETHOD
  7916     6   169     5     6   179     0      10  public
  7917     6   169    12     6   179     0     111  String
  7918     6   169    19     6   179     0     111  toString
  7919     6   169    27     6   179     0      59  (
  7920     6   169    28     6   179     0      36  int
  7921     6   169    32     6   179     0     111  start
  7922     6   169    37     6   179     0      66  ,
  7923     6   169    39     6   179     0      36  int
  7924     6   169    43     6   179     0     111  end
  7925     6   169    46     6   179     0      60  )
  7926     6   169    48     6   179     0      63  {
  7927     6   170     9     6   179     0      31  if
  7928     6   170    12     6   179     0      59  (
  7929     6   170    13     6   179     0      59  (
  7930     6   170    14     6   179     0     111  end
  7931     6   170    18     6   179     0      89  >
  7932     6   170    20     6   179     0     111  limit
  7933     6   170    25     6   179     0      59  (
  7934     6   170    26     6   179     0      60  )
  7935     6   170    27     6   179     0      60  )
  7936     6   170    29     6   179     0      98  ||
  7937     6   170    32     6   179     0      59  (
  7938     6   170    33     6   179     0     111  start
  7939     6   170    39     6   179     0      89  >
  7940     6   170    41     6   179     0     111  end
  7941     6   170    44     6   179     0      60  )
  7942     6   170    45     6   179     0      60  )
  7943     6   171    13     6   179     0      20  throw
  7944     6   171    19     6   179     0      15  new
  7945     6   171    23     6   179     0     111  IndexOutOfBoundsException
  7946     6   171    48     6   179     0      59  (
  7947     6   171    49     6   179     0      60  )
  7948     6   171    50     6   179     0     102  ;
  7949     6   172     9     6   179     0      35  try
  7950     6   172    13     6   179     0      63  {
  7951     6   173    13     6   179     0      36  int
  7952     6   173    17     6   179     0     111  len
  7953     6   173    21     6   179     0      67  =
  7954     6   173    23     6   179     0     111  end
  7955     6   173    27     6   179     0      77  -
  7956     6   173    29     6   179     0     111  start
  7957     6   173    34     6   179     0     102  ;
  7958     6   174    13     6   179     0      40  char
  7959     6   174    17     6   179     0      61  [
  7960     6   174    18     6   179     0      62  ]
  7961     6   174    20     6   179     0     111  ca
  7962     6   174    23     6   179     0      67  =
  7963     6   174    25     6   179     0      15  new
  7964     6   174    29     6   179     0      40  char
  7965     6   174    33     6   179     0      61  [
  7966     6   174    34     6   179     0     111  len
  7967     6   174    37     6   179     0      62  ]
  7968     6   174    38     6   179     0     102  ;
  7969     6   175    13     6   179     0     111  CharBuffer
  7970     6   175    24     6   179     0     111  cb
  7971     6   175    27     6   179     0      67  =
  7972     6   175    29     6   179     0     111  CharBuffer.wrap
  7973     6   175    44     6   179     0      59  (
  7974     6   175    45     6   179     0     111  ca
  7975     6   175    47     6   179     0      60  )
  7976     6   175    48     6   179     0     102  ;
  7977     6   176    13     6   179     0     111  CharBuffer
  7978     6   176    24     6   179     0     111  db
  7979     6   176    27     6   179     0      67  =
  7980     6   176    29     6   179     0     111  this.duplicate
  7981     6   176    43     6   179     0      59  (
  7982     6   176    44     6   179     0      60  )
  7983     6   176    45     6   179     0     102  ;
  7984     6   177    13     6   179     1     111  db.position
  7985     6   177    24     6   179     1      59  (
  7986     6   177    25     6   179     1     111  start
  7987     6   177    30     6   179     1      60  )
  7988     6   177    31     6   179     1     102  ;
  7989     6   178    13     6   179     1     111  db.limit
  7990     6   178    21     6   179     1      59  (
  7991     6   178    22     6   179     1     111  end
  7992     6   178    25     6   179     1      60  )
  7993     6   178    26     6   179     1     102  ;
  7994     6   179    13     6   179     1     111  cb.put
  7995     6   179    19     6   179     1      59  (
  7996     6   179    20     6   179     1     111  db
  7997     6   179    22     6   179     1      60  )
  7998     6   179    23     6   179     1     102  ;
  7999     6   180    13     6   179     0      19  return
  8000     6   180    20     6   179     0      15  new
  8001     6   180    24     6   179     0     111  String
  8002     6   180    30     6   179     0      59  (
  8003     6   180    31     6   179     0     111  ca
  8004     6   180    33     6   179     0      60  )
  8005     6   180    34     6   179     0     102  ;
  8006     6   181     9     6   179     0      64  }
  8007     6   181    11     6   179     0      34  catch
  8008     6   181    17     6   179     0      59  (
  8009     6   181    18     6   179     0     111  StringIndexOutOfBoundsException
  8010     6   181    50     6   179     0     111  x
  8011     6   181    51     6   179     0      60  )
  8012     6   181    53     6   179     0      63  {
  8013     6   182    13     6   179     0      20  throw
  8014     6   182    19     6   179     0      15  new
  8015     6   182    23     6   179     0     111  IndexOutOfBoundsException
  8016     6   182    48     6   179     0      59  (
  8017     6   182    49     6   179     0      60  )
  8018     6   182    50     6   179     0     102  ;
  8019     6   183     9     6   179     0      64  }
  8020     6   184     5     6   179     0      64  }
  8021     6   184     5     6   179     0     506  ENDMETHOD
  8022     6   184     5     6   180     0     507  STARTMETHOD
  8023     6   189     5     6   180     0      10  public
  8024     6   189    12     6   180     0     111  CharSequence
  8025     6   189    25     6   180     0     111  subSequence
  8026     6   189    36     6   180     0      59  (
  8027     6   189    37     6   180     0      36  int
  8028     6   189    41     6   180     0     111  start
  8029     6   189    46     6   180     0      66  ,
  8030     6   189    48     6   180     0      36  int
  8031     6   189    52     6   180     0     111  end
  8032     6   189    55     6   180     0      60  )
  8033     6   189    57     6   180     0      63  {
  8034     6   190     9     6   180     1      36  int
  8035     6   190    13     6   180     1     111  pos
  8036     6   190    17     6   180     1      67  =
  8037     6   190    19     6   180     1     111  position
  8038     6   190    27     6   180     1      59  (
  8039     6   190    28     6   180     1      60  )
  8040     6   190    29     6   180     1     102  ;
  8041     6   191     9     6   180     1      36  int
  8042     6   191    13     6   180     1     111  lim
  8043     6   191    17     6   180     1      67  =
  8044     6   191    19     6   180     1     111  limit
  8045     6   191    24     6   180     1      59  (
  8046     6   191    25     6   180     1      60  )
  8047     6   191    26     6   180     1     102  ;
  8048     6   192     9     6   180     0     111  assert
  8049     6   192    16     6   180     0      59  (
  8050     6   192    17     6   180     0     111  pos
  8051     6   192    21     6   180     0      92  <=
  8052     6   192    24     6   180     0     111  lim
  8053     6   192    27     6   180     0      60  )
  8054     6   192    28     6   180     0     102  ;
  8055     6   193     9     6   180     0     111  pos
  8056     6   193    13     6   180     0      67  =
  8057     6   193    15     6   180     0      59  (
  8058     6   193    16     6   180     0     111  pos
  8059     6   193    20     6   180     0      92  <=
  8060     6   193    23     6   180     0     111  lim
  8061     6   193    27     6   180     0      58  ?
  8062     6   193    29     6   180     0     111  pos
  8063     6   193    33     6   180     0      65  :
  8064     6   193    35     6   180     0     111  lim
  8065     6   193    38     6   180     0      60  )
  8066     6   193    39     6   180     0     102  ;
  8067     6   194     9     6   180     0      36  int
  8068     6   194    13     6   180     0     111  len
  8069     6   194    17     6   180     0      67  =
  8070     6   194    19     6   180     0     111  lim
  8071     6   194    23     6   180     0      77  -
  8072     6   194    25     6   180     0     111  pos
  8073     6   194    28     6   180     0     102  ;
  8074     6   196     9     6   180     0      31  if
  8075     6   196    12     6   180     0      59  (
  8076     6   196    13     6   180     0      59  (
  8077     6   196    14     6   180     0     111  start
  8078     6   196    20     6   180     0      93  <
  8079     6   196    22     6   180     0     112  0
  8080     6   196    23     6   180     0      60  )
  8081     6   196    25     6   180     0      98  ||
  8082     6   196    28     6   180     0      59  (
  8083     6   196    29     6   180     0     111  end
  8084     6   196    33     6   180     0      89  >
  8085     6   196    35     6   180     0     111  len
  8086     6   196    38     6   180     0      60  )
  8087     6   196    40     6   180     0      98  ||
  8088     6   196    43     6   180     0      59  (
  8089     6   196    44     6   180     0     111  start
  8090     6   196    50     6   180     0      89  >
  8091     6   196    52     6   180     0     111  end
  8092     6   196    55     6   180     0      60  )
  8093     6   196    56     6   180     0      60  )
  8094     6   197    13     6   180     0      20  throw
  8095     6   197    19     6   180     0      15  new
  8096     6   197    23     6   180     0     111  IndexOutOfBoundsException
  8097     6   197    48     6   180     0      59  (
  8098     6   197    49     6   180     0      60  )
  8099     6   197    50     6   180     0     102  ;
  8100     6   198     9     6   180     0      36  int
  8101     6   198    13     6   180     0     111  sublen
  8102     6   198    20     6   180     0      67  =
  8103     6   198    22     6   180     0     111  end
  8104     6   198    26     6   180     0      77  -
  8105     6   198    28     6   180     0     111  start
  8106     6   198    33     6   180     0     102  ;
  8107     6   199     9     6   180     0      36  int
  8108     6   199    13     6   180     0     111  off
  8109     6   199    17     6   180     0      67  =
  8110     6   199    19     6   180     0     111  offset
  8111     6   199    26     6   180     0      74  +
  8112     6   199    28     6   180     0      59  (
  8113     6   199    29     6   180     0      59  (
  8114     6   199    30     6   180     0     111  pos
  8115     6   199    34     6   180     0      74  +
  8116     6   199    36     6   180     0     111  start
  8117     6   199    41     6   180     0      60  )
  8118     6   199    43     6   180     0      90  <<
  8119     6   199    46     6   180     0     112  1
  8120     6   199    47     6   180     0      60  )
  8121     6   199    48     6   180     0     102  ;
  8122     6   200     9     6   180     0     111  assert
  8123     6   200    16     6   180     0      59  (
  8124     6   200    17     6   180     0     111  off
  8125     6   200    21     6   180     0      88  >=
  8126     6   200    24     6   180     0     112  0
  8127     6   200    25     6   180     0      60  )
  8128     6   200    26     6   180     0     102  ;
  8129     6   201     9     6   180     0      19  return
  8130     6   201    16     6   180     0      15  new
  8131     6   201    20     6   180     0     111  ByteBufferAsCharBufferL
  8132     6   201    43     6   180     0      59  (
  8133     6   201    44     6   180     0     111  bb
  8134     6   201    46     6   180     0      66  ,
  8135     6   201    48     6   180     0      77  -
  8136     6   201    49     6   180     0     112  1
  8137     6   201    50     6   180     0      66  ,
  8138     6   201    52     6   180     0     112  0
  8139     6   201    53     6   180     0      66  ,
  8140     6   201    55     6   180     0     111  sublen
  8141     6   201    61     6   180     0      66  ,
  8142     6   201    63     6   180     0     111  sublen
  8143     6   201    69     6   180     0      66  ,
  8144     6   201    71     6   180     1     111  off
  8145     6   201    74     6   180     1      60  )
  8146     6   201    75     6   180     0     102  ;
  8147     6   202     5     6   180     0      64  }
  8148     6   202     5     6   180     0     508  ENDMETHOD
  8149     6   202     5     6   181     0     509  STARTMETHOD
  8150     6   207     5     6   181     0      10  public
  8151     6   207    12     6   181     0     111  ByteOrder
  8152     6   207    22     6   181     0     111  order
  8153     6   207    27     6   181     0      59  (
  8154     6   207    28     6   181     0      60  )
  8155     6   207    30     6   181     0      63  {
  8156     6   212     9     6   181     0      19  return
  8157     6   212    16     6   181     0     111  ByteOrder.LITTLE_ENDIAN
  8158     6   212    39     6   181     0     102  ;
  8159     6   214     5     6   181     0      64  }
  8160     6   214     5     6   181     0     510  ENDMETHOD
  8161     6   216     1     6    -1     0      64  }
  8162     6   216     1     6    -1     1     511  ENDCLASS
  8163     6   216     1    -1    -1     1     512  ENDFILE C:\javasrc\java\nio\ByteBufferAsCharBufferL.java
  8164     7     1     1    -1    -1     1     513  STARTFILE C:\javasrc\java\nio\ByteBufferAsCharBufferRB.java
  8165     7    28     1    -1    -1     0       5  package
  8166     7    28     9    -1    -1     0     111  java.nio
  8167     7    28    17    -1    -1     0     102  ;
  8168     7    31     1     7    -1     0     514  STARTCLASS
  8169     7    31     1     7    -1     0      24  class
  8170     7    31     7     7    -1     0     111  ByteBufferAsCharBufferRB
  8171     7    32     5     7    -1     0      38  extends
  8172     7    32    13     7    -1     0     111  ByteBufferAsCharBufferB
  8173     7    33     1     7    -1     0      63  {
  8174     7    33     1     7   182     0     515  STARTMETHOD
  8175     7    42     5     7   182     0     111  ByteBufferAsCharBufferRB
  8176     7    42    29     7   182     0      59  (
  8177     7    42    30     7   182     0     111  ByteBuffer
  8178     7    42    41     7   182     0     111  bb
  8179     7    42    43     7   182     0      60  )
  8180     7    42    45     7   182     0      63  {
  8181     7    55     9     7   182     0      27  super
  8182     7    55    14     7   182     0      59  (
  8183     7    55    15     7   182     1     111  bb
  8184     7    55    17     7   182     1      60  )
  8185     7    55    18     7   182     0     102  ;
  8186     7    57     5     7   182     0      64  }
  8187     7    57     5     7   182     0     516  ENDMETHOD
  8188     7    57     5     7   183     0     517  STARTMETHOD
  8189     7    59     5     7   183     0     111  ByteBufferAsCharBufferRB
  8190     7    59    29     7   183     0      59  (
  8191     7    59    30     7   183     0     111  ByteBuffer
  8192     7    59    41     7   183     0     111  bb
  8193     7    59    43     7   183     0      66  ,
  8194     7    60    38     7   183     0      36  int
  8195     7    60    42     7   183     0     111  mark
  8196     7    60    46     7   183     0      66  ,
  8197     7    60    48     7   183     0      36  int
  8198     7    60    52     7   183     0     111  pos
  8199     7    60    55     7   183     0      66  ,
  8200     7    60    57     7   183     0      36  int
  8201     7    60    61     7   183     0     111  lim
  8202     7    60    64     7   183     0      66  ,
  8203     7    60    66     7   183     0      36  int
  8204     7    60    70     7   183     0     111  cap
  8205     7    60    73     7   183     0      66  ,
  8206     7    61    38     7   183     0      36  int
  8207     7    61    42     7   183     0     111  off
  8208     7    61    45     7   183     0      60  )
  8209     7    62     5     7   183     0      63  {
  8210     7    68     9     7   183     0      27  super
  8211     7    68    14     7   183     0      59  (
  8212     7    68    15     7   183     0     111  bb
  8213     7    68    17     7   183     0      66  ,
  8214     7    68    19     7   183     0     111  mark
  8215     7    68    23     7   183     0      66  ,
  8216     7    68    25     7   183     0     111  pos
  8217     7    68    28     7   183     0      66  ,
  8218     7    68    30     7   183     0     111  lim
  8219     7    68    33     7   183     0      66  ,
  8220     7    68    35     7   183     0     111  cap
  8221     7    68    38     7   183     0      66  ,
  8222     7    68    40     7   183     1     111  off
  8223     7    68    43     7   183     1      60  )
  8224     7    68    44     7   183     0     102  ;
  8225     7    70     5     7   183     0      64  }
  8226     7    70     5     7   183     0     518  ENDMETHOD
  8227     7    70     5     7   184     0     519  STARTMETHOD
  8228     7    72     5     7   184     0      10  public
  8229     7    72    12     7   184     0     111  CharBuffer
  8230     7    72    23     7   184     0     111  slice
  8231     7    72    28     7   184     0      59  (
  8232     7    72    29     7   184     0      60  )
  8233     7    72    31     7   184     0      63  {
  8234     7    73     9     7   184     1      36  int
  8235     7    73    13     7   184     1     111  pos
  8236     7    73    17     7   184     1      67  =
  8237     7    73    19     7   184     1     111  this.position
  8238     7    73    32     7   184     1      59  (
  8239     7    73    33     7   184     1      60  )
  8240     7    73    34     7   184     1     102  ;
  8241     7    74     9     7   184     1      36  int
  8242     7    74    13     7   184     1     111  lim
  8243     7    74    17     7   184     1      67  =
  8244     7    74    19     7   184     1     111  this.limit
  8245     7    74    29     7   184     1      59  (
  8246     7    74    30     7   184     1      60  )
  8247     7    74    31     7   184     1     102  ;
  8248     7    75     9     7   184     0     111  assert
  8249     7    75    16     7   184     0      59  (
  8250     7    75    17     7   184     0     111  pos
  8251     7    75    21     7   184     0      92  <=
  8252     7    75    24     7   184     0     111  lim
  8253     7    75    27     7   184     0      60  )
  8254     7    75    28     7   184     0     102  ;
  8255     7    76     9     7   184     0      36  int
  8256     7    76    13     7   184     0     111  rem
  8257     7    76    17     7   184     0      67  =
  8258     7    76    19     7   184     0      59  (
  8259     7    76    20     7   184     0     111  pos
  8260     7    76    24     7   184     0      92  <=
  8261     7    76    27     7   184     0     111  lim
  8262     7    76    31     7   184     0      58  ?
  8263     7    76    33     7   184     0     111  lim
  8264     7    76    37     7   184     0      77  -
  8265     7    76    39     7   184     0     111  pos
  8266     7    76    43     7   184     0      65  :
  8267     7    76    45     7   184     0     112  0
  8268     7    76    46     7   184     0      60  )
  8269     7    76    47     7   184     0     102  ;
  8270     7    77     9     7   184     0      36  int
  8271     7    77    13     7   184     0     111  off
  8272     7    77    17     7   184     0      67  =
  8273     7    77    19     7   184     0      59  (
  8274     7    77    20     7   184     0     111  pos
  8275     7    77    24     7   184     0      90  <<
  8276     7    77    27     7   184     0     112  1
  8277     7    77    28     7   184     0      60  )
  8278     7    77    30     7   184     0      74  +
  8279     7    77    32     7   184     0     111  offset
  8280     7    77    38     7   184     0     102  ;
  8281     7    78     9     7   184     0     111  assert
  8282     7    78    16     7   184     0      59  (
  8283     7    78    17     7   184     0     111  off
  8284     7    78    21     7   184     0      88  >=
  8285     7    78    24     7   184     0     112  0
  8286     7    78    25     7   184     0      60  )
  8287     7    78    26     7   184     0     102  ;
  8288     7    79     9     7   184     0      19  return
  8289     7    79    16     7   184     0      15  new
  8290     7    79    20     7   184     0     111  ByteBufferAsCharBufferRB
  8291     7    79    44     7   184     0      59  (
  8292     7    79    45     7   184     0     111  bb
  8293     7    79    47     7   184     0      66  ,
  8294     7    79    49     7   184     0      77  -
  8295     7    79    50     7   184     0     112  1
  8296     7    79    51     7   184     0      66  ,
  8297     7    79    53     7   184     0     112  0
  8298     7    79    54     7   184     0      66  ,
  8299     7    79    56     7   184     0     111  rem
  8300     7    79    59     7   184     0      66  ,
  8301     7    79    61     7   184     0     111  rem
  8302     7    79    64     7   184     0      66  ,
  8303     7    79    66     7   184     0     111  off
  8304     7    79    69     7   184     0      60  )
  8305     7    79    70     7   184     0     102  ;
  8306     7    80     5     7   184     0      64  }
  8307     7    80     5     7   184     0     520  ENDMETHOD
  8308     7    80     5     7   185     0     521  STARTMETHOD
  8309     7    82     5     7   185     0      10  public
  8310     7    82    12     7   185     0     111  CharBuffer
  8311     7    82    23     7   185     0     111  duplicate
  8312     7    82    32     7   185     0      59  (
  8313     7    82    33     7   185     0      60  )
  8314     7    82    35     7   185     0      63  {
  8315     7    83     9     7   185     0      19  return
  8316     7    83    16     7   185     0      15  new
  8317     7    83    20     7   185     0     111  ByteBufferAsCharBufferRB
  8318     7    83    44     7   185     0      59  (
  8319     7    83    45     7   185     0     111  bb
  8320     7    83    47     7   185     0      66  ,
  8321     7    84    53     7   185     1     111  this.markValue
  8322     7    84    67     7   185     1      59  (
  8323     7    84    68     7   185     1      60  )
  8324     7    84    69     7   185     1      66  ,
  8325     7    85    53     7   185     1     111  this.position
  8326     7    85    66     7   185     1      59  (
  8327     7    85    67     7   185     1      60  )
  8328     7    85    68     7   185     1      66  ,
  8329     7    86    53     7   185     1     111  this.limit
  8330     7    86    63     7   185     1      59  (
  8331     7    86    64     7   185     1      60  )
  8332     7    86    65     7   185     1      66  ,
  8333     7    87    53     7   185     1     111  this.capacity
  8334     7    87    66     7   185     1      59  (
  8335     7    87    67     7   185     1      60  )
  8336     7    87    68     7   185     1      66  ,
  8337     7    88    53     7   185     0     111  offset
  8338     7    88    59     7   185     0      60  )
  8339     7    88    60     7   185     0     102  ;
  8340     7    89     5     7   185     0      64  }
  8341     7    89     5     7   185     0     522  ENDMETHOD
  8342     7    89     5     7   186     0     523  STARTMETHOD
  8343     7    91     5     7   186     0      10  public
  8344     7    91    12     7   186     0     111  CharBuffer
  8345     7    91    23     7   186     0     111  asReadOnlyBuffer
  8346     7    91    39     7   186     0      59  (
  8347     7    91    40     7   186     0      60  )
  8348     7    91    42     7   186     0      63  {
  8349     7   100     9     7   186     0      19  return
  8350     7   100    16     7   186     0     111  duplicate
  8351     7   100    25     7   186     0      59  (
  8352     7   100    26     7   186     0      60  )
  8353     7   100    27     7   186     0     102  ;
  8354     7   102     5     7   186     0      64  }
  8355     7   102     5     7   186     0     524  ENDMETHOD
  8356     7   102     5     7   187     0     525  STARTMETHOD
  8357     7   120     5     7   187     0      10  public
  8358     7   120    12     7   187     0     111  CharBuffer
  8359     7   120    23     7   187     0     111  put
  8360     7   120    26     7   187     0      59  (
  8361     7   120    27     7   187     0      40  char
  8362     7   120    32     7   187     0     111  x
  8363     7   120    33     7   187     0      60  )
  8364     7   120    35     7   187     0      63  {
  8365     7   125     9     7   187     0      20  throw
  8366     7   125    15     7   187     0      15  new
  8367     7   125    19     7   187     0     111  ReadOnlyBufferException
  8368     7   125    42     7   187     0      59  (
  8369     7   125    43     7   187     0      60  )
  8370     7   125    44     7   187     0     102  ;
  8371     7   127     5     7   187     0      64  }
  8372     7   127     5     7   187     0     526  ENDMETHOD
  8373     7   127     5     7   188     0     527  STARTMETHOD
  8374     7   129     5     7   188     0      10  public
  8375     7   129    12     7   188     0     111  CharBuffer
  8376     7   129    23     7   188     0     111  put
  8377     7   129    26     7   188     0      59  (
  8378     7   129    27     7   188     0      36  int
  8379     7   129    31     7   188     0     111  i
  8380     7   129    32     7   188     0      66  ,
  8381     7   129    34     7   188     0      40  char
  8382     7   129    39     7   188     0     111  x
  8383     7   129    40     7   188     0      60  )
  8384     7   129    42     7   188     0      63  {
  8385     7   134     9     7   188     0      20  throw
  8386     7   134    15     7   188     0      15  new
  8387     7   134    19     7   188     0     111  ReadOnlyBufferException
  8388     7   134    42     7   188     0      59  (
  8389     7   134    43     7   188     0      60  )
  8390     7   134    44     7   188     0     102  ;
  8391     7   136     5     7   188     0      64  }
  8392     7   136     5     7   188     0     528  ENDMETHOD
  8393     7   136     5     7   189     0     529  STARTMETHOD
  8394     7   138     5     7   189     0      10  public
  8395     7   138    12     7   189     0     111  CharBuffer
  8396     7   138    23     7   189     0     111  compact
  8397     7   138    30     7   189     0      59  (
  8398     7   138    31     7   189     0      60  )
  8399     7   138    33     7   189     0      63  {
  8400     7   155     9     7   189     0      20  throw
  8401     7   155    15     7   189     0      15  new
  8402     7   155    19     7   189     0     111  ReadOnlyBufferException
  8403     7   155    42     7   189     0      59  (
  8404     7   155    43     7   189     0      60  )
  8405     7   155    44     7   189     0     102  ;
  8406     7   157     5     7   189     0      64  }
  8407     7   157     5     7   189     0     530  ENDMETHOD
  8408     7   157     5     7   190     0     531  STARTMETHOD
  8409     7   159     5     7   190     0      10  public
  8410     7   159    12     7   190     0      39  boolean
  8411     7   159    20     7   190     0     111  isDirect
  8412     7   159    28     7   190     0      59  (
  8413     7   159    29     7   190     0      60  )
  8414     7   159    31     7   190     0      63  {
  8415     7   160     9     7   190     0      19  return
  8416     7   160    16     7   190     0     111  bb.isDirect
  8417     7   160    27     7   190     0      59  (
  8418     7   160    28     7   190     0      60  )
  8419     7   160    29     7   190     0     102  ;
  8420     7   161     5     7   190     0      64  }
  8421     7   161     5     7   190     0     532  ENDMETHOD
  8422     7   161     5     7   191     0     533  STARTMETHOD
  8423     7   163     5     7   191     0      10  public
  8424     7   163    12     7   191     0      39  boolean
  8425     7   163    20     7   191     0     111  isReadOnly
  8426     7   163    30     7   191     0      59  (
  8427     7   163    31     7   191     0      60  )
  8428     7   163    33     7   191     0      63  {
  8429     7   164     9     7   191     0      19  return
  8430     7   164    16     7   191     0      52  true
  8431     7   164    20     7   191     0     102  ;
  8432     7   165     5     7   191     0      64  }
  8433     7   165     5     7   191     0     534  ENDMETHOD
  8434     7   165     5     7   192     0     535  STARTMETHOD
  8435     7   169     5     7   192     0      10  public
  8436     7   169    12     7   192     0     111  String
  8437     7   169    19     7   192     0     111  toString
  8438     7   169    27     7   192     0      59  (
  8439     7   169    28     7   192     0      36  int
  8440     7   169    32     7   192     0     111  start
  8441     7   169    37     7   192     0      66  ,
  8442     7   169    39     7   192     0      36  int
  8443     7   169    43     7   192     0     111  end
  8444     7   169    46     7   192     0      60  )
  8445     7   169    48     7   192     0      63  {
  8446     7   170     9     7   192     0      31  if
  8447     7   170    12     7   192     0      59  (
  8448     7   170    13     7   192     0      59  (
  8449     7   170    14     7   192     0     111  end
  8450     7   170    18     7   192     0      89  >
  8451     7   170    20     7   192     0     111  limit
  8452     7   170    25     7   192     0      59  (
  8453     7   170    26     7   192     0      60  )
  8454     7   170    27     7   192     0      60  )
  8455     7   170    29     7   192     0      98  ||
  8456     7   170    32     7   192     0      59  (
  8457     7   170    33     7   192     0     111  start
  8458     7   170    39     7   192     0      89  >
  8459     7   170    41     7   192     0     111  end
  8460     7   170    44     7   192     0      60  )
  8461     7   170    45     7   192     0      60  )
  8462     7   171    13     7   192     0      20  throw
  8463     7   171    19     7   192     0      15  new
  8464     7   171    23     7   192     0     111  IndexOutOfBoundsException
  8465     7   171    48     7   192     0      59  (
  8466     7   171    49     7   192     0      60  )
  8467     7   171    50     7   192     0     102  ;
  8468     7   172     9     7   192     0      35  try
  8469     7   172    13     7   192     0      63  {
  8470     7   173    13     7   192     0      36  int
  8471     7   173    17     7   192     0     111  len
  8472     7   173    21     7   192     0      67  =
  8473     7   173    23     7   192     0     111  end
  8474     7   173    27     7   192     0      77  -
  8475     7   173    29     7   192     0     111  start
  8476     7   173    34     7   192     0     102  ;
  8477     7   174    13     7   192     0      40  char
  8478     7   174    17     7   192     0      61  [
  8479     7   174    18     7   192     0      62  ]
  8480     7   174    20     7   192     0     111  ca
  8481     7   174    23     7   192     0      67  =
  8482     7   174    25     7   192     0      15  new
  8483     7   174    29     7   192     0      40  char
  8484     7   174    33     7   192     0      61  [
  8485     7   174    34     7   192     0     111  len
  8486     7   174    37     7   192     0      62  ]
  8487     7   174    38     7   192     0     102  ;
  8488     7   175    13     7   192     0     111  CharBuffer
  8489     7   175    24     7   192     0     111  cb
  8490     7   175    27     7   192     0      67  =
  8491     7   175    29     7   192     0     111  CharBuffer.wrap
  8492     7   175    44     7   192     0      59  (
  8493     7   175    45     7   192     0     111  ca
  8494     7   175    47     7   192     0      60  )
  8495     7   175    48     7   192     0     102  ;
  8496     7   176    13     7   192     0     111  CharBuffer
  8497     7   176    24     7   192     0     111  db
  8498     7   176    27     7   192     0      67  =
  8499     7   176    29     7   192     0     111  this.duplicate
  8500     7   176    43     7   192     0      59  (
  8501     7   176    44     7   192     0      60  )
  8502     7   176    45     7   192     0     102  ;
  8503     7   177    13     7   192     1     111  db.position
  8504     7   177    24     7   192     1      59  (
  8505     7   177    25     7   192     1     111  start
  8506     7   177    30     7   192     1      60  )
  8507     7   177    31     7   192     1     102  ;
  8508     7   178    13     7   192     1     111  db.limit
  8509     7   178    21     7   192     1      59  (
  8510     7   178    22     7   192     1     111  end
  8511     7   178    25     7   192     1      60  )
  8512     7   178    26     7   192     1     102  ;
  8513     7   179    13     7   192     1     111  cb.put
  8514     7   179    19     7   192     1      59  (
  8515     7   179    20     7   192     1     111  db
  8516     7   179    22     7   192     1      60  )
  8517     7   179    23     7   192     1     102  ;
  8518     7   180    13     7   192     0      19  return
  8519     7   180    20     7   192     0      15  new
  8520     7   180    24     7   192     0     111  String
  8521     7   180    30     7   192     0      59  (
  8522     7   180    31     7   192     0     111  ca
  8523     7   180    33     7   192     0      60  )
  8524     7   180    34     7   192     0     102  ;
  8525     7   181     9     7   192     0      64  }
  8526     7   181    11     7   192     0      34  catch
  8527     7   181    17     7   192     0      59  (
  8528     7   181    18     7   192     0     111  StringIndexOutOfBoundsException
  8529     7   181    50     7   192     0     111  x
  8530     7   181    51     7   192     0      60  )
  8531     7   181    53     7   192     0      63  {
  8532     7   182    13     7   192     0      20  throw
  8533     7   182    19     7   192     0      15  new
  8534     7   182    23     7   192     0     111  IndexOutOfBoundsException
  8535     7   182    48     7   192     0      59  (
  8536     7   182    49     7   192     0      60  )
  8537     7   182    50     7   192     0     102  ;
  8538     7   183     9     7   192     0      64  }
  8539     7   184     5     7   192     0      64  }
  8540     7   184     5     7   192     0     536  ENDMETHOD
  8541     7   184     5     7   193     0     537  STARTMETHOD
  8542     7   189     5     7   193     0      10  public
  8543     7   189    12     7   193     0     111  CharSequence
  8544     7   189    25     7   193     0     111  subSequence
  8545     7   189    36     7   193     0      59  (
  8546     7   189    37     7   193     0      36  int
  8547     7   189    41     7   193     0     111  start
  8548     7   189    46     7   193     0      66  ,
  8549     7   189    48     7   193     0      36  int
  8550     7   189    52     7   193     0     111  end
  8551     7   189    55     7   193     0      60  )
  8552     7   189    57     7   193     0      63  {
  8553     7   190     9     7   193     1      36  int
  8554     7   190    13     7   193     1     111  pos
  8555     7   190    17     7   193     1      67  =
  8556     7   190    19     7   193     1     111  position
  8557     7   190    27     7   193     1      59  (
  8558     7   190    28     7   193     1      60  )
  8559     7   190    29     7   193     1     102  ;
  8560     7   191     9     7   193     1      36  int
  8561     7   191    13     7   193     1     111  lim
  8562     7   191    17     7   193     1      67  =
  8563     7   191    19     7   193     1     111  limit
  8564     7   191    24     7   193     1      59  (
  8565     7   191    25     7   193     1      60  )
  8566     7   191    26     7   193     1     102  ;
  8567     7   192     9     7   193     0     111  assert
  8568     7   192    16     7   193     0      59  (
  8569     7   192    17     7   193     0     111  pos
  8570     7   192    21     7   193     0      92  <=
  8571     7   192    24     7   193     0     111  lim
  8572     7   192    27     7   193     0      60  )
  8573     7   192    28     7   193     0     102  ;
  8574     7   193     9     7   193     0     111  pos
  8575     7   193    13     7   193     0      67  =
  8576     7   193    15     7   193     0      59  (
  8577     7   193    16     7   193     0     111  pos
  8578     7   193    20     7   193     0      92  <=
  8579     7   193    23     7   193     0     111  lim
  8580     7   193    27     7   193     0      58  ?
  8581     7   193    29     7   193     0     111  pos
  8582     7   193    33     7   193     0      65  :
  8583     7   193    35     7   193     0     111  lim
  8584     7   193    38     7   193     0      60  )
  8585     7   193    39     7   193     0     102  ;
  8586     7   194     9     7   193     0      36  int
  8587     7   194    13     7   193     0     111  len
  8588     7   194    17     7   193     0      67  =
  8589     7   194    19     7   193     0     111  lim
  8590     7   194    23     7   193     0      77  -
  8591     7   194    25     7   193     0     111  pos
  8592     7   194    28     7   193     0     102  ;
  8593     7   196     9     7   193     0      31  if
  8594     7   196    12     7   193     0      59  (
  8595     7   196    13     7   193     0      59  (
  8596     7   196    14     7   193     0     111  start
  8597     7   196    20     7   193     0      93  <
  8598     7   196    22     7   193     0     112  0
  8599     7   196    23     7   193     0      60  )
  8600     7   196    25     7   193     0      98  ||
  8601     7   196    28     7   193     0      59  (
  8602     7   196    29     7   193     0     111  end
  8603     7   196    33     7   193     0      89  >
  8604     7   196    35     7   193     0     111  len
  8605     7   196    38     7   193     0      60  )
  8606     7   196    40     7   193     0      98  ||
  8607     7   196    43     7   193     0      59  (
  8608     7   196    44     7   193     0     111  start
  8609     7   196    50     7   193     0      89  >
  8610     7   196    52     7   193     0     111  end
  8611     7   196    55     7   193     0      60  )
  8612     7   196    56     7   193     0      60  )
  8613     7   197    13     7   193     0      20  throw
  8614     7   197    19     7   193     0      15  new
  8615     7   197    23     7   193     0     111  IndexOutOfBoundsException
  8616     7   197    48     7   193     0      59  (
  8617     7   197    49     7   193     0      60  )
  8618     7   197    50     7   193     0     102  ;
  8619     7   198     9     7   193     0      36  int
  8620     7   198    13     7   193     0     111  sublen
  8621     7   198    20     7   193     0      67  =
  8622     7   198    22     7   193     0     111  end
  8623     7   198    26     7   193     0      77  -
  8624     7   198    28     7   193     0     111  start
  8625     7   198    33     7   193     0     102  ;
  8626     7   199     9     7   193     0      36  int
  8627     7   199    13     7   193     0     111  off
  8628     7   199    17     7   193     0      67  =
  8629     7   199    19     7   193     0     111  offset
  8630     7   199    26     7   193     0      74  +
  8631     7   199    28     7   193     0      59  (
  8632     7   199    29     7   193     0      59  (
  8633     7   199    30     7   193     0     111  pos
  8634     7   199    34     7   193     0      74  +
  8635     7   199    36     7   193     0     111  start
  8636     7   199    41     7   193     0      60  )
  8637     7   199    43     7   193     0      90  <<
  8638     7   199    46     7   193     0     112  1
  8639     7   199    47     7   193     0      60  )
  8640     7   199    48     7   193     0     102  ;
  8641     7   200     9     7   193     0     111  assert
  8642     7   200    16     7   193     0      59  (
  8643     7   200    17     7   193     0     111  off
  8644     7   200    21     7   193     0      88  >=
  8645     7   200    24     7   193     0     112  0
  8646     7   200    25     7   193     0      60  )
  8647     7   200    26     7   193     0     102  ;
  8648     7   201     9     7   193     0      19  return
  8649     7   201    16     7   193     0      15  new
  8650     7   201    20     7   193     0     111  ByteBufferAsCharBufferRB
  8651     7   201    44     7   193     0      59  (
  8652     7   201    45     7   193     0     111  bb
  8653     7   201    47     7   193     0      66  ,
  8654     7   201    49     7   193     0      77  -
  8655     7   201    50     7   193     0     112  1
  8656     7   201    51     7   193     0      66  ,
  8657     7   201    53     7   193     0     112  0
  8658     7   201    54     7   193     0      66  ,
  8659     7   201    56     7   193     0     111  sublen
  8660     7   201    62     7   193     0      66  ,
  8661     7   201    64     7   193     0     111  sublen
  8662     7   201    70     7   193     0      66  ,
  8663     7   201    72     7   193     1     111  off
  8664     7   201    75     7   193     1      60  )
  8665     7   201    76     7   193     0     102  ;
  8666     7   202     5     7   193     0      64  }
  8667     7   202     5     7   193     0     538  ENDMETHOD
  8668     7   202     5     7   194     0     539  STARTMETHOD
  8669     7   207     5     7   194     0      10  public
  8670     7   207    12     7   194     0     111  ByteOrder
  8671     7   207    22     7   194     0     111  order
  8672     7   207    27     7   194     0      59  (
  8673     7   207    28     7   194     0      60  )
  8674     7   207    30     7   194     0      63  {
  8675     7   209     9     7   194     0      19  return
  8676     7   209    16     7   194     0     111  ByteOrder.BIG_ENDIAN
  8677     7   209    36     7   194     0     102  ;
  8678     7   214     5     7   194     0      64  }
  8679     7   214     5     7   194     0     540  ENDMETHOD
  8680     7   216     1     7    -1     0      64  }
  8681     7   216     1     7    -1     1     541  ENDCLASS
  8682     7   216     1    -1    -1     1     542  ENDFILE C:\javasrc\java\nio\ByteBufferAsCharBufferRB.java
  8683     8     1     1    -1    -1     1     543  STARTFILE C:\javasrc\java\nio\ByteBufferAsCharBufferRL.java
  8684     8    28     1    -1    -1     0       5  package
  8685     8    28     9    -1    -1     0     111  java.nio
  8686     8    28    17    -1    -1     0     102  ;
  8687     8    31     1     8    -1     0     544  STARTCLASS
  8688     8    31     1     8    -1     0      24  class
  8689     8    31     7     8    -1     0     111  ByteBufferAsCharBufferRL
  8690     8    32     5     8    -1     0      38  extends
  8691     8    32    13     8    -1     0     111  ByteBufferAsCharBufferL
  8692     8    33     1     8    -1     0      63  {
  8693     8    33     1     8   195     0     545  STARTMETHOD
  8694     8    42     5     8   195     0     111  ByteBufferAsCharBufferRL
  8695     8    42    29     8   195     0      59  (
  8696     8    42    30     8   195     0     111  ByteBuffer
  8697     8    42    41     8   195     0     111  bb
  8698     8    42    43     8   195     0      60  )
  8699     8    42    45     8   195     0      63  {
  8700     8    55     9     8   195     0      27  super
  8701     8    55    14     8   195     0      59  (
  8702     8    55    15     8   195     1     111  bb
  8703     8    55    17     8   195     1      60  )
  8704     8    55    18     8   195     0     102  ;
  8705     8    57     5     8   195     0      64  }
  8706     8    57     5     8   195     0     546  ENDMETHOD
  8707     8    57     5     8   196     0     547  STARTMETHOD
  8708     8    59     5     8   196     0     111  ByteBufferAsCharBufferRL
  8709     8    59    29     8   196     0      59  (
  8710     8    59    30     8   196     0     111  ByteBuffer
  8711     8    59    41     8   196     0     111  bb
  8712     8    59    43     8   196     0      66  ,
  8713     8    60    38     8   196     0      36  int
  8714     8    60    42     8   196     0     111  mark
  8715     8    60    46     8   196     0      66  ,
  8716     8    60    48     8   196     0      36  int
  8717     8    60    52     8   196     0     111  pos
  8718     8    60    55     8   196     0      66  ,
  8719     8    60    57     8   196     0      36  int
  8720     8    60    61     8   196     0     111  lim
  8721     8    60    64     8   196     0      66  ,
  8722     8    60    66     8   196     0      36  int
  8723     8    60    70     8   196     0     111  cap
  8724     8    60    73     8   196     0      66  ,
  8725     8    61    38     8   196     0      36  int
  8726     8    61    42     8   196     0     111  off
  8727     8    61    45     8   196     0      60  )
  8728     8    62     5     8   196     0      63  {
  8729     8    68     9     8   196     0      27  super
  8730     8    68    14     8   196     0      59  (
  8731     8    68    15     8   196     0     111  bb
  8732     8    68    17     8   196     0      66  ,
  8733     8    68    19     8   196     0     111  mark
  8734     8    68    23     8   196     0      66  ,
  8735     8    68    25     8   196     0     111  pos
  8736     8    68    28     8   196     0      66  ,
  8737     8    68    30     8   196     0     111  lim
  8738     8    68    33     8   196     0      66  ,
  8739     8    68    35     8   196     0     111  cap
  8740     8    68    38     8   196     0      66  ,
  8741     8    68    40     8   196     1     111  off
  8742     8    68    43     8   196     1      60  )
  8743     8    68    44     8   196     0     102  ;
  8744     8    70     5     8   196     0      64  }
  8745     8    70     5     8   196     0     548  ENDMETHOD
  8746     8    70     5     8   197     0     549  STARTMETHOD
  8747     8    72     5     8   197     0      10  public
  8748     8    72    12     8   197     0     111  CharBuffer
  8749     8    72    23     8   197     0     111  slice
  8750     8    72    28     8   197     0      59  (
  8751     8    72    29     8   197     0      60  )
  8752     8    72    31     8   197     0      63  {
  8753     8    73     9     8   197     1      36  int
  8754     8    73    13     8   197     1     111  pos
  8755     8    73    17     8   197     1      67  =
  8756     8    73    19     8   197     1     111  this.position
  8757     8    73    32     8   197     1      59  (
  8758     8    73    33     8   197     1      60  )
  8759     8    73    34     8   197     1     102  ;
  8760     8    74     9     8   197     1      36  int
  8761     8    74    13     8   197     1     111  lim
  8762     8    74    17     8   197     1      67  =
  8763     8    74    19     8   197     1     111  this.limit
  8764     8    74    29     8   197     1      59  (
  8765     8    74    30     8   197     1      60  )
  8766     8    74    31     8   197     1     102  ;
  8767     8    75     9     8   197     0     111  assert
  8768     8    75    16     8   197     0      59  (
  8769     8    75    17     8   197     0     111  pos
  8770     8    75    21     8   197     0      92  <=
  8771     8    75    24     8   197     0     111  lim
  8772     8    75    27     8   197     0      60  )
  8773     8    75    28     8   197     0     102  ;
  8774     8    76     9     8   197     0      36  int
  8775     8    76    13     8   197     0     111  rem
  8776     8    76    17     8   197     0      67  =
  8777     8    76    19     8   197     0      59  (
  8778     8    76    20     8   197     0     111  pos
  8779     8    76    24     8   197     0      92  <=
  8780     8    76    27     8   197     0     111  lim
  8781     8    76    31     8   197     0      58  ?
  8782     8    76    33     8   197     0     111  lim
  8783     8    76    37     8   197     0      77  -
  8784     8    76    39     8   197     0     111  pos
  8785     8    76    43     8   197     0      65  :
  8786     8    76    45     8   197     0     112  0
  8787     8    76    46     8   197     0      60  )
  8788     8    76    47     8   197     0     102  ;
  8789     8    77     9     8   197     0      36  int
  8790     8    77    13     8   197     0     111  off
  8791     8    77    17     8   197     0      67  =
  8792     8    77    19     8   197     0      59  (
  8793     8    77    20     8   197     0     111  pos
  8794     8    77    24     8   197     0      90  <<
  8795     8    77    27     8   197     0     112  1
  8796     8    77    28     8   197     0      60  )
  8797     8    77    30     8   197     0      74  +
  8798     8    77    32     8   197     0     111  offset
  8799     8    77    38     8   197     0     102  ;
  8800     8    78     9     8   197     0     111  assert
  8801     8    78    16     8   197     0      59  (
  8802     8    78    17     8   197     0     111  off
  8803     8    78    21     8   197     0      88  >=
  8804     8    78    24     8   197     0     112  0
  8805     8    78    25     8   197     0      60  )
  8806     8    78    26     8   197     0     102  ;
  8807     8    79     9     8   197     0      19  return
  8808     8    79    16     8   197     0      15  new
  8809     8    79    20     8   197     0     111  ByteBufferAsCharBufferRL
  8810     8    79    44     8   197     0      59  (
  8811     8    79    45     8   197     0     111  bb
  8812     8    79    47     8   197     0      66  ,
  8813     8    79    49     8   197     0      77  -
  8814     8    79    50     8   197     0     112  1
  8815     8    79    51     8   197     0      66  ,
  8816     8    79    53     8   197     0     112  0
  8817     8    79    54     8   197     0      66  ,
  8818     8    79    56     8   197     0     111  rem
  8819     8    79    59     8   197     0      66  ,
  8820     8    79    61     8   197     0     111  rem
  8821     8    79    64     8   197     0      66  ,
  8822     8    79    66     8   197     0     111  off
  8823     8    79    69     8   197     0      60  )
  8824     8    79    70     8   197     0     102  ;
  8825     8    80     5     8   197     0      64  }
  8826     8    80     5     8   197     0     550  ENDMETHOD
  8827     8    80     5     8   198     0     551  STARTMETHOD
  8828     8    82     5     8   198     0      10  public
  8829     8    82    12     8   198     0     111  CharBuffer
  8830     8    82    23     8   198     0     111  duplicate
  8831     8    82    32     8   198     0      59  (
  8832     8    82    33     8   198     0      60  )
  8833     8    82    35     8   198     0      63  {
  8834     8    83     9     8   198     0      19  return
  8835     8    83    16     8   198     0      15  new
  8836     8    83    20     8   198     0     111  ByteBufferAsCharBufferRL
  8837     8    83    44     8   198     0      59  (
  8838     8    83    45     8   198     0     111  bb
  8839     8    83    47     8   198     0      66  ,
  8840     8    84    53     8   198     1     111  this.markValue
  8841     8    84    67     8   198     1      59  (
  8842     8    84    68     8   198     1      60  )
  8843     8    84    69     8   198     1      66  ,
  8844     8    85    53     8   198     1     111  this.position
  8845     8    85    66     8   198     1      59  (
  8846     8    85    67     8   198     1      60  )
  8847     8    85    68     8   198     1      66  ,
  8848     8    86    53     8   198     1     111  this.limit
  8849     8    86    63     8   198     1      59  (
  8850     8    86    64     8   198     1      60  )
  8851     8    86    65     8   198     1      66  ,
  8852     8    87    53     8   198     1     111  this.capacity
  8853     8    87    66     8   198     1      59  (
  8854     8    87    67     8   198     1      60  )
  8855     8    87    68     8   198     1      66  ,
  8856     8    88    53     8   198     0     111  offset
  8857     8    88    59     8   198     0      60  )
  8858     8    88    60     8   198     0     102  ;
  8859     8    89     5     8   198     0      64  }
  8860     8    89     5     8   198     0     552  ENDMETHOD
  8861     8    89     5     8   199     0     553  STARTMETHOD
  8862     8    91     5     8   199     0      10  public
  8863     8    91    12     8   199     0     111  CharBuffer
  8864     8    91    23     8   199     0     111  asReadOnlyBuffer
  8865     8    91    39     8   199     0      59  (
  8866     8    91    40     8   199     0      60  )
  8867     8    91    42     8   199     0      63  {
  8868     8   100     9     8   199     0      19  return
  8869     8   100    16     8   199     0     111  duplicate
  8870     8   100    25     8   199     0      59  (
  8871     8   100    26     8   199     0      60  )
  8872     8   100    27     8   199     0     102  ;
  8873     8   102     5     8   199     0      64  }
  8874     8   102     5     8   199     0     554  ENDMETHOD
  8875     8   102     5     8   200     0     555  STARTMETHOD
  8876     8   120     5     8   200     0      10  public
  8877     8   120    12     8   200     0     111  CharBuffer
  8878     8   120    23     8   200     0     111  put
  8879     8   120    26     8   200     0      59  (
  8880     8   120    27     8   200     0      40  char
  8881     8   120    32     8   200     0     111  x
  8882     8   120    33     8   200     0      60  )
  8883     8   120    35     8   200     0      63  {
  8884     8   125     9     8   200     0      20  throw
  8885     8   125    15     8   200     0      15  new
  8886     8   125    19     8   200     0     111  ReadOnlyBufferException
  8887     8   125    42     8   200     0      59  (
  8888     8   125    43     8   200     0      60  )
  8889     8   125    44     8   200     0     102  ;
  8890     8   127     5     8   200     0      64  }
  8891     8   127     5     8   200     0     556  ENDMETHOD
  8892     8   127     5     8   201     0     557  STARTMETHOD
  8893     8   129     5     8   201     0      10  public
  8894     8   129    12     8   201     0     111  CharBuffer
  8895     8   129    23     8   201     0     111  put
  8896     8   129    26     8   201     0      59  (
  8897     8   129    27     8   201     0      36  int
  8898     8   129    31     8   201     0     111  i
  8899     8   129    32     8   201     0      66  ,
  8900     8   129    34     8   201     0      40  char
  8901     8   129    39     8   201     0     111  x
  8902     8   129    40     8   201     0      60  )
  8903     8   129    42     8   201     0      63  {
  8904     8   134     9     8   201     0      20  throw
  8905     8   134    15     8   201     0      15  new
  8906     8   134    19     8   201     0     111  ReadOnlyBufferException
  8907     8   134    42     8   201     0      59  (
  8908     8   134    43     8   201     0      60  )
  8909     8   134    44     8   201     0     102  ;
  8910     8   136     5     8   201     0      64  }
  8911     8   136     5     8   201     0     558  ENDMETHOD
  8912     8   136     5     8   202     0     559  STARTMETHOD
  8913     8   138     5     8   202     0      10  public
  8914     8   138    12     8   202     0     111  CharBuffer
  8915     8   138    23     8   202     0     111  compact
  8916     8   138    30     8   202     0      59  (
  8917     8   138    31     8   202     0      60  )
  8918     8   138    33     8   202     0      63  {
  8919     8   155     9     8   202     0      20  throw
  8920     8   155    15     8   202     0      15  new
  8921     8   155    19     8   202     0     111  ReadOnlyBufferException
  8922     8   155    42     8   202     0      59  (
  8923     8   155    43     8   202     0      60  )
  8924     8   155    44     8   202     0     102  ;
  8925     8   157     5     8   202     0      64  }
  8926     8   157     5     8   202     0     560  ENDMETHOD
  8927     8   157     5     8   203     0     561  STARTMETHOD
  8928     8   159     5     8   203     0      10  public
  8929     8   159    12     8   203     0      39  boolean
  8930     8   159    20     8   203     0     111  isDirect
  8931     8   159    28     8   203     0      59  (
  8932     8   159    29     8   203     0      60  )
  8933     8   159    31     8   203     0      63  {
  8934     8   160     9     8   203     0      19  return
  8935     8   160    16     8   203     0     111  bb.isDirect
  8936     8   160    27     8   203     0      59  (
  8937     8   160    28     8   203     0      60  )
  8938     8   160    29     8   203     0     102  ;
  8939     8   161     5     8   203     0      64  }
  8940     8   161     5     8   203     0     562  ENDMETHOD
  8941     8   161     5     8   204     0     563  STARTMETHOD
  8942     8   163     5     8   204     0      10  public
  8943     8   163    12     8   204     0      39  boolean
  8944     8   163    20     8   204     0     111  isReadOnly
  8945     8   163    30     8   204     0      59  (
  8946     8   163    31     8   204     0      60  )
  8947     8   163    33     8   204     0      63  {
  8948     8   164     9     8   204     0      19  return
  8949     8   164    16     8   204     0      52  true
  8950     8   164    20     8   204     0     102  ;
  8951     8   165     5     8   204     0      64  }
  8952     8   165     5     8   204     0     564  ENDMETHOD
  8953     8   165     5     8   205     0     565  STARTMETHOD
  8954     8   169     5     8   205     0      10  public
  8955     8   169    12     8   205     0     111  String
  8956     8   169    19     8   205     0     111  toString
  8957     8   169    27     8   205     0      59  (
  8958     8   169    28     8   205     0      36  int
  8959     8   169    32     8   205     0     111  start
  8960     8   169    37     8   205     0      66  ,
  8961     8   169    39     8   205     0      36  int
  8962     8   169    43     8   205     0     111  end
  8963     8   169    46     8   205     0      60  )
  8964     8   169    48     8   205     0      63  {
  8965     8   170     9     8   205     0      31  if
  8966     8   170    12     8   205     0      59  (
  8967     8   170    13     8   205     0      59  (
  8968     8   170    14     8   205     0     111  end
  8969     8   170    18     8   205     0      89  >
  8970     8   170    20     8   205     0     111  limit
  8971     8   170    25     8   205     0      59  (
  8972     8   170    26     8   205     0      60  )
  8973     8   170    27     8   205     0      60  )
  8974     8   170    29     8   205     0      98  ||
  8975     8   170    32     8   205     0      59  (
  8976     8   170    33     8   205     0     111  start
  8977     8   170    39     8   205     0      89  >
  8978     8   170    41     8   205     0     111  end
  8979     8   170    44     8   205     0      60  )
  8980     8   170    45     8   205     0      60  )
  8981     8   171    13     8   205     0      20  throw
  8982     8   171    19     8   205     0      15  new
  8983     8   171    23     8   205     0     111  IndexOutOfBoundsException
  8984     8   171    48     8   205     0      59  (
  8985     8   171    49     8   205     0      60  )
  8986     8   171    50     8   205     0     102  ;
  8987     8   172     9     8   205     0      35  try
  8988     8   172    13     8   205     0      63  {
  8989     8   173    13     8   205     0      36  int
  8990     8   173    17     8   205     0     111  len
  8991     8   173    21     8   205     0      67  =
  8992     8   173    23     8   205     0     111  end
  8993     8   173    27     8   205     0      77  -
  8994     8   173    29     8   205     0     111  start
  8995     8   173    34     8   205     0     102  ;
  8996     8   174    13     8   205     0      40  char
  8997     8   174    17     8   205     0      61  [
  8998     8   174    18     8   205     0      62  ]
  8999     8   174    20     8   205     0     111  ca
  9000     8   174    23     8   205     0      67  =
  9001     8   174    25     8   205     0      15  new
  9002     8   174    29     8   205     0      40  char
  9003     8   174    33     8   205     0      61  [
  9004     8   174    34     8   205     0     111  len
  9005     8   174    37     8   205     0      62  ]
  9006     8   174    38     8   205     0     102  ;
  9007     8   175    13     8   205     0     111  CharBuffer
  9008     8   175    24     8   205     0     111  cb
  9009     8   175    27     8   205     0      67  =
  9010     8   175    29     8   205     0     111  CharBuffer.wrap
  9011     8   175    44     8   205     0      59  (
  9012     8   175    45     8   205     0     111  ca
  9013     8   175    47     8   205     0      60  )
  9014     8   175    48     8   205     0     102  ;
  9015     8   176    13     8   205     0     111  CharBuffer
  9016     8   176    24     8   205     0     111  db
  9017     8   176    27     8   205     0      67  =
  9018     8   176    29     8   205     0     111  this.duplicate
  9019     8   176    43     8   205     0      59  (
  9020     8   176    44     8   205     0      60  )
  9021     8   176    45     8   205     0     102  ;
  9022     8   177    13     8   205     1     111  db.position
  9023     8   177    24     8   205     1      59  (
  9024     8   177    25     8   205     1     111  start
  9025     8   177    30     8   205     1      60  )
  9026     8   177    31     8   205     1     102  ;
  9027     8   178    13     8   205     1     111  db.limit
  9028     8   178    21     8   205     1      59  (
  9029     8   178    22     8   205     1     111  end
  9030     8   178    25     8   205     1      60  )
  9031     8   178    26     8   205     1     102  ;
  9032     8   179    13     8   205     1     111  cb.put
  9033     8   179    19     8   205     1      59  (
  9034     8   179    20     8   205     1     111  db
  9035     8   179    22     8   205     1      60  )
  9036     8   179    23     8   205     1     102  ;
  9037     8   180    13     8   205     0      19  return
  9038     8   180    20     8   205     0      15  new
  9039     8   180    24     8   205     0     111  String
  9040     8   180    30     8   205     0      59  (
  9041     8   180    31     8   205     0     111  ca
  9042     8   180    33     8   205     0      60  )
  9043     8   180    34     8   205     0     102  ;
  9044     8   181     9     8   205     0      64  }
  9045     8   181    11     8   205     0      34  catch
  9046     8   181    17     8   205     0      59  (
  9047     8   181    18     8   205     0     111  StringIndexOutOfBoundsException
  9048     8   181    50     8   205     0     111  x
  9049     8   181    51     8   205     0      60  )
  9050     8   181    53     8   205     0      63  {
  9051     8   182    13     8   205     0      20  throw
  9052     8   182    19     8   205     0      15  new
  9053     8   182    23     8   205     0     111  IndexOutOfBoundsException
  9054     8   182    48     8   205     0      59  (
  9055     8   182    49     8   205     0      60  )
  9056     8   182    50     8   205     0     102  ;
  9057     8   183     9     8   205     0      64  }
  9058     8   184     5     8   205     0      64  }
  9059     8   184     5     8   205     0     566  ENDMETHOD
  9060     8   184     5     8   206     0     567  STARTMETHOD
  9061     8   189     5     8   206     0      10  public
  9062     8   189    12     8   206     0     111  CharSequence
  9063     8   189    25     8   206     0     111  subSequence
  9064     8   189    36     8   206     0      59  (
  9065     8   189    37     8   206     0      36  int
  9066     8   189    41     8   206     0     111  start
  9067     8   189    46     8   206     0      66  ,
  9068     8   189    48     8   206     0      36  int
  9069     8   189    52     8   206     0     111  end
  9070     8   189    55     8   206     0      60  )
  9071     8   189    57     8   206     0      63  {
  9072     8   190     9     8   206     1      36  int
  9073     8   190    13     8   206     1     111  pos
  9074     8   190    17     8   206     1      67  =
  9075     8   190    19     8   206     1     111  position
  9076     8   190    27     8   206     1      59  (
  9077     8   190    28     8   206     1      60  )
  9078     8   190    29     8   206     1     102  ;
  9079     8   191     9     8   206     1      36  int
  9080     8   191    13     8   206     1     111  lim
  9081     8   191    17     8   206     1      67  =
  9082     8   191    19     8   206     1     111  limit
  9083     8   191    24     8   206     1      59  (
  9084     8   191    25     8   206     1      60  )
  9085     8   191    26     8   206     1     102  ;
  9086     8   192     9     8   206     0     111  assert
  9087     8   192    16     8   206     0      59  (
  9088     8   192    17     8   206     0     111  pos
  9089     8   192    21     8   206     0      92  <=
  9090     8   192    24     8   206     0     111  lim
  9091     8   192    27     8   206     0      60  )
  9092     8   192    28     8   206     0     102  ;
  9093     8   193     9     8   206     0     111  pos
  9094     8   193    13     8   206     0      67  =
  9095     8   193    15     8   206     0      59  (
  9096     8   193    16     8   206     0     111  pos
  9097     8   193    20     8   206     0      92  <=
  9098     8   193    23     8   206     0     111  lim
  9099     8   193    27     8   206     0      58  ?
  9100     8   193    29     8   206     0     111  pos
  9101     8   193    33     8   206     0      65  :
  9102     8   193    35     8   206     0     111  lim
  9103     8   193    38     8   206     0      60  )
  9104     8   193    39     8   206     0     102  ;
  9105     8   194     9     8   206     0      36  int
  9106     8   194    13     8   206     0     111  len
  9107     8   194    17     8   206     0      67  =
  9108     8   194    19     8   206     0     111  lim
  9109     8   194    23     8   206     0      77  -
  9110     8   194    25     8   206     0     111  pos
  9111     8   194    28     8   206     0     102  ;
  9112     8   196     9     8   206     0      31  if
  9113     8   196    12     8   206     0      59  (
  9114     8   196    13     8   206     0      59  (
  9115     8   196    14     8   206     0     111  start
  9116     8   196    20     8   206     0      93  <
  9117     8   196    22     8   206     0     112  0
  9118     8   196    23     8   206     0      60  )
  9119     8   196    25     8   206     0      98  ||
  9120     8   196    28     8   206     0      59  (
  9121     8   196    29     8   206     0     111  end
  9122     8   196    33     8   206     0      89  >
  9123     8   196    35     8   206     0     111  len
  9124     8   196    38     8   206     0      60  )
  9125     8   196    40     8   206     0      98  ||
  9126     8   196    43     8   206     0      59  (
  9127     8   196    44     8   206     0     111  start
  9128     8   196    50     8   206     0      89  >
  9129     8   196    52     8   206     0     111  end
  9130     8   196    55     8   206     0      60  )
  9131     8   196    56     8   206     0      60  )
  9132     8   197    13     8   206     0      20  throw
  9133     8   197    19     8   206     0      15  new
  9134     8   197    23     8   206     0     111  IndexOutOfBoundsException
  9135     8   197    48     8   206     0      59  (
  9136     8   197    49     8   206     0      60  )
  9137     8   197    50     8   206     0     102  ;
  9138     8   198     9     8   206     0      36  int
  9139     8   198    13     8   206     0     111  sublen
  9140     8   198    20     8   206     0      67  =
  9141     8   198    22     8   206     0     111  end
  9142     8   198    26     8   206     0      77  -
  9143     8   198    28     8   206     0     111  start
  9144     8   198    33     8   206     0     102  ;
  9145     8   199     9     8   206     0      36  int
  9146     8   199    13     8   206     0     111  off
  9147     8   199    17     8   206     0      67  =
  9148     8   199    19     8   206     0     111  offset
  9149     8   199    26     8   206     0      74  +
  9150     8   199    28     8   206     0      59  (
  9151     8   199    29     8   206     0      59  (
  9152     8   199    30     8   206     0     111  pos
  9153     8   199    34     8   206     0      74  +
  9154     8   199    36     8   206     0     111  start
  9155     8   199    41     8   206     0      60  )
  9156     8   199    43     8   206     0      90  <<
  9157     8   199    46     8   206     0     112  1
  9158     8   199    47     8   206     0      60  )
  9159     8   199    48     8   206     0     102  ;
  9160     8   200     9     8   206     0     111  assert
  9161     8   200    16     8   206     0      59  (
  9162     8   200    17     8   206     0     111  off
  9163     8   200    21     8   206     0      88  >=
  9164     8   200    24     8   206     0     112  0
  9165     8   200    25     8   206     0      60  )
  9166     8   200    26     8   206     0     102  ;
  9167     8   201     9     8   206     0      19  return
  9168     8   201    16     8   206     0      15  new
  9169     8   201    20     8   206     0     111  ByteBufferAsCharBufferRL
  9170     8   201    44     8   206     0      59  (
  9171     8   201    45     8   206     0     111  bb
  9172     8   201    47     8   206     0      66  ,
  9173     8   201    49     8   206     0      77  -
  9174     8   201    50     8   206     0     112  1
  9175     8   201    51     8   206     0      66  ,
  9176     8   201    53     8   206     0     112  0
  9177     8   201    54     8   206     0      66  ,
  9178     8   201    56     8   206     0     111  sublen
  9179     8   201    62     8   206     0      66  ,
  9180     8   201    64     8   206     0     111  sublen
  9181     8   201    70     8   206     0      66  ,
  9182     8   201    72     8   206     0     111  off
  9183     8   201    75     8   206     0      60  )
  9184     8   201    76     8   206     0     102  ;
  9185     8   202     5     8   206     0      64  }
  9186     8   202     5     8   206     0     568  ENDMETHOD
  9187     8   202     5     8   207     0     569  STARTMETHOD
  9188     8   207     5     8   207     0      10  public
  9189     8   207    12     8   207     0     111  ByteOrder
  9190     8   207    22     8   207     0     111  order
  9191     8   207    27     8   207     0      59  (
  9192     8   207    28     8   207     0      60  )
  9193     8   207    30     8   207     0      63  {
  9194     8   212     9     8   207     0      19  return
  9195     8   212    16     8   207     0     111  ByteOrder.LITTLE_ENDIAN
  9196     8   212    39     8   207     0     102  ;
  9197     8   214     5     8   207     0      64  }
  9198     8   214     5     8   207     0     570  ENDMETHOD
  9199     8   216     1     8    -1     0      64  }
  9200     8   216     1     8    -1     1     571  ENDCLASS
  9201     8   216     1    -1    -1     1     572  ENDFILE C:\javasrc\java\nio\ByteBufferAsCharBufferRL.java
  9202     9     1     1    -1    -1     1     573  STARTFILE C:\javasrc\java\nio\ByteBufferAsDoubleBufferB.java
  9203     9    28     1    -1    -1     0       5  package
  9204     9    28     9    -1    -1     0     111  java.nio
  9205     9    28    17    -1    -1     0     102  ;
  9206     9    31     1     9    -1     0     574  STARTCLASS
  9207     9    31     1     9    -1     0      24  class
  9208     9    31     7     9    -1     0     111  ByteBufferAsDoubleBufferB
  9209     9    32     5     9    -1     0      38  extends
  9210     9    32    13     9    -1     0     111  DoubleBuffer
  9211     9    33     1     9    -1     0      63  {
  9212     9    37     5     9    -1     0      23  protected
  9213     9    37    15     9    -1     0       6  final
  9214     9    37    21     9    -1     0     111  ByteBuffer
  9215     9    37    32     9    -1     0     111  bb
  9216     9    37    34     9    -1     0     102  ;
  9217     9    38     5     9    -1     0      23  protected
  9218     9    38    15     9    -1     0       6  final
  9219     9    38    21     9    -1     0      36  int
  9220     9    38    25     9    -1     0     111  offset
  9221     9    38    31     9    -1     0     102  ;
  9222     9    38    31     9   208     0     575  STARTMETHOD
  9223     9    42     5     9   208     0     111  ByteBufferAsDoubleBufferB
  9224     9    42    30     9   208     0      59  (
  9225     9    42    31     9   208     0     111  ByteBuffer
  9226     9    42    42     9   208     0     111  bb
  9227     9    42    44     9   208     0      60  )
  9228     9    42    46     9   208     0      63  {
  9229     9    44     9     9   208     0      27  super
  9230     9    44    14     9   208     0      59  (
  9231     9    44    15     9   208     0      77  -
  9232     9    44    16     9   208     0     112  1
  9233     9    44    17     9   208     0      66  ,
  9234     9    44    19     9   208     0     112  0
  9235     9    44    20     9   208     0      66  ,
  9236     9    45    15     9   208     0     111  bb.remaining
  9237     9    45    27     9   208     0      59  (
  9238     9    45    28     9   208     0      60  )
  9239     9    45    30     9   208     0      84  >>
  9240     9    45    33     9   208     0     112  3
  9241     9    45    34     9   208     0      66  ,
  9242     9    46    15     9   208     0     111  bb.remaining
  9243     9    46    27     9   208     0      59  (
  9244     9    46    28     9   208     0      60  )
  9245     9    46    30     9   208     0      84  >>
  9246     9    46    33     9   208     0     112  3
  9247     9    46    34     9   208     0      60  )
  9248     9    46    35     9   208     0     102  ;
  9249     9    47     9     9   208     0     111  this.bb
  9250     9    47    17     9   208     0      67  =
  9251     9    47    19     9   208     0     111  bb
  9252     9    47    21     9   208     0     102  ;
  9253     9    49     9     9   208     0      36  int
  9254     9    49    13     9   208     0     111  cap
  9255     9    49    17     9   208     0      67  =
  9256     9    49    19     9   208     0     111  this.capacity
  9257     9    49    32     9   208     0      59  (
  9258     9    49    33     9   208     0      60  )
  9259     9    49    34     9   208     0     102  ;
  9260     9    50     9     9   208     0     111  this.limit
  9261     9    50    19     9   208     0      59  (
  9262     9    50    20     9   208     0     111  cap
  9263     9    50    23     9   208     0      60  )
  9264     9    50    24     9   208     0     102  ;
  9265     9    51     9     9   208     0      36  int
  9266     9    51    13     9   208     0     111  pos
  9267     9    51    17     9   208     0      67  =
  9268     9    51    19     9   208     0     111  this.position
  9269     9    51    32     9   208     0      59  (
  9270     9    51    33     9   208     0      60  )
  9271     9    51    34     9   208     0     102  ;
  9272     9    52     9     9   208     0     111  assert
  9273     9    52    16     9   208     0      59  (
  9274     9    52    17     9   208     0     111  pos
  9275     9    52    21     9   208     0      92  <=
  9276     9    52    24     9   208     0     111  cap
  9277     9    52    27     9   208     0      60  )
  9278     9    52    28     9   208     0     102  ;
  9279     9    53     9     9   208     0     111  offset
  9280     9    53    16     9   208     0      67  =
  9281     9    53    18     9   208     0     111  pos
  9282     9    53    21     9   208     0     102  ;
  9283     9    57     5     9   208     0      64  }
  9284     9    57     5     9   208     0     576  ENDMETHOD
  9285     9    57     5     9   209     0     577  STARTMETHOD
  9286     9    59     5     9   209     0     111  ByteBufferAsDoubleBufferB
  9287     9    59    30     9   209     0      59  (
  9288     9    59    31     9   209     0     111  ByteBuffer
  9289     9    59    42     9   209     0     111  bb
  9290     9    59    44     9   209     0      66  ,
  9291     9    60    38     9   209     0      36  int
  9292     9    60    42     9   209     0     111  mark
  9293     9    60    46     9   209     0      66  ,
  9294     9    60    48     9   209     0      36  int
  9295     9    60    52     9   209     0     111  pos
  9296     9    60    55     9   209     0      66  ,
  9297     9    60    57     9   209     0      36  int
  9298     9    60    61     9   209     0     111  lim
  9299     9    60    64     9   209     0      66  ,
  9300     9    60    66     9   209     0      36  int
  9301     9    60    70     9   209     0     111  cap
  9302     9    60    73     9   209     0      66  ,
  9303     9    61    38     9   209     0      36  int
  9304     9    61    42     9   209     0     111  off
  9305     9    61    45     9   209     0      60  )
  9306     9    62     5     9   209     0      63  {
  9307     9    64     9     9   209     0      27  super
  9308     9    64    14     9   209     0      59  (
  9309     9    64    15     9   209     0     111  mark
  9310     9    64    19     9   209     0      66  ,
  9311     9    64    21     9   209     0     111  pos
  9312     9    64    24     9   209     0      66  ,
  9313     9    64    26     9   209     0     111  lim
  9314     9    64    29     9   209     0      66  ,
  9315     9    64    31     9   209     0     111  cap
  9316     9    64    34     9   209     0      60  )
  9317     9    64    35     9   209     0     102  ;
  9318     9    65     9     9   209     1     111  this.bb
  9319     9    65    17     9   209     1      67  =
  9320     9    65    19     9   209     1     111  bb
  9321     9    65    21     9   209     1     102  ;
  9322     9    66     9     9   209     1     111  offset
  9323     9    66    16     9   209     1      67  =
  9324     9    66    18     9   209     1     111  off
  9325     9    66    21     9   209     1     102  ;
  9326     9    70     5     9   209     0      64  }
  9327     9    70     5     9   209     0     578  ENDMETHOD
  9328     9    70     5     9   210     0     579  STARTMETHOD
  9329     9    72     5     9   210     0      10  public
  9330     9    72    12     9   210     0     111  DoubleBuffer
  9331     9    72    25     9   210     0     111  slice
  9332     9    72    30     9   210     0      59  (
  9333     9    72    31     9   210     0      60  )
  9334     9    72    33     9   210     0      63  {
  9335     9    73     9     9   210     1      36  int
  9336     9    73    13     9   210     1     111  pos
  9337     9    73    17     9   210     1      67  =
  9338     9    73    19     9   210     1     111  this.position
  9339     9    73    32     9   210     1      59  (
  9340     9    73    33     9   210     1      60  )
  9341     9    73    34     9   210     1     102  ;
  9342     9    74     9     9   210     1      36  int
  9343     9    74    13     9   210     1     111  lim
  9344     9    74    17     9   210     1      67  =
  9345     9    74    19     9   210     1     111  this.limit
  9346     9    74    29     9   210     1      59  (
  9347     9    74    30     9   210     1      60  )
  9348     9    74    31     9   210     1     102  ;
  9349     9    75     9     9   210     0     111  assert
  9350     9    75    16     9   210     0      59  (
  9351     9    75    17     9   210     0     111  pos
  9352     9    75    21     9   210     0      92  <=
  9353     9    75    24     9   210     0     111  lim
  9354     9    75    27     9   210     0      60  )
  9355     9    75    28     9   210     0     102  ;
  9356     9    76     9     9   210     0      36  int
  9357     9    76    13     9   210     0     111  rem
  9358     9    76    17     9   210     0      67  =
  9359     9    76    19     9   210     0      59  (
  9360     9    76    20     9   210     0     111  pos
  9361     9    76    24     9   210     0      92  <=
  9362     9    76    27     9   210     0     111  lim
  9363     9    76    31     9   210     0      58  ?
  9364     9    76    33     9   210     0     111  lim
  9365     9    76    37     9   210     0      77  -
  9366     9    76    39     9   210     0     111  pos
  9367     9    76    43     9   210     0      65  :
  9368     9    76    45     9   210     0     112  0
  9369     9    76    46     9   210     0      60  )
  9370     9    76    47     9   210     0     102  ;
  9371     9    77     9     9   210     0      36  int
  9372     9    77    13     9   210     0     111  off
  9373     9    77    17     9   210     0      67  =
  9374     9    77    19     9   210     0      59  (
  9375     9    77    20     9   210     0     111  pos
  9376     9    77    24     9   210     0      90  <<
  9377     9    77    27     9   210     0     112  3
  9378     9    77    28     9   210     0      60  )
  9379     9    77    30     9   210     0      74  +
  9380     9    77    32     9   210     0     111  offset
  9381     9    77    38     9   210     0     102  ;
  9382     9    78     9     9   210     0     111  assert
  9383     9    78    16     9   210     0      59  (
  9384     9    78    17     9   210     0     111  off
  9385     9    78    21     9   210     0      88  >=
  9386     9    78    24     9   210     0     112  0
  9387     9    78    25     9   210     0      60  )
  9388     9    78    26     9   210     0     102  ;
  9389     9    79     9     9   210     0      19  return
  9390     9    79    16     9   210     0      15  new
  9391     9    79    20     9   210     0     111  ByteBufferAsDoubleBufferB
  9392     9    79    45     9   210     0      59  (
  9393     9    79    46     9   210     0     111  bb
  9394     9    79    48     9   210     0      66  ,
  9395     9    79    50     9   210     0      77  -
  9396     9    79    51     9   210     0     112  1
  9397     9    79    52     9   210     0      66  ,
  9398     9    79    54     9   210     0     112  0
  9399     9    79    55     9   210     0      66  ,
  9400     9    79    57     9   210     0     111  rem
  9401     9    79    60     9   210     0      66  ,
  9402     9    79    62     9   210     0     111  rem
  9403     9    79    65     9   210     1      66  ,
  9404     9    79    67     9   210     1     111  off
  9405     9    79    70     9   210     1      60  )
  9406     9    79    71     9   210     1     102  ;
  9407     9    80     5     9   210     1      64  }
  9408     9    80     5     9   210     0     580  ENDMETHOD
  9409     9    80     5     9   211     0     581  STARTMETHOD
  9410     9    82     5     9   211     0      10  public
  9411     9    82    12     9   211     0     111  DoubleBuffer
  9412     9    82    25     9   211     0     111  duplicate
  9413     9    82    34     9   211     0      59  (
  9414     9    82    35     9   211     0      60  )
  9415     9    82    37     9   211     0      63  {
  9416     9    83     9     9   211     0      19  return
  9417     9    83    16     9   211     0      15  new
  9418     9    83    20     9   211     0     111  ByteBufferAsDoubleBufferB
  9419     9    83    45     9   211     0      59  (
  9420     9    83    46     9   211     0     111  bb
  9421     9    83    48     9   211     0      66  ,
  9422     9    84    53     9   211     1     111  this.markValue
  9423     9    84    67     9   211     1      59  (
  9424     9    84    68     9   211     1      60  )
  9425     9    84    69     9   211     1      66  ,
  9426     9    85    53     9   211     1     111  this.position
  9427     9    85    66     9   211     1      59  (
  9428     9    85    67     9   211     1      60  )
  9429     9    85    68     9   211     1      66  ,
  9430     9    86    53     9   211     1     111  this.limit
  9431     9    86    63     9   211     1      59  (
  9432     9    86    64     9   211     1      60  )
  9433     9    86    65     9   211     1      66  ,
  9434     9    87    53     9   211     1     111  this.capacity
  9435     9    87    66     9   211     1      59  (
  9436     9    87    67     9   211     1      60  )
  9437     9    87    68     9   211     1      66  ,
  9438     9    88    53     9   211     1     111  offset
  9439     9    88    59     9   211     1      60  )
  9440     9    88    60     9   211     1     102  ;
  9441     9    89     5     9   211     1      64  }
  9442     9    89     5     9   211     0     582  ENDMETHOD
  9443     9    89     5     9   212     0     583  STARTMETHOD
  9444     9    91     5     9   212     0      10  public
  9445     9    91    12     9   212     0     111  DoubleBuffer
  9446     9    91    25     9   212     0     111  asReadOnlyBuffer
  9447     9    91    41     9   212     0      59  (
  9448     9    91    42     9   212     0      60  )
  9449     9    91    44     9   212     0      63  {
  9450     9    93     9     9   212     0      19  return
  9451     9    93    16     9   212     0      15  new
  9452     9    93    20     9   212     0     111  ByteBufferAsDoubleBufferRB
  9453     9    93    46     9   212     0      59  (
  9454     9    93    47     9   212     0     111  bb
  9455     9    93    49     9   212     0      66  ,
  9456     9    94    50     9   212     1     111  this.markValue
  9457     9    94    64     9   212     1      59  (
  9458     9    94    65     9   212     1      60  )
  9459     9    94    66     9   212     1      66  ,
  9460     9    95    50     9   212     1     111  this.position
  9461     9    95    63     9   212     1      59  (
  9462     9    95    64     9   212     1      60  )
  9463     9    95    65     9   212     1      66  ,
  9464     9    96    50     9   212     1     111  this.limit
  9465     9    96    60     9   212     1      59  (
  9466     9    96    61     9   212     1      60  )
  9467     9    96    62     9   212     1      66  ,
  9468     9    97    50     9   212     1     111  this.capacity
  9469     9    97    63     9   212     1      59  (
  9470     9    97    64     9   212     1      60  )
  9471     9    97    65     9   212     1      66  ,
  9472     9    98    50     9   212     1     111  offset
  9473     9    98    56     9   212     1      60  )
  9474     9    98    57     9   212     1     102  ;
  9475     9   102     5     9   212     1      64  }
  9476     9   102     5     9   212     0     584  ENDMETHOD
  9477     9   102     5     9   213     0     585  STARTMETHOD
  9478     9   106     5     9   213     0      23  protected
  9479     9   106    15     9   213     0      36  int
  9480     9   106    19     9   213     0     111  ix
  9481     9   106    21     9   213     0      59  (
  9482     9   106    22     9   213     0      36  int
  9483     9   106    26     9   213     0     111  i
  9484     9   106    27     9   213     0      60  )
  9485     9   106    29     9   213     0      63  {
  9486     9   107     9     9   213     0      19  return
  9487     9   107    16     9   213     0      59  (
  9488     9   107    17     9   213     0     111  i
  9489     9   107    19     9   213     0      90  <<
  9490     9   107    22     9   213     0     112  3
  9491     9   107    23     9   213     0      60  )
  9492     9   107    25     9   213     0      74  +
  9493     9   107    27     9   213     0     111  offset
  9494     9   107    33     9   213     0     102  ;
  9495     9   108     5     9   213     0      64  }
  9496     9   108     5     9   213     0     586  ENDMETHOD
  9497     9   108     5     9   214     0     587  STARTMETHOD
  9498     9   110     5     9   214     0      10  public
  9499     9   110    12     9   214     0      32  double
  9500     9   110    19     9   214     0     111  get
  9501     9   110    22     9   214     0      59  (
  9502     9   110    23     9   214     0      60  )
  9503     9   110    25     9   214     0      63  {
  9504     9   111     9     9   214     0      19  return
  9505     9   111    16     9   214     0     111  Bits.getDoubleB
  9506     9   111    31     9   214     0      59  (
  9507     9   111    32     9   214     0     111  bb
  9508     9   111    34     9   214     0      66  ,
  9509     9   111    36     9   214     0     111  ix
  9510     9   111    38     9   214     0      59  (
  9511     9   111    39     9   214     0     111  nextGetIndex
  9512     9   111    51     9   214     0      59  (
  9513     9   111    52     9   214     0      60  )
  9514     9   111    53     9   214     0      60  )
  9515     9   111    54     9   214     0      60  )
  9516     9   111    55     9   214     0     102  ;
  9517     9   112     5     9   214     0      64  }
  9518     9   112     5     9   214     0     588  ENDMETHOD
  9519     9   112     5     9   215     0     589  STARTMETHOD
  9520     9   114     5     9   215     0      10  public
  9521     9   114    12     9   215     0      32  double
  9522     9   114    19     9   215     0     111  get
  9523     9   114    22     9   215     0      59  (
  9524     9   114    23     9   215     0      36  int
  9525     9   114    27     9   215     0     111  i
  9526     9   114    28     9   215     0      60  )
  9527     9   114    30     9   215     0      63  {
  9528     9   115     9     9   215     0      19  return
  9529     9   115    16     9   215     0     111  Bits.getDoubleB
  9530     9   115    31     9   215     0      59  (
  9531     9   115    32     9   215     0     111  bb
  9532     9   115    34     9   215     0      66  ,
  9533     9   115    36     9   215     0     111  ix
  9534     9   115    38     9   215     0      59  (
  9535     9   115    39     9   215     0     111  checkIndex
  9536     9   115    49     9   215     0      59  (
  9537     9   115    50     9   215     0     111  i
  9538     9   115    51     9   215     0      60  )
  9539     9   115    52     9   215     0      60  )
  9540     9   115    53     9   215     0      60  )
  9541     9   115    54     9   215     0     102  ;
  9542     9   116     5     9   215     0      64  }
  9543     9   116     5     9   215     0     590  ENDMETHOD
  9544     9   116     5     9   216     0     591  STARTMETHOD
  9545     9   120     5     9   216     0      10  public
  9546     9   120    12     9   216     0     111  DoubleBuffer
  9547     9   120    25     9   216     0     111  put
  9548     9   120    28     9   216     0      59  (
  9549     9   120    29     9   216     0      32  double
  9550     9   120    36     9   216     0     111  x
  9551     9   120    37     9   216     0      60  )
  9552     9   120    39     9   216     0      63  {
  9553     9   122     9     9   216     0     111  Bits.putDoubleB
  9554     9   122    24     9   216     0      59  (
  9555     9   122    25     9   216     0     111  bb
  9556     9   122    27     9   216     0      66  ,
  9557     9   122    29     9   216     0     111  ix
  9558     9   122    31     9   216     0      59  (
  9559     9   122    32     9   216     0     111  nextPutIndex
  9560     9   122    44     9   216     0      59  (
  9561     9   122    45     9   216     0      60  )
  9562     9   122    46     9   216     0      60  )
  9563     9   122    47     9   216     0      66  ,
  9564     9   122    49     9   216     0     111  x
  9565     9   122    50     9   216     0      60  )
  9566     9   122    51     9   216     0     102  ;
  9567     9   123     9     9   216     0      19  return
  9568     9   123    16     9   216     0      44  this
  9569     9   123    20     9   216     0     102  ;
  9570     9   127     5     9   216     0      64  }
  9571     9   127     5     9   216     0     592  ENDMETHOD
  9572     9   127     5     9   217     0     593  STARTMETHOD
  9573     9   129     5     9   217     0      10  public
  9574     9   129    12     9   217     0     111  DoubleBuffer
  9575     9   129    25     9   217     0     111  put
  9576     9   129    28     9   217     0      59  (
  9577     9   129    29     9   217     0      36  int
  9578     9   129    33     9   217     0     111  i
  9579     9   129    34     9   217     0      66  ,
  9580     9   129    36     9   217     0      32  double
  9581     9   129    43     9   217     0     111  x
  9582     9   129    44     9   217     0      60  )
  9583     9   129    46     9   217     0      63  {
  9584     9   131     9     9   217     0     111  Bits.putDoubleB
  9585     9   131    24     9   217     0      59  (
  9586     9   131    25     9   217     0     111  bb
  9587     9   131    27     9   217     0      66  ,
  9588     9   131    29     9   217     0     111  ix
  9589     9   131    31     9   217     0      59  (
  9590     9   131    32     9   217     0     111  checkIndex
  9591     9   131    42     9   217     0      59  (
  9592     9   131    43     9   217     0     111  i
  9593     9   131    44     9   217     0      60  )
  9594     9   131    45     9   217     0      60  )
  9595     9   131    46     9   217     0      66  ,
  9596     9   131    48     9   217     0     111  x
  9597     9   131    49     9   217     0      60  )
  9598     9   131    50     9   217     0     102  ;
  9599     9   132     9     9   217     0      19  return
  9600     9   132    16     9   217     0      44  this
  9601     9   132    20     9   217     0     102  ;
  9602     9   136     5     9   217     0      64  }
  9603     9   136     5     9   217     0     594  ENDMETHOD
  9604     9   136     5     9   218     0     595  STARTMETHOD
  9605     9   138     5     9   218     0      10  public
  9606     9   138    12     9   218     0     111  DoubleBuffer
  9607     9   138    25     9   218     0     111  compact
  9608     9   138    32     9   218     0      59  (
  9609     9   138    33     9   218     0      60  )
  9610     9   138    35     9   218     0      63  {
  9611     9   140     9     9   218     1      36  int
  9612     9   140    13     9   218     1     111  pos
  9613     9   140    17     9   218     1      67  =
  9614     9   140    19     9   218     1     111  position
  9615     9   140    27     9   218     1      59  (
  9616     9   140    28     9   218     1      60  )
  9617     9   140    29     9   218     1     102  ;
  9618     9   141     9     9   218     1      36  int
  9619     9   141    13     9   218     1     111  lim
  9620     9   141    17     9   218     1      67  =
  9621     9   141    19     9   218     1     111  limit
  9622     9   141    24     9   218     1      59  (
  9623     9   141    25     9   218     1      60  )
  9624     9   141    26     9   218     1     102  ;
  9625     9   142     9     9   218     0     111  assert
  9626     9   142    16     9   218     0      59  (
  9627     9   142    17     9   218     0     111  pos
  9628     9   142    21     9   218     0      92  <=
  9629     9   142    24     9   218     0     111  lim
  9630     9   142    27     9   218     0      60  )
  9631     9   142    28     9   218     0     102  ;
  9632     9   143     9     9   218     0      36  int
  9633     9   143    13     9   218     0     111  rem
  9634     9   143    17     9   218     0      67  =
  9635     9   143    19     9   218     0      59  (
  9636     9   143    20     9   218     0     111  pos
  9637     9   143    24     9   218     0      92  <=
  9638     9   143    27     9   218     0     111  lim
  9639     9   143    31     9   218     0      58  ?
  9640     9   143    33     9   218     0     111  lim
  9641     9   143    37     9   218     0      77  -
  9642     9   143    39     9   218     0     111  pos
  9643     9   143    43     9   218     0      65  :
  9644     9   143    45     9   218     0     112  0
  9645     9   143    46     9   218     0      60  )
  9646     9   143    47     9   218     0     102  ;
  9647     9   145     9     9   218     0     111  ByteBuffer
  9648     9   145    20     9   218     0     111  db
  9649     9   145    23     9   218     0      67  =
  9650     9   145    25     9   218     0     111  bb.duplicate
  9651     9   145    37     9   218     0      59  (
  9652     9   145    38     9   218     0      60  )
  9653     9   145    39     9   218     0     102  ;
  9654     9   146     9     9   218     0     111  db.limit
  9655     9   146    17     9   218     0      59  (
  9656     9   146    18     9   218     0     111  ix
  9657     9   146    20     9   218     0      59  (
  9658     9   146    21     9   218     0     111  lim
  9659     9   146    24     9   218     0      60  )
  9660     9   146    25     9   218     0      60  )
  9661     9   146    26     9   218     0     102  ;
  9662     9   147     9     9   218     0     111  db.position
  9663     9   147    20     9   218     0      59  (
  9664     9   147    21     9   218     0     111  ix
  9665     9   147    23     9   218     0      59  (
  9666     9   147    24     9   218     0     112  0
  9667     9   147    25     9   218     0      60  )
  9668     9   147    26     9   218     0      60  )
  9669     9   147    27     9   218     0     102  ;
  9670     9   148     9     9   218     0     111  ByteBuffer
  9671     9   148    20     9   218     0     111  sb
  9672     9   148    23     9   218     0      67  =
  9673     9   148    25     9   218     0     111  db.slice
  9674     9   148    33     9   218     0      59  (
  9675     9   148    34     9   218     0      60  )
  9676     9   148    35     9   218     0     102  ;
  9677     9   149     9     9   218     0     111  sb.position
  9678     9   149    20     9   218     0      59  (
  9679     9   149    21     9   218     0     111  pos
  9680     9   149    25     9   218     0      90  <<
  9681     9   149    28     9   218     0     112  3
  9682     9   149    29     9   218     0      60  )
  9683     9   149    30     9   218     0     102  ;
  9684     9   150     9     9   218     0     111  sb.compact
  9685     9   150    19     9   218     0      59  (
  9686     9   150    20     9   218     0      60  )
  9687     9   150    21     9   218     0     102  ;
  9688     9   151     9     9   218     0     111  position
  9689     9   151    17     9   218     0      59  (
  9690     9   151    18     9   218     0     111  rem
  9691     9   151    21     9   218     0      60  )
  9692     9   151    22     9   218     0     102  ;
  9693     9   152     9     9   218     0     111  limit
  9694     9   152    14     9   218     0      59  (
  9695     9   152    15     9   218     0     111  capacity
  9696     9   152    23     9   218     0      59  (
  9697     9   152    24     9   218     0      60  )
  9698     9   152    25     9   218     0      60  )
  9699     9   152    26     9   218     0     102  ;
  9700     9   153     9     9   218     0      19  return
  9701     9   153    16     9   218     0      44  this
  9702     9   153    20     9   218     0     102  ;
  9703     9   157     5     9   218     0      64  }
  9704     9   157     5     9   218     0     596  ENDMETHOD
  9705     9   157     5     9   219     0     597  STARTMETHOD
  9706     9   159     5     9   219     0      10  public
  9707     9   159    12     9   219     0      39  boolean
  9708     9   159    20     9   219     0     111  isDirect
  9709     9   159    28     9   219     0      59  (
  9710     9   159    29     9   219     0      60  )
  9711     9   159    31     9   219     0      63  {
  9712     9   160     9     9   219     0      19  return
  9713     9   160    16     9   219     0     111  bb.isDirect
  9714     9   160    27     9   219     0      59  (
  9715     9   160    28     9   219     0      60  )
  9716     9   160    29     9   219     1     102  ;
  9717     9   161     5     9   219     1      64  }
  9718     9   161     5     9   219     0     598  ENDMETHOD
  9719     9   161     5     9   220     0     599  STARTMETHOD
  9720     9   163     5     9   220     0      10  public
  9721     9   163    12     9   220     0      39  boolean
  9722     9   163    20     9   220     0     111  isReadOnly
  9723     9   163    30     9   220     0      59  (
  9724     9   163    31     9   220     0      60  )
  9725     9   163    33     9   220     0      63  {
  9726     9   164     9     9   220     0      19  return
  9727     9   164    16     9   220     0      43  false
  9728     9   164    21     9   220     1     102  ;
  9729     9   165     5     9   220     1      64  }
  9730     9   165     5     9   220     0     600  ENDMETHOD
  9731     9   165     5     9   221     0     601  STARTMETHOD
  9732     9   207     5     9   221     0      10  public
  9733     9   207    12     9   221     0     111  ByteOrder
  9734     9   207    22     9   221     0     111  order
  9735     9   207    27     9   221     0      59  (
  9736     9   207    28     9   221     0      60  )
  9737     9   207    30     9   221     0      63  {
  9738     9   209     9     9   221     0      19  return
  9739     9   209    16     9   221     0     111  ByteOrder.BIG_ENDIAN
  9740     9   209    36     9   221     1     102  ;
  9741     9   214     5     9   221     1      64  }
  9742     9   214     5     9   221     0     602  ENDMETHOD
  9743     9   216     1     9    -1     0      64  }
  9744     9   216     1     9    -1     1     603  ENDCLASS
  9745     9   216     1    -1    -1     1     604  ENDFILE C:\javasrc\java\nio\ByteBufferAsDoubleBufferB.java
  9746    10     1     1    -1    -1     1     605  STARTFILE C:\javasrc\java\nio\ByteBufferAsDoubleBufferL.java
  9747    10    28     1    -1    -1     0       5  package
  9748    10    28     9    -1    -1     0     111  java.nio
  9749    10    28    17    -1    -1     0     102  ;
  9750    10    31     1    10    -1     0     606  STARTCLASS
  9751    10    31     1    10    -1     0      24  class
  9752    10    31     7    10    -1     0     111  ByteBufferAsDoubleBufferL
  9753    10    32     5    10    -1     0      38  extends
  9754    10    32    13    10    -1     0     111  DoubleBuffer
  9755    10    33     1    10    -1     0      63  {
  9756    10    37     5    10    -1     0      23  protected
  9757    10    37    15    10    -1     0       6  final
  9758    10    37    21    10    -1     0     111  ByteBuffer
  9759    10    37    32    10    -1     0     111  bb
  9760    10    37    34    10    -1     0     102  ;
  9761    10    38     5    10    -1     0      23  protected
  9762    10    38    15    10    -1     0       6  final
  9763    10    38    21    10    -1     0      36  int
  9764    10    38    25    10    -1     0     111  offset
  9765    10    38    31    10    -1     0     102  ;
  9766    10    38    31    10   222     0     607  STARTMETHOD
  9767    10    42     5    10   222     0     111  ByteBufferAsDoubleBufferL
  9768    10    42    30    10   222     0      59  (
  9769    10    42    31    10   222     0     111  ByteBuffer
  9770    10    42    42    10   222     0     111  bb
  9771    10    42    44    10   222     0      60  )
  9772    10    42    46    10   222     0      63  {
  9773    10    44     9    10   222     0      27  super
  9774    10    44    14    10   222     0      59  (
  9775    10    44    15    10   222     0      77  -
  9776    10    44    16    10   222     0     112  1
  9777    10    44    17    10   222     0      66  ,
  9778    10    44    19    10   222     0     112  0
  9779    10    44    20    10   222     0      66  ,
  9780    10    45    15    10   222     0     111  bb.remaining
  9781    10    45    27    10   222     0      59  (
  9782    10    45    28    10   222     0      60  )
  9783    10    45    30    10   222     0      84  >>
  9784    10    45    33    10   222     0     112  3
  9785    10    45    34    10   222     0      66  ,
  9786    10    46    15    10   222     0     111  bb.remaining
  9787    10    46    27    10   222     0      59  (
  9788    10    46    28    10   222     0      60  )
  9789    10    46    30    10   222     0      84  >>
  9790    10    46    33    10   222     0     112  3
  9791    10    46    34    10   222     0      60  )
  9792    10    46    35    10   222     0     102  ;
  9793    10    47     9    10   222     0     111  this.bb
  9794    10    47    17    10   222     0      67  =
  9795    10    47    19    10   222     0     111  bb
  9796    10    47    21    10   222     0     102  ;
  9797    10    49     9    10   222     0      36  int
  9798    10    49    13    10   222     0     111  cap
  9799    10    49    17    10   222     0      67  =
  9800    10    49    19    10   222     0     111  this.capacity
  9801    10    49    32    10   222     0      59  (
  9802    10    49    33    10   222     0      60  )
  9803    10    49    34    10   222     0     102  ;
  9804    10    50     9    10   222     0     111  this.limit
  9805    10    50    19    10   222     0      59  (
  9806    10    50    20    10   222     0     111  cap
  9807    10    50    23    10   222     0      60  )
  9808    10    50    24    10   222     0     102  ;
  9809    10    51     9    10   222     0      36  int
  9810    10    51    13    10   222     0     111  pos
  9811    10    51    17    10   222     0      67  =
  9812    10    51    19    10   222     0     111  this.position
  9813    10    51    32    10   222     0      59  (
  9814    10    51    33    10   222     0      60  )
  9815    10    51    34    10   222     0     102  ;
  9816    10    52     9    10   222     0     111  assert
  9817    10    52    16    10   222     0      59  (
  9818    10    52    17    10   222     0     111  pos
  9819    10    52    21    10   222     0      92  <=
  9820    10    52    24    10   222     0     111  cap
  9821    10    52    27    10   222     0      60  )
  9822    10    52    28    10   222     0     102  ;
  9823    10    53     9    10   222     0     111  offset
  9824    10    53    16    10   222     0      67  =
  9825    10    53    18    10   222     0     111  pos
  9826    10    53    21    10   222     0     102  ;
  9827    10    57     5    10   222     0      64  }
  9828    10    57     5    10   222     0     608  ENDMETHOD
  9829    10    57     5    10   223     0     609  STARTMETHOD
  9830    10    59     5    10   223     0     111  ByteBufferAsDoubleBufferL
  9831    10    59    30    10   223     0      59  (
  9832    10    59    31    10   223     0     111  ByteBuffer
  9833    10    59    42    10   223     0     111  bb
  9834    10    59    44    10   223     0      66  ,
  9835    10    60    38    10   223     0      36  int
  9836    10    60    42    10   223     0     111  mark
  9837    10    60    46    10   223     0      66  ,
  9838    10    60    48    10   223     0      36  int
  9839    10    60    52    10   223     0     111  pos
  9840    10    60    55    10   223     0      66  ,
  9841    10    60    57    10   223     0      36  int
  9842    10    60    61    10   223     0     111  lim
  9843    10    60    64    10   223     0      66  ,
  9844    10    60    66    10   223     0      36  int
  9845    10    60    70    10   223     0     111  cap
  9846    10    60    73    10   223     0      66  ,
  9847    10    61    38    10   223     0      36  int
  9848    10    61    42    10   223     0     111  off
  9849    10    61    45    10   223     0      60  )
  9850    10    62     5    10   223     0      63  {
  9851    10    64     9    10   223     0      27  super
  9852    10    64    14    10   223     0      59  (
  9853    10    64    15    10   223     0     111  mark
  9854    10    64    19    10   223     0      66  ,
  9855    10    64    21    10   223     0     111  pos
  9856    10    64    24    10   223     0      66  ,
  9857    10    64    26    10   223     0     111  lim
  9858    10    64    29    10   223     0      66  ,
  9859    10    64    31    10   223     0     111  cap
  9860    10    64    34    10   223     0      60  )
  9861    10    64    35    10   223     0     102  ;
  9862    10    65     9    10   223     1     111  this.bb
  9863    10    65    17    10   223     1      67  =
  9864    10    65    19    10   223     1     111  bb
  9865    10    65    21    10   223     1     102  ;
  9866    10    66     9    10   223     1     111  offset
  9867    10    66    16    10   223     1      67  =
  9868    10    66    18    10   223     1     111  off
  9869    10    66    21    10   223     1     102  ;
  9870    10    70     5    10   223     0      64  }
  9871    10    70     5    10   223     0     610  ENDMETHOD
  9872    10    70     5    10   224     0     611  STARTMETHOD
  9873    10    72     5    10   224     0      10  public
  9874    10    72    12    10   224     0     111  DoubleBuffer
  9875    10    72    25    10   224     0     111  slice
  9876    10    72    30    10   224     0      59  (
  9877    10    72    31    10   224     0      60  )
  9878    10    72    33    10   224     0      63  {
  9879    10    73     9    10   224     1      36  int
  9880    10    73    13    10   224     1     111  pos
  9881    10    73    17    10   224     1      67  =
  9882    10    73    19    10   224     1     111  this.position
  9883    10    73    32    10   224     1      59  (
  9884    10    73    33    10   224     1      60  )
  9885    10    73    34    10   224     1     102  ;
  9886    10    74     9    10   224     1      36  int
  9887    10    74    13    10   224     1     111  lim
  9888    10    74    17    10   224     1      67  =
  9889    10    74    19    10   224     1     111  this.limit
  9890    10    74    29    10   224     1      59  (
  9891    10    74    30    10   224     1      60  )
  9892    10    74    31    10   224     1     102  ;
  9893    10    75     9    10   224     0     111  assert
  9894    10    75    16    10   224     0      59  (
  9895    10    75    17    10   224     0     111  pos
  9896    10    75    21    10   224     0      92  <=
  9897    10    75    24    10   224     0     111  lim
  9898    10    75    27    10   224     0      60  )
  9899    10    75    28    10   224     0     102  ;
  9900    10    76     9    10   224     0      36  int
  9901    10    76    13    10   224     0     111  rem
  9902    10    76    17    10   224     0      67  =
  9903    10    76    19    10   224     0      59  (
  9904    10    76    20    10   224     0     111  pos
  9905    10    76    24    10   224     0      92  <=
  9906    10    76    27    10   224     0     111  lim
  9907    10    76    31    10   224     0      58  ?
  9908    10    76    33    10   224     0     111  lim
  9909    10    76    37    10   224     0      77  -
  9910    10    76    39    10   224     0     111  pos
  9911    10    76    43    10   224     0      65  :
  9912    10    76    45    10   224     0     112  0
  9913    10    76    46    10   224     0      60  )
  9914    10    76    47    10   224     0     102  ;
  9915    10    77     9    10   224     0      36  int
  9916    10    77    13    10   224     0     111  off
  9917    10    77    17    10   224     0      67  =
  9918    10    77    19    10   224     0      59  (
  9919    10    77    20    10   224     0     111  pos
  9920    10    77    24    10   224     0      90  <<
  9921    10    77    27    10   224     0     112  3
  9922    10    77    28    10   224     0      60  )
  9923    10    77    30    10   224     0      74  +
  9924    10    77    32    10   224     0     111  offset
  9925    10    77    38    10   224     0     102  ;
  9926    10    78     9    10   224     0     111  assert
  9927    10    78    16    10   224     0      59  (
  9928    10    78    17    10   224     0     111  off
  9929    10    78    21    10   224     0      88  >=
  9930    10    78    24    10   224     0     112  0
  9931    10    78    25    10   224     0      60  )
  9932    10    78    26    10   224     0     102  ;
  9933    10    79     9    10   224     0      19  return
  9934    10    79    16    10   224     0      15  new
  9935    10    79    20    10   224     0     111  ByteBufferAsDoubleBufferL
  9936    10    79    45    10   224     0      59  (
  9937    10    79    46    10   224     0     111  bb
  9938    10    79    48    10   224     0      66  ,
  9939    10    79    50    10   224     0      77  -
  9940    10    79    51    10   224     0     112  1
  9941    10    79    52    10   224     0      66  ,
  9942    10    79    54    10   224     0     112  0
  9943    10    79    55    10   224     0      66  ,
  9944    10    79    57    10   224     0     111  rem
  9945    10    79    60    10   224     0      66  ,
  9946    10    79    62    10   224     0     111  rem
  9947    10    79    65    10   224     1      66  ,
  9948    10    79    67    10   224     1     111  off
  9949    10    79    70    10   224     1      60  )
  9950    10    79    71    10   224     1     102  ;
  9951    10    80     5    10   224     1      64  }
  9952    10    80     5    10   224     0     612  ENDMETHOD
  9953    10    80     5    10   225     0     613  STARTMETHOD
  9954    10    82     5    10   225     0      10  public
  9955    10    82    12    10   225     0     111  DoubleBuffer
  9956    10    82    25    10   225     0     111  duplicate
  9957    10    82    34    10   225     0      59  (
  9958    10    82    35    10   225     0      60  )
  9959    10    82    37    10   225     0      63  {
  9960    10    83     9    10   225     0      19  return
  9961    10    83    16    10   225     0      15  new
  9962    10    83    20    10   225     0     111  ByteBufferAsDoubleBufferL
  9963    10    83    45    10   225     0      59  (
  9964    10    83    46    10   225     0     111  bb
  9965    10    83    48    10   225     0      66  ,
  9966    10    84    53    10   225     1     111  this.markValue
  9967    10    84    67    10   225     1      59  (
  9968    10    84    68    10   225     1      60  )
  9969    10    84    69    10   225     1      66  ,
  9970    10    85    53    10   225     1     111  this.position
  9971    10    85    66    10   225     1      59  (
  9972    10    85    67    10   225     1      60  )
  9973    10    85    68    10   225     1      66  ,
  9974    10    86    53    10   225     1     111  this.limit
  9975    10    86    63    10   225     1      59  (
  9976    10    86    64    10   225     1      60  )
  9977    10    86    65    10   225     1      66  ,
  9978    10    87    53    10   225     1     111  this.capacity
  9979    10    87    66    10   225     1      59  (
  9980    10    87    67    10   225     1      60  )
  9981    10    87    68    10   225     1      66  ,
  9982    10    88    53    10   225     1     111  offset
  9983    10    88    59    10   225     1      60  )
  9984    10    88    60    10   225     1     102  ;
  9985    10    89     5    10   225     1      64  }
  9986    10    89     5    10   225     0     614  ENDMETHOD
  9987    10    89     5    10   226     0     615  STARTMETHOD
  9988    10    91     5    10   226     0      10  public
  9989    10    91    12    10   226     0     111  DoubleBuffer
  9990    10    91    25    10   226     0     111  asReadOnlyBuffer
  9991    10    91    41    10   226     0      59  (
  9992    10    91    42    10   226     0      60  )
  9993    10    91    44    10   226     0      63  {
  9994    10    93     9    10   226     0      19  return
  9995    10    93    16    10   226     0      15  new
  9996    10    93    20    10   226     0     111  ByteBufferAsDoubleBufferRL
  9997    10    93    46    10   226     0      59  (
  9998    10    93    47    10   226     0     111  bb
  9999    10    93    49    10   226     0      66  ,
 10000    10    94    50    10   226     1     111  this.markValue
 10001    10    94    64    10   226     1      59  (
 10002    10    94    65    10   226     1      60  )
 10003    10    94    66    10   226     1      66  ,
 10004    10    95    50    10   226     1     111  this.position
 10005    10    95    63    10   226     1      59  (
 10006    10    95    64    10   226     1      60  )
 10007    10    95    65    10   226     1      66  ,
 10008    10    96    50    10   226     1     111  this.limit
 10009    10    96    60    10   226     1      59  (
 10010    10    96    61    10   226     1      60  )
 10011    10    96    62    10   226     1      66  ,
 10012    10    97    50    10   226     1     111  this.capacity
 10013    10    97    63    10   226     1      59  (
 10014    10    97    64    10   226     1      60  )
 10015    10    97    65    10   226     1      66  ,
 10016    10    98    50    10   226     1     111  offset
 10017    10    98    56    10   226     1      60  )
 10018    10    98    57    10   226     1     102  ;
 10019    10   102     5    10   226     1      64  }
 10020    10   102     5    10   226     0     616  ENDMETHOD
 10021    10   102     5    10   227     0     617  STARTMETHOD
 10022    10   106     5    10   227     0      23  protected
 10023    10   106    15    10   227     0      36  int
 10024    10   106    19    10   227     0     111  ix
 10025    10   106    21    10   227     0      59  (
 10026    10   106    22    10   227     0      36  int
 10027    10   106    26    10   227     0     111  i
 10028    10   106    27    10   227     0      60  )
 10029    10   106    29    10   227     0      63  {
 10030    10   107     9    10   227     0      19  return
 10031    10   107    16    10   227     0      59  (
 10032    10   107    17    10   227     0     111  i
 10033    10   107    19    10   227     0      90  <<
 10034    10   107    22    10   227     0     112  3
 10035    10   107    23    10   227     0      60  )
 10036    10   107    25    10   227     0      74  +
 10037    10   107    27    10   227     0     111  offset
 10038    10   107    33    10   227     0     102  ;
 10039    10   108     5    10   227     0      64  }
 10040    10   108     5    10   227     0     618  ENDMETHOD
 10041    10   108     5    10   228     0     619  STARTMETHOD
 10042    10   110     5    10   228     0      10  public
 10043    10   110    12    10   228     0      32  double
 10044    10   110    19    10   228     0     111  get
 10045    10   110    22    10   228     0      59  (
 10046    10   110    23    10   228     0      60  )
 10047    10   110    25    10   228     0      63  {
 10048    10   111     9    10   228     0      19  return
 10049    10   111    16    10   228     0     111  Bits.getDoubleL
 10050    10   111    31    10   228     0      59  (
 10051    10   111    32    10   228     0     111  bb
 10052    10   111    34    10   228     0      66  ,
 10053    10   111    36    10   228     0     111  ix
 10054    10   111    38    10   228     0      59  (
 10055    10   111    39    10   228     0     111  nextGetIndex
 10056    10   111    51    10   228     0      59  (
 10057    10   111    52    10   228     0      60  )
 10058    10   111    53    10   228     0      60  )
 10059    10   111    54    10   228     0      60  )
 10060    10   111    55    10   228     0     102  ;
 10061    10   112     5    10   228     0      64  }
 10062    10   112     5    10   228     0     620  ENDMETHOD
 10063    10   112     5    10   229     0     621  STARTMETHOD
 10064    10   114     5    10   229     0      10  public
 10065    10   114    12    10   229     0      32  double
 10066    10   114    19    10   229     0     111  get
 10067    10   114    22    10   229     0      59  (
 10068    10   114    23    10   229     0      36  int
 10069    10   114    27    10   229     0     111  i
 10070    10   114    28    10   229     0      60  )
 10071    10   114    30    10   229     0      63  {
 10072    10   115     9    10   229     0      19  return
 10073    10   115    16    10   229     0     111  Bits.getDoubleL
 10074    10   115    31    10   229     0      59  (
 10075    10   115    32    10   229     0     111  bb
 10076    10   115    34    10   229     0      66  ,
 10077    10   115    36    10   229     0     111  ix
 10078    10   115    38    10   229     0      59  (
 10079    10   115    39    10   229     0     111  checkIndex
 10080    10   115    49    10   229     0      59  (
 10081    10   115    50    10   229     0     111  i
 10082    10   115    51    10   229     0      60  )
 10083    10   115    52    10   229     0      60  )
 10084    10   115    53    10   229     0      60  )
 10085    10   115    54    10   229     0     102  ;
 10086    10   116     5    10   229     0      64  }
 10087    10   116     5    10   229     0     622  ENDMETHOD
 10088    10   116     5    10   230     0     623  STARTMETHOD
 10089    10   120     5    10   230     0      10  public
 10090    10   120    12    10   230     0     111  DoubleBuffer
 10091    10   120    25    10   230     0     111  put
 10092    10   120    28    10   230     0      59  (
 10093    10   120    29    10   230     0      32  double
 10094    10   120    36    10   230     0     111  x
 10095    10   120    37    10   230     0      60  )
 10096    10   120    39    10   230     0      63  {
 10097    10   122     9    10   230     0     111  Bits.putDoubleL
 10098    10   122    24    10   230     0      59  (
 10099    10   122    25    10   230     0     111  bb
 10100    10   122    27    10   230     0      66  ,
 10101    10   122    29    10   230     0     111  ix
 10102    10   122    31    10   230     0      59  (
 10103    10   122    32    10   230     0     111  nextPutIndex
 10104    10   122    44    10   230     0      59  (
 10105    10   122    45    10   230     0      60  )
 10106    10   122    46    10   230     0      60  )
 10107    10   122    47    10   230     0      66  ,
 10108    10   122    49    10   230     0     111  x
 10109    10   122    50    10   230     0      60  )
 10110    10   122    51    10   230     0     102  ;
 10111    10   123     9    10   230     0      19  return
 10112    10   123    16    10   230     0      44  this
 10113    10   123    20    10   230     0     102  ;
 10114    10   127     5    10   230     0      64  }
 10115    10   127     5    10   230     0     624  ENDMETHOD
 10116    10   127     5    10   231     0     625  STARTMETHOD
 10117    10   129     5    10   231     0      10  public
 10118    10   129    12    10   231     0     111  DoubleBuffer
 10119    10   129    25    10   231     0     111  put
 10120    10   129    28    10   231     0      59  (
 10121    10   129    29    10   231     0      36  int
 10122    10   129    33    10   231     0     111  i
 10123    10   129    34    10   231     0      66  ,
 10124    10   129    36    10   231     0      32  double
 10125    10   129    43    10   231     0     111  x
 10126    10   129    44    10   231     0      60  )
 10127    10   129    46    10   231     0      63  {
 10128    10   131     9    10   231     0     111  Bits.putDoubleL
 10129    10   131    24    10   231     0      59  (
 10130    10   131    25    10   231     0     111  bb
 10131    10   131    27    10   231     0      66  ,
 10132    10   131    29    10   231     0     111  ix
 10133    10   131    31    10   231     0      59  (
 10134    10   131    32    10   231     0     111  checkIndex
 10135    10   131    42    10   231     0      59  (
 10136    10   131    43    10   231     0     111  i
 10137    10   131    44    10   231     0      60  )
 10138    10   131    45    10   231     0      60  )
 10139    10   131    46    10   231     0      66  ,
 10140    10   131    48    10   231     0     111  x
 10141    10   131    49    10   231     0      60  )
 10142    10   131    50    10   231     0     102  ;
 10143    10   132     9    10   231     0      19  return
 10144    10   132    16    10   231     0      44  this
 10145    10   132    20    10   231     0     102  ;
 10146    10   136     5    10   231     0      64  }
 10147    10   136     5    10   231     0     626  ENDMETHOD
 10148    10   136     5    10   232     0     627  STARTMETHOD
 10149    10   138     5    10   232     0      10  public
 10150    10   138    12    10   232     0     111  DoubleBuffer
 10151    10   138    25    10   232     0     111  compact
 10152    10   138    32    10   232     0      59  (
 10153    10   138    33    10   232     0      60  )
 10154    10   138    35    10   232     0      63  {
 10155    10   140     9    10   232     1      36  int
 10156    10   140    13    10   232     1     111  pos
 10157    10   140    17    10   232     1      67  =
 10158    10   140    19    10   232     1     111  position
 10159    10   140    27    10   232     1      59  (
 10160    10   140    28    10   232     1      60  )
 10161    10   140    29    10   232     1     102  ;
 10162    10   141     9    10   232     1      36  int
 10163    10   141    13    10   232     1     111  lim
 10164    10   141    17    10   232     1      67  =
 10165    10   141    19    10   232     1     111  limit
 10166    10   141    24    10   232     1      59  (
 10167    10   141    25    10   232     1      60  )
 10168    10   141    26    10   232     1     102  ;
 10169    10   142     9    10   232     0     111  assert
 10170    10   142    16    10   232     0      59  (
 10171    10   142    17    10   232     0     111  pos
 10172    10   142    21    10   232     0      92  <=
 10173    10   142    24    10   232     0     111  lim
 10174    10   142    27    10   232     0      60  )
 10175    10   142    28    10   232     0     102  ;
 10176    10   143     9    10   232     0      36  int
 10177    10   143    13    10   232     0     111  rem
 10178    10   143    17    10   232     0      67  =
 10179    10   143    19    10   232     0      59  (
 10180    10   143    20    10   232     0     111  pos
 10181    10   143    24    10   232     0      92  <=
 10182    10   143    27    10   232     0     111  lim
 10183    10   143    31    10   232     0      58  ?
 10184    10   143    33    10   232     0     111  lim
 10185    10   143    37    10   232     0      77  -
 10186    10   143    39    10   232     0     111  pos
 10187    10   143    43    10   232     0      65  :
 10188    10   143    45    10   232     0     112  0
 10189    10   143    46    10   232     0      60  )
 10190    10   143    47    10   232     0     102  ;
 10191    10   145     9    10   232     0     111  ByteBuffer
 10192    10   145    20    10   232     0     111  db
 10193    10   145    23    10   232     0      67  =
 10194    10   145    25    10   232     0     111  bb.duplicate
 10195    10   145    37    10   232     0      59  (
 10196    10   145    38    10   232     0      60  )
 10197    10   145    39    10   232     0     102  ;
 10198    10   146     9    10   232     0     111  db.limit
 10199    10   146    17    10   232     0      59  (
 10200    10   146    18    10   232     0     111  ix
 10201    10   146    20    10   232     0      59  (
 10202    10   146    21    10   232     0     111  lim
 10203    10   146    24    10   232     0      60  )
 10204    10   146    25    10   232     0      60  )
 10205    10   146    26    10   232     0     102  ;
 10206    10   147     9    10   232     0     111  db.position
 10207    10   147    20    10   232     0      59  (
 10208    10   147    21    10   232     0     111  ix
 10209    10   147    23    10   232     0      59  (
 10210    10   147    24    10   232     0     112  0
 10211    10   147    25    10   232     0      60  )
 10212    10   147    26    10   232     0      60  )
 10213    10   147    27    10   232     0     102  ;
 10214    10   148     9    10   232     0     111  ByteBuffer
 10215    10   148    20    10   232     0     111  sb
 10216    10   148    23    10   232     0      67  =
 10217    10   148    25    10   232     0     111  db.slice
 10218    10   148    33    10   232     0      59  (
 10219    10   148    34    10   232     0      60  )
 10220    10   148    35    10   232     0     102  ;
 10221    10   149     9    10   232     0     111  sb.position
 10222    10   149    20    10   232     0      59  (
 10223    10   149    21    10   232     0     111  pos
 10224    10   149    25    10   232     0      90  <<
 10225    10   149    28    10   232     0     112  3
 10226    10   149    29    10   232     0      60  )
 10227    10   149    30    10   232     0     102  ;
 10228    10   150     9    10   232     0     111  sb.compact
 10229    10   150    19    10   232     0      59  (
 10230    10   150    20    10   232     0      60  )
 10231    10   150    21    10   232     0     102  ;
 10232    10   151     9    10   232     0     111  position
 10233    10   151    17    10   232     0      59  (
 10234    10   151    18    10   232     0     111  rem
 10235    10   151    21    10   232     0      60  )
 10236    10   151    22    10   232     0     102  ;
 10237    10   152     9    10   232     0     111  limit
 10238    10   152    14    10   232     0      59  (
 10239    10   152    15    10   232     0     111  capacity
 10240    10   152    23    10   232     0      59  (
 10241    10   152    24    10   232     0      60  )
 10242    10   152    25    10   232     0      60  )
 10243    10   152    26    10   232     0     102  ;
 10244    10   153     9    10   232     0      19  return
 10245    10   153    16    10   232     0      44  this
 10246    10   153    20    10   232     0     102  ;
 10247    10   157     5    10   232     0      64  }
 10248    10   157     5    10   232     0     628  ENDMETHOD
 10249    10   157     5    10   233     0     629  STARTMETHOD
 10250    10   159     5    10   233     0      10  public
 10251    10   159    12    10   233     0      39  boolean
 10252    10   159    20    10   233     0     111  isDirect
 10253    10   159    28    10   233     0      59  (
 10254    10   159    29    10   233     0      60  )
 10255    10   159    31    10   233     0      63  {
 10256    10   160     9    10   233     0      19  return
 10257    10   160    16    10   233     0     111  bb.isDirect
 10258    10   160    27    10   233     0      59  (
 10259    10   160    28    10   233     0      60  )
 10260    10   160    29    10   233     1     102  ;
 10261    10   161     5    10   233     1      64  }
 10262    10   161     5    10   233     0     630  ENDMETHOD
 10263    10   161     5    10   234     0     631  STARTMETHOD
 10264    10   163     5    10   234     0      10  public
 10265    10   163    12    10   234     0      39  boolean
 10266    10   163    20    10   234     0     111  isReadOnly
 10267    10   163    30    10   234     0      59  (
 10268    10   163    31    10   234     0      60  )
 10269    10   163    33    10   234     0      63  {
 10270    10   164     9    10   234     0      19  return
 10271    10   164    16    10   234     0      43  false
 10272    10   164    21    10   234     1     102  ;
 10273    10   165     5    10   234     1      64  }
 10274    10   165     5    10   234     0     632  ENDMETHOD
 10275    10   165     5    10   235     0     633  STARTMETHOD
 10276    10   207     5    10   235     0      10  public
 10277    10   207    12    10   235     0     111  ByteOrder
 10278    10   207    22    10   235     0     111  order
 10279    10   207    27    10   235     0      59  (
 10280    10   207    28    10   235     0      60  )
 10281    10   207    30    10   235     0      63  {
 10282    10   212     9    10   235     0      19  return
 10283    10   212    16    10   235     0     111  ByteOrder.LITTLE_ENDIAN
 10284    10   212    39    10   235     1     102  ;
 10285    10   214     5    10   235     1      64  }
 10286    10   214     5    10   235     0     634  ENDMETHOD
 10287    10   216     1    10    -1     0      64  }
 10288    10   216     1    10    -1     1     635  ENDCLASS
 10289    10   216     1    -1    -1     1     636  ENDFILE C:\javasrc\java\nio\ByteBufferAsDoubleBufferL.java
 10290    11     1     1    -1    -1     1     637  STARTFILE C:\javasrc\java\nio\ByteBufferAsDoubleBufferRB.java
 10291    11    28     1    -1    -1     0       5  package
 10292    11    28     9    -1    -1     0     111  java.nio
 10293    11    28    17    -1    -1     0     102  ;
 10294    11    31     1    11    -1     0     638  STARTCLASS
 10295    11    31     1    11    -1     0      24  class
 10296    11    31     7    11    -1     0     111  ByteBufferAsDoubleBufferRB
 10297    11    32     5    11    -1     0      38  extends
 10298    11    32    13    11    -1     0     111  ByteBufferAsDoubleBufferB
 10299    11    33     1    11    -1     0      63  {
 10300    11    33     1    11   236     0     639  STARTMETHOD
 10301    11    42     5    11   236     0     111  ByteBufferAsDoubleBufferRB
 10302    11    42    31    11   236     0      59  (
 10303    11    42    32    11   236     0     111  ByteBuffer
 10304    11    42    43    11   236     0     111  bb
 10305    11    42    45    11   236     0      60  )
 10306    11    42    47    11   236     0      63  {
 10307    11    55     9    11   236     0      27  super
 10308    11    55    14    11   236     0      59  (
 10309    11    55    15    11   236     0     111  bb
 10310    11    55    17    11   236     0      60  )
 10311    11    55    18    11   236     0     102  ;
 10312    11    57     5    11   236     0      64  }
 10313    11    57     5    11   236     0     640  ENDMETHOD
 10314    11    57     5    11   237     0     641  STARTMETHOD
 10315    11    59     5    11   237     0     111  ByteBufferAsDoubleBufferRB
 10316    11    59    31    11   237     0      59  (
 10317    11    59    32    11   237     0     111  ByteBuffer
 10318    11    59    43    11   237     0     111  bb
 10319    11    59    45    11   237     0      66  ,
 10320    11    60    38    11   237     0      36  int
 10321    11    60    42    11   237     0     111  mark
 10322    11    60    46    11   237     0      66  ,
 10323    11    60    48    11   237     0      36  int
 10324    11    60    52    11   237     0     111  pos
 10325    11    60    55    11   237     0      66  ,
 10326    11    60    57    11   237     0      36  int
 10327    11    60    61    11   237     0     111  lim
 10328    11    60    64    11   237     0      66  ,
 10329    11    60    66    11   237     0      36  int
 10330    11    60    70    11   237     0     111  cap
 10331    11    60    73    11   237     0      66  ,
 10332    11    61    38    11   237     0      36  int
 10333    11    61    42    11   237     0     111  off
 10334    11    61    45    11   237     0      60  )
 10335    11    62     5    11   237     0      63  {
 10336    11    68     9    11   237     0      27  super
 10337    11    68    14    11   237     0      59  (
 10338    11    68    15    11   237     0     111  bb
 10339    11    68    17    11   237     0      66  ,
 10340    11    68    19    11   237     0     111  mark
 10341    11    68    23    11   237     0      66  ,
 10342    11    68    25    11   237     0     111  pos
 10343    11    68    28    11   237     0      66  ,
 10344    11    68    30    11   237     0     111  lim
 10345    11    68    33    11   237     0      66  ,
 10346    11    68    35    11   237     0     111  cap
 10347    11    68    38    11   237     0      66  ,
 10348    11    68    40    11   237     0     111  off
 10349    11    68    43    11   237     0      60  )
 10350    11    68    44    11   237     0     102  ;
 10351    11    70     5    11   237     0      64  }
 10352    11    70     5    11   237     0     642  ENDMETHOD
 10353    11    70     5    11   238     0     643  STARTMETHOD
 10354    11    72     5    11   238     0      10  public
 10355    11    72    12    11   238     0     111  DoubleBuffer
 10356    11    72    25    11   238     0     111  slice
 10357    11    72    30    11   238     0      59  (
 10358    11    72    31    11   238     0      60  )
 10359    11    72    33    11   238     0      63  {
 10360    11    73     9    11   238     1      36  int
 10361    11    73    13    11   238     1     111  pos
 10362    11    73    17    11   238     1      67  =
 10363    11    73    19    11   238     1     111  this.position
 10364    11    73    32    11   238     1      59  (
 10365    11    73    33    11   238     1      60  )
 10366    11    73    34    11   238     1     102  ;
 10367    11    74     9    11   238     1      36  int
 10368    11    74    13    11   238     1     111  lim
 10369    11    74    17    11   238     1      67  =
 10370    11    74    19    11   238     1     111  this.limit
 10371    11    74    29    11   238     1      59  (
 10372    11    74    30    11   238     1      60  )
 10373    11    74    31    11   238     1     102  ;
 10374    11    75     9    11   238     0     111  assert
 10375    11    75    16    11   238     0      59  (
 10376    11    75    17    11   238     0     111  pos
 10377    11    75    21    11   238     0      92  <=
 10378    11    75    24    11   238     0     111  lim
 10379    11    75    27    11   238     0      60  )
 10380    11    75    28    11   238     0     102  ;
 10381    11    76     9    11   238     0      36  int
 10382    11    76    13    11   238     0     111  rem
 10383    11    76    17    11   238     0      67  =
 10384    11    76    19    11   238     0      59  (
 10385    11    76    20    11   238     0     111  pos
 10386    11    76    24    11   238     0      92  <=
 10387    11    76    27    11   238     0     111  lim
 10388    11    76    31    11   238     0      58  ?
 10389    11    76    33    11   238     0     111  lim
 10390    11    76    37    11   238     0      77  -
 10391    11    76    39    11   238     0     111  pos
 10392    11    76    43    11   238     0      65  :
 10393    11    76    45    11   238     0     112  0
 10394    11    76    46    11   238     0      60  )
 10395    11    76    47    11   238     0     102  ;
 10396    11    77     9    11   238     0      36  int
 10397    11    77    13    11   238     0     111  off
 10398    11    77    17    11   238     0      67  =
 10399    11    77    19    11   238     0      59  (
 10400    11    77    20    11   238     0     111  pos
 10401    11    77    24    11   238     0      90  <<
 10402    11    77    27    11   238     0     112  3
 10403    11    77    28    11   238     0      60  )
 10404    11    77    30    11   238     0      74  +
 10405    11    77    32    11   238     0     111  offset
 10406    11    77    38    11   238     0     102  ;
 10407    11    78     9    11   238     0     111  assert
 10408    11    78    16    11   238     0      59  (
 10409    11    78    17    11   238     0     111  off
 10410    11    78    21    11   238     0      88  >=
 10411    11    78    24    11   238     0     112  0
 10412    11    78    25    11   238     0      60  )
 10413    11    78    26    11   238     0     102  ;
 10414    11    79     9    11   238     0      19  return
 10415    11    79    16    11   238     0      15  new
 10416    11    79    20    11   238     0     111  ByteBufferAsDoubleBufferRB
 10417    11    79    46    11   238     0      59  (
 10418    11    79    47    11   238     0     111  bb
 10419    11    79    49    11   238     0      66  ,
 10420    11    79    51    11   238     0      77  -
 10421    11    79    52    11   238     0     112  1
 10422    11    79    53    11   238     0      66  ,
 10423    11    79    55    11   238     0     112  0
 10424    11    79    56    11   238     0      66  ,
 10425    11    79    58    11   238     0     111  rem
 10426    11    79    61    11   238     0      66  ,
 10427    11    79    63    11   238     0     111  rem
 10428    11    79    66    11   238     0      66  ,
 10429    11    79    68    11   238     0     111  off
 10430    11    79    71    11   238     0      60  )
 10431    11    79    72    11   238     0     102  ;
 10432    11    80     5    11   238     0      64  }
 10433    11    80     5    11   238     0     644  ENDMETHOD
 10434    11    80     5    11   239     0     645  STARTMETHOD
 10435    11    82     5    11   239     0      10  public
 10436    11    82    12    11   239     0     111  DoubleBuffer
 10437    11    82    25    11   239     0     111  duplicate
 10438    11    82    34    11   239     0      59  (
 10439    11    82    35    11   239     0      60  )
 10440    11    82    37    11   239     0      63  {
 10441    11    83     9    11   239     0      19  return
 10442    11    83    16    11   239     0      15  new
 10443    11    83    20    11   239     0     111  ByteBufferAsDoubleBufferRB
 10444    11    83    46    11   239     0      59  (
 10445    11    83    47    11   239     0     111  bb
 10446    11    83    49    11   239     0      66  ,
 10447    11    84    53    11   239     1     111  this.markValue
 10448    11    84    67    11   239     1      59  (
 10449    11    84    68    11   239     1      60  )
 10450    11    84    69    11   239     1      66  ,
 10451    11    85    53    11   239     1     111  this.position
 10452    11    85    66    11   239     1      59  (
 10453    11    85    67    11   239     1      60  )
 10454    11    85    68    11   239     1      66  ,
 10455    11    86    53    11   239     1     111  this.limit
 10456    11    86    63    11   239     1      59  (
 10457    11    86    64    11   239     1      60  )
 10458    11    86    65    11   239     1      66  ,
 10459    11    87    53    11   239     1     111  this.capacity
 10460    11    87    66    11   239     1      59  (
 10461    11    87    67    11   239     1      60  )
 10462    11    87    68    11   239     1      66  ,
 10463    11    88    53    11   239     0     111  offset
 10464    11    88    59    11   239     0      60  )
 10465    11    88    60    11   239     0     102  ;
 10466    11    89     5    11   239     0      64  }
 10467    11    89     5    11   239     0     646  ENDMETHOD
 10468    11    89     5    11   240     0     647  STARTMETHOD
 10469    11    91     5    11   240     0      10  public
 10470    11    91    12    11   240     0     111  DoubleBuffer
 10471    11    91    25    11   240     0     111  asReadOnlyBuffer
 10472    11    91    41    11   240     0      59  (
 10473    11    91    42    11   240     0      60  )
 10474    11    91    44    11   240     0      63  {
 10475    11   100     9    11   240     0      19  return
 10476    11   100    16    11   240     0     111  duplicate
 10477    11   100    25    11   240     0      59  (
 10478    11   100    26    11   240     0      60  )
 10479    11   100    27    11   240     0     102  ;
 10480    11   102     5    11   240     0      64  }
 10481    11   102     5    11   240     0     648  ENDMETHOD
 10482    11   102     5    11   241     0     649  STARTMETHOD
 10483    11   120     5    11   241     0      10  public
 10484    11   120    12    11   241     0     111  DoubleBuffer
 10485    11   120    25    11   241     0     111  put
 10486    11   120    28    11   241     0      59  (
 10487    11   120    29    11   241     0      32  double
 10488    11   120    36    11   241     0     111  x
 10489    11   120    37    11   241     0      60  )
 10490    11   120    39    11   241     0      63  {
 10491    11   125     9    11   241     0      20  throw
 10492    11   125    15    11   241     0      15  new
 10493    11   125    19    11   241     0     111  ReadOnlyBufferException
 10494    11   125    42    11   241     0      59  (
 10495    11   125    43    11   241     0      60  )
 10496    11   125    44    11   241     0     102  ;
 10497    11   127     5    11   241     0      64  }
 10498    11   127     5    11   241     0     650  ENDMETHOD
 10499    11   127     5    11   242     0     651  STARTMETHOD
 10500    11   129     5    11   242     0      10  public
 10501    11   129    12    11   242     0     111  DoubleBuffer
 10502    11   129    25    11   242     0     111  put
 10503    11   129    28    11   242     0      59  (
 10504    11   129    29    11   242     0      36  int
 10505    11   129    33    11   242     0     111  i
 10506    11   129    34    11   242     0      66  ,
 10507    11   129    36    11   242     0      32  double
 10508    11   129    43    11   242     0     111  x
 10509    11   129    44    11   242     0      60  )
 10510    11   129    46    11   242     0      63  {
 10511    11   134     9    11   242     0      20  throw
 10512    11   134    15    11   242     0      15  new
 10513    11   134    19    11   242     0     111  ReadOnlyBufferException
 10514    11   134    42    11   242     0      59  (
 10515    11   134    43    11   242     0      60  )
 10516    11   134    44    11   242     0     102  ;
 10517    11   136     5    11   242     0      64  }
 10518    11   136     5    11   242     0     652  ENDMETHOD
 10519    11   136     5    11   243     0     653  STARTMETHOD
 10520    11   138     5    11   243     0      10  public
 10521    11   138    12    11   243     0     111  DoubleBuffer
 10522    11   138    25    11   243     0     111  compact
 10523    11   138    32    11   243     0      59  (
 10524    11   138    33    11   243     0      60  )
 10525    11   138    35    11   243     0      63  {
 10526    11   155     9    11   243     0      20  throw
 10527    11   155    15    11   243     0      15  new
 10528    11   155    19    11   243     0     111  ReadOnlyBufferException
 10529    11   155    42    11   243     0      59  (
 10530    11   155    43    11   243     0      60  )
 10531    11   155    44    11   243     0     102  ;
 10532    11   157     5    11   243     0      64  }
 10533    11   157     5    11   243     0     654  ENDMETHOD
 10534    11   157     5    11   244     0     655  STARTMETHOD
 10535    11   159     5    11   244     0      10  public
 10536    11   159    12    11   244     0      39  boolean
 10537    11   159    20    11   244     0     111  isDirect
 10538    11   159    28    11   244     0      59  (
 10539    11   159    29    11   244     0      60  )
 10540    11   159    31    11   244     0      63  {
 10541    11   160     9    11   244     0      19  return
 10542    11   160    16    11   244     0     111  bb.isDirect
 10543    11   160    27    11   244     0      59  (
 10544    11   160    28    11   244     0      60  )
 10545    11   160    29    11   244     1     102  ;
 10546    11   161     5    11   244     1      64  }
 10547    11   161     5    11   244     0     656  ENDMETHOD
 10548    11   161     5    11   245     0     657  STARTMETHOD
 10549    11   163     5    11   245     0      10  public
 10550    11   163    12    11   245     0      39  boolean
 10551    11   163    20    11   245     0     111  isReadOnly
 10552    11   163    30    11   245     0      59  (
 10553    11   163    31    11   245     0      60  )
 10554    11   163    33    11   245     0      63  {
 10555    11   164     9    11   245     0      19  return
 10556    11   164    16    11   245     0      52  true
 10557    11   164    20    11   245     1     102  ;
 10558    11   165     5    11   245     1      64  }
 10559    11   165     5    11   245     0     658  ENDMETHOD
 10560    11   165     5    11   246     0     659  STARTMETHOD
 10561    11   207     5    11   246     0      10  public
 10562    11   207    12    11   246     0     111  ByteOrder
 10563    11   207    22    11   246     0     111  order
 10564    11   207    27    11   246     0      59  (
 10565    11   207    28    11   246     0      60  )
 10566    11   207    30    11   246     0      63  {
 10567    11   209     9    11   246     0      19  return
 10568    11   209    16    11   246     0     111  ByteOrder.BIG_ENDIAN
 10569    11   209    36    11   246     1     102  ;
 10570    11   214     5    11   246     1      64  }
 10571    11   214     5    11   246     0     660  ENDMETHOD
 10572    11   216     1    11    -1     0      64  }
 10573    11   216     1    11    -1     1     661  ENDCLASS
 10574    11   216     1    -1    -1     1     662  ENDFILE C:\javasrc\java\nio\ByteBufferAsDoubleBufferRB.java
 10575    12     1     1    -1    -1     1     663  STARTFILE C:\javasrc\java\nio\ByteBufferAsDoubleBufferRL.java
 10576    12    28     1    -1    -1     0       5  package
 10577    12    28     9    -1    -1     0     111  java.nio
 10578    12    28    17    -1    -1     0     102  ;
 10579    12    31     1    12    -1     0     664  STARTCLASS
 10580    12    31     1    12    -1     0      24  class
 10581    12    31     7    12    -1     0     111  ByteBufferAsDoubleBufferRL
 10582    12    32     5    12    -1     0      38  extends
 10583    12    32    13    12    -1     0     111  ByteBufferAsDoubleBufferL
 10584    12    33     1    12    -1     0      63  {
 10585    12    33     1    12   247     0     665  STARTMETHOD
 10586    12    42     5    12   247     0     111  ByteBufferAsDoubleBufferRL
 10587    12    42    31    12   247     0      59  (
 10588    12    42    32    12   247     0     111  ByteBuffer
 10589    12    42    43    12   247     0     111  bb
 10590    12    42    45    12   247     0      60  )
 10591    12    42    47    12   247     0      63  {
 10592    12    55     9    12   247     0      27  super
 10593    12    55    14    12   247     0      59  (
 10594    12    55    15    12   247     0     111  bb
 10595    12    55    17    12   247     0      60  )
 10596    12    55    18    12   247     0     102  ;
 10597    12    57     5    12   247     0      64  }
 10598    12    57     5    12   247     0     666  ENDMETHOD
 10599    12    57     5    12   248     0     667  STARTMETHOD
 10600    12    59     5    12   248     0     111  ByteBufferAsDoubleBufferRL
 10601    12    59    31    12   248     0      59  (
 10602    12    59    32    12   248     0     111  ByteBuffer
 10603    12    59    43    12   248     0     111  bb
 10604    12    59    45    12   248     0      66  ,
 10605    12    60    38    12   248     0      36  int
 10606    12    60    42    12   248     0     111  mark
 10607    12    60    46    12   248     0      66  ,
 10608    12    60    48    12   248     0      36  int
 10609    12    60    52    12   248     0     111  pos
 10610    12    60    55    12   248     0      66  ,
 10611    12    60    57    12   248     0      36  int
 10612    12    60    61    12   248     0     111  lim
 10613    12    60    64    12   248     0      66  ,
 10614    12    60    66    12   248     0      36  int
 10615    12    60    70    12   248     0     111  cap
 10616    12    60    73    12   248     0      66  ,
 10617    12    61    38    12   248     0      36  int
 10618    12    61    42    12   248     0     111  off
 10619    12    61    45    12   248     0      60  )
 10620    12    62     5    12   248     0      63  {
 10621    12    68     9    12   248     0      27  super
 10622    12    68    14    12   248     0      59  (
 10623    12    68    15    12   248     0     111  bb
 10624    12    68    17    12   248     0      66  ,
 10625    12    68    19    12   248     0     111  mark
 10626    12    68    23    12   248     0      66  ,
 10627    12    68    25    12   248     0     111  pos
 10628    12    68    28    12   248     0      66  ,
 10629    12    68    30    12   248     0     111  lim
 10630    12    68    33    12   248     0      66  ,
 10631    12    68    35    12   248     0     111  cap
 10632    12    68    38    12   248     0      66  ,
 10633    12    68    40    12   248     0     111  off
 10634    12    68    43    12   248     0      60  )
 10635    12    68    44    12   248     0     102  ;
 10636    12    70     5    12   248     0      64  }
 10637    12    70     5    12   248     0     668  ENDMETHOD
 10638    12    70     5    12   249     0     669  STARTMETHOD
 10639    12    72     5    12   249     0      10  public
 10640    12    72    12    12   249     0     111  DoubleBuffer
 10641    12    72    25    12   249     0     111  slice
 10642    12    72    30    12   249     0      59  (
 10643    12    72    31    12   249     0      60  )
 10644    12    72    33    12   249     0      63  {
 10645    12    73     9    12   249     1      36  int
 10646    12    73    13    12   249     1     111  pos
 10647    12    73    17    12   249     1      67  =
 10648    12    73    19    12   249     1     111  this.position
 10649    12    73    32    12   249     1      59  (
 10650    12    73    33    12   249     1      60  )
 10651    12    73    34    12   249     1     102  ;
 10652    12    74     9    12   249     1      36  int
 10653    12    74    13    12   249     1     111  lim
 10654    12    74    17    12   249     1      67  =
 10655    12    74    19    12   249     1     111  this.limit
 10656    12    74    29    12   249     1      59  (
 10657    12    74    30    12   249     1      60  )
 10658    12    74    31    12   249     1     102  ;
 10659    12    75     9    12   249     0     111  assert
 10660    12    75    16    12   249     0      59  (
 10661    12    75    17    12   249     0     111  pos
 10662    12    75    21    12   249     0      92  <=
 10663    12    75    24    12   249     0     111  lim
 10664    12    75    27    12   249     0      60  )
 10665    12    75    28    12   249     0     102  ;
 10666    12    76     9    12   249     0      36  int
 10667    12    76    13    12   249     0     111  rem
 10668    12    76    17    12   249     0      67  =
 10669    12    76    19    12   249     0      59  (
 10670    12    76    20    12   249     0     111  pos
 10671    12    76    24    12   249     0      92  <=
 10672    12    76    27    12   249     0     111  lim
 10673    12    76    31    12   249     0      58  ?
 10674    12    76    33    12   249     0     111  lim
 10675    12    76    37    12   249     0      77  -
 10676    12    76    39    12   249     0     111  pos
 10677    12    76    43    12   249     0      65  :
 10678    12    76    45    12   249     0     112  0
 10679    12    76    46    12   249     0      60  )
 10680    12    76    47    12   249     0     102  ;
 10681    12    77     9    12   249     0      36  int
 10682    12    77    13    12   249     0     111  off
 10683    12    77    17    12   249     0      67  =
 10684    12    77    19    12   249     0      59  (
 10685    12    77    20    12   249     0     111  pos
 10686    12    77    24    12   249     0      90  <<
 10687    12    77    27    12   249     0     112  3
 10688    12    77    28    12   249     0      60  )
 10689    12    77    30    12   249     0      74  +
 10690    12    77    32    12   249     0     111  offset
 10691    12    77    38    12   249     0     102  ;
 10692    12    78     9    12   249     0     111  assert
 10693    12    78    16    12   249     0      59  (
 10694    12    78    17    12   249     0     111  off
 10695    12    78    21    12   249     0      88  >=
 10696    12    78    24    12   249     0     112  0
 10697    12    78    25    12   249     0      60  )
 10698    12    78    26    12   249     0     102  ;
 10699    12    79     9    12   249     0      19  return
 10700    12    79    16    12   249     0      15  new
 10701    12    79    20    12   249     0     111  ByteBufferAsDoubleBufferRL
 10702    12    79    46    12   249     0      59  (
 10703    12    79    47    12   249     0     111  bb
 10704    12    79    49    12   249     0      66  ,
 10705    12    79    51    12   249     0      77  -
 10706    12    79    52    12   249     0     112  1
 10707    12    79    53    12   249     0      66  ,
 10708    12    79    55    12   249     0     112  0
 10709    12    79    56    12   249     0      66  ,
 10710    12    79    58    12   249     0     111  rem
 10711    12    79    61    12   249     0      66  ,
 10712    12    79    63    12   249     0     111  rem
 10713    12    79    66    12   249     0      66  ,
 10714    12    79    68    12   249     0     111  off
 10715    12    79    71    12   249     0      60  )
 10716    12    79    72    12   249     0     102  ;
 10717    12    80     5    12   249     0      64  }
 10718    12    80     5    12   249     0     670  ENDMETHOD
 10719    12    80     5    12   250     0     671  STARTMETHOD
 10720    12    82     5    12   250     0      10  public
 10721    12    82    12    12   250     0     111  DoubleBuffer
 10722    12    82    25    12   250     0     111  duplicate
 10723    12    82    34    12   250     0      59  (
 10724    12    82    35    12   250     0      60  )
 10725    12    82    37    12   250     0      63  {
 10726    12    83     9    12   250     0      19  return
 10727    12    83    16    12   250     0      15  new
 10728    12    83    20    12   250     0     111  ByteBufferAsDoubleBufferRL
 10729    12    83    46    12   250     0      59  (
 10730    12    83    47    12   250     0     111  bb
 10731    12    83    49    12   250     0      66  ,
 10732    12    84    53    12   250     1     111  this.markValue
 10733    12    84    67    12   250     1      59  (
 10734    12    84    68    12   250     1      60  )
 10735    12    84    69    12   250     1      66  ,
 10736    12    85    53    12   250     1     111  this.position
 10737    12    85    66    12   250     1      59  (
 10738    12    85    67    12   250     1      60  )
 10739    12    85    68    12   250     1      66  ,
 10740    12    86    53    12   250     1     111  this.limit
 10741    12    86    63    12   250     1      59  (
 10742    12    86    64    12   250     1      60  )
 10743    12    86    65    12   250     1      66  ,
 10744    12    87    53    12   250     1     111  this.capacity
 10745    12    87    66    12   250     1      59  (
 10746    12    87    67    12   250     1      60  )
 10747    12    87    68    12   250     1      66  ,
 10748    12    88    53    12   250     0     111  offset
 10749    12    88    59    12   250     0      60  )
 10750    12    88    60    12   250     0     102  ;
 10751    12    89     5    12   250     0      64  }
 10752    12    89     5    12   250     0     672  ENDMETHOD
 10753    12    89     5    12   251     0     673  STARTMETHOD
 10754    12    91     5    12   251     0      10  public
 10755    12    91    12    12   251     0     111  DoubleBuffer
 10756    12    91    25    12   251     0     111  asReadOnlyBuffer
 10757    12    91    41    12   251     0      59  (
 10758    12    91    42    12   251     0      60  )
 10759    12    91    44    12   251     0      63  {
 10760    12   100     9    12   251     0      19  return
 10761    12   100    16    12   251     0     111  duplicate
 10762    12   100    25    12   251     0      59  (
 10763    12   100    26    12   251     0      60  )
 10764    12   100    27    12   251     0     102  ;
 10765    12   102     5    12   251     0      64  }
 10766    12   102     5    12   251     0     674  ENDMETHOD
 10767    12   102     5    12   252     0     675  STARTMETHOD
 10768    12   120     5    12   252     0      10  public
 10769    12   120    12    12   252     0     111  DoubleBuffer
 10770    12   120    25    12   252     0     111  put
 10771    12   120    28    12   252     0      59  (
 10772    12   120    29    12   252     0      32  double
 10773    12   120    36    12   252     0     111  x
 10774    12   120    37    12   252     0      60  )
 10775    12   120    39    12   252     0      63  {
 10776    12   125     9    12   252     0      20  throw
 10777    12   125    15    12   252     0      15  new
 10778    12   125    19    12   252     0     111  ReadOnlyBufferException
 10779    12   125    42    12   252     0      59  (
 10780    12   125    43    12   252     0      60  )
 10781    12   125    44    12   252     0     102  ;
 10782    12   127     5    12   252     0      64  }
 10783    12   127     5    12   252     0     676  ENDMETHOD
 10784    12   127     5    12   253     0     677  STARTMETHOD
 10785    12   129     5    12   253     0      10  public
 10786    12   129    12    12   253     0     111  DoubleBuffer
 10787    12   129    25    12   253     0     111  put
 10788    12   129    28    12   253     0      59  (
 10789    12   129    29    12   253     0      36  int
 10790    12   129    33    12   253     0     111  i
 10791    12   129    34    12   253     0      66  ,
 10792    12   129    36    12   253     0      32  double
 10793    12   129    43    12   253     0     111  x
 10794    12   129    44    12   253     0      60  )
 10795    12   129    46    12   253     0      63  {
 10796    12   134     9    12   253     0      20  throw
 10797    12   134    15    12   253     0      15  new
 10798    12   134    19    12   253     0     111  ReadOnlyBufferException
 10799    12   134    42    12   253     0      59  (
 10800    12   134    43    12   253     0      60  )
 10801    12   134    44    12   253     0     102  ;
 10802    12   136     5    12   253     0      64  }
 10803    12   136     5    12   253     0     678  ENDMETHOD
 10804    12   136     5    12   254     0     679  STARTMETHOD
 10805    12   138     5    12   254     0      10  public
 10806    12   138    12    12   254     0     111  DoubleBuffer
 10807    12   138    25    12   254     0     111  compact
 10808    12   138    32    12   254     0      59  (
 10809    12   138    33    12   254     0      60  )
 10810    12   138    35    12   254     0      63  {
 10811    12   155     9    12   254     0      20  throw
 10812    12   155    15    12   254     0      15  new
 10813    12   155    19    12   254     0     111  ReadOnlyBufferException
 10814    12   155    42    12   254     0      59  (
 10815    12   155    43    12   254     0      60  )
 10816    12   155    44    12   254     0     102  ;
 10817    12   157     5    12   254     0      64  }
 10818    12   157     5    12   254     0     680  ENDMETHOD
 10819    12   157     5    12   255     0     681  STARTMETHOD
 10820    12   159     5    12   255     0      10  public
 10821    12   159    12    12   255     0      39  boolean
 10822    12   159    20    12   255     0     111  isDirect
 10823    12   159    28    12   255     0      59  (
 10824    12   159    29    12   255     0      60  )
 10825    12   159    31    12   255     0      63  {
 10826    12   160     9    12   255     0      19  return
 10827    12   160    16    12   255     0     111  bb.isDirect
 10828    12   160    27    12   255     0      59  (
 10829    12   160    28    12   255     0      60  )
 10830    12   160    29    12   255     1     102  ;
 10831    12   161     5    12   255     1      64  }
 10832    12   161     5    12   255     0     682  ENDMETHOD
 10833    12   161     5    12   256     0     683  STARTMETHOD
 10834    12   163     5    12   256     0      10  public
 10835    12   163    12    12   256     0      39  boolean
 10836    12   163    20    12   256     0     111  isReadOnly
 10837    12   163    30    12   256     0      59  (
 10838    12   163    31    12   256     0      60  )
 10839    12   163    33    12   256     0      63  {
 10840    12   164     9    12   256     0      19  return
 10841    12   164    16    12   256     0      52  true
 10842    12   164    20    12   256     1     102  ;
 10843    12   165     5    12   256     1      64  }
 10844    12   165     5    12   256     0     684  ENDMETHOD
 10845    12   165     5    12   257     0     685  STARTMETHOD
 10846    12   207     5    12   257     0      10  public
 10847    12   207    12    12   257     0     111  ByteOrder
 10848    12   207    22    12   257     0     111  order
 10849    12   207    27    12   257     0      59  (
 10850    12   207    28    12   257     0      60  )
 10851    12   207    30    12   257     0      63  {
 10852    12   212     9    12   257     0      19  return
 10853    12   212    16    12   257     0     111  ByteOrder.LITTLE_ENDIAN
 10854    12   212    39    12   257     1     102  ;
 10855    12   214     5    12   257     1      64  }
 10856    12   214     5    12   257     0     686  ENDMETHOD
 10857    12   216     1    12    -1     0      64  }
 10858    12   216     1    12    -1     1     687  ENDCLASS
 10859    12   216     1    -1    -1     1     688  ENDFILE C:\javasrc\java\nio\ByteBufferAsDoubleBufferRL.java
 10860    13     1     1    -1    -1     1     689  STARTFILE C:\javasrc\java\nio\ByteBufferAsFloatBufferB.java
 10861    13    28     1    -1    -1     0       5  package
 10862    13    28     9    -1    -1     0     111  java.nio
 10863    13    28    17    -1    -1     0     102  ;
 10864    13    31     1    13    -1     0     690  STARTCLASS
 10865    13    31     1    13    -1     0      24  class
 10866    13    31     7    13    -1     0     111  ByteBufferAsFloatBufferB
 10867    13    32     5    13    -1     0      38  extends
 10868    13    32    13    13    -1     0     111  FloatBuffer
 10869    13    33     1    13    -1     0      63  {
 10870    13    37     5    13    -1     0      23  protected
 10871    13    37    15    13    -1     0       6  final
 10872    13    37    21    13    -1     0     111  ByteBuffer
 10873    13    37    32    13    -1     0     111  bb
 10874    13    37    34    13    -1     0     102  ;
 10875    13    38     5    13    -1     0      23  protected
 10876    13    38    15    13    -1     0       6  final
 10877    13    38    21    13    -1     0      36  int
 10878    13    38    25    13    -1     0     111  offset
 10879    13    38    31    13    -1     0     102  ;
 10880    13    38    31    13   258     0     691  STARTMETHOD
 10881    13    42     5    13   258     0     111  ByteBufferAsFloatBufferB
 10882    13    42    29    13   258     0      59  (
 10883    13    42    30    13   258     0     111  ByteBuffer
 10884    13    42    41    13   258     0     111  bb
 10885    13    42    43    13   258     0      60  )
 10886    13    42    45    13   258     0      63  {
 10887    13    44     9    13   258     0      27  super
 10888    13    44    14    13   258     0      59  (
 10889    13    44    15    13   258     0      77  -
 10890    13    44    16    13   258     0     112  1
 10891    13    44    17    13   258     0      66  ,
 10892    13    44    19    13   258     0     112  0
 10893    13    44    20    13   258     0      66  ,
 10894    13    45    15    13   258     0     111  bb.remaining
 10895    13    45    27    13   258     0      59  (
 10896    13    45    28    13   258     0      60  )
 10897    13    45    30    13   258     0      84  >>
 10898    13    45    33    13   258     0     112  2
 10899    13    45    34    13   258     0      66  ,
 10900    13    46    15    13   258     0     111  bb.remaining
 10901    13    46    27    13   258     0      59  (
 10902    13    46    28    13   258     0      60  )
 10903    13    46    30    13   258     0      84  >>
 10904    13    46    33    13   258     0     112  2
 10905    13    46    34    13   258     0      60  )
 10906    13    46    35    13   258     0     102  ;
 10907    13    47     9    13   258     0     111  this.bb
 10908    13    47    17    13   258     0      67  =
 10909    13    47    19    13   258     0     111  bb
 10910    13    47    21    13   258     0     102  ;
 10911    13    49     9    13   258     0      36  int
 10912    13    49    13    13   258     0     111  cap
 10913    13    49    17    13   258     0      67  =
 10914    13    49    19    13   258     0     111  this.capacity
 10915    13    49    32    13   258     0      59  (
 10916    13    49    33    13   258     0      60  )
 10917    13    49    34    13   258     0     102  ;
 10918    13    50     9    13   258     0     111  this.limit
 10919    13    50    19    13   258     0      59  (
 10920    13    50    20    13   258     0     111  cap
 10921    13    50    23    13   258     0      60  )
 10922    13    50    24    13   258     0     102  ;
 10923    13    51     9    13   258     0      36  int
 10924    13    51    13    13   258     0     111  pos
 10925    13    51    17    13   258     0      67  =
 10926    13    51    19    13   258     0     111  this.position
 10927    13    51    32    13   258     0      59  (
 10928    13    51    33    13   258     0      60  )
 10929    13    51    34    13   258     0     102  ;
 10930    13    52     9    13   258     0     111  assert
 10931    13    52    16    13   258     0      59  (
 10932    13    52    17    13   258     0     111  pos
 10933    13    52    21    13   258     0      92  <=
 10934    13    52    24    13   258     0     111  cap
 10935    13    52    27    13   258     0      60  )
 10936    13    52    28    13   258     0     102  ;
 10937    13    53     9    13   258     0     111  offset
 10938    13    53    16    13   258     0      67  =
 10939    13    53    18    13   258     0     111  pos
 10940    13    53    21    13   258     0     102  ;
 10941    13    57     5    13   258     0      64  }
 10942    13    57     5    13   258     0     692  ENDMETHOD
 10943    13    57     5    13   259     0     693  STARTMETHOD
 10944    13    59     5    13   259     0     111  ByteBufferAsFloatBufferB
 10945    13    59    29    13   259     0      59  (
 10946    13    59    30    13   259     0     111  ByteBuffer
 10947    13    59    41    13   259     0     111  bb
 10948    13    59    43    13   259     0      66  ,
 10949    13    60    38    13   259     0      36  int
 10950    13    60    42    13   259     0     111  mark
 10951    13    60    46    13   259     0      66  ,
 10952    13    60    48    13   259     0      36  int
 10953    13    60    52    13   259     0     111  pos
 10954    13    60    55    13   259     0      66  ,
 10955    13    60    57    13   259     0      36  int
 10956    13    60    61    13   259     0     111  lim
 10957    13    60    64    13   259     0      66  ,
 10958    13    60    66    13   259     0      36  int
 10959    13    60    70    13   259     0     111  cap
 10960    13    60    73    13   259     0      66  ,
 10961    13    61    38    13   259     0      36  int
 10962    13    61    42    13   259     0     111  off
 10963    13    61    45    13   259     0      60  )
 10964    13    62     5    13   259     0      63  {
 10965    13    64     9    13   259     0      27  super
 10966    13    64    14    13   259     0      59  (
 10967    13    64    15    13   259     0     111  mark
 10968    13    64    19    13   259     0      66  ,
 10969    13    64    21    13   259     0     111  pos
 10970    13    64    24    13   259     0      66  ,
 10971    13    64    26    13   259     0     111  lim
 10972    13    64    29    13   259     0      66  ,
 10973    13    64    31    13   259     0     111  cap
 10974    13    64    34    13   259     0      60  )
 10975    13    64    35    13   259     0     102  ;
 10976    13    65     9    13   259     1     111  this.bb
 10977    13    65    17    13   259     1      67  =
 10978    13    65    19    13   259     1     111  bb
 10979    13    65    21    13   259     1     102  ;
 10980    13    66     9    13   259     1     111  offset
 10981    13    66    16    13   259     1      67  =
 10982    13    66    18    13   259     1     111  off
 10983    13    66    21    13   259     1     102  ;
 10984    13    70     5    13   259     0      64  }
 10985    13    70     5    13   259     0     694  ENDMETHOD
 10986    13    70     5    13   260     0     695  STARTMETHOD
 10987    13    72     5    13   260     0      10  public
 10988    13    72    12    13   260     0     111  FloatBuffer
 10989    13    72    24    13   260     0     111  slice
 10990    13    72    29    13   260     0      59  (
 10991    13    72    30    13   260     0      60  )
 10992    13    72    32    13   260     0      63  {
 10993    13    73     9    13   260     1      36  int
 10994    13    73    13    13   260     1     111  pos
 10995    13    73    17    13   260     1      67  =
 10996    13    73    19    13   260     1     111  this.position
 10997    13    73    32    13   260     1      59  (
 10998    13    73    33    13   260     1      60  )
 10999    13    73    34    13   260     1     102  ;
 11000    13    74     9    13   260     1      36  int
 11001    13    74    13    13   260     1     111  lim
 11002    13    74    17    13   260     1      67  =
 11003    13    74    19    13   260     1     111  this.limit
 11004    13    74    29    13   260     1      59  (
 11005    13    74    30    13   260     1      60  )
 11006    13    74    31    13   260     1     102  ;
 11007    13    75     9    13   260     0     111  assert
 11008    13    75    16    13   260     0      59  (
 11009    13    75    17    13   260     0     111  pos
 11010    13    75    21    13   260     0      92  <=
 11011    13    75    24    13   260     0     111  lim
 11012    13    75    27    13   260     0      60  )
 11013    13    75    28    13   260     0     102  ;
 11014    13    76     9    13   260     0      36  int
 11015    13    76    13    13   260     0     111  rem
 11016    13    76    17    13   260     0      67  =
 11017    13    76    19    13   260     0      59  (
 11018    13    76    20    13   260     0     111  pos
 11019    13    76    24    13   260     0      92  <=
 11020    13    76    27    13   260     0     111  lim
 11021    13    76    31    13   260     0      58  ?
 11022    13    76    33    13   260     0     111  lim
 11023    13    76    37    13   260     0      77  -
 11024    13    76    39    13   260     0     111  pos
 11025    13    76    43    13   260     0      65  :
 11026    13    76    45    13   260     0     112  0
 11027    13    76    46    13   260     0      60  )
 11028    13    76    47    13   260     0     102  ;
 11029    13    77     9    13   260     0      36  int
 11030    13    77    13    13   260     0     111  off
 11031    13    77    17    13   260     0      67  =
 11032    13    77    19    13   260     0      59  (
 11033    13    77    20    13   260     0     111  pos
 11034    13    77    24    13   260     0      90  <<
 11035    13    77    27    13   260     0     112  2
 11036    13    77    28    13   260     0      60  )
 11037    13    77    30    13   260     0      74  +
 11038    13    77    32    13   260     0     111  offset
 11039    13    77    38    13   260     0     102  ;
 11040    13    78     9    13   260     0     111  assert
 11041    13    78    16    13   260     0      59  (
 11042    13    78    17    13   260     0     111  off
 11043    13    78    21    13   260     0      88  >=
 11044    13    78    24    13   260     0     112  0
 11045    13    78    25    13   260     0      60  )
 11046    13    78    26    13   260     0     102  ;
 11047    13    79     9    13   260     0      19  return
 11048    13    79    16    13   260     0      15  new
 11049    13    79    20    13   260     0     111  ByteBufferAsFloatBufferB
 11050    13    79    44    13   260     0      59  (
 11051    13    79    45    13   260     0     111  bb
 11052    13    79    47    13   260     0      66  ,
 11053    13    79    49    13   260     0      77  -
 11054    13    79    50    13   260     0     112  1
 11055    13    79    51    13   260     0      66  ,
 11056    13    79    53    13   260     0     112  0
 11057    13    79    54    13   260     0      66  ,
 11058    13    79    56    13   260     0     111  rem
 11059    13    79    59    13   260     0      66  ,
 11060    13    79    61    13   260     0     111  rem
 11061    13    79    64    13   260     1      66  ,
 11062    13    79    66    13   260     1     111  off
 11063    13    79    69    13   260     1      60  )
 11064    13    79    70    13   260     1     102  ;
 11065    13    80     5    13   260     1      64  }
 11066    13    80     5    13   260     0     696  ENDMETHOD
 11067    13    80     5    13   261     0     697  STARTMETHOD
 11068    13    82     5    13   261     0      10  public
 11069    13    82    12    13   261     0     111  FloatBuffer
 11070    13    82    24    13   261     0     111  duplicate
 11071    13    82    33    13   261     0      59  (
 11072    13    82    34    13   261     0      60  )
 11073    13    82    36    13   261     0      63  {
 11074    13    83     9    13   261     0      19  return
 11075    13    83    16    13   261     0      15  new
 11076    13    83    20    13   261     0     111  ByteBufferAsFloatBufferB
 11077    13    83    44    13   261     0      59  (
 11078    13    83    45    13   261     0     111  bb
 11079    13    83    47    13   261     0      66  ,
 11080    13    84    53    13   261     1     111  this.markValue
 11081    13    84    67    13   261     1      59  (
 11082    13    84    68    13   261     1      60  )
 11083    13    84    69    13   261     1      66  ,
 11084    13    85    53    13   261     1     111  this.position
 11085    13    85    66    13   261     1      59  (
 11086    13    85    67    13   261     1      60  )
 11087    13    85    68    13   261     1      66  ,
 11088    13    86    53    13   261     1     111  this.limit
 11089    13    86    63    13   261     1      59  (
 11090    13    86    64    13   261     1      60  )
 11091    13    86    65    13   261     1      66  ,
 11092    13    87    53    13   261     1     111  this.capacity
 11093    13    87    66    13   261     1      59  (
 11094    13    87    67    13   261     1      60  )
 11095    13    87    68    13   261     1      66  ,
 11096    13    88    53    13   261     1     111  offset
 11097    13    88    59    13   261     1      60  )
 11098    13    88    60    13   261     1     102  ;
 11099    13    89     5    13   261     1      64  }
 11100    13    89     5    13   261     0     698  ENDMETHOD
 11101    13    89     5    13   262     0     699  STARTMETHOD
 11102    13    91     5    13   262     0      10  public
 11103    13    91    12    13   262     0     111  FloatBuffer
 11104    13    91    24    13   262     0     111  asReadOnlyBuffer
 11105    13    91    40    13   262     0      59  (
 11106    13    91    41    13   262     0      60  )
 11107    13    91    43    13   262     0      63  {
 11108    13    93     9    13   262     0      19  return
 11109    13    93    16    13   262     0      15  new
 11110    13    93    20    13   262     0     111  ByteBufferAsFloatBufferRB
 11111    13    93    45    13   262     0      59  (
 11112    13    93    46    13   262     0     111  bb
 11113    13    93    48    13   262     0      66  ,
 11114    13    94    50    13   262     1     111  this.markValue
 11115    13    94    64    13   262     1      59  (
 11116    13    94    65    13   262     1      60  )
 11117    13    94    66    13   262     1      66  ,
 11118    13    95    50    13   262     1     111  this.position
 11119    13    95    63    13   262     1      59  (
 11120    13    95    64    13   262     1      60  )
 11121    13    95    65    13   262     1      66  ,
 11122    13    96    50    13   262     1     111  this.limit
 11123    13    96    60    13   262     1      59  (
 11124    13    96    61    13   262     1      60  )
 11125    13    96    62    13   262     1      66  ,
 11126    13    97    50    13   262     1     111  this.capacity
 11127    13    97    63    13   262     1      59  (
 11128    13    97    64    13   262     1      60  )
 11129    13    97    65    13   262     1      66  ,
 11130    13    98    50    13   262     1     111  offset
 11131    13    98    56    13   262     1      60  )
 11132    13    98    57    13   262     1     102  ;
 11133    13   102     5    13   262     1      64  }
 11134    13   102     5    13   262     0     700  ENDMETHOD
 11135    13   102     5    13   263     0     701  STARTMETHOD
 11136    13   106     5    13   263     0      23  protected
 11137    13   106    15    13   263     0      36  int
 11138    13   106    19    13   263     0     111  ix
 11139    13   106    21    13   263     0      59  (
 11140    13   106    22    13   263     0      36  int
 11141    13   106    26    13   263     0     111  i
 11142    13   106    27    13   263     0      60  )
 11143    13   106    29    13   263     0      63  {
 11144    13   107     9    13   263     0      19  return
 11145    13   107    16    13   263     0      59  (
 11146    13   107    17    13   263     0     111  i
 11147    13   107    19    13   263     0      90  <<
 11148    13   107    22    13   263     0     112  2
 11149    13   107    23    13   263     0      60  )
 11150    13   107    25    13   263     0      74  +
 11151    13   107    27    13   263     0     111  offset
 11152    13   107    33    13   263     0     102  ;
 11153    13   108     5    13   263     0      64  }
 11154    13   108     5    13   263     0     702  ENDMETHOD
 11155    13   108     5    13   264     0     703  STARTMETHOD
 11156    13   110     5    13   264     0      10  public
 11157    13   110    12    13   264     0       4  float
 11158    13   110    18    13   264     0     111  get
 11159    13   110    21    13   264     0      59  (
 11160    13   110    22    13   264     0      60  )
 11161    13   110    24    13   264     0      63  {
 11162    13   111     9    13   264     0      19  return
 11163    13   111    16    13   264     0     111  Bits.getFloatB
 11164    13   111    30    13   264     0      59  (
 11165    13   111    31    13   264     0     111  bb
 11166    13   111    33    13   264     0      66  ,
 11167    13   111    35    13   264     0     111  ix
 11168    13   111    37    13   264     0      59  (
 11169    13   111    38    13   264     0     111  nextGetIndex
 11170    13   111    50    13   264     0      59  (
 11171    13   111    51    13   264     0      60  )
 11172    13   111    52    13   264     0      60  )
 11173    13   111    53    13   264     0      60  )
 11174    13   111    54    13   264     0     102  ;
 11175    13   112     5    13   264     0      64  }
 11176    13   112     5    13   264     0     704  ENDMETHOD
 11177    13   112     5    13   265     0     705  STARTMETHOD
 11178    13   114     5    13   265     0      10  public
 11179    13   114    12    13   265     0       4  float
 11180    13   114    18    13   265     0     111  get
 11181    13   114    21    13   265     0      59  (
 11182    13   114    22    13   265     0      36  int
 11183    13   114    26    13   265     0     111  i
 11184    13   114    27    13   265     0      60  )
 11185    13   114    29    13   265     0      63  {
 11186    13   115     9    13   265     0      19  return
 11187    13   115    16    13   265     0     111  Bits.getFloatB
 11188    13   115    30    13   265     0      59  (
 11189    13   115    31    13   265     0     111  bb
 11190    13   115    33    13   265     0      66  ,
 11191    13   115    35    13   265     0     111  ix
 11192    13   115    37    13   265     0      59  (
 11193    13   115    38    13   265     0     111  checkIndex
 11194    13   115    48    13   265     0      59  (
 11195    13   115    49    13   265     0     111  i
 11196    13   115    50    13   265     0      60  )
 11197    13   115    51    13   265     0      60  )
 11198    13   115    52    13   265     0      60  )
 11199    13   115    53    13   265     0     102  ;
 11200    13   116     5    13   265     0      64  }
 11201    13   116     5    13   265     0     706  ENDMETHOD
 11202    13   116     5    13   266     0     707  STARTMETHOD
 11203    13   120     5    13   266     0      10  public
 11204    13   120    12    13   266     0     111  FloatBuffer
 11205    13   120    24    13   266     0     111  put
 11206    13   120    27    13   266     0      59  (
 11207    13   120    28    13   266     0       4  float
 11208    13   120    34    13   266     0     111  x
 11209    13   120    35    13   266     0      60  )
 11210    13   120    37    13   266     0      63  {
 11211    13   122     9    13   266     0     111  Bits.putFloatB
 11212    13   122    23    13   266     0      59  (
 11213    13   122    24    13   266     0     111  bb
 11214    13   122    26    13   266     0      66  ,
 11215    13   122    28    13   266     0     111  ix
 11216    13   122    30    13   266     0      59  (
 11217    13   122    31    13   266     0     111  nextPutIndex
 11218    13   122    43    13   266     0      59  (
 11219    13   122    44    13   266     0      60  )
 11220    13   122    45    13   266     0      60  )
 11221    13   122    46    13   266     0      66  ,
 11222    13   122    48    13   266     0     111  x
 11223    13   122    49    13   266     0      60  )
 11224    13   122    50    13   266     0     102  ;
 11225    13   123     9    13   266     0      19  return
 11226    13   123    16    13   266     0      44  this
 11227    13   123    20    13   266     0     102  ;
 11228    13   127     5    13   266     0      64  }
 11229    13   127     5    13   266     0     708  ENDMETHOD
 11230    13   127     5    13   267     0     709  STARTMETHOD
 11231    13   129     5    13   267     0      10  public
 11232    13   129    12    13   267     0     111  FloatBuffer
 11233    13   129    24    13   267     0     111  put
 11234    13   129    27    13   267     0      59  (
 11235    13   129    28    13   267     0      36  int
 11236    13   129    32    13   267     0     111  i
 11237    13   129    33    13   267     0      66  ,
 11238    13   129    35    13   267     0       4  float
 11239    13   129    41    13   267     0     111  x
 11240    13   129    42    13   267     0      60  )
 11241    13   129    44    13   267     0      63  {
 11242    13   131     9    13   267     0     111  Bits.putFloatB
 11243    13   131    23    13   267     0      59  (
 11244    13   131    24    13   267     0     111  bb
 11245    13   131    26    13   267     0      66  ,
 11246    13   131    28    13   267     0     111  ix
 11247    13   131    30    13   267     0      59  (
 11248    13   131    31    13   267     0     111  checkIndex
 11249    13   131    41    13   267     0      59  (
 11250    13   131    42    13   267     0     111  i
 11251    13   131    43    13   267     0      60  )
 11252    13   131    44    13   267     0      60  )
 11253    13   131    45    13   267     0      66  ,
 11254    13   131    47    13   267     0     111  x
 11255    13   131    48    13   267     0      60  )
 11256    13   131    49    13   267     0     102  ;
 11257    13   132     9    13   267     0      19  return
 11258    13   132    16    13   267     0      44  this
 11259    13   132    20    13   267     0     102  ;
 11260    13   136     5    13   267     0      64  }
 11261    13   136     5    13   267     0     710  ENDMETHOD
 11262    13   136     5    13   268     0     711  STARTMETHOD
 11263    13   138     5    13   268     0      10  public
 11264    13   138    12    13   268     0     111  FloatBuffer
 11265    13   138    24    13   268     0     111  compact
 11266    13   138    31    13   268     0      59  (
 11267    13   138    32    13   268     0      60  )
 11268    13   138    34    13   268     0      63  {
 11269    13   140     9    13   268     1      36  int
 11270    13   140    13    13   268     1     111  pos
 11271    13   140    17    13   268     1      67  =
 11272    13   140    19    13   268     1     111  position
 11273    13   140    27    13   268     1      59  (
 11274    13   140    28    13   268     1      60  )
 11275    13   140    29    13   268     1     102  ;
 11276    13   141     9    13   268     1      36  int
 11277    13   141    13    13   268     1     111  lim
 11278    13   141    17    13   268     1      67  =
 11279    13   141    19    13   268     1     111  limit
 11280    13   141    24    13   268     1      59  (
 11281    13   141    25    13   268     1      60  )
 11282    13   141    26    13   268     1     102  ;
 11283    13   142     9    13   268     0     111  assert
 11284    13   142    16    13   268     0      59  (
 11285    13   142    17    13   268     0     111  pos
 11286    13   142    21    13   268     0      92  <=
 11287    13   142    24    13   268     0     111  lim
 11288    13   142    27    13   268     0      60  )
 11289    13   142    28    13   268     0     102  ;
 11290    13   143     9    13   268     0      36  int
 11291    13   143    13    13   268     0     111  rem
 11292    13   143    17    13   268     0      67  =
 11293    13   143    19    13   268     0      59  (
 11294    13   143    20    13   268     0     111  pos
 11295    13   143    24    13   268     0      92  <=
 11296    13   143    27    13   268     0     111  lim
 11297    13   143    31    13   268     0      58  ?
 11298    13   143    33    13   268     0     111  lim
 11299    13   143    37    13   268     0      77  -
 11300    13   143    39    13   268     0     111  pos
 11301    13   143    43    13   268     0      65  :
 11302    13   143    45    13   268     0     112  0
 11303    13   143    46    13   268     0      60  )
 11304    13   143    47    13   268     0     102  ;
 11305    13   145     9    13   268     0     111  ByteBuffer
 11306    13   145    20    13   268     0     111  db
 11307    13   145    23    13   268     0      67  =
 11308    13   145    25    13   268     0     111  bb.duplicate
 11309    13   145    37    13   268     0      59  (
 11310    13   145    38    13   268     0      60  )
 11311    13   145    39    13   268     0     102  ;
 11312    13   146     9    13   268     0     111  db.limit
 11313    13   146    17    13   268     0      59  (
 11314    13   146    18    13   268     0     111  ix
 11315    13   146    20    13   268     0      59  (
 11316    13   146    21    13   268     0     111  lim
 11317    13   146    24    13   268     0      60  )
 11318    13   146    25    13   268     0      60  )
 11319    13   146    26    13   268     0     102  ;
 11320    13   147     9    13   268     0     111  db.position
 11321    13   147    20    13   268     0      59  (
 11322    13   147    21    13   268     0     111  ix
 11323    13   147    23    13   268     0      59  (
 11324    13   147    24    13   268     0     112  0
 11325    13   147    25    13   268     0      60  )
 11326    13   147    26    13   268     0      60  )
 11327    13   147    27    13   268     0     102  ;
 11328    13   148     9    13   268     0     111  ByteBuffer
 11329    13   148    20    13   268     0     111  sb
 11330    13   148    23    13   268     0      67  =
 11331    13   148    25    13   268     0     111  db.slice
 11332    13   148    33    13   268     0      59  (
 11333    13   148    34    13   268     0      60  )
 11334    13   148    35    13   268     0     102  ;
 11335    13   149     9    13   268     0     111  sb.position
 11336    13   149    20    13   268     0      59  (
 11337    13   149    21    13   268     0     111  pos
 11338    13   149    25    13   268     0      90  <<
 11339    13   149    28    13   268     0     112  2
 11340    13   149    29    13   268     0      60  )
 11341    13   149    30    13   268     0     102  ;
 11342    13   150     9    13   268     0     111  sb.compact
 11343    13   150    19    13   268     0      59  (
 11344    13   150    20    13   268     0      60  )
 11345    13   150    21    13   268     0     102  ;
 11346    13   151     9    13   268     0     111  position
 11347    13   151    17    13   268     0      59  (
 11348    13   151    18    13   268     0     111  rem
 11349    13   151    21    13   268     0      60  )
 11350    13   151    22    13   268     0     102  ;
 11351    13   152     9    13   268     0     111  limit
 11352    13   152    14    13   268     0      59  (
 11353    13   152    15    13   268     0     111  capacity
 11354    13   152    23    13   268     0      59  (
 11355    13   152    24    13   268     0      60  )
 11356    13   152    25    13   268     0      60  )
 11357    13   152    26    13   268     0     102  ;
 11358    13   153     9    13   268     0      19  return
 11359    13   153    16    13   268     0      44  this
 11360    13   153    20    13   268     0     102  ;
 11361    13   157     5    13   268     0      64  }
 11362    13   157     5    13   268     0     712  ENDMETHOD
 11363    13   157     5    13   269     0     713  STARTMETHOD
 11364    13   159     5    13   269     0      10  public
 11365    13   159    12    13   269     0      39  boolean
 11366    13   159    20    13   269     0     111  isDirect
 11367    13   159    28    13   269     0      59  (
 11368    13   159    29    13   269     0      60  )
 11369    13   159    31    13   269     0      63  {
 11370    13   160     9    13   269     0      19  return
 11371    13   160    16    13   269     0     111  bb.isDirect
 11372    13   160    27    13   269     0      59  (
 11373    13   160    28    13   269     0      60  )
 11374    13   160    29    13   269     1     102  ;
 11375    13   161     5    13   269     1      64  }
 11376    13   161     5    13   269     0     714  ENDMETHOD
 11377    13   161     5    13   270     0     715  STARTMETHOD
 11378    13   163     5    13   270     0      10  public
 11379    13   163    12    13   270     0      39  boolean
 11380    13   163    20    13   270     0     111  isReadOnly
 11381    13   163    30    13   270     0      59  (
 11382    13   163    31    13   270     0      60  )
 11383    13   163    33    13   270     0      63  {
 11384    13   164     9    13   270     0      19  return
 11385    13   164    16    13   270     0      43  false
 11386    13   164    21    13   270     1     102  ;
 11387    13   165     5    13   270     1      64  }
 11388    13   165     5    13   270     0     716  ENDMETHOD
 11389    13   165     5    13   271     0     717  STARTMETHOD
 11390    13   207     5    13   271     0      10  public
 11391    13   207    12    13   271     0     111  ByteOrder
 11392    13   207    22    13   271     0     111  order
 11393    13   207    27    13   271     0      59  (
 11394    13   207    28    13   271     0      60  )
 11395    13   207    30    13   271     0      63  {
 11396    13   209     9    13   271     0      19  return
 11397    13   209    16    13   271     0     111  ByteOrder.BIG_ENDIAN
 11398    13   209    36    13   271     1     102  ;
 11399    13   214     5    13   271     1      64  }
 11400    13   214     5    13   271     0     718  ENDMETHOD
 11401    13   216     1    13    -1     0      64  }
 11402    13   216     1    13    -1     1     719  ENDCLASS
 11403    13   216     1    -1    -1     1     720  ENDFILE C:\javasrc\java\nio\ByteBufferAsFloatBufferB.java
 11404    14     1     1    -1    -1     1     721  STARTFILE C:\javasrc\java\nio\ByteBufferAsFloatBufferL.java
 11405    14    28     1    -1    -1     0       5  package
 11406    14    28     9    -1    -1     0     111  java.nio
 11407    14    28    17    -1    -1     0     102  ;
 11408    14    31     1    14    -1     0     722  STARTCLASS
 11409    14    31     1    14    -1     0      24  class
 11410    14    31     7    14    -1     0     111  ByteBufferAsFloatBufferL
 11411    14    32     5    14    -1     0      38  extends
 11412    14    32    13    14    -1     0     111  FloatBuffer
 11413    14    33     1    14    -1     0      63  {
 11414    14    37     5    14    -1     0      23  protected
 11415    14    37    15    14    -1     0       6  final
 11416    14    37    21    14    -1     0     111  ByteBuffer
 11417    14    37    32    14    -1     0     111  bb
 11418    14    37    34    14    -1     0     102  ;
 11419    14    38     5    14    -1     0      23  protected
 11420    14    38    15    14    -1     0       6  final
 11421    14    38    21    14    -1     0      36  int
 11422    14    38    25    14    -1     0     111  offset
 11423    14    38    31    14    -1     0     102  ;
 11424    14    38    31    14   272     0     723  STARTMETHOD
 11425    14    42     5    14   272     0     111  ByteBufferAsFloatBufferL
 11426    14    42    29    14   272     0      59  (
 11427    14    42    30    14   272     0     111  ByteBuffer
 11428    14    42    41    14   272     0     111  bb
 11429    14    42    43    14   272     0      60  )
 11430    14    42    45    14   272     0      63  {
 11431    14    44     9    14   272     0      27  super
 11432    14    44    14    14   272     0      59  (
 11433    14    44    15    14   272     0      77  -
 11434    14    44    16    14   272     0     112  1
 11435    14    44    17    14   272     0      66  ,
 11436    14    44    19    14   272     0     112  0
 11437    14    44    20    14   272     0      66  ,
 11438    14    45    15    14   272     0     111  bb.remaining
 11439    14    45    27    14   272     0      59  (
 11440    14    45    28    14   272     0      60  )
 11441    14    45    30    14   272     0      84  >>
 11442    14    45    33    14   272     0     112  2
 11443    14    45    34    14   272     0      66  ,
 11444    14    46    15    14   272     0     111  bb.remaining
 11445    14    46    27    14   272     0      59  (
 11446    14    46    28    14   272     0      60  )
 11447    14    46    30    14   272     0      84  >>
 11448    14    46    33    14   272     0     112  2
 11449    14    46    34    14   272     0      60  )
 11450    14    46    35    14   272     0     102  ;
 11451    14    47     9    14   272     0     111  this.bb
 11452    14    47    17    14   272     0      67  =
 11453    14    47    19    14   272     0     111  bb
 11454    14    47    21    14   272     0     102  ;
 11455    14    49     9    14   272     0      36  int
 11456    14    49    13    14   272     0     111  cap
 11457    14    49    17    14   272     0      67  =
 11458    14    49    19    14   272     0     111  this.capacity
 11459    14    49    32    14   272     0      59  (
 11460    14    49    33    14   272     0      60  )
 11461    14    49    34    14   272     0     102  ;
 11462    14    50     9    14   272     0     111  this.limit
 11463    14    50    19    14   272     0      59  (
 11464    14    50    20    14   272     0     111  cap
 11465    14    50    23    14   272     0      60  )
 11466    14    50    24    14   272     0     102  ;
 11467    14    51     9    14   272     0      36  int
 11468    14    51    13    14   272     0     111  pos
 11469    14    51    17    14   272     0      67  =
 11470    14    51    19    14   272     0     111  this.position
 11471    14    51    32    14   272     0      59  (
 11472    14    51    33    14   272     0      60  )
 11473    14    51    34    14   272     0     102  ;
 11474    14    52     9    14   272     0     111  assert
 11475    14    52    16    14   272     0      59  (
 11476    14    52    17    14   272     0     111  pos
 11477    14    52    21    14   272     0      92  <=
 11478    14    52    24    14   272     0     111  cap
 11479    14    52    27    14   272     0      60  )
 11480    14    52    28    14   272     0     102  ;
 11481    14    53     9    14   272     0     111  offset
 11482    14    53    16    14   272     0      67  =
 11483    14    53    18    14   272     0     111  pos
 11484    14    53    21    14   272     0     102  ;
 11485    14    57     5    14   272     0      64  }
 11486    14    57     5    14   272     0     724  ENDMETHOD
 11487    14    57     5    14   273     0     725  STARTMETHOD
 11488    14    59     5    14   273     0     111  ByteBufferAsFloatBufferL
 11489    14    59    29    14   273     0      59  (
 11490    14    59    30    14   273     0     111  ByteBuffer
 11491    14    59    41    14   273     0     111  bb
 11492    14    59    43    14   273     0      66  ,
 11493    14    60    38    14   273     0      36  int
 11494    14    60    42    14   273     0     111  mark
 11495    14    60    46    14   273     0      66  ,
 11496    14    60    48    14   273     0      36  int
 11497    14    60    52    14   273     0     111  pos
 11498    14    60    55    14   273     0      66  ,
 11499    14    60    57    14   273     0      36  int
 11500    14    60    61    14   273     0     111  lim
 11501    14    60    64    14   273     0      66  ,
 11502    14    60    66    14   273     0      36  int
 11503    14    60    70    14   273     0     111  cap
 11504    14    60    73    14   273     0      66  ,
 11505    14    61    38    14   273     0      36  int
 11506    14    61    42    14   273     0     111  off
 11507    14    61    45    14   273     0      60  )
 11508    14    62     5    14   273     0      63  {
 11509    14    64     9    14   273     0      27  super
 11510    14    64    14    14   273     0      59  (
 11511    14    64    15    14   273     0     111  mark
 11512    14    64    19    14   273     0      66  ,
 11513    14    64    21    14   273     0     111  pos
 11514    14    64    24    14   273     0      66  ,
 11515    14    64    26    14   273     0     111  lim
 11516    14    64    29    14   273     0      66  ,
 11517    14    64    31    14   273     0     111  cap
 11518    14    64    34    14   273     0      60  )
 11519    14    64    35    14   273     0     102  ;
 11520    14    65     9    14   273     1     111  this.bb
 11521    14    65    17    14   273     1      67  =
 11522    14    65    19    14   273     1     111  bb
 11523    14    65    21    14   273     1     102  ;
 11524    14    66     9    14   273     1     111  offset
 11525    14    66    16    14   273     1      67  =
 11526    14    66    18    14   273     1     111  off
 11527    14    66    21    14   273     1     102  ;
 11528    14    70     5    14   273     0      64  }
 11529    14    70     5    14   273     0     726  ENDMETHOD
 11530    14    70     5    14   274     0     727  STARTMETHOD
 11531    14    72     5    14   274     0      10  public
 11532    14    72    12    14   274     0     111  FloatBuffer
 11533    14    72    24    14   274     0     111  slice
 11534    14    72    29    14   274     0      59  (
 11535    14    72    30    14   274     0      60  )
 11536    14    72    32    14   274     0      63  {
 11537    14    73     9    14   274     1      36  int
 11538    14    73    13    14   274     1     111  pos
 11539    14    73    17    14   274     1      67  =
 11540    14    73    19    14   274     1     111  this.position
 11541    14    73    32    14   274     1      59  (
 11542    14    73    33    14   274     1      60  )
 11543    14    73    34    14   274     1     102  ;
 11544    14    74     9    14   274     1      36  int
 11545    14    74    13    14   274     1     111  lim
 11546    14    74    17    14   274     1      67  =
 11547    14    74    19    14   274     1     111  this.limit
 11548    14    74    29    14   274     1      59  (
 11549    14    74    30    14   274     1      60  )
 11550    14    74    31    14   274     1     102  ;
 11551    14    75     9    14   274     0     111  assert
 11552    14    75    16    14   274     0      59  (
 11553    14    75    17    14   274     0     111  pos
 11554    14    75    21    14   274     0      92  <=
 11555    14    75    24    14   274     0     111  lim
 11556    14    75    27    14   274     0      60  )
 11557    14    75    28    14   274     0     102  ;
 11558    14    76     9    14   274     0      36  int
 11559    14    76    13    14   274     0     111  rem
 11560    14    76    17    14   274     0      67  =
 11561    14    76    19    14   274     0      59  (
 11562    14    76    20    14   274     0     111  pos
 11563    14    76    24    14   274     0      92  <=
 11564    14    76    27    14   274     0     111  lim
 11565    14    76    31    14   274     0      58  ?
 11566    14    76    33    14   274     0     111  lim
 11567    14    76    37    14   274     0      77  -
 11568    14    76    39    14   274     0     111  pos
 11569    14    76    43    14   274     0      65  :
 11570    14    76    45    14   274     0     112  0
 11571    14    76    46    14   274     0      60  )
 11572    14    76    47    14   274     0     102  ;
 11573    14    77     9    14   274     0      36  int
 11574    14    77    13    14   274     0     111  off
 11575    14    77    17    14   274     0      67  =
 11576    14    77    19    14   274     0      59  (
 11577    14    77    20    14   274     0     111  pos
 11578    14    77    24    14   274     0      90  <<
 11579    14    77    27    14   274     0     112  2
 11580    14    77    28    14   274     0      60  )
 11581    14    77    30    14   274     0      74  +
 11582    14    77    32    14   274     0     111  offset
 11583    14    77    38    14   274     0     102  ;
 11584    14    78     9    14   274     0     111  assert
 11585    14    78    16    14   274     0      59  (
 11586    14    78    17    14   274     0     111  off
 11587    14    78    21    14   274     0      88  >=
 11588    14    78    24    14   274     0     112  0
 11589    14    78    25    14   274     0      60  )
 11590    14    78    26    14   274     0     102  ;
 11591    14    79     9    14   274     0      19  return
 11592    14    79    16    14   274     0      15  new
 11593    14    79    20    14   274     0     111  ByteBufferAsFloatBufferL
 11594    14    79    44    14   274     0      59  (
 11595    14    79    45    14   274     0     111  bb
 11596    14    79    47    14   274     0      66  ,
 11597    14    79    49    14   274     0      77  -
 11598    14    79    50    14   274     0     112  1
 11599    14    79    51    14   274     0      66  ,
 11600    14    79    53    14   274     0     112  0
 11601    14    79    54    14   274     0      66  ,
 11602    14    79    56    14   274     0     111  rem
 11603    14    79    59    14   274     0      66  ,
 11604    14    79    61    14   274     0     111  rem
 11605    14    79    64    14   274     1      66  ,
 11606    14    79    66    14   274     1     111  off
 11607    14    79    69    14   274     1      60  )
 11608    14    79    70    14   274     1     102  ;
 11609    14    80     5    14   274     1      64  }
 11610    14    80     5    14   274     0     728  ENDMETHOD
 11611    14    80     5    14   275     0     729  STARTMETHOD
 11612    14    82     5    14   275     0      10  public
 11613    14    82    12    14   275     0     111  FloatBuffer
 11614    14    82    24    14   275     0     111  duplicate
 11615    14    82    33    14   275     0      59  (
 11616    14    82    34    14   275     0      60  )
 11617    14    82    36    14   275     0      63  {
 11618    14    83     9    14   275     0      19  return
 11619    14    83    16    14   275     0      15  new
 11620    14    83    20    14   275     0     111  ByteBufferAsFloatBufferL
 11621    14    83    44    14   275     0      59  (
 11622    14    83    45    14   275     0     111  bb
 11623    14    83    47    14   275     0      66  ,
 11624    14    84    53    14   275     1     111  this.markValue
 11625    14    84    67    14   275     1      59  (
 11626    14    84    68    14   275     1      60  )
 11627    14    84    69    14   275     1      66  ,
 11628    14    85    53    14   275     1     111  this.position
 11629    14    85    66    14   275     1      59  (
 11630    14    85    67    14   275     1      60  )
 11631    14    85    68    14   275     1      66  ,
 11632    14    86    53    14   275     1     111  this.limit
 11633    14    86    63    14   275     1      59  (
 11634    14    86    64    14   275     1      60  )
 11635    14    86    65    14   275     1      66  ,
 11636    14    87    53    14   275     1     111  this.capacity
 11637    14    87    66    14   275     1      59  (
 11638    14    87    67    14   275     1      60  )
 11639    14    87    68    14   275     1      66  ,
 11640    14    88    53    14   275     1     111  offset
 11641    14    88    59    14   275     1      60  )
 11642    14    88    60    14   275     1     102  ;
 11643    14    89     5    14   275     1      64  }
 11644    14    89     5    14   275     0     730  ENDMETHOD
 11645    14    89     5    14   276     0     731  STARTMETHOD
 11646    14    91     5    14   276     0      10  public
 11647    14    91    12    14   276     0     111  FloatBuffer
 11648    14    91    24    14   276     0     111  asReadOnlyBuffer
 11649    14    91    40    14   276     0      59  (
 11650    14    91    41    14   276     0      60  )
 11651    14    91    43    14   276     0      63  {
 11652    14    93     9    14   276     0      19  return
 11653    14    93    16    14   276     0      15  new
 11654    14    93    20    14   276     0     111  ByteBufferAsFloatBufferRL
 11655    14    93    45    14   276     0      59  (
 11656    14    93    46    14   276     0     111  bb
 11657    14    93    48    14   276     0      66  ,
 11658    14    94    50    14   276     1     111  this.markValue
 11659    14    94    64    14   276     1      59  (
 11660    14    94    65    14   276     1      60  )
 11661    14    94    66    14   276     1      66  ,
 11662    14    95    50    14   276     1     111  this.position
 11663    14    95    63    14   276     1      59  (
 11664    14    95    64    14   276     1      60  )
 11665    14    95    65    14   276     1      66  ,
 11666    14    96    50    14   276     1     111  this.limit
 11667    14    96    60    14   276     1      59  (
 11668    14    96    61    14   276     1      60  )
 11669    14    96    62    14   276     1      66  ,
 11670    14    97    50    14   276     1     111  this.capacity
 11671    14    97    63    14   276     1      59  (
 11672    14    97    64    14   276     1      60  )
 11673    14    97    65    14   276     1      66  ,
 11674    14    98    50    14   276     1     111  offset
 11675    14    98    56    14   276     1      60  )
 11676    14    98    57    14   276     1     102  ;
 11677    14   102     5    14   276     1      64  }
 11678    14   102     5    14   276     0     732  ENDMETHOD
 11679    14   102     5    14   277     0     733  STARTMETHOD
 11680    14   106     5    14   277     0      23  protected
 11681    14   106    15    14   277     0      36  int
 11682    14   106    19    14   277     0     111  ix
 11683    14   106    21    14   277     0      59  (
 11684    14   106    22    14   277     0      36  int
 11685    14   106    26    14   277     0     111  i
 11686    14   106    27    14   277     0      60  )
 11687    14   106    29    14   277     0      63  {
 11688    14   107     9    14   277     0      19  return
 11689    14   107    16    14   277     0      59  (
 11690    14   107    17    14   277     0     111  i
 11691    14   107    19    14   277     0      90  <<
 11692    14   107    22    14   277     0     112  2
 11693    14   107    23    14   277     0      60  )
 11694    14   107    25    14   277     0      74  +
 11695    14   107    27    14   277     0     111  offset
 11696    14   107    33    14   277     0     102  ;
 11697    14   108     5    14   277     0      64  }
 11698    14   108     5    14   277     0     734  ENDMETHOD
 11699    14   108     5    14   278     0     735  STARTMETHOD
 11700    14   110     5    14   278     0      10  public
 11701    14   110    12    14   278     0       4  float
 11702    14   110    18    14   278     0     111  get
 11703    14   110    21    14   278     0      59  (
 11704    14   110    22    14   278     0      60  )
 11705    14   110    24    14   278     0      63  {
 11706    14   111     9    14   278     0      19  return
 11707    14   111    16    14   278     0     111  Bits.getFloatL
 11708    14   111    30    14   278     0      59  (
 11709    14   111    31    14   278     0     111  bb
 11710    14   111    33    14   278     0      66  ,
 11711    14   111    35    14   278     0     111  ix
 11712    14   111    37    14   278     0      59  (
 11713    14   111    38    14   278     0     111  nextGetIndex
 11714    14   111    50    14   278     0      59  (
 11715    14   111    51    14   278     0      60  )
 11716    14   111    52    14   278     0      60  )
 11717    14   111    53    14   278     0      60  )
 11718    14   111    54    14   278     0     102  ;
 11719    14   112     5    14   278     0      64  }
 11720    14   112     5    14   278     0     736  ENDMETHOD
 11721    14   112     5    14   279     0     737  STARTMETHOD
 11722    14   114     5    14   279     0      10  public
 11723    14   114    12    14   279     0       4  float
 11724    14   114    18    14   279     0     111  get
 11725    14   114    21    14   279     0      59  (
 11726    14   114    22    14   279     0      36  int
 11727    14   114    26    14   279     0     111  i
 11728    14   114    27    14   279     0      60  )
 11729    14   114    29    14   279     0      63  {
 11730    14   115     9    14   279     0      19  return
 11731    14   115    16    14   279     0     111  Bits.getFloatL
 11732    14   115    30    14   279     0      59  (
 11733    14   115    31    14   279     0     111  bb
 11734    14   115    33    14   279     0      66  ,
 11735    14   115    35    14   279     0     111  ix
 11736    14   115    37    14   279     0      59  (
 11737    14   115    38    14   279     0     111  checkIndex
 11738    14   115    48    14   279     0      59  (
 11739    14   115    49    14   279     0     111  i
 11740    14   115    50    14   279     0      60  )
 11741    14   115    51    14   279     0      60  )
 11742    14   115    52    14   279     0      60  )
 11743    14   115    53    14   279     0     102  ;
 11744    14   116     5    14   279     0      64  }
 11745    14   116     5    14   279     0     738  ENDMETHOD
 11746    14   116     5    14   280     0     739  STARTMETHOD
 11747    14   120     5    14   280     0      10  public
 11748    14   120    12    14   280     0     111  FloatBuffer
 11749    14   120    24    14   280     0     111  put
 11750    14   120    27    14   280     0      59  (
 11751    14   120    28    14   280     0       4  float
 11752    14   120    34    14   280     0     111  x
 11753    14   120    35    14   280     0      60  )
 11754    14   120    37    14   280     0      63  {
 11755    14   122     9    14   280     0     111  Bits.putFloatL
 11756    14   122    23    14   280     0      59  (
 11757    14   122    24    14   280     0     111  bb
 11758    14   122    26    14   280     0      66  ,
 11759    14   122    28    14   280     0     111  ix
 11760    14   122    30    14   280     0      59  (
 11761    14   122    31    14   280     0     111  nextPutIndex
 11762    14   122    43    14   280     0      59  (
 11763    14   122    44    14   280     0      60  )
 11764    14   122    45    14   280     0      60  )
 11765    14   122    46    14   280     0      66  ,
 11766    14   122    48    14   280     0     111  x
 11767    14   122    49    14   280     0      60  )
 11768    14   122    50    14   280     0     102  ;
 11769    14   123     9    14   280     0      19  return
 11770    14   123    16    14   280     0      44  this
 11771    14   123    20    14   280     0     102  ;
 11772    14   127     5    14   280     0      64  }
 11773    14   127     5    14   280     0     740  ENDMETHOD
 11774    14   127     5    14   281     0     741  STARTMETHOD
 11775    14   129     5    14   281     0      10  public
 11776    14   129    12    14   281     0     111  FloatBuffer
 11777    14   129    24    14   281     0     111  put
 11778    14   129    27    14   281     0      59  (
 11779    14   129    28    14   281     0      36  int
 11780    14   129    32    14   281     0     111  i
 11781    14   129    33    14   281     0      66  ,
 11782    14   129    35    14   281     0       4  float
 11783    14   129    41    14   281     0     111  x
 11784    14   129    42    14   281     0      60  )
 11785    14   129    44    14   281     0      63  {
 11786    14   131     9    14   281     0     111  Bits.putFloatL
 11787    14   131    23    14   281     0      59  (
 11788    14   131    24    14   281     0     111  bb
 11789    14   131    26    14   281     0      66  ,
 11790    14   131    28    14   281     0     111  ix
 11791    14   131    30    14   281     0      59  (
 11792    14   131    31    14   281     0     111  checkIndex
 11793    14   131    41    14   281     0      59  (
 11794    14   131    42    14   281     0     111  i
 11795    14   131    43    14   281     0      60  )
 11796    14   131    44    14   281     0      60  )
 11797    14   131    45    14   281     0      66  ,
 11798    14   131    47    14   281     0     111  x
 11799    14   131    48    14   281     0      60  )
 11800    14   131    49    14   281     0     102  ;
 11801    14   132     9    14   281     0      19  return
 11802    14   132    16    14   281     0      44  this
 11803    14   132    20    14   281     0     102  ;
 11804    14   136     5    14   281     0      64  }
 11805    14   136     5    14   281     0     742  ENDMETHOD
 11806    14   136     5    14   282     0     743  STARTMETHOD
 11807    14   138     5    14   282     0      10  public
 11808    14   138    12    14   282     0     111  FloatBuffer
 11809    14   138    24    14   282     0     111  compact
 11810    14   138    31    14   282     0      59  (
 11811    14   138    32    14   282     0      60  )
 11812    14   138    34    14   282     0      63  {
 11813    14   140     9    14   282     1      36  int
 11814    14   140    13    14   282     1     111  pos
 11815    14   140    17    14   282     1      67  =
 11816    14   140    19    14   282     1     111  position
 11817    14   140    27    14   282     1      59  (
 11818    14   140    28    14   282     1      60  )
 11819    14   140    29    14   282     1     102  ;
 11820    14   141     9    14   282     1      36  int
 11821    14   141    13    14   282     1     111  lim
 11822    14   141    17    14   282     1      67  =
 11823    14   141    19    14   282     1     111  limit
 11824    14   141    24    14   282     1      59  (
 11825    14   141    25    14   282     1      60  )
 11826    14   141    26    14   282     1     102  ;
 11827    14   142     9    14   282     0     111  assert
 11828    14   142    16    14   282     0      59  (
 11829    14   142    17    14   282     0     111  pos
 11830    14   142    21    14   282     0      92  <=
 11831    14   142    24    14   282     0     111  lim
 11832    14   142    27    14   282     0      60  )
 11833    14   142    28    14   282     0     102  ;
 11834    14   143     9    14   282     0      36  int
 11835    14   143    13    14   282     0     111  rem
 11836    14   143    17    14   282     0      67  =
 11837    14   143    19    14   282     0      59  (
 11838    14   143    20    14   282     0     111  pos
 11839    14   143    24    14   282     0      92  <=
 11840    14   143    27    14   282     0     111  lim
 11841    14   143    31    14   282     0      58  ?
 11842    14   143    33    14   282     0     111  lim
 11843    14   143    37    14   282     0      77  -
 11844    14   143    39    14   282     0     111  pos
 11845    14   143    43    14   282     0      65  :
 11846    14   143    45    14   282     0     112  0
 11847    14   143    46    14   282     0      60  )
 11848    14   143    47    14   282     0     102  ;
 11849    14   145     9    14   282     0     111  ByteBuffer
 11850    14   145    20    14   282     0     111  db
 11851    14   145    23    14   282     0      67  =
 11852    14   145    25    14   282     0     111  bb.duplicate
 11853    14   145    37    14   282     0      59  (
 11854    14   145    38    14   282     0      60  )
 11855    14   145    39    14   282     0     102  ;
 11856    14   146     9    14   282     0     111  db.limit
 11857    14   146    17    14   282     0      59  (
 11858    14   146    18    14   282     0     111  ix
 11859    14   146    20    14   282     0      59  (
 11860    14   146    21    14   282     0     111  lim
 11861    14   146    24    14   282     0      60  )
 11862    14   146    25    14   282     0      60  )
 11863    14   146    26    14   282     0     102  ;
 11864    14   147     9    14   282     0     111  db.position
 11865    14   147    20    14   282     0      59  (
 11866    14   147    21    14   282     0     111  ix
 11867    14   147    23    14   282     0      59  (
 11868    14   147    24    14   282     0     112  0
 11869    14   147    25    14   282     0      60  )
 11870    14   147    26    14   282     0      60  )
 11871    14   147    27    14   282     0     102  ;
 11872    14   148     9    14   282     0     111  ByteBuffer
 11873    14   148    20    14   282     0     111  sb
 11874    14   148    23    14   282     0      67  =
 11875    14   148    25    14   282     0     111  db.slice
 11876    14   148    33    14   282     0      59  (
 11877    14   148    34    14   282     0      60  )
 11878    14   148    35    14   282     0     102  ;
 11879    14   149     9    14   282     0     111  sb.position
 11880    14   149    20    14   282     0      59  (
 11881    14   149    21    14   282     0     111  pos
 11882    14   149    25    14   282     0      90  <<
 11883    14   149    28    14   282     0     112  2
 11884    14   149    29    14   282     0      60  )
 11885    14   149    30    14   282     0     102  ;
 11886    14   150     9    14   282     0     111  sb.compact
 11887    14   150    19    14   282     0      59  (
 11888    14   150    20    14   282     0      60  )
 11889    14   150    21    14   282     0     102  ;
 11890    14   151     9    14   282     0     111  position
 11891    14   151    17    14   282     0      59  (
 11892    14   151    18    14   282     0     111  rem
 11893    14   151    21    14   282     0      60  )
 11894    14   151    22    14   282     0     102  ;
 11895    14   152     9    14   282     0     111  limit
 11896    14   152    14    14   282     0      59  (
 11897    14   152    15    14   282     0     111  capacity
 11898    14   152    23    14   282     0      59  (
 11899    14   152    24    14   282     0      60  )
 11900    14   152    25    14   282     0      60  )
 11901    14   152    26    14   282     0     102  ;
 11902    14   153     9    14   282     0      19  return
 11903    14   153    16    14   282     0      44  this
 11904    14   153    20    14   282     0     102  ;
 11905    14   157     5    14   282     0      64  }
 11906    14   157     5    14   282     0     744  ENDMETHOD
 11907    14   157     5    14   283     0     745  STARTMETHOD
 11908    14   159     5    14   283     0      10  public
 11909    14   159    12    14   283     0      39  boolean
 11910    14   159    20    14   283     0     111  isDirect
 11911    14   159    28    14   283     0      59  (
 11912    14   159    29    14   283     0      60  )
 11913    14   159    31    14   283     0      63  {
 11914    14   160     9    14   283     0      19  return
 11915    14   160    16    14   283     0     111  bb.isDirect
 11916    14   160    27    14   283     0      59  (
 11917    14   160    28    14   283     0      60  )
 11918    14   160    29    14   283     1     102  ;
 11919    14   161     5    14   283     1      64  }
 11920    14   161     5    14   283     0     746  ENDMETHOD
 11921    14   161     5    14   284     0     747  STARTMETHOD
 11922    14   163     5    14   284     0      10  public
 11923    14   163    12    14   284     0      39  boolean
 11924    14   163    20    14   284     0     111  isReadOnly
 11925    14   163    30    14   284     0      59  (
 11926    14   163    31    14   284     0      60  )
 11927    14   163    33    14   284     0      63  {
 11928    14   164     9    14   284     0      19  return
 11929    14   164    16    14   284     0      43  false
 11930    14   164    21    14   284     1     102  ;
 11931    14   165     5    14   284     1      64  }
 11932    14   165     5    14   284     0     748  ENDMETHOD
 11933    14   165     5    14   285     0     749  STARTMETHOD
 11934    14   207     5    14   285     0      10  public
 11935    14   207    12    14   285     0     111  ByteOrder
 11936    14   207    22    14   285     0     111  order
 11937    14   207    27    14   285     0      59  (
 11938    14   207    28    14   285     0      60  )
 11939    14   207    30    14   285     0      63  {
 11940    14   212     9    14   285     0      19  return
 11941    14   212    16    14   285     0     111  ByteOrder.LITTLE_ENDIAN
 11942    14   212    39    14   285     1     102  ;
 11943    14   214     5    14   285     1      64  }
 11944    14   214     5    14   285     0     750  ENDMETHOD
 11945    14   216     1    14    -1     0      64  }
 11946    14   216     1    14    -1     1     751  ENDCLASS
 11947    14   216     1    -1    -1     1     752  ENDFILE C:\javasrc\java\nio\ByteBufferAsFloatBufferL.java
 11948    15     1     1    -1    -1     1     753  STARTFILE C:\javasrc\java\nio\ByteBufferAsFloatBufferRB.java
 11949    15    28     1    -1    -1     0       5  package
 11950    15    28     9    -1    -1     0     111  java.nio
 11951    15    28    17    -1    -1     0     102  ;
 11952    15    31     1    15    -1     0     754  STARTCLASS
 11953    15    31     1    15    -1     0      24  class
 11954    15    31     7    15    -1     0     111  ByteBufferAsFloatBufferRB
 11955    15    32     5    15    -1     0      38  extends
 11956    15    32    13    15    -1     0     111  ByteBufferAsFloatBufferB
 11957    15    33     1    15    -1     0      63  {
 11958    15    33     1    15   286     0     755  STARTMETHOD
 11959    15    42     5    15   286     0     111  ByteBufferAsFloatBufferRB
 11960    15    42    30    15   286     0      59  (
 11961    15    42    31    15   286     0     111  ByteBuffer
 11962    15    42    42    15   286     0     111  bb
 11963    15    42    44    15   286     0      60  )
 11964    15    42    46    15   286     0      63  {
 11965    15    55     9    15   286     0      27  super
 11966    15    55    14    15   286     0      59  (
 11967    15    55    15    15   286     0     111  bb
 11968    15    55    17    15   286     0      60  )
 11969    15    55    18    15   286     0     102  ;
 11970    15    57     5    15   286     0      64  }
 11971    15    57     5    15   286     0     756  ENDMETHOD
 11972    15    57     5    15   287     0     757  STARTMETHOD
 11973    15    59     5    15   287     0     111  ByteBufferAsFloatBufferRB
 11974    15    59    30    15   287     0      59  (
 11975    15    59    31    15   287     0     111  ByteBuffer
 11976    15    59    42    15   287     0     111  bb
 11977    15    59    44    15   287     0      66  ,
 11978    15    60    38    15   287     0      36  int
 11979    15    60    42    15   287     0     111  mark
 11980    15    60    46    15   287     0      66  ,
 11981    15    60    48    15   287     0      36  int
 11982    15    60    52    15   287     0     111  pos
 11983    15    60    55    15   287     0      66  ,
 11984    15    60    57    15   287     0      36  int
 11985    15    60    61    15   287     0     111  lim
 11986    15    60    64    15   287     0      66  ,
 11987    15    60    66    15   287     0      36  int
 11988    15    60    70    15   287     0     111  cap
 11989    15    60    73    15   287     0      66  ,
 11990    15    61    38    15   287     0      36  int
 11991    15    61    42    15   287     0     111  off
 11992    15    61    45    15   287     0      60  )
 11993    15    62     5    15   287     0      63  {
 11994    15    68     9    15   287     0      27  super
 11995    15    68    14    15   287     0      59  (
 11996    15    68    15    15   287     0     111  bb
 11997    15    68    17    15   287     0      66  ,
 11998    15    68    19    15   287     0     111  mark
 11999    15    68    23    15   287     0      66  ,
 12000    15    68    25    15   287     0     111  pos
 12001    15    68    28    15   287     0      66  ,
 12002    15    68    30    15   287     0     111  lim
 12003    15    68    33    15   287     0      66  ,
 12004    15    68    35    15   287     0     111  cap
 12005    15    68    38    15   287     0      66  ,
 12006    15    68    40    15   287     0     111  off
 12007    15    68    43    15   287     0      60  )
 12008    15    68    44    15   287     0     102  ;
 12009    15    70     5    15   287     0      64  }
 12010    15    70     5    15   287     0     758  ENDMETHOD
 12011    15    70     5    15   288     0     759  STARTMETHOD
 12012    15    72     5    15   288     0      10  public
 12013    15    72    12    15   288     0     111  FloatBuffer
 12014    15    72    24    15   288     0     111  slice
 12015    15    72    29    15   288     0      59  (
 12016    15    72    30    15   288     0      60  )
 12017    15    72    32    15   288     0      63  {
 12018    15    73     9    15   288     1      36  int
 12019    15    73    13    15   288     1     111  pos
 12020    15    73    17    15   288     1      67  =
 12021    15    73    19    15   288     1     111  this.position
 12022    15    73    32    15   288     1      59  (
 12023    15    73    33    15   288     1      60  )
 12024    15    73    34    15   288     1     102  ;
 12025    15    74     9    15   288     1      36  int
 12026    15    74    13    15   288     1     111  lim
 12027    15    74    17    15   288     1      67  =
 12028    15    74    19    15   288     1     111  this.limit
 12029    15    74    29    15   288     1      59  (
 12030    15    74    30    15   288     1      60  )
 12031    15    74    31    15   288     1     102  ;
 12032    15    75     9    15   288     0     111  assert
 12033    15    75    16    15   288     0      59  (
 12034    15    75    17    15   288     0     111  pos
 12035    15    75    21    15   288     0      92  <=
 12036    15    75    24    15   288     0     111  lim
 12037    15    75    27    15   288     0      60  )
 12038    15    75    28    15   288     0     102  ;
 12039    15    76     9    15   288     0      36  int
 12040    15    76    13    15   288     0     111  rem
 12041    15    76    17    15   288     0      67  =
 12042    15    76    19    15   288     0      59  (
 12043    15    76    20    15   288     0     111  pos
 12044    15    76    24    15   288     0      92  <=
 12045    15    76    27    15   288     0     111  lim
 12046    15    76    31    15   288     0      58  ?
 12047    15    76    33    15   288     0     111  lim
 12048    15    76    37    15   288     0      77  -
 12049    15    76    39    15   288     0     111  pos
 12050    15    76    43    15   288     0      65  :
 12051    15    76    45    15   288     0     112  0
 12052    15    76    46    15   288     0      60  )
 12053    15    76    47    15   288     0     102  ;
 12054    15    77     9    15   288     0      36  int
 12055    15    77    13    15   288     0     111  off
 12056    15    77    17    15   288     0      67  =
 12057    15    77    19    15   288     0      59  (
 12058    15    77    20    15   288     0     111  pos
 12059    15    77    24    15   288     0      90  <<
 12060    15    77    27    15   288     0     112  2
 12061    15    77    28    15   288     0      60  )
 12062    15    77    30    15   288     0      74  +
 12063    15    77    32    15   288     0     111  offset
 12064    15    77    38    15   288     0     102  ;
 12065    15    78     9    15   288     0     111  assert
 12066    15    78    16    15   288     0      59  (
 12067    15    78    17    15   288     0     111  off
 12068    15    78    21    15   288     0      88  >=
 12069    15    78    24    15   288     0     112  0
 12070    15    78    25    15   288     0      60  )
 12071    15    78    26    15   288     0     102  ;
 12072    15    79     9    15   288     0      19  return
 12073    15    79    16    15   288     0      15  new
 12074    15    79    20    15   288     0     111  ByteBufferAsFloatBufferRB
 12075    15    79    45    15   288     0      59  (
 12076    15    79    46    15   288     0     111  bb
 12077    15    79    48    15   288     0      66  ,
 12078    15    79    50    15   288     0      77  -
 12079    15    79    51    15   288     0     112  1
 12080    15    79    52    15   288     0      66  ,
 12081    15    79    54    15   288     0     112  0
 12082    15    79    55    15   288     0      66  ,
 12083    15    79    57    15   288     0     111  rem
 12084    15    79    60    15   288     0      66  ,
 12085    15    79    62    15   288     0     111  rem
 12086    15    79    65    15   288     0      66  ,
 12087    15    79    67    15   288     0     111  off
 12088    15    79    70    15   288     0      60  )
 12089    15    79    71    15   288     0     102  ;
 12090    15    80     5    15   288     0      64  }
 12091    15    80     5    15   288     0     760  ENDMETHOD
 12092    15    80     5    15   289     0     761  STARTMETHOD
 12093    15    82     5    15   289     0      10  public
 12094    15    82    12    15   289     0     111  FloatBuffer
 12095    15    82    24    15   289     0     111  duplicate
 12096    15    82    33    15   289     0      59  (
 12097    15    82    34    15   289     0      60  )
 12098    15    82    36    15   289     0      63  {
 12099    15    83     9    15   289     0      19  return
 12100    15    83    16    15   289     0      15  new
 12101    15    83    20    15   289     0     111  ByteBufferAsFloatBufferRB
 12102    15    83    45    15   289     0      59  (
 12103    15    83    46    15   289     0     111  bb
 12104    15    83    48    15   289     0      66  ,
 12105    15    84    53    15   289     1     111  this.markValue
 12106    15    84    67    15   289     1      59  (
 12107    15    84    68    15   289     1      60  )
 12108    15    84    69    15   289     1      66  ,
 12109    15    85    53    15   289     1     111  this.position
 12110    15    85    66    15   289     1      59  (
 12111    15    85    67    15   289     1      60  )
 12112    15    85    68    15   289     1      66  ,
 12113    15    86    53    15   289     1     111  this.limit
 12114    15    86    63    15   289     1      59  (
 12115    15    86    64    15   289     1      60  )
 12116    15    86    65    15   289     1      66  ,
 12117    15    87    53    15   289     1     111  this.capacity
 12118    15    87    66    15   289     1      59  (
 12119    15    87    67    15   289     1      60  )
 12120    15    87    68    15   289     1      66  ,
 12121    15    88    53    15   289     0     111  offset
 12122    15    88    59    15   289     0      60  )
 12123    15    88    60    15   289     0     102  ;
 12124    15    89     5    15   289     0      64  }
 12125    15    89     5    15   289     0     762  ENDMETHOD
 12126    15    89     5    15   290     0     763  STARTMETHOD
 12127    15    91     5    15   290     0      10  public
 12128    15    91    12    15   290     0     111  FloatBuffer
 12129    15    91    24    15   290     0     111  asReadOnlyBuffer
 12130    15    91    40    15   290     0      59  (
 12131    15    91    41    15   290     0      60  )
 12132    15    91    43    15   290     0      63  {
 12133    15   100     9    15   290     0      19  return
 12134    15   100    16    15   290     0     111  duplicate
 12135    15   100    25    15   290     0      59  (
 12136    15   100    26    15   290     0      60  )
 12137    15   100    27    15   290     0     102  ;
 12138    15   102     5    15   290     0      64  }
 12139    15   102     5    15   290     0     764  ENDMETHOD
 12140    15   102     5    15   291     0     765  STARTMETHOD
 12141    15   120     5    15   291     0      10  public
 12142    15   120    12    15   291     0     111  FloatBuffer
 12143    15   120    24    15   291     0     111  put
 12144    15   120    27    15   291     0      59  (
 12145    15   120    28    15   291     0       4  float
 12146    15   120    34    15   291     0     111  x
 12147    15   120    35    15   291     0      60  )
 12148    15   120    37    15   291     0      63  {
 12149    15   125     9    15   291     0      20  throw
 12150    15   125    15    15   291     0      15  new
 12151    15   125    19    15   291     0     111  ReadOnlyBufferException
 12152    15   125    42    15   291     0      59  (
 12153    15   125    43    15   291     0      60  )
 12154    15   125    44    15   291     0     102  ;
 12155    15   127     5    15   291     0      64  }
 12156    15   127     5    15   291     0     766  ENDMETHOD
 12157    15   127     5    15   292     0     767  STARTMETHOD
 12158    15   129     5    15   292     0      10  public
 12159    15   129    12    15   292     0     111  FloatBuffer
 12160    15   129    24    15   292     0     111  put
 12161    15   129    27    15   292     0      59  (
 12162    15   129    28    15   292     0      36  int
 12163    15   129    32    15   292     0     111  i
 12164    15   129    33    15   292     0      66  ,
 12165    15   129    35    15   292     0       4  float
 12166    15   129    41    15   292     0     111  x
 12167    15   129    42    15   292     0      60  )
 12168    15   129    44    15   292     0      63  {
 12169    15   134     9    15   292     0      20  throw
 12170    15   134    15    15   292     0      15  new
 12171    15   134    19    15   292     0     111  ReadOnlyBufferException
 12172    15   134    42    15   292     0      59  (
 12173    15   134    43    15   292     0      60  )
 12174    15   134    44    15   292     0     102  ;
 12175    15   136     5    15   292     0      64  }
 12176    15   136     5    15   292     0     768  ENDMETHOD
 12177    15   136     5    15   293     0     769  STARTMETHOD
 12178    15   138     5    15   293     0      10  public
 12179    15   138    12    15   293     0     111  FloatBuffer
 12180    15   138    24    15   293     0     111  compact
 12181    15   138    31    15   293     0      59  (
 12182    15   138    32    15   293     0      60  )
 12183    15   138    34    15   293     0      63  {
 12184    15   155     9    15   293     0      20  throw
 12185    15   155    15    15   293     0      15  new
 12186    15   155    19    15   293     0     111  ReadOnlyBufferException
 12187    15   155    42    15   293     0      59  (
 12188    15   155    43    15   293     0      60  )
 12189    15   155    44    15   293     0     102  ;
 12190    15   157     5    15   293     0      64  }
 12191    15   157     5    15   293     0     770  ENDMETHOD
 12192    15   157     5    15   294     0     771  STARTMETHOD
 12193    15   159     5    15   294     0      10  public
 12194    15   159    12    15   294     0      39  boolean
 12195    15   159    20    15   294     0     111  isDirect
 12196    15   159    28    15   294     0      59  (
 12197    15   159    29    15   294     0      60  )
 12198    15   159    31    15   294     0      63  {
 12199    15   160     9    15   294     0      19  return
 12200    15   160    16    15   294     0     111  bb.isDirect
 12201    15   160    27    15   294     0      59  (
 12202    15   160    28    15   294     0      60  )
 12203    15   160    29    15   294     1     102  ;
 12204    15   161     5    15   294     1      64  }
 12205    15   161     5    15   294     0     772  ENDMETHOD
 12206    15   161     5    15   295     0     773  STARTMETHOD
 12207    15   163     5    15   295     0      10  public
 12208    15   163    12    15   295     0      39  boolean
 12209    15   163    20    15   295     0     111  isReadOnly
 12210    15   163    30    15   295     0      59  (
 12211    15   163    31    15   295     0      60  )
 12212    15   163    33    15   295     0      63  {
 12213    15   164     9    15   295     0      19  return
 12214    15   164    16    15   295     0      52  true
 12215    15   164    20    15   295     1     102  ;
 12216    15   165     5    15   295     1      64  }
 12217    15   165     5    15   295     0     774  ENDMETHOD
 12218    15   165     5    15   296     0     775  STARTMETHOD
 12219    15   207     5    15   296     0      10  public
 12220    15   207    12    15   296     0     111  ByteOrder
 12221    15   207    22    15   296     0     111  order
 12222    15   207    27    15   296     0      59  (
 12223    15   207    28    15   296     0      60  )
 12224    15   207    30    15   296     0      63  {
 12225    15   209     9    15   296     0      19  return
 12226    15   209    16    15   296     0     111  ByteOrder.BIG_ENDIAN
 12227    15   209    36    15   296     1     102  ;
 12228    15   214     5    15   296     1      64  }
 12229    15   214     5    15   296     0     776  ENDMETHOD
 12230    15   216     1    15    -1     0      64  }
 12231    15   216     1    15    -1     1     777  ENDCLASS
 12232    15   216     1    -1    -1     1     778  ENDFILE C:\javasrc\java\nio\ByteBufferAsFloatBufferRB.java
 12233    16     1     1    -1    -1     1     779  STARTFILE C:\javasrc\java\nio\ByteBufferAsFloatBufferRL.java
 12234    16    28     1    -1    -1     0       5  package
 12235    16    28     9    -1    -1     0     111  java.nio
 12236    16    28    17    -1    -1     0     102  ;
 12237    16    31     1    16    -1     0     780  STARTCLASS
 12238    16    31     1    16    -1     0      24  class
 12239    16    31     7    16    -1     0     111  ByteBufferAsFloatBufferRL
 12240    16    32     5    16    -1     0      38  extends
 12241    16    32    13    16    -1     0     111  ByteBufferAsFloatBufferL
 12242    16    33     1    16    -1     0      63  {
 12243    16    33     1    16   297     0     781  STARTMETHOD
 12244    16    42     5    16   297     0     111  ByteBufferAsFloatBufferRL
 12245    16    42    30    16   297     0      59  (
 12246    16    42    31    16   297     0     111  ByteBuffer
 12247    16    42    42    16   297     0     111  bb
 12248    16    42    44    16   297     0      60  )
 12249    16    42    46    16   297     0      63  {
 12250    16    55     9    16   297     0      27  super
 12251    16    55    14    16   297     0      59  (
 12252    16    55    15    16   297     0     111  bb
 12253    16    55    17    16   297     0      60  )
 12254    16    55    18    16   297     0     102  ;
 12255    16    57     5    16   297     0      64  }
 12256    16    57     5    16   297     0     782  ENDMETHOD
 12257    16    57     5    16   298     0     783  STARTMETHOD
 12258    16    59     5    16   298     0     111  ByteBufferAsFloatBufferRL
 12259    16    59    30    16   298     0      59  (
 12260    16    59    31    16   298     0     111  ByteBuffer
 12261    16    59    42    16   298     0     111  bb
 12262    16    59    44    16   298     0      66  ,
 12263    16    60    38    16   298     0      36  int
 12264    16    60    42    16   298     0     111  mark
 12265    16    60    46    16   298     0      66  ,
 12266    16    60    48    16   298     0      36  int
 12267    16    60    52    16   298     0     111  pos
 12268    16    60    55    16   298     0      66  ,
 12269    16    60    57    16   298     0      36  int
 12270    16    60    61    16   298     0     111  lim
 12271    16    60    64    16   298     0      66  ,
 12272    16    60    66    16   298     0      36  int
 12273    16    60    70    16   298     0     111  cap
 12274    16    60    73    16   298     0      66  ,
 12275    16    61    38    16   298     0      36  int
 12276    16    61    42    16   298     0     111  off
 12277    16    61    45    16   298     0      60  )
 12278    16    62     5    16   298     0      63  {
 12279    16    68     9    16   298     0      27  super
 12280    16    68    14    16   298     0      59  (
 12281    16    68    15    16   298     0     111  bb
 12282    16    68    17    16   298     0      66  ,
 12283    16    68    19    16   298     0     111  mark
 12284    16    68    23    16   298     0      66  ,
 12285    16    68    25    16   298     0     111  pos
 12286    16    68    28    16   298     0      66  ,
 12287    16    68    30    16   298     0     111  lim
 12288    16    68    33    16   298     0      66  ,
 12289    16    68    35    16   298     0     111  cap
 12290    16    68    38    16   298     0      66  ,
 12291    16    68    40    16   298     0     111  off
 12292    16    68    43    16   298     0      60  )
 12293    16    68    44    16   298     0     102  ;
 12294    16    70     5    16   298     0      64  }
 12295    16    70     5    16   298     0     784  ENDMETHOD
 12296    16    70     5    16   299     0     785  STARTMETHOD
 12297    16    72     5    16   299     0      10  public
 12298    16    72    12    16   299     0     111  FloatBuffer
 12299    16    72    24    16   299     0     111  slice
 12300    16    72    29    16   299     0      59  (
 12301    16    72    30    16   299     0      60  )
 12302    16    72    32    16   299     0      63  {
 12303    16    73     9    16   299     1      36  int
 12304    16    73    13    16   299     1     111  pos
 12305    16    73    17    16   299     1      67  =
 12306    16    73    19    16   299     1     111  this.position
 12307    16    73    32    16   299     1      59  (
 12308    16    73    33    16   299     1      60  )
 12309    16    73    34    16   299     1     102  ;
 12310    16    74     9    16   299     1      36  int
 12311    16    74    13    16   299     1     111  lim
 12312    16    74    17    16   299     1      67  =
 12313    16    74    19    16   299     1     111  this.limit
 12314    16    74    29    16   299     1      59  (
 12315    16    74    30    16   299     1      60  )
 12316    16    74    31    16   299     1     102  ;
 12317    16    75     9    16   299     0     111  assert
 12318    16    75    16    16   299     0      59  (
 12319    16    75    17    16   299     0     111  pos
 12320    16    75    21    16   299     0      92  <=
 12321    16    75    24    16   299     0     111  lim
 12322    16    75    27    16   299     0      60  )
 12323    16    75    28    16   299     0     102  ;
 12324    16    76     9    16   299     0      36  int
 12325    16    76    13    16   299     0     111  rem
 12326    16    76    17    16   299     0      67  =
 12327    16    76    19    16   299     0      59  (
 12328    16    76    20    16   299     0     111  pos
 12329    16    76    24    16   299     0      92  <=
 12330    16    76    27    16   299     0     111  lim
 12331    16    76    31    16   299     0      58  ?
 12332    16    76    33    16   299     0     111  lim
 12333    16    76    37    16   299     0      77  -
 12334    16    76    39    16   299     0     111  pos
 12335    16    76    43    16   299     0      65  :
 12336    16    76    45    16   299     0     112  0
 12337    16    76    46    16   299     0      60  )
 12338    16    76    47    16   299     0     102  ;
 12339    16    77     9    16   299     0      36  int
 12340    16    77    13    16   299     0     111  off
 12341    16    77    17    16   299     0      67  =
 12342    16    77    19    16   299     0      59  (
 12343    16    77    20    16   299     0     111  pos
 12344    16    77    24    16   299     0      90  <<
 12345    16    77    27    16   299     0     112  2
 12346    16    77    28    16   299     0      60  )
 12347    16    77    30    16   299     0      74  +
 12348    16    77    32    16   299     0     111  offset
 12349    16    77    38    16   299     0     102  ;
 12350    16    78     9    16   299     0     111  assert
 12351    16    78    16    16   299     0      59  (
 12352    16    78    17    16   299     0     111  off
 12353    16    78    21    16   299     0      88  >=
 12354    16    78    24    16   299     0     112  0
 12355    16    78    25    16   299     0      60  )
 12356    16    78    26    16   299     0     102  ;
 12357    16    79     9    16   299     0      19  return
 12358    16    79    16    16   299     0      15  new
 12359    16    79    20    16   299     0     111  ByteBufferAsFloatBufferRL
 12360    16    79    45    16   299     0      59  (
 12361    16    79    46    16   299     0     111  bb
 12362    16    79    48    16   299     0      66  ,
 12363    16    79    50    16   299     0      77  -
 12364    16    79    51    16   299     0     112  1
 12365    16    79    52    16   299     0      66  ,
 12366    16    79    54    16   299     0     112  0
 12367    16    79    55    16   299     0      66  ,
 12368    16    79    57    16   299     0     111  rem
 12369    16    79    60    16   299     0      66  ,
 12370    16    79    62    16   299     0     111  rem
 12371    16    79    65    16   299     0      66  ,
 12372    16    79    67    16   299     0     111  off
 12373    16    79    70    16   299     0      60  )
 12374    16    79    71    16   299     0     102  ;
 12375    16    80     5    16   299     0      64  }
 12376    16    80     5    16   299     0     786  ENDMETHOD
 12377    16    80     5    16   300     0     787  STARTMETHOD
 12378    16    82     5    16   300     0      10  public
 12379    16    82    12    16   300     0     111  FloatBuffer
 12380    16    82    24    16   300     0     111  duplicate
 12381    16    82    33    16   300     0      59  (
 12382    16    82    34    16   300     0      60  )
 12383    16    82    36    16   300     0      63  {
 12384    16    83     9    16   300     0      19  return
 12385    16    83    16    16   300     0      15  new
 12386    16    83    20    16   300     0     111  ByteBufferAsFloatBufferRL
 12387    16    83    45    16   300     0      59  (
 12388    16    83    46    16   300     0     111  bb
 12389    16    83    48    16   300     0      66  ,
 12390    16    84    53    16   300     1     111  this.markValue
 12391    16    84    67    16   300     1      59  (
 12392    16    84    68    16   300     1      60  )
 12393    16    84    69    16   300     1      66  ,
 12394    16    85    53    16   300     1     111  this.position
 12395    16    85    66    16   300     1      59  (
 12396    16    85    67    16   300     1      60  )
 12397    16    85    68    16   300     1      66  ,
 12398    16    86    53    16   300     1     111  this.limit
 12399    16    86    63    16   300     1      59  (
 12400    16    86    64    16   300     1      60  )
 12401    16    86    65    16   300     1      66  ,
 12402    16    87    53    16   300     1     111  this.capacity
 12403    16    87    66    16   300     1      59  (
 12404    16    87    67    16   300     1      60  )
 12405    16    87    68    16   300     1      66  ,
 12406    16    88    53    16   300     0     111  offset
 12407    16    88    59    16   300     0      60  )
 12408    16    88    60    16   300     0     102  ;
 12409    16    89     5    16   300     0      64  }
 12410    16    89     5    16   300     0     788  ENDMETHOD
 12411    16    89     5    16   301     0     789  STARTMETHOD
 12412    16    91     5    16   301     0      10  public
 12413    16    91    12    16   301     0     111  FloatBuffer
 12414    16    91    24    16   301     0     111  asReadOnlyBuffer
 12415    16    91    40    16   301     0      59  (
 12416    16    91    41    16   301     0      60  )
 12417    16    91    43    16   301     0      63  {
 12418    16   100     9    16   301     0      19  return
 12419    16   100    16    16   301     0     111  duplicate
 12420    16   100    25    16   301     0      59  (
 12421    16   100    26    16   301     0      60  )
 12422    16   100    27    16   301     0     102  ;
 12423    16   102     5    16   301     0      64  }
 12424    16   102     5    16   301     0     790  ENDMETHOD
 12425    16   102     5    16   302     0     791  STARTMETHOD
 12426    16   120     5    16   302     0      10  public
 12427    16   120    12    16   302     0     111  FloatBuffer
 12428    16   120    24    16   302     0     111  put
 12429    16   120    27    16   302     0      59  (
 12430    16   120    28    16   302     0       4  float
 12431    16   120    34    16   302     0     111  x
 12432    16   120    35    16   302     0      60  )
 12433    16   120    37    16   302     0      63  {
 12434    16   125     9    16   302     0      20  throw
 12435    16   125    15    16   302     0      15  new
 12436    16   125    19    16   302     0     111  ReadOnlyBufferException
 12437    16   125    42    16   302     0      59  (
 12438    16   125    43    16   302     0      60  )
 12439    16   125    44    16   302     0     102  ;
 12440    16   127     5    16   302     0      64  }
 12441    16   127     5    16   302     0     792  ENDMETHOD
 12442    16   127     5    16   303     0     793  STARTMETHOD
 12443    16   129     5    16   303     0      10  public
 12444    16   129    12    16   303     0     111  FloatBuffer
 12445    16   129    24    16   303     0     111  put
 12446    16   129    27    16   303     0      59  (
 12447    16   129    28    16   303     0      36  int
 12448    16   129    32    16   303     0     111  i
 12449    16   129    33    16   303     0      66  ,
 12450    16   129    35    16   303     0       4  float
 12451    16   129    41    16   303     0     111  x
 12452    16   129    42    16   303     0      60  )
 12453    16   129    44    16   303     0      63  {
 12454    16   134     9    16   303     0      20  throw
 12455    16   134    15    16   303     0      15  new
 12456    16   134    19    16   303     0     111  ReadOnlyBufferException
 12457    16   134    42    16   303     0      59  (
 12458    16   134    43    16   303     0      60  )
 12459    16   134    44    16   303     0     102  ;
 12460    16   136     5    16   303     0      64  }
 12461    16   136     5    16   303     0     794  ENDMETHOD
 12462    16   136     5    16   304     0     795  STARTMETHOD
 12463    16   138     5    16   304     0      10  public
 12464    16   138    12    16   304     0     111  FloatBuffer
 12465    16   138    24    16   304     0     111  compact
 12466    16   138    31    16   304     0      59  (
 12467    16   138    32    16   304     0      60  )
 12468    16   138    34    16   304     0      63  {
 12469    16   155     9    16   304     0      20  throw
 12470    16   155    15    16   304     0      15  new
 12471    16   155    19    16   304     0     111  ReadOnlyBufferException
 12472    16   155    42    16   304     0      59  (
 12473    16   155    43    16   304     0      60  )
 12474    16   155    44    16   304     0     102  ;
 12475    16   157     5    16   304     0      64  }
 12476    16   157     5    16   304     0     796  ENDMETHOD
 12477    16   157     5    16   305     0     797  STARTMETHOD
 12478    16   159     5    16   305     0      10  public
 12479    16   159    12    16   305     0      39  boolean
 12480    16   159    20    16   305     0     111  isDirect
 12481    16   159    28    16   305     0      59  (
 12482    16   159    29    16   305     0      60  )
 12483    16   159    31    16   305     0      63  {
 12484    16   160     9    16   305     0      19  return
 12485    16   160    16    16   305     0     111  bb.isDirect
 12486    16   160    27    16   305     0      59  (
 12487    16   160    28    16   305     0      60  )
 12488    16   160    29    16   305     1     102  ;
 12489    16   161     5    16   305     1      64  }
 12490    16   161     5    16   305     0     798  ENDMETHOD
 12491    16   161     5    16   306     0     799  STARTMETHOD
 12492    16   163     5    16   306     0      10  public
 12493    16   163    12    16   306     0      39  boolean
 12494    16   163    20    16   306     0     111  isReadOnly
 12495    16   163    30    16   306     0      59  (
 12496    16   163    31    16   306     0      60  )
 12497    16   163    33    16   306     0      63  {
 12498    16   164     9    16   306     0      19  return
 12499    16   164    16    16   306     0      52  true
 12500    16   164    20    16   306     1     102  ;
 12501    16   165     5    16   306     1      64  }
 12502    16   165     5    16   306     0     800  ENDMETHOD
 12503    16   165     5    16   307     0     801  STARTMETHOD
 12504    16   207     5    16   307     0      10  public
 12505    16   207    12    16   307     0     111  ByteOrder
 12506    16   207    22    16   307     0     111  order
 12507    16   207    27    16   307     0      59  (
 12508    16   207    28    16   307     0      60  )
 12509    16   207    30    16   307     0      63  {
 12510    16   212     9    16   307     0      19  return
 12511    16   212    16    16   307     0     111  ByteOrder.LITTLE_ENDIAN
 12512    16   212    39    16   307     1     102  ;
 12513    16   214     5    16   307     1      64  }
 12514    16   214     5    16   307     0     802  ENDMETHOD
 12515    16   216     1    16    -1     0      64  }
 12516    16   216     1    16    -1     1     803  ENDCLASS
 12517    16   216     1    -1    -1     1     804  ENDFILE C:\javasrc\java\nio\ByteBufferAsFloatBufferRL.java
 12518    17     1     1    -1    -1     1     805  STARTFILE C:\javasrc\java\nio\ByteBufferAsIntBufferB.java
 12519    17    28     1    -1    -1     0       5  package
 12520    17    28     9    -1    -1     0     111  java.nio
 12521    17    28    17    -1    -1     0     102  ;
 12522    17    31     1    17    -1     0     806  STARTCLASS
 12523    17    31     1    17    -1     0      24  class
 12524    17    31     7    17    -1     0     111  ByteBufferAsIntBufferB
 12525    17    32     5    17    -1     0      38  extends
 12526    17    32    13    17    -1     0     111  IntBuffer
 12527    17    33     1    17    -1     0      63  {
 12528    17    37     5    17    -1     0      23  protected
 12529    17    37    15    17    -1     0       6  final
 12530    17    37    21    17    -1     0     111  ByteBuffer
 12531    17    37    32    17    -1     0     111  bb
 12532    17    37    34    17    -1     0     102  ;
 12533    17    38     5    17    -1     0      23  protected
 12534    17    38    15    17    -1     0       6  final
 12535    17    38    21    17    -1     0      36  int
 12536    17    38    25    17    -1     0     111  offset
 12537    17    38    31    17    -1     0     102  ;
 12538    17    38    31    17   308     0     807  STARTMETHOD
 12539    17    42     5    17   308     0     111  ByteBufferAsIntBufferB
 12540    17    42    27    17   308     0      59  (
 12541    17    42    28    17   308     0     111  ByteBuffer
 12542    17    42    39    17   308     0     111  bb
 12543    17    42    41    17   308     0      60  )
 12544    17    42    43    17   308     0      63  {
 12545    17    44     9    17   308     0      27  super
 12546    17    44    14    17   308     0      59  (
 12547    17    44    15    17   308     0      77  -
 12548    17    44    16    17   308     0     112  1
 12549    17    44    17    17   308     0      66  ,
 12550    17    44    19    17   308     0     112  0
 12551    17    44    20    17   308     0      66  ,
 12552    17    45    15    17   308     0     111  bb.remaining
 12553    17    45    27    17   308     0      59  (
 12554    17    45    28    17   308     0      60  )
 12555    17    45    30    17   308     0      84  >>
 12556    17    45    33    17   308     0     112  2
 12557    17    45    34    17   308     0      66  ,
 12558    17    46    15    17   308     0     111  bb.remaining
 12559    17    46    27    17   308     0      59  (
 12560    17    46    28    17   308     0      60  )
 12561    17    46    30    17   308     0      84  >>
 12562    17    46    33    17   308     0     112  2
 12563    17    46    34    17   308     0      60  )
 12564    17    46    35    17   308     0     102  ;
 12565    17    47     9    17   308     0     111  this.bb
 12566    17    47    17    17   308     0      67  =
 12567    17    47    19    17   308     0     111  bb
 12568    17    47    21    17   308     0     102  ;
 12569    17    49     9    17   308     0      36  int
 12570    17    49    13    17   308     0     111  cap
 12571    17    49    17    17   308     0      67  =
 12572    17    49    19    17   308     0     111  this.capacity
 12573    17    49    32    17   308     0      59  (
 12574    17    49    33    17   308     0      60  )
 12575    17    49    34    17   308     0     102  ;
 12576    17    50     9    17   308     0     111  this.limit
 12577    17    50    19    17   308     0      59  (
 12578    17    50    20    17   308     0     111  cap
 12579    17    50    23    17   308     0      60  )
 12580    17    50    24    17   308     0     102  ;
 12581    17    51     9    17   308     0      36  int
 12582    17    51    13    17   308     0     111  pos
 12583    17    51    17    17   308     0      67  =
 12584    17    51    19    17   308     0     111  this.position
 12585    17    51    32    17   308     0      59  (
 12586    17    51    33    17   308     0      60  )
 12587    17    51    34    17   308     0     102  ;
 12588    17    52     9    17   308     0     111  assert
 12589    17    52    16    17   308     0      59  (
 12590    17    52    17    17   308     0     111  pos
 12591    17    52    21    17   308     0      92  <=
 12592    17    52    24    17   308     0     111  cap
 12593    17    52    27    17   308     0      60  )
 12594    17    52    28    17   308     0     102  ;
 12595    17    53     9    17   308     0     111  offset
 12596    17    53    16    17   308     0      67  =
 12597    17    53    18    17   308     0     111  pos
 12598    17    53    21    17   308     0     102  ;
 12599    17    57     5    17   308     0      64  }
 12600    17    57     5    17   308     0     808  ENDMETHOD
 12601    17    57     5    17   309     0     809  STARTMETHOD
 12602    17    59     5    17   309     0     111  ByteBufferAsIntBufferB
 12603    17    59    27    17   309     0      59  (
 12604    17    59    28    17   309     0     111  ByteBuffer
 12605    17    59    39    17   309     0     111  bb
 12606    17    59    41    17   309     0      66  ,
 12607    17    60    38    17   309     0      36  int
 12608    17    60    42    17   309     0     111  mark
 12609    17    60    46    17   309     0      66  ,
 12610    17    60    48    17   309     0      36  int
 12611    17    60    52    17   309     0     111  pos
 12612    17    60    55    17   309     0      66  ,
 12613    17    60    57    17   309     0      36  int
 12614    17    60    61    17   309     0     111  lim
 12615    17    60    64    17   309     0      66  ,
 12616    17    60    66    17   309     0      36  int
 12617    17    60    70    17   309     0     111  cap
 12618    17    60    73    17   309     0      66  ,
 12619    17    61    38    17   309     0      36  int
 12620    17    61    42    17   309     0     111  off
 12621    17    61    45    17   309     0      60  )
 12622    17    62     5    17   309     0      63  {
 12623    17    64     9    17   309     0      27  super
 12624    17    64    14    17   309     0      59  (
 12625    17    64    15    17   309     0     111  mark
 12626    17    64    19    17   309     0      66  ,
 12627    17    64    21    17   309     0     111  pos
 12628    17    64    24    17   309     0      66  ,
 12629    17    64    26    17   309     0     111  lim
 12630    17    64    29    17   309     0      66  ,
 12631    17    64    31    17   309     0     111  cap
 12632    17    64    34    17   309     0      60  )
 12633    17    64    35    17   309     0     102  ;
 12634    17    65     9    17   309     1     111  this.bb
 12635    17    65    17    17   309     1      67  =
 12636    17    65    19    17   309     1     111  bb
 12637    17    65    21    17   309     1     102  ;
 12638    17    66     9    17   309     1     111  offset
 12639    17    66    16    17   309     1      67  =
 12640    17    66    18    17   309     1     111  off
 12641    17    66    21    17   309     1     102  ;
 12642    17    70     5    17   309     0      64  }
 12643    17    70     5    17   309     0     810  ENDMETHOD
 12644    17    70     5    17   310     0     811  STARTMETHOD
 12645    17    72     5    17   310     0      10  public
 12646    17    72    12    17   310     0     111  IntBuffer
 12647    17    72    22    17   310     0     111  slice
 12648    17    72    27    17   310     0      59  (
 12649    17    72    28    17   310     0      60  )
 12650    17    72    30    17   310     0      63  {
 12651    17    73     9    17   310     1      36  int
 12652    17    73    13    17   310     1     111  pos
 12653    17    73    17    17   310     1      67  =
 12654    17    73    19    17   310     1     111  this.position
 12655    17    73    32    17   310     1      59  (
 12656    17    73    33    17   310     1      60  )
 12657    17    73    34    17   310     1     102  ;
 12658    17    74     9    17   310     1      36  int
 12659    17    74    13    17   310     1     111  lim
 12660    17    74    17    17   310     1      67  =
 12661    17    74    19    17   310     1     111  this.limit
 12662    17    74    29    17   310     1      59  (
 12663    17    74    30    17   310     1      60  )
 12664    17    74    31    17   310     1     102  ;
 12665    17    75     9    17   310     0     111  assert
 12666    17    75    16    17   310     0      59  (
 12667    17    75    17    17   310     0     111  pos
 12668    17    75    21    17   310     0      92  <=
 12669    17    75    24    17   310     0     111  lim
 12670    17    75    27    17   310     0      60  )
 12671    17    75    28    17   310     0     102  ;
 12672    17    76     9    17   310     0      36  int
 12673    17    76    13    17   310     0     111  rem
 12674    17    76    17    17   310     0      67  =
 12675    17    76    19    17   310     0      59  (
 12676    17    76    20    17   310     0     111  pos
 12677    17    76    24    17   310     0      92  <=
 12678    17    76    27    17   310     0     111  lim
 12679    17    76    31    17   310     0      58  ?
 12680    17    76    33    17   310     0     111  lim
 12681    17    76    37    17   310     0      77  -
 12682    17    76    39    17   310     0     111  pos
 12683    17    76    43    17   310     0      65  :
 12684    17    76    45    17   310     0     112  0
 12685    17    76    46    17   310     0      60  )
 12686    17    76    47    17   310     0     102  ;
 12687    17    77     9    17   310     0      36  int
 12688    17    77    13    17   310     0     111  off
 12689    17    77    17    17   310     0      67  =
 12690    17    77    19    17   310     0      59  (
 12691    17    77    20    17   310     0     111  pos
 12692    17    77    24    17   310     0      90  <<
 12693    17    77    27    17   310     0     112  2
 12694    17    77    28    17   310     0      60  )
 12695    17    77    30    17   310     0      74  +
 12696    17    77    32    17   310     0     111  offset
 12697    17    77    38    17   310     0     102  ;
 12698    17    78     9    17   310     0     111  assert
 12699    17    78    16    17   310     0      59  (
 12700    17    78    17    17   310     0     111  off
 12701    17    78    21    17   310     0      88  >=
 12702    17    78    24    17   310     0     112  0
 12703    17    78    25    17   310     0      60  )
 12704    17    78    26    17   310     0     102  ;
 12705    17    79     9    17   310     0      19  return
 12706    17    79    16    17   310     0      15  new
 12707    17    79    20    17   310     0     111  ByteBufferAsIntBufferB
 12708    17    79    42    17   310     0      59  (
 12709    17    79    43    17   310     0     111  bb
 12710    17    79    45    17   310     0      66  ,
 12711    17    79    47    17   310     0      77  -
 12712    17    79    48    17   310     0     112  1
 12713    17    79    49    17   310     0      66  ,
 12714    17    79    51    17   310     0     112  0
 12715    17    79    52    17   310     0      66  ,
 12716    17    79    54    17   310     0     111  rem
 12717    17    79    57    17   310     0      66  ,
 12718    17    79    59    17   310     0     111  rem
 12719    17    79    62    17   310     1      66  ,
 12720    17    79    64    17   310     1     111  off
 12721    17    79    67    17   310     1      60  )
 12722    17    79    68    17   310     1     102  ;
 12723    17    80     5    17   310     1      64  }
 12724    17    80     5    17   310     0     812  ENDMETHOD
 12725    17    80     5    17   311     0     813  STARTMETHOD
 12726    17    82     5    17   311     0      10  public
 12727    17    82    12    17   311     0     111  IntBuffer
 12728    17    82    22    17   311     0     111  duplicate
 12729    17    82    31    17   311     0      59  (
 12730    17    82    32    17   311     0      60  )
 12731    17    82    34    17   311     0      63  {
 12732    17    83     9    17   311     0      19  return
 12733    17    83    16    17   311     0      15  new
 12734    17    83    20    17   311     0     111  ByteBufferAsIntBufferB
 12735    17    83    42    17   311     0      59  (
 12736    17    83    43    17   311     0     111  bb
 12737    17    83    45    17   311     0      66  ,
 12738    17    84    53    17   311     1     111  this.markValue
 12739    17    84    67    17   311     1      59  (
 12740    17    84    68    17   311     1      60  )
 12741    17    84    69    17   311     1      66  ,
 12742    17    85    53    17   311     1     111  this.position
 12743    17    85    66    17   311     1      59  (
 12744    17    85    67    17   311     1      60  )
 12745    17    85    68    17   311     1      66  ,
 12746    17    86    53    17   311     1     111  this.limit
 12747    17    86    63    17   311     1      59  (
 12748    17    86    64    17   311     1      60  )
 12749    17    86    65    17   311     1      66  ,
 12750    17    87    53    17   311     1     111  this.capacity
 12751    17    87    66    17   311     1      59  (
 12752    17    87    67    17   311     1      60  )
 12753    17    87    68    17   311     1      66  ,
 12754    17    88    53    17   311     1     111  offset
 12755    17    88    59    17   311     1      60  )
 12756    17    88    60    17   311     1     102  ;
 12757    17    89     5    17   311     1      64  }
 12758    17    89     5    17   311     0     814  ENDMETHOD
 12759    17    89     5    17   312     0     815  STARTMETHOD
 12760    17    91     5    17   312     0      10  public
 12761    17    91    12    17   312     0     111  IntBuffer
 12762    17    91    22    17   312     0     111  asReadOnlyBuffer
 12763    17    91    38    17   312     0      59  (
 12764    17    91    39    17   312     0      60  )
 12765    17    91    41    17   312     0      63  {
 12766    17    93     9    17   312     0      19  return
 12767    17    93    16    17   312     0      15  new
 12768    17    93    20    17   312     0     111  ByteBufferAsIntBufferRB
 12769    17    93    43    17   312     0      59  (
 12770    17    93    44    17   312     0     111  bb
 12771    17    93    46    17   312     0      66  ,
 12772    17    94    50    17   312     1     111  this.markValue
 12773    17    94    64    17   312     1      59  (
 12774    17    94    65    17   312     1      60  )
 12775    17    94    66    17   312     1      66  ,
 12776    17    95    50    17   312     1     111  this.position
 12777    17    95    63    17   312     1      59  (
 12778    17    95    64    17   312     1      60  )
 12779    17    95    65    17   312     1      66  ,
 12780    17    96    50    17   312     1     111  this.limit
 12781    17    96    60    17   312     1      59  (
 12782    17    96    61    17   312     1      60  )
 12783    17    96    62    17   312     1      66  ,
 12784    17    97    50    17   312     1     111  this.capacity
 12785    17    97    63    17   312     1      59  (
 12786    17    97    64    17   312     1      60  )
 12787    17    97    65    17   312     1      66  ,
 12788    17    98    50    17   312     1     111  offset
 12789    17    98    56    17   312     1      60  )
 12790    17    98    57    17   312     1     102  ;
 12791    17   102     5    17   312     1      64  }
 12792    17   102     5    17   312     0     816  ENDMETHOD
 12793    17   102     5    17   313     0     817  STARTMETHOD
 12794    17   106     5    17   313     0      23  protected
 12795    17   106    15    17   313     0      36  int
 12796    17   106    19    17   313     0     111  ix
 12797    17   106    21    17   313     0      59  (
 12798    17   106    22    17   313     0      36  int
 12799    17   106    26    17   313     0     111  i
 12800    17   106    27    17   313     0      60  )
 12801    17   106    29    17   313     0      63  {
 12802    17   107     9    17   313     0      19  return
 12803    17   107    16    17   313     0      59  (
 12804    17   107    17    17   313     0     111  i
 12805    17   107    19    17   313     0      90  <<
 12806    17   107    22    17   313     0     112  2
 12807    17   107    23    17   313     0      60  )
 12808    17   107    25    17   313     0      74  +
 12809    17   107    27    17   313     0     111  offset
 12810    17   107    33    17   313     0     102  ;
 12811    17   108     5    17   313     0      64  }
 12812    17   108     5    17   313     0     818  ENDMETHOD
 12813    17   108     5    17   314     0     819  STARTMETHOD
 12814    17   110     5    17   314     0      10  public
 12815    17   110    12    17   314     0      36  int
 12816    17   110    16    17   314     0     111  get
 12817    17   110    19    17   314     0      59  (
 12818    17   110    20    17   314     0      60  )
 12819    17   110    22    17   314     0      63  {
 12820    17   111     9    17   314     0      19  return
 12821    17   111    16    17   314     0     111  Bits.getIntB
 12822    17   111    28    17   314     0      59  (
 12823    17   111    29    17   314     0     111  bb
 12824    17   111    31    17   314     0      66  ,
 12825    17   111    33    17   314     0     111  ix
 12826    17   111    35    17   314     0      59  (
 12827    17   111    36    17   314     0     111  nextGetIndex
 12828    17   111    48    17   314     0      59  (
 12829    17   111    49    17   314     0      60  )
 12830    17   111    50    17   314     0      60  )
 12831    17   111    51    17   314     0      60  )
 12832    17   111    52    17   314     0     102  ;
 12833    17   112     5    17   314     0      64  }
 12834    17   112     5    17   314     0     820  ENDMETHOD
 12835    17   112     5    17   315     0     821  STARTMETHOD
 12836    17   114     5    17   315     0      10  public
 12837    17   114    12    17   315     0      36  int
 12838    17   114    16    17   315     0     111  get
 12839    17   114    19    17   315     0      59  (
 12840    17   114    20    17   315     0      36  int
 12841    17   114    24    17   315     0     111  i
 12842    17   114    25    17   315     0      60  )
 12843    17   114    27    17   315     0      63  {
 12844    17   115     9    17   315     0      19  return
 12845    17   115    16    17   315     0     111  Bits.getIntB
 12846    17   115    28    17   315     0      59  (
 12847    17   115    29    17   315     0     111  bb
 12848    17   115    31    17   315     0      66  ,
 12849    17   115    33    17   315     0     111  ix
 12850    17   115    35    17   315     0      59  (
 12851    17   115    36    17   315     0     111  checkIndex
 12852    17   115    46    17   315     0      59  (
 12853    17   115    47    17   315     0     111  i
 12854    17   115    48    17   315     0      60  )
 12855    17   115    49    17   315     0      60  )
 12856    17   115    50    17   315     0      60  )
 12857    17   115    51    17   315     0     102  ;
 12858    17   116     5    17   315     0      64  }
 12859    17   116     5    17   315     0     822  ENDMETHOD
 12860    17   116     5    17   316     0     823  STARTMETHOD
 12861    17   120     5    17   316     0      10  public
 12862    17   120    12    17   316     0     111  IntBuffer
 12863    17   120    22    17   316     0     111  put
 12864    17   120    25    17   316     0      59  (
 12865    17   120    26    17   316     0      36  int
 12866    17   120    30    17   316     0     111  x
 12867    17   120    31    17   316     0      60  )
 12868    17   120    33    17   316     0      63  {
 12869    17   122     9    17   316     0     111  Bits.putIntB
 12870    17   122    21    17   316     0      59  (
 12871    17   122    22    17   316     0     111  bb
 12872    17   122    24    17   316     0      66  ,
 12873    17   122    26    17   316     0     111  ix
 12874    17   122    28    17   316     0      59  (
 12875    17   122    29    17   316     0     111  nextPutIndex
 12876    17   122    41    17   316     0      59  (
 12877    17   122    42    17   316     0      60  )
 12878    17   122    43    17   316     0      60  )
 12879    17   122    44    17   316     0      66  ,
 12880    17   122    46    17   316     0     111  x
 12881    17   122    47    17   316     0      60  )
 12882    17   122    48    17   316     0     102  ;
 12883    17   123     9    17   316     0      19  return
 12884    17   123    16    17   316     0      44  this
 12885    17   123    20    17   316     0     102  ;
 12886    17   127     5    17   316     0      64  }
 12887    17   127     5    17   316     0     824  ENDMETHOD
 12888    17   127     5    17   317     0     825  STARTMETHOD
 12889    17   129     5    17   317     0      10  public
 12890    17   129    12    17   317     0     111  IntBuffer
 12891    17   129    22    17   317     0     111  put
 12892    17   129    25    17   317     0      59  (
 12893    17   129    26    17   317     0      36  int
 12894    17   129    30    17   317     0     111  i
 12895    17   129    31    17   317     0      66  ,
 12896    17   129    33    17   317     0      36  int
 12897    17   129    37    17   317     0     111  x
 12898    17   129    38    17   317     0      60  )
 12899    17   129    40    17   317     0      63  {
 12900    17   131     9    17   317     0     111  Bits.putIntB
 12901    17   131    21    17   317     0      59  (
 12902    17   131    22    17   317     0     111  bb
 12903    17   131    24    17   317     0      66  ,
 12904    17   131    26    17   317     0     111  ix
 12905    17   131    28    17   317     0      59  (
 12906    17   131    29    17   317     0     111  checkIndex
 12907    17   131    39    17   317     0      59  (
 12908    17   131    40    17   317     0     111  i
 12909    17   131    41    17   317     0      60  )
 12910    17   131    42    17   317     0      60  )
 12911    17   131    43    17   317     0      66  ,
 12912    17   131    45    17   317     0     111  x
 12913    17   131    46    17   317     0      60  )
 12914    17   131    47    17   317     0     102  ;
 12915    17   132     9    17   317     0      19  return
 12916    17   132    16    17   317     0      44  this
 12917    17   132    20    17   317     0     102  ;
 12918    17   136     5    17   317     0      64  }
 12919    17   136     5    17   317     0     826  ENDMETHOD
 12920    17   136     5    17   318     0     827  STARTMETHOD
 12921    17   138     5    17   318     0      10  public
 12922    17   138    12    17   318     0     111  IntBuffer
 12923    17   138    22    17   318     0     111  compact
 12924    17   138    29    17   318     0      59  (
 12925    17   138    30    17   318     0      60  )
 12926    17   138    32    17   318     0      63  {
 12927    17   140     9    17   318     1      36  int
 12928    17   140    13    17   318     1     111  pos
 12929    17   140    17    17   318     1      67  =
 12930    17   140    19    17   318     1     111  position
 12931    17   140    27    17   318     1      59  (
 12932    17   140    28    17   318     1      60  )
 12933    17   140    29    17   318     1     102  ;
 12934    17   141     9    17   318     1      36  int
 12935    17   141    13    17   318     1     111  lim
 12936    17   141    17    17   318     1      67  =
 12937    17   141    19    17   318     1     111  limit
 12938    17   141    24    17   318     1      59  (
 12939    17   141    25    17   318     1      60  )
 12940    17   141    26    17   318     1     102  ;
 12941    17   142     9    17   318     0     111  assert
 12942    17   142    16    17   318     0      59  (
 12943    17   142    17    17   318     0     111  pos
 12944    17   142    21    17   318     0      92  <=
 12945    17   142    24    17   318     0     111  lim
 12946    17   142    27    17   318     0      60  )
 12947    17   142    28    17   318     0     102  ;
 12948    17   143     9    17   318     0      36  int
 12949    17   143    13    17   318     0     111  rem
 12950    17   143    17    17   318     0      67  =
 12951    17   143    19    17   318     0      59  (
 12952    17   143    20    17   318     0     111  pos
 12953    17   143    24    17   318     0      92  <=
 12954    17   143    27    17   318     0     111  lim
 12955    17   143    31    17   318     0      58  ?
 12956    17   143    33    17   318     0     111  lim
 12957    17   143    37    17   318     0      77  -
 12958    17   143    39    17   318     0     111  pos
 12959    17   143    43    17   318     0      65  :
 12960    17   143    45    17   318     0     112  0
 12961    17   143    46    17   318     0      60  )
 12962    17   143    47    17   318     0     102  ;
 12963    17   145     9    17   318     0     111  ByteBuffer
 12964    17   145    20    17   318     0     111  db
 12965    17   145    23    17   318     0      67  =
 12966    17   145    25    17   318     0     111  bb.duplicate
 12967    17   145    37    17   318     0      59  (
 12968    17   145    38    17   318     0      60  )
 12969    17   145    39    17   318     0     102  ;
 12970    17   146     9    17   318     0     111  db.limit
 12971    17   146    17    17   318     0      59  (
 12972    17   146    18    17   318     0     111  ix
 12973    17   146    20    17   318     0      59  (
 12974    17   146    21    17   318     0     111  lim
 12975    17   146    24    17   318     0      60  )
 12976    17   146    25    17   318     0      60  )
 12977    17   146    26    17   318     0     102  ;
 12978    17   147     9    17   318     0     111  db.position
 12979    17   147    20    17   318     0      59  (
 12980    17   147    21    17   318     0     111  ix
 12981    17   147    23    17   318     0      59  (
 12982    17   147    24    17   318     0     112  0
 12983    17   147    25    17   318     0      60  )
 12984    17   147    26    17   318     0      60  )
 12985    17   147    27    17   318     0     102  ;
 12986    17   148     9    17   318     0     111  ByteBuffer
 12987    17   148    20    17   318     0     111  sb
 12988    17   148    23    17   318     0      67  =
 12989    17   148    25    17   318     0     111  db.slice
 12990    17   148    33    17   318     0      59  (
 12991    17   148    34    17   318     0      60  )
 12992    17   148    35    17   318     0     102  ;
 12993    17   149     9    17   318     0     111  sb.position
 12994    17   149    20    17   318     0      59  (
 12995    17   149    21    17   318     0     111  pos
 12996    17   149    25    17   318     0      90  <<
 12997    17   149    28    17   318     0     112  2
 12998    17   149    29    17   318     0      60  )
 12999    17   149    30    17   318     0     102  ;
 13000    17   150     9    17   318     0     111  sb.compact
 13001    17   150    19    17   318     0      59  (
 13002    17   150    20    17   318     0      60  )
 13003    17   150    21    17   318     0     102  ;
 13004    17   151     9    17   318     0     111  position
 13005    17   151    17    17   318     0      59  (
 13006    17   151    18    17   318     0     111  rem
 13007    17   151    21    17   318     0      60  )
 13008    17   151    22    17   318     0     102  ;
 13009    17   152     9    17   318     0     111  limit
 13010    17   152    14    17   318     0      59  (
 13011    17   152    15    17   318     0     111  capacity
 13012    17   152    23    17   318     0      59  (
 13013    17   152    24    17   318     0      60  )
 13014    17   152    25    17   318     0      60  )
 13015    17   152    26    17   318     0     102  ;
 13016    17   153     9    17   318     0      19  return
 13017    17   153    16    17   318     0      44  this
 13018    17   153    20    17   318     0     102  ;
 13019    17   157     5    17   318     0      64  }
 13020    17   157     5    17   318     0     828  ENDMETHOD
 13021    17   157     5    17   319     0     829  STARTMETHOD
 13022    17   159     5    17   319     0      10  public
 13023    17   159    12    17   319     0      39  boolean
 13024    17   159    20    17   319     0     111  isDirect
 13025    17   159    28    17   319     0      59  (
 13026    17   159    29    17   319     0      60  )
 13027    17   159    31    17   319     0      63  {
 13028    17   160     9    17   319     0      19  return
 13029    17   160    16    17   319     0     111  bb.isDirect
 13030    17   160    27    17   319     0      59  (
 13031    17   160    28    17   319     0      60  )
 13032    17   160    29    17   319     1     102  ;
 13033    17   161     5    17   319     1      64  }
 13034    17   161     5    17   319     0     830  ENDMETHOD
 13035    17   161     5    17   320     0     831  STARTMETHOD
 13036    17   163     5    17   320     0      10  public
 13037    17   163    12    17   320     0      39  boolean
 13038    17   163    20    17   320     0     111  isReadOnly
 13039    17   163    30    17   320     0      59  (
 13040    17   163    31    17   320     0      60  )
 13041    17   163    33    17   320     0      63  {
 13042    17   164     9    17   320     0      19  return
 13043    17   164    16    17   320     0      43  false
 13044    17   164    21    17   320     1     102  ;
 13045    17   165     5    17   320     1      64  }
 13046    17   165     5    17   320     0     832  ENDMETHOD
 13047    17   165     5    17   321     0     833  STARTMETHOD
 13048    17   207     5    17   321     0      10  public
 13049    17   207    12    17   321     0     111  ByteOrder
 13050    17   207    22    17   321     0     111  order
 13051    17   207    27    17   321     0      59  (
 13052    17   207    28    17   321     0      60  )
 13053    17   207    30    17   321     0      63  {
 13054    17   209     9    17   321     0      19  return
 13055    17   209    16    17   321     0     111  ByteOrder.BIG_ENDIAN
 13056    17   209    36    17   321     1     102  ;
 13057    17   214     5    17   321     1      64  }
 13058    17   214     5    17   321     0     834  ENDMETHOD
 13059    17   216     1    17    -1     0      64  }
 13060    17   216     1    17    -1     1     835  ENDCLASS
 13061    17   216     1    -1    -1     1     836  ENDFILE C:\javasrc\java\nio\ByteBufferAsIntBufferB.java
 13062    18     1     1    -1    -1     1     837  STARTFILE C:\javasrc\java\nio\ByteBufferAsIntBufferL.java
 13063    18    28     1    -1    -1     0       5  package
 13064    18    28     9    -1    -1     0     111  java.nio
 13065    18    28    17    -1    -1     0     102  ;
 13066    18    31     1    18    -1     0     838  STARTCLASS
 13067    18    31     1    18    -1     0      24  class
 13068    18    31     7    18    -1     0     111  ByteBufferAsIntBufferL
 13069    18    32     5    18    -1     0      38  extends
 13070    18    32    13    18    -1     0     111  IntBuffer
 13071    18    33     1    18    -1     0      63  {
 13072    18    37     5    18    -1     0      23  protected
 13073    18    37    15    18    -1     0       6  final
 13074    18    37    21    18    -1     0     111  ByteBuffer
 13075    18    37    32    18    -1     0     111  bb
 13076    18    37    34    18    -1     0     102  ;
 13077    18    38     5    18    -1     0      23  protected
 13078    18    38    15    18    -1     0       6  final
 13079    18    38    21    18    -1     0      36  int
 13080    18    38    25    18    -1     0     111  offset
 13081    18    38    31    18    -1     0     102  ;
 13082    18    38    31    18   322     0     839  STARTMETHOD
 13083    18    42     5    18   322     0     111  ByteBufferAsIntBufferL
 13084    18    42    27    18   322     0      59  (
 13085    18    42    28    18   322     0     111  ByteBuffer
 13086    18    42    39    18   322     0     111  bb
 13087    18    42    41    18   322     0      60  )
 13088    18    42    43    18   322     0      63  {
 13089    18    44     9    18   322     0      27  super
 13090    18    44    14    18   322     0      59  (
 13091    18    44    15    18   322     0      77  -
 13092    18    44    16    18   322     0     112  1
 13093    18    44    17    18   322     0      66  ,
 13094    18    44    19    18   322     0     112  0
 13095    18    44    20    18   322     0      66  ,
 13096    18    45    15    18   322     0     111  bb.remaining
 13097    18    45    27    18   322     0      59  (
 13098    18    45    28    18   322     0      60  )
 13099    18    45    30    18   322     0      84  >>
 13100    18    45    33    18   322     0     112  2
 13101    18    45    34    18   322     0      66  ,
 13102    18    46    15    18   322     0     111  bb.remaining
 13103    18    46    27    18   322     0      59  (
 13104    18    46    28    18   322     0      60  )
 13105    18    46    30    18   322     0      84  >>
 13106    18    46    33    18   322     0     112  2
 13107    18    46    34    18   322     0      60  )
 13108    18    46    35    18   322     0     102  ;
 13109    18    47     9    18   322     0     111  this.bb
 13110    18    47    17    18   322     0      67  =
 13111    18    47    19    18   322     0     111  bb
 13112    18    47    21    18   322     0     102  ;
 13113    18    49     9    18   322     0      36  int
 13114    18    49    13    18   322     0     111  cap
 13115    18    49    17    18   322     0      67  =
 13116    18    49    19    18   322     0     111  this.capacity
 13117    18    49    32    18   322     0      59  (
 13118    18    49    33    18   322     0      60  )
 13119    18    49    34    18   322     0     102  ;
 13120    18    50     9    18   322     0     111  this.limit
 13121    18    50    19    18   322     0      59  (
 13122    18    50    20    18   322     0     111  cap
 13123    18    50    23    18   322     0      60  )
 13124    18    50    24    18   322     0     102  ;
 13125    18    51     9    18   322     0      36  int
 13126    18    51    13    18   322     0     111  pos
 13127    18    51    17    18   322     0      67  =
 13128    18    51    19    18   322     0     111  this.position
 13129    18    51    32    18   322     0      59  (
 13130    18    51    33    18   322     0      60  )
 13131    18    51    34    18   322     0     102  ;
 13132    18    52     9    18   322     0     111  assert
 13133    18    52    16    18   322     0      59  (
 13134    18    52    17    18   322     0     111  pos
 13135    18    52    21    18   322     0      92  <=
 13136    18    52    24    18   322     0     111  cap
 13137    18    52    27    18   322     0      60  )
 13138    18    52    28    18   322     0     102  ;
 13139    18    53     9    18   322     0     111  offset
 13140    18    53    16    18   322     0      67  =
 13141    18    53    18    18   322     0     111  pos
 13142    18    53    21    18   322     0     102  ;
 13143    18    57     5    18   322     0      64  }
 13144    18    57     5    18   322     0     840  ENDMETHOD
 13145    18    57     5    18   323     0     841  STARTMETHOD
 13146    18    59     5    18   323     0     111  ByteBufferAsIntBufferL
 13147    18    59    27    18   323     0      59  (
 13148    18    59    28    18   323     0     111  ByteBuffer
 13149    18    59    39    18   323     0     111  bb
 13150    18    59    41    18   323     0      66  ,
 13151    18    60    38    18   323     0      36  int
 13152    18    60    42    18   323     0     111  mark
 13153    18    60    46    18   323     0      66  ,
 13154    18    60    48    18   323     0      36  int
 13155    18    60    52    18   323     0     111  pos
 13156    18    60    55    18   323     0      66  ,
 13157    18    60    57    18   323     0      36  int
 13158    18    60    61    18   323     0     111  lim
 13159    18    60    64    18   323     0      66  ,
 13160    18    60    66    18   323     0      36  int
 13161    18    60    70    18   323     0     111  cap
 13162    18    60    73    18   323     0      66  ,
 13163    18    61    38    18   323     0      36  int
 13164    18    61    42    18   323     0     111  off
 13165    18    61    45    18   323     0      60  )
 13166    18    62     5    18   323     0      63  {
 13167    18    64     9    18   323     0      27  super
 13168    18    64    14    18   323     0      59  (
 13169    18    64    15    18   323     0     111  mark
 13170    18    64    19    18   323     0      66  ,
 13171    18    64    21    18   323     0     111  pos
 13172    18    64    24    18   323     0      66  ,
 13173    18    64    26    18   323     0     111  lim
 13174    18    64    29    18   323     0      66  ,
 13175    18    64    31    18   323     0     111  cap
 13176    18    64    34    18   323     0      60  )
 13177    18    64    35    18   323     0     102  ;
 13178    18    65     9    18   323     1     111  this.bb
 13179    18    65    17    18   323     1      67  =
 13180    18    65    19    18   323     1     111  bb
 13181    18    65    21    18   323     1     102  ;
 13182    18    66     9    18   323     1     111  offset
 13183    18    66    16    18   323     1      67  =
 13184    18    66    18    18   323     1     111  off
 13185    18    66    21    18   323     1     102  ;
 13186    18    70     5    18   323     0      64  }
 13187    18    70     5    18   323     0     842  ENDMETHOD
 13188    18    70     5    18   324     0     843  STARTMETHOD
 13189    18    72     5    18   324     0      10  public
 13190    18    72    12    18   324     0     111  IntBuffer
 13191    18    72    22    18   324     0     111  slice
 13192    18    72    27    18   324     0      59  (
 13193    18    72    28    18   324     0      60  )
 13194    18    72    30    18   324     0      63  {
 13195    18    73     9    18   324     1      36  int
 13196    18    73    13    18   324     1     111  pos
 13197    18    73    17    18   324     1      67  =
 13198    18    73    19    18   324     1     111  this.position
 13199    18    73    32    18   324     1      59  (
 13200    18    73    33    18   324     1      60  )
 13201    18    73    34    18   324     1     102  ;
 13202    18    74     9    18   324     1      36  int
 13203    18    74    13    18   324     1     111  lim
 13204    18    74    17    18   324     1      67  =
 13205    18    74    19    18   324     1     111  this.limit
 13206    18    74    29    18   324     1      59  (
 13207    18    74    30    18   324     1      60  )
 13208    18    74    31    18   324     1     102  ;
 13209    18    75     9    18   324     0     111  assert
 13210    18    75    16    18   324     0      59  (
 13211    18    75    17    18   324     0     111  pos
 13212    18    75    21    18   324     0      92  <=
 13213    18    75    24    18   324     0     111  lim
 13214    18    75    27    18   324     0      60  )
 13215    18    75    28    18   324     0     102  ;
 13216    18    76     9    18   324     0      36  int
 13217    18    76    13    18   324     0     111  rem
 13218    18    76    17    18   324     0      67  =
 13219    18    76    19    18   324     0      59  (
 13220    18    76    20    18   324     0     111  pos
 13221    18    76    24    18   324     0      92  <=
 13222    18    76    27    18   324     0     111  lim
 13223    18    76    31    18   324     0      58  ?
 13224    18    76    33    18   324     0     111  lim
 13225    18    76    37    18   324     0      77  -
 13226    18    76    39    18   324     0     111  pos
 13227    18    76    43    18   324     0      65  :
 13228    18    76    45    18   324     0     112  0
 13229    18    76    46    18   324     0      60  )
 13230    18    76    47    18   324     0     102  ;
 13231    18    77     9    18   324     0      36  int
 13232    18    77    13    18   324     0     111  off
 13233    18    77    17    18   324     0      67  =
 13234    18    77    19    18   324     0      59  (
 13235    18    77    20    18   324     0     111  pos
 13236    18    77    24    18   324     0      90  <<
 13237    18    77    27    18   324     0     112  2
 13238    18    77    28    18   324     0      60  )
 13239    18    77    30    18   324     0      74  +
 13240    18    77    32    18   324     0     111  offset
 13241    18    77    38    18   324     0     102  ;
 13242    18    78     9    18   324     0     111  assert
 13243    18    78    16    18   324     0      59  (
 13244    18    78    17    18   324     0     111  off
 13245    18    78    21    18   324     0      88  >=
 13246    18    78    24    18   324     0     112  0
 13247    18    78    25    18   324     0      60  )
 13248    18    78    26    18   324     0     102  ;
 13249    18    79     9    18   324     0      19  return
 13250    18    79    16    18   324     0      15  new
 13251    18    79    20    18   324     0     111  ByteBufferAsIntBufferL
 13252    18    79    42    18   324     0      59  (
 13253    18    79    43    18   324     0     111  bb
 13254    18    79    45    18   324     0      66  ,
 13255    18    79    47    18   324     0      77  -
 13256    18    79    48    18   324     0     112  1
 13257    18    79    49    18   324     0      66  ,
 13258    18    79    51    18   324     0     112  0
 13259    18    79    52    18   324     0      66  ,
 13260    18    79    54    18   324     0     111  rem
 13261    18    79    57    18   324     0      66  ,
 13262    18    79    59    18   324     0     111  rem
 13263    18    79    62    18   324     1      66  ,
 13264    18    79    64    18   324     1     111  off
 13265    18    79    67    18   324     1      60  )
 13266    18    79    68    18   324     1     102  ;
 13267    18    80     5    18   324     1      64  }
 13268    18    80     5    18   324     0     844  ENDMETHOD
 13269    18    80     5    18   325     0     845  STARTMETHOD
 13270    18    82     5    18   325     0      10  public
 13271    18    82    12    18   325     0     111  IntBuffer
 13272    18    82    22    18   325     0     111  duplicate
 13273    18    82    31    18   325     0      59  (
 13274    18    82    32    18   325     0      60  )
 13275    18    82    34    18   325     0      63  {
 13276    18    83     9    18   325     0      19  return
 13277    18    83    16    18   325     0      15  new
 13278    18    83    20    18   325     0     111  ByteBufferAsIntBufferL
 13279    18    83    42    18   325     0      59  (
 13280    18    83    43    18   325     0     111  bb
 13281    18    83    45    18   325     0      66  ,
 13282    18    84    53    18   325     1     111  this.markValue
 13283    18    84    67    18   325     1      59  (
 13284    18    84    68    18   325     1      60  )
 13285    18    84    69    18   325     1      66  ,
 13286    18    85    53    18   325     1     111  this.position
 13287    18    85    66    18   325     1      59  (
 13288    18    85    67    18   325     1      60  )
 13289    18    85    68    18   325     1      66  ,
 13290    18    86    53    18   325     1     111  this.limit
 13291    18    86    63    18   325     1      59  (
 13292    18    86    64    18   325     1      60  )
 13293    18    86    65    18   325     1      66  ,
 13294    18    87    53    18   325     1     111  this.capacity
 13295    18    87    66    18   325     1      59  (
 13296    18    87    67    18   325     1      60  )
 13297    18    87    68    18   325     1      66  ,
 13298    18    88    53    18   325     1     111  offset
 13299    18    88    59    18   325     1      60  )
 13300    18    88    60    18   325     1     102  ;
 13301    18    89     5    18   325     1      64  }
 13302    18    89     5    18   325     0     846  ENDMETHOD
 13303    18    89     5    18   326     0     847  STARTMETHOD
 13304    18    91     5    18   326     0      10  public
 13305    18    91    12    18   326     0     111  IntBuffer
 13306    18    91    22    18   326     0     111  asReadOnlyBuffer
 13307    18    91    38    18   326     0      59  (
 13308    18    91    39    18   326     0      60  )
 13309    18    91    41    18   326     0      63  {
 13310    18    93     9    18   326     0      19  return
 13311    18    93    16    18   326     0      15  new
 13312    18    93    20    18   326     0     111  ByteBufferAsIntBufferRL
 13313    18    93    43    18   326     0      59  (
 13314    18    93    44    18   326     0     111  bb
 13315    18    93    46    18   326     0      66  ,
 13316    18    94    50    18   326     1     111  this.markValue
 13317    18    94    64    18   326     1      59  (
 13318    18    94    65    18   326     1      60  )
 13319    18    94    66    18   326     1      66  ,
 13320    18    95    50    18   326     1     111  this.position
 13321    18    95    63    18   326     1      59  (
 13322    18    95    64    18   326     1      60  )
 13323    18    95    65    18   326     1      66  ,
 13324    18    96    50    18   326     1     111  this.limit
 13325    18    96    60    18   326     1      59  (
 13326    18    96    61    18   326     1      60  )
 13327    18    96    62    18   326     1      66  ,
 13328    18    97    50    18   326     1     111  this.capacity
 13329    18    97    63    18   326     1      59  (
 13330    18    97    64    18   326     1      60  )
 13331    18    97    65    18   326     1      66  ,
 13332    18    98    50    18   326     1     111  offset
 13333    18    98    56    18   326     1      60  )
 13334    18    98    57    18   326     1     102  ;
 13335    18   102     5    18   326     1      64  }
 13336    18   102     5    18   326     0     848  ENDMETHOD
 13337    18   102     5    18   327     0     849  STARTMETHOD
 13338    18   106     5    18   327     0      23  protected
 13339    18   106    15    18   327     0      36  int
 13340    18   106    19    18   327     0     111  ix
 13341    18   106    21    18   327     0      59  (
 13342    18   106    22    18   327     0      36  int
 13343    18   106    26    18   327     0     111  i
 13344    18   106    27    18   327     0      60  )
 13345    18   106    29    18   327     0      63  {
 13346    18   107     9    18   327     0      19  return
 13347    18   107    16    18   327     0      59  (
 13348    18   107    17    18   327     0     111  i
 13349    18   107    19    18   327     0      90  <<
 13350    18   107    22    18   327     0     112  2
 13351    18   107    23    18   327     0      60  )
 13352    18   107    25    18   327     0      74  +
 13353    18   107    27    18   327     0     111  offset
 13354    18   107    33    18   327     0     102  ;
 13355    18   108     5    18   327     0      64  }
 13356    18   108     5    18   327     0     850  ENDMETHOD
 13357    18   108     5    18   328     0     851  STARTMETHOD
 13358    18   110     5    18   328     0      10  public
 13359    18   110    12    18   328     0      36  int
 13360    18   110    16    18   328     0     111  get
 13361    18   110    19    18   328     0      59  (
 13362    18   110    20    18   328     0      60  )
 13363    18   110    22    18   328     0      63  {
 13364    18   111     9    18   328     0      19  return
 13365    18   111    16    18   328     0     111  Bits.getIntL
 13366    18   111    28    18   328     0      59  (
 13367    18   111    29    18   328     0     111  bb
 13368    18   111    31    18   328     0      66  ,
 13369    18   111    33    18   328     0     111  ix
 13370    18   111    35    18   328     0      59  (
 13371    18   111    36    18   328     0     111  nextGetIndex
 13372    18   111    48    18   328     0      59  (
 13373    18   111    49    18   328     0      60  )
 13374    18   111    50    18   328     0      60  )
 13375    18   111    51    18   328     0      60  )
 13376    18   111    52    18   328     0     102  ;
 13377    18   112     5    18   328     0      64  }
 13378    18   112     5    18   328     0     852  ENDMETHOD
 13379    18   112     5    18   329     0     853  STARTMETHOD
 13380    18   114     5    18   329     0      10  public
 13381    18   114    12    18   329     0      36  int
 13382    18   114    16    18   329     0     111  get
 13383    18   114    19    18   329     0      59  (
 13384    18   114    20    18   329     0      36  int
 13385    18   114    24    18   329     0     111  i
 13386    18   114    25    18   329     0      60  )
 13387    18   114    27    18   329     0      63  {
 13388    18   115     9    18   329     0      19  return
 13389    18   115    16    18   329     0     111  Bits.getIntL
 13390    18   115    28    18   329     0      59  (
 13391    18   115    29    18   329     0     111  bb
 13392    18   115    31    18   329     0      66  ,
 13393    18   115    33    18   329     0     111  ix
 13394    18   115    35    18   329     0      59  (
 13395    18   115    36    18   329     0     111  checkIndex
 13396    18   115    46    18   329     0      59  (
 13397    18   115    47    18   329     0     111  i
 13398    18   115    48    18   329     0      60  )
 13399    18   115    49    18   329     0      60  )
 13400    18   115    50    18   329     0      60  )
 13401    18   115    51    18   329     0     102  ;
 13402    18   116     5    18   329     0      64  }
 13403    18   116     5    18   329     0     854  ENDMETHOD
 13404    18   116     5    18   330     0     855  STARTMETHOD
 13405    18   120     5    18   330     0      10  public
 13406    18   120    12    18   330     0     111  IntBuffer
 13407    18   120    22    18   330     0     111  put
 13408    18   120    25    18   330     0      59  (
 13409    18   120    26    18   330     0      36  int
 13410    18   120    30    18   330     0     111  x
 13411    18   120    31    18   330     0      60  )
 13412    18   120    33    18   330     0      63  {
 13413    18   122     9    18   330     0     111  Bits.putIntL
 13414    18   122    21    18   330     0      59  (
 13415    18   122    22    18   330     0     111  bb
 13416    18   122    24    18   330     0      66  ,
 13417    18   122    26    18   330     0     111  ix
 13418    18   122    28    18   330     0      59  (
 13419    18   122    29    18   330     0     111  nextPutIndex
 13420    18   122    41    18   330     0      59  (
 13421    18   122    42    18   330     0      60  )
 13422    18   122    43    18   330     0      60  )
 13423    18   122    44    18   330     0      66  ,
 13424    18   122    46    18   330     0     111  x
 13425    18   122    47    18   330     0      60  )
 13426    18   122    48    18   330     0     102  ;
 13427    18   123     9    18   330     0      19  return
 13428    18   123    16    18   330     0      44  this
 13429    18   123    20    18   330     0     102  ;
 13430    18   127     5    18   330     0      64  }
 13431    18   127     5    18   330     0     856  ENDMETHOD
 13432    18   127     5    18   331     0     857  STARTMETHOD
 13433    18   129     5    18   331     0      10  public
 13434    18   129    12    18   331     0     111  IntBuffer
 13435    18   129    22    18   331     0     111  put
 13436    18   129    25    18   331     0      59  (
 13437    18   129    26    18   331     0      36  int
 13438    18   129    30    18   331     0     111  i
 13439    18   129    31    18   331     0      66  ,
 13440    18   129    33    18   331     0      36  int
 13441    18   129    37    18   331     0     111  x
 13442    18   129    38    18   331     0      60  )
 13443    18   129    40    18   331     0      63  {
 13444    18   131     9    18   331     0     111  Bits.putIntL
 13445    18   131    21    18   331     0      59  (
 13446    18   131    22    18   331     0     111  bb
 13447    18   131    24    18   331     0      66  ,
 13448    18   131    26    18   331     0     111  ix
 13449    18   131    28    18   331     0      59  (
 13450    18   131    29    18   331     0     111  checkIndex
 13451    18   131    39    18   331     0      59  (
 13452    18   131    40    18   331     0     111  i
 13453    18   131    41    18   331     0      60  )
 13454    18   131    42    18   331     0      60  )
 13455    18   131    43    18   331     0      66  ,
 13456    18   131    45    18   331     0     111  x
 13457    18   131    46    18   331     0      60  )
 13458    18   131    47    18   331     0     102  ;
 13459    18   132     9    18   331     0      19  return
 13460    18   132    16    18   331     0      44  this
 13461    18   132    20    18   331     0     102  ;
 13462    18   136     5    18   331     0      64  }
 13463    18   136     5    18   331     0     858  ENDMETHOD
 13464    18   136     5    18   332     0     859  STARTMETHOD
 13465    18   138     5    18   332     0      10  public
 13466    18   138    12    18   332     0     111  IntBuffer
 13467    18   138    22    18   332     0     111  compact
 13468    18   138    29    18   332     0      59  (
 13469    18   138    30    18   332     0      60  )
 13470    18   138    32    18   332     0      63  {
 13471    18   140     9    18   332     1      36  int
 13472    18   140    13    18   332     1     111  pos
 13473    18   140    17    18   332     1      67  =
 13474    18   140    19    18   332     1     111  position
 13475    18   140    27    18   332     1      59  (
 13476    18   140    28    18   332     1      60  )
 13477    18   140    29    18   332     1     102  ;
 13478    18   141     9    18   332     1      36  int
 13479    18   141    13    18   332     1     111  lim
 13480    18   141    17    18   332     1      67  =
 13481    18   141    19    18   332     1     111  limit
 13482    18   141    24    18   332     1      59  (
 13483    18   141    25    18   332     1      60  )
 13484    18   141    26    18   332     1     102  ;
 13485    18   142     9    18   332     0     111  assert
 13486    18   142    16    18   332     0      59  (
 13487    18   142    17    18   332     0     111  pos
 13488    18   142    21    18   332     0      92  <=
 13489    18   142    24    18   332     0     111  lim
 13490    18   142    27    18   332     0      60  )
 13491    18   142    28    18   332     0     102  ;
 13492    18   143     9    18   332     0      36  int
 13493    18   143    13    18   332     0     111  rem
 13494    18   143    17    18   332     0      67  =
 13495    18   143    19    18   332     0      59  (
 13496    18   143    20    18   332     0     111  pos
 13497    18   143    24    18   332     0      92  <=
 13498    18   143    27    18   332     0     111  lim
 13499    18   143    31    18   332     0      58  ?
 13500    18   143    33    18   332     0     111  lim
 13501    18   143    37    18   332     0      77  -
 13502    18   143    39    18   332     0     111  pos
 13503    18   143    43    18   332     0      65  :
 13504    18   143    45    18   332     0     112  0
 13505    18   143    46    18   332     0      60  )
 13506    18   143    47    18   332     0     102  ;
 13507    18   145     9    18   332     0     111  ByteBuffer
 13508    18   145    20    18   332     0     111  db
 13509    18   145    23    18   332     0      67  =
 13510    18   145    25    18   332     0     111  bb.duplicate
 13511    18   145    37    18   332     0      59  (
 13512    18   145    38    18   332     0      60  )
 13513    18   145    39    18   332     0     102  ;
 13514    18   146     9    18   332     0     111  db.limit
 13515    18   146    17    18   332     0      59  (
 13516    18   146    18    18   332     0     111  ix
 13517    18   146    20    18   332     0      59  (
 13518    18   146    21    18   332     0     111  lim
 13519    18   146    24    18   332     0      60  )
 13520    18   146    25    18   332     0      60  )
 13521    18   146    26    18   332     0     102  ;
 13522    18   147     9    18   332     0     111  db.position
 13523    18   147    20    18   332     0      59  (
 13524    18   147    21    18   332     0     111  ix
 13525    18   147    23    18   332     0      59  (
 13526    18   147    24    18   332     0     112  0
 13527    18   147    25    18   332     0      60  )
 13528    18   147    26    18   332     0      60  )
 13529    18   147    27    18   332     0     102  ;
 13530    18   148     9    18   332     0     111  ByteBuffer
 13531    18   148    20    18   332     0     111  sb
 13532    18   148    23    18   332     0      67  =
 13533    18   148    25    18   332     0     111  db.slice
 13534    18   148    33    18   332     0      59  (
 13535    18   148    34    18   332     0      60  )
 13536    18   148    35    18   332     0     102  ;
 13537    18   149     9    18   332     0     111  sb.position
 13538    18   149    20    18   332     0      59  (
 13539    18   149    21    18   332     0     111  pos
 13540    18   149    25    18   332     0      90  <<
 13541    18   149    28    18   332     0     112  2
 13542    18   149    29    18   332     0      60  )
 13543    18   149    30    18   332     0     102  ;
 13544    18   150     9    18   332     0     111  sb.compact
 13545    18   150    19    18   332     0      59  (
 13546    18   150    20    18   332     0      60  )
 13547    18   150    21    18   332     0     102  ;
 13548    18   151     9    18   332     0     111  position
 13549    18   151    17    18   332     0      59  (
 13550    18   151    18    18   332     0     111  rem
 13551    18   151    21    18   332     0      60  )
 13552    18   151    22    18   332     0     102  ;
 13553    18   152     9    18   332     0     111  limit
 13554    18   152    14    18   332     0      59  (
 13555    18   152    15    18   332     0     111  capacity
 13556    18   152    23    18   332     0      59  (
 13557    18   152    24    18   332     0      60  )
 13558    18   152    25    18   332     0      60  )
 13559    18   152    26    18   332     0     102  ;
 13560    18   153     9    18   332     0      19  return
 13561    18   153    16    18   332     0      44  this
 13562    18   153    20    18   332     0     102  ;
 13563    18   157     5    18   332     0      64  }
 13564    18   157     5    18   332     0     860  ENDMETHOD
 13565    18   157     5    18   333     0     861  STARTMETHOD
 13566    18   159     5    18   333     0      10  public
 13567    18   159    12    18   333     0      39  boolean
 13568    18   159    20    18   333     0     111  isDirect
 13569    18   159    28    18   333     0      59  (
 13570    18   159    29    18   333     0      60  )
 13571    18   159    31    18   333     0      63  {
 13572    18   160     9    18   333     0      19  return
 13573    18   160    16    18   333     0     111  bb.isDirect
 13574    18   160    27    18   333     0      59  (
 13575    18   160    28    18   333     0      60  )
 13576    18   160    29    18   333     1     102  ;
 13577    18   161     5    18   333     1      64  }
 13578    18   161     5    18   333     0     862  ENDMETHOD
 13579    18   161     5    18   334     0     863  STARTMETHOD
 13580    18   163     5    18   334     0      10  public
 13581    18   163    12    18   334     0      39  boolean
 13582    18   163    20    18   334     0     111  isReadOnly
 13583    18   163    30    18   334     0      59  (
 13584    18   163    31    18   334     0      60  )
 13585    18   163    33    18   334     0      63  {
 13586    18   164     9    18   334     0      19  return
 13587    18   164    16    18   334     0      43  false
 13588    18   164    21    18   334     1     102  ;
 13589    18   165     5    18   334     1      64  }
 13590    18   165     5    18   334     0     864  ENDMETHOD
 13591    18   165     5    18   335     0     865  STARTMETHOD
 13592    18   207     5    18   335     0      10  public
 13593    18   207    12    18   335     0     111  ByteOrder
 13594    18   207    22    18   335     0     111  order
 13595    18   207    27    18   335     0      59  (
 13596    18   207    28    18   335     0      60  )
 13597    18   207    30    18   335     0      63  {
 13598    18   212     9    18   335     0      19  return
 13599    18   212    16    18   335     0     111  ByteOrder.LITTLE_ENDIAN
 13600    18   212    39    18   335     1     102  ;
 13601    18   214     5    18   335     1      64  }
 13602    18   214     5    18   335     0     866  ENDMETHOD
 13603    18   216     1    18    -1     0      64  }
 13604    18   216     1    18    -1     1     867  ENDCLASS
 13605    18   216     1    -1    -1     1     868  ENDFILE C:\javasrc\java\nio\ByteBufferAsIntBufferL.java
 13606    19     1     1    -1    -1     1     869  STARTFILE C:\javasrc\java\nio\ByteBufferAsIntBufferRB.java
 13607    19    28     1    -1    -1     0       5  package
 13608    19    28     9    -1    -1     0     111  java.nio
 13609    19    28    17    -1    -1     0     102  ;
 13610    19    31     1    19    -1     0     870  STARTCLASS
 13611    19    31     1    19    -1     0      24  class
 13612    19    31     7    19    -1     0     111  ByteBufferAsIntBufferRB
 13613    19    32     5    19    -1     0      38  extends
 13614    19    32    13    19    -1     0     111  ByteBufferAsIntBufferB
 13615    19    33     1    19    -1     0      63  {
 13616    19    33     1    19   336     0     871  STARTMETHOD
 13617    19    42     5    19   336     0     111  ByteBufferAsIntBufferRB
 13618    19    42    28    19   336     0      59  (
 13619    19    42    29    19   336     0     111  ByteBuffer
 13620    19    42    40    19   336     0     111  bb
 13621    19    42    42    19   336     0      60  )
 13622    19    42    44    19   336     0      63  {
 13623    19    55     9    19   336     0      27  super
 13624    19    55    14    19   336     0      59  (
 13625    19    55    15    19   336     0     111  bb
 13626    19    55    17    19   336     0      60  )
 13627    19    55    18    19   336     0     102  ;
 13628    19    57     5    19   336     0      64  }
 13629    19    57     5    19   336     0     872  ENDMETHOD
 13630    19    57     5    19   337     0     873  STARTMETHOD
 13631    19    59     5    19   337     0     111  ByteBufferAsIntBufferRB
 13632    19    59    28    19   337     0      59  (
 13633    19    59    29    19   337     0     111  ByteBuffer
 13634    19    59    40    19   337     0     111  bb
 13635    19    59    42    19   337     0      66  ,
 13636    19    60    38    19   337     0      36  int
 13637    19    60    42    19   337     0     111  mark
 13638    19    60    46    19   337     0      66  ,
 13639    19    60    48    19   337     0      36  int
 13640    19    60    52    19   337     0     111  pos
 13641    19    60    55    19   337     0      66  ,
 13642    19    60    57    19   337     0      36  int
 13643    19    60    61    19   337     0     111  lim
 13644    19    60    64    19   337     0      66  ,
 13645    19    60    66    19   337     0      36  int
 13646    19    60    70    19   337     0     111  cap
 13647    19    60    73    19   337     0      66  ,
 13648    19    61    38    19   337     0      36  int
 13649    19    61    42    19   337     0     111  off
 13650    19    61    45    19   337     0      60  )
 13651    19    62     5    19   337     0      63  {
 13652    19    68     9    19   337     0      27  super
 13653    19    68    14    19   337     0      59  (
 13654    19    68    15    19   337     0     111  bb
 13655    19    68    17    19   337     0      66  ,
 13656    19    68    19    19   337     0     111  mark
 13657    19    68    23    19   337     0      66  ,
 13658    19    68    25    19   337     0     111  pos
 13659    19    68    28    19   337     0      66  ,
 13660    19    68    30    19   337     0     111  lim
 13661    19    68    33    19   337     0      66  ,
 13662    19    68    35    19   337     0     111  cap
 13663    19    68    38    19   337     0      66  ,
 13664    19    68    40    19   337     0     111  off
 13665    19    68    43    19   337     0      60  )
 13666    19    68    44    19   337     0     102  ;
 13667    19    70     5    19   337     0      64  }
 13668    19    70     5    19   337     0     874  ENDMETHOD
 13669    19    70     5    19   338     0     875  STARTMETHOD
 13670    19    72     5    19   338     0      10  public
 13671    19    72    12    19   338     0     111  IntBuffer
 13672    19    72    22    19   338     0     111  slice
 13673    19    72    27    19   338     0      59  (
 13674    19    72    28    19   338     0      60  )
 13675    19    72    30    19   338     0      63  {
 13676    19    73     9    19   338     1      36  int
 13677    19    73    13    19   338     1     111  pos
 13678    19    73    17    19   338     1      67  =
 13679    19    73    19    19   338     1     111  this.position
 13680    19    73    32    19   338     1      59  (
 13681    19    73    33    19   338     1      60  )
 13682    19    73    34    19   338     1     102  ;
 13683    19    74     9    19   338     1      36  int
 13684    19    74    13    19   338     1     111  lim
 13685    19    74    17    19   338     1      67  =
 13686    19    74    19    19   338     1     111  this.limit
 13687    19    74    29    19   338     1      59  (
 13688    19    74    30    19   338     1      60  )
 13689    19    74    31    19   338     1     102  ;
 13690    19    75     9    19   338     0     111  assert
 13691    19    75    16    19   338     0      59  (
 13692    19    75    17    19   338     0     111  pos
 13693    19    75    21    19   338     0      92  <=
 13694    19    75    24    19   338     0     111  lim
 13695    19    75    27    19   338     0      60  )
 13696    19    75    28    19   338     0     102  ;
 13697    19    76     9    19   338     0      36  int
 13698    19    76    13    19   338     0     111  rem
 13699    19    76    17    19   338     0      67  =
 13700    19    76    19    19   338     0      59  (
 13701    19    76    20    19   338     0     111  pos
 13702    19    76    24    19   338     0      92  <=
 13703    19    76    27    19   338     0     111  lim
 13704    19    76    31    19   338     0      58  ?
 13705    19    76    33    19   338     0     111  lim
 13706    19    76    37    19   338     0      77  -
 13707    19    76    39    19   338     0     111  pos
 13708    19    76    43    19   338     0      65  :
 13709    19    76    45    19   338     0     112  0
 13710    19    76    46    19   338     0      60  )
 13711    19    76    47    19   338     0     102  ;
 13712    19    77     9    19   338     0      36  int
 13713    19    77    13    19   338     0     111  off
 13714    19    77    17    19   338     0      67  =
 13715    19    77    19    19   338     0      59  (
 13716    19    77    20    19   338     0     111  pos
 13717    19    77    24    19   338     0      90  <<
 13718    19    77    27    19   338     0     112  2
 13719    19    77    28    19   338     0      60  )
 13720    19    77    30    19   338     0      74  +
 13721    19    77    32    19   338     0     111  offset
 13722    19    77    38    19   338     0     102  ;
 13723    19    78     9    19   338     0     111  assert
 13724    19    78    16    19   338     0      59  (
 13725    19    78    17    19   338     0     111  off
 13726    19    78    21    19   338     0      88  >=
 13727    19    78    24    19   338     0     112  0
 13728    19    78    25    19   338     0      60  )
 13729    19    78    26    19   338     0     102  ;
 13730    19    79     9    19   338     0      19  return
 13731    19    79    16    19   338     0      15  new
 13732    19    79    20    19   338     0     111  ByteBufferAsIntBufferRB
 13733    19    79    43    19   338     0      59  (
 13734    19    79    44    19   338     0     111  bb
 13735    19    79    46    19   338     0      66  ,
 13736    19    79    48    19   338     0      77  -
 13737    19    79    49    19   338     0     112  1
 13738    19    79    50    19   338     0      66  ,
 13739    19    79    52    19   338     0     112  0
 13740    19    79    53    19   338     0      66  ,
 13741    19    79    55    19   338     0     111  rem
 13742    19    79    58    19   338     0      66  ,
 13743    19    79    60    19   338     0     111  rem
 13744    19    79    63    19   338     0      66  ,
 13745    19    79    65    19   338     0     111  off
 13746    19    79    68    19   338     0      60  )
 13747    19    79    69    19   338     0     102  ;
 13748    19    80     5    19   338     0      64  }
 13749    19    80     5    19   338     0     876  ENDMETHOD
 13750    19    80     5    19   339     0     877  STARTMETHOD
 13751    19    82     5    19   339     0      10  public
 13752    19    82    12    19   339     0     111  IntBuffer
 13753    19    82    22    19   339     0     111  duplicate
 13754    19    82    31    19   339     0      59  (
 13755    19    82    32    19   339     0      60  )
 13756    19    82    34    19   339     0      63  {
 13757    19    83     9    19   339     0      19  return
 13758    19    83    16    19   339     0      15  new
 13759    19    83    20    19   339     0     111  ByteBufferAsIntBufferRB
 13760    19    83    43    19   339     0      59  (
 13761    19    83    44    19   339     0     111  bb
 13762    19    83    46    19   339     0      66  ,
 13763    19    84    53    19   339     1     111  this.markValue
 13764    19    84    67    19   339     1      59  (
 13765    19    84    68    19   339     1      60  )
 13766    19    84    69    19   339     1      66  ,
 13767    19    85    53    19   339     1     111  this.position
 13768    19    85    66    19   339     1      59  (
 13769    19    85    67    19   339     1      60  )
 13770    19    85    68    19   339     1      66  ,
 13771    19    86    53    19   339     1     111  this.limit
 13772    19    86    63    19   339     1      59  (
 13773    19    86    64    19   339     1      60  )
 13774    19    86    65    19   339     1      66  ,
 13775    19    87    53    19   339     1     111  this.capacity
 13776    19    87    66    19   339     1      59  (
 13777    19    87    67    19   339     1      60  )
 13778    19    87    68    19   339     1      66  ,
 13779    19    88    53    19   339     0     111  offset
 13780    19    88    59    19   339     0      60  )
 13781    19    88    60    19   339     0     102  ;
 13782    19    89     5    19   339     0      64  }
 13783    19    89     5    19   339     0     878  ENDMETHOD
 13784    19    89     5    19   340     0     879  STARTMETHOD
 13785    19    91     5    19   340     0      10  public
 13786    19    91    12    19   340     0     111  IntBuffer
 13787    19    91    22    19   340     0     111  asReadOnlyBuffer
 13788    19    91    38    19   340     0      59  (
 13789    19    91    39    19   340     0      60  )
 13790    19    91    41    19   340     0      63  {
 13791    19   100     9    19   340     0      19  return
 13792    19   100    16    19   340     0     111  duplicate
 13793    19   100    25    19   340     0      59  (
 13794    19   100    26    19   340     0      60  )
 13795    19   100    27    19   340     0     102  ;
 13796    19   102     5    19   340     0      64  }
 13797    19   102     5    19   340     0     880  ENDMETHOD
 13798    19   102     5    19   341     0     881  STARTMETHOD
 13799    19   120     5    19   341     0      10  public
 13800    19   120    12    19   341     0     111  IntBuffer
 13801    19   120    22    19   341     0     111  put
 13802    19   120    25    19   341     0      59  (
 13803    19   120    26    19   341     0      36  int
 13804    19   120    30    19   341     0     111  x
 13805    19   120    31    19   341     0      60  )
 13806    19   120    33    19   341     0      63  {
 13807    19   125     9    19   341     0      20  throw
 13808    19   125    15    19   341     0      15  new
 13809    19   125    19    19   341     0     111  ReadOnlyBufferException
 13810    19   125    42    19   341     0      59  (
 13811    19   125    43    19   341     0      60  )
 13812    19   125    44    19   341     0     102  ;
 13813    19   127     5    19   341     0      64  }
 13814    19   127     5    19   341     0     882  ENDMETHOD
 13815    19   127     5    19   342     0     883  STARTMETHOD
 13816    19   129     5    19   342     0      10  public
 13817    19   129    12    19   342     0     111  IntBuffer
 13818    19   129    22    19   342     0     111  put
 13819    19   129    25    19   342     0      59  (
 13820    19   129    26    19   342     0      36  int
 13821    19   129    30    19   342     0     111  i
 13822    19   129    31    19   342     0      66  ,
 13823    19   129    33    19   342     0      36  int
 13824    19   129    37    19   342     0     111  x
 13825    19   129    38    19   342     0      60  )
 13826    19   129    40    19   342     0      63  {
 13827    19   134     9    19   342     0      20  throw
 13828    19   134    15    19   342     0      15  new
 13829    19   134    19    19   342     0     111  ReadOnlyBufferException
 13830    19   134    42    19   342     0      59  (
 13831    19   134    43    19   342     0      60  )
 13832    19   134    44    19   342     0     102  ;
 13833    19   136     5    19   342     0      64  }
 13834    19   136     5    19   342     0     884  ENDMETHOD
 13835    19   136     5    19   343     0     885  STARTMETHOD
 13836    19   138     5    19   343     0      10  public
 13837    19   138    12    19   343     0     111  IntBuffer
 13838    19   138    22    19   343     0     111  compact
 13839    19   138    29    19   343     0      59  (
 13840    19   138    30    19   343     0      60  )
 13841    19   138    32    19   343     0      63  {
 13842    19   155     9    19   343     0      20  throw
 13843    19   155    15    19   343     0      15  new
 13844    19   155    19    19   343     0     111  ReadOnlyBufferException
 13845    19   155    42    19   343     0      59  (
 13846    19   155    43    19   343     0      60  )
 13847    19   155    44    19   343     0     102  ;
 13848    19   157     5    19   343     0      64  }
 13849    19   157     5    19   343     0     886  ENDMETHOD
 13850    19   157     5    19   344     0     887  STARTMETHOD
 13851    19   159     5    19   344     0      10  public
 13852    19   159    12    19   344     0      39  boolean
 13853    19   159    20    19   344     0     111  isDirect
 13854    19   159    28    19   344     0      59  (
 13855    19   159    29    19   344     0      60  )
 13856    19   159    31    19   344     0      63  {
 13857    19   160     9    19   344     0      19  return
 13858    19   160    16    19   344     0     111  bb.isDirect
 13859    19   160    27    19   344     0      59  (
 13860    19   160    28    19   344     0      60  )
 13861    19   160    29    19   344     1     102  ;
 13862    19   161     5    19   344     1      64  }
 13863    19   161     5    19   344     0     888  ENDMETHOD
 13864    19   161     5    19   345     0     889  STARTMETHOD
 13865    19   163     5    19   345     0      10  public
 13866    19   163    12    19   345     0      39  boolean
 13867    19   163    20    19   345     0     111  isReadOnly
 13868    19   163    30    19   345     0      59  (
 13869    19   163    31    19   345     0      60  )
 13870    19   163    33    19   345     0      63  {
 13871    19   164     9    19   345     0      19  return
 13872    19   164    16    19   345     0      52  true
 13873    19   164    20    19   345     1     102  ;
 13874    19   165     5    19   345     1      64  }
 13875    19   165     5    19   345     0     890  ENDMETHOD
 13876    19   165     5    19   346     0     891  STARTMETHOD
 13877    19   207     5    19   346     0      10  public
 13878    19   207    12    19   346     0     111  ByteOrder
 13879    19   207    22    19   346     0     111  order
 13880    19   207    27    19   346     0      59  (
 13881    19   207    28    19   346     0      60  )
 13882    19   207    30    19   346     0      63  {
 13883    19   209     9    19   346     0      19  return
 13884    19   209    16    19   346     0     111  ByteOrder.BIG_ENDIAN
 13885    19   209    36    19   346     1     102  ;
 13886    19   214     5    19   346     1      64  }
 13887    19   214     5    19   346     0     892  ENDMETHOD
 13888    19   216     1    19    -1     0      64  }
 13889    19   216     1    19    -1     1     893  ENDCLASS
 13890    19   216     1    -1    -1     1     894  ENDFILE C:\javasrc\java\nio\ByteBufferAsIntBufferRB.java
 13891    20     1     1    -1    -1     1     895  STARTFILE C:\javasrc\java\nio\ByteBufferAsIntBufferRL.java
 13892    20    28     1    -1    -1     0       5  package
 13893    20    28     9    -1    -1     0     111  java.nio
 13894    20    28    17    -1    -1     0     102  ;
 13895    20    31     1    20    -1     0     896  STARTCLASS
 13896    20    31     1    20    -1     0      24  class
 13897    20    31     7    20    -1     0     111  ByteBufferAsIntBufferRL
 13898    20    32     5    20    -1     0      38  extends
 13899    20    32    13    20    -1     0     111  ByteBufferAsIntBufferL
 13900    20    33     1    20    -1     0      63  {
 13901    20    33     1    20   347     0     897  STARTMETHOD
 13902    20    42     5    20   347     0     111  ByteBufferAsIntBufferRL
 13903    20    42    28    20   347     0      59  (
 13904    20    42    29    20   347     0     111  ByteBuffer
 13905    20    42    40    20   347     0     111  bb
 13906    20    42    42    20   347     0      60  )
 13907    20    42    44    20   347     0      63  {
 13908    20    55     9    20   347     0      27  super
 13909    20    55    14    20   347     0      59  (
 13910    20    55    15    20   347     0     111  bb
 13911    20    55    17    20   347     0      60  )
 13912    20    55    18    20   347     0     102  ;
 13913    20    57     5    20   347     0      64  }
 13914    20    57     5    20   347     0     898  ENDMETHOD
 13915    20    57     5    20   348     0     899  STARTMETHOD
 13916    20    59     5    20   348     0     111  ByteBufferAsIntBufferRL
 13917    20    59    28    20   348     0      59  (
 13918    20    59    29    20   348     0     111  ByteBuffer
 13919    20    59    40    20   348     0     111  bb
 13920    20    59    42    20   348     0      66  ,
 13921    20    60    38    20   348     0      36  int
 13922    20    60    42    20   348     0     111  mark
 13923    20    60    46    20   348     0      66  ,
 13924    20    60    48    20   348     0      36  int
 13925    20    60    52    20   348     0     111  pos
 13926    20    60    55    20   348     0      66  ,
 13927    20    60    57    20   348     0      36  int
 13928    20    60    61    20   348     0     111  lim
 13929    20    60    64    20   348     0      66  ,
 13930    20    60    66    20   348     0      36  int
 13931    20    60    70    20   348     0     111  cap
 13932    20    60    73    20   348     0      66  ,
 13933    20    61    38    20   348     0      36  int
 13934    20    61    42    20   348     0     111  off
 13935    20    61    45    20   348     0      60  )
 13936    20    62     5    20   348     0      63  {
 13937    20    68     9    20   348     0      27  super
 13938    20    68    14    20   348     0      59  (
 13939    20    68    15    20   348     0     111  bb
 13940    20    68    17    20   348     0      66  ,
 13941    20    68    19    20   348     0     111  mark
 13942    20    68    23    20   348     0      66  ,
 13943    20    68    25    20   348     0     111  pos
 13944    20    68    28    20   348     0      66  ,
 13945    20    68    30    20   348     0     111  lim
 13946    20    68    33    20   348     0      66  ,
 13947    20    68    35    20   348     0     111  cap
 13948    20    68    38    20   348     0      66  ,
 13949    20    68    40    20   348     0     111  off
 13950    20    68    43    20   348     0      60  )
 13951    20    68    44    20   348     0     102  ;
 13952    20    70     5    20   348     0      64  }
 13953    20    70     5    20   348     0     900  ENDMETHOD
 13954    20    70     5    20   349     0     901  STARTMETHOD
 13955    20    72     5    20   349     0      10  public
 13956    20    72    12    20   349     0     111  IntBuffer
 13957    20    72    22    20   349     0     111  slice
 13958    20    72    27    20   349     0      59  (
 13959    20    72    28    20   349     0      60  )
 13960    20    72    30    20   349     0      63  {
 13961    20    73     9    20   349     1      36  int
 13962    20    73    13    20   349     1     111  pos
 13963    20    73    17    20   349     1      67  =
 13964    20    73    19    20   349     1     111  this.position
 13965    20    73    32    20   349     1      59  (
 13966    20    73    33    20   349     1      60  )
 13967    20    73    34    20   349     1     102  ;
 13968    20    74     9    20   349     1      36  int
 13969    20    74    13    20   349     1     111  lim
 13970    20    74    17    20   349     1      67  =
 13971    20    74    19    20   349     1     111  this.limit
 13972    20    74    29    20   349     1      59  (
 13973    20    74    30    20   349     1      60  )
 13974    20    74    31    20   349     1     102  ;
 13975    20    75     9    20   349     0     111  assert
 13976    20    75    16    20   349     0      59  (
 13977    20    75    17    20   349     0     111  pos
 13978    20    75    21    20   349     0      92  <=
 13979    20    75    24    20   349     0     111  lim
 13980    20    75    27    20   349     0      60  )
 13981    20    75    28    20   349     0     102  ;
 13982    20    76     9    20   349     0      36  int
 13983    20    76    13    20   349     0     111  rem
 13984    20    76    17    20   349     0      67  =
 13985    20    76    19    20   349     0      59  (
 13986    20    76    20    20   349     0     111  pos
 13987    20    76    24    20   349     0      92  <=
 13988    20    76    27    20   349     0     111  lim
 13989    20    76    31    20   349     0      58  ?
 13990    20    76    33    20   349     0     111  lim
 13991    20    76    37    20   349     0      77  -
 13992    20    76    39    20   349     0     111  pos
 13993    20    76    43    20   349     0      65  :
 13994    20    76    45    20   349     0     112  0
 13995    20    76    46    20   349     0      60  )
 13996    20    76    47    20   349     0     102  ;
 13997    20    77     9    20   349     0      36  int
 13998    20    77    13    20   349     0     111  off
 13999    20    77    17    20   349     0      67  =
 14000    20    77    19    20   349     0      59  (
 14001    20    77    20    20   349     0     111  pos
 14002    20    77    24    20   349     0      90  <<
 14003    20    77    27    20   349     0     112  2
 14004    20    77    28    20   349     0      60  )
 14005    20    77    30    20   349     0      74  +
 14006    20    77    32    20   349     0     111  offset
 14007    20    77    38    20   349     0     102  ;
 14008    20    78     9    20   349     0     111  assert
 14009    20    78    16    20   349     0      59  (
 14010    20    78    17    20   349     0     111  off
 14011    20    78    21    20   349     0      88  >=
 14012    20    78    24    20   349     0     112  0
 14013    20    78    25    20   349     0      60  )
 14014    20    78    26    20   349     0     102  ;
 14015    20    79     9    20   349     0      19  return
 14016    20    79    16    20   349     0      15  new
 14017    20    79    20    20   349     0     111  ByteBufferAsIntBufferRL
 14018    20    79    43    20   349     0      59  (
 14019    20    79    44    20   349     0     111  bb
 14020    20    79    46    20   349     0      66  ,
 14021    20    79    48    20   349     0      77  -
 14022    20    79    49    20   349     0     112  1
 14023    20    79    50    20   349     0      66  ,
 14024    20    79    52    20   349     0     112  0
 14025    20    79    53    20   349     0      66  ,
 14026    20    79    55    20   349     0     111  rem
 14027    20    79    58    20   349     0      66  ,
 14028    20    79    60    20   349     0     111  rem
 14029    20    79    63    20   349     0      66  ,
 14030    20    79    65    20   349     0     111  off
 14031    20    79    68    20   349     0      60  )
 14032    20    79    69    20   349     0     102  ;
 14033    20    80     5    20   349     0      64  }
 14034    20    80     5    20   349     0     902  ENDMETHOD
 14035    20    80     5    20   350     0     903  STARTMETHOD
 14036    20    82     5    20   350     0      10  public
 14037    20    82    12    20   350     0     111  IntBuffer
 14038    20    82    22    20   350     0     111  duplicate
 14039    20    82    31    20   350     0      59  (
 14040    20    82    32    20   350     0      60  )
 14041    20    82    34    20   350     0      63  {
 14042    20    83     9    20   350     0      19  return
 14043    20    83    16    20   350     0      15  new
 14044    20    83    20    20   350     0     111  ByteBufferAsIntBufferRL
 14045    20    83    43    20   350     0      59  (
 14046    20    83    44    20   350     0     111  bb
 14047    20    83    46    20   350     0      66  ,
 14048    20    84    53    20   350     1     111  this.markValue
 14049    20    84    67    20   350     1      59  (
 14050    20    84    68    20   350     1      60  )
 14051    20    84    69    20   350     1      66  ,
 14052    20    85    53    20   350     1     111  this.position
 14053    20    85    66    20   350     1      59  (
 14054    20    85    67    20   350     1      60  )
 14055    20    85    68    20   350     1      66  ,
 14056    20    86    53    20   350     1     111  this.limit
 14057    20    86    63    20   350     1      59  (
 14058    20    86    64    20   350     1      60  )
 14059    20    86    65    20   350     1      66  ,
 14060    20    87    53    20   350     1     111  this.capacity
 14061    20    87    66    20   350     1      59  (
 14062    20    87    67    20   350     1      60  )
 14063    20    87    68    20   350     1      66  ,
 14064    20    88    53    20   350     0     111  offset
 14065    20    88    59    20   350     0      60  )
 14066    20    88    60    20   350     0     102  ;
 14067    20    89     5    20   350     0      64  }
 14068    20    89     5    20   350     0     904  ENDMETHOD
 14069    20    89     5    20   351     0     905  STARTMETHOD
 14070    20    91     5    20   351     0      10  public
 14071    20    91    12    20   351     0     111  IntBuffer
 14072    20    91    22    20   351     0     111  asReadOnlyBuffer
 14073    20    91    38    20   351     0      59  (
 14074    20    91    39    20   351     0      60  )
 14075    20    91    41    20   351     0      63  {
 14076    20   100     9    20   351     0      19  return
 14077    20   100    16    20   351     0     111  duplicate
 14078    20   100    25    20   351     0      59  (
 14079    20   100    26    20   351     0      60  )
 14080    20   100    27    20   351     0     102  ;
 14081    20   102     5    20   351     0      64  }
 14082    20   102     5    20   351     0     906  ENDMETHOD
 14083    20   102     5    20   352     0     907  STARTMETHOD
 14084    20   120     5    20   352     0      10  public
 14085    20   120    12    20   352     0     111  IntBuffer
 14086    20   120    22    20   352     0     111  put
 14087    20   120    25    20   352     0      59  (
 14088    20   120    26    20   352     0      36  int
 14089    20   120    30    20   352     0     111  x
 14090    20   120    31    20   352     0      60  )
 14091    20   120    33    20   352     0      63  {
 14092    20   125     9    20   352     0      20  throw
 14093    20   125    15    20   352     0      15  new
 14094    20   125    19    20   352     0     111  ReadOnlyBufferException
 14095    20   125    42    20   352     0      59  (
 14096    20   125    43    20   352     0      60  )
 14097    20   125    44    20   352     0     102  ;
 14098    20   127     5    20   352     0      64  }
 14099    20   127     5    20   352     0     908  ENDMETHOD
 14100    20   127     5    20   353     0     909  STARTMETHOD
 14101    20   129     5    20   353     0      10  public
 14102    20   129    12    20   353     0     111  IntBuffer
 14103    20   129    22    20   353     0     111  put
 14104    20   129    25    20   353     0      59  (
 14105    20   129    26    20   353     0      36  int
 14106    20   129    30    20   353     0     111  i
 14107    20   129    31    20   353     0      66  ,
 14108    20   129    33    20   353     0      36  int
 14109    20   129    37    20   353     0     111  x
 14110    20   129    38    20   353     0      60  )
 14111    20   129    40    20   353     0      63  {
 14112    20   134     9    20   353     0      20  throw
 14113    20   134    15    20   353     0      15  new
 14114    20   134    19    20   353     0     111  ReadOnlyBufferException
 14115    20   134    42    20   353     0      59  (
 14116    20   134    43    20   353     0      60  )
 14117    20   134    44    20   353     0     102  ;
 14118    20   136     5    20   353     0      64  }
 14119    20   136     5    20   353     0     910  ENDMETHOD
 14120    20   136     5    20   354     0     911  STARTMETHOD
 14121    20   138     5    20   354     0      10  public
 14122    20   138    12    20   354     0     111  IntBuffer
 14123    20   138    22    20   354     0     111  compact
 14124    20   138    29    20   354     0      59  (
 14125    20   138    30    20   354     0      60  )
 14126    20   138    32    20   354     0      63  {
 14127    20   155     9    20   354     0      20  throw
 14128    20   155    15    20   354     0      15  new
 14129    20   155    19    20   354     0     111  ReadOnlyBufferException
 14130    20   155    42    20   354     0      59  (
 14131    20   155    43    20   354     0      60  )
 14132    20   155    44    20   354     0     102  ;
 14133    20   157     5    20   354     0      64  }
 14134    20   157     5    20   354     0     912  ENDMETHOD
 14135    20   157     5    20   355     0     913  STARTMETHOD
 14136    20   159     5    20   355     0      10  public
 14137    20   159    12    20   355     0      39  boolean
 14138    20   159    20    20   355     0     111  isDirect
 14139    20   159    28    20   355     0      59  (
 14140    20   159    29    20   355     0      60  )
 14141    20   159    31    20   355     0      63  {
 14142    20   160     9    20   355     0      19  return
 14143    20   160    16    20   355     0     111  bb.isDirect
 14144    20   160    27    20   355     0      59  (
 14145    20   160    28    20   355     0      60  )
 14146    20   160    29    20   355     1     102  ;
 14147    20   161     5    20   355     1      64  }
 14148    20   161     5    20   355     0     914  ENDMETHOD
 14149    20   161     5    20   356     0     915  STARTMETHOD
 14150    20   163     5    20   356     0      10  public
 14151    20   163    12    20   356     0      39  boolean
 14152    20   163    20    20   356     0     111  isReadOnly
 14153    20   163    30    20   356     0      59  (
 14154    20   163    31    20   356     0      60  )
 14155    20   163    33    20   356     0      63  {
 14156    20   164     9    20   356     0      19  return
 14157    20   164    16    20   356     0      52  true
 14158    20   164    20    20   356     1     102  ;
 14159    20   165     5    20   356     1      64  }
 14160    20   165     5    20   356     0     916  ENDMETHOD
 14161    20   165     5    20   357     0     917  STARTMETHOD
 14162    20   207     5    20   357     0      10  public
 14163    20   207    12    20   357     0     111  ByteOrder
 14164    20   207    22    20   357     0     111  order
 14165    20   207    27    20   357     0      59  (
 14166    20   207    28    20   357     0      60  )
 14167    20   207    30    20   357     0      63  {
 14168    20   212     9    20   357     0      19  return
 14169    20   212    16    20   357     0     111  ByteOrder.LITTLE_ENDIAN
 14170    20   212    39    20   357     1     102  ;
 14171    20   214     5    20   357     1      64  }
 14172    20   214     5    20   357     0     918  ENDMETHOD
 14173    20   216     1    20    -1     0      64  }
 14174    20   216     1    20    -1     1     919  ENDCLASS
 14175    20   216     1    -1    -1     1     920  ENDFILE C:\javasrc\java\nio\ByteBufferAsIntBufferRL.java
 14176    21     1     1    -1    -1     1     921  STARTFILE C:\javasrc\java\nio\ByteBufferAsLongBufferB.java
 14177    21    28     1    -1    -1     0       5  package
 14178    21    28     9    -1    -1     0     111  java.nio
 14179    21    28    17    -1    -1     0     102  ;
 14180    21    31     1    21    -1     0     922  STARTCLASS
 14181    21    31     1    21    -1     0      24  class
 14182    21    31     7    21    -1     0     111  ByteBufferAsLongBufferB
 14183    21    32     5    21    -1     0      38  extends
 14184    21    32    13    21    -1     0     111  LongBuffer
 14185    21    33     1    21    -1     0      63  {
 14186    21    37     5    21    -1     0      23  protected
 14187    21    37    15    21    -1     0       6  final
 14188    21    37    21    21    -1     0     111  ByteBuffer
 14189    21    37    32    21    -1     0     111  bb
 14190    21    37    34    21    -1     0     102  ;
 14191    21    38     5    21    -1     0      23  protected
 14192    21    38    15    21    -1     0       6  final
 14193    21    38    21    21    -1     0      36  int
 14194    21    38    25    21    -1     0     111  offset
 14195    21    38    31    21    -1     0     102  ;
 14196    21    38    31    21   358     0     923  STARTMETHOD
 14197    21    42     5    21   358     0     111  ByteBufferAsLongBufferB
 14198    21    42    28    21   358     0      59  (
 14199    21    42    29    21   358     0     111  ByteBuffer
 14200    21    42    40    21   358     0     111  bb
 14201    21    42    42    21   358     0      60  )
 14202    21    42    44    21   358     0      63  {
 14203    21    44     9    21   358     0      27  super
 14204    21    44    14    21   358     0      59  (
 14205    21    44    15    21   358     0      77  -
 14206    21    44    16    21   358     0     112  1
 14207    21    44    17    21   358     0      66  ,
 14208    21    44    19    21   358     0     112  0
 14209    21    44    20    21   358     0      66  ,
 14210    21    45    15    21   358     0     111  bb.remaining
 14211    21    45    27    21   358     0      59  (
 14212    21    45    28    21   358     0      60  )
 14213    21    45    30    21   358     0      84  >>
 14214    21    45    33    21   358     0     112  3
 14215    21    45    34    21   358     0      66  ,
 14216    21    46    15    21   358     0     111  bb.remaining
 14217    21    46    27    21   358     0      59  (
 14218    21    46    28    21   358     0      60  )
 14219    21    46    30    21   358     0      84  >>
 14220    21    46    33    21   358     0     112  3
 14221    21    46    34    21   358     0      60  )
 14222    21    46    35    21   358     0     102  ;
 14223    21    47     9    21   358     0     111  this.bb
 14224    21    47    17    21   358     0      67  =
 14225    21    47    19    21   358     0     111  bb
 14226    21    47    21    21   358     0     102  ;
 14227    21    49     9    21   358     0      36  int
 14228    21    49    13    21   358     0     111  cap
 14229    21    49    17    21   358     0      67  =
 14230    21    49    19    21   358     0     111  this.capacity
 14231    21    49    32    21   358     0      59  (
 14232    21    49    33    21   358     0      60  )
 14233    21    49    34    21   358     0     102  ;
 14234    21    50     9    21   358     0     111  this.limit
 14235    21    50    19    21   358     0      59  (
 14236    21    50    20    21   358     0     111  cap
 14237    21    50    23    21   358     0      60  )
 14238    21    50    24    21   358     0     102  ;
 14239    21    51     9    21   358     0      36  int
 14240    21    51    13    21   358     0     111  pos
 14241    21    51    17    21   358     0      67  =
 14242    21    51    19    21   358     0     111  this.position
 14243    21    51    32    21   358     0      59  (
 14244    21    51    33    21   358     0      60  )
 14245    21    51    34    21   358     0     102  ;
 14246    21    52     9    21   358     0     111  assert
 14247    21    52    16    21   358     0      59  (
 14248    21    52    17    21   358     0     111  pos
 14249    21    52    21    21   358     0      92  <=
 14250    21    52    24    21   358     0     111  cap
 14251    21    52    27    21   358     0      60  )
 14252    21    52    28    21   358     0     102  ;
 14253    21    53     9    21   358     0     111  offset
 14254    21    53    16    21   358     0      67  =
 14255    21    53    18    21   358     0     111  pos
 14256    21    53    21    21   358     0     102  ;
 14257    21    57     5    21   358     0      64  }
 14258    21    57     5    21   358     0     924  ENDMETHOD
 14259    21    57     5    21   359     0     925  STARTMETHOD
 14260    21    59     5    21   359     0     111  ByteBufferAsLongBufferB
 14261    21    59    28    21   359     0      59  (
 14262    21    59    29    21   359     0     111  ByteBuffer
 14263    21    59    40    21   359     0     111  bb
 14264    21    59    42    21   359     0      66  ,
 14265    21    60    38    21   359     0      36  int
 14266    21    60    42    21   359     0     111  mark
 14267    21    60    46    21   359     0      66  ,
 14268    21    60    48    21   359     0      36  int
 14269    21    60    52    21   359     0     111  pos
 14270    21    60    55    21   359     0      66  ,
 14271    21    60    57    21   359     0      36  int
 14272    21    60    61    21   359     0     111  lim
 14273    21    60    64    21   359     0      66  ,
 14274    21    60    66    21   359     0      36  int
 14275    21    60    70    21   359     0     111  cap
 14276    21    60    73    21   359     0      66  ,
 14277    21    61    38    21   359     0      36  int
 14278    21    61    42    21   359     0     111  off
 14279    21    61    45    21   359     0      60  )
 14280    21    62     5    21   359     0      63  {
 14281    21    64     9    21   359     0      27  super
 14282    21    64    14    21   359     0      59  (
 14283    21    64    15    21   359     0     111  mark
 14284    21    64    19    21   359     0      66  ,
 14285    21    64    21    21   359     0     111  pos
 14286    21    64    24    21   359     0      66  ,
 14287    21    64    26    21   359     0     111  lim
 14288    21    64    29    21   359     0      66  ,
 14289    21    64    31    21   359     0     111  cap
 14290    21    64    34    21   359     0      60  )
 14291    21    64    35    21   359     0     102  ;
 14292    21    65     9    21   359     1     111  this.bb
 14293    21    65    17    21   359     1      67  =
 14294    21    65    19    21   359     1     111  bb
 14295    21    65    21    21   359     1     102  ;
 14296    21    66     9    21   359     1     111  offset
 14297    21    66    16    21   359     1      67  =
 14298    21    66    18    21   359     1     111  off
 14299    21    66    21    21   359     1     102  ;
 14300    21    70     5    21   359     0      64  }
 14301    21    70     5    21   359     0     926  ENDMETHOD
 14302    21    70     5    21   360     0     927  STARTMETHOD
 14303    21    72     5    21   360     0      10  public
 14304    21    72    12    21   360     0     111  LongBuffer
 14305    21    72    23    21   360     0     111  slice
 14306    21    72    28    21   360     0      59  (
 14307    21    72    29    21   360     0      60  )
 14308    21    72    31    21   360     0      63  {
 14309    21    73     9    21   360     1      36  int
 14310    21    73    13    21   360     1     111  pos
 14311    21    73    17    21   360     1      67  =
 14312    21    73    19    21   360     1     111  this.position
 14313    21    73    32    21   360     1      59  (
 14314    21    73    33    21   360     1      60  )
 14315    21    73    34    21   360     1     102  ;
 14316    21    74     9    21   360     1      36  int
 14317    21    74    13    21   360     1     111  lim
 14318    21    74    17    21   360     1      67  =
 14319    21    74    19    21   360     1     111  this.limit
 14320    21    74    29    21   360     1      59  (
 14321    21    74    30    21   360     1      60  )
 14322    21    74    31    21   360     1     102  ;
 14323    21    75     9    21   360     0     111  assert
 14324    21    75    16    21   360     0      59  (
 14325    21    75    17    21   360     0     111  pos
 14326    21    75    21    21   360     0      92  <=
 14327    21    75    24    21   360     0     111  lim
 14328    21    75    27    21   360     0      60  )
 14329    21    75    28    21   360     0     102  ;
 14330    21    76     9    21   360     0      36  int
 14331    21    76    13    21   360     0     111  rem
 14332    21    76    17    21   360     0      67  =
 14333    21    76    19    21   360     0      59  (
 14334    21    76    20    21   360     0     111  pos
 14335    21    76    24    21   360     0      92  <=
 14336    21    76    27    21   360     0     111  lim
 14337    21    76    31    21   360     0      58  ?
 14338    21    76    33    21   360     0     111  lim
 14339    21    76    37    21   360     0      77  -
 14340    21    76    39    21   360     0     111  pos
 14341    21    76    43    21   360     0      65  :
 14342    21    76    45    21   360     0     112  0
 14343    21    76    46    21   360     0      60  )
 14344    21    76    47    21   360     0     102  ;
 14345    21    77     9    21   360     0      36  int
 14346    21    77    13    21   360     0     111  off
 14347    21    77    17    21   360     0      67  =
 14348    21    77    19    21   360     0      59  (
 14349    21    77    20    21   360     0     111  pos
 14350    21    77    24    21   360     0      90  <<
 14351    21    77    27    21   360     0     112  3
 14352    21    77    28    21   360     0      60  )
 14353    21    77    30    21   360     0      74  +
 14354    21    77    32    21   360     0     111  offset
 14355    21    77    38    21   360     0     102  ;
 14356    21    78     9    21   360     0     111  assert
 14357    21    78    16    21   360     0      59  (
 14358    21    78    17    21   360     0     111  off
 14359    21    78    21    21   360     0      88  >=
 14360    21    78    24    21   360     0     112  0
 14361    21    78    25    21   360     0      60  )
 14362    21    78    26    21   360     0     102  ;
 14363    21    79     9    21   360     0      19  return
 14364    21    79    16    21   360     0      15  new
 14365    21    79    20    21   360     0     111  ByteBufferAsLongBufferB
 14366    21    79    43    21   360     0      59  (
 14367    21    79    44    21   360     0     111  bb
 14368    21    79    46    21   360     0      66  ,
 14369    21    79    48    21   360     0      77  -
 14370    21    79    49    21   360     0     112  1
 14371    21    79    50    21   360     0      66  ,
 14372    21    79    52    21   360     0     112  0
 14373    21    79    53    21   360     0      66  ,
 14374    21    79    55    21   360     0     111  rem
 14375    21    79    58    21   360     0      66  ,
 14376    21    79    60    21   360     0     111  rem
 14377    21    79    63    21   360     1      66  ,
 14378    21    79    65    21   360     1     111  off
 14379    21    79    68    21   360     1      60  )
 14380    21    79    69    21   360     1     102  ;
 14381    21    80     5    21   360     1      64  }
 14382    21    80     5    21   360     0     928  ENDMETHOD
 14383    21    80     5    21   361     0     929  STARTMETHOD
 14384    21    82     5    21   361     0      10  public
 14385    21    82    12    21   361     0     111  LongBuffer
 14386    21    82    23    21   361     0     111  duplicate
 14387    21    82    32    21   361     0      59  (
 14388    21    82    33    21   361     0      60  )
 14389    21    82    35    21   361     0      63  {
 14390    21    83     9    21   361     0      19  return
 14391    21    83    16    21   361     0      15  new
 14392    21    83    20    21   361     0     111  ByteBufferAsLongBufferB
 14393    21    83    43    21   361     0      59  (
 14394    21    83    44    21   361     0     111  bb
 14395    21    83    46    21   361     0      66  ,
 14396    21    84    53    21   361     1     111  this.markValue
 14397    21    84    67    21   361     1      59  (
 14398    21    84    68    21   361     1      60  )
 14399    21    84    69    21   361     1      66  ,
 14400    21    85    53    21   361     1     111  this.position
 14401    21    85    66    21   361     1      59  (
 14402    21    85    67    21   361     1      60  )
 14403    21    85    68    21   361     1      66  ,
 14404    21    86    53    21   361     1     111  this.limit
 14405    21    86    63    21   361     1      59  (
 14406    21    86    64    21   361     1      60  )
 14407    21    86    65    21   361     1      66  ,
 14408    21    87    53    21   361     1     111  this.capacity
 14409    21    87    66    21   361     1      59  (
 14410    21    87    67    21   361     1      60  )
 14411    21    87    68    21   361     1      66  ,
 14412    21    88    53    21   361     1     111  offset
 14413    21    88    59    21   361     1      60  )
 14414    21    88    60    21   361     1     102  ;
 14415    21    89     5    21   361     1      64  }
 14416    21    89     5    21   361     0     930  ENDMETHOD
 14417    21    89     5    21   362     0     931  STARTMETHOD
 14418    21    91     5    21   362     0      10  public
 14419    21    91    12    21   362     0     111  LongBuffer
 14420    21    91    23    21   362     0     111  asReadOnlyBuffer
 14421    21    91    39    21   362     0      59  (
 14422    21    91    40    21   362     0      60  )
 14423    21    91    42    21   362     0      63  {
 14424    21    93     9    21   362     0      19  return
 14425    21    93    16    21   362     0      15  new
 14426    21    93    20    21   362     0     111  ByteBufferAsLongBufferRB
 14427    21    93    44    21   362     0      59  (
 14428    21    93    45    21   362     0     111  bb
 14429    21    93    47    21   362     0      66  ,
 14430    21    94    50    21   362     1     111  this.markValue
 14431    21    94    64    21   362     1      59  (
 14432    21    94    65    21   362     1      60  )
 14433    21    94    66    21   362     1      66  ,
 14434    21    95    50    21   362     1     111  this.position
 14435    21    95    63    21   362     1      59  (
 14436    21    95    64    21   362     1      60  )
 14437    21    95    65    21   362     1      66  ,
 14438    21    96    50    21   362     1     111  this.limit
 14439    21    96    60    21   362     1      59  (
 14440    21    96    61    21   362     1      60  )
 14441    21    96    62    21   362     1      66  ,
 14442    21    97    50    21   362     1     111  this.capacity
 14443    21    97    63    21   362     1      59  (
 14444    21    97    64    21   362     1      60  )
 14445    21    97    65    21   362     1      66  ,
 14446    21    98    50    21   362     1     111  offset
 14447    21    98    56    21   362     1      60  )
 14448    21    98    57    21   362     1     102  ;
 14449    21   102     5    21   362     1      64  }
 14450    21   102     5    21   362     0     932  ENDMETHOD
 14451    21   102     5    21   363     0     933  STARTMETHOD
 14452    21   106     5    21   363     0      23  protected
 14453    21   106    15    21   363     0      36  int
 14454    21   106    19    21   363     0     111  ix
 14455    21   106    21    21   363     0      59  (
 14456    21   106    22    21   363     0      36  int
 14457    21   106    26    21   363     0     111  i
 14458    21   106    27    21   363     0      60  )
 14459    21   106    29    21   363     0      63  {
 14460    21   107     9    21   363     0      19  return
 14461    21   107    16    21   363     0      59  (
 14462    21   107    17    21   363     0     111  i
 14463    21   107    19    21   363     0      90  <<
 14464    21   107    22    21   363     0     112  3
 14465    21   107    23    21   363     0      60  )
 14466    21   107    25    21   363     0      74  +
 14467    21   107    27    21   363     0     111  offset
 14468    21   107    33    21   363     0     102  ;
 14469    21   108     5    21   363     0      64  }
 14470    21   108     5    21   363     0     934  ENDMETHOD
 14471    21   108     5    21   364     0     935  STARTMETHOD
 14472    21   110     5    21   364     0      10  public
 14473    21   110    12    21   364     0      53  long
 14474    21   110    17    21   364     0     111  get
 14475    21   110    20    21   364     0      59  (
 14476    21   110    21    21   364     0      60  )
 14477    21   110    23    21   364     0      63  {
 14478    21   111     9    21   364     0      19  return
 14479    21   111    16    21   364     0     111  Bits.getLongB
 14480    21   111    29    21   364     0      59  (
 14481    21   111    30    21   364     0     111  bb
 14482    21   111    32    21   364     0      66  ,
 14483    21   111    34    21   364     0     111  ix
 14484    21   111    36    21   364     0      59  (
 14485    21   111    37    21   364     0     111  nextGetIndex
 14486    21   111    49    21   364     0      59  (
 14487    21   111    50    21   364     0      60  )
 14488    21   111    51    21   364     0      60  )
 14489    21   111    52    21   364     0      60  )
 14490    21   111    53    21   364     0     102  ;
 14491    21   112     5    21   364     0      64  }
 14492    21   112     5    21   364     0     936  ENDMETHOD
 14493    21   112     5    21   365     0     937  STARTMETHOD
 14494    21   114     5    21   365     0      10  public
 14495    21   114    12    21   365     0      53  long
 14496    21   114    17    21   365     0     111  get
 14497    21   114    20    21   365     0      59  (
 14498    21   114    21    21   365     0      36  int
 14499    21   114    25    21   365     0     111  i
 14500    21   114    26    21   365     0      60  )
 14501    21   114    28    21   365     0      63  {
 14502    21   115     9    21   365     0      19  return
 14503    21   115    16    21   365     0     111  Bits.getLongB
 14504    21   115    29    21   365     0      59  (
 14505    21   115    30    21   365     0     111  bb
 14506    21   115    32    21   365     0      66  ,
 14507    21   115    34    21   365     0     111  ix
 14508    21   115    36    21   365     0      59  (
 14509    21   115    37    21   365     0     111  checkIndex
 14510    21   115    47    21   365     0      59  (
 14511    21   115    48    21   365     0     111  i
 14512    21   115    49    21   365     0      60  )
 14513    21   115    50    21   365     0      60  )
 14514    21   115    51    21   365     0      60  )
 14515    21   115    52    21   365     0     102  ;
 14516    21   116     5    21   365     0      64  }
 14517    21   116     5    21   365     0     938  ENDMETHOD
 14518    21   116     5    21   366     0     939  STARTMETHOD
 14519    21   120     5    21   366     0      10  public
 14520    21   120    12    21   366     0     111  LongBuffer
 14521    21   120    23    21   366     0     111  put
 14522    21   120    26    21   366     0      59  (
 14523    21   120    27    21   366     0      53  long
 14524    21   120    32    21   366     0     111  x
 14525    21   120    33    21   366     0      60  )
 14526    21   120    35    21   366     0      63  {
 14527    21   122     9    21   366     0     111  Bits.putLongB
 14528    21   122    22    21   366     0      59  (
 14529    21   122    23    21   366     0     111  bb
 14530    21   122    25    21   366     0      66  ,
 14531    21   122    27    21   366     0     111  ix
 14532    21   122    29    21   366     0      59  (
 14533    21   122    30    21   366     0     111  nextPutIndex
 14534    21   122    42    21   366     0      59  (
 14535    21   122    43    21   366     0      60  )
 14536    21   122    44    21   366     0      60  )
 14537    21   122    45    21   366     0      66  ,
 14538    21   122    47    21   366     0     111  x
 14539    21   122    48    21   366     0      60  )
 14540    21   122    49    21   366     0     102  ;
 14541    21   123     9    21   366     0      19  return
 14542    21   123    16    21   366     0      44  this
 14543    21   123    20    21   366     0     102  ;
 14544    21   127     5    21   366     0      64  }
 14545    21   127     5    21   366     0     940  ENDMETHOD
 14546    21   127     5    21   367     0     941  STARTMETHOD
 14547    21   129     5    21   367     0      10  public
 14548    21   129    12    21   367     0     111  LongBuffer
 14549    21   129    23    21   367     0     111  put
 14550    21   129    26    21   367     0      59  (
 14551    21   129    27    21   367     0      36  int
 14552    21   129    31    21   367     0     111  i
 14553    21   129    32    21   367     0      66  ,
 14554    21   129    34    21   367     0      53  long
 14555    21   129    39    21   367     0     111  x
 14556    21   129    40    21   367     0      60  )
 14557    21   129    42    21   367     0      63  {
 14558    21   131     9    21   367     0     111  Bits.putLongB
 14559    21   131    22    21   367     0      59  (
 14560    21   131    23    21   367     0     111  bb
 14561    21   131    25    21   367     0      66  ,
 14562    21   131    27    21   367     0     111  ix
 14563    21   131    29    21   367     0      59  (
 14564    21   131    30    21   367     0     111  checkIndex
 14565    21   131    40    21   367     0      59  (
 14566    21   131    41    21   367     0     111  i
 14567    21   131    42    21   367     0      60  )
 14568    21   131    43    21   367     0      60  )
 14569    21   131    44    21   367     0      66  ,
 14570    21   131    46    21   367     0     111  x
 14571    21   131    47    21   367     0      60  )
 14572    21   131    48    21   367     0     102  ;
 14573    21   132     9    21   367     0      19  return
 14574    21   132    16    21   367     0      44  this
 14575    21   132    20    21   367     0     102  ;
 14576    21   136     5    21   367     0      64  }
 14577    21   136     5    21   367     0     942  ENDMETHOD
 14578    21   136     5    21   368     0     943  STARTMETHOD
 14579    21   138     5    21   368     0      10  public
 14580    21   138    12    21   368     0     111  LongBuffer
 14581    21   138    23    21   368     0     111  compact
 14582    21   138    30    21   368     0      59  (
 14583    21   138    31    21   368     0      60  )
 14584    21   138    33    21   368     0      63  {
 14585    21   140     9    21   368     1      36  int
 14586    21   140    13    21   368     1     111  pos
 14587    21   140    17    21   368     1      67  =
 14588    21   140    19    21   368     1     111  position
 14589    21   140    27    21   368     1      59  (
 14590    21   140    28    21   368     1      60  )
 14591    21   140    29    21   368     1     102  ;
 14592    21   141     9    21   368     1      36  int
 14593    21   141    13    21   368     1     111  lim
 14594    21   141    17    21   368     1      67  =
 14595    21   141    19    21   368     1     111  limit
 14596    21   141    24    21   368     1      59  (
 14597    21   141    25    21   368     1      60  )
 14598    21   141    26    21   368     1     102  ;
 14599    21   142     9    21   368     0     111  assert
 14600    21   142    16    21   368     0      59  (
 14601    21   142    17    21   368     0     111  pos
 14602    21   142    21    21   368     0      92  <=
 14603    21   142    24    21   368     0     111  lim
 14604    21   142    27    21   368     0      60  )
 14605    21   142    28    21   368     0     102  ;
 14606    21   143     9    21   368     0      36  int
 14607    21   143    13    21   368     0     111  rem
 14608    21   143    17    21   368     0      67  =
 14609    21   143    19    21   368     0      59  (
 14610    21   143    20    21   368     0     111  pos
 14611    21   143    24    21   368     0      92  <=
 14612    21   143    27    21   368     0     111  lim
 14613    21   143    31    21   368     0      58  ?
 14614    21   143    33    21   368     0     111  lim
 14615    21   143    37    21   368     0      77  -
 14616    21   143    39    21   368     0     111  pos
 14617    21   143    43    21   368     0      65  :
 14618    21   143    45    21   368     0     112  0
 14619    21   143    46    21   368     0      60  )
 14620    21   143    47    21   368     0     102  ;
 14621    21   145     9    21   368     0     111  ByteBuffer
 14622    21   145    20    21   368     0     111  db
 14623    21   145    23    21   368     0      67  =
 14624    21   145    25    21   368     0     111  bb.duplicate
 14625    21   145    37    21   368     0      59  (
 14626    21   145    38    21   368     0      60  )
 14627    21   145    39    21   368     0     102  ;
 14628    21   146     9    21   368     0     111  db.limit
 14629    21   146    17    21   368     0      59  (
 14630    21   146    18    21   368     0     111  ix
 14631    21   146    20    21   368     0      59  (
 14632    21   146    21    21   368     0     111  lim
 14633    21   146    24    21   368     0      60  )
 14634    21   146    25    21   368     0      60  )
 14635    21   146    26    21   368     0     102  ;
 14636    21   147     9    21   368     0     111  db.position
 14637    21   147    20    21   368     0      59  (
 14638    21   147    21    21   368     0     111  ix
 14639    21   147    23    21   368     0      59  (
 14640    21   147    24    21   368     0     112  0
 14641    21   147    25    21   368     0      60  )
 14642    21   147    26    21   368     0      60  )
 14643    21   147    27    21   368     0     102  ;
 14644    21   148     9    21   368     0     111  ByteBuffer
 14645    21   148    20    21   368     0     111  sb
 14646    21   148    23    21   368     0      67  =
 14647    21   148    25    21   368     0     111  db.slice
 14648    21   148    33    21   368     0      59  (
 14649    21   148    34    21   368     0      60  )
 14650    21   148    35    21   368     0     102  ;
 14651    21   149     9    21   368     0     111  sb.position
 14652    21   149    20    21   368     0      59  (
 14653    21   149    21    21   368     0     111  pos
 14654    21   149    25    21   368     0      90  <<
 14655    21   149    28    21   368     0     112  3
 14656    21   149    29    21   368     0      60  )
 14657    21   149    30    21   368     0     102  ;
 14658    21   150     9    21   368     0     111  sb.compact
 14659    21   150    19    21   368     0      59  (
 14660    21   150    20    21   368     0      60  )
 14661    21   150    21    21   368     0     102  ;
 14662    21   151     9    21   368     0     111  position
 14663    21   151    17    21   368     0      59  (
 14664    21   151    18    21   368     0     111  rem
 14665    21   151    21    21   368     0      60  )
 14666    21   151    22    21   368     0     102  ;
 14667    21   152     9    21   368     0     111  limit
 14668    21   152    14    21   368     0      59  (
 14669    21   152    15    21   368     0     111  capacity
 14670    21   152    23    21   368     0      59  (
 14671    21   152    24    21   368     0      60  )
 14672    21   152    25    21   368     0      60  )
 14673    21   152    26    21   368     0     102  ;
 14674    21   153     9    21   368     0      19  return
 14675    21   153    16    21   368     0      44  this
 14676    21   153    20    21   368     0     102  ;
 14677    21   157     5    21   368     0      64  }
 14678    21   157     5    21   368     0     944  ENDMETHOD
 14679    21   157     5    21   369     0     945  STARTMETHOD
 14680    21   159     5    21   369     0      10  public
 14681    21   159    12    21   369     0      39  boolean
 14682    21   159    20    21   369     0     111  isDirect
 14683    21   159    28    21   369     0      59  (
 14684    21   159    29    21   369     0      60  )
 14685    21   159    31    21   369     0      63  {
 14686    21   160     9    21   369     0      19  return
 14687    21   160    16    21   369     0     111  bb.isDirect
 14688    21   160    27    21   369     0      59  (
 14689    21   160    28    21   369     0      60  )
 14690    21   160    29    21   369     1     102  ;
 14691    21   161     5    21   369     1      64  }
 14692    21   161     5    21   369     0     946  ENDMETHOD
 14693    21   161     5    21   370     0     947  STARTMETHOD
 14694    21   163     5    21   370     0      10  public
 14695    21   163    12    21   370     0      39  boolean
 14696    21   163    20    21   370     0     111  isReadOnly
 14697    21   163    30    21   370     0      59  (
 14698    21   163    31    21   370     0      60  )
 14699    21   163    33    21   370     0      63  {
 14700    21   164     9    21   370     0      19  return
 14701    21   164    16    21   370     0      43  false
 14702    21   164    21    21   370     1     102  ;
 14703    21   165     5    21   370     1      64  }
 14704    21   165     5    21   370     0     948  ENDMETHOD
 14705    21   165     5    21   371     0     949  STARTMETHOD
 14706    21   207     5    21   371     0      10  public
 14707    21   207    12    21   371     0     111  ByteOrder
 14708    21   207    22    21   371     0     111  order
 14709    21   207    27    21   371     0      59  (
 14710    21   207    28    21   371     0      60  )
 14711    21   207    30    21   371     0      63  {
 14712    21   209     9    21   371     0      19  return
 14713    21   209    16    21   371     0     111  ByteOrder.BIG_ENDIAN
 14714    21   209    36    21   371     1     102  ;
 14715    21   214     5    21   371     1      64  }
 14716    21   214     5    21   371     0     950  ENDMETHOD
 14717    21   216     1    21    -1     0      64  }
 14718    21   216     1    21    -1     1     951  ENDCLASS
 14719    21   216     1    -1    -1     1     952  ENDFILE C:\javasrc\java\nio\ByteBufferAsLongBufferB.java
 14720    22     1     1    -1    -1     1     953  STARTFILE C:\javasrc\java\nio\ByteBufferAsLongBufferL.java
 14721    22    28     1    -1    -1     0       5  package
 14722    22    28     9    -1    -1     0     111  java.nio
 14723    22    28    17    -1    -1     0     102  ;
 14724    22    31     1    22    -1     0     954  STARTCLASS
 14725    22    31     1    22    -1     0      24  class
 14726    22    31     7    22    -1     0     111  ByteBufferAsLongBufferL
 14727    22    32     5    22    -1     0      38  extends
 14728    22    32    13    22    -1     0     111  LongBuffer
 14729    22    33     1    22    -1     0      63  {
 14730    22    37     5    22    -1     0      23  protected
 14731    22    37    15    22    -1     0       6  final
 14732    22    37    21    22    -1     0     111  ByteBuffer
 14733    22    37    32    22    -1     0     111  bb
 14734    22    37    34    22    -1     0     102  ;
 14735    22    38     5    22    -1     0      23  protected
 14736    22    38    15    22    -1     0       6  final
 14737    22    38    21    22    -1     0      36  int
 14738    22    38    25    22    -1     0     111  offset
 14739    22    38    31    22    -1     0     102  ;
 14740    22    38    31    22   372     0     955  STARTMETHOD
 14741    22    42     5    22   372     0     111  ByteBufferAsLongBufferL
 14742    22    42    28    22   372     0      59  (
 14743    22    42    29    22   372     0     111  ByteBuffer
 14744    22    42    40    22   372     0     111  bb
 14745    22    42    42    22   372     0      60  )
 14746    22    42    44    22   372     0      63  {
 14747    22    44     9    22   372     0      27  super
 14748    22    44    14    22   372     0      59  (
 14749    22    44    15    22   372     0      77  -
 14750    22    44    16    22   372     0     112  1
 14751    22    44    17    22   372     0      66  ,
 14752    22    44    19    22   372     0     112  0
 14753    22    44    20    22   372     0      66  ,
 14754    22    45    15    22   372     0     111  bb.remaining
 14755    22    45    27    22   372     0      59  (
 14756    22    45    28    22   372     0      60  )
 14757    22    45    30    22   372     0      84  >>
 14758    22    45    33    22   372     0     112  3
 14759    22    45    34    22   372     0      66  ,
 14760    22    46    15    22   372     0     111  bb.remaining
 14761    22    46    27    22   372     0      59  (
 14762    22    46    28    22   372     0      60  )
 14763    22    46    30    22   372     0      84  >>
 14764    22    46    33    22   372     0     112  3
 14765    22    46    34    22   372     0      60  )
 14766    22    46    35    22   372     0     102  ;
 14767    22    47     9    22   372     0     111  this.bb
 14768    22    47    17    22   372     0      67  =
 14769    22    47    19    22   372     0     111  bb
 14770    22    47    21    22   372     0     102  ;
 14771    22    49     9    22   372     0      36  int
 14772    22    49    13    22   372     0     111  cap
 14773    22    49    17    22   372     0      67  =
 14774    22    49    19    22   372     0     111  this.capacity
 14775    22    49    32    22   372     0      59  (
 14776    22    49    33    22   372     0      60  )
 14777    22    49    34    22   372     0     102  ;
 14778    22    50     9    22   372     0     111  this.limit
 14779    22    50    19    22   372     0      59  (
 14780    22    50    20    22   372     0     111  cap
 14781    22    50    23    22   372     0      60  )
 14782    22    50    24    22   372     0     102  ;
 14783    22    51     9    22   372     0      36  int
 14784    22    51    13    22   372     0     111  pos
 14785    22    51    17    22   372     0      67  =
 14786    22    51    19    22   372     0     111  this.position
 14787    22    51    32    22   372     0      59  (
 14788    22    51    33    22   372     0      60  )
 14789    22    51    34    22   372     0     102  ;
 14790    22    52     9    22   372     0     111  assert
 14791    22    52    16    22   372     0      59  (
 14792    22    52    17    22   372     0     111  pos
 14793    22    52    21    22   372     0      92  <=
 14794    22    52    24    22   372     0     111  cap
 14795    22    52    27    22   372     0      60  )
 14796    22    52    28    22   372     0     102  ;
 14797    22    53     9    22   372     0     111  offset
 14798    22    53    16    22   372     0      67  =
 14799    22    53    18    22   372     0     111  pos
 14800    22    53    21    22   372     0     102  ;
 14801    22    57     5    22   372     0      64  }
 14802    22    57     5    22   372     0     956  ENDMETHOD
 14803    22    57     5    22   373     0     957  STARTMETHOD
 14804    22    59     5    22   373     0     111  ByteBufferAsLongBufferL
 14805    22    59    28    22   373     0      59  (
 14806    22    59    29    22   373     0     111  ByteBuffer
 14807    22    59    40    22   373     0     111  bb
 14808    22    59    42    22   373     0      66  ,
 14809    22    60    38    22   373     0      36  int
 14810    22    60    42    22   373     0     111  mark
 14811    22    60    46    22   373     0      66  ,
 14812    22    60    48    22   373     0      36  int
 14813    22    60    52    22   373     0     111  pos
 14814    22    60    55    22   373     0      66  ,
 14815    22    60    57    22   373     0      36  int
 14816    22    60    61    22   373     0     111  lim
 14817    22    60    64    22   373     0      66  ,
 14818    22    60    66    22   373     0      36  int
 14819    22    60    70    22   373     0     111  cap
 14820    22    60    73    22   373     0      66  ,
 14821    22    61    38    22   373     0      36  int
 14822    22    61    42    22   373     0     111  off
 14823    22    61    45    22   373     0      60  )
 14824    22    62     5    22   373     0      63  {
 14825    22    64     9    22   373     0      27  super
 14826    22    64    14    22   373     0      59  (
 14827    22    64    15    22   373     0     111  mark
 14828    22    64    19    22   373     0      66  ,
 14829    22    64    21    22   373     0     111  pos
 14830    22    64    24    22   373     0      66  ,
 14831    22    64    26    22   373     0     111  lim
 14832    22    64    29    22   373     0      66  ,
 14833    22    64    31    22   373     0     111  cap
 14834    22    64    34    22   373     0      60  )
 14835    22    64    35    22   373     0     102  ;
 14836    22    65     9    22   373     1     111  this.bb
 14837    22    65    17    22   373     1      67  =
 14838    22    65    19    22   373     1     111  bb
 14839    22    65    21    22   373     1     102  ;
 14840    22    66     9    22   373     1     111  offset
 14841    22    66    16    22   373     1      67  =
 14842    22    66    18    22   373     1     111  off
 14843    22    66    21    22   373     1     102  ;
 14844    22    70     5    22   373     0      64  }
 14845    22    70     5    22   373     0     958  ENDMETHOD
 14846    22    70     5    22   374     0     959  STARTMETHOD
 14847    22    72     5    22   374     0      10  public
 14848    22    72    12    22   374     0     111  LongBuffer
 14849    22    72    23    22   374     0     111  slice
 14850    22    72    28    22   374     0      59  (
 14851    22    72    29    22   374     0      60  )
 14852    22    72    31    22   374     0      63  {
 14853    22    73     9    22   374     1      36  int
 14854    22    73    13    22   374     1     111  pos
 14855    22    73    17    22   374     1      67  =
 14856    22    73    19    22   374     1     111  this.position
 14857    22    73    32    22   374     1      59  (
 14858    22    73    33    22   374     1      60  )
 14859    22    73    34    22   374     1     102  ;
 14860    22    74     9    22   374     1      36  int
 14861    22    74    13    22   374     1     111  lim
 14862    22    74    17    22   374     1      67  =
 14863    22    74    19    22   374     1     111  this.limit
 14864    22    74    29    22   374     1      59  (
 14865    22    74    30    22   374     1      60  )
 14866    22    74    31    22   374     1     102  ;
 14867    22    75     9    22   374     0     111  assert
 14868    22    75    16    22   374     0      59  (
 14869    22    75    17    22   374     0     111  pos
 14870    22    75    21    22   374     0      92  <=
 14871    22    75    24    22   374     0     111  lim
 14872    22    75    27    22   374     0      60  )
 14873    22    75    28    22   374     0     102  ;
 14874    22    76     9    22   374     0      36  int
 14875    22    76    13    22   374     0     111  rem
 14876    22    76    17    22   374     0      67  =
 14877    22    76    19    22   374     0      59  (
 14878    22    76    20    22   374     0     111  pos
 14879    22    76    24    22   374     0      92  <=
 14880    22    76    27    22   374     0     111  lim
 14881    22    76    31    22   374     0      58  ?
 14882    22    76    33    22   374     0     111  lim
 14883    22    76    37    22   374     0      77  -
 14884    22    76    39    22   374     0     111  pos
 14885    22    76    43    22   374     0      65  :
 14886    22    76    45    22   374     0     112  0
 14887    22    76    46    22   374     0      60  )
 14888    22    76    47    22   374     0     102  ;
 14889    22    77     9    22   374     0      36  int
 14890    22    77    13    22   374     0     111  off
 14891    22    77    17    22   374     0      67  =
 14892    22    77    19    22   374     0      59  (
 14893    22    77    20    22   374     0     111  pos
 14894    22    77    24    22   374     0      90  <<
 14895    22    77    27    22   374     0     112  3
 14896    22    77    28    22   374     0      60  )
 14897    22    77    30    22   374     0      74  +
 14898    22    77    32    22   374     0     111  offset
 14899    22    77    38    22   374     0     102  ;
 14900    22    78     9    22   374     0     111  assert
 14901    22    78    16    22   374     0      59  (
 14902    22    78    17    22   374     0     111  off
 14903    22    78    21    22   374     0      88  >=
 14904    22    78    24    22   374     0     112  0
 14905    22    78    25    22   374     0      60  )
 14906    22    78    26    22   374     0     102  ;
 14907    22    79     9    22   374     0      19  return
 14908    22    79    16    22   374     0      15  new
 14909    22    79    20    22   374     0     111  ByteBufferAsLongBufferL
 14910    22    79    43    22   374     0      59  (
 14911    22    79    44    22   374     0     111  bb
 14912    22    79    46    22   374     0      66  ,
 14913    22    79    48    22   374     0      77  -
 14914    22    79    49    22   374     0     112  1
 14915    22    79    50    22   374     0      66  ,
 14916    22    79    52    22   374     0     112  0
 14917    22    79    53    22   374     0      66  ,
 14918    22    79    55    22   374     0     111  rem
 14919    22    79    58    22   374     0      66  ,
 14920    22    79    60    22   374     0     111  rem
 14921    22    79    63    22   374     1      66  ,
 14922    22    79    65    22   374     1     111  off
 14923    22    79    68    22   374     1      60  )
 14924    22    79    69    22   374     1     102  ;
 14925    22    80     5    22   374     1      64  }
 14926    22    80     5    22   374     0     960  ENDMETHOD
 14927    22    80     5    22   375     0     961  STARTMETHOD
 14928    22    82     5    22   375     0      10  public
 14929    22    82    12    22   375     0     111  LongBuffer
 14930    22    82    23    22   375     0     111  duplicate
 14931    22    82    32    22   375     0      59  (
 14932    22    82    33    22   375     0      60  )
 14933    22    82    35    22   375     0      63  {
 14934    22    83     9    22   375     0      19  return
 14935    22    83    16    22   375     0      15  new
 14936    22    83    20    22   375     0     111  ByteBufferAsLongBufferL
 14937    22    83    43    22   375     0      59  (
 14938    22    83    44    22   375     0     111  bb
 14939    22    83    46    22   375     0      66  ,
 14940    22    84    53    22   375     1     111  this.markValue
 14941    22    84    67    22   375     1      59  (
 14942    22    84    68    22   375     1      60  )
 14943    22    84    69    22   375     1      66  ,
 14944    22    85    53    22   375     1     111  this.position
 14945    22    85    66    22   375     1      59  (
 14946    22    85    67    22   375     1      60  )
 14947    22    85    68    22   375     1      66  ,
 14948    22    86    53    22   375     1     111  this.limit
 14949    22    86    63    22   375     1      59  (
 14950    22    86    64    22   375     1      60  )
 14951    22    86    65    22   375     1      66  ,
 14952    22    87    53    22   375     1     111  this.capacity
 14953    22    87    66    22   375     1      59  (
 14954    22    87    67    22   375     1      60  )
 14955    22    87    68    22   375     1      66  ,
 14956    22    88    53    22   375     1     111  offset
 14957    22    88    59    22   375     1      60  )
 14958    22    88    60    22   375     1     102  ;
 14959    22    89     5    22   375     1      64  }
 14960    22    89     5    22   375     0     962  ENDMETHOD
 14961    22    89     5    22   376     0     963  STARTMETHOD
 14962    22    91     5    22   376     0      10  public
 14963    22    91    12    22   376     0     111  LongBuffer
 14964    22    91    23    22   376     0     111  asReadOnlyBuffer
 14965    22    91    39    22   376     0      59  (
 14966    22    91    40    22   376     0      60  )
 14967    22    91    42    22   376     0      63  {
 14968    22    93     9    22   376     0      19  return
 14969    22    93    16    22   376     0      15  new
 14970    22    93    20    22   376     0     111  ByteBufferAsLongBufferRL
 14971    22    93    44    22   376     0      59  (
 14972    22    93    45    22   376     0     111  bb
 14973    22    93    47    22   376     0      66  ,
 14974    22    94    50    22   376     1     111  this.markValue
 14975    22    94    64    22   376     1      59  (
 14976    22    94    65    22   376     1      60  )
 14977    22    94    66    22   376     1      66  ,
 14978    22    95    50    22   376     1     111  this.position
 14979    22    95    63    22   376     1      59  (
 14980    22    95    64    22   376     1      60  )
 14981    22    95    65    22   376     1      66  ,
 14982    22    96    50    22   376     1     111  this.limit
 14983    22    96    60    22   376     1      59  (
 14984    22    96    61    22   376     1      60  )
 14985    22    96    62    22   376     1      66  ,
 14986    22    97    50    22   376     1     111  this.capacity
 14987    22    97    63    22   376     1      59  (
 14988    22    97    64    22   376     1      60  )
 14989    22    97    65    22   376     1      66  ,
 14990    22    98    50    22   376     1     111  offset
 14991    22    98    56    22   376     1      60  )
 14992    22    98    57    22   376     1     102  ;
 14993    22   102     5    22   376     1      64  }
 14994    22   102     5    22   376     0     964  ENDMETHOD
 14995    22   102     5    22   377     0     965  STARTMETHOD
 14996    22   106     5    22   377     0      23  protected
 14997    22   106    15    22   377     0      36  int
 14998    22   106    19    22   377     0     111  ix
 14999    22   106    21    22   377     0      59  (
 15000    22   106    22    22   377     0      36  int
 15001    22   106    26    22   377     0     111  i
 15002    22   106    27    22   377     0      60  )
 15003    22   106    29    22   377     0      63  {
 15004    22   107     9    22   377     0      19  return
 15005    22   107    16    22   377     0      59  (
 15006    22   107    17    22   377     0     111  i
 15007    22   107    19    22   377     0      90  <<
 15008    22   107    22    22   377     0     112  3
 15009    22   107    23    22   377     0      60  )
 15010    22   107    25    22   377     0      74  +
 15011    22   107    27    22   377     0     111  offset
 15012    22   107    33    22   377     0     102  ;
 15013    22   108     5    22   377     0      64  }
 15014    22   108     5    22   377     0     966  ENDMETHOD
 15015    22   108     5    22   378     0     967  STARTMETHOD
 15016    22   110     5    22   378     0      10  public
 15017    22   110    12    22   378     0      53  long
 15018    22   110    17    22   378     0     111  get
 15019    22   110    20    22   378     0      59  (
 15020    22   110    21    22   378     0      60  )
 15021    22   110    23    22   378     0      63  {
 15022    22   111     9    22   378     0      19  return
 15023    22   111    16    22   378     0     111  Bits.getLongL
 15024    22   111    29    22   378     0      59  (
 15025    22   111    30    22   378     0     111  bb
 15026    22   111    32    22   378     0      66  ,
 15027    22   111    34    22   378     0     111  ix
 15028    22   111    36    22   378     0      59  (
 15029    22   111    37    22   378     0     111  nextGetIndex
 15030    22   111    49    22   378     0      59  (
 15031    22   111    50    22   378     0      60  )
 15032    22   111    51    22   378     0      60  )
 15033    22   111    52    22   378     0      60  )
 15034    22   111    53    22   378     0     102  ;
 15035    22   112     5    22   378     0      64  }
 15036    22   112     5    22   378     0     968  ENDMETHOD
 15037    22   112     5    22   379     0     969  STARTMETHOD
 15038    22   114     5    22   379     0      10  public
 15039    22   114    12    22   379     0      53  long
 15040    22   114    17    22   379     0     111  get
 15041    22   114    20    22   379     0      59  (
 15042    22   114    21    22   379     0      36  int
 15043    22   114    25    22   379     0     111  i
 15044    22   114    26    22   379     0      60  )
 15045    22   114    28    22   379     0      63  {
 15046    22   115     9    22   379     0      19  return
 15047    22   115    16    22   379     0     111  Bits.getLongL
 15048    22   115    29    22   379     0      59  (
 15049    22   115    30    22   379     0     111  bb
 15050    22   115    32    22   379     0      66  ,
 15051    22   115    34    22   379     0     111  ix
 15052    22   115    36    22   379     0      59  (
 15053    22   115    37    22   379     0     111  checkIndex
 15054    22   115    47    22   379     0      59  (
 15055    22   115    48    22   379     0     111  i
 15056    22   115    49    22   379     0      60  )
 15057    22   115    50    22   379     0      60  )
 15058    22   115    51    22   379     0      60  )
 15059    22   115    52    22   379     0     102  ;
 15060    22   116     5    22   379     0      64  }
 15061    22   116     5    22   379     0     970  ENDMETHOD
 15062    22   116     5    22   380     0     971  STARTMETHOD
 15063    22   120     5    22   380     0      10  public
 15064    22   120    12    22   380     0     111  LongBuffer
 15065    22   120    23    22   380     0     111  put
 15066    22   120    26    22   380     0      59  (
 15067    22   120    27    22   380     0      53  long
 15068    22   120    32    22   380     0     111  x
 15069    22   120    33    22   380     0      60  )
 15070    22   120    35    22   380     0      63  {
 15071    22   122     9    22   380     0     111  Bits.putLongL
 15072    22   122    22    22   380     0      59  (
 15073    22   122    23    22   380     0     111  bb
 15074    22   122    25    22   380     0      66  ,
 15075    22   122    27    22   380     0     111  ix
 15076    22   122    29    22   380     0      59  (
 15077    22   122    30    22   380     0     111  nextPutIndex
 15078    22   122    42    22   380     0      59  (
 15079    22   122    43    22   380     0      60  )
 15080    22   122    44    22   380     0      60  )
 15081    22   122    45    22   380     0      66  ,
 15082    22   122    47    22   380     0     111  x
 15083    22   122    48    22   380     0      60  )
 15084    22   122    49    22   380     0     102  ;
 15085    22   123     9    22   380     0      19  return
 15086    22   123    16    22   380     0      44  this
 15087    22   123    20    22   380     0     102  ;
 15088    22   127     5    22   380     0      64  }
 15089    22   127     5    22   380     0     972  ENDMETHOD
 15090    22   127     5    22   381     0     973  STARTMETHOD
 15091    22   129     5    22   381     0      10  public
 15092    22   129    12    22   381     0     111  LongBuffer
 15093    22   129    23    22   381     0     111  put
 15094    22   129    26    22   381     0      59  (
 15095    22   129    27    22   381     0      36  int
 15096    22   129    31    22   381     0     111  i
 15097    22   129    32    22   381     0      66  ,
 15098    22   129    34    22   381     0      53  long
 15099    22   129    39    22   381     0     111  x
 15100    22   129    40    22   381     0      60  )
 15101    22   129    42    22   381     0      63  {
 15102    22   131     9    22   381     0     111  Bits.putLongL
 15103    22   131    22    22   381     0      59  (
 15104    22   131    23    22   381     0     111  bb
 15105    22   131    25    22   381     0      66  ,
 15106    22   131    27    22   381     0     111  ix
 15107    22   131    29    22   381     0      59  (
 15108    22   131    30    22   381     0     111  checkIndex
 15109    22   131    40    22   381     0      59  (
 15110    22   131    41    22   381     0     111  i
 15111    22   131    42    22   381     0      60  )
 15112    22   131    43    22   381     0      60  )
 15113    22   131    44    22   381     0      66  ,
 15114    22   131    46    22   381     0     111  x
 15115    22   131    47    22   381     0      60  )
 15116    22   131    48    22   381     0     102  ;
 15117    22   132     9    22   381     0      19  return
 15118    22   132    16    22   381     0      44  this
 15119    22   132    20    22   381     0     102  ;
 15120    22   136     5    22   381     0      64  }
 15121    22   136     5    22   381     0     974  ENDMETHOD
 15122    22   136     5    22   382     0     975  STARTMETHOD
 15123    22   138     5    22   382     0      10  public
 15124    22   138    12    22   382     0     111  LongBuffer
 15125    22   138    23    22   382     0     111  compact
 15126    22   138    30    22   382     0      59  (
 15127    22   138    31    22   382     0      60  )
 15128    22   138    33    22   382     0      63  {
 15129    22   140     9    22   382     1      36  int
 15130    22   140    13    22   382     1     111  pos
 15131    22   140    17    22   382     1      67  =
 15132    22   140    19    22   382     1     111  position
 15133    22   140    27    22   382     1      59  (
 15134    22   140    28    22   382     1      60  )
 15135    22   140    29    22   382     1     102  ;
 15136    22   141     9    22   382     1      36  int
 15137    22   141    13    22   382     1     111  lim
 15138    22   141    17    22   382     1      67  =
 15139    22   141    19    22   382     1     111  limit
 15140    22   141    24    22   382     1      59  (
 15141    22   141    25    22   382     1      60  )
 15142    22   141    26    22   382     1     102  ;
 15143    22   142     9    22   382     0     111  assert
 15144    22   142    16    22   382     0      59  (
 15145    22   142    17    22   382     0     111  pos
 15146    22   142    21    22   382     0      92  <=
 15147    22   142    24    22   382     0     111  lim
 15148    22   142    27    22   382     0      60  )
 15149    22   142    28    22   382     0     102  ;
 15150    22   143     9    22   382     0      36  int
 15151    22   143    13    22   382     0     111  rem
 15152    22   143    17    22   382     0      67  =
 15153    22   143    19    22   382     0      59  (
 15154    22   143    20    22   382     0     111  pos
 15155    22   143    24    22   382     0      92  <=
 15156    22   143    27    22   382     0     111  lim
 15157    22   143    31    22   382     0      58  ?
 15158    22   143    33    22   382     0     111  lim
 15159    22   143    37    22   382     0      77  -
 15160    22   143    39    22   382     0     111  pos
 15161    22   143    43    22   382     0      65  :
 15162    22   143    45    22   382     0     112  0
 15163    22   143    46    22   382     0      60  )
 15164    22   143    47    22   382     0     102  ;
 15165    22   145     9    22   382     0     111  ByteBuffer
 15166    22   145    20    22   382     0     111  db
 15167    22   145    23    22   382     0      67  =
 15168    22   145    25    22   382     0     111  bb.duplicate
 15169    22   145    37    22   382     0      59  (
 15170    22   145    38    22   382     0      60  )
 15171    22   145    39    22   382     0     102  ;
 15172    22   146     9    22   382     0     111  db.limit
 15173    22   146    17    22   382     0      59  (
 15174    22   146    18    22   382     0     111  ix
 15175    22   146    20    22   382     0      59  (
 15176    22   146    21    22   382     0     111  lim
 15177    22   146    24    22   382     0      60  )
 15178    22   146    25    22   382     0      60  )
 15179    22   146    26    22   382     0     102  ;
 15180    22   147     9    22   382     0     111  db.position
 15181    22   147    20    22   382     0      59  (
 15182    22   147    21    22   382     0     111  ix
 15183    22   147    23    22   382     0      59  (
 15184    22   147    24    22   382     0     112  0
 15185    22   147    25    22   382     0      60  )
 15186    22   147    26    22   382     0      60  )
 15187    22   147    27    22   382     0     102  ;
 15188    22   148     9    22   382     0     111  ByteBuffer
 15189    22   148    20    22   382     0     111  sb
 15190    22   148    23    22   382     0      67  =
 15191    22   148    25    22   382     0     111  db.slice
 15192    22   148    33    22   382     0      59  (
 15193    22   148    34    22   382     0      60  )
 15194    22   148    35    22   382     0     102  ;
 15195    22   149     9    22   382     0     111  sb.position
 15196    22   149    20    22   382     0      59  (
 15197    22   149    21    22   382     0     111  pos
 15198    22   149    25    22   382     0      90  <<
 15199    22   149    28    22   382     0     112  3
 15200    22   149    29    22   382     0      60  )
 15201    22   149    30    22   382     0     102  ;
 15202    22   150     9    22   382     0     111  sb.compact
 15203    22   150    19    22   382     0      59  (
 15204    22   150    20    22   382     0      60  )
 15205    22   150    21    22   382     0     102  ;
 15206    22   151     9    22   382     0     111  position
 15207    22   151    17    22   382     0      59  (
 15208    22   151    18    22   382     0     111  rem
 15209    22   151    21    22   382     0      60  )
 15210    22   151    22    22   382     0     102  ;
 15211    22   152     9    22   382     0     111  limit
 15212    22   152    14    22   382     0      59  (
 15213    22   152    15    22   382     0     111  capacity
 15214    22   152    23    22   382     0      59  (
 15215    22   152    24    22   382     0      60  )
 15216    22   152    25    22   382     0      60  )
 15217    22   152    26    22   382     0     102  ;
 15218    22   153     9    22   382     0      19  return
 15219    22   153    16    22   382     0      44  this
 15220    22   153    20    22   382     0     102  ;
 15221    22   157     5    22   382     0      64  }
 15222    22   157     5    22   382     0     976  ENDMETHOD
 15223    22   157     5    22   383     0     977  STARTMETHOD
 15224    22   159     5    22   383     0      10  public
 15225    22   159    12    22   383     0      39  boolean
 15226    22   159    20    22   383     0     111  isDirect
 15227    22   159    28    22   383     0      59  (
 15228    22   159    29    22   383     0      60  )
 15229    22   159    31    22   383     0      63  {
 15230    22   160     9    22   383     0      19  return
 15231    22   160    16    22   383     0     111  bb.isDirect
 15232    22   160    27    22   383     0      59  (
 15233    22   160    28    22   383     0      60  )
 15234    22   160    29    22   383     1     102  ;
 15235    22   161     5    22   383     1      64  }
 15236    22   161     5    22   383     0     978  ENDMETHOD
 15237    22   161     5    22   384     0     979  STARTMETHOD
 15238    22   163     5    22   384     0      10  public
 15239    22   163    12    22   384     0      39  boolean
 15240    22   163    20    22   384     0     111  isReadOnly
 15241    22   163    30    22   384     0      59  (
 15242    22   163    31    22   384     0      60  )
 15243    22   163    33    22   384     0      63  {
 15244    22   164     9    22   384     0      19  return
 15245    22   164    16    22   384     0      43  false
 15246    22   164    21    22   384     1     102  ;
 15247    22   165     5    22   384     1      64  }
 15248    22   165     5    22   384     0     980  ENDMETHOD
 15249    22   165     5    22   385     0     981  STARTMETHOD
 15250    22   207     5    22   385     0      10  public
 15251    22   207    12    22   385     0     111  ByteOrder
 15252    22   207    22    22   385     0     111  order
 15253    22   207    27    22   385     0      59  (
 15254    22   207    28    22   385     0      60  )
 15255    22   207    30    22   385     0      63  {
 15256    22   212     9    22   385     0      19  return
 15257    22   212    16    22   385     0     111  ByteOrder.LITTLE_ENDIAN
 15258    22   212    39    22   385     1     102  ;
 15259    22   214     5    22   385     1      64  }
 15260    22   214     5    22   385     0     982  ENDMETHOD
 15261    22   216     1    22    -1     0      64  }
 15262    22   216     1    22    -1     1     983  ENDCLASS
 15263    22   216     1    -1    -1     1     984  ENDFILE C:\javasrc\java\nio\ByteBufferAsLongBufferL.java
 15264    23     1     1    -1    -1     1     985  STARTFILE C:\javasrc\java\nio\ByteBufferAsLongBufferRB.java
 15265    23    28     1    -1    -1     0       5  package
 15266    23    28     9    -1    -1     0     111  java.nio
 15267    23    28    17    -1    -1     0     102  ;
 15268    23    31     1    23    -1     0     986  STARTCLASS
 15269    23    31     1    23    -1     0      24  class
 15270    23    31     7    23    -1     0     111  ByteBufferAsLongBufferRB
 15271    23    32     5    23    -1     0      38  extends
 15272    23    32    13    23    -1     0     111  ByteBufferAsLongBufferB
 15273    23    33     1    23    -1     0      63  {
 15274    23    33     1    23   386     0     987  STARTMETHOD
 15275    23    42     5    23   386     0     111  ByteBufferAsLongBufferRB
 15276    23    42    29    23   386     0      59  (
 15277    23    42    30    23   386     0     111  ByteBuffer
 15278    23    42    41    23   386     0     111  bb
 15279    23    42    43    23   386     0      60  )
 15280    23    42    45    23   386     0      63  {
 15281    23    55     9    23   386     0      27  super
 15282    23    55    14    23   386     0      59  (
 15283    23    55    15    23   386     0     111  bb
 15284    23    55    17    23   386     0      60  )
 15285    23    55    18    23   386     0     102  ;
 15286    23    57     5    23   386     0      64  }
 15287    23    57     5    23   386     0     988  ENDMETHOD
 15288    23    57     5    23   387     0     989  STARTMETHOD
 15289    23    59     5    23   387     0     111  ByteBufferAsLongBufferRB
 15290    23    59    29    23   387     0      59  (
 15291    23    59    30    23   387     0     111  ByteBuffer
 15292    23    59    41    23   387     0     111  bb
 15293    23    59    43    23   387     0      66  ,
 15294    23    60    38    23   387     0      36  int
 15295    23    60    42    23   387     0     111  mark
 15296    23    60    46    23   387     0      66  ,
 15297    23    60    48    23   387     0      36  int
 15298    23    60    52    23   387     0     111  pos
 15299    23    60    55    23   387     0      66  ,
 15300    23    60    57    23   387     0      36  int
 15301    23    60    61    23   387     0     111  lim
 15302    23    60    64    23   387     0      66  ,
 15303    23    60    66    23   387     0      36  int
 15304    23    60    70    23   387     0     111  cap
 15305    23    60    73    23   387     0      66  ,
 15306    23    61    38    23   387     0      36  int
 15307    23    61    42    23   387     0     111  off
 15308    23    61    45    23   387     0      60  )
 15309    23    62     5    23   387     0      63  {
 15310    23    68     9    23   387     0      27  super
 15311    23    68    14    23   387     0      59  (
 15312    23    68    15    23   387     0     111  bb
 15313    23    68    17    23   387     0      66  ,
 15314    23    68    19    23   387     0     111  mark
 15315    23    68    23    23   387     0      66  ,
 15316    23    68    25    23   387     0     111  pos
 15317    23    68    28    23   387     0      66  ,
 15318    23    68    30    23   387     0     111  lim
 15319    23    68    33    23   387     0      66  ,
 15320    23    68    35    23   387     0     111  cap
 15321    23    68    38    23   387     0      66  ,
 15322    23    68    40    23   387     0     111  off
 15323    23    68    43    23   387     0      60  )
 15324    23    68    44    23   387     0     102  ;
 15325    23    70     5    23   387     0      64  }
 15326    23    70     5    23   387     0     990  ENDMETHOD
 15327    23    70     5    23   388     0     991  STARTMETHOD
 15328    23    72     5    23   388     0      10  public
 15329    23    72    12    23   388     0     111  LongBuffer
 15330    23    72    23    23   388     0     111  slice
 15331    23    72    28    23   388     0      59  (
 15332    23    72    29    23   388     0      60  )
 15333    23    72    31    23   388     0      63  {
 15334    23    73     9    23   388     1      36  int
 15335    23    73    13    23   388     1     111  pos
 15336    23    73    17    23   388     1      67  =
 15337    23    73    19    23   388     1     111  this.position
 15338    23    73    32    23   388     1      59  (
 15339    23    73    33    23   388     1      60  )
 15340    23    73    34    23   388     1     102  ;
 15341    23    74     9    23   388     1      36  int
 15342    23    74    13    23   388     1     111  lim
 15343    23    74    17    23   388     1      67  =
 15344    23    74    19    23   388     1     111  this.limit
 15345    23    74    29    23   388     1      59  (
 15346    23    74    30    23   388     1      60  )
 15347    23    74    31    23   388     1     102  ;
 15348    23    75     9    23   388     0     111  assert
 15349    23    75    16    23   388     0      59  (
 15350    23    75    17    23   388     0     111  pos
 15351    23    75    21    23   388     0      92  <=
 15352    23    75    24    23   388     0     111  lim
 15353    23    75    27    23   388     0      60  )
 15354    23    75    28    23   388     0     102  ;
 15355    23    76     9    23   388     0      36  int
 15356    23    76    13    23   388     0     111  rem
 15357    23    76    17    23   388     0      67  =
 15358    23    76    19    23   388     0      59  (
 15359    23    76    20    23   388     0     111  pos
 15360    23    76    24    23   388     0      92  <=
 15361    23    76    27    23   388     0     111  lim
 15362    23    76    31    23   388     0      58  ?
 15363    23    76    33    23   388     0     111  lim
 15364    23    76    37    23   388     0      77  -
 15365    23    76    39    23   388     0     111  pos
 15366    23    76    43    23   388     0      65  :
 15367    23    76    45    23   388     0     112  0
 15368    23    76    46    23   388     0      60  )
 15369    23    76    47    23   388     0     102  ;
 15370    23    77     9    23   388     0      36  int
 15371    23    77    13    23   388     0     111  off
 15372    23    77    17    23   388     0      67  =
 15373    23    77    19    23   388     0      59  (
 15374    23    77    20    23   388     0     111  pos
 15375    23    77    24    23   388     0      90  <<
 15376    23    77    27    23   388     0     112  3
 15377    23    77    28    23   388     0      60  )
 15378    23    77    30    23   388     0      74  +
 15379    23    77    32    23   388     0     111  offset
 15380    23    77    38    23   388     0     102  ;
 15381    23    78     9    23   388     0     111  assert
 15382    23    78    16    23   388     0      59  (
 15383    23    78    17    23   388     0     111  off
 15384    23    78    21    23   388     0      88  >=
 15385    23    78    24    23   388     0     112  0
 15386    23    78    25    23   388     0      60  )
 15387    23    78    26    23   388     0     102  ;
 15388    23    79     9    23   388     0      19  return
 15389    23    79    16    23   388     0      15  new
 15390    23    79    20    23   388     0     111  ByteBufferAsLongBufferRB
 15391    23    79    44    23   388     0      59  (
 15392    23    79    45    23   388     0     111  bb
 15393    23    79    47    23   388     0      66  ,
 15394    23    79    49    23   388     0      77  -
 15395    23    79    50    23   388     0     112  1
 15396    23    79    51    23   388     0      66  ,
 15397    23    79    53    23   388     0     112  0
 15398    23    79    54    23   388     0      66  ,
 15399    23    79    56    23   388     0     111  rem
 15400    23    79    59    23   388     0      66  ,
 15401    23    79    61    23   388     0     111  rem
 15402    23    79    64    23   388     0      66  ,
 15403    23    79    66    23   388     0     111  off
 15404    23    79    69    23   388     0      60  )
 15405    23    79    70    23   388     0     102  ;
 15406    23    80     5    23   388     0      64  }
 15407    23    80     5    23   388     0     992  ENDMETHOD
 15408    23    80     5    23   389     0     993  STARTMETHOD
 15409    23    82     5    23   389     0      10  public
 15410    23    82    12    23   389     0     111  LongBuffer
 15411    23    82    23    23   389     0     111  duplicate
 15412    23    82    32    23   389     0      59  (
 15413    23    82    33    23   389     0      60  )
 15414    23    82    35    23   389     0      63  {
 15415    23    83     9    23   389     0      19  return
 15416    23    83    16    23   389     0      15  new
 15417    23    83    20    23   389     0     111  ByteBufferAsLongBufferRB
 15418    23    83    44    23   389     0      59  (
 15419    23    83    45    23   389     0     111  bb
 15420    23    83    47    23   389     0      66  ,
 15421    23    84    53    23   389     1     111  this.markValue
 15422    23    84    67    23   389     1      59  (
 15423    23    84    68    23   389     1      60  )
 15424    23    84    69    23   389     1      66  ,
 15425    23    85    53    23   389     1     111  this.position
 15426    23    85    66    23   389     1      59  (
 15427    23    85    67    23   389     1      60  )
 15428    23    85    68    23   389     1      66  ,
 15429    23    86    53    23   389     1     111  this.limit
 15430    23    86    63    23   389     1      59  (
 15431    23    86    64    23   389     1      60  )
 15432    23    86    65    23   389     1      66  ,
 15433    23    87    53    23   389     1     111  this.capacity
 15434    23    87    66    23   389     1      59  (
 15435    23    87    67    23   389     1      60  )
 15436    23    87    68    23   389     1      66  ,
 15437    23    88    53    23   389     0     111  offset
 15438    23    88    59    23   389     0      60  )
 15439    23    88    60    23   389     0     102  ;
 15440    23    89     5    23   389     0      64  }
 15441    23    89     5    23   389     0     994  ENDMETHOD
 15442    23    89     5    23   390     0     995  STARTMETHOD
 15443    23    91     5    23   390     0      10  public
 15444    23    91    12    23   390     0     111  LongBuffer
 15445    23    91    23    23   390     0     111  asReadOnlyBuffer
 15446    23    91    39    23   390     0      59  (
 15447    23    91    40    23   390     0      60  )
 15448    23    91    42    23   390     0      63  {
 15449    23   100     9    23   390     0      19  return
 15450    23   100    16    23   390     0     111  duplicate
 15451    23   100    25    23   390     0      59  (
 15452    23   100    26    23   390     0      60  )
 15453    23   100    27    23   390     0     102  ;
 15454    23   102     5    23   390     0      64  }
 15455    23   102     5    23   390     0     996  ENDMETHOD
 15456    23   102     5    23   391     0     997  STARTMETHOD
 15457    23   120     5    23   391     0      10  public
 15458    23   120    12    23   391     0     111  LongBuffer
 15459    23   120    23    23   391     0     111  put
 15460    23   120    26    23   391     0      59  (
 15461    23   120    27    23   391     0      53  long
 15462    23   120    32    23   391     0     111  x
 15463    23   120    33    23   391     0      60  )
 15464    23   120    35    23   391     0      63  {
 15465    23   125     9    23   391     0      20  throw
 15466    23   125    15    23   391     0      15  new
 15467    23   125    19    23   391     0     111  ReadOnlyBufferException
 15468    23   125    42    23   391     0      59  (
 15469    23   125    43    23   391     0      60  )
 15470    23   125    44    23   391     0     102  ;
 15471    23   127     5    23   391     0      64  }
 15472    23   127     5    23   391     0     998  ENDMETHOD
 15473    23   127     5    23   392     0     999  STARTMETHOD
 15474    23   129     5    23   392     0      10  public
 15475    23   129    12    23   392     0     111  LongBuffer
 15476    23   129    23    23   392     0     111  put
 15477    23   129    26    23   392     0      59  (
 15478    23   129    27    23   392     0      36  int
 15479    23   129    31    23   392     0     111  i
 15480    23   129    32    23   392     0      66  ,
 15481    23   129    34    23   392     0      53  long
 15482    23   129    39    23   392     0     111  x
 15483    23   129    40    23   392     0      60  )
 15484    23   129    42    23   392     0      63  {
 15485    23   134     9    23   392     0      20  throw
 15486    23   134    15    23   392     0      15  new
 15487    23   134    19    23   392     0     111  ReadOnlyBufferException
 15488    23   134    42    23   392     0      59  (
 15489    23   134    43    23   392     0      60  )
 15490    23   134    44    23   392     0     102  ;
 15491    23   136     5    23   392     0      64  }
 15492    23   136     5    23   392     0    1000  ENDMETHOD
 15493    23   136     5    23   393     0    1001  STARTMETHOD
 15494    23   138     5    23   393     0      10  public
 15495    23   138    12    23   393     0     111  LongBuffer
 15496    23   138    23    23   393     0     111  compact
 15497    23   138    30    23   393     0      59  (
 15498    23   138    31    23   393     0      60  )
 15499    23   138    33    23   393     0      63  {
 15500    23   155     9    23   393     0      20  throw
 15501    23   155    15    23   393     0      15  new
 15502    23   155    19    23   393     0     111  ReadOnlyBufferException
 15503    23   155    42    23   393     0      59  (
 15504    23   155    43    23   393     0      60  )
 15505    23   155    44    23   393     0     102  ;
 15506    23   157     5    23   393     0      64  }
 15507    23   157     5    23   393     0    1002  ENDMETHOD
 15508    23   157     5    23   394     0    1003  STARTMETHOD
 15509    23   159     5    23   394     0      10  public
 15510    23   159    12    23   394     0      39  boolean
 15511    23   159    20    23   394     0     111  isDirect
 15512    23   159    28    23   394     0      59  (
 15513    23   159    29    23   394     0      60  )
 15514    23   159    31    23   394     0      63  {
 15515    23   160     9    23   394     0      19  return
 15516    23   160    16    23   394     0     111  bb.isDirect
 15517    23   160    27    23   394     0      59  (
 15518    23   160    28    23   394     0      60  )
 15519    23   160    29    23   394     1     102  ;
 15520    23   161     5    23   394     1      64  }
 15521    23   161     5    23   394     0    1004  ENDMETHOD
 15522    23   161     5    23   395     0    1005  STARTMETHOD
 15523    23   163     5    23   395     0      10  public
 15524    23   163    12    23   395     0      39  boolean
 15525    23   163    20    23   395     0     111  isReadOnly
 15526    23   163    30    23   395     0      59  (
 15527    23   163    31    23   395     0      60  )
 15528    23   163    33    23   395     0      63  {
 15529    23   164     9    23   395     0      19  return
 15530    23   164    16    23   395     0      52  true
 15531    23   164    20    23   395     1     102  ;
 15532    23   165     5    23   395     1      64  }
 15533    23   165     5    23   395     0    1006  ENDMETHOD
 15534    23   165     5    23   396     0    1007  STARTMETHOD
 15535    23   207     5    23   396     0      10  public
 15536    23   207    12    23   396     0     111  ByteOrder
 15537    23   207    22    23   396     0     111  order
 15538    23   207    27    23   396     0      59  (
 15539    23   207    28    23   396     0      60  )
 15540    23   207    30    23   396     0      63  {
 15541    23   209     9    23   396     0      19  return
 15542    23   209    16    23   396     0     111  ByteOrder.BIG_ENDIAN
 15543    23   209    36    23   396     1     102  ;
 15544    23   214     5    23   396     1      64  }
 15545    23   214     5    23   396     0    1008  ENDMETHOD
 15546    23   216     1    23    -1     0      64  }
 15547    23   216     1    23    -1     1    1009  ENDCLASS
 15548    23   216     1    -1    -1     1    1010  ENDFILE C:\javasrc\java\nio\ByteBufferAsLongBufferRB.java
 15549    24     1     1    -1    -1     1    1011  STARTFILE C:\javasrc\java\nio\ByteBufferAsLongBufferRL.java
 15550    24    28     1    -1    -1     0       5  package
 15551    24    28     9    -1    -1     0     111  java.nio
 15552    24    28    17    -1    -1     0     102  ;
 15553    24    31     1    24    -1     0    1012  STARTCLASS
 15554    24    31     1    24    -1     0      24  class
 15555    24    31     7    24    -1     0     111  ByteBufferAsLongBufferRL
 15556    24    32     5    24    -1     0      38  extends
 15557    24    32    13    24    -1     0     111  ByteBufferAsLongBufferL
 15558    24    33     1    24    -1     0      63  {
 15559    24    33     1    24   397     0    1013  STARTMETHOD
 15560    24    42     5    24   397     0     111  ByteBufferAsLongBufferRL
 15561    24    42    29    24   397     0      59  (
 15562    24    42    30    24   397     0     111  ByteBuffer
 15563    24    42    41    24   397     0     111  bb
 15564    24    42    43    24   397     0      60  )
 15565    24    42    45    24   397     0      63  {
 15566    24    55     9    24   397     0      27  super
 15567    24    55    14    24   397     0      59  (
 15568    24    55    15    24   397     0     111  bb
 15569    24    55    17    24   397     0      60  )
 15570    24    55    18    24   397     0     102  ;
 15571    24    57     5    24   397     0      64  }
 15572    24    57     5    24   397     0    1014  ENDMETHOD
 15573    24    57     5    24   398     0    1015  STARTMETHOD
 15574    24    59     5    24   398     0     111  ByteBufferAsLongBufferRL
 15575    24    59    29    24   398     0      59  (
 15576    24    59    30    24   398     0     111  ByteBuffer
 15577    24    59    41    24   398     0     111  bb
 15578    24    59    43    24   398     0      66  ,
 15579    24    60    38    24   398     0      36  int
 15580    24    60    42    24   398     0     111  mark
 15581    24    60    46    24   398     0      66  ,
 15582    24    60    48    24   398     0      36  int
 15583    24    60    52    24   398     0     111  pos
 15584    24    60    55    24   398     0      66  ,
 15585    24    60    57    24   398     0      36  int
 15586    24    60    61    24   398     0     111  lim
 15587    24    60    64    24   398     0      66  ,
 15588    24    60    66    24   398     0      36  int
 15589    24    60    70    24   398     0     111  cap
 15590    24    60    73    24   398     0      66  ,
 15591    24    61    38    24   398     0      36  int
 15592    24    61    42    24   398     0     111  off
 15593    24    61    45    24   398     0      60  )
 15594    24    62     5    24   398     0      63  {
 15595    24    68     9    24   398     0      27  super
 15596    24    68    14    24   398     0      59  (
 15597    24    68    15    24   398     0     111  bb
 15598    24    68    17    24   398     0      66  ,
 15599    24    68    19    24   398     0     111  mark
 15600    24    68    23    24   398     0      66  ,
 15601    24    68    25    24   398     0     111  pos
 15602    24    68    28    24   398     0      66  ,
 15603    24    68    30    24   398     0     111  lim
 15604    24    68    33    24   398     0      66  ,
 15605    24    68    35    24   398     0     111  cap
 15606    24    68    38    24   398     0      66  ,
 15607    24    68    40    24   398     0     111  off
 15608    24    68    43    24   398     0      60  )
 15609    24    68    44    24   398     0     102  ;
 15610    24    70     5    24   398     0      64  }
 15611    24    70     5    24   398     0    1016  ENDMETHOD
 15612    24    70     5    24   399     0    1017  STARTMETHOD
 15613    24    72     5    24   399     0      10  public
 15614    24    72    12    24   399     0     111  LongBuffer
 15615    24    72    23    24   399     0     111  slice
 15616    24    72    28    24   399     0      59  (
 15617    24    72    29    24   399     0      60  )
 15618    24    72    31    24   399     0      63  {
 15619    24    73     9    24   399     1      36  int
 15620    24    73    13    24   399     1     111  pos
 15621    24    73    17    24   399     1      67  =
 15622    24    73    19    24   399     1     111  this.position
 15623    24    73    32    24   399     1      59  (
 15624    24    73    33    24   399     1      60  )
 15625    24    73    34    24   399     1     102  ;
 15626    24    74     9    24   399     1      36  int
 15627    24    74    13    24   399     1     111  lim
 15628    24    74    17    24   399     1      67  =
 15629    24    74    19    24   399     1     111  this.limit
 15630    24    74    29    24   399     1      59  (
 15631    24    74    30    24   399     1      60  )
 15632    24    74    31    24   399     1     102  ;
 15633    24    75     9    24   399     0     111  assert
 15634    24    75    16    24   399     0      59  (
 15635    24    75    17    24   399     0     111  pos
 15636    24    75    21    24   399     0      92  <=
 15637    24    75    24    24   399     0     111  lim
 15638    24    75    27    24   399     0      60  )
 15639    24    75    28    24   399     0     102  ;
 15640    24    76     9    24   399     0      36  int
 15641    24    76    13    24   399     0     111  rem
 15642    24    76    17    24   399     0      67  =
 15643    24    76    19    24   399     0      59  (
 15644    24    76    20    24   399     0     111  pos
 15645    24    76    24    24   399     0      92  <=
 15646    24    76    27    24   399     0     111  lim
 15647    24    76    31    24   399     0      58  ?
 15648    24    76    33    24   399     0     111  lim
 15649    24    76    37    24   399     0      77  -
 15650    24    76    39    24   399     0     111  pos
 15651    24    76    43    24   399     0      65  :
 15652    24    76    45    24   399     0     112  0
 15653    24    76    46    24   399     0      60  )
 15654    24    76    47    24   399     0     102  ;
 15655    24    77     9    24   399     0      36  int
 15656    24    77    13    24   399     0     111  off
 15657    24    77    17    24   399     0      67  =
 15658    24    77    19    24   399     0      59  (
 15659    24    77    20    24   399     0     111  pos
 15660    24    77    24    24   399     0      90  <<
 15661    24    77    27    24   399     0     112  3
 15662    24    77    28    24   399     0      60  )
 15663    24    77    30    24   399     0      74  +
 15664    24    77    32    24   399     0     111  offset
 15665    24    77    38    24   399     0     102  ;
 15666    24    78     9    24   399     0     111  assert
 15667    24    78    16    24   399     0      59  (
 15668    24    78    17    24   399     0     111  off
 15669    24    78    21    24   399     0      88  >=
 15670    24    78    24    24   399     0     112  0
 15671    24    78    25    24   399     0      60  )
 15672    24    78    26    24   399     0     102  ;
 15673    24    79     9    24   399     0      19  return
 15674    24    79    16    24   399     0      15  new
 15675    24    79    20    24   399     0     111  ByteBufferAsLongBufferRL
 15676    24    79    44    24   399     0      59  (
 15677    24    79    45    24   399     0     111  bb
 15678    24    79    47    24   399     0      66  ,
 15679    24    79    49    24   399     0      77  -
 15680    24    79    50    24   399     0     112  1
 15681    24    79    51    24   399     0      66  ,
 15682    24    79    53    24   399     0     112  0
 15683    24    79    54    24   399     0      66  ,
 15684    24    79    56    24   399     0     111  rem
 15685    24    79    59    24   399     0      66  ,
 15686    24    79    61    24   399     0     111  rem
 15687    24    79    64    24   399     0      66  ,
 15688    24    79    66    24   399     0     111  off
 15689    24    79    69    24   399     0      60  )
 15690    24    79    70    24   399     0     102  ;
 15691    24    80     5    24   399     0      64  }
 15692    24    80     5    24   399     0    1018  ENDMETHOD
 15693    24    80     5    24   400     0    1019  STARTMETHOD
 15694    24    82     5    24   400     0      10  public
 15695    24    82    12    24   400     0     111  LongBuffer
 15696    24    82    23    24   400     0     111  duplicate
 15697    24    82    32    24   400     0      59  (
 15698    24    82    33    24   400     0      60  )
 15699    24    82    35    24   400     0      63  {
 15700    24    83     9    24   400     0      19  return
 15701    24    83    16    24   400     0      15  new
 15702    24    83    20    24   400     0     111  ByteBufferAsLongBufferRL
 15703    24    83    44    24   400     0      59  (
 15704    24    83    45    24   400     0     111  bb
 15705    24    83    47    24   400     0      66  ,
 15706    24    84    53    24   400     1     111  this.markValue
 15707    24    84    67    24   400     1      59  (
 15708    24    84    68    24   400     1      60  )
 15709    24    84    69    24   400     1      66  ,
 15710    24    85    53    24   400     1     111  this.position
 15711    24    85    66    24   400     1      59  (
 15712    24    85    67    24   400     1      60  )
 15713    24    85    68    24   400     1      66  ,
 15714    24    86    53    24   400     1     111  this.limit
 15715    24    86    63    24   400     1      59  (
 15716    24    86    64    24   400     1      60  )
 15717    24    86    65    24   400     1      66  ,
 15718    24    87    53    24   400     1     111  this.capacity
 15719    24    87    66    24   400     1      59  (
 15720    24    87    67    24   400     1      60  )
 15721    24    87    68    24   400     1      66  ,
 15722    24    88    53    24   400     0     111  offset
 15723    24    88    59    24   400     0      60  )
 15724    24    88    60    24   400     0     102  ;
 15725    24    89     5    24   400     0      64  }
 15726    24    89     5    24   400     0    1020  ENDMETHOD
 15727    24    89     5    24   401     0    1021  STARTMETHOD
 15728    24    91     5    24   401     0      10  public
 15729    24    91    12    24   401     0     111  LongBuffer
 15730    24    91    23    24   401     0     111  asReadOnlyBuffer
 15731    24    91    39    24   401     0      59  (
 15732    24    91    40    24   401     0      60  )
 15733    24    91    42    24   401     0      63  {
 15734    24   100     9    24   401     0      19  return
 15735    24   100    16    24   401     0     111  duplicate
 15736    24   100    25    24   401     0      59  (
 15737    24   100    26    24   401     0      60  )
 15738    24   100    27    24   401     0     102  ;
 15739    24   102     5    24   401     0      64  }
 15740    24   102     5    24   401     0    1022  ENDMETHOD
 15741    24   102     5    24   402     0    1023  STARTMETHOD
 15742    24   120     5    24   402     0      10  public
 15743    24   120    12    24   402     0     111  LongBuffer
 15744    24   120    23    24   402     0     111  put
 15745    24   120    26    24   402     0      59  (
 15746    24   120    27    24   402     0      53  long
 15747    24   120    32    24   402     0     111  x
 15748    24   120    33    24   402     0      60  )
 15749    24   120    35    24   402     0      63  {
 15750    24   125     9    24   402     0      20  throw
 15751    24   125    15    24   402     0      15  new
 15752    24   125    19    24   402     0     111  ReadOnlyBufferException
 15753    24   125    42    24   402     0      59  (
 15754    24   125    43    24   402     0      60  )
 15755    24   125    44    24   402     0     102  ;
 15756    24   127     5    24   402     0      64  }
 15757    24   127     5    24   402     0    1024  ENDMETHOD
 15758    24   127     5    24   403     0    1025  STARTMETHOD
 15759    24   129     5    24   403     0      10  public
 15760    24   129    12    24   403     0     111  LongBuffer
 15761    24   129    23    24   403     0     111  put
 15762    24   129    26    24   403     0      59  (
 15763    24   129    27    24   403     0      36  int
 15764    24   129    31    24   403     0     111  i
 15765    24   129    32    24   403     0      66  ,
 15766    24   129    34    24   403     0      53  long
 15767    24   129    39    24   403     0     111  x
 15768    24   129    40    24   403     0      60  )
 15769    24   129    42    24   403     0      63  {
 15770    24   134     9    24   403     0      20  throw
 15771    24   134    15    24   403     0      15  new
 15772    24   134    19    24   403     0     111  ReadOnlyBufferException
 15773    24   134    42    24   403     0      59  (
 15774    24   134    43    24   403     0      60  )
 15775    24   134    44    24   403     0     102  ;
 15776    24   136     5    24   403     0      64  }
 15777    24   136     5    24   403     0    1026  ENDMETHOD
 15778    24   136     5    24   404     0    1027  STARTMETHOD
 15779    24   138     5    24   404     0      10  public
 15780    24   138    12    24   404     0     111  LongBuffer
 15781    24   138    23    24   404     0     111  compact
 15782    24   138    30    24   404     0      59  (
 15783    24   138    31    24   404     0      60  )
 15784    24   138    33    24   404     0      63  {
 15785    24   155     9    24   404     0      20  throw
 15786    24   155    15    24   404     0      15  new
 15787    24   155    19    24   404     0     111  ReadOnlyBufferException
 15788    24   155    42    24   404     0      59  (
 15789    24   155    43    24   404     0      60  )
 15790    24   155    44    24   404     0     102  ;
 15791    24   157     5    24   404     0      64  }
 15792    24   157     5    24   404     0    1028  ENDMETHOD
 15793    24   157     5    24   405     0    1029  STARTMETHOD
 15794    24   159     5    24   405     0      10  public
 15795    24   159    12    24   405     0      39  boolean
 15796    24   159    20    24   405     0     111  isDirect
 15797    24   159    28    24   405     0      59  (
 15798    24   159    29    24   405     0      60  )
 15799    24   159    31    24   405     0      63  {
 15800    24   160     9    24   405     0      19  return
 15801    24   160    16    24   405     0     111  bb.isDirect
 15802    24   160    27    24   405     0      59  (
 15803    24   160    28    24   405     0      60  )
 15804    24   160    29    24   405     1     102  ;
 15805    24   161     5    24   405     1      64  }
 15806    24   161     5    24   405     0    1030  ENDMETHOD
 15807    24   161     5    24   406     0    1031  STARTMETHOD
 15808    24   163     5    24   406     0      10  public
 15809    24   163    12    24   406     0      39  boolean
 15810    24   163    20    24   406     0     111  isReadOnly
 15811    24   163    30    24   406     0      59  (
 15812    24   163    31    24   406     0      60  )
 15813    24   163    33    24   406     0      63  {
 15814    24   164     9    24   406     0      19  return
 15815    24   164    16    24   406     0      52  true
 15816    24   164    20    24   406     1     102  ;
 15817    24   165     5    24   406     1      64  }
 15818    24   165     5    24   406     0    1032  ENDMETHOD
 15819    24   165     5    24   407     0    1033  STARTMETHOD
 15820    24   207     5    24   407     0      10  public
 15821    24   207    12    24   407     0     111  ByteOrder
 15822    24   207    22    24   407     0     111  order
 15823    24   207    27    24   407     0      59  (
 15824    24   207    28    24   407     0      60  )
 15825    24   207    30    24   407     0      63  {
 15826    24   212     9    24   407     0      19  return
 15827    24   212    16    24   407     0     111  ByteOrder.LITTLE_ENDIAN
 15828    24   212    39    24   407     1     102  ;
 15829    24   214     5    24   407     1      64  }
 15830    24   214     5    24   407     0    1034  ENDMETHOD
 15831    24   216     1    24    -1     0      64  }
 15832    24   216     1    24    -1     1    1035  ENDCLASS
 15833    24   216     1    -1    -1     1    1036  ENDFILE C:\javasrc\java\nio\ByteBufferAsLongBufferRL.java
 15834    25     1     1    -1    -1     1    1037  STARTFILE C:\javasrc\java\nio\ByteBufferAsShortBufferB.java
 15835    25    28     1    -1    -1     0       5  package
 15836    25    28     9    -1    -1     0     111  java.nio
 15837    25    28    17    -1    -1     0     102  ;
 15838    25    31     1    25    -1     0    1038  STARTCLASS
 15839    25    31     1    25    -1     0      24  class
 15840    25    31     7    25    -1     0     111  ByteBufferAsShortBufferB
 15841    25    32     5    25    -1     0      38  extends
 15842    25    32    13    25    -1     0     111  ShortBuffer
 15843    25    33     1    25    -1     0      63  {
 15844    25    37     5    25    -1     0      23  protected
 15845    25    37    15    25    -1     0       6  final
 15846    25    37    21    25    -1     0     111  ByteBuffer
 15847    25    37    32    25    -1     0     111  bb
 15848    25    37    34    25    -1     0     102  ;
 15849    25    38     5    25    -1     0      23  protected
 15850    25    38    15    25    -1     0       6  final
 15851    25    38    21    25    -1     0      36  int
 15852    25    38    25    25    -1     0     111  offset
 15853    25    38    31    25    -1     0     102  ;
 15854    25    38    31    25   408     0    1039  STARTMETHOD
 15855    25    42     5    25   408     0     111  ByteBufferAsShortBufferB
 15856    25    42    29    25   408     0      59  (
 15857    25    42    30    25   408     0     111  ByteBuffer
 15858    25    42    41    25   408     0     111  bb
 15859    25    42    43    25   408     0      60  )
 15860    25    42    45    25   408     0      63  {
 15861    25    44     9    25   408     0      27  super
 15862    25    44    14    25   408     0      59  (
 15863    25    44    15    25   408     0      77  -
 15864    25    44    16    25   408     0     112  1
 15865    25    44    17    25   408     0      66  ,
 15866    25    44    19    25   408     0     112  0
 15867    25    44    20    25   408     0      66  ,
 15868    25    45    15    25   408     0     111  bb.remaining
 15869    25    45    27    25   408     0      59  (
 15870    25    45    28    25   408     0      60  )
 15871    25    45    30    25   408     0      84  >>
 15872    25    45    33    25   408     0     112  1
 15873    25    45    34    25   408     0      66  ,
 15874    25    46    15    25   408     0     111  bb.remaining
 15875    25    46    27    25   408     0      59  (
 15876    25    46    28    25   408     0      60  )
 15877    25    46    30    25   408     0      84  >>
 15878    25    46    33    25   408     0     112  1
 15879    25    46    34    25   408     0      60  )
 15880    25    46    35    25   408     0     102  ;
 15881    25    47     9    25   408     0     111  this.bb
 15882    25    47    17    25   408     0      67  =
 15883    25    47    19    25   408     0     111  bb
 15884    25    47    21    25   408     0     102  ;
 15885    25    49     9    25   408     0      36  int
 15886    25    49    13    25   408     0     111  cap
 15887    25    49    17    25   408     0      67  =
 15888    25    49    19    25   408     0     111  this.capacity
 15889    25    49    32    25   408     0      59  (
 15890    25    49    33    25   408     0      60  )
 15891    25    49    34    25   408     0     102  ;
 15892    25    50     9    25   408     0     111  this.limit
 15893    25    50    19    25   408     0      59  (
 15894    25    50    20    25   408     0     111  cap
 15895    25    50    23    25   408     0      60  )
 15896    25    50    24    25   408     0     102  ;
 15897    25    51     9    25   408     0      36  int
 15898    25    51    13    25   408     0     111  pos
 15899    25    51    17    25   408     0      67  =
 15900    25    51    19    25   408     0     111  this.position
 15901    25    51    32    25   408     0      59  (
 15902    25    51    33    25   408     0      60  )
 15903    25    51    34    25   408     0     102  ;
 15904    25    52     9    25   408     0     111  assert
 15905    25    52    16    25   408     0      59  (
 15906    25    52    17    25   408     0     111  pos
 15907    25    52    21    25   408     0      92  <=
 15908    25    52    24    25   408     0     111  cap
 15909    25    52    27    25   408     0      60  )
 15910    25    52    28    25   408     0     102  ;
 15911    25    53     9    25   408     0     111  offset
 15912    25    53    16    25   408     0      67  =
 15913    25    53    18    25   408     0     111  pos
 15914    25    53    21    25   408     0     102  ;
 15915    25    57     5    25   408     0      64  }
 15916    25    57     5    25   408     0    1040  ENDMETHOD
 15917    25    57     5    25   409     0    1041  STARTMETHOD
 15918    25    59     5    25   409     0     111  ByteBufferAsShortBufferB
 15919    25    59    29    25   409     0      59  (
 15920    25    59    30    25   409     0     111  ByteBuffer
 15921    25    59    41    25   409     0     111  bb
 15922    25    59    43    25   409     0      66  ,
 15923    25    60    38    25   409     0      36  int
 15924    25    60    42    25   409     0     111  mark
 15925    25    60    46    25   409     0      66  ,
 15926    25    60    48    25   409     0      36  int
 15927    25    60    52    25   409     0     111  pos
 15928    25    60    55    25   409     0      66  ,
 15929    25    60    57    25   409     0      36  int
 15930    25    60    61    25   409     0     111  lim
 15931    25    60    64    25   409     0      66  ,
 15932    25    60    66    25   409     0      36  int
 15933    25    60    70    25   409     0     111  cap
 15934    25    60    73    25   409     0      66  ,
 15935    25    61    38    25   409     0      36  int
 15936    25    61    42    25   409     0     111  off
 15937    25    61    45    25   409     0      60  )
 15938    25    62     5    25   409     0      63  {
 15939    25    64     9    25   409     0      27  super
 15940    25    64    14    25   409     0      59  (
 15941    25    64    15    25   409     0     111  mark
 15942    25    64    19    25   409     0      66  ,
 15943    25    64    21    25   409     0     111  pos
 15944    25    64    24    25   409     0      66  ,
 15945    25    64    26    25   409     0     111  lim
 15946    25    64    29    25   409     0      66  ,
 15947    25    64    31    25   409     0     111  cap
 15948    25    64    34    25   409     0      60  )
 15949    25    64    35    25   409     0     102  ;
 15950    25    65     9    25   409     1     111  this.bb
 15951    25    65    17    25   409     1      67  =
 15952    25    65    19    25   409     1     111  bb
 15953    25    65    21    25   409     1     102  ;
 15954    25    66     9    25   409     1     111  offset
 15955    25    66    16    25   409     1      67  =
 15956    25    66    18    25   409     1     111  off
 15957    25    66    21    25   409     1     102  ;
 15958    25    70     5    25   409     0      64  }
 15959    25    70     5    25   409     0    1042  ENDMETHOD
 15960    25    70     5    25   410     0    1043  STARTMETHOD
 15961    25    72     5    25   410     0      10  public
 15962    25    72    12    25   410     0     111  ShortBuffer
 15963    25    72    24    25   410     0     111  slice
 15964    25    72    29    25   410     0      59  (
 15965    25    72    30    25   410     0      60  )
 15966    25    72    32    25   410     0      63  {
 15967    25    73     9    25   410     1      36  int
 15968    25    73    13    25   410     1     111  pos
 15969    25    73    17    25   410     1      67  =
 15970    25    73    19    25   410     1     111  this.position
 15971    25    73    32    25   410     1      59  (
 15972    25    73    33    25   410     1      60  )
 15973    25    73    34    25   410     1     102  ;
 15974    25    74     9    25   410     1      36  int
 15975    25    74    13    25   410     1     111  lim
 15976    25    74    17    25   410     1      67  =
 15977    25    74    19    25   410     1     111  this.limit
 15978    25    74    29    25   410     1      59  (
 15979    25    74    30    25   410     1      60  )
 15980    25    74    31    25   410     1     102  ;
 15981    25    75     9    25   410     0     111  assert
 15982    25    75    16    25   410     0      59  (
 15983    25    75    17    25   410     0     111  pos
 15984    25    75    21    25   410     0      92  <=
 15985    25    75    24    25   410     0     111  lim
 15986    25    75    27    25   410     0      60  )
 15987    25    75    28    25   410     0     102  ;
 15988    25    76     9    25   410     0      36  int
 15989    25    76    13    25   410     0     111  rem
 15990    25    76    17    25   410     0      67  =
 15991    25    76    19    25   410     0      59  (
 15992    25    76    20    25   410     0     111  pos
 15993    25    76    24    25   410     0      92  <=
 15994    25    76    27    25   410     0     111  lim
 15995    25    76    31    25   410     0      58  ?
 15996    25    76    33    25   410     0     111  lim
 15997    25    76    37    25   410     0      77  -
 15998    25    76    39    25   410     0     111  pos
 15999    25    76    43    25   410     0      65  :
 16000    25    76    45    25   410     0     112  0
 16001    25    76    46    25   410     0      60  )
 16002    25    76    47    25   410     0     102  ;
 16003    25    77     9    25   410     0      36  int
 16004    25    77    13    25   410     0     111  off
 16005    25    77    17    25   410     0      67  =
 16006    25    77    19    25   410     0      59  (
 16007    25    77    20    25   410     0     111  pos
 16008    25    77    24    25   410     0      90  <<
 16009    25    77    27    25   410     0     112  1
 16010    25    77    28    25   410     0      60  )
 16011    25    77    30    25   410     0      74  +
 16012    25    77    32    25   410     0     111  offset
 16013    25    77    38    25   410     0     102  ;
 16014    25    78     9    25   410     0     111  assert
 16015    25    78    16    25   410     0      59  (
 16016    25    78    17    25   410     0     111  off
 16017    25    78    21    25   410     0      88  >=
 16018    25    78    24    25   410     0     112  0
 16019    25    78    25    25   410     0      60  )
 16020    25    78    26    25   410     0     102  ;
 16021    25    79     9    25   410     0      19  return
 16022    25    79    16    25   410     0      15  new
 16023    25    79    20    25   410     0     111  ByteBufferAsShortBufferB
 16024    25    79    44    25   410     0      59  (
 16025    25    79    45    25   410     0     111  bb
 16026    25    79    47    25   410     0      66  ,
 16027    25    79    49    25   410     0      77  -
 16028    25    79    50    25   410     0     112  1
 16029    25    79    51    25   410     0      66  ,
 16030    25    79    53    25   410     0     112  0
 16031    25    79    54    25   410     0      66  ,
 16032    25    79    56    25   410     0     111  rem
 16033    25    79    59    25   410     0      66  ,
 16034    25    79    61    25   410     0     111  rem
 16035    25    79    64    25   410     1      66  ,
 16036    25    79    66    25   410     1     111  off
 16037    25    79    69    25   410     1      60  )
 16038    25    79    70    25   410     1     102  ;
 16039    25    80     5    25   410     1      64  }
 16040    25    80     5    25   410     0    1044  ENDMETHOD
 16041    25    80     5    25   411     0    1045  STARTMETHOD
 16042    25    82     5    25   411     0      10  public
 16043    25    82    12    25   411     0     111  ShortBuffer
 16044    25    82    24    25   411     0     111  duplicate
 16045    25    82    33    25   411     0      59  (
 16046    25    82    34    25   411     0      60  )
 16047    25    82    36    25   411     0      63  {
 16048    25    83     9    25   411     0      19  return
 16049    25    83    16    25   411     0      15  new
 16050    25    83    20    25   411     0     111  ByteBufferAsShortBufferB
 16051    25    83    44    25   411     0      59  (
 16052    25    83    45    25   411     0     111  bb
 16053    25    83    47    25   411     0      66  ,
 16054    25    84    53    25   411     1     111  this.markValue
 16055    25    84    67    25   411     1      59  (
 16056    25    84    68    25   411     1      60  )
 16057    25    84    69    25   411     1      66  ,
 16058    25    85    53    25   411     1     111  this.position
 16059    25    85    66    25   411     1      59  (
 16060    25    85    67    25   411     1      60  )
 16061    25    85    68    25   411     1      66  ,
 16062    25    86    53    25   411     1     111  this.limit
 16063    25    86    63    25   411     1      59  (
 16064    25    86    64    25   411     1      60  )
 16065    25    86    65    25   411     1      66  ,
 16066    25    87    53    25   411     1     111  this.capacity
 16067    25    87    66    25   411     1      59  (
 16068    25    87    67    25   411     1      60  )
 16069    25    87    68    25   411     1      66  ,
 16070    25    88    53    25   411     1     111  offset
 16071    25    88    59    25   411     1      60  )
 16072    25    88    60    25   411     1     102  ;
 16073    25    89     5    25   411     1      64  }
 16074    25    89     5    25   411     0    1046  ENDMETHOD
 16075    25    89     5    25   412     0    1047  STARTMETHOD
 16076    25    91     5    25   412     0      10  public
 16077    25    91    12    25   412     0     111  ShortBuffer
 16078    25    91    24    25   412     0     111  asReadOnlyBuffer
 16079    25    91    40    25   412     0      59  (
 16080    25    91    41    25   412     0      60  )
 16081    25    91    43    25   412     0      63  {
 16082    25    93     9    25   412     0      19  return
 16083    25    93    16    25   412     0      15  new
 16084    25    93    20    25   412     0     111  ByteBufferAsShortBufferRB
 16085    25    93    45    25   412     0      59  (
 16086    25    93    46    25   412     0     111  bb
 16087    25    93    48    25   412     0      66  ,
 16088    25    94    50    25   412     1     111  this.markValue
 16089    25    94    64    25   412     1      59  (
 16090    25    94    65    25   412     1      60  )
 16091    25    94    66    25   412     1      66  ,
 16092    25    95    50    25   412     1     111  this.position
 16093    25    95    63    25   412     1      59  (
 16094    25    95    64    25   412     1      60  )
 16095    25    95    65    25   412     1      66  ,
 16096    25    96    50    25   412     1     111  this.limit
 16097    25    96    60    25   412     1      59  (
 16098    25    96    61    25   412     1      60  )
 16099    25    96    62    25   412     1      66  ,
 16100    25    97    50    25   412     1     111  this.capacity
 16101    25    97    63    25   412     1      59  (
 16102    25    97    64    25   412     1      60  )
 16103    25    97    65    25   412     1      66  ,
 16104    25    98    50    25   412     1     111  offset
 16105    25    98    56    25   412     1      60  )
 16106    25    98    57    25   412     1     102  ;
 16107    25   102     5    25   412     1      64  }
 16108    25   102     5    25   412     0    1048  ENDMETHOD
 16109    25   102     5    25   413     0    1049  STARTMETHOD
 16110    25   106     5    25   413     0      23  protected
 16111    25   106    15    25   413     0      36  int
 16112    25   106    19    25   413     0     111  ix
 16113    25   106    21    25   413     0      59  (
 16114    25   106    22    25   413     0      36  int
 16115    25   106    26    25   413     0     111  i
 16116    25   106    27    25   413     0      60  )
 16117    25   106    29    25   413     0      63  {
 16118    25   107     9    25   413     0      19  return
 16119    25   107    16    25   413     0      59  (
 16120    25   107    17    25   413     0     111  i
 16121    25   107    19    25   413     0      90  <<
 16122    25   107    22    25   413     0     112  1
 16123    25   107    23    25   413     0      60  )
 16124    25   107    25    25   413     0      74  +
 16125    25   107    27    25   413     0     111  offset
 16126    25   107    33    25   413     0     102  ;
 16127    25   108     5    25   413     0      64  }
 16128    25   108     5    25   413     0    1050  ENDMETHOD
 16129    25   108     5    25   414     0    1051  STARTMETHOD
 16130    25   110     5    25   414     0      10  public
 16131    25   110    12    25   414     0      12  short
 16132    25   110    18    25   414     0     111  get
 16133    25   110    21    25   414     0      59  (
 16134    25   110    22    25   414     0      60  )
 16135    25   110    24    25   414     0      63  {
 16136    25   111     9    25   414     0      19  return
 16137    25   111    16    25   414     0     111  Bits.getShortB
 16138    25   111    30    25   414     0      59  (
 16139    25   111    31    25   414     0     111  bb
 16140    25   111    33    25   414     0      66  ,
 16141    25   111    35    25   414     0     111  ix
 16142    25   111    37    25   414     0      59  (
 16143    25   111    38    25   414     0     111  nextGetIndex
 16144    25   111    50    25   414     0      59  (
 16145    25   111    51    25   414     0      60  )
 16146    25   111    52    25   414     0      60  )
 16147    25   111    53    25   414     0      60  )
 16148    25   111    54    25   414     0     102  ;
 16149    25   112     5    25   414     0      64  }
 16150    25   112     5    25   414     0    1052  ENDMETHOD
 16151    25   112     5    25   415     0    1053  STARTMETHOD
 16152    25   114     5    25   415     0      10  public
 16153    25   114    12    25   415     0      12  short
 16154    25   114    18    25   415     0     111  get
 16155    25   114    21    25   415     0      59  (
 16156    25   114    22    25   415     0      36  int
 16157    25   114    26    25   415     0     111  i
 16158    25   114    27    25   415     0      60  )
 16159    25   114    29    25   415     0      63  {
 16160    25   115     9    25   415     0      19  return
 16161    25   115    16    25   415     0     111  Bits.getShortB
 16162    25   115    30    25   415     0      59  (
 16163    25   115    31    25   415     0     111  bb
 16164    25   115    33    25   415     0      66  ,
 16165    25   115    35    25   415     0     111  ix
 16166    25   115    37    25   415     0      59  (
 16167    25   115    38    25   415     0     111  checkIndex
 16168    25   115    48    25   415     0      59  (
 16169    25   115    49    25   415     0     111  i
 16170    25   115    50    25   415     0      60  )
 16171    25   115    51    25   415     0      60  )
 16172    25   115    52    25   415     0      60  )
 16173    25   115    53    25   415     0     102  ;
 16174    25   116     5    25   415     0      64  }
 16175    25   116     5    25   415     0    1054  ENDMETHOD
 16176    25   116     5    25   416     0    1055  STARTMETHOD
 16177    25   120     5    25   416     0      10  public
 16178    25   120    12    25   416     0     111  ShortBuffer
 16179    25   120    24    25   416     0     111  put
 16180    25   120    27    25   416     0      59  (
 16181    25   120    28    25   416     0      12  short
 16182    25   120    34    25   416     0     111  x
 16183    25   120    35    25   416     0      60  )
 16184    25   120    37    25   416     0      63  {
 16185    25   122     9    25   416     0     111  Bits.putShortB
 16186    25   122    23    25   416     0      59  (
 16187    25   122    24    25   416     0     111  bb
 16188    25   122    26    25   416     0      66  ,
 16189    25   122    28    25   416     0     111  ix
 16190    25   122    30    25   416     0      59  (
 16191    25   122    31    25   416     0     111  nextPutIndex
 16192    25   122    43    25   416     0      59  (
 16193    25   122    44    25   416     0      60  )
 16194    25   122    45    25   416     0      60  )
 16195    25   122    46    25   416     0      66  ,
 16196    25   122    48    25   416     0     111  x
 16197    25   122    49    25   416     0      60  )
 16198    25   122    50    25   416     0     102  ;
 16199    25   123     9    25   416     0      19  return
 16200    25   123    16    25   416     0      44  this
 16201    25   123    20    25   416     0     102  ;
 16202    25   127     5    25   416     0      64  }
 16203    25   127     5    25   416     0    1056  ENDMETHOD
 16204    25   127     5    25   417     0    1057  STARTMETHOD
 16205    25   129     5    25   417     0      10  public
 16206    25   129    12    25   417     0     111  ShortBuffer
 16207    25   129    24    25   417     0     111  put
 16208    25   129    27    25   417     0      59  (
 16209    25   129    28    25   417     0      36  int
 16210    25   129    32    25   417     0     111  i
 16211    25   129    33    25   417     0      66  ,
 16212    25   129    35    25   417     0      12  short
 16213    25   129    41    25   417     0     111  x
 16214    25   129    42    25   417     0      60  )
 16215    25   129    44    25   417     0      63  {
 16216    25   131     9    25   417     0     111  Bits.putShortB
 16217    25   131    23    25   417     0      59  (
 16218    25   131    24    25   417     0     111  bb
 16219    25   131    26    25   417     0      66  ,
 16220    25   131    28    25   417     0     111  ix
 16221    25   131    30    25   417     0      59  (
 16222    25   131    31    25   417     0     111  checkIndex
 16223    25   131    41    25   417     0      59  (
 16224    25   131    42    25   417     0     111  i
 16225    25   131    43    25   417     0      60  )
 16226    25   131    44    25   417     0      60  )
 16227    25   131    45    25   417     0      66  ,
 16228    25   131    47    25   417     0     111  x
 16229    25   131    48    25   417     0      60  )
 16230    25   131    49    25   417     0     102  ;
 16231    25   132     9    25   417     0      19  return
 16232    25   132    16    25   417     0      44  this
 16233    25   132    20    25   417     0     102  ;
 16234    25   136     5    25   417     0      64  }
 16235    25   136     5    25   417     0    1058  ENDMETHOD
 16236    25   136     5    25   418     0    1059  STARTMETHOD
 16237    25   138     5    25   418     0      10  public
 16238    25   138    12    25   418     0     111  ShortBuffer
 16239    25   138    24    25   418     0     111  compact
 16240    25   138    31    25   418     0      59  (
 16241    25   138    32    25   418     0      60  )
 16242    25   138    34    25   418     0      63  {
 16243    25   140     9    25   418     1      36  int
 16244    25   140    13    25   418     1     111  pos
 16245    25   140    17    25   418     1      67  =
 16246    25   140    19    25   418     1     111  position
 16247    25   140    27    25   418     1      59  (
 16248    25   140    28    25   418     1      60  )
 16249    25   140    29    25   418     1     102  ;
 16250    25   141     9    25   418     1      36  int
 16251    25   141    13    25   418     1     111  lim
 16252    25   141    17    25   418     1      67  =
 16253    25   141    19    25   418     1     111  limit
 16254    25   141    24    25   418     1      59  (
 16255    25   141    25    25   418     1      60  )
 16256    25   141    26    25   418     1     102  ;
 16257    25   142     9    25   418     0     111  assert
 16258    25   142    16    25   418     0      59  (
 16259    25   142    17    25   418     0     111  pos
 16260    25   142    21    25   418     0      92  <=
 16261    25   142    24    25   418     0     111  lim
 16262    25   142    27    25   418     0      60  )
 16263    25   142    28    25   418     0     102  ;
 16264    25   143     9    25   418     0      36  int
 16265    25   143    13    25   418     0     111  rem
 16266    25   143    17    25   418     0      67  =
 16267    25   143    19    25   418     0      59  (
 16268    25   143    20    25   418     0     111  pos
 16269    25   143    24    25   418     0      92  <=
 16270    25   143    27    25   418     0     111  lim
 16271    25   143    31    25   418     0      58  ?
 16272    25   143    33    25   418     0     111  lim
 16273    25   143    37    25   418     0      77  -
 16274    25   143    39    25   418     0     111  pos
 16275    25   143    43    25   418     0      65  :
 16276    25   143    45    25   418     0     112  0
 16277    25   143    46    25   418     0      60  )
 16278    25   143    47    25   418     0     102  ;
 16279    25   145     9    25   418     0     111  ByteBuffer
 16280    25   145    20    25   418     0     111  db
 16281    25   145    23    25   418     0      67  =
 16282    25   145    25    25   418     0     111  bb.duplicate
 16283    25   145    37    25   418     0      59  (
 16284    25   145    38    25   418     0      60  )
 16285    25   145    39    25   418     0     102  ;
 16286    25   146     9    25   418     0     111  db.limit
 16287    25   146    17    25   418     0      59  (
 16288    25   146    18    25   418     0     111  ix
 16289    25   146    20    25   418     0      59  (
 16290    25   146    21    25   418     0     111  lim
 16291    25   146    24    25   418     0      60  )
 16292    25   146    25    25   418     0      60  )
 16293    25   146    26    25   418     0     102  ;
 16294    25   147     9    25   418     0     111  db.position
 16295    25   147    20    25   418     0      59  (
 16296    25   147    21    25   418     0     111  ix
 16297    25   147    23    25   418     0      59  (
 16298    25   147    24    25   418     0     112  0
 16299    25   147    25    25   418     0      60  )
 16300    25   147    26    25   418     0      60  )
 16301    25   147    27    25   418     0     102  ;
 16302    25   148     9    25   418     0     111  ByteBuffer
 16303    25   148    20    25   418     0     111  sb
 16304    25   148    23    25   418     0      67  =
 16305    25   148    25    25   418     0     111  db.slice
 16306    25   148    33    25   418     0      59  (
 16307    25   148    34    25   418     0      60  )
 16308    25   148    35    25   418     0     102  ;
 16309    25   149     9    25   418     0     111  sb.position
 16310    25   149    20    25   418     0      59  (
 16311    25   149    21    25   418     0     111  pos
 16312    25   149    25    25   418     0      90  <<
 16313    25   149    28    25   418     0     112  1
 16314    25   149    29    25   418     0      60  )
 16315    25   149    30    25   418     0     102  ;
 16316    25   150     9    25   418     0     111  sb.compact
 16317    25   150    19    25   418     0      59  (
 16318    25   150    20    25   418     0      60  )
 16319    25   150    21    25   418     0     102  ;
 16320    25   151     9    25   418     0     111  position
 16321    25   151    17    25   418     0      59  (
 16322    25   151    18    25   418     0     111  rem
 16323    25   151    21    25   418     0      60  )
 16324    25   151    22    25   418     0     102  ;
 16325    25   152     9    25   418     0     111  limit
 16326    25   152    14    25   418     0      59  (
 16327    25   152    15    25   418     0     111  capacity
 16328    25   152    23    25   418     0      59  (
 16329    25   152    24    25   418     0      60  )
 16330    25   152    25    25   418     0      60  )
 16331    25   152    26    25   418     0     102  ;
 16332    25   153     9    25   418     0      19  return
 16333    25   153    16    25   418     0      44  this
 16334    25   153    20    25   418     0     102  ;
 16335    25   157     5    25   418     0      64  }
 16336    25   157     5    25   418     0    1060  ENDMETHOD
 16337    25   157     5    25   419     0    1061  STARTMETHOD
 16338    25   159     5    25   419     0      10  public
 16339    25   159    12    25   419     0      39  boolean
 16340    25   159    20    25   419     0     111  isDirect
 16341    25   159    28    25   419     0      59  (
 16342    25   159    29    25   419     0      60  )
 16343    25   159    31    25   419     0      63  {
 16344    25   160     9    25   419     0      19  return
 16345    25   160    16    25   419     0     111  bb.isDirect
 16346    25   160    27    25   419     0      59  (
 16347    25   160    28    25   419     0      60  )
 16348    25   160    29    25   419     1     102  ;
 16349    25   161     5    25   419     1      64  }
 16350    25   161     5    25   419     0    1062  ENDMETHOD
 16351    25   161     5    25   420     0    1063  STARTMETHOD
 16352    25   163     5    25   420     0      10  public
 16353    25   163    12    25   420     0      39  boolean
 16354    25   163    20    25   420     0     111  isReadOnly
 16355    25   163    30    25   420     0      59  (
 16356    25   163    31    25   420     0      60  )
 16357    25   163    33    25   420     0      63  {
 16358    25   164     9    25   420     0      19  return
 16359    25   164    16    25   420     0      43  false
 16360    25   164    21    25   420     1     102  ;
 16361    25   165     5    25   420     1      64  }
 16362    25   165     5    25   420     0    1064  ENDMETHOD
 16363    25   165     5    25   421     0    1065  STARTMETHOD
 16364    25   207     5    25   421     0      10  public
 16365    25   207    12    25   421     0     111  ByteOrder
 16366    25   207    22    25   421     0     111  order
 16367    25   207    27    25   421     0      59  (
 16368    25   207    28    25   421     0      60  )
 16369    25   207    30    25   421     0      63  {
 16370    25   209     9    25   421     0      19  return
 16371    25   209    16    25   421     0     111  ByteOrder.BIG_ENDIAN
 16372    25   209    36    25   421     1     102  ;
 16373    25   214     5    25   421     1      64  }
 16374    25   214     5    25   421     0    1066  ENDMETHOD
 16375    25   216     1    25    -1     0      64  }
 16376    25   216     1    25    -1     1    1067  ENDCLASS
 16377    25   216     1    -1    -1     1    1068  ENDFILE C:\javasrc\java\nio\ByteBufferAsShortBufferB.java
 16378    26     1     1    -1    -1     1    1069  STARTFILE C:\javasrc\java\nio\ByteBufferAsShortBufferL.java
 16379    26    28     1    -1    -1     0       5  package
 16380    26    28     9    -1    -1     0     111  java.nio
 16381    26    28    17    -1    -1     0     102  ;
 16382    26    31     1    26    -1     0    1070  STARTCLASS
 16383    26    31     1    26    -1     0      24  class
 16384    26    31     7    26    -1     0     111  ByteBufferAsShortBufferL
 16385    26    32     5    26    -1     0      38  extends
 16386    26    32    13    26    -1     0     111  ShortBuffer
 16387    26    33     1    26    -1     0      63  {
 16388    26    37     5    26    -1     0      23  protected
 16389    26    37    15    26    -1     0       6  final
 16390    26    37    21    26    -1     0     111  ByteBuffer
 16391    26    37    32    26    -1     0     111  bb
 16392    26    37    34    26    -1     0     102  ;
 16393    26    38     5    26    -1     0      23  protected
 16394    26    38    15    26    -1     0       6  final
 16395    26    38    21    26    -1     0      36  int
 16396    26    38    25    26    -1     0     111  offset
 16397    26    38    31    26    -1     0     102  ;
 16398    26    38    31    26   422     0    1071  STARTMETHOD
 16399    26    42     5    26   422     0     111  ByteBufferAsShortBufferL
 16400    26    42    29    26   422     0      59  (
 16401    26    42    30    26   422     0     111  ByteBuffer
 16402    26    42    41    26   422     0     111  bb
 16403    26    42    43    26   422     0      60  )
 16404    26    42    45    26   422     0      63  {
 16405    26    44     9    26   422     0      27  super
 16406    26    44    14    26   422     0      59  (
 16407    26    44    15    26   422     0      77  -
 16408    26    44    16    26   422     0     112  1
 16409    26    44    17    26   422     0      66  ,
 16410    26    44    19    26   422     0     112  0
 16411    26    44    20    26   422     0      66  ,
 16412    26    45    15    26   422     0     111  bb.remaining
 16413    26    45    27    26   422     0      59  (
 16414    26    45    28    26   422     0      60  )
 16415    26    45    30    26   422     0      84  >>
 16416    26    45    33    26   422     0     112  1
 16417    26    45    34    26   422     0      66  ,
 16418    26    46    15    26   422     0     111  bb.remaining
 16419    26    46    27    26   422     0      59  (
 16420    26    46    28    26   422     0      60  )
 16421    26    46    30    26   422     0      84  >>
 16422    26    46    33    26   422     0     112  1
 16423    26    46    34    26   422     0      60  )
 16424    26    46    35    26   422     0     102  ;
 16425    26    47     9    26   422     0     111  this.bb
 16426    26    47    17    26   422     0      67  =
 16427    26    47    19    26   422     0     111  bb
 16428    26    47    21    26   422     0     102  ;
 16429    26    49     9    26   422     0      36  int
 16430    26    49    13    26   422     0     111  cap
 16431    26    49    17    26   422     0      67  =
 16432    26    49    19    26   422     0     111  this.capacity
 16433    26    49    32    26   422     0      59  (
 16434    26    49    33    26   422     0      60  )
 16435    26    49    34    26   422     0     102  ;
 16436    26    50     9    26   422     0     111  this.limit
 16437    26    50    19    26   422     0      59  (
 16438    26    50    20    26   422     0     111  cap
 16439    26    50    23    26   422     0      60  )
 16440    26    50    24    26   422     0     102  ;
 16441    26    51     9    26   422     0      36  int
 16442    26    51    13    26   422     0     111  pos
 16443    26    51    17    26   422     0      67  =
 16444    26    51    19    26   422     0     111  this.position
 16445    26    51    32    26   422     0      59  (
 16446    26    51    33    26   422     0      60  )
 16447    26    51    34    26   422     0     102  ;
 16448    26    52     9    26   422     0     111  assert
 16449    26    52    16    26   422     0      59  (
 16450    26    52    17    26   422     0     111  pos
 16451    26    52    21    26   422     0      92  <=
 16452    26    52    24    26   422     0     111  cap
 16453    26    52    27    26   422     0      60  )
 16454    26    52    28    26   422     0     102  ;
 16455    26    53     9    26   422     0     111  offset
 16456    26    53    16    26   422     0      67  =
 16457    26    53    18    26   422     0     111  pos
 16458    26    53    21    26   422     0     102  ;
 16459    26    57     5    26   422     0      64  }
 16460    26    57     5    26   422     0    1072  ENDMETHOD
 16461    26    57     5    26   423     0    1073  STARTMETHOD
 16462    26    59     5    26   423     0     111  ByteBufferAsShortBufferL
 16463    26    59    29    26   423     0      59  (
 16464    26    59    30    26   423     0     111  ByteBuffer
 16465    26    59    41    26   423     0     111  bb
 16466    26    59    43    26   423     0      66  ,
 16467    26    60    38    26   423     0      36  int
 16468    26    60    42    26   423     0     111  mark
 16469    26    60    46    26   423     0      66  ,
 16470    26    60    48    26   423     0      36  int
 16471    26    60    52    26   423     0     111  pos
 16472    26    60    55    26   423     0      66  ,
 16473    26    60    57    26   423     0      36  int
 16474    26    60    61    26   423     0     111  lim
 16475    26    60    64    26   423     0      66  ,
 16476    26    60    66    26   423     0      36  int
 16477    26    60    70    26   423     0     111  cap
 16478    26    60    73    26   423     0      66  ,
 16479    26    61    38    26   423     0      36  int
 16480    26    61    42    26   423     0     111  off
 16481    26    61    45    26   423     0      60  )
 16482    26    62     5    26   423     0      63  {
 16483    26    64     9    26   423     0      27  super
 16484    26    64    14    26   423     0      59  (
 16485    26    64    15    26   423     0     111  mark
 16486    26    64    19    26   423     0      66  ,
 16487    26    64    21    26   423     0     111  pos
 16488    26    64    24    26   423     0      66  ,
 16489    26    64    26    26   423     0     111  lim
 16490    26    64    29    26   423     0      66  ,
 16491    26    64    31    26   423     0     111  cap
 16492    26    64    34    26   423     0      60  )
 16493    26    64    35    26   423     0     102  ;
 16494    26    65     9    26   423     1     111  this.bb
 16495    26    65    17    26   423     1      67  =
 16496    26    65    19    26   423     1     111  bb
 16497    26    65    21    26   423     1     102  ;
 16498    26    66     9    26   423     1     111  offset
 16499    26    66    16    26   423     1      67  =
 16500    26    66    18    26   423     1     111  off
 16501    26    66    21    26   423     1     102  ;
 16502    26    70     5    26   423     0      64  }
 16503    26    70     5    26   423     0    1074  ENDMETHOD
 16504    26    70     5    26   424     0    1075  STARTMETHOD
 16505    26    72     5    26   424     0      10  public
 16506    26    72    12    26   424     0     111  ShortBuffer
 16507    26    72    24    26   424     0     111  slice
 16508    26    72    29    26   424     0      59  (
 16509    26    72    30    26   424     0      60  )
 16510    26    72    32    26   424     0      63  {
 16511    26    73     9    26   424     1      36  int
 16512    26    73    13    26   424     1     111  pos
 16513    26    73    17    26   424     1      67  =
 16514    26    73    19    26   424     1     111  this.position
 16515    26    73    32    26   424     1      59  (
 16516    26    73    33    26   424     1      60  )
 16517    26    73    34    26   424     1     102  ;
 16518    26    74     9    26   424     1      36  int
 16519    26    74    13    26   424     1     111  lim
 16520    26    74    17    26   424     1      67  =
 16521    26    74    19    26   424     1     111  this.limit
 16522    26    74    29    26   424     1      59  (
 16523    26    74    30    26   424     1      60  )
 16524    26    74    31    26   424     1     102  ;
 16525    26    75     9    26   424     0     111  assert
 16526    26    75    16    26   424     0      59  (
 16527    26    75    17    26   424     0     111  pos
 16528    26    75    21    26   424     0      92  <=
 16529    26    75    24    26   424     0     111  lim
 16530    26    75    27    26   424     0      60  )
 16531    26    75    28    26   424     0     102  ;
 16532    26    76     9    26   424     0      36  int
 16533    26    76    13    26   424     0     111  rem
 16534    26    76    17    26   424     0      67  =
 16535    26    76    19    26   424     0      59  (
 16536    26    76    20    26   424     0     111  pos
 16537    26    76    24    26   424     0      92  <=
 16538    26    76    27    26   424     0     111  lim
 16539    26    76    31    26   424     0      58  ?
 16540    26    76    33    26   424     0     111  lim
 16541    26    76    37    26   424     0      77  -
 16542    26    76    39    26   424     0     111  pos
 16543    26    76    43    26   424     0      65  :
 16544    26    76    45    26   424     0     112  0
 16545    26    76    46    26   424     0      60  )
 16546    26    76    47    26   424     0     102  ;
 16547    26    77     9    26   424     0      36  int
 16548    26    77    13    26   424     0     111  off
 16549    26    77    17    26   424     0      67  =
 16550    26    77    19    26   424     0      59  (
 16551    26    77    20    26   424     0     111  pos
 16552    26    77    24    26   424     0      90  <<
 16553    26    77    27    26   424     0     112  1
 16554    26    77    28    26   424     0      60  )
 16555    26    77    30    26   424     0      74  +
 16556    26    77    32    26   424     0     111  offset
 16557    26    77    38    26   424     0     102  ;
 16558    26    78     9    26   424     0     111  assert
 16559    26    78    16    26   424     0      59  (
 16560    26    78    17    26   424     0     111  off
 16561    26    78    21    26   424     0      88  >=
 16562    26    78    24    26   424     0     112  0
 16563    26    78    25    26   424     0      60  )
 16564    26    78    26    26   424     0     102  ;
 16565    26    79     9    26   424     0      19  return
 16566    26    79    16    26   424     0      15  new
 16567    26    79    20    26   424     0     111  ByteBufferAsShortBufferL
 16568    26    79    44    26   424     0      59  (
 16569    26    79    45    26   424     0     111  bb
 16570    26    79    47    26   424     0      66  ,
 16571    26    79    49    26   424     0      77  -
 16572    26    79    50    26   424     0     112  1
 16573    26    79    51    26   424     0      66  ,
 16574    26    79    53    26   424     0     112  0
 16575    26    79    54    26   424     0      66  ,
 16576    26    79    56    26   424     0     111  rem
 16577    26    79    59    26   424     0      66  ,
 16578    26    79    61    26   424     0     111  rem
 16579    26    79    64    26   424     1      66  ,
 16580    26    79    66    26   424     1     111  off
 16581    26    79    69    26   424     1      60  )
 16582    26    79    70    26   424     1     102  ;
 16583    26    80     5    26   424     1      64  }
 16584    26    80     5    26   424     0    1076  ENDMETHOD
 16585    26    80     5    26   425     0    1077  STARTMETHOD
 16586    26    82     5    26   425     0      10  public
 16587    26    82    12    26   425     0     111  ShortBuffer
 16588    26    82    24    26   425     0     111  duplicate
 16589    26    82    33    26   425     0      59  (
 16590    26    82    34    26   425     0      60  )
 16591    26    82    36    26   425     0      63  {
 16592    26    83     9    26   425     0      19  return
 16593    26    83    16    26   425     0      15  new
 16594    26    83    20    26   425     0     111  ByteBufferAsShortBufferL
 16595    26    83    44    26   425     0      59  (
 16596    26    83    45    26   425     0     111  bb
 16597    26    83    47    26   425     0      66  ,
 16598    26    84    53    26   425     1     111  this.markValue
 16599    26    84    67    26   425     1      59  (
 16600    26    84    68    26   425     1      60  )
 16601    26    84    69    26   425     1      66  ,
 16602    26    85    53    26   425     1     111  this.position
 16603    26    85    66    26   425     1      59  (
 16604    26    85    67    26   425     1      60  )
 16605    26    85    68    26   425     1      66  ,
 16606    26    86    53    26   425     1     111  this.limit
 16607    26    86    63    26   425     1      59  (
 16608    26    86    64    26   425     1      60  )
 16609    26    86    65    26   425     1      66  ,
 16610    26    87    53    26   425     1     111  this.capacity
 16611    26    87    66    26   425     1      59  (
 16612    26    87    67    26   425     1      60  )
 16613    26    87    68    26   425     1      66  ,
 16614    26    88    53    26   425     1     111  offset
 16615    26    88    59    26   425     1      60  )
 16616    26    88    60    26   425     1     102  ;
 16617    26    89     5    26   425     1      64  }
 16618    26    89     5    26   425     0    1078  ENDMETHOD
 16619    26    89     5    26   426     0    1079  STARTMETHOD
 16620    26    91     5    26   426     0      10  public
 16621    26    91    12    26   426     0     111  ShortBuffer
 16622    26    91    24    26   426     0     111  asReadOnlyBuffer
 16623    26    91    40    26   426     0      59  (
 16624    26    91    41    26   426     0      60  )
 16625    26    91    43    26   426     0      63  {
 16626    26    93     9    26   426     0      19  return
 16627    26    93    16    26   426     0      15  new
 16628    26    93    20    26   426     0     111  ByteBufferAsShortBufferRL
 16629    26    93    45    26   426     0      59  (
 16630    26    93    46    26   426     0     111  bb
 16631    26    93    48    26   426     0      66  ,
 16632    26    94    50    26   426     1     111  this.markValue
 16633    26    94    64    26   426     1      59  (
 16634    26    94    65    26   426     1      60  )
 16635    26    94    66    26   426     1      66  ,
 16636    26    95    50    26   426     1     111  this.position
 16637    26    95    63    26   426     1      59  (
 16638    26    95    64    26   426     1      60  )
 16639    26    95    65    26   426     1      66  ,
 16640    26    96    50    26   426     1     111  this.limit
 16641    26    96    60    26   426     1      59  (
 16642    26    96    61    26   426     1      60  )
 16643    26    96    62    26   426     1      66  ,
 16644    26    97    50    26   426     1     111  this.capacity
 16645    26    97    63    26   426     1      59  (
 16646    26    97    64    26   426     1      60  )
 16647    26    97    65    26   426     1      66  ,
 16648    26    98    50    26   426     1     111  offset
 16649    26    98    56    26   426     1      60  )
 16650    26    98    57    26   426     1     102  ;
 16651    26   102     5    26   426     1      64  }
 16652    26   102     5    26   426     0    1080  ENDMETHOD
 16653    26   102     5    26   427     0    1081  STARTMETHOD
 16654    26   106     5    26   427     0      23  protected
 16655    26   106    15    26   427     0      36  int
 16656    26   106    19    26   427     0     111  ix
 16657    26   106    21    26   427     0      59  (
 16658    26   106    22    26   427     0      36  int
 16659    26   106    26    26   427     0     111  i
 16660    26   106    27    26   427     0      60  )
 16661    26   106    29    26   427     0      63  {
 16662    26   107     9    26   427     0      19  return
 16663    26   107    16    26   427     0      59  (
 16664    26   107    17    26   427     0     111  i
 16665    26   107    19    26   427     0      90  <<
 16666    26   107    22    26   427     0     112  1
 16667    26   107    23    26   427     0      60  )
 16668    26   107    25    26   427     0      74  +
 16669    26   107    27    26   427     0     111  offset
 16670    26   107    33    26   427     0     102  ;
 16671    26   108     5    26   427     0      64  }
 16672    26   108     5    26   427     0    1082  ENDMETHOD
 16673    26   108     5    26   428     0    1083  STARTMETHOD
 16674    26   110     5    26   428     0      10  public
 16675    26   110    12    26   428     0      12  short
 16676    26   110    18    26   428     0     111  get
 16677    26   110    21    26   428     0      59  (
 16678    26   110    22    26   428     0      60  )
 16679    26   110    24    26   428     0      63  {
 16680    26   111     9    26   428     0      19  return
 16681    26   111    16    26   428     0     111  Bits.getShortL
 16682    26   111    30    26   428     0      59  (
 16683    26   111    31    26   428     0     111  bb
 16684    26   111    33    26   428     0      66  ,
 16685    26   111    35    26   428     0     111  ix
 16686    26   111    37    26   428     0      59  (
 16687    26   111    38    26   428     0     111  nextGetIndex
 16688    26   111    50    26   428     0      59  (
 16689    26   111    51    26   428     0      60  )
 16690    26   111    52    26   428     0      60  )
 16691    26   111    53    26   428     0      60  )
 16692    26   111    54    26   428     0     102  ;
 16693    26   112     5    26   428     0      64  }
 16694    26   112     5    26   428     0    1084  ENDMETHOD
 16695    26   112     5    26   429     0    1085  STARTMETHOD
 16696    26   114     5    26   429     0      10  public
 16697    26   114    12    26   429     0      12  short
 16698    26   114    18    26   429     0     111  get
 16699    26   114    21    26   429     0      59  (
 16700    26   114    22    26   429     0      36  int
 16701    26   114    26    26   429     0     111  i
 16702    26   114    27    26   429     0      60  )
 16703    26   114    29    26   429     0      63  {
 16704    26   115     9    26   429     0      19  return
 16705    26   115    16    26   429     0     111  Bits.getShortL
 16706    26   115    30    26   429     0      59  (
 16707    26   115    31    26   429     0     111  bb
 16708    26   115    33    26   429     0      66  ,
 16709    26   115    35    26   429     0     111  ix
 16710    26   115    37    26   429     0      59  (
 16711    26   115    38    26   429     0     111  checkIndex
 16712    26   115    48    26   429     0      59  (
 16713    26   115    49    26   429     0     111  i
 16714    26   115    50    26   429     0      60  )
 16715    26   115    51    26   429     0      60  )
 16716    26   115    52    26   429     0      60  )
 16717    26   115    53    26   429     0     102  ;
 16718    26   116     5    26   429     0      64  }
 16719    26   116     5    26   429     0    1086  ENDMETHOD
 16720    26   116     5    26   430     0    1087  STARTMETHOD
 16721    26   120     5    26   430     0      10  public
 16722    26   120    12    26   430     0     111  ShortBuffer
 16723    26   120    24    26   430     0     111  put
 16724    26   120    27    26   430     0      59  (
 16725    26   120    28    26   430     0      12  short
 16726    26   120    34    26   430     0     111  x
 16727    26   120    35    26   430     0      60  )
 16728    26   120    37    26   430     0      63  {
 16729    26   122     9    26   430     0     111  Bits.putShortL
 16730    26   122    23    26   430     0      59  (
 16731    26   122    24    26   430     0     111  bb
 16732    26   122    26    26   430     0      66  ,
 16733    26   122    28    26   430     0     111  ix
 16734    26   122    30    26   430     0      59  (
 16735    26   122    31    26   430     0     111  nextPutIndex
 16736    26   122    43    26   430     0      59  (
 16737    26   122    44    26   430     0      60  )
 16738    26   122    45    26   430     0      60  )
 16739    26   122    46    26   430     0      66  ,
 16740    26   122    48    26   430     0     111  x
 16741    26   122    49    26   430     0      60  )
 16742    26   122    50    26   430     0     102  ;
 16743    26   123     9    26   430     0      19  return
 16744    26   123    16    26   430     0      44  this
 16745    26   123    20    26   430     0     102  ;
 16746    26   127     5    26   430     0      64  }
 16747    26   127     5    26   430     0    1088  ENDMETHOD
 16748    26   127     5    26   431     0    1089  STARTMETHOD
 16749    26   129     5    26   431     0      10  public
 16750    26   129    12    26   431     0     111  ShortBuffer
 16751    26   129    24    26   431     0     111  put
 16752    26   129    27    26   431     0      59  (
 16753    26   129    28    26   431     0      36  int
 16754    26   129    32    26   431     0     111  i
 16755    26   129    33    26   431     0      66  ,
 16756    26   129    35    26   431     0      12  short
 16757    26   129    41    26   431     0     111  x
 16758    26   129    42    26   431     0      60  )
 16759    26   129    44    26   431     0      63  {
 16760    26   131     9    26   431     0     111  Bits.putShortL
 16761    26   131    23    26   431     0      59  (
 16762    26   131    24    26   431     0     111  bb
 16763    26   131    26    26   431     0      66  ,
 16764    26   131    28    26   431     0     111  ix
 16765    26   131    30    26   431     0      59  (
 16766    26   131    31    26   431     0     111  checkIndex
 16767    26   131    41    26   431     0      59  (
 16768    26   131    42    26   431     0     111  i
 16769    26   131    43    26   431     0      60  )
 16770    26   131    44    26   431     0      60  )
 16771    26   131    45    26   431     0      66  ,
 16772    26   131    47    26   431     0     111  x
 16773    26   131    48    26   431     0      60  )
 16774    26   131    49    26   431     0     102  ;
 16775    26   132     9    26   431     0      19  return
 16776    26   132    16    26   431     0      44  this
 16777    26   132    20    26   431     0     102  ;
 16778    26   136     5    26   431     0      64  }
 16779    26   136     5    26   431     0    1090  ENDMETHOD
 16780    26   136     5    26   432     0    1091  STARTMETHOD
 16781    26   138     5    26   432     0      10  public
 16782    26   138    12    26   432     0     111  ShortBuffer
 16783    26   138    24    26   432     0     111  compact
 16784    26   138    31    26   432     0      59  (
 16785    26   138    32    26   432     0      60  )
 16786    26   138    34    26   432     0      63  {
 16787    26   140     9    26   432     1      36  int
 16788    26   140    13    26   432     1     111  pos
 16789    26   140    17    26   432     1      67  =
 16790    26   140    19    26   432     1     111  position
 16791    26   140    27    26   432     1      59  (
 16792    26   140    28    26   432     1      60  )
 16793    26   140    29    26   432     1     102  ;
 16794    26   141     9    26   432     1      36  int
 16795    26   141    13    26   432     1     111  lim
 16796    26   141    17    26   432     1      67  =
 16797    26   141    19    26   432     1     111  limit
 16798    26   141    24    26   432     1      59  (
 16799    26   141    25    26   432     1      60  )
 16800    26   141    26    26   432     1     102  ;
 16801    26   142     9    26   432     0     111  assert
 16802    26   142    16    26   432     0      59  (
 16803    26   142    17    26   432     0     111  pos
 16804    26   142    21    26   432     0      92  <=
 16805    26   142    24    26   432     0     111  lim
 16806    26   142    27    26   432     0      60  )
 16807    26   142    28    26   432     0     102  ;
 16808    26   143     9    26   432     0      36  int
 16809    26   143    13    26   432     0     111  rem
 16810    26   143    17    26   432     0      67  =
 16811    26   143    19    26   432     0      59  (
 16812    26   143    20    26   432     0     111  pos
 16813    26   143    24    26   432     0      92  <=
 16814    26   143    27    26   432     0     111  lim
 16815    26   143    31    26   432     0      58  ?
 16816    26   143    33    26   432     0     111  lim
 16817    26   143    37    26   432     0      77  -
 16818    26   143    39    26   432     0     111  pos
 16819    26   143    43    26   432     0      65  :
 16820    26   143    45    26   432     0     112  0
 16821    26   143    46    26   432     0      60  )
 16822    26   143    47    26   432     0     102  ;
 16823    26   145     9    26   432     0     111  ByteBuffer
 16824    26   145    20    26   432     0     111  db
 16825    26   145    23    26   432     0      67  =
 16826    26   145    25    26   432     0     111  bb.duplicate
 16827    26   145    37    26   432     0      59  (
 16828    26   145    38    26   432     0      60  )
 16829    26   145    39    26   432     0     102  ;
 16830    26   146     9    26   432     0     111  db.limit
 16831    26   146    17    26   432     0      59  (
 16832    26   146    18    26   432     0     111  ix
 16833    26   146    20    26   432     0      59  (
 16834    26   146    21    26   432     0     111  lim
 16835    26   146    24    26   432     0      60  )
 16836    26   146    25    26   432     0      60  )
 16837    26   146    26    26   432     0     102  ;
 16838    26   147     9    26   432     0     111  db.position
 16839    26   147    20    26   432     0      59  (
 16840    26   147    21    26   432     0     111  ix
 16841    26   147    23    26   432     0      59  (
 16842    26   147    24    26   432     0     112  0
 16843    26   147    25    26   432     0      60  )
 16844    26   147    26    26   432     0      60  )
 16845    26   147    27    26   432     0     102  ;
 16846    26   148     9    26   432     0     111  ByteBuffer
 16847    26   148    20    26   432     0     111  sb
 16848    26   148    23    26   432     0      67  =
 16849    26   148    25    26   432     0     111  db.slice
 16850    26   148    33    26   432     0      59  (
 16851    26   148    34    26   432     0      60  )
 16852    26   148    35    26   432     0     102  ;
 16853    26   149     9    26   432     0     111  sb.position
 16854    26   149    20    26   432     0      59  (
 16855    26   149    21    26   432     0     111  pos
 16856    26   149    25    26   432     0      90  <<
 16857    26   149    28    26   432     0     112  1
 16858    26   149    29    26   432     0      60  )
 16859    26   149    30    26   432     0     102  ;
 16860    26   150     9    26   432     0     111  sb.compact
 16861    26   150    19    26   432     0      59  (
 16862    26   150    20    26   432     0      60  )
 16863    26   150    21    26   432     0     102  ;
 16864    26   151     9    26   432     0     111  position
 16865    26   151    17    26   432     0      59  (
 16866    26   151    18    26   432     0     111  rem
 16867    26   151    21    26   432     0      60  )
 16868    26   151    22    26   432     0     102  ;
 16869    26   152     9    26   432     0     111  limit
 16870    26   152    14    26   432     0      59  (
 16871    26   152    15    26   432     0     111  capacity
 16872    26   152    23    26   432     0      59  (
 16873    26   152    24    26   432     0      60  )
 16874    26   152    25    26   432     0      60  )
 16875    26   152    26    26   432     0     102  ;
 16876    26   153     9    26   432     0      19  return
 16877    26   153    16    26   432     0      44  this
 16878    26   153    20    26   432     0     102  ;
 16879    26   157     5    26   432     0      64  }
 16880    26   157     5    26   432     0    1092  ENDMETHOD
 16881    26   157     5    26   433     0    1093  STARTMETHOD
 16882    26   159     5    26   433     0      10  public
 16883    26   159    12    26   433     0      39  boolean
 16884    26   159    20    26   433     0     111  isDirect
 16885    26   159    28    26   433     0      59  (
 16886    26   159    29    26   433     0      60  )
 16887    26   159    31    26   433     0      63  {
 16888    26   160     9    26   433     0      19  return
 16889    26   160    16    26   433     0     111  bb.isDirect
 16890    26   160    27    26   433     0      59  (
 16891    26   160    28    26   433     0      60  )
 16892    26   160    29    26   433     1     102  ;
 16893    26   161     5    26   433     1      64  }
 16894    26   161     5    26   433     0    1094  ENDMETHOD
 16895    26   161     5    26   434     0    1095  STARTMETHOD
 16896    26   163     5    26   434     0      10  public
 16897    26   163    12    26   434     0      39  boolean
 16898    26   163    20    26   434     0     111  isReadOnly
 16899    26   163    30    26   434     0      59  (
 16900    26   163    31    26   434     0      60  )
 16901    26   163    33    26   434     0      63  {
 16902    26   164     9    26   434     0      19  return
 16903    26   164    16    26   434     0      43  false
 16904    26   164    21    26   434     1     102  ;
 16905    26   165     5    26   434     1      64  }
 16906    26   165     5    26   434     0    1096  ENDMETHOD
 16907    26   165     5    26   435     0    1097  STARTMETHOD
 16908    26   207     5    26   435     0      10  public
 16909    26   207    12    26   435     0     111  ByteOrder
 16910    26   207    22    26   435     0     111  order
 16911    26   207    27    26   435     0      59  (
 16912    26   207    28    26   435     0      60  )
 16913    26   207    30    26   435     0      63  {
 16914    26   212     9    26   435     0      19  return
 16915    26   212    16    26   435     0     111  ByteOrder.LITTLE_ENDIAN
 16916    26   212    39    26   435     1     102  ;
 16917    26   214     5    26   435     1      64  }
 16918    26   214     5    26   435     0    1098  ENDMETHOD
 16919    26   216     1    26    -1     0      64  }
 16920    26   216     1    26    -1     1    1099  ENDCLASS
 16921    26   216     1    -1    -1     1    1100  ENDFILE C:\javasrc\java\nio\ByteBufferAsShortBufferL.java
 16922    27     1     1    -1    -1     1    1101  STARTFILE C:\javasrc\java\nio\ByteBufferAsShortBufferRB.java
 16923    27    28     1    -1    -1     0       5  package
 16924    27    28     9    -1    -1     0     111  java.nio
 16925    27    28    17    -1    -1     0     102  ;
 16926    27    31     1    27    -1     0    1102  STARTCLASS
 16927    27    31     1    27    -1     0      24  class
 16928    27    31     7    27    -1     0     111  ByteBufferAsShortBufferRB
 16929    27    32     5    27    -1     0      38  extends
 16930    27    32    13    27    -1     0     111  ByteBufferAsShortBufferB
 16931    27    33     1    27    -1     0      63  {
 16932    27    33     1    27   436     0    1103  STARTMETHOD
 16933    27    42     5    27   436     0     111  ByteBufferAsShortBufferRB
 16934    27    42    30    27   436     0      59  (
 16935    27    42    31    27   436     0     111  ByteBuffer
 16936    27    42    42    27   436     0     111  bb
 16937    27    42    44    27   436     0      60  )
 16938    27    42    46    27   436     0      63  {
 16939    27    55     9    27   436     0      27  super
 16940    27    55    14    27   436     0      59  (
 16941    27    55    15    27   436     0     111  bb
 16942    27    55    17    27   436     0      60  )
 16943    27    55    18    27   436     0     102  ;
 16944    27    57     5    27   436     0      64  }
 16945    27    57     5    27   436     0    1104  ENDMETHOD
 16946    27    57     5    27   437     0    1105  STARTMETHOD
 16947    27    59     5    27   437     0     111  ByteBufferAsShortBufferRB
 16948    27    59    30    27   437     0      59  (
 16949    27    59    31    27   437     0     111  ByteBuffer
 16950    27    59    42    27   437     0     111  bb
 16951    27    59    44    27   437     0      66  ,
 16952    27    60    38    27   437     0      36  int
 16953    27    60    42    27   437     0     111  mark
 16954    27    60    46    27   437     0      66  ,
 16955    27    60    48    27   437     0      36  int
 16956    27    60    52    27   437     0     111  pos
 16957    27    60    55    27   437     0      66  ,
 16958    27    60    57    27   437     0      36  int
 16959    27    60    61    27   437     0     111  lim
 16960    27    60    64    27   437     0      66  ,
 16961    27    60    66    27   437     0      36  int
 16962    27    60    70    27   437     0     111  cap
 16963    27    60    73    27   437     0      66  ,
 16964    27    61    38    27   437     0      36  int
 16965    27    61    42    27   437     0     111  off
 16966    27    61    45    27   437     0      60  )
 16967    27    62     5    27   437     0      63  {
 16968    27    68     9    27   437     0      27  super
 16969    27    68    14    27   437     0      59  (
 16970    27    68    15    27   437     0     111  bb
 16971    27    68    17    27   437     0      66  ,
 16972    27    68    19    27   437     0     111  mark
 16973    27    68    23    27   437     0      66  ,
 16974    27    68    25    27   437     0     111  pos
 16975    27    68    28    27   437     0      66  ,
 16976    27    68    30    27   437     0     111  lim
 16977    27    68    33    27   437     0      66  ,
 16978    27    68    35    27   437     0     111  cap
 16979    27    68    38    27   437     0      66  ,
 16980    27    68    40    27   437     0     111  off
 16981    27    68    43    27   437     0      60  )
 16982    27    68    44    27   437     0     102  ;
 16983    27    70     5    27   437     0      64  }
 16984    27    70     5    27   437     0    1106  ENDMETHOD
 16985    27    70     5    27   438     0    1107  STARTMETHOD
 16986    27    72     5    27   438     0      10  public
 16987    27    72    12    27   438     0     111  ShortBuffer
 16988    27    72    24    27   438     0     111  slice
 16989    27    72    29    27   438     0      59  (
 16990    27    72    30    27   438     0      60  )
 16991    27    72    32    27   438     0      63  {
 16992    27    73     9    27   438     1      36  int
 16993    27    73    13    27   438     1     111  pos
 16994    27    73    17    27   438     1      67  =
 16995    27    73    19    27   438     1     111  this.position
 16996    27    73    32    27   438     1      59  (
 16997    27    73    33    27   438     1      60  )
 16998    27    73    34    27   438     1     102  ;
 16999    27    74     9    27   438     1      36  int
 17000    27    74    13    27   438     1     111  lim
 17001    27    74    17    27   438     1      67  =
 17002    27    74    19    27   438     1     111  this.limit
 17003    27    74    29    27   438     1      59  (
 17004    27    74    30    27   438     1      60  )
 17005    27    74    31    27   438     1     102  ;
 17006    27    75     9    27   438     0     111  assert
 17007    27    75    16    27   438     0      59  (
 17008    27    75    17    27   438     0     111  pos
 17009    27    75    21    27   438     0      92  <=
 17010    27    75    24    27   438     0     111  lim
 17011    27    75    27    27   438     0      60  )
 17012    27    75    28    27   438     0     102  ;
 17013    27    76     9    27   438     0      36  int
 17014    27    76    13    27   438     0     111  rem
 17015    27    76    17    27   438     0      67  =
 17016    27    76    19    27   438     0      59  (
 17017    27    76    20    27   438     0     111  pos
 17018    27    76    24    27   438     0      92  <=
 17019    27    76    27    27   438     0     111  lim
 17020    27    76    31    27   438     0      58  ?
 17021    27    76    33    27   438     0     111  lim
 17022    27    76    37    27   438     0      77  -
 17023    27    76    39    27   438     0     111  pos
 17024    27    76    43    27   438     0      65  :
 17025    27    76    45    27   438     0     112  0
 17026    27    76    46    27   438     0      60  )
 17027    27    76    47    27   438     0     102  ;
 17028    27    77     9    27   438     0      36  int
 17029    27    77    13    27   438     0     111  off
 17030    27    77    17    27   438     0      67  =
 17031    27    77    19    27   438     0      59  (
 17032    27    77    20    27   438     0     111  pos
 17033    27    77    24    27   438     0      90  <<
 17034    27    77    27    27   438     0     112  1
 17035    27    77    28    27   438     0      60  )
 17036    27    77    30    27   438     0      74  +
 17037    27    77    32    27   438     0     111  offset
 17038    27    77    38    27   438     0     102  ;
 17039    27    78     9    27   438     0     111  assert
 17040    27    78    16    27   438     0      59  (
 17041    27    78    17    27   438     0     111  off
 17042    27    78    21    27   438     0      88  >=
 17043    27    78    24    27   438     0     112  0
 17044    27    78    25    27   438     0      60  )
 17045    27    78    26    27   438     0     102  ;
 17046    27    79     9    27   438     0      19  return
 17047    27    79    16    27   438     0      15  new
 17048    27    79    20    27   438     0     111  ByteBufferAsShortBufferRB
 17049    27    79    45    27   438     0      59  (
 17050    27    79    46    27   438     0     111  bb
 17051    27    79    48    27   438     0      66  ,
 17052    27    79    50    27   438     0      77  -
 17053    27    79    51    27   438     0     112  1
 17054    27    79    52    27   438     0      66  ,
 17055    27    79    54    27   438     0     112  0
 17056    27    79    55    27   438     0      66  ,
 17057    27    79    57    27   438     0     111  rem
 17058    27    79    60    27   438     0      66  ,
 17059    27    79    62    27   438     0     111  rem
 17060    27    79    65    27   438     0      66  ,
 17061    27    79    67    27   438     0     111  off
 17062    27    79    70    27   438     0      60  )
 17063    27    79    71    27   438     0     102  ;
 17064    27    80     5    27   438     0      64  }
 17065    27    80     5    27   438     0    1108  ENDMETHOD
 17066    27    80     5    27   439     0    1109  STARTMETHOD
 17067    27    82     5    27   439     0      10  public
 17068    27    82    12    27   439     0     111  ShortBuffer
 17069    27    82    24    27   439     0     111  duplicate
 17070    27    82    33    27   439     0      59  (
 17071    27    82    34    27   439     0      60  )
 17072    27    82    36    27   439     0      63  {
 17073    27    83     9    27   439     0      19  return
 17074    27    83    16    27   439     0      15  new
 17075    27    83    20    27   439     0     111  ByteBufferAsShortBufferRB
 17076    27    83    45    27   439     0      59  (
 17077    27    83    46    27   439     0     111  bb
 17078    27    83    48    27   439     0      66  ,
 17079    27    84    53    27   439     1     111  this.markValue
 17080    27    84    67    27   439     1      59  (
 17081    27    84    68    27   439     1      60  )
 17082    27    84    69    27   439     1      66  ,
 17083    27    85    53    27   439     1     111  this.position
 17084    27    85    66    27   439     1      59  (
 17085    27    85    67    27   439     1      60  )
 17086    27    85    68    27   439     1      66  ,
 17087    27    86    53    27   439     1     111  this.limit
 17088    27    86    63    27   439     1      59  (
 17089    27    86    64    27   439     1      60  )
 17090    27    86    65    27   439     1      66  ,
 17091    27    87    53    27   439     1     111  this.capacity
 17092    27    87    66    27   439     1      59  (
 17093    27    87    67    27   439     1      60  )
 17094    27    87    68    27   439     1      66  ,
 17095    27    88    53    27   439     0     111  offset
 17096    27    88    59    27   439     0      60  )
 17097    27    88    60    27   439     0     102  ;
 17098    27    89     5    27   439     0      64  }
 17099    27    89     5    27   439     0    1110  ENDMETHOD
 17100    27    89     5    27   440     0    1111  STARTMETHOD
 17101    27    91     5    27   440     0      10  public
 17102    27    91    12    27   440     0     111  ShortBuffer
 17103    27    91    24    27   440     0     111  asReadOnlyBuffer
 17104    27    91    40    27   440     0      59  (
 17105    27    91    41    27   440     0      60  )
 17106    27    91    43    27   440     0      63  {
 17107    27   100     9    27   440     0      19  return
 17108    27   100    16    27   440     0     111  duplicate
 17109    27   100    25    27   440     0      59  (
 17110    27   100    26    27   440     0      60  )
 17111    27   100    27    27   440     0     102  ;
 17112    27   102     5    27   440     0      64  }
 17113    27   102     5    27   440     0    1112  ENDMETHOD
 17114    27   102     5    27   441     0    1113  STARTMETHOD
 17115    27   120     5    27   441     0      10  public
 17116    27   120    12    27   441     0     111  ShortBuffer
 17117    27   120    24    27   441     0     111  put
 17118    27   120    27    27   441     0      59  (
 17119    27   120    28    27   441     0      12  short
 17120    27   120    34    27   441     0     111  x
 17121    27   120    35    27   441     0      60  )
 17122    27   120    37    27   441     0      63  {
 17123    27   125     9    27   441     0      20  throw
 17124    27   125    15    27   441     0      15  new
 17125    27   125    19    27   441     0     111  ReadOnlyBufferException
 17126    27   125    42    27   441     0      59  (
 17127    27   125    43    27   441     0      60  )
 17128    27   125    44    27   441     0     102  ;
 17129    27   127     5    27   441     0      64  }
 17130    27   127     5    27   441     0    1114  ENDMETHOD
 17131    27   127     5    27   442     0    1115  STARTMETHOD
 17132    27   129     5    27   442     0      10  public
 17133    27   129    12    27   442     0     111  ShortBuffer
 17134    27   129    24    27   442     0     111  put
 17135    27   129    27    27   442     0      59  (
 17136    27   129    28    27   442     0      36  int
 17137    27   129    32    27   442     0     111  i
 17138    27   129    33    27   442     0      66  ,
 17139    27   129    35    27   442     0      12  short
 17140    27   129    41    27   442     0     111  x
 17141    27   129    42    27   442     0      60  )
 17142    27   129    44    27   442     0      63  {
 17143    27   134     9    27   442     0      20  throw
 17144    27   134    15    27   442     0      15  new
 17145    27   134    19    27   442     0     111  ReadOnlyBufferException
 17146    27   134    42    27   442     0      59  (
 17147    27   134    43    27   442     0      60  )
 17148    27   134    44    27   442     0     102  ;
 17149    27   136     5    27   442     0      64  }
 17150    27   136     5    27   442     0    1116  ENDMETHOD
 17151    27   136     5    27   443     0    1117  STARTMETHOD
 17152    27   138     5    27   443     0      10  public
 17153    27   138    12    27   443     0     111  ShortBuffer
 17154    27   138    24    27   443     0     111  compact
 17155    27   138    31    27   443     0      59  (
 17156    27   138    32    27   443     0      60  )
 17157    27   138    34    27   443     0      63  {
 17158    27   155     9    27   443     0      20  throw
 17159    27   155    15    27   443     0      15  new
 17160    27   155    19    27   443     0     111  ReadOnlyBufferException
 17161    27   155    42    27   443     0      59  (
 17162    27   155    43    27   443     0      60  )
 17163    27   155    44    27   443     0     102  ;
 17164    27   157     5    27   443     0      64  }
 17165    27   157     5    27   443     0    1118  ENDMETHOD
 17166    27   157     5    27   444     0    1119  STARTMETHOD
 17167    27   159     5    27   444     0      10  public
 17168    27   159    12    27   444     0      39  boolean
 17169    27   159    20    27   444     0     111  isDirect
 17170    27   159    28    27   444     0      59  (
 17171    27   159    29    27   444     0      60  )
 17172    27   159    31    27   444     0      63  {
 17173    27   160     9    27   444     0      19  return
 17174    27   160    16    27   444     0     111  bb.isDirect
 17175    27   160    27    27   444     0      59  (
 17176    27   160    28    27   444     0      60  )
 17177    27   160    29    27   444     1     102  ;
 17178    27   161     5    27   444     1      64  }
 17179    27   161     5    27   444     0    1120  ENDMETHOD
 17180    27   161     5    27   445     0    1121  STARTMETHOD
 17181    27   163     5    27   445     0      10  public
 17182    27   163    12    27   445     0      39  boolean
 17183    27   163    20    27   445     0     111  isReadOnly
 17184    27   163    30    27   445     0      59  (
 17185    27   163    31    27   445     0      60  )
 17186    27   163    33    27   445     0      63  {
 17187    27   164     9    27   445     0      19  return
 17188    27   164    16    27   445     0      52  true
 17189    27   164    20    27   445     1     102  ;
 17190    27   165     5    27   445     1      64  }
 17191    27   165     5    27   445     0    1122  ENDMETHOD
 17192    27   165     5    27   446     0    1123  STARTMETHOD
 17193    27   207     5    27   446     0      10  public
 17194    27   207    12    27   446     0     111  ByteOrder
 17195    27   207    22    27   446     0     111  order
 17196    27   207    27    27   446     0      59  (
 17197    27   207    28    27   446     0      60  )
 17198    27   207    30    27   446     0      63  {
 17199    27   209     9    27   446     0      19  return
 17200    27   209    16    27   446     0     111  ByteOrder.BIG_ENDIAN
 17201    27   209    36    27   446     1     102  ;
 17202    27   214     5    27   446     1      64  }
 17203    27   214     5    27   446     0    1124  ENDMETHOD
 17204    27   216     1    27    -1     0      64  }
 17205    27   216     1    27    -1     1    1125  ENDCLASS
 17206    27   216     1    -1    -1     1    1126  ENDFILE C:\javasrc\java\nio\ByteBufferAsShortBufferRB.java
 17207    28     1     1    -1    -1     1    1127  STARTFILE C:\javasrc\java\nio\ByteBufferAsShortBufferRL.java
 17208    28    28     1    -1    -1     0       5  package
 17209    28    28     9    -1    -1     0     111  java.nio
 17210    28    28    17    -1    -1     0     102  ;
 17211    28    31     1    28    -1     0    1128  STARTCLASS
 17212    28    31     1    28    -1     0      24  class
 17213    28    31     7    28    -1     0     111  ByteBufferAsShortBufferRL
 17214    28    32     5    28    -1     0      38  extends
 17215    28    32    13    28    -1     0     111  ByteBufferAsShortBufferL
 17216    28    33     1    28    -1     0      63  {
 17217    28    33     1    28   447     0    1129  STARTMETHOD
 17218    28    42     5    28   447     0     111  ByteBufferAsShortBufferRL
 17219    28    42    30    28   447     0      59  (
 17220    28    42    31    28   447     0     111  ByteBuffer
 17221    28    42    42    28   447     0     111  bb
 17222    28    42    44    28   447     0      60  )
 17223    28    42    46    28   447     0      63  {
 17224    28    55     9    28   447     0      27  super
 17225    28    55    14    28   447     0      59  (
 17226    28    55    15    28   447     0     111  bb
 17227    28    55    17    28   447     0      60  )
 17228    28    55    18    28   447     0     102  ;
 17229    28    57     5    28   447     0      64  }
 17230    28    57     5    28   447     0    1130  ENDMETHOD
 17231    28    57     5    28   448     0    1131  STARTMETHOD
 17232    28    59     5    28   448     0     111  ByteBufferAsShortBufferRL
 17233    28    59    30    28   448     0      59  (
 17234    28    59    31    28   448     0     111  ByteBuffer
 17235    28    59    42    28   448     0     111  bb
 17236    28    59    44    28   448     0      66  ,
 17237    28    60    38    28   448     0      36  int
 17238    28    60    42    28   448     0     111  mark
 17239    28    60    46    28   448     0      66  ,
 17240    28    60    48    28   448     0      36  int
 17241    28    60    52    28   448     0     111  pos
 17242    28    60    55    28   448     0      66  ,
 17243    28    60    57    28   448     0      36  int
 17244    28    60    61    28   448     0     111  lim
 17245    28    60    64    28   448     0      66  ,
 17246    28    60    66    28   448     0      36  int
 17247    28    60    70    28   448     0     111  cap
 17248    28    60    73    28   448     0      66  ,
 17249    28    61    38    28   448     0      36  int
 17250    28    61    42    28   448     0     111  off
 17251    28    61    45    28   448     0      60  )
 17252    28    62     5    28   448     0      63  {
 17253    28    68     9    28   448     0      27  super
 17254    28    68    14    28   448     0      59  (
 17255    28    68    15    28   448     0     111  bb
 17256    28    68    17    28   448     0      66  ,
 17257    28    68    19    28   448     0     111  mark
 17258    28    68    23    28   448     0      66  ,
 17259    28    68    25    28   448     0     111  pos
 17260    28    68    28    28   448     0      66  ,
 17261    28    68    30    28   448     0     111  lim
 17262    28    68    33    28   448     0      66  ,
 17263    28    68    35    28   448     0     111  cap
 17264    28    68    38    28   448     0      66  ,
 17265    28    68    40    28   448     0     111  off
 17266    28    68    43    28   448     0      60  )
 17267    28    68    44    28   448     0     102  ;
 17268    28    70     5    28   448     0      64  }
 17269    28    70     5    28   448     0    1132  ENDMETHOD
 17270    28    70     5    28   449     0    1133  STARTMETHOD
 17271    28    72     5    28   449     0      10  public
 17272    28    72    12    28   449     0     111  ShortBuffer
 17273    28    72    24    28   449     0     111  slice
 17274    28    72    29    28   449     0      59  (
 17275    28    72    30    28   449     0      60  )
 17276    28    72    32    28   449     0      63  {
 17277    28    73     9    28   449     1      36  int
 17278    28    73    13    28   449     1     111  pos
 17279    28    73    17    28   449     1      67  =
 17280    28    73    19    28   449     1     111  this.position
 17281    28    73    32    28   449     1      59  (
 17282    28    73    33    28   449     1      60  )
 17283    28    73    34    28   449     1     102  ;
 17284    28    74     9    28   449     1      36  int
 17285    28    74    13    28   449     1     111  lim
 17286    28    74    17    28   449     1      67  =
 17287    28    74    19    28   449     1     111  this.limit
 17288    28    74    29    28   449     1      59  (
 17289    28    74    30    28   449     1      60  )
 17290    28    74    31    28   449     1     102  ;
 17291    28    75     9    28   449     0     111  assert
 17292    28    75    16    28   449     0      59  (
 17293    28    75    17    28   449     0     111  pos
 17294    28    75    21    28   449     0      92  <=
 17295    28    75    24    28   449     0     111  lim
 17296    28    75    27    28   449     0      60  )
 17297    28    75    28    28   449     0     102  ;
 17298    28    76     9    28   449     0      36  int
 17299    28    76    13    28   449     0     111  rem
 17300    28    76    17    28   449     0      67  =
 17301    28    76    19    28   449     0      59  (
 17302    28    76    20    28   449     0     111  pos
 17303    28    76    24    28   449     0      92  <=
 17304    28    76    27    28   449     0     111  lim
 17305    28    76    31    28   449     0      58  ?
 17306    28    76    33    28   449     0     111  lim
 17307    28    76    37    28   449     0      77  -
 17308    28    76    39    28   449     0     111  pos
 17309    28    76    43    28   449     0      65  :
 17310    28    76    45    28   449     0     112  0
 17311    28    76    46    28   449     0      60  )
 17312    28    76    47    28   449     0     102  ;
 17313    28    77     9    28   449     0      36  int
 17314    28    77    13    28   449     0     111  off
 17315    28    77    17    28   449     0      67  =
 17316    28    77    19    28   449     0      59  (
 17317    28    77    20    28   449     0     111  pos
 17318    28    77    24    28   449     0      90  <<
 17319    28    77    27    28   449     0     112  1
 17320    28    77    28    28   449     0      60  )
 17321    28    77    30    28   449     0      74  +
 17322    28    77    32    28   449     0     111  offset
 17323    28    77    38    28   449     0     102  ;
 17324    28    78     9    28   449     0     111  assert
 17325    28    78    16    28   449     0      59  (
 17326    28    78    17    28   449     0     111  off
 17327    28    78    21    28   449     0      88  >=
 17328    28    78    24    28   449     0     112  0
 17329    28    78    25    28   449     0      60  )
 17330    28    78    26    28   449     0     102  ;
 17331    28    79     9    28   449     0      19  return
 17332    28    79    16    28   449     0      15  new
 17333    28    79    20    28   449     0     111  ByteBufferAsShortBufferRL
 17334    28    79    45    28   449     0      59  (
 17335    28    79    46    28   449     0     111  bb
 17336    28    79    48    28   449     0      66  ,
 17337    28    79    50    28   449     0      77  -
 17338    28    79    51    28   449     0     112  1
 17339    28    79    52    28   449     0      66  ,
 17340    28    79    54    28   449     0     112  0
 17341    28    79    55    28   449     0      66  ,
 17342    28    79    57    28   449     0     111  rem
 17343    28    79    60    28   449     0      66  ,
 17344    28    79    62    28   449     0     111  rem
 17345    28    79    65    28   449     0      66  ,
 17346    28    79    67    28   449     0     111  off
 17347    28    79    70    28   449     0      60  )
 17348    28    79    71    28   449     0     102  ;
 17349    28    80     5    28   449     0      64  }
 17350    28    80     5    28   449     0    1134  ENDMETHOD
 17351    28    80     5    28   450     0    1135  STARTMETHOD
 17352    28    82     5    28   450     0      10  public
 17353    28    82    12    28   450     0     111  ShortBuffer
 17354    28    82    24    28   450     0     111  duplicate
 17355    28    82    33    28   450     0      59  (
 17356    28    82    34    28   450     0      60  )
 17357    28    82    36    28   450     0      63  {
 17358    28    83     9    28   450     0      19  return
 17359    28    83    16    28   450     0      15  new
 17360    28    83    20    28   450     0     111  ByteBufferAsShortBufferRL
 17361    28    83    45    28   450     0      59  (
 17362    28    83    46    28   450     0     111  bb
 17363    28    83    48    28   450     0      66  ,
 17364    28    84    53    28   450     1     111  this.markValue
 17365    28    84    67    28   450     1      59  (
 17366    28    84    68    28   450     1      60  )
 17367    28    84    69    28   450     1      66  ,
 17368    28    85    53    28   450     1     111  this.position
 17369    28    85    66    28   450     1      59  (
 17370    28    85    67    28   450     1      60  )
 17371    28    85    68    28   450     1      66  ,
 17372    28    86    53    28   450     1     111  this.limit
 17373    28    86    63    28   450     1      59  (
 17374    28    86    64    28   450     1      60  )
 17375    28    86    65    28   450     1      66  ,
 17376    28    87    53    28   450     1     111  this.capacity
 17377    28    87    66    28   450     1      59  (
 17378    28    87    67    28   450     1      60  )
 17379    28    87    68    28   450     1      66  ,
 17380    28    88    53    28   450     0     111  offset
 17381    28    88    59    28   450     0      60  )
 17382    28    88    60    28   450     0     102  ;
 17383    28    89     5    28   450     0      64  }
 17384    28    89     5    28   450     0    1136  ENDMETHOD
 17385    28    89     5    28   451     0    1137  STARTMETHOD
 17386    28    91     5    28   451     0      10  public
 17387    28    91    12    28   451     0     111  ShortBuffer
 17388    28    91    24    28   451     0     111  asReadOnlyBuffer
 17389    28    91    40    28   451     0      59  (
 17390    28    91    41    28   451     0      60  )
 17391    28    91    43    28   451     0      63  {
 17392    28   100     9    28   451     0      19  return
 17393    28   100    16    28   451     0     111  duplicate
 17394    28   100    25    28   451     0      59  (
 17395    28   100    26    28   451     0      60  )
 17396    28   100    27    28   451     0     102  ;
 17397    28   102     5    28   451     0      64  }
 17398    28   102     5    28   451     0    1138  ENDMETHOD
 17399    28   102     5    28   452     0    1139  STARTMETHOD
 17400    28   120     5    28   452     0      10  public
 17401    28   120    12    28   452     0     111  ShortBuffer
 17402    28   120    24    28   452     0     111  put
 17403    28   120    27    28   452     0      59  (
 17404    28   120    28    28   452     0      12  short
 17405    28   120    34    28   452     0     111  x
 17406    28   120    35    28   452     0      60  )
 17407    28   120    37    28   452     0      63  {
 17408    28   125     9    28   452     0      20  throw
 17409    28   125    15    28   452     0      15  new
 17410    28   125    19    28   452     0     111  ReadOnlyBufferException
 17411    28   125    42    28   452     0      59  (
 17412    28   125    43    28   452     0      60  )
 17413    28   125    44    28   452     0     102  ;
 17414    28   127     5    28   452     0      64  }
 17415    28   127     5    28   452     0    1140  ENDMETHOD
 17416    28   127     5    28   453     0    1141  STARTMETHOD
 17417    28   129     5    28   453     0      10  public
 17418    28   129    12    28   453     0     111  ShortBuffer
 17419    28   129    24    28   453     0     111  put
 17420    28   129    27    28   453     0      59  (
 17421    28   129    28    28   453     0      36  int
 17422    28   129    32    28   453     0     111  i
 17423    28   129    33    28   453     0      66  ,
 17424    28   129    35    28   453     0      12  short
 17425    28   129    41    28   453     0     111  x
 17426    28   129    42    28   453     0      60  )
 17427    28   129    44    28   453     0      63  {
 17428    28   134     9    28   453     0      20  throw
 17429    28   134    15    28   453     0      15  new
 17430    28   134    19    28   453     0     111  ReadOnlyBufferException
 17431    28   134    42    28   453     0      59  (
 17432    28   134    43    28   453     0      60  )
 17433    28   134    44    28   453     0     102  ;
 17434    28   136     5    28   453     0      64  }
 17435    28   136     5    28   453     0    1142  ENDMETHOD
 17436    28   136     5    28   454     0    1143  STARTMETHOD
 17437    28   138     5    28   454     0      10  public
 17438    28   138    12    28   454     0     111  ShortBuffer
 17439    28   138    24    28   454     0     111  compact
 17440    28   138    31    28   454     0      59  (
 17441    28   138    32    28   454     0      60  )
 17442    28   138    34    28   454     0      63  {
 17443    28   155     9    28   454     0      20  throw
 17444    28   155    15    28   454     0      15  new
 17445    28   155    19    28   454     0     111  ReadOnlyBufferException
 17446    28   155    42    28   454     0      59  (
 17447    28   155    43    28   454     0      60  )
 17448    28   155    44    28   454     0     102  ;
 17449    28   157     5    28   454     0      64  }
 17450    28   157     5    28   454     0    1144  ENDMETHOD
 17451    28   157     5    28   455     0    1145  STARTMETHOD
 17452    28   159     5    28   455     0      10  public
 17453    28   159    12    28   455     0      39  boolean
 17454    28   159    20    28   455     0     111  isDirect
 17455    28   159    28    28   455     0      59  (
 17456    28   159    29    28   455     0      60  )
 17457    28   159    31    28   455     0      63  {
 17458    28   160     9    28   455     0      19  return
 17459    28   160    16    28   455     0     111  bb.isDirect
 17460    28   160    27    28   455     0      59  (
 17461    28   160    28    28   455     0      60  )
 17462    28   160    29    28   455     1     102  ;
 17463    28   161     5    28   455     1      64  }
 17464    28   161     5    28   455     0    1146  ENDMETHOD
 17465    28   161     5    28   456     0    1147  STARTMETHOD
 17466    28   163     5    28   456     0      10  public
 17467    28   163    12    28   456     0      39  boolean
 17468    28   163    20    28   456     0     111  isReadOnly
 17469    28   163    30    28   456     0      59  (
 17470    28   163    31    28   456     0      60  )
 17471    28   163    33    28   456     0      63  {
 17472    28   164     9    28   456     0      19  return
 17473    28   164    16    28   456     0      52  true
 17474    28   164    20    28   456     1     102  ;
 17475    28   165     5    28   456     1      64  }
 17476    28   165     5    28   456     0    1148  ENDMETHOD
 17477    28   165     5    28   457     0    1149  STARTMETHOD
 17478    28   207     5    28   457     0      10  public
 17479    28   207    12    28   457     0     111  ByteOrder
 17480    28   207    22    28   457     0     111  order
 17481    28   207    27    28   457     0      59  (
 17482    28   207    28    28   457     0      60  )
 17483    28   207    30    28   457     0      63  {
 17484    28   212     9    28   457     0      19  return
 17485    28   212    16    28   457     0     111  ByteOrder.LITTLE_ENDIAN
 17486    28   212    39    28   457     1     102  ;
 17487    28   214     5    28   457     1      64  }
 17488    28   214     5    28   457     0    1150  ENDMETHOD
 17489    28   216     1    28    -1     0      64  }
 17490    28   216     1    28    -1     1    1151  ENDCLASS
 17491    28   216     1    -1    -1     1    1152  ENDFILE C:\javasrc\java\nio\ByteBufferAsShortBufferRL.java
 17492    29     1     1    -1    -1     1    1153  STARTFILE C:\javasrc\java\nio\ByteOrder.java
 17493    29    26     1    -1    -1     0       5  package
 17494    29    26     9    -1    -1     0     111  java.nio
 17495    29    26    17    -1    -1     0     102  ;
 17496    29    37     1    -1    -1     0      10  public
 17497    29    37     8    -1    -1     0       6  final
 17498    29    37    14    29    -1     0    1154  STARTCLASS
 17499    29    37    14    29    -1     0      24  class
 17500    29    37    20    29    -1     0     111  ByteOrder
 17501    29    37    30    29    -1     0      63  {
 17502    29    39     5    29    -1     0      41  private
 17503    29    39    13    29    -1     0     111  String
 17504    29    39    20    29    -1     0     111  name
 17505    29    39    24    29    -1     0     102  ;
 17506    29    39    24    29   458     0    1155  STARTMETHOD
 17507    29    41     5    29   458     0      41  private
 17508    29    41    13    29   458     0     111  ByteOrder
 17509    29    41    22    29   458     0      59  (
 17510    29    41    23    29   458     0     111  String
 17511    29    41    30    29   458     0     111  name
 17512    29    41    34    29   458     0      60  )
 17513    29    41    36    29   458     0      63  {
 17514    29    42     9    29   458     0     111  this.name
 17515    29    42    19    29   458     0      67  =
 17516    29    42    21    29   458     0     111  name
 17517    29    42    25    29   458     0     102  ;
 17518    29    43     5    29   458     0      64  }
 17519    29    43     5    29   458     0    1156  ENDMETHOD
 17520    29    50     5    29    -1     0      10  public
 17521    29    50    12    29    -1     0      45  static
 17522    29    50    19    29    -1     0       6  final
 17523    29    50    25    29    -1     0     111  ByteOrder
 17524    29    50    35    29    -1     0     111  BIG_ENDIAN
 17525    29    51     9    29    -1     0      67  =
 17526    29    51    11    29    -1     0      15  new
 17527    29    51    15    29    -1     0     111  ByteOrder
 17528    29    51    24    29    -1     0      59  (
 17529    29    51    25    29    -1     0     107  "BIG_ENDIAN"
 17530    29    51    37    29    -1     0      60  )
 17531    29    51    38    29    -1     0     102  ;
 17532    29    58     5    29    -1     0      10  public
 17533    29    58    12    29    -1     0      45  static
 17534    29    58    19    29    -1     0       6  final
 17535    29    58    25    29    -1     0     111  ByteOrder
 17536    29    58    35    29    -1     0     111  LITTLE_ENDIAN
 17537    29    59     9    29    -1     0      67  =
 17538    29    59    11    29    -1     0      15  new
 17539    29    59    15    29    -1     0     111  ByteOrder
 17540    29    59    24    29    -1     0      59  (
 17541    29    59    25    29    -1     0     107  "LITTLE_ENDIAN"
 17542    29    59    40    29    -1     0      60  )
 17543    29    59    41    29    -1     0     102  ;
 17544    29    59    41    29   459     0    1157  STARTMETHOD
 17545    29    72     5    29   459     0      10  public
 17546    29    72    12    29   459     0      45  static
 17547    29    72    19    29   459     0     111  ByteOrder
 17548    29    72    29    29   459     0     111  nativeOrder
 17549    29    72    40    29   459     0      59  (
 17550    29    72    41    29   459     0      60  )
 17551    29    72    43    29   459     0      63  {
 17552    29    73     9    29   459     0      19  return
 17553    29    73    16    29   459     0     111  Bits.byteOrder
 17554    29    73    30    29   459     0      59  (
 17555    29    73    31    29   459     0      60  )
 17556    29    73    32    29   459     0     102  ;
 17557    29    74     5    29   459     0      64  }
 17558    29    74     5    29   459     0    1158  ENDMETHOD
 17559    29    74     5    29   460     0    1159  STARTMETHOD
 17560    29    85     5    29   460     0      10  public
 17561    29    85    12    29   460     0     111  String
 17562    29    85    19    29   460     0     111  toString
 17563    29    85    27    29   460     0      59  (
 17564    29    85    28    29   460     0      60  )
 17565    29    85    30    29   460     0      63  {
 17566    29    86     9    29   460     0      19  return
 17567    29    86    16    29   460     0     111  name
 17568    29    86    20    29   460     0     102  ;
 17569    29    87     5    29   460     0      64  }
 17570    29    87     5    29   460     0    1160  ENDMETHOD
 17571    29    89     1    29    -1     0      64  }
 17572    29    89     1    29    -1     1    1161  ENDCLASS
 17573    29    89     1    -1    -1     1    1162  ENDFILE C:\javasrc\java\nio\ByteOrder.java
 17574    30     1     1    -1    -1     1    1163  STARTFILE C:\javasrc\java\nio\CharBuffer.java
 17575    30    28     1    -1    -1     0       5  package
 17576    30    28     9    -1    -1     0     111  java.nio
 17577    30    28    17    -1    -1     0     102  ;
 17578    30    31     1    -1    -1     0      49  import
 17579    30    31     8    -1    -1     0     111  java.io.IOException
 17580    30    31    27    -1    -1     0     102  ;
 17581    30   257     1    -1    -1     0      10  public
 17582    30   257     8    -1    -1     0       7  abstract
 17583    30   257    17    30    -1     0    1164  STARTCLASS
 17584    30   257    17    30    -1     0      24  class
 17585    30   257    23    30    -1     0     111  CharBuffer
 17586    30   258     5    30    -1     0      38  extends
 17587    30   258    13    30    -1     0     111  Buffer
 17588    30   259     5    30    -1     0      17  implements
 17589    30   259    16    30    -1     0     111  Comparable
 17590    30   259    26    30    -1     0      93  <
 17591    30   259    27    30    -1     0     111  CharBuffer
 17592    30   259    37    30    -1     0      89  >
 17593    30   259    38    30    -1     0      66  ,
 17594    30   259    40    30    -1     0     111  Appendable
 17595    30   259    50    30    -1     0      66  ,
 17596    30   259    52    30    -1     0     111  CharSequence
 17597    30   259    64    30    -1     0      66  ,
 17598    30   259    66    30    -1     0     111  Readable
 17599    30   260     1    30    -1     0      63  {
 17600    30   266     5    30    -1     0       6  final
 17601    30   266    11    30    -1     0      40  char
 17602    30   266    15    30    -1     0      61  [
 17603    30   266    16    30    -1     0      62  ]
 17604    30   266    18    30    -1     0     111  hb
 17605    30   266    20    30    -1     0     102  ;
 17606    30   267     5    30    -1     0       6  final
 17607    30   267    11    30    -1     0      36  int
 17608    30   267    15    30    -1     0     111  offset
 17609    30   267    21    30    -1     0     102  ;
 17610    30   268     5    30    -1     0      39  boolean
 17611    30   268    13    30    -1     0     111  isReadOnly
 17612    30   268    23    30    -1     0     102  ;
 17613    30   268    23    30   461     0    1165  STARTMETHOD
 17614    30   273     5    30   461     0     111  CharBuffer
 17615    30   273    15    30   461     0      59  (
 17616    30   273    16    30   461     0      36  int
 17617    30   273    20    30   461     0     111  mark
 17618    30   273    24    30   461     0      66  ,
 17619    30   273    26    30   461     0      36  int
 17620    30   273    30    30   461     0     111  pos
 17621    30   273    33    30   461     0      66  ,
 17622    30   273    35    30   461     0      36  int
 17623    30   273    39    30   461     0     111  lim
 17624    30   273    42    30   461     0      66  ,
 17625    30   273    44    30   461     0      36  int
 17626    30   273    48    30   461     0     111  cap
 17627    30   273    51    30   461     0      66  ,
 17628    30   274    18    30   461     0      40  char
 17629    30   274    22    30   461     0      61  [
 17630    30   274    23    30   461     0      62  ]
 17631    30   274    25    30   461     0     111  hb
 17632    30   274    27    30   461     0      66  ,
 17633    30   274    29    30   461     0      36  int
 17634    30   274    33    30   461     0     111  offset
 17635    30   274    39    30   461     0      60  )
 17636    30   275     5    30   461     0      63  {
 17637    30   276     9    30   461     0      27  super
 17638    30   276    14    30   461     0      59  (
 17639    30   276    15    30   461     0     111  mark
 17640    30   276    19    30   461     0      66  ,
 17641    30   276    21    30   461     0     111  pos
 17642    30   276    24    30   461     0      66  ,
 17643    30   276    26    30   461     0     111  lim
 17644    30   276    29    30   461     0      66  ,
 17645    30   276    31    30   461     0     111  cap
 17646    30   276    34    30   461     0      60  )
 17647    30   276    35    30   461     0     102  ;
 17648    30   277     9    30   461     1     111  this.hb
 17649    30   277    17    30   461     1      67  =
 17650    30   277    19    30   461     1     111  hb
 17651    30   277    21    30   461     1     102  ;
 17652    30   278     9    30   461     1     111  this.offset
 17653    30   278    21    30   461     1      67  =
 17654    30   278    23    30   461     1     111  offset
 17655    30   278    29    30   461     1     102  ;
 17656    30   279     5    30   461     1      64  }
 17657    30   279     5    30   461     0    1166  ENDMETHOD
 17658    30   279     5    30   462     0    1167  STARTMETHOD
 17659    30   283     5    30   462     0     111  CharBuffer
 17660    30   283    15    30   462     0      59  (
 17661    30   283    16    30   462     0      36  int
 17662    30   283    20    30   462     0     111  mark
 17663    30   283    24    30   462     0      66  ,
 17664    30   283    26    30   462     0      36  int
 17665    30   283    30    30   462     0     111  pos
 17666    30   283    33    30   462     0      66  ,
 17667    30   283    35    30   462     0      36  int
 17668    30   283    39    30   462     0     111  lim
 17669    30   283    42    30   462     0      66  ,
 17670    30   283    44    30   462     0      36  int
 17671    30   283    48    30   462     0     111  cap
 17672    30   283    51    30   462     0      60  )
 17673    30   283    53    30   462     0      63  {
 17674    30   284     9    30   462     0      44  this
 17675    30   284    13    30   462     0      59  (
 17676    30   284    14    30   462     0     111  mark
 17677    30   284    18    30   462     0      66  ,
 17678    30   284    20    30   462     0     111  pos
 17679    30   284    23    30   462     0      66  ,
 17680    30   284    25    30   462     0     111  lim
 17681    30   284    28    30   462     0      66  ,
 17682    30   284    30    30   462     0     111  cap
 17683    30   284    33    30   462     0      66  ,
 17684    30   284    35    30   462     0      21  null
 17685    30   284    39    30   462     0      66  ,
 17686    30   284    41    30   462     0     112  0
 17687    30   284    42    30   462     0      60  )
 17688    30   284    43    30   462     1     102  ;
 17689    30   285     5    30   462     1      64  }
 17690    30   285     5    30   462     0    1168  ENDMETHOD
 17691    30   285     5    30   463     0    1169  STARTMETHOD
 17692    30   326     5    30   463     0      10  public
 17693    30   326    12    30   463     0      45  static
 17694    30   326    19    30   463     0     111  CharBuffer
 17695    30   326    30    30   463     0     111  allocate
 17696    30   326    38    30   463     0      59  (
 17697    30   326    39    30   463     0      36  int
 17698    30   326    43    30   463     0     111  capacity
 17699    30   326    51    30   463     0      60  )
 17700    30   326    53    30   463     0      63  {
 17701    30   327     9    30   463     0      31  if
 17702    30   327    12    30   463     0      59  (
 17703    30   327    13    30   463     0     111  capacity
 17704    30   327    22    30   463     0      93  <
 17705    30   327    24    30   463     0     112  0
 17706    30   327    25    30   463     0      60  )
 17707    30   328    13    30   463     0      20  throw
 17708    30   328    19    30   463     0      15  new
 17709    30   328    23    30   463     0     111  IllegalArgumentException
 17710    30   328    47    30   463     0      59  (
 17711    30   328    48    30   463     0      60  )
 17712    30   328    49    30   463     0     102  ;
 17713    30   329     9    30   463     0      19  return
 17714    30   329    16    30   463     0      15  new
 17715    30   329    20    30   463     0     111  HeapCharBuffer
 17716    30   329    34    30   463     0      59  (
 17717    30   329    35    30   463     0     111  capacity
 17718    30   329    43    30   463     0      66  ,
 17719    30   329    45    30   463     0     111  capacity
 17720    30   329    53    30   463     0      60  )
 17721    30   329    54    30   463     1     102  ;
 17722    30   330     5    30   463     1      64  }
 17723    30   330     5    30   463     0    1170  ENDMETHOD
 17724    30   330     5    30   464     0    1171  STARTMETHOD
 17725    30   363     5    30   464     0      10  public
 17726    30   363    12    30   464     0      45  static
 17727    30   363    19    30   464     0     111  CharBuffer
 17728    30   363    30    30   464     0     111  wrap
 17729    30   363    34    30   464     0      59  (
 17730    30   363    35    30   464     0      40  char
 17731    30   363    39    30   464     0      61  [
 17732    30   363    40    30   464     0      62  ]
 17733    30   363    42    30   464     0     111  array
 17734    30   363    47    30   464     0      66  ,
 17735    30   364    37    30   464     0      36  int
 17736    30   364    41    30   464     0     111  offset
 17737    30   364    47    30   464     0      66  ,
 17738    30   364    49    30   464     0      36  int
 17739    30   364    53    30   464     0     111  length
 17740    30   364    59    30   464     0      60  )
 17741    30   365     5    30   464     0      63  {
 17742    30   366     9    30   464     0      35  try
 17743    30   366    13    30   464     0      63  {
 17744    30   367    13    30   464     0      19  return
 17745    30   367    20    30   464     0      15  new
 17746    30   367    24    30   464     0     111  HeapCharBuffer
 17747    30   367    38    30   464     0      59  (
 17748    30   367    39    30   464     0     111  array
 17749    30   367    44    30   464     0      66  ,
 17750    30   367    46    30   464     0     111  offset
 17751    30   367    52    30   464     0      66  ,
 17752    30   367    54    30   464     0     111  length
 17753    30   367    60    30   464     0      60  )
 17754    30   367    61    30   464     0     102  ;
 17755    30   368     9    30   464     0      64  }
 17756    30   368    11    30   464     0      34  catch
 17757    30   368    17    30   464     0      59  (
 17758    30   368    18    30   464     0     111  IllegalArgumentException
 17759    30   368    43    30   464     0     111  x
 17760    30   368    44    30   464     0      60  )
 17761    30   368    46    30   464     0      63  {
 17762    30   369    13    30   464     0      20  throw
 17763    30   369    19    30   464     0      15  new
 17764    30   369    23    30   464     0     111  IndexOutOfBoundsException
 17765    30   369    48    30   464     0      59  (
 17766    30   369    49    30   464     0      60  )
 17767    30   369    50    30   464     0     102  ;
 17768    30   370     9    30   464     0      64  }
 17769    30   371     5    30   464     0      64  }
 17770    30   371     5    30   464     0    1172  ENDMETHOD
 17771    30   371     5    30   465     0    1173  STARTMETHOD
 17772    30   389     5    30   465     0      10  public
 17773    30   389    12    30   465     0      45  static
 17774    30   389    19    30   465     0     111  CharBuffer
 17775    30   389    30    30   465     0     111  wrap
 17776    30   389    34    30   465     0      59  (
 17777    30   389    35    30   465     0      40  char
 17778    30   389    39    30   465     0      61  [
 17779    30   389    40    30   465     0      62  ]
 17780    30   389    42    30   465     0     111  array
 17781    30   389    47    30   465     0      60  )
 17782    30   389    49    30   465     0      63  {
 17783    30   390     9    30   465     0      19  return
 17784    30   390    16    30   465     0     111  wrap
 17785    30   390    20    30   465     0      59  (
 17786    30   390    21    30   465     0     111  array
 17787    30   390    26    30   465     0      66  ,
 17788    30   390    28    30   465     0     112  0
 17789    30   390    29    30   465     0      66  ,
 17790    30   390    31    30   465     0     111  array.length
 17791    30   390    43    30   465     0      60  )
 17792    30   390    44    30   465     0     102  ;
 17793    30   391     5    30   465     0      64  }
 17794    30   391     5    30   465     0    1174  ENDMETHOD
 17795    30   391     5    30   466     0    1175  STARTMETHOD
 17796    30   409     5    30   466     0      10  public
 17797    30   409    12    30   466     0      36  int
 17798    30   409    16    30   466     0     111  read
 17799    30   409    20    30   466     0      59  (
 17800    30   409    21    30   466     0     111  CharBuffer
 17801    30   409    32    30   466     0     111  target
 17802    30   409    38    30   466     0      60  )
 17803    30   409    40    30   466     0      25  throws
 17804    30   409    47    30   466     0     111  IOException
 17805    30   409    59    30   466     0      63  {
 17806    30   411     9    30   466     1      36  int
 17807    30   411    13    30   466     1     111  targetRemaining
 17808    30   411    29    30   466     1      67  =
 17809    30   411    31    30   466     1     111  target.remaining
 17810    30   411    47    30   466     1      59  (
 17811    30   411    48    30   466     1      60  )
 17812    30   411    49    30   466     1     102  ;
 17813    30   412     9    30   466     1      36  int
 17814    30   412    13    30   466     1     111  remaining
 17815    30   412    23    30   466     1      67  =
 17816    30   412    25    30   466     1     111  remaining
 17817    30   412    34    30   466     1      59  (
 17818    30   412    35    30   466     1      60  )
 17819    30   412    36    30   466     1     102  ;
 17820    30   413     9    30   466     0      31  if
 17821    30   413    12    30   466     0      59  (
 17822    30   413    13    30   466     0     111  remaining
 17823    30   413    23    30   466     0      68  ==
 17824    30   413    26    30   466     0     112  0
 17825    30   413    27    30   466     0      60  )
 17826    30   414    13    30   466     0      19  return
 17827    30   414    20    30   466     0      77  -
 17828    30   414    21    30   466     0     112  1
 17829    30   414    22    30   466     0     102  ;
 17830    30   415     9    30   466     0      36  int
 17831    30   415    13    30   466     0     111  n
 17832    30   415    15    30   466     0      67  =
 17833    30   415    17    30   466     0     111  Math.min
 17834    30   415    25    30   466     0      59  (
 17835    30   415    26    30   466     0     111  remaining
 17836    30   415    35    30   466     0      66  ,
 17837    30   415    37    30   466     0     111  targetRemaining
 17838    30   415    52    30   466     0      60  )
 17839    30   415    53    30   466     0     102  ;
 17840    30   416     9    30   466     0      36  int
 17841    30   416    13    30   466     0     111  limit
 17842    30   416    19    30   466     0      67  =
 17843    30   416    21    30   466     0     111  limit
 17844    30   416    26    30   466     0      59  (
 17845    30   416    27    30   466     0      60  )
 17846    30   416    28    30   466     0     102  ;
 17847    30   418     9    30   466     0      31  if
 17848    30   418    12    30   466     0      59  (
 17849    30   418    13    30   466     0     111  targetRemaining
 17850    30   418    29    30   466     0      93  <
 17851    30   418    31    30   466     0     111  remaining
 17852    30   418    40    30   466     0      60  )
 17853    30   419    13    30   466     0     111  limit
 17854    30   419    18    30   466     0      59  (
 17855    30   419    19    30   466     0     111  position
 17856    30   419    27    30   466     0      59  (
 17857    30   419    28    30   466     0      60  )
 17858    30   419    30    30   466     0      74  +
 17859    30   419    32    30   466     0     111  n
 17860    30   419    33    30   466     0      60  )
 17861    30   419    34    30   466     0     102  ;
 17862    30   420     9    30   466     0      35  try
 17863    30   420    13    30   466     0      63  {
 17864    30   421    13    30   466     0      31  if
 17865    30   421    16    30   466     0      59  (
 17866    30   421    17    30   466     0     111  n
 17867    30   421    19    30   466     0      89  >
 17868    30   421    21    30   466     0     112  0
 17869    30   421    22    30   466     0      60  )
 17870    30   422    17    30   466     0     111  target.put
 17871    30   422    27    30   466     0      59  (
 17872    30   422    28    30   466     0      44  this
 17873    30   422    32    30   466     0      60  )
 17874    30   422    33    30   466     0     102  ;
 17875    30   423     9    30   466     0      64  }
 17876    30   423    11    30   466     0      47  finally
 17877    30   423    19    30   466     0      63  {
 17878    30   424    13    30   466     0     111  limit
 17879    30   424    18    30   466     0      59  (
 17880    30   424    19    30   466     0     111  limit
 17881    30   424    24    30   466     0      60  )
 17882    30   424    25    30   466     0     102  ;
 17883    30   425     9    30   466     0      64  }
 17884    30   426     9    30   466     0      19  return
 17885    30   426    16    30   466     0     111  n
 17886    30   426    17    30   466     0     102  ;
 17887    30   427     5    30   466     0      64  }
 17888    30   427     5    30   466     0    1176  ENDMETHOD
 17889    30   427     5    30   467     0    1177  STARTMETHOD
 17890    30   458     5    30   467     0      10  public
 17891    30   458    12    30   467     0      45  static
 17892    30   458    19    30   467     0     111  CharBuffer
 17893    30   458    30    30   467     0     111  wrap
 17894    30   458    34    30   467     0      59  (
 17895    30   458    35    30   467     0     111  CharSequence
 17896    30   458    48    30   467     0     111  csq
 17897    30   458    51    30   467     0      66  ,
 17898    30   458    53    30   467     0      36  int
 17899    30   458    57    30   467     0     111  start
 17900    30   458    62    30   467     0      66  ,
 17901    30   458    64    30   467     0      36  int
 17902    30   458    68    30   467     0     111  end
 17903    30   458    71    30   467     0      60  )
 17904    30   458    73    30   467     0      63  {
 17905    30   459     9    30   467     0      35  try
 17906    30   459    13    30   467     0      63  {
 17907    30   460    13    30   467     0      19  return
 17908    30   460    20    30   467     0      15  new
 17909    30   460    24    30   467     0     111  StringCharBuffer
 17910    30   460    40    30   467     0      59  (
 17911    30   460    41    30   467     0     111  csq
 17912    30   460    44    30   467     0      66  ,
 17913    30   460    46    30   467     0     111  start
 17914    30   460    51    30   467     0      66  ,
 17915    30   460    53    30   467     0     111  end
 17916    30   460    56    30   467     0      60  )
 17917    30   460    57    30   467     0     102  ;
 17918    30   461     9    30   467     0      64  }
 17919    30   461    11    30   467     0      34  catch
 17920    30   461    17    30   467     0      59  (
 17921    30   461    18    30   467     0     111  IllegalArgumentException
 17922    30   461    43    30   467     0     111  x
 17923    30   461    44    30   467     0      60  )
 17924    30   461    46    30   467     0      63  {
 17925    30   462    13    30   467     0      20  throw
 17926    30   462    19    30   467     0      15  new
 17927    30   462    23    30   467     0     111  IndexOutOfBoundsException
 17928    30   462    48    30   467     0      59  (
 17929    30   462    49    30   467     0      60  )
 17930    30   462    50    30   467     0     102  ;
 17931    30   463     9    30   467     0      64  }
 17932    30   464     5    30   467     0      64  }
 17933    30   464     5    30   467     0    1178  ENDMETHOD
 17934    30   464     5    30   468     0    1179  STARTMETHOD
 17935    30   480     5    30   468     0      10  public
 17936    30   480    12    30   468     0      45  static
 17937    30   480    19    30   468     0     111  CharBuffer
 17938    30   480    30    30   468     0     111  wrap
 17939    30   480    34    30   468     0      59  (
 17940    30   480    35    30   468     0     111  CharSequence
 17941    30   480    48    30   468     0     111  csq
 17942    30   480    51    30   468     0      60  )
 17943    30   480    53    30   468     0      63  {
 17944    30   481     9    30   468     0      19  return
 17945    30   481    16    30   468     0     111  wrap
 17946    30   481    20    30   468     0      59  (
 17947    30   481    21    30   468     0     111  csq
 17948    30   481    24    30   468     0      66  ,
 17949    30   481    26    30   468     0     112  0
 17950    30   481    27    30   468     0      66  ,
 17951    30   481    29    30   468     0     111  csq.length
 17952    30   481    39    30   468     0      59  (
 17953    30   481    40    30   468     0      60  )
 17954    30   481    41    30   468     0      60  )
 17955    30   481    42    30   468     0     102  ;
 17956    30   482     5    30   468     0      64  }
 17957    30   482     5    30   468     0    1180  ENDMETHOD
 17958    30   503     5    30    -1     1      10  public
 17959    30   503    12    30    -1     1       7  abstract
 17960    30   503    21    30    -1     1     111  CharBuffer
 17961    30   503    32    30    -1     1     111  slice
 17962    30   503    37    30    -1     1      59  (
 17963    30   503    38    30    -1     1      60  )
 17964    30   503    39    30    -1     1     102  ;
 17965    30   520     5    30    -1     1      10  public
 17966    30   520    12    30    -1     1       7  abstract
 17967    30   520    21    30    -1     1     111  CharBuffer
 17968    30   520    32    30    -1     1     111  duplicate
 17969    30   520    41    30    -1     1      59  (
 17970    30   520    42    30    -1     1      60  )
 17971    30   520    43    30    -1     1     102  ;
 17972    30   540     5    30    -1     1      10  public
 17973    30   540    12    30    -1     1       7  abstract
 17974    30   540    21    30    -1     1     111  CharBuffer
 17975    30   540    32    30    -1     1     111  asReadOnlyBuffer
 17976    30   540    48    30    -1     1      59  (
 17977    30   540    49    30    -1     1      60  )
 17978    30   540    50    30    -1     1     102  ;
 17979    30   554     5    30    -1     0      10  public
 17980    30   554    12    30    -1     0       7  abstract
 17981    30   554    21    30    -1     0      40  char
 17982    30   554    26    30    -1     0     111  get
 17983    30   554    29    30    -1     0      59  (
 17984    30   554    30    30    -1     0      60  )
 17985    30   554    31    30    -1     0     102  ;
 17986    30   573     5    30    -1     0      10  public
 17987    30   573    12    30    -1     0       7  abstract
 17988    30   573    21    30    -1     0     111  CharBuffer
 17989    30   573    32    30    -1     0     111  put
 17990    30   573    35    30    -1     0      59  (
 17991    30   573    36    30    -1     0      40  char
 17992    30   573    41    30    -1     0     111  c
 17993    30   573    42    30    -1     0      60  )
 17994    30   573    43    30    -1     0     102  ;
 17995    30   588     5    30    -1     0      10  public
 17996    30   588    12    30    -1     0       7  abstract
 17997    30   588    21    30    -1     0      40  char
 17998    30   588    26    30    -1     0     111  get
 17999    30   588    29    30    -1     0      59  (
 18000    30   588    30    30    -1     0      36  int
 18001    30   588    34    30    -1     0     111  index
 18002    30   588    39    30    -1     0      60  )
 18003    30   588    40    30    -1     0     102  ;
 18004    30   611     5    30    -1     0      10  public
 18005    30   611    12    30    -1     0       7  abstract
 18006    30   611    21    30    -1     0     111  CharBuffer
 18007    30   611    32    30    -1     0     111  put
 18008    30   611    35    30    -1     0      59  (
 18009    30   611    36    30    -1     0      36  int
 18010    30   611    40    30    -1     0     111  index
 18011    30   611    45    30    -1     0      66  ,
 18012    30   611    47    30    -1     0      40  char
 18013    30   611    52    30    -1     0     111  c
 18014    30   611    53    30    -1     0      60  )
 18015    30   611    54    30    -1     0     102  ;
 18016    30   611    54    30   469     0    1181  STARTMETHOD
 18017    30   665     5    30   469     0      10  public
 18018    30   665    12    30   469     0     111  CharBuffer
 18019    30   665    23    30   469     0     111  get
 18020    30   665    26    30   469     0      59  (
 18021    30   665    27    30   469     0      40  char
 18022    30   665    31    30   469     0      61  [
 18023    30   665    32    30   469     0      62  ]
 18024    30   665    34    30   469     0     111  dst
 18025    30   665    37    30   469     0      66  ,
 18026    30   665    39    30   469     0      36  int
 18027    30   665    43    30   469     0     111  offset
 18028    30   665    49    30   469     0      66  ,
 18029    30   665    51    30   469     0      36  int
 18030    30   665    55    30   469     0     111  length
 18031    30   665    61    30   469     0      60  )
 18032    30   665    63    30   469     0      63  {
 18033    30   666     9    30   469     0     111  checkBounds
 18034    30   666    20    30   469     0      59  (
 18035    30   666    21    30   469     0     111  offset
 18036    30   666    27    30   469     0      66  ,
 18037    30   666    29    30   469     0     111  length
 18038    30   666    35    30   469     0      66  ,
 18039    30   666    37    30   469     0     111  dst.length
 18040    30   666    47    30   469     0      60  )
 18041    30   666    48    30   469     0     102  ;
 18042    30   667     9    30   469     0      31  if
 18043    30   667    12    30   469     0      59  (
 18044    30   667    13    30   469     0     111  length
 18045    30   667    20    30   469     0      89  >
 18046    30   667    22    30   469     0     111  remaining
 18047    30   667    31    30   469     0      59  (
 18048    30   667    32    30   469     0      60  )
 18049    30   667    33    30   469     0      60  )
 18050    30   668    13    30   469     0      20  throw
 18051    30   668    19    30   469     0      15  new
 18052    30   668    23    30   469     0     111  BufferUnderflowException
 18053    30   668    47    30   469     0      59  (
 18054    30   668    48    30   469     0      60  )
 18055    30   668    49    30   469     0     102  ;
 18056    30   669     9    30   469     0      36  int
 18057    30   669    13    30   469     0     111  end
 18058    30   669    17    30   469     0      67  =
 18059    30   669    19    30   469     0     111  offset
 18060    30   669    26    30   469     0      74  +
 18061    30   669    28    30   469     0     111  length
 18062    30   669    34    30   469     0     102  ;
 18063    30   670     9    30   469     0      37  for
 18064    30   670    13    30   469     0      59  (
 18065    30   670    14    30   469     0      36  int
 18066    30   670    18    30   469     0     111  i
 18067    30   670    20    30   469     0      67  =
 18068    30   670    22    30   469     0     111  offset
 18069    30   670    28    30   469     0     102  ;
 18070    30   670    30    30   469     0     111  i
 18071    30   670    32    30   469     0      93  <
 18072    30   670    34    30   469     0     111  end
 18073    30   670    37    30   469     0     102  ;
 18074    30   670    39    30   469     0     111  i
 18075    30   670    40    30   469     0      76  ++
 18076    30   670    42    30   469     0      60  )
 18077    30   671    13    30   469     0     111  dst
 18078    30   671    16    30   469     0      61  [
 18079    30   671    17    30   469     0     111  i
 18080    30   671    18    30   469     0      62  ]
 18081    30   671    20    30   469     0      67  =
 18082    30   671    22    30   469     0     111  get
 18083    30   671    25    30   469     0      59  (
 18084    30   671    26    30   469     0      60  )
 18085    30   671    27    30   469     0     102  ;
 18086    30   672     9    30   469     0      19  return
 18087    30   672    16    30   469     0      44  this
 18088    30   672    20    30   469     0     102  ;
 18089    30   673     5    30   469     0      64  }
 18090    30   673     5    30   469     0    1182  ENDMETHOD
 18091    30   673     5    30   470     0    1183  STARTMETHOD
 18092    30   691     5    30   470     0      10  public
 18093    30   691    12    30   470     0     111  CharBuffer
 18094    30   691    23    30   470     0     111  get
 18095    30   691    26    30   470     0      59  (
 18096    30   691    27    30   470     0      40  char
 18097    30   691    31    30   470     0      61  [
 18098    30   691    32    30   470     0      62  ]
 18099    30   691    34    30   470     0     111  dst
 18100    30   691    37    30   470     0      60  )
 18101    30   691    39    30   470     0      63  {
 18102    30   692     9    30   470     0      19  return
 18103    30   692    16    30   470     0     111  get
 18104    30   692    19    30   470     0      59  (
 18105    30   692    20    30   470     0     111  dst
 18106    30   692    23    30   470     0      66  ,
 18107    30   692    25    30   470     0     112  0
 18108    30   692    26    30   470     0      66  ,
 18109    30   692    28    30   470     0     111  dst.length
 18110    30   692    38    30   470     0      60  )
 18111    30   692    39    30   470     0     102  ;
 18112    30   693     5    30   470     0      64  }
 18113    30   693     5    30   470     0    1184  ENDMETHOD
 18114    30   693     5    30   471     0    1185  STARTMETHOD
 18115    30   739     5    30   471     0      10  public
 18116    30   739    12    30   471     0     111  CharBuffer
 18117    30   739    23    30   471     0     111  put
 18118    30   739    26    30   471     0      59  (
 18119    30   739    27    30   471     0     111  CharBuffer
 18120    30   739    38    30   471     0     111  src
 18121    30   739    41    30   471     0      60  )
 18122    30   739    43    30   471     0      63  {
 18123    30   740     9    30   471     0      31  if
 18124    30   740    12    30   471     0      59  (
 18125    30   740    13    30   471     0     111  src
 18126    30   740    17    30   471     0      68  ==
 18127    30   740    20    30   471     0      44  this
 18128    30   740    24    30   471     0      60  )
 18129    30   741    13    30   471     0      20  throw
 18130    30   741    19    30   471     0      15  new
 18131    30   741    23    30   471     0     111  IllegalArgumentException
 18132    30   741    47    30   471     0      59  (
 18133    30   741    48    30   471     0      60  )
 18134    30   741    49    30   471     0     102  ;
 18135    30   742     9    30   471     0      36  int
 18136    30   742    13    30   471     0     111  n
 18137    30   742    15    30   471     0      67  =
 18138    30   742    17    30   471     0     111  src.remaining
 18139    30   742    30    30   471     0      59  (
 18140    30   742    31    30   471     0      60  )
 18141    30   742    32    30   471     0     102  ;
 18142    30   743     9    30   471     0      31  if
 18143    30   743    12    30   471     0      59  (
 18144    30   743    13    30   471     0     111  n
 18145    30   743    15    30   471     0      89  >
 18146    30   743    17    30   471     0     111  remaining
 18147    30   743    26    30   471     0      59  (
 18148    30   743    27    30   471     0      60  )
 18149    30   743    28    30   471     0      60  )
 18150    30   744    13    30   471     0      20  throw
 18151    30   744    19    30   471     0      15  new
 18152    30   744    23    30   471     0     111  BufferOverflowException
 18153    30   744    46    30   471     0      59  (
 18154    30   744    47    30   471     0      60  )
 18155    30   744    48    30   471     0     102  ;
 18156    30   745     9    30   471     0      37  for
 18157    30   745    13    30   471     0      59  (
 18158    30   745    14    30   471     0      36  int
 18159    30   745    18    30   471     0     111  i
 18160    30   745    20    30   471     0      67  =
 18161    30   745    22    30   471     0     112  0
 18162    30   745    23    30   471     0     102  ;
 18163    30   745    25    30   471     0     111  i
 18164    30   745    27    30   471     0      93  <
 18165    30   745    29    30   471     0     111  n
 18166    30   745    30    30   471     0     102  ;
 18167    30   745    32    30   471     0     111  i
 18168    30   745    33    30   471     0      76  ++
 18169    30   745    35    30   471     0      60  )
 18170    30   746    13    30   471     0     111  put
 18171    30   746    16    30   471     0      59  (
 18172    30   746    17    30   471     0     111  src.get
 18173    30   746    24    30   471     0      59  (
 18174    30   746    25    30   471     0      60  )
 18175    30   746    26    30   471     0      60  )
 18176    30   746    27    30   471     0     102  ;
 18177    30   747     9    30   471     0      19  return
 18178    30   747    16    30   471     0      44  this
 18179    30   747    20    30   471     0     102  ;
 18180    30   748     5    30   471     0      64  }
 18181    30   748     5    30   471     0    1186  ENDMETHOD
 18182    30   748     5    30   472     0    1187  STARTMETHOD
 18183    30   800     5    30   472     0      10  public
 18184    30   800    12    30   472     0     111  CharBuffer
 18185    30   800    23    30   472     0     111  put
 18186    30   800    26    30   472     0      59  (
 18187    30   800    27    30   472     0      40  char
 18188    30   800    31    30   472     0      61  [
 18189    30   800    32    30   472     0      62  ]
 18190    30   800    34    30   472     0     111  src
 18191    30   800    37    30   472     0      66  ,
 18192    30   800    39    30   472     0      36  int
 18193    30   800    43    30   472     0     111  offset
 18194    30   800    49    30   472     0      66  ,
 18195    30   800    51    30   472     0      36  int
 18196    30   800    55    30   472     0     111  length
 18197    30   800    61    30   472     0      60  )
 18198    30   800    63    30   472     0      63  {
 18199    30   801     9    30   472     0     111  checkBounds
 18200    30   801    20    30   472     0      59  (
 18201    30   801    21    30   472     0     111  offset
 18202    30   801    27    30   472     0      66  ,
 18203    30   801    29    30   472     0     111  length
 18204    30   801    35    30   472     0      66  ,
 18205    30   801    37    30   472     0     111  src.length
 18206    30   801    47    30   472     0      60  )
 18207    30   801    48    30   472     0     102  ;
 18208    30   802     9    30   472     0      31  if
 18209    30   802    12    30   472     0      59  (
 18210    30   802    13    30   472     0     111  length
 18211    30   802    20    30   472     0      89  >
 18212    30   802    22    30   472     0     111  remaining
 18213    30   802    31    30   472     0      59  (
 18214    30   802    32    30   472     0      60  )
 18215    30   802    33    30   472     0      60  )
 18216    30   803    13    30   472     0      20  throw
 18217    30   803    19    30   472     0      15  new
 18218    30   803    23    30   472     0     111  BufferOverflowException
 18219    30   803    46    30   472     0      59  (
 18220    30   803    47    30   472     0      60  )
 18221    30   803    48    30   472     0     102  ;
 18222    30   804     9    30   472     0      36  int
 18223    30   804    13    30   472     0     111  end
 18224    30   804    17    30   472     0      67  =
 18225    30   804    19    30   472     0     111  offset
 18226    30   804    26    30   472     0      74  +
 18227    30   804    28    30   472     0     111  length
 18228    30   804    34    30   472     0     102  ;
 18229    30   805     9    30   472     0      37  for
 18230    30   805    13    30   472     0      59  (
 18231    30   805    14    30   472     0      36  int
 18232    30   805    18    30   472     0     111  i
 18233    30   805    20    30   472     0      67  =
 18234    30   805    22    30   472     0     111  offset
 18235    30   805    28    30   472     0     102  ;
 18236    30   805    30    30   472     0     111  i
 18237    30   805    32    30   472     0      93  <
 18238    30   805    34    30   472     0     111  end
 18239    30   805    37    30   472     0     102  ;
 18240    30   805    39    30   472     0     111  i
 18241    30   805    40    30   472     0      76  ++
 18242    30   805    42    30   472     0      60  )
 18243    30   806    13    30   472     0     111  this.put
 18244    30   806    21    30   472     0      59  (
 18245    30   806    22    30   472     0     111  src
 18246    30   806    25    30   472     0      61  [
 18247    30   806    26    30   472     0     111  i
 18248    30   806    27    30   472     0      62  ]
 18249    30   806    28    30   472     0      60  )
 18250    30   806    29    30   472     0     102  ;
 18251    30   807     9    30   472     0      19  return
 18252    30   807    16    30   472     0      44  this
 18253    30   807    20    30   472     0     102  ;
 18254    30   808     5    30   472     0      64  }
 18255    30   808     5    30   472     0    1188  ENDMETHOD
 18256    30   808     5    30   473     0    1189  STARTMETHOD
 18257    30   829     5    30   473     0      10  public
 18258    30   829    12    30   473     0       6  final
 18259    30   829    18    30   473     0     111  CharBuffer
 18260    30   829    29    30   473     0     111  put
 18261    30   829    32    30   473     0      59  (
 18262    30   829    33    30   473     0      40  char
 18263    30   829    37    30   473     0      61  [
 18264    30   829    38    30   473     0      62  ]
 18265    30   829    40    30   473     0     111  src
 18266    30   829    43    30   473     0      60  )
 18267    30   829    45    30   473     0      63  {
 18268    30   830     9    30   473     0      19  return
 18269    30   830    16    30   473     0     111  put
 18270    30   830    19    30   473     0      59  (
 18271    30   830    20    30   473     0     111  src
 18272    30   830    23    30   473     0      66  ,
 18273    30   830    25    30   473     0     112  0
 18274    30   830    26    30   473     0      66  ,
 18275    30   830    28    30   473     0     111  src.length
 18276    30   830    38    30   473     0      60  )
 18277    30   830    39    30   473     0     102  ;
 18278    30   831     5    30   473     0      64  }
 18279    30   831     5    30   473     0    1190  ENDMETHOD
 18280    30   831     5    30   474     0    1191  STARTMETHOD
 18281    30   887     5    30   474     0      10  public
 18282    30   887    12    30   474     0     111  CharBuffer
 18283    30   887    23    30   474     0     111  put
 18284    30   887    26    30   474     0      59  (
 18285    30   887    27    30   474     0     111  String
 18286    30   887    34    30   474     0     111  src
 18287    30   887    37    30   474     0      66  ,
 18288    30   887    39    30   474     0      36  int
 18289    30   887    43    30   474     0     111  start
 18290    30   887    48    30   474     0      66  ,
 18291    30   887    50    30   474     0      36  int
 18292    30   887    54    30   474     0     111  end
 18293    30   887    57    30   474     0      60  )
 18294    30   887    59    30   474     0      63  {
 18295    30   888     9    30   474     0     111  checkBounds
 18296    30   888    20    30   474     0      59  (
 18297    30   888    21    30   474     0     111  start
 18298    30   888    26    30   474     0      66  ,
 18299    30   888    28    30   474     0     111  end
 18300    30   888    32    30   474     0      77  -
 18301    30   888    34    30   474     0     111  start
 18302    30   888    39    30   474     0      66  ,
 18303    30   888    41    30   474     0     111  src.length
 18304    30   888    51    30   474     0      59  (
 18305    30   888    52    30   474     0      60  )
 18306    30   888    53    30   474     0      60  )
 18307    30   888    54    30   474     0     102  ;
 18308    30   889     9    30   474     0      37  for
 18309    30   889    13    30   474     0      59  (
 18310    30   889    14    30   474     0      36  int
 18311    30   889    18    30   474     0     111  i
 18312    30   889    20    30   474     0      67  =
 18313    30   889    22    30   474     0     111  start
 18314    30   889    27    30   474     0     102  ;
 18315    30   889    29    30   474     0     111  i
 18316    30   889    31    30   474     0      93  <
 18317    30   889    33    30   474     0     111  end
 18318    30   889    36    30   474     0     102  ;
 18319    30   889    38    30   474     0     111  i
 18320    30   889    39    30   474     0      76  ++
 18321    30   889    41    30   474     0      60  )
 18322    30   890    13    30   474     0     111  this.put
 18323    30   890    21    30   474     0      59  (
 18324    30   890    22    30   474     0     111  src.charAt
 18325    30   890    32    30   474     0      59  (
 18326    30   890    33    30   474     0     111  i
 18327    30   890    34    30   474     0      60  )
 18328    30   890    35    30   474     0      60  )
 18329    30   890    36    30   474     0     102  ;
 18330    30   891     9    30   474     0      19  return
 18331    30   891    16    30   474     0      44  this
 18332    30   891    20    30   474     0     102  ;
 18333    30   892     5    30   474     0      64  }
 18334    30   892     5    30   474     0    1192  ENDMETHOD
 18335    30   892     5    30   475     0    1193  STARTMETHOD
 18336    30   912     5    30   475     0      10  public
 18337    30   912    12    30   475     0       6  final
 18338    30   912    18    30   475     0     111  CharBuffer
 18339    30   912    29    30   475     0     111  put
 18340    30   912    32    30   475     0      59  (
 18341    30   912    33    30   475     0     111  String
 18342    30   912    40    30   475     0     111  src
 18343    30   912    43    30   475     0      60  )
 18344    30   912    45    30   475     0      63  {
 18345    30   913     9    30   475     0      19  return
 18346    30   913    16    30   475     0     111  put
 18347    30   913    19    30   475     0      59  (
 18348    30   913    20    30   475     0     111  src
 18349    30   913    23    30   475     0      66  ,
 18350    30   913    25    30   475     0     112  0
 18351    30   913    26    30   475     0      66  ,
 18352    30   913    28    30   475     0     111  src.length
 18353    30   913    38    30   475     0      59  (
 18354    30   913    39    30   475     0      60  )
 18355    30   913    40    30   475     0      60  )
 18356    30   913    41    30   475     0     102  ;
 18357    30   914     5    30   475     0      64  }
 18358    30   914     5    30   475     0    1194  ENDMETHOD
 18359    30   914     5    30   476     0    1195  STARTMETHOD
 18360    30   932     5    30   476     0      10  public
 18361    30   932    12    30   476     0       6  final
 18362    30   932    18    30   476     0      39  boolean
 18363    30   932    26    30   476     0     111  hasArray
 18364    30   932    34    30   476     0      59  (
 18365    30   932    35    30   476     0      60  )
 18366    30   932    37    30   476     0      63  {
 18367    30   933     9    30   476     0      19  return
 18368    30   933    16    30   476     0      59  (
 18369    30   933    17    30   476     0     111  hb
 18370    30   933    20    30   476     0      71  !=
 18371    30   933    23    30   476     0      21  null
 18372    30   933    27    30   476     0      60  )
 18373    30   933    29    30   476     0     101  &&
 18374    30   933    32    30   476     0      69  !
 18375    30   933    33    30   476     0     111  isReadOnly
 18376    30   933    43    30   476     0     102  ;
 18377    30   934     5    30   476     0      64  }
 18378    30   934     5    30   476     0    1196  ENDMETHOD
 18379    30   934     5    30   477     0    1197  STARTMETHOD
 18380    30   955     5    30   477     0      10  public
 18381    30   955    12    30   477     0       6  final
 18382    30   955    18    30   477     0      40  char
 18383    30   955    22    30   477     0      61  [
 18384    30   955    23    30   477     0      62  ]
 18385    30   955    25    30   477     0     111  array
 18386    30   955    30    30   477     0      59  (
 18387    30   955    31    30   477     0      60  )
 18388    30   955    33    30   477     0      63  {
 18389    30   956     9    30   477     0      31  if
 18390    30   956    12    30   477     0      59  (
 18391    30   956    13    30   477     0     111  hb
 18392    30   956    16    30   477     0      68  ==
 18393    30   956    19    30   477     0      21  null
 18394    30   956    23    30   477     0      60  )
 18395    30   957    13    30   477     0      20  throw
 18396    30   957    19    30   477     0      15  new
 18397    30   957    23    30   477     0     111  UnsupportedOperationException
 18398    30   957    52    30   477     0      59  (
 18399    30   957    53    30   477     0      60  )
 18400    30   957    54    30   477     0     102  ;
 18401    30   958     9    30   477     0      31  if
 18402    30   958    12    30   477     0      59  (
 18403    30   958    13    30   477     0     111  isReadOnly
 18404    30   958    23    30   477     0      60  )
 18405    30   959    13    30   477     0      20  throw
 18406    30   959    19    30   477     0      15  new
 18407    30   959    23    30   477     0     111  ReadOnlyBufferException
 18408    30   959    46    30   477     0      59  (
 18409    30   959    47    30   477     0      60  )
 18410    30   959    48    30   477     0     102  ;
 18411    30   960     9    30   477     0      19  return
 18412    30   960    16    30   477     0     111  hb
 18413    30   960    18    30   477     0     102  ;
 18414    30   961     5    30   477     0      64  }
 18415    30   961     5    30   477     0    1198  ENDMETHOD
 18416    30   961     5    30   478     0    1199  STARTMETHOD
 18417    30   983     5    30   478     0      10  public
 18418    30   983    12    30   478     0       6  final
 18419    30   983    18    30   478     0      36  int
 18420    30   983    22    30   478     0     111  arrayOffset
 18421    30   983    33    30   478     0      59  (
 18422    30   983    34    30   478     0      60  )
 18423    30   983    36    30   478     0      63  {
 18424    30   984     9    30   478     0      31  if
 18425    30   984    12    30   478     0      59  (
 18426    30   984    13    30   478     0     111  hb
 18427    30   984    16    30   478     0      68  ==
 18428    30   984    19    30   478     0      21  null
 18429    30   984    23    30   478     0      60  )
 18430    30   985    13    30   478     0      20  throw
 18431    30   985    19    30   478     0      15  new
 18432    30   985    23    30   478     0     111  UnsupportedOperationException
 18433    30   985    52    30   478     0      59  (
 18434    30   985    53    30   478     0      60  )
 18435    30   985    54    30   478     0     102  ;
 18436    30   986     9    30   478     0      31  if
 18437    30   986    12    30   478     0      59  (
 18438    30   986    13    30   478     0     111  isReadOnly
 18439    30   986    23    30   478     0      60  )
 18440    30   987    13    30   478     0      20  throw
 18441    30   987    19    30   478     0      15  new
 18442    30   987    23    30   478     0     111  ReadOnlyBufferException
 18443    30   987    46    30   478     0      59  (
 18444    30   987    47    30   478     0      60  )
 18445    30   987    48    30   478     0     102  ;
 18446    30   988     9    30   478     0      19  return
 18447    30   988    16    30   478     0     111  offset
 18448    30   988    22    30   478     0     102  ;
 18449    30   989     5    30   478     0      64  }
 18450    30   989     5    30   478     0    1200  ENDMETHOD
 18451    30  1030     5    30    -1     0      10  public
 18452    30  1030    12    30    -1     0       7  abstract
 18453    30  1030    21    30    -1     0     111  CharBuffer
 18454    30  1030    32    30    -1     0     111  compact
 18455    30  1030    39    30    -1     0      59  (
 18456    30  1030    40    30    -1     0      60  )
 18457    30  1030    41    30    -1     0     102  ;
 18458    30  1037     5    30    -1     0      10  public
 18459    30  1037    12    30    -1     0       7  abstract
 18460    30  1037    21    30    -1     0      39  boolean
 18461    30  1037    29    30    -1     0     111  isDirect
 18462    30  1037    37    30    -1     0      59  (
 18463    30  1037    38    30    -1     0      60  )
 18464    30  1037    39    30    -1     0     102  ;
 18465    30  1037    39    30   479     0    1201  STARTMETHOD
 18466    30  1077     5    30   479     0      10  public
 18467    30  1077    12    30   479     0      36  int
 18468    30  1077    16    30   479     0     111  hashCode
 18469    30  1077    24    30   479     0      59  (
 18470    30  1077    25    30   479     0      60  )
 18471    30  1077    27    30   479     0      63  {
 18472    30  1078     9    30   479     0      36  int
 18473    30  1078    13    30   479     0     111  h
 18474    30  1078    15    30   479     0      67  =
 18475    30  1078    17    30   479     0     112  1
 18476    30  1078    18    30   479     0     102  ;
 18477    30  1079     9    30   479     0      36  int
 18478    30  1079    13    30   479     0     111  p
 18479    30  1079    15    30   479     0      67  =
 18480    30  1079    17    30   479     0     111  position
 18481    30  1079    25    30   479     0      59  (
 18482    30  1079    26    30   479     0      60  )
 18483    30  1079    27    30   479     0     102  ;
 18484    30  1080     9    30   479     0      37  for
 18485    30  1080    13    30   479     0      59  (
 18486    30  1080    14    30   479     0      36  int
 18487    30  1080    18    30   479     0     111  i
 18488    30  1080    20    30   479     0      67  =
 18489    30  1080    22    30   479     0     111  limit
 18490    30  1080    27    30   479     0      59  (
 18491    30  1080    28    30   479     0      60  )
 18492    30  1080    30    30   479     0      77  -
 18493    30  1080    32    30   479     0     112  1
 18494    30  1080    33    30   479     0     102  ;
 18495    30  1080    35    30   479     0     111  i
 18496    30  1080    37    30   479     0      88  >=
 18497    30  1080    40    30   479     0     111  p
 18498    30  1080    41    30   479     0     102  ;
 18499    30  1080    43    30   479     0     111  i
 18500    30  1080    44    30   479     0      79  --
 18501    30  1080    46    30   479     0      60  )
 18502    30  1081    13    30   479     0     111  h
 18503    30  1081    15    30   479     0      67  =
 18504    30  1081    17    30   479     0     112  31
 18505    30  1081    20    30   479     0      80  *
 18506    30  1081    22    30   479     0     111  h
 18507    30  1081    24    30   479     0      74  +
 18508    30  1081    26    30   479     0      59  (
 18509    30  1081    27    30   479     0      36  int
 18510    30  1081    30    30   479     0      60  )
 18511    30  1081    31    30   479     0     111  get
 18512    30  1081    34    30   479     0      59  (
 18513    30  1081    35    30   479     0     111  i
 18514    30  1081    36    30   479     0      60  )
 18515    30  1081    37    30   479     0     102  ;
 18516    30  1082     9    30   479     0      19  return
 18517    30  1082    16    30   479     0     111  h
 18518    30  1082    17    30   479     0     102  ;
 18519    30  1083     5    30   479     0      64  }
 18520    30  1083     5    30   479     0    1202  ENDMETHOD
 18521    30  1083     5    30   480     0    1203  STARTMETHOD
 18522    30  1110     5    30   480     0      10  public
 18523    30  1110    12    30   480     0      39  boolean
 18524    30  1110    20    30   480     0     111  equals
 18525    30  1110    26    30   480     0      59  (
 18526    30  1110    27    30   480     0     111  Object
 18527    30  1110    34    30   480     0     111  ob
 18528    30  1110    36    30   480     0      60  )
 18529    30  1110    38    30   480     0      63  {
 18530    30  1111     9    30   480     0      31  if
 18531    30  1111    12    30   480     0      59  (
 18532    30  1111    13    30   480     0      44  this
 18533    30  1111    18    30   480     0      68  ==
 18534    30  1111    21    30   480     0     111  ob
 18535    30  1111    23    30   480     0      60  )
 18536    30  1112    13    30   480     0      19  return
 18537    30  1112    20    30   480     0      52  true
 18538    30  1112    24    30   480     0     102  ;
 18539    30  1113     9    30   480     0      31  if
 18540    30  1113    12    30   480     0      59  (
 18541    30  1113    13    30   480     0      69  !
 18542    30  1113    14    30   480     0      59  (
 18543    30  1113    15    30   480     0     111  ob
 18544    30  1113    18    30   480     0      16  instanceof
 18545    30  1113    29    30   480     0     111  CharBuffer
 18546    30  1113    39    30   480     0      60  )
 18547    30  1113    40    30   480     0      60  )
 18548    30  1114    13    30   480     0      19  return
 18549    30  1114    20    30   480     0      43  false
 18550    30  1114    25    30   480     0     102  ;
 18551    30  1115     9    30   480     0     111  CharBuffer
 18552    30  1115    20    30   480     0     111  that
 18553    30  1115    25    30   480     0      67  =
 18554    30  1115    27    30   480     0      59  (
 18555    30  1115    28    30   480     0     111  CharBuffer
 18556    30  1115    38    30   480     0      60  )
 18557    30  1115    39    30   480     0     111  ob
 18558    30  1115    41    30   480     0     102  ;
 18559    30  1116     9    30   480     0      31  if
 18560    30  1116    12    30   480     0      59  (
 18561    30  1116    13    30   480     0     111  this.remaining
 18562    30  1116    27    30   480     0      59  (
 18563    30  1116    28    30   480     0      60  )
 18564    30  1116    30    30   480     0      71  !=
 18565    30  1116    33    30   480     0     111  that.remaining
 18566    30  1116    47    30   480     0      59  (
 18567    30  1116    48    30   480     0      60  )
 18568    30  1116    49    30   480     0      60  )
 18569    30  1117    13    30   480     0      19  return
 18570    30  1117    20    30   480     0      43  false
 18571    30  1117    25    30   480     0     102  ;
 18572    30  1118     9    30   480     0      36  int
 18573    30  1118    13    30   480     0     111  p
 18574    30  1118    15    30   480     0      67  =
 18575    30  1118    17    30   480     0     111  this.position
 18576    30  1118    30    30   480     0      59  (
 18577    30  1118    31    30   480     0      60  )
 18578    30  1118    32    30   480     0     102  ;
 18579    30  1119     9    30   480     0      37  for
 18580    30  1119    13    30   480     0      59  (
 18581    30  1119    14    30   480     0      36  int
 18582    30  1119    18    30   480     0     111  i
 18583    30  1119    20    30   480     0      67  =
 18584    30  1119    22    30   480     0     111  this.limit
 18585    30  1119    32    30   480     0      59  (
 18586    30  1119    33    30   480     0      60  )
 18587    30  1119    35    30   480     0      77  -
 18588    30  1119    37    30   480     0     112  1
 18589    30  1119    38    30   480     0      66  ,
 18590    30  1119    40    30   480     0     111  j
 18591    30  1119    42    30   480     0      67  =
 18592    30  1119    44    30   480     0     111  that.limit
 18593    30  1119    54    30   480     0      59  (
 18594    30  1119    55    30   480     0      60  )
 18595    30  1119    57    30   480     0      77  -
 18596    30  1119    59    30   480     0     112  1
 18597    30  1119    60    30   480     0     102  ;
 18598    30  1119    62    30   480     0     111  i
 18599    30  1119    64    30   480     0      88  >=
 18600    30  1119    67    30   480     0     111  p
 18601    30  1119    68    30   480     0     102  ;
 18602    30  1119    70    30   480     0     111  i
 18603    30  1119    71    30   480     0      79  --
 18604    30  1119    73    30   480     0      66  ,
 18605    30  1119    75    30   480     0     111  j
 18606    30  1119    76    30   480     0      79  --
 18607    30  1119    78    30   480     0      60  )
 18608    30  1119    80    30   480     0      63  {
 18609    30  1120    13    30   480     1      40  char
 18610    30  1120    18    30   480     1     111  v1
 18611    30  1120    21    30   480     1      67  =
 18612    30  1120    23    30   480     1     111  this.get
 18613    30  1120    31    30   480     1      59  (
 18614    30  1120    32    30   480     1     111  i
 18615    30  1120    33    30   480     1      60  )
 18616    30  1120    34    30   480     1     102  ;
 18617    30  1121    13    30   480     1      40  char
 18618    30  1121    18    30   480     1     111  v2
 18619    30  1121    21    30   480     1      67  =
 18620    30  1121    23    30   480     1     111  that.get
 18621    30  1121    31    30   480     1      59  (
 18622    30  1121    32    30   480     1     111  j
 18623    30  1121    33    30   480     1      60  )
 18624    30  1121    34    30   480     1     102  ;
 18625    30  1122    13    30   480     0      31  if
 18626    30  1122    16    30   480     0      59  (
 18627    30  1122    17    30   480     0     111  v1
 18628    30  1122    20    30   480     0      71  !=
 18629    30  1122    23    30   480     0     111  v2
 18630    30  1122    25    30   480     0      60  )
 18631    30  1122    27    30   480     0      63  {
 18632    30  1123    17    30   480     0      31  if
 18633    30  1123    20    30   480     0      59  (
 18634    30  1123    21    30   480     0      59  (
 18635    30  1123    22    30   480     0     111  v1
 18636    30  1123    25    30   480     0      71  !=
 18637    30  1123    28    30   480     0     111  v1
 18638    30  1123    30    30   480     0      60  )
 18639    30  1123    32    30   480     0     101  &&
 18640    30  1123    35    30   480     0      59  (
 18641    30  1123    36    30   480     0     111  v2
 18642    30  1123    39    30   480     0      71  !=
 18643    30  1123    42    30   480     0     111  v2
 18644    30  1123    44    30   480     0      60  )
 18645    30  1123    45    30   480     0      60  )
 18646    30  1124    21    30   480     0      46  continue
 18647    30  1124    29    30   480     0     102  ;
 18648    30  1125    17    30   480     0      19  return
 18649    30  1125    24    30   480     0      43  false
 18650    30  1125    29    30   480     0     102  ;
 18651    30  1126    13    30   480     1      64  }
 18652    30  1127     9    30   480     1      64  }
 18653    30  1128     9    30   480     0      19  return
 18654    30  1128    16    30   480     0      52  true
 18655    30  1128    20    30   480     0     102  ;
 18656    30  1129     5    30   480     0      64  }
 18657    30  1129     5    30   480     0    1204  ENDMETHOD
 18658    30  1129     5    30   481     0    1205  STARTMETHOD
 18659    30  1143     5    30   481     0      10  public
 18660    30  1143    12    30   481     0      36  int
 18661    30  1143    16    30   481     0     111  compareTo
 18662    30  1143    25    30   481     0      59  (
 18663    30  1143    26    30   481     0     111  CharBuffer
 18664    30  1143    37    30   481     0     111  that
 18665    30  1143    41    30   481     0      60  )
 18666    30  1143    43    30   481     0      63  {
 18667    30  1144     9    30   481     0      36  int
 18668    30  1144    13    30   481     0     111  n
 18669    30  1144    15    30   481     0      67  =
 18670    30  1144    17    30   481     0     111  this.position
 18671    30  1144    30    30   481     0      59  (
 18672    30  1144    31    30   481     0      60  )
 18673    30  1144    33    30   481     0      74  +
 18674    30  1144    35    30   481     0     111  Math.min
 18675    30  1144    43    30   481     0      59  (
 18676    30  1144    44    30   481     0     111  this.remaining
 18677    30  1144    58    30   481     0      59  (
 18678    30  1144    59    30   481     0      60  )
 18679    30  1144    60    30   481     0      66  ,
 18680    30  1144    62    30   481     0     111  that.remaining
 18681    30  1144    76    30   481     0      59  (
 18682    30  1144    77    30   481     0      60  )
 18683    30  1144    78    30   481     0      60  )
 18684    30  1144    79    30   481     0     102  ;
 18685    30  1145     9    30   481     0      37  for
 18686    30  1145    13    30   481     0      59  (
 18687    30  1145    14    30   481     0      36  int
 18688    30  1145    18    30   481     0     111  i
 18689    30  1145    20    30   481     0      67  =
 18690    30  1145    22    30   481     0     111  this.position
 18691    30  1145    35    30   481     0      59  (
 18692    30  1145    36    30   481     0      60  )
 18693    30  1145    37    30   481     0      66  ,
 18694    30  1145    39    30   481     0     111  j
 18695    30  1145    41    30   481     0      67  =
 18696    30  1145    43    30   481     0     111  that.position
 18697    30  1145    56    30   481     0      59  (
 18698    30  1145    57    30   481     0      60  )
 18699    30  1145    58    30   481     0     102  ;
 18700    30  1145    60    30   481     0     111  i
 18701    30  1145    62    30   481     0      93  <
 18702    30  1145    64    30   481     0     111  n
 18703    30  1145    65    30   481     0     102  ;
 18704    30  1145    67    30   481     0     111  i
 18705    30  1145    68    30   481     0      76  ++
 18706    30  1145    70    30   481     0      66  ,
 18707    30  1145    72    30   481     0     111  j
 18708    30  1145    73    30   481     0      76  ++
 18709    30  1145    75    30   481     0      60  )
 18710    30  1145    77    30   481     0      63  {
 18711    30  1146    13    30   481     1      40  char
 18712    30  1146    18    30   481     1     111  v1
 18713    30  1146    21    30   481     1      67  =
 18714    30  1146    23    30   481     1     111  this.get
 18715    30  1146    31    30   481     1      59  (
 18716    30  1146    32    30   481     1     111  i
 18717    30  1146    33    30   481     1      60  )
 18718    30  1146    34    30   481     1     102  ;
 18719    30  1147    13    30   481     1      40  char
 18720    30  1147    18    30   481     1     111  v2
 18721    30  1147    21    30   481     1      67  =
 18722    30  1147    23    30   481     1     111  that.get
 18723    30  1147    31    30   481     1      59  (
 18724    30  1147    32    30   481     1     111  j
 18725    30  1147    33    30   481     1      60  )
 18726    30  1147    34    30   481     1     102  ;
 18727    30  1148    13    30   481     0      31  if
 18728    30  1148    16    30   481     0      59  (
 18729    30  1148    17    30   481     0     111  v1
 18730    30  1148    20    30   481     0      68  ==
 18731    30  1148    23    30   481     0     111  v2
 18732    30  1148    25    30   481     0      60  )
 18733    30  1149    17    30   481     0      46  continue
 18734    30  1149    25    30   481     0     102  ;
 18735    30  1150    13    30   481     0      31  if
 18736    30  1150    16    30   481     0      59  (
 18737    30  1150    17    30   481     0      59  (
 18738    30  1150    18    30   481     0     111  v1
 18739    30  1150    21    30   481     0      71  !=
 18740    30  1150    24    30   481     0     111  v1
 18741    30  1150    26    30   481     0      60  )
 18742    30  1150    28    30   481     0     101  &&
 18743    30  1150    31    30   481     0      59  (
 18744    30  1150    32    30   481     0     111  v2
 18745    30  1150    35    30   481     0      71  !=
 18746    30  1150    38    30   481     0     111  v2
 18747    30  1150    40    30   481     0      60  )
 18748    30  1150    41    30   481     0      60  )
 18749    30  1151    17    30   481     0      46  continue
 18750    30  1151    25    30   481     0     102  ;
 18751    30  1152    13    30   481     0      31  if
 18752    30  1152    16    30   481     0      59  (
 18753    30  1152    17    30   481     0     111  v1
 18754    30  1152    20    30   481     0      93  <
 18755    30  1152    22    30   481     0     111  v2
 18756    30  1152    24    30   481     0      60  )
 18757    30  1153    17    30   481     0      19  return
 18758    30  1153    24    30   481     0      77  -
 18759    30  1153    25    30   481     0     112  1
 18760    30  1153    26    30   481     0     102  ;
 18761    30  1154    13    30   481     0      19  return
 18762    30  1154    20    30   481     0      74  +
 18763    30  1154    21    30   481     0     112  1
 18764    30  1154    22    30   481     0     102  ;
 18765    30  1155     9    30   481     0      64  }
 18766    30  1156     9    30   481     0      19  return
 18767    30  1156    16    30   481     0     111  this.remaining
 18768    30  1156    30    30   481     0      59  (
 18769    30  1156    31    30   481     0      60  )
 18770    30  1156    33    30   481     0      77  -
 18771    30  1156    35    30   481     0     111  that.remaining
 18772    30  1156    49    30   481     0      59  (
 18773    30  1156    50    30   481     0      60  )
 18774    30  1156    51    30   481     0     102  ;
 18775    30  1157     5    30   481     0      64  }
 18776    30  1157     5    30   481     0    1206  ENDMETHOD
 18777    30  1157     5    30   482     0    1207  STARTMETHOD
 18778    30  1175     5    30   482     0      10  public
 18779    30  1175    12    30   482     0     111  String
 18780    30  1175    19    30   482     0     111  toString
 18781    30  1175    27    30   482     0      59  (
 18782    30  1175    28    30   482     0      60  )
 18783    30  1175    30    30   482     0      63  {
 18784    30  1176     9    30   482     0      19  return
 18785    30  1176    16    30   482     0     111  toString
 18786    30  1176    24    30   482     0      59  (
 18787    30  1176    25    30   482     0     111  position
 18788    30  1176    33    30   482     0      59  (
 18789    30  1176    34    30   482     0      60  )
 18790    30  1176    35    30   482     0      66  ,
 18791    30  1176    37    30   482     0     111  limit
 18792    30  1176    42    30   482     0      59  (
 18793    30  1176    43    30   482     0      60  )
 18794    30  1176    44    30   482     0      60  )
 18795    30  1176    45    30   482     0     102  ;
 18796    30  1177     5    30   482     0      64  }
 18797    30  1177     5    30   482     0    1208  ENDMETHOD
 18798    30  1179     5    30    -1     0       7  abstract
 18799    30  1179    14    30    -1     0     111  String
 18800    30  1179    21    30    -1     0     111  toString
 18801    30  1179    29    30    -1     0      59  (
 18802    30  1179    30    30    -1     0      36  int
 18803    30  1179    34    30    -1     0     111  start
 18804    30  1179    39    30    -1     0      66  ,
 18805    30  1179    41    30    -1     0      36  int
 18806    30  1179    45    30    -1     0     111  end
 18807    30  1179    48    30    -1     0      60  )
 18808    30  1179    49    30    -1     0     102  ;
 18809    30  1179    49    30   483     0    1209  STARTMETHOD
 18810    30  1194     5    30   483     0      10  public
 18811    30  1194    12    30   483     0       6  final
 18812    30  1194    18    30   483     0      36  int
 18813    30  1194    22    30   483     0     111  length
 18814    30  1194    28    30   483     0      59  (
 18815    30  1194    29    30   483     0      60  )
 18816    30  1194    31    30   483     0      63  {
 18817    30  1195     9    30   483     0      19  return
 18818    30  1195    16    30   483     0     111  remaining
 18819    30  1195    25    30   483     0      59  (
 18820    30  1195    26    30   483     0      60  )
 18821    30  1195    27    30   483     0     102  ;
 18822    30  1196     5    30   483     0      64  }
 18823    30  1196     5    30   483     0    1210  ENDMETHOD
 18824    30  1196     5    30   484     0    1211  STARTMETHOD
 18825    30  1212     5    30   484     0      10  public
 18826    30  1212    12    30   484     0       6  final
 18827    30  1212    18    30   484     0      40  char
 18828    30  1212    23    30   484     0     111  charAt
 18829    30  1212    29    30   484     0      59  (
 18830    30  1212    30    30   484     0      36  int
 18831    30  1212    34    30   484     0     111  index
 18832    30  1212    39    30   484     0      60  )
 18833    30  1212    41    30   484     0      63  {
 18834    30  1213     9    30   484     0      19  return
 18835    30  1213    16    30   484     0     111  get
 18836    30  1213    19    30   484     0      59  (
 18837    30  1213    20    30   484     0     111  position
 18838    30  1213    28    30   484     0      59  (
 18839    30  1213    29    30   484     0      60  )
 18840    30  1213    31    30   484     0      74  +
 18841    30  1213    33    30   484     0     111  checkIndex
 18842    30  1213    43    30   484     0      59  (
 18843    30  1213    44    30   484     0     111  index
 18844    30  1213    49    30   484     0      66  ,
 18845    30  1213    51    30   484     0     112  1
 18846    30  1213    52    30   484     0      60  )
 18847    30  1213    53    30   484     0      60  )
 18848    30  1213    54    30   484     0     102  ;
 18849    30  1214     5    30   484     0      64  }
 18850    30  1214     5    30   484     0    1212  ENDMETHOD
 18851    30  1246     5    30    -1     0      10  public
 18852    30  1246    12    30    -1     0       7  abstract
 18853    30  1246    21    30    -1     0     111  CharSequence
 18854    30  1246    34    30    -1     0     111  subSequence
 18855    30  1246    45    30    -1     0      59  (
 18856    30  1246    46    30    -1     0      36  int
 18857    30  1246    50    30    -1     0     111  start
 18858    30  1246    55    30    -1     0      66  ,
 18859    30  1246    57    30    -1     0      36  int
 18860    30  1246    61    30    -1     0     111  end
 18861    30  1246    64    30    -1     0      60  )
 18862    30  1246    65    30    -1     0     102  ;
 18863    30  1246    65    30   485     0    1213  STARTMETHOD
 18864    30  1282     5    30   485     0      10  public
 18865    30  1282    12    30   485     0     111  CharBuffer
 18866    30  1282    23    30   485     0     111  append
 18867    30  1282    29    30   485     0      59  (
 18868    30  1282    30    30   485     0     111  CharSequence
 18869    30  1282    43    30   485     0     111  csq
 18870    30  1282    46    30   485     0      60  )
 18871    30  1282    48    30   485     0      63  {
 18872    30  1283     9    30   485     0      31  if
 18873    30  1283    12    30   485     0      59  (
 18874    30  1283    13    30   485     0     111  csq
 18875    30  1283    17    30   485     0      68  ==
 18876    30  1283    20    30   485     0      21  null
 18877    30  1283    24    30   485     0      60  )
 18878    30  1284    13    30   485     0      19  return
 18879    30  1284    20    30   485     0     111  put
 18880    30  1284    23    30   485     0      59  (
 18881    30  1284    24    30   485     0     107  "null"
 18882    30  1284    30    30   485     0      60  )
 18883    30  1284    31    30   485     0     102  ;
 18884    30  1285     9    30   485     0      48  else
 18885    30  1286    13    30   485     0      19  return
 18886    30  1286    20    30   485     0     111  put
 18887    30  1286    23    30   485     0      59  (
 18888    30  1286    24    30   485     0     111  csq.toString
 18889    30  1286    36    30   485     0      59  (
 18890    30  1286    37    30   485     0      60  )
 18891    30  1286    38    30   485     0      60  )
 18892    30  1286    39    30   485     0     102  ;
 18893    30  1287     5    30   485     0      64  }
 18894    30  1287     5    30   485     0    1214  ENDMETHOD
 18895    30  1287     5    30   486     0    1215  STARTMETHOD
 18896    30  1321     5    30   486     0      10  public
 18897    30  1321    12    30   486     0     111  CharBuffer
 18898    30  1321    23    30   486     0     111  append
 18899    30  1321    29    30   486     0      59  (
 18900    30  1321    30    30   486     0     111  CharSequence
 18901    30  1321    43    30   486     0     111  csq
 18902    30  1321    46    30   486     0      66  ,
 18903    30  1321    48    30   486     0      36  int
 18904    30  1321    52    30   486     0     111  start
 18905    30  1321    57    30   486     0      66  ,
 18906    30  1321    59    30   486     0      36  int
 18907    30  1321    63    30   486     0     111  end
 18908    30  1321    66    30   486     0      60  )
 18909    30  1321    68    30   486     0      63  {
 18910    30  1322     9    30   486     0     111  CharSequence
 18911    30  1322    22    30   486     0     111  cs
 18912    30  1322    25    30   486     0      67  =
 18913    30  1322    27    30   486     0      59  (
 18914    30  1322    28    30   486     0     111  csq
 18915    30  1322    32    30   486     0      68  ==
 18916    30  1322    35    30   486     0      21  null
 18917    30  1322    40    30   486     0      58  ?
 18918    30  1322    42    30   486     0     107  "null"
 18919    30  1322    49    30   486     0      65  :
 18920    30  1322    51    30   486     0     111  csq
 18921    30  1322    54    30   486     0      60  )
 18922    30  1322    55    30   486     0     102  ;
 18923    30  1323     9    30   486     0      19  return
 18924    30  1323    16    30   486     0     111  put
 18925    30  1323    19    30   486     0      59  (
 18926    30  1323    20    30   486     0     111  cs.subSequence
 18927    30  1323    34    30   486     0      59  (
 18928    30  1323    35    30   486     0     111  start
 18929    30  1323    40    30   486     0      66  ,
 18930    30  1323    42    30   486     0     111  end
 18931    30  1323    45    30   486     0      60  )
 18932    30  1323    46    30   486     0      54  .
 18933    30  1323    47    30   486     0     111  toString
 18934    30  1323    55    30   486     0      59  (
 18935    30  1323    56    30   486     0      60  )
 18936    30  1323    57    30   486     0      60  )
 18937    30  1323    58    30   486     0     102  ;
 18938    30  1324     5    30   486     0      64  }
 18939    30  1324     5    30   486     0    1216  ENDMETHOD
 18940    30  1324     5    30   487     0    1217  STARTMETHOD
 18941    30  1349     5    30   487     0      10  public
 18942    30  1349    12    30   487     0     111  CharBuffer
 18943    30  1349    23    30   487     0     111  append
 18944    30  1349    29    30   487     0      59  (
 18945    30  1349    30    30   487     0      40  char
 18946    30  1349    35    30   487     0     111  c
 18947    30  1349    36    30   487     0      60  )
 18948    30  1349    38    30   487     0      63  {
 18949    30  1350     9    30   487     0      19  return
 18950    30  1350    16    30   487     0     111  put
 18951    30  1350    19    30   487     0      59  (
 18952    30  1350    20    30   487     0     111  c
 18953    30  1350    21    30   487     0      60  )
 18954    30  1350    22    30   487     0     102  ;
 18955    30  1351     5    30   487     0      64  }
 18956    30  1351     5    30   487     0    1218  ENDMETHOD
 18957    30  1372     5    30    -1     0      10  public
 18958    30  1372    12    30    -1     0       7  abstract
 18959    30  1372    21    30    -1     0     111  ByteOrder
 18960    30  1372    31    30    -1     0     111  order
 18961    30  1372    36    30    -1     0      59  (
 18962    30  1372    37    30    -1     0      60  )
 18963    30  1372    38    30    -1     0     102  ;
 18964    30  1426     1    30    -1     0      64  }
 18965    30  1426     1    30    -1     1    1219  ENDCLASS
 18966    30  1426     1    -1    -1     1    1220  ENDFILE C:\javasrc\java\nio\CharBuffer.java
 18967    31     1     1    -1    -1     1    1221  STARTFILE C:\javasrc\java\nio\DirectByteBuffer.java
 18968    31    28     1    -1    -1     0       5  package
 18969    31    28     9    -1    -1     0     111  java.nio
 18970    31    28    17    -1    -1     0     102  ;
 18971    31    30     1    -1    -1     1      49  import
 18972    31    30     8    -1    -1     1     111  sun.misc.Cleaner
 18973    31    30    24    -1    -1     1     102  ;
 18974    31    31     1    -1    -1     1      49  import
 18975    31    31     8    -1    -1     1     111  sun.misc.Unsafe
 18976    31    31    23    -1    -1     1     102  ;
 18977    31    32     1    -1    -1     1      49  import
 18978    31    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 18979    31    32    31    -1    -1     1     102  ;
 18980    31    33     1    -1    -1     1      49  import
 18981    31    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 18982    31    33    34    -1    -1     1     102  ;
 18983    31    36     1    31    -1     0    1222  STARTCLASS
 18984    31    36     1    31    -1     0      24  class
 18985    31    36     7    31    -1     0     111  DirectByteBuffer
 18986    31    38     5    31    -1     0      38  extends
 18987    31    38    13    31    -1     0     111  MappedByteBuffer
 18988    31    42     5    31    -1     0      17  implements
 18989    31    42    16    31    -1     0     111  DirectBuffer
 18990    31    43     1    31    -1     0      63  {
 18991    31    48     5    31    -1     0      23  protected
 18992    31    48    15    31    -1     0      45  static
 18993    31    48    22    31    -1     0       6  final
 18994    31    48    28    31    -1     0     111  Unsafe
 18995    31    48    35    31    -1     0     111  unsafe
 18996    31    48    42    31    -1     0      67  =
 18997    31    48    44    31    -1     0     111  Bits.unsafe
 18998    31    48    55    31    -1     0      59  (
 18999    31    48    56    31    -1     0      60  )
 19000    31    48    57    31    -1     0     102  ;
 19001    31    51     5    31    -1     0      23  protected
 19002    31    51    15    31    -1     0      45  static
 19003    31    51    22    31    -1     0       6  final
 19004    31    51    28    31    -1     0      39  boolean
 19005    31    51    36    31    -1     0     111  unaligned
 19006    31    51    46    31    -1     0      67  =
 19007    31    51    48    31    -1     0     111  Bits.unaligned
 19008    31    51    62    31    -1     0      59  (
 19009    31    51    63    31    -1     0      60  )
 19010    31    51    64    31    -1     0     102  ;
 19011    31    59     5    31    -1     0      23  protected
 19012    31    59    15    31    -1     0     111  Object
 19013    31    59    22    31    -1     0     111  viewedBuffer
 19014    31    59    35    31    -1     0      67  =
 19015    31    59    37    31    -1     0      21  null
 19016    31    59    41    31    -1     0     102  ;
 19017    31    59    41    31   488     0    1223  STARTMETHOD
 19018    31    61     5    31   488     0      10  public
 19019    31    61    12    31   488     0     111  Object
 19020    31    61    19    31   488     0     111  viewedBuffer
 19021    31    61    31    31   488     0      59  (
 19022    31    61    32    31   488     0      60  )
 19023    31    61    34    31   488     0      63  {
 19024    31    62     9    31   488     0      19  return
 19025    31    62    16    31   488     0     111  viewedBuffer
 19026    31    62    28    31   488     0     102  ;
 19027    31    63     5    31   488     0      64  }
 19028    31    63     5    31   488     0    1224  ENDMETHOD
 19029    31    67     5    31    -1     0      41  private
 19030    31    67    13    31    -1     0      45  static
 19031    31    67    20    31    -1     0      24  class
 19032    31    67    26    31    -1     0     111  Deallocator
 19033    31    68     9    31    -1     0      17  implements
 19034    31    68    20    31    -1     0     111  Runnable
 19035    31    69     5    31    -1     0      63  {
 19036    31    71     9    31    -1     0      41  private
 19037    31    71    17    31    -1     0      45  static
 19038    31    71    24    31    -1     0     111  Unsafe
 19039    31    71    31    31    -1     0     111  unsafe
 19040    31    71    38    31    -1     0      67  =
 19041    31    71    40    31    -1     0     111  Unsafe.getUnsafe
 19042    31    71    56    31    -1     0      59  (
 19043    31    71    57    31    -1     0      60  )
 19044    31    71    58    31    -1     0     102  ;
 19045    31    73     9    31    -1     0      41  private
 19046    31    73    17    31    -1     0      53  long
 19047    31    73    22    31    -1     0     111  address
 19048    31    73    29    31    -1     0     102  ;
 19049    31    74     9    31    -1     0      41  private
 19050    31    74    17    31    -1     0      36  int
 19051    31    74    21    31    -1     0     111  capacity
 19052    31    74    29    31    -1     0     102  ;
 19053    31    74    29    31   489     0    1225  STARTMETHOD
 19054    31    76     9    31   489     0      41  private
 19055    31    76    17    31   489     0     111  Deallocator
 19056    31    76    28    31   489     0      59  (
 19057    31    76    29    31   489     0      53  long
 19058    31    76    34    31   489     0     111  address
 19059    31    76    41    31   489     0      66  ,
 19060    31    76    43    31   489     0      36  int
 19061    31    76    47    31   489     0     111  capacity
 19062    31    76    55    31   489     0      60  )
 19063    31    76    57    31   489     0      63  {
 19064    31    77    13    31   489     0     111  assert
 19065    31    77    20    31   489     0      59  (
 19066    31    77    21    31   489     0     111  address
 19067    31    77    29    31   489     0      71  !=
 19068    31    77    32    31   489     0     112  0
 19069    31    77    33    31   489     0      60  )
 19070    31    77    34    31   489     0     102  ;
 19071    31    78    13    31   489     1     111  this.address
 19072    31    78    26    31   489     1      67  =
 19073    31    78    28    31   489     1     111  address
 19074    31    78    35    31   489     1     102  ;
 19075    31    79    13    31   489     1     111  this.capacity
 19076    31    79    27    31   489     1      67  =
 19077    31    79    29    31   489     1     111  capacity
 19078    31    79    37    31   489     1     102  ;
 19079    31    80     9    31   489     0      64  }
 19080    31    80     9    31   489     0    1226  ENDMETHOD
 19081    31    80     9    31   490     0    1227  STARTMETHOD
 19082    31    82     9    31   490     0      10  public
 19083    31    82    16    31   490     0      50  void
 19084    31    82    21    31   490     0     111  run
 19085    31    82    24    31   490     0      59  (
 19086    31    82    25    31   490     0      60  )
 19087    31    82    27    31   490     0      63  {
 19088    31    83    13    31   490     0      31  if
 19089    31    83    16    31   490     0      59  (
 19090    31    83    17    31   490     0     111  address
 19091    31    83    25    31   490     0      68  ==
 19092    31    83    28    31   490     0     112  0
 19093    31    83    29    31   490     0      60  )
 19094    31    83    31    31   490     0      63  {
 19095    31    85    17    31   490     0      19  return
 19096    31    85    23    31   490     0     102  ;
 19097    31    86    13    31   490     0      64  }
 19098    31    87    13    31   490     0     111  unsafe.freeMemory
 19099    31    87    30    31   490     0      59  (
 19100    31    87    31    31   490     0     111  address
 19101    31    87    38    31   490     0      60  )
 19102    31    87    39    31   490     0     102  ;
 19103    31    88    13    31   490     0     111  address
 19104    31    88    21    31   490     0      67  =
 19105    31    88    23    31   490     0     112  0
 19106    31    88    24    31   490     0     102  ;
 19107    31    89    13    31   490     0     111  Bits.unreserveMemory
 19108    31    89    33    31   490     0      59  (
 19109    31    89    34    31   490     0     111  capacity
 19110    31    89    42    31   490     0      60  )
 19111    31    89    43    31   490     0     102  ;
 19112    31    90     9    31   490     0      64  }
 19113    31    90     9    31   490     0    1228  ENDMETHOD
 19114    31    92     5    31    -1     0      64  }
 19115    31    94     5    31    -1     0      41  private
 19116    31    94    13    31    -1     0       6  final
 19117    31    94    19    31    -1     0     111  Cleaner
 19118    31    94    27    31    -1     0     111  cleaner
 19119    31    94    34    31    -1     0     102  ;
 19120    31    94    34    31   491     0    1229  STARTMETHOD
 19121    31    96     5    31   491     0      10  public
 19122    31    96    12    31   491     0     111  Cleaner
 19123    31    96    20    31   491     0     111  cleaner
 19124    31    96    27    31   491     0      59  (
 19125    31    96    28    31   491     0      60  )
 19126    31    96    30    31   491     0      63  {
 19127    31    96    32    31   491     0      19  return
 19128    31    96    39    31   491     0     111  cleaner
 19129    31    96    46    31   491     0     102  ;
 19130    31    96    48    31   491     0      64  }
 19131    31    96    48    31   491     0    1230  ENDMETHOD
 19132    31    96    48    31   492     0    1231  STARTMETHOD
 19133    31   110     5    31   492     0     111  DirectByteBuffer
 19134    31   110    21    31   492     0      59  (
 19135    31   110    22    31   492     0      36  int
 19136    31   110    26    31   492     0     111  cap
 19137    31   110    29    31   492     0      60  )
 19138    31   110    31    31   492     0      63  {
 19139    31   112     9    31   492     0      27  super
 19140    31   112    14    31   492     0      59  (
 19141    31   112    15    31   492     0      77  -
 19142    31   112    16    31   492     0     112  1
 19143    31   112    17    31   492     0      66  ,
 19144    31   112    19    31   492     0     112  0
 19145    31   112    20    31   492     0      66  ,
 19146    31   112    22    31   492     0     111  cap
 19147    31   112    25    31   492     0      66  ,
 19148    31   112    27    31   492     0     111  cap
 19149    31   112    30    31   492     0      66  ,
 19150    31   112    32    31   492     0      43  false
 19151    31   112    37    31   492     0      60  )
 19152    31   112    38    31   492     0     102  ;
 19153    31   113     9    31   492     0     111  Bits.reserveMemory
 19154    31   113    27    31   492     0      59  (
 19155    31   113    28    31   492     0     111  cap
 19156    31   113    31    31   492     0      60  )
 19157    31   113    32    31   492     0     102  ;
 19158    31   114     9    31   492     0      36  int
 19159    31   114    13    31   492     0     111  ps
 19160    31   114    16    31   492     0      67  =
 19161    31   114    18    31   492     0     111  Bits.pageSize
 19162    31   114    31    31   492     0      59  (
 19163    31   114    32    31   492     0      60  )
 19164    31   114    33    31   492     0     102  ;
 19165    31   115     9    31   492     0      53  long
 19166    31   115    14    31   492     0     111  base
 19167    31   115    19    31   492     0      67  =
 19168    31   115    21    31   492     0     112  0
 19169    31   115    22    31   492     0     102  ;
 19170    31   116     9    31   492     0      35  try
 19171    31   116    13    31   492     0      63  {
 19172    31   117    13    31   492     0     111  base
 19173    31   117    18    31   492     0      67  =
 19174    31   117    20    31   492     0     111  unsafe.allocateMemory
 19175    31   117    41    31   492     0      59  (
 19176    31   117    42    31   492     0     111  cap
 19177    31   117    46    31   492     0      74  +
 19178    31   117    48    31   492     0     111  ps
 19179    31   117    50    31   492     0      60  )
 19180    31   117    51    31   492     0     102  ;
 19181    31   118     9    31   492     0      64  }
 19182    31   118    11    31   492     0      34  catch
 19183    31   118    17    31   492     0      59  (
 19184    31   118    18    31   492     0     111  OutOfMemoryError
 19185    31   118    35    31   492     0     111  x
 19186    31   118    36    31   492     0      60  )
 19187    31   118    38    31   492     0      63  {
 19188    31   119    13    31   492     0     111  Bits.unreserveMemory
 19189    31   119    33    31   492     0      59  (
 19190    31   119    34    31   492     0     111  cap
 19191    31   119    37    31   492     0      60  )
 19192    31   119    38    31   492     0     102  ;
 19193    31   120    13    31   492     0      20  throw
 19194    31   120    19    31   492     0     111  x
 19195    31   120    20    31   492     0     102  ;
 19196    31   121     9    31   492     0      64  }
 19197    31   122     9    31   492     0     111  unsafe.setMemory
 19198    31   122    25    31   492     0      59  (
 19199    31   122    26    31   492     0     111  base
 19200    31   122    30    31   492     0      66  ,
 19201    31   122    32    31   492     0     111  cap
 19202    31   122    36    31   492     0      74  +
 19203    31   122    38    31   492     0     111  ps
 19204    31   122    40    31   492     0      66  ,
 19205    31   122    42    31   492     0      59  (
 19206    31   122    43    31   492     0       9  byte
 19207    31   122    47    31   492     0      60  )
 19208    31   122    49    31   492     0     112  0
 19209    31   122    50    31   492     0      60  )
 19210    31   122    51    31   492     0     102  ;
 19211    31   123     9    31   492     0      31  if
 19212    31   123    12    31   492     0      59  (
 19213    31   123    13    31   492     0     111  base
 19214    31   123    18    31   492     0      82  %
 19215    31   123    20    31   492     0     111  ps
 19216    31   123    23    31   492     0      71  !=
 19217    31   123    26    31   492     0     112  0
 19218    31   123    27    31   492     0      60  )
 19219    31   123    29    31   492     0      63  {
 19220    31   125    13    31   492     0     111  address
 19221    31   125    21    31   492     0      67  =
 19222    31   125    23    31   492     0     111  base
 19223    31   125    28    31   492     0      74  +
 19224    31   125    30    31   492     0     111  ps
 19225    31   125    33    31   492     0      77  -
 19226    31   125    35    31   492     0      59  (
 19227    31   125    36    31   492     0     111  base
 19228    31   125    41    31   492     0      99  &
 19229    31   125    43    31   492     0      59  (
 19230    31   125    44    31   492     0     111  ps
 19231    31   125    47    31   492     0      77  -
 19232    31   125    49    31   492     0     112  1
 19233    31   125    50    31   492     0      60  )
 19234    31   125    51    31   492     0      60  )
 19235    31   125    52    31   492     0     102  ;
 19236    31   126     9    31   492     0      64  }
 19237    31   126    11    31   492     0      48  else
 19238    31   126    16    31   492     0      63  {
 19239    31   127    13    31   492     0     111  address
 19240    31   127    21    31   492     0      67  =
 19241    31   127    23    31   492     0     111  base
 19242    31   127    27    31   492     0     102  ;
 19243    31   128     9    31   492     0      64  }
 19244    31   129     9    31   492     0     111  cleaner
 19245    31   129    17    31   492     0      67  =
 19246    31   129    19    31   492     0     111  Cleaner.create
 19247    31   129    33    31   492     0      59  (
 19248    31   129    34    31   492     0      44  this
 19249    31   129    38    31   492     0      66  ,
 19250    31   129    40    31   492     0      15  new
 19251    31   129    44    31   492     0     111  Deallocator
 19252    31   129    55    31   492     0      59  (
 19253    31   129    56    31   492     0     111  base
 19254    31   129    60    31   492     0      66  ,
 19255    31   129    62    31   492     0     111  cap
 19256    31   129    65    31   492     0      60  )
 19257    31   129    66    31   492     0      60  )
 19258    31   129    67    31   492     0     102  ;
 19259    31   133     5    31   492     0      64  }
 19260    31   133     5    31   492     0    1232  ENDMETHOD
 19261    31   133     5    31   493     0    1233  STARTMETHOD
 19262    31   139     5    31   493     0      41  private
 19263    31   139    13    31   493     0     111  DirectByteBuffer
 19264    31   139    29    31   493     0      59  (
 19265    31   139    30    31   493     0      53  long
 19266    31   139    35    31   493     0     111  addr
 19267    31   139    39    31   493     0      66  ,
 19268    31   139    41    31   493     0      36  int
 19269    31   139    45    31   493     0     111  cap
 19270    31   139    48    31   493     0      60  )
 19271    31   139    50    31   493     0      63  {
 19272    31   140     9    31   493     0      27  super
 19273    31   140    14    31   493     0      59  (
 19274    31   140    15    31   493     0      77  -
 19275    31   140    16    31   493     0     112  1
 19276    31   140    17    31   493     0      66  ,
 19277    31   140    19    31   493     0     112  0
 19278    31   140    20    31   493     0      66  ,
 19279    31   140    22    31   493     0     111  cap
 19280    31   140    25    31   493     0      66  ,
 19281    31   140    27    31   493     0     111  cap
 19282    31   140    30    31   493     0      66  ,
 19283    31   140    32    31   493     0      43  false
 19284    31   140    37    31   493     0      60  )
 19285    31   140    38    31   493     0     102  ;
 19286    31   141     9    31   493     0     111  address
 19287    31   141    17    31   493     0      67  =
 19288    31   141    19    31   493     0     111  addr
 19289    31   141    23    31   493     0     102  ;
 19290    31   142     9    31   493     0     111  cleaner
 19291    31   142    17    31   493     0      67  =
 19292    31   142    19    31   493     0      21  null
 19293    31   142    23    31   493     0     102  ;
 19294    31   143     5    31   493     0      64  }
 19295    31   143     5    31   493     0    1234  ENDMETHOD
 19296    31   143     5    31   494     0    1235  STARTMETHOD
 19297    31   149     5    31   494     0      23  protected
 19298    31   149    15    31   494     0     111  DirectByteBuffer
 19299    31   149    31    31   494     0      59  (
 19300    31   149    32    31   494     0      36  int
 19301    31   149    36    31   494     0     111  cap
 19302    31   149    39    31   494     0      66  ,
 19303    31   149    41    31   494     0      53  long
 19304    31   149    46    31   494     0     111  addr
 19305    31   149    50    31   494     0      66  ,
 19306    31   149    52    31   494     0     111  Runnable
 19307    31   149    61    31   494     0     111  unmapper
 19308    31   149    69    31   494     0      60  )
 19309    31   149    71    31   494     0      63  {
 19310    31   151     9    31   494     0      27  super
 19311    31   151    14    31   494     0      59  (
 19312    31   151    15    31   494     0      77  -
 19313    31   151    16    31   494     0     112  1
 19314    31   151    17    31   494     0      66  ,
 19315    31   151    19    31   494     0     112  0
 19316    31   151    20    31   494     0      66  ,
 19317    31   151    22    31   494     0     111  cap
 19318    31   151    25    31   494     0      66  ,
 19319    31   151    27    31   494     0     111  cap
 19320    31   151    30    31   494     0      66  ,
 19321    31   151    32    31   494     0      52  true
 19322    31   151    36    31   494     0      60  )
 19323    31   151    37    31   494     0     102  ;
 19324    31   152     9    31   494     0     111  address
 19325    31   152    17    31   494     0      67  =
 19326    31   152    19    31   494     0     111  addr
 19327    31   152    23    31   494     0     102  ;
 19328    31   153     9    31   494     0     111  viewedBuffer
 19329    31   153    22    31   494     0      67  =
 19330    31   153    24    31   494     0      21  null
 19331    31   153    28    31   494     0     102  ;
 19332    31   154     9    31   494     0     111  cleaner
 19333    31   154    17    31   494     0      67  =
 19334    31   154    19    31   494     0     111  Cleaner.create
 19335    31   154    33    31   494     0      59  (
 19336    31   154    34    31   494     0      44  this
 19337    31   154    38    31   494     0      66  ,
 19338    31   154    40    31   494     0     111  unmapper
 19339    31   154    48    31   494     0      60  )
 19340    31   154    49    31   494     0     102  ;
 19341    31   158     5    31   494     0      64  }
 19342    31   158     5    31   494     0    1236  ENDMETHOD
 19343    31   158     5    31   495     0    1237  STARTMETHOD
 19344    31   164     5    31   495     0     111  DirectByteBuffer
 19345    31   164    21    31   495     0      59  (
 19346    31   164    22    31   495     0     111  DirectBuffer
 19347    31   164    35    31   495     0     111  db
 19348    31   164    37    31   495     0      66  ,
 19349    31   165    32    31   495     0      36  int
 19350    31   165    36    31   495     0     111  mark
 19351    31   165    40    31   495     0      66  ,
 19352    31   165    42    31   495     0      36  int
 19353    31   165    46    31   495     0     111  pos
 19354    31   165    49    31   495     0      66  ,
 19355    31   165    51    31   495     0      36  int
 19356    31   165    55    31   495     0     111  lim
 19357    31   165    58    31   495     0      66  ,
 19358    31   165    60    31   495     0      36  int
 19359    31   165    64    31   495     0     111  cap
 19360    31   165    67    31   495     0      66  ,
 19361    31   166    32    31   495     0      36  int
 19362    31   166    36    31   495     0     111  off
 19363    31   166    39    31   495     0      60  )
 19364    31   167     5    31   495     0      63  {
 19365    31   169     9    31   495     0      27  super
 19366    31   169    14    31   495     0      59  (
 19367    31   169    15    31   495     0     111  mark
 19368    31   169    19    31   495     0      66  ,
 19369    31   169    21    31   495     0     111  pos
 19370    31   169    24    31   495     0      66  ,
 19371    31   169    26    31   495     0     111  lim
 19372    31   169    29    31   495     0      66  ,
 19373    31   169    31    31   495     0     111  cap
 19374    31   169    34    31   495     0      60  )
 19375    31   169    35    31   495     0     102  ;
 19376    31   170     9    31   495     0     111  address
 19377    31   170    17    31   495     0      67  =
 19378    31   170    19    31   495     0     111  db.address
 19379    31   170    29    31   495     0      59  (
 19380    31   170    30    31   495     0      60  )
 19381    31   170    32    31   495     0      74  +
 19382    31   170    34    31   495     0     111  off
 19383    31   170    37    31   495     0     102  ;
 19384    31   171     9    31   495     0     111  viewedBuffer
 19385    31   171    22    31   495     0      67  =
 19386    31   171    24    31   495     0     111  db
 19387    31   171    26    31   495     0     102  ;
 19388    31   173     9    31   495     0     111  cleaner
 19389    31   173    17    31   495     0      67  =
 19390    31   173    19    31   495     0      21  null
 19391    31   173    23    31   495     0     102  ;
 19392    31   178     5    31   495     0      64  }
 19393    31   178     5    31   495     0    1238  ENDMETHOD
 19394    31   178     5    31   496     0    1239  STARTMETHOD
 19395    31   180     5    31   496     0      10  public
 19396    31   180    12    31   496     0     111  ByteBuffer
 19397    31   180    23    31   496     0     111  slice
 19398    31   180    28    31   496     0      59  (
 19399    31   180    29    31   496     0      60  )
 19400    31   180    31    31   496     0      63  {
 19401    31   181     9    31   496     1      36  int
 19402    31   181    13    31   496     1     111  pos
 19403    31   181    17    31   496     1      67  =
 19404    31   181    19    31   496     1     111  this.position
 19405    31   181    32    31   496     1      59  (
 19406    31   181    33    31   496     1      60  )
 19407    31   181    34    31   496     1     102  ;
 19408    31   182     9    31   496     1      36  int
 19409    31   182    13    31   496     1     111  lim
 19410    31   182    17    31   496     1      67  =
 19411    31   182    19    31   496     1     111  this.limit
 19412    31   182    29    31   496     1      59  (
 19413    31   182    30    31   496     1      60  )
 19414    31   182    31    31   496     1     102  ;
 19415    31   183     9    31   496     0     111  assert
 19416    31   183    16    31   496     0      59  (
 19417    31   183    17    31   496     0     111  pos
 19418    31   183    21    31   496     0      92  <=
 19419    31   183    24    31   496     0     111  lim
 19420    31   183    27    31   496     0      60  )
 19421    31   183    28    31   496     0     102  ;
 19422    31   184     9    31   496     0      36  int
 19423    31   184    13    31   496     0     111  rem
 19424    31   184    17    31   496     0      67  =
 19425    31   184    19    31   496     0      59  (
 19426    31   184    20    31   496     0     111  pos
 19427    31   184    24    31   496     0      92  <=
 19428    31   184    27    31   496     0     111  lim
 19429    31   184    31    31   496     0      58  ?
 19430    31   184    33    31   496     0     111  lim
 19431    31   184    37    31   496     0      77  -
 19432    31   184    39    31   496     0     111  pos
 19433    31   184    43    31   496     0      65  :
 19434    31   184    45    31   496     0     112  0
 19435    31   184    46    31   496     0      60  )
 19436    31   184    47    31   496     0     102  ;
 19437    31   185     9    31   496     0      36  int
 19438    31   185    13    31   496     0     111  off
 19439    31   185    17    31   496     0      67  =
 19440    31   185    19    31   496     0      59  (
 19441    31   185    20    31   496     0     111  pos
 19442    31   185    24    31   496     0      90  <<
 19443    31   185    27    31   496     0     112  0
 19444    31   185    28    31   496     0      60  )
 19445    31   185    29    31   496     0     102  ;
 19446    31   186     9    31   496     0     111  assert
 19447    31   186    16    31   496     0      59  (
 19448    31   186    17    31   496     0     111  off
 19449    31   186    21    31   496     0      88  >=
 19450    31   186    24    31   496     0     112  0
 19451    31   186    25    31   496     0      60  )
 19452    31   186    26    31   496     0     102  ;
 19453    31   187     9    31   496     0      19  return
 19454    31   187    16    31   496     0      15  new
 19455    31   187    20    31   496     0     111  DirectByteBuffer
 19456    31   187    36    31   496     0      59  (
 19457    31   187    37    31   496     0      44  this
 19458    31   187    41    31   496     0      66  ,
 19459    31   187    43    31   496     0      77  -
 19460    31   187    44    31   496     0     112  1
 19461    31   187    45    31   496     0      66  ,
 19462    31   187    47    31   496     0     112  0
 19463    31   187    48    31   496     0      66  ,
 19464    31   187    50    31   496     0     111  rem
 19465    31   187    53    31   496     0      66  ,
 19466    31   187    55    31   496     0     111  rem
 19467    31   187    58    31   496     0      66  ,
 19468    31   187    60    31   496     0     111  off
 19469    31   187    63    31   496     1      60  )
 19470    31   187    64    31   496     1     102  ;
 19471    31   188     5    31   496     1      64  }
 19472    31   188     5    31   496     0    1240  ENDMETHOD
 19473    31   188     5    31   497     0    1241  STARTMETHOD
 19474    31   190     5    31   497     0      10  public
 19475    31   190    12    31   497     0     111  ByteBuffer
 19476    31   190    23    31   497     0     111  duplicate
 19477    31   190    32    31   497     0      59  (
 19478    31   190    33    31   497     0      60  )
 19479    31   190    35    31   497     0      63  {
 19480    31   191     9    31   497     0      19  return
 19481    31   191    16    31   497     0      15  new
 19482    31   191    20    31   497     0     111  DirectByteBuffer
 19483    31   191    36    31   497     0      59  (
 19484    31   191    37    31   497     0      44  this
 19485    31   191    41    31   497     0      66  ,
 19486    31   192    47    31   497     1     111  this.markValue
 19487    31   192    61    31   497     1      59  (
 19488    31   192    62    31   497     1      60  )
 19489    31   192    63    31   497     1      66  ,
 19490    31   193    47    31   497     1     111  this.position
 19491    31   193    60    31   497     1      59  (
 19492    31   193    61    31   497     1      60  )
 19493    31   193    62    31   497     1      66  ,
 19494    31   194    47    31   497     1     111  this.limit
 19495    31   194    57    31   497     1      59  (
 19496    31   194    58    31   497     1      60  )
 19497    31   194    59    31   497     1      66  ,
 19498    31   195    47    31   497     1     111  this.capacity
 19499    31   195    60    31   497     1      59  (
 19500    31   195    61    31   497     1      60  )
 19501    31   195    62    31   497     1      66  ,
 19502    31   196    47    31   497     0     112  0
 19503    31   196    48    31   497     1      60  )
 19504    31   196    49    31   497     1     102  ;
 19505    31   197     5    31   497     1      64  }
 19506    31   197     5    31   497     0    1242  ENDMETHOD
 19507    31   197     5    31   498     0    1243  STARTMETHOD
 19508    31   199     5    31   498     0      10  public
 19509    31   199    12    31   498     0     111  ByteBuffer
 19510    31   199    23    31   498     0     111  asReadOnlyBuffer
 19511    31   199    39    31   498     0      59  (
 19512    31   199    40    31   498     0      60  )
 19513    31   199    42    31   498     0      63  {
 19514    31   201     9    31   498     0      19  return
 19515    31   201    16    31   498     0      15  new
 19516    31   201    20    31   498     0     111  DirectByteBufferR
 19517    31   201    37    31   498     0      59  (
 19518    31   201    38    31   498     0      44  this
 19519    31   201    42    31   498     0      66  ,
 19520    31   202    44    31   498     1     111  this.markValue
 19521    31   202    58    31   498     1      59  (
 19522    31   202    59    31   498     1      60  )
 19523    31   202    60    31   498     1      66  ,
 19524    31   203    44    31   498     1     111  this.position
 19525    31   203    57    31   498     1      59  (
 19526    31   203    58    31   498     1      60  )
 19527    31   203    59    31   498     1      66  ,
 19528    31   204    44    31   498     1     111  this.limit
 19529    31   204    54    31   498     1      59  (
 19530    31   204    55    31   498     1      60  )
 19531    31   204    56    31   498     1      66  ,
 19532    31   205    44    31   498     1     111  this.capacity
 19533    31   205    57    31   498     1      59  (
 19534    31   205    58    31   498     1      60  )
 19535    31   205    59    31   498     1      66  ,
 19536    31   206    44    31   498     0     112  0
 19537    31   206    45    31   498     1      60  )
 19538    31   206    46    31   498     1     102  ;
 19539    31   210     5    31   498     1      64  }
 19540    31   210     5    31   498     0    1244  ENDMETHOD
 19541    31   210     5    31   499     0    1245  STARTMETHOD
 19542    31   214     5    31   499     0      10  public
 19543    31   214    12    31   499     0      53  long
 19544    31   214    17    31   499     0     111  address
 19545    31   214    24    31   499     0      59  (
 19546    31   214    25    31   499     0      60  )
 19547    31   214    27    31   499     0      63  {
 19548    31   215     9    31   499     0      19  return
 19549    31   215    16    31   499     0     111  address
 19550    31   215    23    31   499     0     102  ;
 19551    31   216     5    31   499     0      64  }
 19552    31   216     5    31   499     0    1246  ENDMETHOD
 19553    31   216     5    31   500     0    1247  STARTMETHOD
 19554    31   218     5    31   500     0      41  private
 19555    31   218    13    31   500     0      53  long
 19556    31   218    18    31   500     0     111  ix
 19557    31   218    20    31   500     0      59  (
 19558    31   218    21    31   500     0      36  int
 19559    31   218    25    31   500     0     111  i
 19560    31   218    26    31   500     0      60  )
 19561    31   218    28    31   500     0      63  {
 19562    31   219     9    31   500     0      19  return
 19563    31   219    16    31   500     0     111  address
 19564    31   219    24    31   500     0      74  +
 19565    31   219    26    31   500     0      59  (
 19566    31   219    27    31   500     0     111  i
 19567    31   219    29    31   500     0      90  <<
 19568    31   219    32    31   500     0     112  0
 19569    31   219    33    31   500     0      60  )
 19570    31   219    34    31   500     0     102  ;
 19571    31   220     5    31   500     0      64  }
 19572    31   220     5    31   500     0    1248  ENDMETHOD
 19573    31   220     5    31   501     0    1249  STARTMETHOD
 19574    31   222     5    31   501     0      10  public
 19575    31   222    12    31   501     0       9  byte
 19576    31   222    17    31   501     0     111  get
 19577    31   222    20    31   501     0      59  (
 19578    31   222    21    31   501     0      60  )
 19579    31   222    23    31   501     0      63  {
 19580    31   223     9    31   501     0      19  return
 19581    31   223    16    31   501     0      59  (
 19582    31   223    17    31   501     0      59  (
 19583    31   223    18    31   501     0     111  unsafe.getByte
 19584    31   223    32    31   501     0      59  (
 19585    31   223    33    31   501     0     111  ix
 19586    31   223    35    31   501     0      59  (
 19587    31   223    36    31   501     0     111  nextGetIndex
 19588    31   223    48    31   501     0      59  (
 19589    31   223    49    31   501     0      60  )
 19590    31   223    50    31   501     0      60  )
 19591    31   223    51    31   501     0      60  )
 19592    31   223    52    31   501     0      60  )
 19593    31   223    53    31   501     0      60  )
 19594    31   223    54    31   501     0     102  ;
 19595    31   224     5    31   501     0      64  }
 19596    31   224     5    31   501     0    1250  ENDMETHOD
 19597    31   224     5    31   502     0    1251  STARTMETHOD
 19598    31   226     5    31   502     0      10  public
 19599    31   226    12    31   502     0       9  byte
 19600    31   226    17    31   502     0     111  get
 19601    31   226    20    31   502     0      59  (
 19602    31   226    21    31   502     0      36  int
 19603    31   226    25    31   502     0     111  i
 19604    31   226    26    31   502     0      60  )
 19605    31   226    28    31   502     0      63  {
 19606    31   227     9    31   502     0      19  return
 19607    31   227    16    31   502     0      59  (
 19608    31   227    17    31   502     0      59  (
 19609    31   227    18    31   502     0     111  unsafe.getByte
 19610    31   227    32    31   502     0      59  (
 19611    31   227    33    31   502     0     111  ix
 19612    31   227    35    31   502     0      59  (
 19613    31   227    36    31   502     0     111  checkIndex
 19614    31   227    46    31   502     0      59  (
 19615    31   227    47    31   502     0     111  i
 19616    31   227    48    31   502     0      60  )
 19617    31   227    49    31   502     0      60  )
 19618    31   227    50    31   502     0      60  )
 19619    31   227    51    31   502     0      60  )
 19620    31   227    52    31   502     0      60  )
 19621    31   227    53    31   502     0     102  ;
 19622    31   228     5    31   502     0      64  }
 19623    31   228     5    31   502     0    1252  ENDMETHOD
 19624    31   228     5    31   503     0    1253  STARTMETHOD
 19625    31   230     5    31   503     0      10  public
 19626    31   230    12    31   503     0     111  ByteBuffer
 19627    31   230    23    31   503     0     111  get
 19628    31   230    26    31   503     0      59  (
 19629    31   230    27    31   503     0       9  byte
 19630    31   230    31    31   503     0      61  [
 19631    31   230    32    31   503     0      62  ]
 19632    31   230    34    31   503     0     111  dst
 19633    31   230    37    31   503     0      66  ,
 19634    31   230    39    31   503     0      36  int
 19635    31   230    43    31   503     0     111  offset
 19636    31   230    49    31   503     0      66  ,
 19637    31   230    51    31   503     0      36  int
 19638    31   230    55    31   503     0     111  length
 19639    31   230    61    31   503     0      60  )
 19640    31   230    63    31   503     0      63  {
 19641    31   232     9    31   503     0      31  if
 19642    31   232    12    31   503     0      59  (
 19643    31   232    13    31   503     0      59  (
 19644    31   232    14    31   503     0     111  length
 19645    31   232    21    31   503     0      90  <<
 19646    31   232    24    31   503     0     112  0
 19647    31   232    25    31   503     0      60  )
 19648    31   232    27    31   503     0      89  >
 19649    31   232    29    31   503     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 19650    31   232    61    31   503     0      60  )
 19651    31   232    63    31   503     0      63  {
 19652    31   233    13    31   503     0     111  checkBounds
 19653    31   233    24    31   503     0      59  (
 19654    31   233    25    31   503     0     111  offset
 19655    31   233    31    31   503     0      66  ,
 19656    31   233    33    31   503     0     111  length
 19657    31   233    39    31   503     0      66  ,
 19658    31   233    41    31   503     0     111  dst.length
 19659    31   233    51    31   503     0      60  )
 19660    31   233    52    31   503     0     102  ;
 19661    31   234    13    31   503     1      36  int
 19662    31   234    17    31   503     1     111  pos
 19663    31   234    21    31   503     1      67  =
 19664    31   234    23    31   503     1     111  position
 19665    31   234    31    31   503     1      59  (
 19666    31   234    32    31   503     1      60  )
 19667    31   234    33    31   503     1     102  ;
 19668    31   235    13    31   503     1      36  int
 19669    31   235    17    31   503     1     111  lim
 19670    31   235    21    31   503     1      67  =
 19671    31   235    23    31   503     1     111  limit
 19672    31   235    28    31   503     1      59  (
 19673    31   235    29    31   503     1      60  )
 19674    31   235    30    31   503     1     102  ;
 19675    31   236    13    31   503     0     111  assert
 19676    31   236    20    31   503     0      59  (
 19677    31   236    21    31   503     0     111  pos
 19678    31   236    25    31   503     0      92  <=
 19679    31   236    28    31   503     0     111  lim
 19680    31   236    31    31   503     0      60  )
 19681    31   236    32    31   503     0     102  ;
 19682    31   237    13    31   503     0      36  int
 19683    31   237    17    31   503     0     111  rem
 19684    31   237    21    31   503     0      67  =
 19685    31   237    23    31   503     0      59  (
 19686    31   237    24    31   503     0     111  pos
 19687    31   237    28    31   503     0      92  <=
 19688    31   237    31    31   503     0     111  lim
 19689    31   237    35    31   503     0      58  ?
 19690    31   237    37    31   503     0     111  lim
 19691    31   237    41    31   503     0      77  -
 19692    31   237    43    31   503     0     111  pos
 19693    31   237    47    31   503     0      65  :
 19694    31   237    49    31   503     0     112  0
 19695    31   237    50    31   503     0      60  )
 19696    31   237    51    31   503     0     102  ;
 19697    31   238    13    31   503     0      31  if
 19698    31   238    16    31   503     0      59  (
 19699    31   238    17    31   503     0     111  length
 19700    31   238    24    31   503     0      89  >
 19701    31   238    26    31   503     0     111  rem
 19702    31   238    29    31   503     0      60  )
 19703    31   239    17    31   503     0      20  throw
 19704    31   239    23    31   503     0      15  new
 19705    31   239    27    31   503     0     111  BufferUnderflowException
 19706    31   239    51    31   503     0      59  (
 19707    31   239    52    31   503     0      60  )
 19708    31   239    53    31   503     0     102  ;
 19709    31   241    13    31   503     0      31  if
 19710    31   241    16    31   503     0      59  (
 19711    31   241    17    31   503     0     111  order
 19712    31   241    22    31   503     0      59  (
 19713    31   241    23    31   503     0      60  )
 19714    31   241    25    31   503     0      71  !=
 19715    31   241    28    31   503     0     111  ByteOrder.nativeOrder
 19716    31   241    49    31   503     0      59  (
 19717    31   241    50    31   503     0      60  )
 19718    31   241    51    31   503     0      60  )
 19719    31   242    17    31   503     0     111  Bits.copyToByteArray
 19720    31   242    37    31   503     0      59  (
 19721    31   242    38    31   503     0     111  ix
 19722    31   242    40    31   503     0      59  (
 19723    31   242    41    31   503     0     111  pos
 19724    31   242    44    31   503     0      60  )
 19725    31   242    45    31   503     0      66  ,
 19726    31   242    47    31   503     0     111  dst
 19727    31   242    50    31   503     0      66  ,
 19728    31   243    43    31   503     0     111  offset
 19729    31   243    50    31   503     0      90  <<
 19730    31   243    53    31   503     0     112  0
 19731    31   243    54    31   503     0      66  ,
 19732    31   244    43    31   503     0     111  length
 19733    31   244    50    31   503     0      90  <<
 19734    31   244    53    31   503     0     112  0
 19735    31   244    54    31   503     0      60  )
 19736    31   244    55    31   503     0     102  ;
 19737    31   245    13    31   503     0      48  else
 19738    31   246    17    31   503     0     111  Bits.copyToByteArray
 19739    31   246    37    31   503     0      59  (
 19740    31   246    38    31   503     0     111  ix
 19741    31   246    40    31   503     0      59  (
 19742    31   246    41    31   503     0     111  pos
 19743    31   246    44    31   503     0      60  )
 19744    31   246    45    31   503     0      66  ,
 19745    31   246    47    31   503     0     111  dst
 19746    31   246    50    31   503     0      66  ,
 19747    31   247    38    31   503     0     111  offset
 19748    31   247    45    31   503     0      90  <<
 19749    31   247    48    31   503     0     112  0
 19750    31   247    49    31   503     0      66  ,
 19751    31   248    38    31   503     0     111  length
 19752    31   248    45    31   503     0      90  <<
 19753    31   248    48    31   503     0     112  0
 19754    31   248    49    31   503     0      60  )
 19755    31   248    50    31   503     0     102  ;
 19756    31   249    13    31   503     0     111  position
 19757    31   249    21    31   503     0      59  (
 19758    31   249    22    31   503     0     111  pos
 19759    31   249    26    31   503     0      74  +
 19760    31   249    28    31   503     0     111  length
 19761    31   249    34    31   503     0      60  )
 19762    31   249    35    31   503     0     102  ;
 19763    31   250     9    31   503     0      64  }
 19764    31   250    11    31   503     0      48  else
 19765    31   250    16    31   503     0      63  {
 19766    31   251    13    31   503     0     111  super.get
 19767    31   251    22    31   503     0      59  (
 19768    31   251    23    31   503     0     111  dst
 19769    31   251    26    31   503     0      66  ,
 19770    31   251    28    31   503     0     111  offset
 19771    31   251    34    31   503     0      66  ,
 19772    31   251    36    31   503     0     111  length
 19773    31   251    42    31   503     0      60  )
 19774    31   251    43    31   503     0     102  ;
 19775    31   252     9    31   503     0      64  }
 19776    31   253     9    31   503     0      19  return
 19777    31   253    16    31   503     0      44  this
 19778    31   253    20    31   503     0     102  ;
 19779    31   257     5    31   503     0      64  }
 19780    31   257     5    31   503     0    1254  ENDMETHOD
 19781    31   257     5    31   504     0    1255  STARTMETHOD
 19782    31   261     5    31   504     0      10  public
 19783    31   261    12    31   504     0     111  ByteBuffer
 19784    31   261    23    31   504     0     111  put
 19785    31   261    26    31   504     0      59  (
 19786    31   261    27    31   504     0       9  byte
 19787    31   261    32    31   504     0     111  x
 19788    31   261    33    31   504     0      60  )
 19789    31   261    35    31   504     0      63  {
 19790    31   263     9    31   504     0     111  unsafe.putByte
 19791    31   263    23    31   504     0      59  (
 19792    31   263    24    31   504     0     111  ix
 19793    31   263    26    31   504     0      59  (
 19794    31   263    27    31   504     0     111  nextPutIndex
 19795    31   263    39    31   504     0      59  (
 19796    31   263    40    31   504     0      60  )
 19797    31   263    41    31   504     0      60  )
 19798    31   263    42    31   504     0      66  ,
 19799    31   263    44    31   504     0      59  (
 19800    31   263    45    31   504     0      59  (
 19801    31   263    46    31   504     0     111  x
 19802    31   263    47    31   504     0      60  )
 19803    31   263    48    31   504     0      60  )
 19804    31   263    49    31   504     0      60  )
 19805    31   263    50    31   504     0     102  ;
 19806    31   264     9    31   504     0      19  return
 19807    31   264    16    31   504     0      44  this
 19808    31   264    20    31   504     0     102  ;
 19809    31   268     5    31   504     0      64  }
 19810    31   268     5    31   504     0    1256  ENDMETHOD
 19811    31   268     5    31   505     0    1257  STARTMETHOD
 19812    31   270     5    31   505     0      10  public
 19813    31   270    12    31   505     0     111  ByteBuffer
 19814    31   270    23    31   505     0     111  put
 19815    31   270    26    31   505     0      59  (
 19816    31   270    27    31   505     0      36  int
 19817    31   270    31    31   505     0     111  i
 19818    31   270    32    31   505     0      66  ,
 19819    31   270    34    31   505     0       9  byte
 19820    31   270    39    31   505     0     111  x
 19821    31   270    40    31   505     0      60  )
 19822    31   270    42    31   505     0      63  {
 19823    31   272     9    31   505     0     111  unsafe.putByte
 19824    31   272    23    31   505     0      59  (
 19825    31   272    24    31   505     0     111  ix
 19826    31   272    26    31   505     0      59  (
 19827    31   272    27    31   505     0     111  checkIndex
 19828    31   272    37    31   505     0      59  (
 19829    31   272    38    31   505     0     111  i
 19830    31   272    39    31   505     0      60  )
 19831    31   272    40    31   505     0      60  )
 19832    31   272    41    31   505     0      66  ,
 19833    31   272    43    31   505     0      59  (
 19834    31   272    44    31   505     0      59  (
 19835    31   272    45    31   505     0     111  x
 19836    31   272    46    31   505     0      60  )
 19837    31   272    47    31   505     0      60  )
 19838    31   272    48    31   505     0      60  )
 19839    31   272    49    31   505     0     102  ;
 19840    31   273     9    31   505     0      19  return
 19841    31   273    16    31   505     0      44  this
 19842    31   273    20    31   505     0     102  ;
 19843    31   277     5    31   505     0      64  }
 19844    31   277     5    31   505     0    1258  ENDMETHOD
 19845    31   277     5    31   506     0    1259  STARTMETHOD
 19846    31   279     5    31   506     0      10  public
 19847    31   279    12    31   506     0     111  ByteBuffer
 19848    31   279    23    31   506     0     111  put
 19849    31   279    26    31   506     0      59  (
 19850    31   279    27    31   506     0     111  ByteBuffer
 19851    31   279    38    31   506     0     111  src
 19852    31   279    41    31   506     0      60  )
 19853    31   279    43    31   506     0      63  {
 19854    31   281     9    31   506     0      31  if
 19855    31   281    12    31   506     0      59  (
 19856    31   281    13    31   506     0     111  src
 19857    31   281    17    31   506     0      16  instanceof
 19858    31   281    28    31   506     0     111  DirectByteBuffer
 19859    31   281    44    31   506     0      60  )
 19860    31   281    46    31   506     0      63  {
 19861    31   282    13    31   506     0      31  if
 19862    31   282    16    31   506     0      59  (
 19863    31   282    17    31   506     0     111  src
 19864    31   282    21    31   506     0      68  ==
 19865    31   282    24    31   506     0      44  this
 19866    31   282    28    31   506     0      60  )
 19867    31   283    17    31   506     0      20  throw
 19868    31   283    23    31   506     0      15  new
 19869    31   283    27    31   506     0     111  IllegalArgumentException
 19870    31   283    51    31   506     0      59  (
 19871    31   283    52    31   506     0      60  )
 19872    31   283    53    31   506     0     102  ;
 19873    31   284    13    31   506     0     111  DirectByteBuffer
 19874    31   284    30    31   506     0     111  sb
 19875    31   284    33    31   506     0      67  =
 19876    31   284    35    31   506     0      59  (
 19877    31   284    36    31   506     0     111  DirectByteBuffer
 19878    31   284    52    31   506     0      60  )
 19879    31   284    53    31   506     0     111  src
 19880    31   284    56    31   506     0     102  ;
 19881    31   286    13    31   506     1      36  int
 19882    31   286    17    31   506     1     111  spos
 19883    31   286    22    31   506     1      67  =
 19884    31   286    24    31   506     1     111  sb.position
 19885    31   286    35    31   506     1      59  (
 19886    31   286    36    31   506     1      60  )
 19887    31   286    37    31   506     1     102  ;
 19888    31   287    13    31   506     1      36  int
 19889    31   287    17    31   506     1     111  slim
 19890    31   287    22    31   506     1      67  =
 19891    31   287    24    31   506     1     111  sb.limit
 19892    31   287    32    31   506     1      59  (
 19893    31   287    33    31   506     1      60  )
 19894    31   287    34    31   506     1     102  ;
 19895    31   288    13    31   506     0     111  assert
 19896    31   288    20    31   506     0      59  (
 19897    31   288    21    31   506     0     111  spos
 19898    31   288    26    31   506     0      92  <=
 19899    31   288    29    31   506     0     111  slim
 19900    31   288    33    31   506     0      60  )
 19901    31   288    34    31   506     0     102  ;
 19902    31   289    13    31   506     0      36  int
 19903    31   289    17    31   506     0     111  srem
 19904    31   289    22    31   506     0      67  =
 19905    31   289    24    31   506     0      59  (
 19906    31   289    25    31   506     0     111  spos
 19907    31   289    30    31   506     0      92  <=
 19908    31   289    33    31   506     0     111  slim
 19909    31   289    38    31   506     0      58  ?
 19910    31   289    40    31   506     0     111  slim
 19911    31   289    45    31   506     0      77  -
 19912    31   289    47    31   506     0     111  spos
 19913    31   289    52    31   506     0      65  :
 19914    31   289    54    31   506     0     112  0
 19915    31   289    55    31   506     0      60  )
 19916    31   289    56    31   506     0     102  ;
 19917    31   291    13    31   506     1      36  int
 19918    31   291    17    31   506     1     111  pos
 19919    31   291    21    31   506     1      67  =
 19920    31   291    23    31   506     1     111  position
 19921    31   291    31    31   506     1      59  (
 19922    31   291    32    31   506     1      60  )
 19923    31   291    33    31   506     1     102  ;
 19924    31   292    13    31   506     1      36  int
 19925    31   292    17    31   506     1     111  lim
 19926    31   292    21    31   506     1      67  =
 19927    31   292    23    31   506     1     111  limit
 19928    31   292    28    31   506     1      59  (
 19929    31   292    29    31   506     1      60  )
 19930    31   292    30    31   506     1     102  ;
 19931    31   293    13    31   506     0     111  assert
 19932    31   293    20    31   506     0      59  (
 19933    31   293    21    31   506     0     111  pos
 19934    31   293    25    31   506     0      92  <=
 19935    31   293    28    31   506     0     111  lim
 19936    31   293    31    31   506     0      60  )
 19937    31   293    32    31   506     0     102  ;
 19938    31   294    13    31   506     0      36  int
 19939    31   294    17    31   506     0     111  rem
 19940    31   294    21    31   506     0      67  =
 19941    31   294    23    31   506     0      59  (
 19942    31   294    24    31   506     0     111  pos
 19943    31   294    28    31   506     0      92  <=
 19944    31   294    31    31   506     0     111  lim
 19945    31   294    35    31   506     0      58  ?
 19946    31   294    37    31   506     0     111  lim
 19947    31   294    41    31   506     0      77  -
 19948    31   294    43    31   506     0     111  pos
 19949    31   294    47    31   506     0      65  :
 19950    31   294    49    31   506     0     112  0
 19951    31   294    50    31   506     0      60  )
 19952    31   294    51    31   506     0     102  ;
 19953    31   296    13    31   506     0      31  if
 19954    31   296    16    31   506     0      59  (
 19955    31   296    17    31   506     0     111  srem
 19956    31   296    22    31   506     0      89  >
 19957    31   296    24    31   506     0     111  rem
 19958    31   296    27    31   506     0      60  )
 19959    31   297    17    31   506     0      20  throw
 19960    31   297    23    31   506     0      15  new
 19961    31   297    27    31   506     0     111  BufferOverflowException
 19962    31   297    50    31   506     0      59  (
 19963    31   297    51    31   506     0      60  )
 19964    31   297    52    31   506     0     102  ;
 19965    31   298    13    31   506     0     111  unsafe.copyMemory
 19966    31   298    30    31   506     0      59  (
 19967    31   298    31    31   506     0     111  sb.ix
 19968    31   298    36    31   506     0      59  (
 19969    31   298    37    31   506     0     111  spos
 19970    31   298    41    31   506     0      60  )
 19971    31   298    42    31   506     0      66  ,
 19972    31   298    44    31   506     0     111  ix
 19973    31   298    46    31   506     0      59  (
 19974    31   298    47    31   506     0     111  pos
 19975    31   298    50    31   506     0      60  )
 19976    31   298    51    31   506     0      66  ,
 19977    31   298    53    31   506     0     111  srem
 19978    31   298    58    31   506     0      90  <<
 19979    31   298    61    31   506     0     112  0
 19980    31   298    62    31   506     0      60  )
 19981    31   298    63    31   506     0     102  ;
 19982    31   299    13    31   506     1     111  sb.position
 19983    31   299    24    31   506     1      59  (
 19984    31   299    25    31   506     1     111  spos
 19985    31   299    30    31   506     1      74  +
 19986    31   299    32    31   506     1     111  srem
 19987    31   299    36    31   506     1      60  )
 19988    31   299    37    31   506     1     102  ;
 19989    31   300    13    31   506     1     111  position
 19990    31   300    21    31   506     1      59  (
 19991    31   300    22    31   506     1     111  pos
 19992    31   300    26    31   506     1      74  +
 19993    31   300    28    31   506     1     111  srem
 19994    31   300    32    31   506     1      60  )
 19995    31   300    33    31   506     1     102  ;
 19996    31   301     9    31   506     0      64  }
 19997    31   301    11    31   506     0      48  else
 19998    31   301    16    31   506     0      31  if
 19999    31   301    19    31   506     0      59  (
 20000    31   301    20    31   506     0     111  src.hb
 20001    31   301    27    31   506     0      71  !=
 20002    31   301    30    31   506     0      21  null
 20003    31   301    34    31   506     0      60  )
 20004    31   301    36    31   506     0      63  {
 20005    31   303    13    31   506     1      36  int
 20006    31   303    17    31   506     1     111  spos
 20007    31   303    22    31   506     1      67  =
 20008    31   303    24    31   506     1     111  src.position
 20009    31   303    36    31   506     1      59  (
 20010    31   303    37    31   506     1      60  )
 20011    31   303    38    31   506     1     102  ;
 20012    31   304    13    31   506     1      36  int
 20013    31   304    17    31   506     1     111  slim
 20014    31   304    22    31   506     1      67  =
 20015    31   304    24    31   506     1     111  src.limit
 20016    31   304    33    31   506     1      59  (
 20017    31   304    34    31   506     1      60  )
 20018    31   304    35    31   506     1     102  ;
 20019    31   305    13    31   506     0     111  assert
 20020    31   305    20    31   506     0      59  (
 20021    31   305    21    31   506     0     111  spos
 20022    31   305    26    31   506     0      92  <=
 20023    31   305    29    31   506     0     111  slim
 20024    31   305    33    31   506     0      60  )
 20025    31   305    34    31   506     0     102  ;
 20026    31   306    13    31   506     0      36  int
 20027    31   306    17    31   506     0     111  srem
 20028    31   306    22    31   506     0      67  =
 20029    31   306    24    31   506     0      59  (
 20030    31   306    25    31   506     0     111  spos
 20031    31   306    30    31   506     0      92  <=
 20032    31   306    33    31   506     0     111  slim
 20033    31   306    38    31   506     0      58  ?
 20034    31   306    40    31   506     0     111  slim
 20035    31   306    45    31   506     0      77  -
 20036    31   306    47    31   506     0     111  spos
 20037    31   306    52    31   506     0      65  :
 20038    31   306    54    31   506     0     112  0
 20039    31   306    55    31   506     0      60  )
 20040    31   306    56    31   506     0     102  ;
 20041    31   308    13    31   506     0     111  put
 20042    31   308    16    31   506     0      59  (
 20043    31   308    17    31   506     0     111  src.hb
 20044    31   308    23    31   506     0      66  ,
 20045    31   308    25    31   506     0     111  src.offset
 20046    31   308    36    31   506     0      74  +
 20047    31   308    38    31   506     0     111  spos
 20048    31   308    42    31   506     0      66  ,
 20049    31   308    44    31   506     0     111  srem
 20050    31   308    48    31   506     0      60  )
 20051    31   308    49    31   506     0     102  ;
 20052    31   309    13    31   506     0     111  src.position
 20053    31   309    25    31   506     0      59  (
 20054    31   309    26    31   506     0     111  spos
 20055    31   309    31    31   506     0      74  +
 20056    31   309    33    31   506     0     111  srem
 20057    31   309    37    31   506     0      60  )
 20058    31   309    38    31   506     0     102  ;
 20059    31   311     9    31   506     0      64  }
 20060    31   311    11    31   506     0      48  else
 20061    31   311    16    31   506     0      63  {
 20062    31   312    13    31   506     0     111  super.put
 20063    31   312    22    31   506     0      59  (
 20064    31   312    23    31   506     0     111  src
 20065    31   312    26    31   506     0      60  )
 20066    31   312    27    31   506     0     102  ;
 20067    31   313     9    31   506     0      64  }
 20068    31   314     9    31   506     0      19  return
 20069    31   314    16    31   506     0      44  this
 20070    31   314    20    31   506     0     102  ;
 20071    31   318     5    31   506     0      64  }
 20072    31   318     5    31   506     0    1260  ENDMETHOD
 20073    31   318     5    31   507     0    1261  STARTMETHOD
 20074    31   320     5    31   507     0      10  public
 20075    31   320    12    31   507     0     111  ByteBuffer
 20076    31   320    23    31   507     0     111  put
 20077    31   320    26    31   507     0      59  (
 20078    31   320    27    31   507     0       9  byte
 20079    31   320    31    31   507     0      61  [
 20080    31   320    32    31   507     0      62  ]
 20081    31   320    34    31   507     0     111  src
 20082    31   320    37    31   507     0      66  ,
 20083    31   320    39    31   507     0      36  int
 20084    31   320    43    31   507     0     111  offset
 20085    31   320    49    31   507     0      66  ,
 20086    31   320    51    31   507     0      36  int
 20087    31   320    55    31   507     0     111  length
 20088    31   320    61    31   507     0      60  )
 20089    31   320    63    31   507     0      63  {
 20090    31   322     9    31   507     0      31  if
 20091    31   322    12    31   507     0      59  (
 20092    31   322    13    31   507     0      59  (
 20093    31   322    14    31   507     0     111  length
 20094    31   322    21    31   507     0      90  <<
 20095    31   322    24    31   507     0     112  0
 20096    31   322    25    31   507     0      60  )
 20097    31   322    27    31   507     0      89  >
 20098    31   322    29    31   507     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 20099    31   322    63    31   507     0      60  )
 20100    31   322    65    31   507     0      63  {
 20101    31   323    13    31   507     0     111  checkBounds
 20102    31   323    24    31   507     0      59  (
 20103    31   323    25    31   507     0     111  offset
 20104    31   323    31    31   507     0      66  ,
 20105    31   323    33    31   507     0     111  length
 20106    31   323    39    31   507     0      66  ,
 20107    31   323    41    31   507     0     111  src.length
 20108    31   323    51    31   507     0      60  )
 20109    31   323    52    31   507     0     102  ;
 20110    31   324    13    31   507     1      36  int
 20111    31   324    17    31   507     1     111  pos
 20112    31   324    21    31   507     1      67  =
 20113    31   324    23    31   507     1     111  position
 20114    31   324    31    31   507     1      59  (
 20115    31   324    32    31   507     1      60  )
 20116    31   324    33    31   507     1     102  ;
 20117    31   325    13    31   507     1      36  int
 20118    31   325    17    31   507     1     111  lim
 20119    31   325    21    31   507     1      67  =
 20120    31   325    23    31   507     1     111  limit
 20121    31   325    28    31   507     1      59  (
 20122    31   325    29    31   507     1      60  )
 20123    31   325    30    31   507     1     102  ;
 20124    31   326    13    31   507     0     111  assert
 20125    31   326    20    31   507     0      59  (
 20126    31   326    21    31   507     0     111  pos
 20127    31   326    25    31   507     0      92  <=
 20128    31   326    28    31   507     0     111  lim
 20129    31   326    31    31   507     0      60  )
 20130    31   326    32    31   507     0     102  ;
 20131    31   327    13    31   507     0      36  int
 20132    31   327    17    31   507     0     111  rem
 20133    31   327    21    31   507     0      67  =
 20134    31   327    23    31   507     0      59  (
 20135    31   327    24    31   507     0     111  pos
 20136    31   327    28    31   507     0      92  <=
 20137    31   327    31    31   507     0     111  lim
 20138    31   327    35    31   507     0      58  ?
 20139    31   327    37    31   507     0     111  lim
 20140    31   327    41    31   507     0      77  -
 20141    31   327    43    31   507     0     111  pos
 20142    31   327    47    31   507     0      65  :
 20143    31   327    49    31   507     0     112  0
 20144    31   327    50    31   507     0      60  )
 20145    31   327    51    31   507     0     102  ;
 20146    31   328    13    31   507     0      31  if
 20147    31   328    16    31   507     0      59  (
 20148    31   328    17    31   507     0     111  length
 20149    31   328    24    31   507     0      89  >
 20150    31   328    26    31   507     0     111  rem
 20151    31   328    29    31   507     0      60  )
 20152    31   329    17    31   507     0      20  throw
 20153    31   329    23    31   507     0      15  new
 20154    31   329    27    31   507     0     111  BufferOverflowException
 20155    31   329    50    31   507     0      59  (
 20156    31   329    51    31   507     0      60  )
 20157    31   329    52    31   507     0     102  ;
 20158    31   331    13    31   507     0      31  if
 20159    31   331    16    31   507     0      59  (
 20160    31   331    17    31   507     0     111  order
 20161    31   331    22    31   507     0      59  (
 20162    31   331    23    31   507     0      60  )
 20163    31   331    25    31   507     0      71  !=
 20164    31   331    28    31   507     0     111  ByteOrder.nativeOrder
 20165    31   331    49    31   507     0      59  (
 20166    31   331    50    31   507     0      60  )
 20167    31   331    51    31   507     0      60  )
 20168    31   332    17    31   507     0     111  Bits.copyFromByteArray
 20169    31   332    39    31   507     0      59  (
 20170    31   332    40    31   507     0     111  src
 20171    31   332    43    31   507     0      66  ,
 20172    31   332    45    31   507     0     111  offset
 20173    31   332    52    31   507     0      90  <<
 20174    31   332    55    31   507     0     112  0
 20175    31   332    56    31   507     0      66  ,
 20176    31   333    45    31   507     0     111  ix
 20177    31   333    47    31   507     0      59  (
 20178    31   333    48    31   507     0     111  pos
 20179    31   333    51    31   507     0      60  )
 20180    31   333    52    31   507     0      66  ,
 20181    31   333    54    31   507     0     111  length
 20182    31   333    61    31   507     0      90  <<
 20183    31   333    64    31   507     0     112  0
 20184    31   333    65    31   507     0      60  )
 20185    31   333    66    31   507     0     102  ;
 20186    31   334    13    31   507     0      48  else
 20187    31   335    17    31   507     0     111  Bits.copyFromByteArray
 20188    31   335    39    31   507     0      59  (
 20189    31   335    40    31   507     0     111  src
 20190    31   335    43    31   507     0      66  ,
 20191    31   335    45    31   507     0     111  offset
 20192    31   335    52    31   507     0      90  <<
 20193    31   335    55    31   507     0     112  0
 20194    31   335    56    31   507     0      66  ,
 20195    31   336    40    31   507     0     111  ix
 20196    31   336    42    31   507     0      59  (
 20197    31   336    43    31   507     0     111  pos
 20198    31   336    46    31   507     0      60  )
 20199    31   336    47    31   507     0      66  ,
 20200    31   336    49    31   507     0     111  length
 20201    31   336    56    31   507     0      90  <<
 20202    31   336    59    31   507     0     112  0
 20203    31   336    60    31   507     0      60  )
 20204    31   336    61    31   507     0     102  ;
 20205    31   337    13    31   507     0     111  position
 20206    31   337    21    31   507     0      59  (
 20207    31   337    22    31   507     0     111  pos
 20208    31   337    26    31   507     0      74  +
 20209    31   337    28    31   507     0     111  length
 20210    31   337    34    31   507     0      60  )
 20211    31   337    35    31   507     0     102  ;
 20212    31   338     9    31   507     0      64  }
 20213    31   338    11    31   507     0      48  else
 20214    31   338    16    31   507     0      63  {
 20215    31   339    13    31   507     0     111  super.put
 20216    31   339    22    31   507     0      59  (
 20217    31   339    23    31   507     0     111  src
 20218    31   339    26    31   507     0      66  ,
 20219    31   339    28    31   507     0     111  offset
 20220    31   339    34    31   507     0      66  ,
 20221    31   339    36    31   507     0     111  length
 20222    31   339    42    31   507     0      60  )
 20223    31   339    43    31   507     0     102  ;
 20224    31   340     9    31   507     0      64  }
 20225    31   341     9    31   507     0      19  return
 20226    31   341    16    31   507     0      44  this
 20227    31   341    20    31   507     0     102  ;
 20228    31   345     5    31   507     0      64  }
 20229    31   345     5    31   507     0    1262  ENDMETHOD
 20230    31   345     5    31   508     0    1263  STARTMETHOD
 20231    31   347     5    31   508     0      10  public
 20232    31   347    12    31   508     0     111  ByteBuffer
 20233    31   347    23    31   508     0     111  compact
 20234    31   347    30    31   508     0      59  (
 20235    31   347    31    31   508     0      60  )
 20236    31   347    33    31   508     0      63  {
 20237    31   349     9    31   508     1      36  int
 20238    31   349    13    31   508     1     111  pos
 20239    31   349    17    31   508     1      67  =
 20240    31   349    19    31   508     1     111  position
 20241    31   349    27    31   508     1      59  (
 20242    31   349    28    31   508     1      60  )
 20243    31   349    29    31   508     1     102  ;
 20244    31   350     9    31   508     1      36  int
 20245    31   350    13    31   508     1     111  lim
 20246    31   350    17    31   508     1      67  =
 20247    31   350    19    31   508     1     111  limit
 20248    31   350    24    31   508     1      59  (
 20249    31   350    25    31   508     1      60  )
 20250    31   350    26    31   508     1     102  ;
 20251    31   351     9    31   508     0     111  assert
 20252    31   351    16    31   508     0      59  (
 20253    31   351    17    31   508     0     111  pos
 20254    31   351    21    31   508     0      92  <=
 20255    31   351    24    31   508     0     111  lim
 20256    31   351    27    31   508     0      60  )
 20257    31   351    28    31   508     0     102  ;
 20258    31   352     9    31   508     0      36  int
 20259    31   352    13    31   508     0     111  rem
 20260    31   352    17    31   508     0      67  =
 20261    31   352    19    31   508     0      59  (
 20262    31   352    20    31   508     0     111  pos
 20263    31   352    24    31   508     0      92  <=
 20264    31   352    27    31   508     0     111  lim
 20265    31   352    31    31   508     0      58  ?
 20266    31   352    33    31   508     0     111  lim
 20267    31   352    37    31   508     0      77  -
 20268    31   352    39    31   508     0     111  pos
 20269    31   352    43    31   508     0      65  :
 20270    31   352    45    31   508     0     112  0
 20271    31   352    46    31   508     0      60  )
 20272    31   352    47    31   508     0     102  ;
 20273    31   354     9    31   508     0     111  unsafe.copyMemory
 20274    31   354    26    31   508     0      59  (
 20275    31   354    27    31   508     0     111  ix
 20276    31   354    29    31   508     0      59  (
 20277    31   354    30    31   508     0     111  pos
 20278    31   354    33    31   508     0      60  )
 20279    31   354    34    31   508     0      66  ,
 20280    31   354    36    31   508     0     111  ix
 20281    31   354    38    31   508     0      59  (
 20282    31   354    39    31   508     0     112  0
 20283    31   354    40    31   508     0      60  )
 20284    31   354    41    31   508     0      66  ,
 20285    31   354    43    31   508     0     111  rem
 20286    31   354    47    31   508     0      90  <<
 20287    31   354    50    31   508     0     112  0
 20288    31   354    51    31   508     0      60  )
 20289    31   354    52    31   508     0     102  ;
 20290    31   355     9    31   508     0     111  position
 20291    31   355    17    31   508     0      59  (
 20292    31   355    18    31   508     0     111  rem
 20293    31   355    21    31   508     0      60  )
 20294    31   355    22    31   508     0     102  ;
 20295    31   356     9    31   508     0     111  limit
 20296    31   356    14    31   508     0      59  (
 20297    31   356    15    31   508     0     111  capacity
 20298    31   356    23    31   508     0      59  (
 20299    31   356    24    31   508     0      60  )
 20300    31   356    25    31   508     0      60  )
 20301    31   356    26    31   508     0     102  ;
 20302    31   357     9    31   508     0     111  clearMark
 20303    31   357    18    31   508     0      59  (
 20304    31   357    19    31   508     0      60  )
 20305    31   357    20    31   508     0     102  ;
 20306    31   358     9    31   508     0      19  return
 20307    31   358    16    31   508     0      44  this
 20308    31   358    20    31   508     1     102  ;
 20309    31   362     5    31   508     1      64  }
 20310    31   362     5    31   508     0    1264  ENDMETHOD
 20311    31   362     5    31   509     0    1265  STARTMETHOD
 20312    31   364     5    31   509     0      10  public
 20313    31   364    12    31   509     0      39  boolean
 20314    31   364    20    31   509     0     111  isDirect
 20315    31   364    28    31   509     0      59  (
 20316    31   364    29    31   509     0      60  )
 20317    31   364    31    31   509     0      63  {
 20318    31   365     9    31   509     0      19  return
 20319    31   365    16    31   509     0      52  true
 20320    31   365    20    31   509     1     102  ;
 20321    31   366     5    31   509     1      64  }
 20322    31   366     5    31   509     0    1266  ENDMETHOD
 20323    31   366     5    31   510     0    1267  STARTMETHOD
 20324    31   368     5    31   510     0      10  public
 20325    31   368    12    31   510     0      39  boolean
 20326    31   368    20    31   510     0     111  isReadOnly
 20327    31   368    30    31   510     0      59  (
 20328    31   368    31    31   510     0      60  )
 20329    31   368    33    31   510     0      63  {
 20330    31   369     9    31   510     0      19  return
 20331    31   369    16    31   510     0      43  false
 20332    31   369    21    31   510     1     102  ;
 20333    31   370     5    31   510     1      64  }
 20334    31   370     5    31   510     0    1268  ENDMETHOD
 20335    31   370     5    31   511     0    1269  STARTMETHOD
 20336    31   433     5    31   511     0       9  byte
 20337    31   433    10    31   511     0     111  _get
 20338    31   433    14    31   511     0      59  (
 20339    31   433    15    31   511     0      36  int
 20340    31   433    19    31   511     0     111  i
 20341    31   433    20    31   511     0      60  )
 20342    31   433    22    31   511     0      63  {
 20343    31   434     9    31   511     0      19  return
 20344    31   434    16    31   511     0     111  unsafe.getByte
 20345    31   434    30    31   511     0      59  (
 20346    31   434    31    31   511     0     111  address
 20347    31   434    39    31   511     0      74  +
 20348    31   434    41    31   511     0     111  i
 20349    31   434    42    31   511     0      60  )
 20350    31   434    43    31   511     0     102  ;
 20351    31   435     5    31   511     0      64  }
 20352    31   435     5    31   511     0    1270  ENDMETHOD
 20353    31   435     5    31   512     0    1271  STARTMETHOD
 20354    31   437     5    31   512     0      50  void
 20355    31   437    10    31   512     0     111  _put
 20356    31   437    14    31   512     0      59  (
 20357    31   437    15    31   512     0      36  int
 20358    31   437    19    31   512     0     111  i
 20359    31   437    20    31   512     0      66  ,
 20360    31   437    22    31   512     0       9  byte
 20361    31   437    27    31   512     0     111  b
 20362    31   437    28    31   512     0      60  )
 20363    31   437    30    31   512     0      63  {
 20364    31   439     9    31   512     0     111  unsafe.putByte
 20365    31   439    23    31   512     0      59  (
 20366    31   439    24    31   512     0     111  address
 20367    31   439    32    31   512     0      74  +
 20368    31   439    34    31   512     0     111  i
 20369    31   439    35    31   512     0      66  ,
 20370    31   439    37    31   512     0     111  b
 20371    31   439    38    31   512     0      60  )
 20372    31   439    39    31   512     0     102  ;
 20373    31   443     5    31   512     0      64  }
 20374    31   443     5    31   512     0    1272  ENDMETHOD
 20375    31   443     5    31   513     0    1273  STARTMETHOD
 20376    31   448     5    31   513     0      41  private
 20377    31   448    13    31   513     0      40  char
 20378    31   448    18    31   513     0     111  getChar
 20379    31   448    25    31   513     0      59  (
 20380    31   448    26    31   513     0      53  long
 20381    31   448    31    31   513     0     111  a
 20382    31   448    32    31   513     0      60  )
 20383    31   448    34    31   513     0      63  {
 20384    31   449     9    31   513     0      31  if
 20385    31   449    12    31   513     0      59  (
 20386    31   449    13    31   513     0     111  unaligned
 20387    31   449    22    31   513     0      60  )
 20388    31   449    24    31   513     0      63  {
 20389    31   450    13    31   513     0      40  char
 20390    31   450    18    31   513     0     111  x
 20391    31   450    20    31   513     0      67  =
 20392    31   450    22    31   513     0     111  unsafe.getChar
 20393    31   450    36    31   513     0      59  (
 20394    31   450    37    31   513     0     111  a
 20395    31   450    38    31   513     0      60  )
 20396    31   450    39    31   513     0     102  ;
 20397    31   451    13    31   513     0      19  return
 20398    31   451    20    31   513     0      59  (
 20399    31   451    21    31   513     0     111  nativeByteOrder
 20400    31   451    37    31   513     0      58  ?
 20401    31   451    39    31   513     0     111  x
 20402    31   451    41    31   513     0      65  :
 20403    31   451    43    31   513     0     111  Bits.swap
 20404    31   451    52    31   513     0      59  (
 20405    31   451    53    31   513     0     111  x
 20406    31   451    54    31   513     0      60  )
 20407    31   451    55    31   513     0      60  )
 20408    31   451    56    31   513     0     102  ;
 20409    31   452     9    31   513     0      64  }
 20410    31   453     9    31   513     0      19  return
 20411    31   453    16    31   513     0     111  Bits.getChar
 20412    31   453    28    31   513     0      59  (
 20413    31   453    29    31   513     0     111  a
 20414    31   453    30    31   513     0      66  ,
 20415    31   453    32    31   513     0     111  bigEndian
 20416    31   453    41    31   513     0      60  )
 20417    31   453    42    31   513     0     102  ;
 20418    31   454     5    31   513     0      64  }
 20419    31   454     5    31   513     0    1274  ENDMETHOD
 20420    31   454     5    31   514     0    1275  STARTMETHOD
 20421    31   456     5    31   514     0      10  public
 20422    31   456    12    31   514     0      40  char
 20423    31   456    17    31   514     0     111  getChar
 20424    31   456    24    31   514     0      59  (
 20425    31   456    25    31   514     0      60  )
 20426    31   456    27    31   514     0      63  {
 20427    31   457     9    31   514     0      19  return
 20428    31   457    16    31   514     0     111  getChar
 20429    31   457    23    31   514     0      59  (
 20430    31   457    24    31   514     0     111  ix
 20431    31   457    26    31   514     0      59  (
 20432    31   457    27    31   514     0     111  nextGetIndex
 20433    31   457    39    31   514     0      59  (
 20434    31   457    40    31   514     0      59  (
 20435    31   457    41    31   514     0     112  1
 20436    31   457    43    31   514     0      90  <<
 20437    31   457    46    31   514     0     112  1
 20438    31   457    47    31   514     0      60  )
 20439    31   457    48    31   514     0      60  )
 20440    31   457    49    31   514     0      60  )
 20441    31   457    50    31   514     0      60  )
 20442    31   457    51    31   514     0     102  ;
 20443    31   458     5    31   514     0      64  }
 20444    31   458     5    31   514     0    1276  ENDMETHOD
 20445    31   458     5    31   515     0    1277  STARTMETHOD
 20446    31   460     5    31   515     0      10  public
 20447    31   460    12    31   515     0      40  char
 20448    31   460    17    31   515     0     111  getChar
 20449    31   460    24    31   515     0      59  (
 20450    31   460    25    31   515     0      36  int
 20451    31   460    29    31   515     0     111  i
 20452    31   460    30    31   515     0      60  )
 20453    31   460    32    31   515     0      63  {
 20454    31   461     9    31   515     0      19  return
 20455    31   461    16    31   515     0     111  getChar
 20456    31   461    23    31   515     0      59  (
 20457    31   461    24    31   515     0     111  ix
 20458    31   461    26    31   515     0      59  (
 20459    31   461    27    31   515     0     111  checkIndex
 20460    31   461    37    31   515     0      59  (
 20461    31   461    38    31   515     0     111  i
 20462    31   461    39    31   515     0      66  ,
 20463    31   461    41    31   515     0      59  (
 20464    31   461    42    31   515     0     112  1
 20465    31   461    44    31   515     0      90  <<
 20466    31   461    47    31   515     0     112  1
 20467    31   461    48    31   515     0      60  )
 20468    31   461    49    31   515     0      60  )
 20469    31   461    50    31   515     0      60  )
 20470    31   461    51    31   515     0      60  )
 20471    31   461    52    31   515     0     102  ;
 20472    31   462     5    31   515     0      64  }
 20473    31   462     5    31   515     0    1278  ENDMETHOD
 20474    31   462     5    31   516     0    1279  STARTMETHOD
 20475    31   466     5    31   516     0      41  private
 20476    31   466    13    31   516     0     111  ByteBuffer
 20477    31   466    24    31   516     0     111  putChar
 20478    31   466    31    31   516     0      59  (
 20479    31   466    32    31   516     0      53  long
 20480    31   466    37    31   516     0     111  a
 20481    31   466    38    31   516     0      66  ,
 20482    31   466    40    31   516     0      40  char
 20483    31   466    45    31   516     0     111  x
 20484    31   466    46    31   516     0      60  )
 20485    31   466    48    31   516     0      63  {
 20486    31   468     9    31   516     0      31  if
 20487    31   468    12    31   516     0      59  (
 20488    31   468    13    31   516     0     111  unaligned
 20489    31   468    22    31   516     0      60  )
 20490    31   468    24    31   516     0      63  {
 20491    31   469    13    31   516     0      40  char
 20492    31   469    18    31   516     0     111  y
 20493    31   469    20    31   516     0      67  =
 20494    31   469    22    31   516     0      59  (
 20495    31   469    23    31   516     0     111  x
 20496    31   469    24    31   516     0      60  )
 20497    31   469    25    31   516     0     102  ;
 20498    31   470    13    31   516     0     111  unsafe.putChar
 20499    31   470    27    31   516     0      59  (
 20500    31   470    28    31   516     0     111  a
 20501    31   470    29    31   516     0      66  ,
 20502    31   470    31    31   516     0      59  (
 20503    31   470    32    31   516     0     111  nativeByteOrder
 20504    31   470    48    31   516     0      58  ?
 20505    31   470    50    31   516     0     111  y
 20506    31   470    52    31   516     0      65  :
 20507    31   470    54    31   516     0     111  Bits.swap
 20508    31   470    63    31   516     0      59  (
 20509    31   470    64    31   516     0     111  y
 20510    31   470    65    31   516     0      60  )
 20511    31   470    66    31   516     0      60  )
 20512    31   470    67    31   516     0      60  )
 20513    31   470    68    31   516     0     102  ;
 20514    31   471     9    31   516     0      64  }
 20515    31   471    11    31   516     0      48  else
 20516    31   471    16    31   516     0      63  {
 20517    31   472    13    31   516     0     111  Bits.putChar
 20518    31   472    25    31   516     0      59  (
 20519    31   472    26    31   516     0     111  a
 20520    31   472    27    31   516     0      66  ,
 20521    31   472    29    31   516     0     111  x
 20522    31   472    30    31   516     0      66  ,
 20523    31   472    32    31   516     0     111  bigEndian
 20524    31   472    41    31   516     0      60  )
 20525    31   472    42    31   516     0     102  ;
 20526    31   473     9    31   516     0      64  }
 20527    31   474     9    31   516     0      19  return
 20528    31   474    16    31   516     0      44  this
 20529    31   474    20    31   516     0     102  ;
 20530    31   478     5    31   516     0      64  }
 20531    31   478     5    31   516     0    1280  ENDMETHOD
 20532    31   478     5    31   517     0    1281  STARTMETHOD
 20533    31   480     5    31   517     0      10  public
 20534    31   480    12    31   517     0     111  ByteBuffer
 20535    31   480    23    31   517     0     111  putChar
 20536    31   480    30    31   517     0      59  (
 20537    31   480    31    31   517     0      40  char
 20538    31   480    36    31   517     0     111  x
 20539    31   480    37    31   517     0      60  )
 20540    31   480    39    31   517     0      63  {
 20541    31   482     9    31   517     0     111  putChar
 20542    31   482    16    31   517     0      59  (
 20543    31   482    17    31   517     0     111  ix
 20544    31   482    19    31   517     0      59  (
 20545    31   482    20    31   517     0     111  nextPutIndex
 20546    31   482    32    31   517     0      59  (
 20547    31   482    33    31   517     0      59  (
 20548    31   482    34    31   517     0     112  1
 20549    31   482    36    31   517     0      90  <<
 20550    31   482    39    31   517     0     112  1
 20551    31   482    40    31   517     0      60  )
 20552    31   482    41    31   517     0      60  )
 20553    31   482    42    31   517     0      60  )
 20554    31   482    43    31   517     0      66  ,
 20555    31   482    45    31   517     0     111  x
 20556    31   482    46    31   517     0      60  )
 20557    31   482    47    31   517     0     102  ;
 20558    31   483     9    31   517     0      19  return
 20559    31   483    16    31   517     0      44  this
 20560    31   483    20    31   517     0     102  ;
 20561    31   487     5    31   517     0      64  }
 20562    31   487     5    31   517     0    1282  ENDMETHOD
 20563    31   487     5    31   518     0    1283  STARTMETHOD
 20564    31   489     5    31   518     0      10  public
 20565    31   489    12    31   518     0     111  ByteBuffer
 20566    31   489    23    31   518     0     111  putChar
 20567    31   489    30    31   518     0      59  (
 20568    31   489    31    31   518     0      36  int
 20569    31   489    35    31   518     0     111  i
 20570    31   489    36    31   518     0      66  ,
 20571    31   489    38    31   518     0      40  char
 20572    31   489    43    31   518     0     111  x
 20573    31   489    44    31   518     0      60  )
 20574    31   489    46    31   518     0      63  {
 20575    31   491     9    31   518     0     111  putChar
 20576    31   491    16    31   518     0      59  (
 20577    31   491    17    31   518     0     111  ix
 20578    31   491    19    31   518     0      59  (
 20579    31   491    20    31   518     0     111  checkIndex
 20580    31   491    30    31   518     0      59  (
 20581    31   491    31    31   518     0     111  i
 20582    31   491    32    31   518     0      66  ,
 20583    31   491    34    31   518     0      59  (
 20584    31   491    35    31   518     0     112  1
 20585    31   491    37    31   518     0      90  <<
 20586    31   491    40    31   518     0     112  1
 20587    31   491    41    31   518     0      60  )
 20588    31   491    42    31   518     0      60  )
 20589    31   491    43    31   518     0      60  )
 20590    31   491    44    31   518     0      66  ,
 20591    31   491    46    31   518     0     111  x
 20592    31   491    47    31   518     0      60  )
 20593    31   491    48    31   518     0     102  ;
 20594    31   492     9    31   518     0      19  return
 20595    31   492    16    31   518     0      44  this
 20596    31   492    20    31   518     0     102  ;
 20597    31   496     5    31   518     0      64  }
 20598    31   496     5    31   518     0    1284  ENDMETHOD
 20599    31   496     5    31   519     0    1285  STARTMETHOD
 20600    31   498     5    31   519     0      10  public
 20601    31   498    12    31   519     0     111  CharBuffer
 20602    31   498    23    31   519     0     111  asCharBuffer
 20603    31   498    35    31   519     0      59  (
 20604    31   498    36    31   519     0      60  )
 20605    31   498    38    31   519     0      63  {
 20606    31   499     9    31   519     1      36  int
 20607    31   499    13    31   519     1     111  off
 20608    31   499    17    31   519     1      67  =
 20609    31   499    19    31   519     1     111  this.position
 20610    31   499    32    31   519     1      59  (
 20611    31   499    33    31   519     1      60  )
 20612    31   499    34    31   519     1     102  ;
 20613    31   500     9    31   519     1      36  int
 20614    31   500    13    31   519     1     111  lim
 20615    31   500    17    31   519     1      67  =
 20616    31   500    19    31   519     1     111  this.limit
 20617    31   500    29    31   519     1      59  (
 20618    31   500    30    31   519     1      60  )
 20619    31   500    31    31   519     1     102  ;
 20620    31   501     9    31   519     0     111  assert
 20621    31   501    16    31   519     0      59  (
 20622    31   501    17    31   519     0     111  off
 20623    31   501    21    31   519     0      92  <=
 20624    31   501    24    31   519     0     111  lim
 20625    31   501    27    31   519     0      60  )
 20626    31   501    28    31   519     0     102  ;
 20627    31   502     9    31   519     0      36  int
 20628    31   502    13    31   519     0     111  rem
 20629    31   502    17    31   519     0      67  =
 20630    31   502    19    31   519     0      59  (
 20631    31   502    20    31   519     0     111  off
 20632    31   502    24    31   519     0      92  <=
 20633    31   502    27    31   519     0     111  lim
 20634    31   502    31    31   519     0      58  ?
 20635    31   502    33    31   519     0     111  lim
 20636    31   502    37    31   519     0      77  -
 20637    31   502    39    31   519     0     111  off
 20638    31   502    43    31   519     0      65  :
 20639    31   502    45    31   519     0     112  0
 20640    31   502    46    31   519     0      60  )
 20641    31   502    47    31   519     0     102  ;
 20642    31   504     9    31   519     0      36  int
 20643    31   504    13    31   519     0     111  size
 20644    31   504    18    31   519     0      67  =
 20645    31   504    20    31   519     0     111  rem
 20646    31   504    24    31   519     0      84  >>
 20647    31   504    27    31   519     0     112  1
 20648    31   504    28    31   519     0     102  ;
 20649    31   505     9    31   519     0      31  if
 20650    31   505    12    31   519     0      59  (
 20651    31   505    13    31   519     0      69  !
 20652    31   505    14    31   519     0     111  unaligned
 20653    31   505    24    31   519     0     101  &&
 20654    31   505    27    31   519     0      59  (
 20655    31   505    28    31   519     0      59  (
 20656    31   505    29    31   519     0     111  address
 20657    31   505    37    31   519     0      74  +
 20658    31   505    39    31   519     0     111  off
 20659    31   505    42    31   519     0      60  )
 20660    31   505    44    31   519     0      82  %
 20661    31   505    46    31   519     0      59  (
 20662    31   505    47    31   519     0     112  1
 20663    31   505    49    31   519     0      90  <<
 20664    31   505    52    31   519     0     112  1
 20665    31   505    53    31   519     0      60  )
 20666    31   505    55    31   519     0      71  !=
 20667    31   505    58    31   519     0     112  0
 20668    31   505    59    31   519     0      60  )
 20669    31   505    60    31   519     0      60  )
 20670    31   505    62    31   519     0      63  {
 20671    31   506    13    31   519     0      19  return
 20672    31   506    20    31   519     0      59  (
 20673    31   506    21    31   519     0     111  bigEndian
 20674    31   507    21    31   519     0      58  ?
 20675    31   507    23    31   519     0      59  (
 20676    31   507    24    31   519     0     111  CharBuffer
 20677    31   507    34    31   519     0      60  )
 20678    31   507    35    31   519     0      59  (
 20679    31   507    36    31   519     0      15  new
 20680    31   507    40    31   519     0     111  ByteBufferAsCharBufferB
 20681    31   507    63    31   519     0      59  (
 20682    31   507    64    31   519     0      44  this
 20683    31   507    68    31   519     0      66  ,
 20684    31   508    72    31   519     0      77  -
 20685    31   508    73    31   519     0     112  1
 20686    31   508    74    31   519     0      66  ,
 20687    31   509    72    31   519     0     112  0
 20688    31   509    73    31   519     0      66  ,
 20689    31   510    72    31   519     1     111  size
 20690    31   510    76    31   519     1      66  ,
 20691    31   511    72    31   519     1     111  size
 20692    31   511    76    31   519     1      66  ,
 20693    31   512    72    31   519     0     111  off
 20694    31   512    75    31   519     0      60  )
 20695    31   512    76    31   519     0      60  )
 20696    31   513    21    31   519     0      65  :
 20697    31   513    23    31   519     0      59  (
 20698    31   513    24    31   519     0     111  CharBuffer
 20699    31   513    34    31   519     0      60  )
 20700    31   513    35    31   519     0      59  (
 20701    31   513    36    31   519     0      15  new
 20702    31   513    40    31   519     0     111  ByteBufferAsCharBufferL
 20703    31   513    63    31   519     0      59  (
 20704    31   513    64    31   519     0      44  this
 20705    31   513    68    31   519     0      66  ,
 20706    31   514    72    31   519     0      77  -
 20707    31   514    73    31   519     0     112  1
 20708    31   514    74    31   519     0      66  ,
 20709    31   515    72    31   519     0     112  0
 20710    31   515    73    31   519     0      66  ,
 20711    31   516    72    31   519     1     111  size
 20712    31   516    76    31   519     1      66  ,
 20713    31   517    72    31   519     1     111  size
 20714    31   517    76    31   519     1      66  ,
 20715    31   518    72    31   519     0     111  off
 20716    31   518    75    31   519     0      60  )
 20717    31   518    76    31   519     0      60  )
 20718    31   518    77    31   519     0      60  )
 20719    31   518    78    31   519     0     102  ;
 20720    31   519     9    31   519     0      64  }
 20721    31   519    11    31   519     0      48  else
 20722    31   519    16    31   519     0      63  {
 20723    31   520    13    31   519     0      19  return
 20724    31   520    20    31   519     0      59  (
 20725    31   520    21    31   519     0     111  nativeByteOrder
 20726    31   521    21    31   519     0      58  ?
 20727    31   521    23    31   519     0      59  (
 20728    31   521    24    31   519     0     111  CharBuffer
 20729    31   521    34    31   519     0      60  )
 20730    31   521    35    31   519     0      59  (
 20731    31   521    36    31   519     0      15  new
 20732    31   521    40    31   519     0     111  DirectCharBufferU
 20733    31   521    57    31   519     0      59  (
 20734    31   521    58    31   519     0      44  this
 20735    31   521    62    31   519     0      66  ,
 20736    31   522    66    31   519     0      77  -
 20737    31   522    67    31   519     0     112  1
 20738    31   522    68    31   519     0      66  ,
 20739    31   523    66    31   519     0     112  0
 20740    31   523    67    31   519     0      66  ,
 20741    31   524    66    31   519     1     111  size
 20742    31   524    70    31   519     1      66  ,
 20743    31   525    66    31   519     1     111  size
 20744    31   525    70    31   519     1      66  ,
 20745    31   526    66    31   519     0     111  off
 20746    31   526    69    31   519     0      60  )
 20747    31   526    70    31   519     0      60  )
 20748    31   527    21    31   519     0      65  :
 20749    31   527    23    31   519     0      59  (
 20750    31   527    24    31   519     0     111  CharBuffer
 20751    31   527    34    31   519     0      60  )
 20752    31   527    35    31   519     0      59  (
 20753    31   527    36    31   519     0      15  new
 20754    31   527    40    31   519     0     111  DirectCharBufferS
 20755    31   527    57    31   519     0      59  (
 20756    31   527    58    31   519     0      44  this
 20757    31   527    62    31   519     0      66  ,
 20758    31   528    66    31   519     0      77  -
 20759    31   528    67    31   519     0     112  1
 20760    31   528    68    31   519     0      66  ,
 20761    31   529    66    31   519     0     112  0
 20762    31   529    67    31   519     0      66  ,
 20763    31   530    66    31   519     1     111  size
 20764    31   530    70    31   519     1      66  ,
 20765    31   531    66    31   519     1     111  size
 20766    31   531    70    31   519     1      66  ,
 20767    31   532    66    31   519     0     111  off
 20768    31   532    69    31   519     0      60  )
 20769    31   532    70    31   519     0      60  )
 20770    31   532    71    31   519     0      60  )
 20771    31   532    72    31   519     0     102  ;
 20772    31   533     9    31   519     0      64  }
 20773    31   534     5    31   519     0      64  }
 20774    31   534     5    31   519     0    1286  ENDMETHOD
 20775    31   534     5    31   520     0    1287  STARTMETHOD
 20776    31   539     5    31   520     0      41  private
 20777    31   539    13    31   520     0      12  short
 20778    31   539    19    31   520     0     111  getShort
 20779    31   539    27    31   520     0      59  (
 20780    31   539    28    31   520     0      53  long
 20781    31   539    33    31   520     0     111  a
 20782    31   539    34    31   520     0      60  )
 20783    31   539    36    31   520     0      63  {
 20784    31   540     9    31   520     0      31  if
 20785    31   540    12    31   520     0      59  (
 20786    31   540    13    31   520     0     111  unaligned
 20787    31   540    22    31   520     0      60  )
 20788    31   540    24    31   520     0      63  {
 20789    31   541    13    31   520     0      12  short
 20790    31   541    19    31   520     0     111  x
 20791    31   541    21    31   520     0      67  =
 20792    31   541    23    31   520     0     111  unsafe.getShort
 20793    31   541    38    31   520     0      59  (
 20794    31   541    39    31   520     0     111  a
 20795    31   541    40    31   520     0      60  )
 20796    31   541    41    31   520     0     102  ;
 20797    31   542    13    31   520     0      19  return
 20798    31   542    20    31   520     0      59  (
 20799    31   542    21    31   520     0     111  nativeByteOrder
 20800    31   542    37    31   520     0      58  ?
 20801    31   542    39    31   520     0     111  x
 20802    31   542    41    31   520     0      65  :
 20803    31   542    43    31   520     0     111  Bits.swap
 20804    31   542    52    31   520     0      59  (
 20805    31   542    53    31   520     0     111  x
 20806    31   542    54    31   520     0      60  )
 20807    31   542    55    31   520     0      60  )
 20808    31   542    56    31   520     0     102  ;
 20809    31   543     9    31   520     0      64  }
 20810    31   544     9    31   520     0      19  return
 20811    31   544    16    31   520     0     111  Bits.getShort
 20812    31   544    29    31   520     0      59  (
 20813    31   544    30    31   520     0     111  a
 20814    31   544    31    31   520     0      66  ,
 20815    31   544    33    31   520     0     111  bigEndian
 20816    31   544    42    31   520     0      60  )
 20817    31   544    43    31   520     0     102  ;
 20818    31   545     5    31   520     0      64  }
 20819    31   545     5    31   520     0    1288  ENDMETHOD
 20820    31   545     5    31   521     0    1289  STARTMETHOD
 20821    31   547     5    31   521     0      10  public
 20822    31   547    12    31   521     0      12  short
 20823    31   547    18    31   521     0     111  getShort
 20824    31   547    26    31   521     0      59  (
 20825    31   547    27    31   521     0      60  )
 20826    31   547    29    31   521     0      63  {
 20827    31   548     9    31   521     0      19  return
 20828    31   548    16    31   521     0     111  getShort
 20829    31   548    24    31   521     0      59  (
 20830    31   548    25    31   521     0     111  ix
 20831    31   548    27    31   521     0      59  (
 20832    31   548    28    31   521     0     111  nextGetIndex
 20833    31   548    40    31   521     0      59  (
 20834    31   548    41    31   521     0      59  (
 20835    31   548    42    31   521     0     112  1
 20836    31   548    44    31   521     0      90  <<
 20837    31   548    47    31   521     0     112  1
 20838    31   548    48    31   521     0      60  )
 20839    31   548    49    31   521     0      60  )
 20840    31   548    50    31   521     0      60  )
 20841    31   548    51    31   521     0      60  )
 20842    31   548    52    31   521     0     102  ;
 20843    31   549     5    31   521     0      64  }
 20844    31   549     5    31   521     0    1290  ENDMETHOD
 20845    31   549     5    31   522     0    1291  STARTMETHOD
 20846    31   551     5    31   522     0      10  public
 20847    31   551    12    31   522     0      12  short
 20848    31   551    18    31   522     0     111  getShort
 20849    31   551    26    31   522     0      59  (
 20850    31   551    27    31   522     0      36  int
 20851    31   551    31    31   522     0     111  i
 20852    31   551    32    31   522     0      60  )
 20853    31   551    34    31   522     0      63  {
 20854    31   552     9    31   522     0      19  return
 20855    31   552    16    31   522     0     111  getShort
 20856    31   552    24    31   522     0      59  (
 20857    31   552    25    31   522     0     111  ix
 20858    31   552    27    31   522     0      59  (
 20859    31   552    28    31   522     0     111  checkIndex
 20860    31   552    38    31   522     0      59  (
 20861    31   552    39    31   522     0     111  i
 20862    31   552    40    31   522     0      66  ,
 20863    31   552    42    31   522     0      59  (
 20864    31   552    43    31   522     0     112  1
 20865    31   552    45    31   522     0      90  <<
 20866    31   552    48    31   522     0     112  1
 20867    31   552    49    31   522     0      60  )
 20868    31   552    50    31   522     0      60  )
 20869    31   552    51    31   522     0      60  )
 20870    31   552    52    31   522     0      60  )
 20871    31   552    53    31   522     0     102  ;
 20872    31   553     5    31   522     0      64  }
 20873    31   553     5    31   522     0    1292  ENDMETHOD
 20874    31   553     5    31   523     0    1293  STARTMETHOD
 20875    31   557     5    31   523     0      41  private
 20876    31   557    13    31   523     0     111  ByteBuffer
 20877    31   557    24    31   523     0     111  putShort
 20878    31   557    32    31   523     0      59  (
 20879    31   557    33    31   523     0      53  long
 20880    31   557    38    31   523     0     111  a
 20881    31   557    39    31   523     0      66  ,
 20882    31   557    41    31   523     0      12  short
 20883    31   557    47    31   523     0     111  x
 20884    31   557    48    31   523     0      60  )
 20885    31   557    50    31   523     0      63  {
 20886    31   559     9    31   523     0      31  if
 20887    31   559    12    31   523     0      59  (
 20888    31   559    13    31   523     0     111  unaligned
 20889    31   559    22    31   523     0      60  )
 20890    31   559    24    31   523     0      63  {
 20891    31   560    13    31   523     0      12  short
 20892    31   560    19    31   523     0     111  y
 20893    31   560    21    31   523     0      67  =
 20894    31   560    23    31   523     0      59  (
 20895    31   560    24    31   523     0     111  x
 20896    31   560    25    31   523     0      60  )
 20897    31   560    26    31   523     0     102  ;
 20898    31   561    13    31   523     0     111  unsafe.putShort
 20899    31   561    28    31   523     0      59  (
 20900    31   561    29    31   523     0     111  a
 20901    31   561    30    31   523     0      66  ,
 20902    31   561    32    31   523     0      59  (
 20903    31   561    33    31   523     0     111  nativeByteOrder
 20904    31   561    49    31   523     0      58  ?
 20905    31   561    51    31   523     0     111  y
 20906    31   561    53    31   523     0      65  :
 20907    31   561    55    31   523     0     111  Bits.swap
 20908    31   561    64    31   523     0      59  (
 20909    31   561    65    31   523     0     111  y
 20910    31   561    66    31   523     0      60  )
 20911    31   561    67    31   523     0      60  )
 20912    31   561    68    31   523     0      60  )
 20913    31   561    69    31   523     0     102  ;
 20914    31   562     9    31   523     0      64  }
 20915    31   562    11    31   523     0      48  else
 20916    31   562    16    31   523     0      63  {
 20917    31   563    13    31   523     0     111  Bits.putShort
 20918    31   563    26    31   523     0      59  (
 20919    31   563    27    31   523     0     111  a
 20920    31   563    28    31   523     0      66  ,
 20921    31   563    30    31   523     0     111  x
 20922    31   563    31    31   523     0      66  ,
 20923    31   563    33    31   523     0     111  bigEndian
 20924    31   563    42    31   523     0      60  )
 20925    31   563    43    31   523     0     102  ;
 20926    31   564     9    31   523     0      64  }
 20927    31   565     9    31   523     0      19  return
 20928    31   565    16    31   523     0      44  this
 20929    31   565    20    31   523     0     102  ;
 20930    31   569     5    31   523     0      64  }
 20931    31   569     5    31   523     0    1294  ENDMETHOD
 20932    31   569     5    31   524     0    1295  STARTMETHOD
 20933    31   571     5    31   524     0      10  public
 20934    31   571    12    31   524     0     111  ByteBuffer
 20935    31   571    23    31   524     0     111  putShort
 20936    31   571    31    31   524     0      59  (
 20937    31   571    32    31   524     0      12  short
 20938    31   571    38    31   524     0     111  x
 20939    31   571    39    31   524     0      60  )
 20940    31   571    41    31   524     0      63  {
 20941    31   573     9    31   524     0     111  putShort
 20942    31   573    17    31   524     0      59  (
 20943    31   573    18    31   524     0     111  ix
 20944    31   573    20    31   524     0      59  (
 20945    31   573    21    31   524     0     111  nextPutIndex
 20946    31   573    33    31   524     0      59  (
 20947    31   573    34    31   524     0      59  (
 20948    31   573    35    31   524     0     112  1
 20949    31   573    37    31   524     0      90  <<
 20950    31   573    40    31   524     0     112  1
 20951    31   573    41    31   524     0      60  )
 20952    31   573    42    31   524     0      60  )
 20953    31   573    43    31   524     0      60  )
 20954    31   573    44    31   524     0      66  ,
 20955    31   573    46    31   524     0     111  x
 20956    31   573    47    31   524     0      60  )
 20957    31   573    48    31   524     0     102  ;
 20958    31   574     9    31   524     0      19  return
 20959    31   574    16    31   524     0      44  this
 20960    31   574    20    31   524     0     102  ;
 20961    31   578     5    31   524     0      64  }
 20962    31   578     5    31   524     0    1296  ENDMETHOD
 20963    31   578     5    31   525     0    1297  STARTMETHOD
 20964    31   580     5    31   525     0      10  public
 20965    31   580    12    31   525     0     111  ByteBuffer
 20966    31   580    23    31   525     0     111  putShort
 20967    31   580    31    31   525     0      59  (
 20968    31   580    32    31   525     0      36  int
 20969    31   580    36    31   525     0     111  i
 20970    31   580    37    31   525     0      66  ,
 20971    31   580    39    31   525     0      12  short
 20972    31   580    45    31   525     0     111  x
 20973    31   580    46    31   525     0      60  )
 20974    31   580    48    31   525     0      63  {
 20975    31   582     9    31   525     0     111  putShort
 20976    31   582    17    31   525     0      59  (
 20977    31   582    18    31   525     0     111  ix
 20978    31   582    20    31   525     0      59  (
 20979    31   582    21    31   525     0     111  checkIndex
 20980    31   582    31    31   525     0      59  (
 20981    31   582    32    31   525     0     111  i
 20982    31   582    33    31   525     0      66  ,
 20983    31   582    35    31   525     0      59  (
 20984    31   582    36    31   525     0     112  1
 20985    31   582    38    31   525     0      90  <<
 20986    31   582    41    31   525     0     112  1
 20987    31   582    42    31   525     0      60  )
 20988    31   582    43    31   525     0      60  )
 20989    31   582    44    31   525     0      60  )
 20990    31   582    45    31   525     0      66  ,
 20991    31   582    47    31   525     0     111  x
 20992    31   582    48    31   525     0      60  )
 20993    31   582    49    31   525     0     102  ;
 20994    31   583     9    31   525     0      19  return
 20995    31   583    16    31   525     0      44  this
 20996    31   583    20    31   525     0     102  ;
 20997    31   587     5    31   525     0      64  }
 20998    31   587     5    31   525     0    1298  ENDMETHOD
 20999    31   587     5    31   526     0    1299  STARTMETHOD
 21000    31   589     5    31   526     0      10  public
 21001    31   589    12    31   526     0     111  ShortBuffer
 21002    31   589    24    31   526     0     111  asShortBuffer
 21003    31   589    37    31   526     0      59  (
 21004    31   589    38    31   526     0      60  )
 21005    31   589    40    31   526     0      63  {
 21006    31   590     9    31   526     1      36  int
 21007    31   590    13    31   526     1     111  off
 21008    31   590    17    31   526     1      67  =
 21009    31   590    19    31   526     1     111  this.position
 21010    31   590    32    31   526     1      59  (
 21011    31   590    33    31   526     1      60  )
 21012    31   590    34    31   526     1     102  ;
 21013    31   591     9    31   526     1      36  int
 21014    31   591    13    31   526     1     111  lim
 21015    31   591    17    31   526     1      67  =
 21016    31   591    19    31   526     1     111  this.limit
 21017    31   591    29    31   526     1      59  (
 21018    31   591    30    31   526     1      60  )
 21019    31   591    31    31   526     1     102  ;
 21020    31   592     9    31   526     0     111  assert
 21021    31   592    16    31   526     0      59  (
 21022    31   592    17    31   526     0     111  off
 21023    31   592    21    31   526     0      92  <=
 21024    31   592    24    31   526     0     111  lim
 21025    31   592    27    31   526     0      60  )
 21026    31   592    28    31   526     0     102  ;
 21027    31   593     9    31   526     0      36  int
 21028    31   593    13    31   526     0     111  rem
 21029    31   593    17    31   526     0      67  =
 21030    31   593    19    31   526     0      59  (
 21031    31   593    20    31   526     0     111  off
 21032    31   593    24    31   526     0      92  <=
 21033    31   593    27    31   526     0     111  lim
 21034    31   593    31    31   526     0      58  ?
 21035    31   593    33    31   526     0     111  lim
 21036    31   593    37    31   526     0      77  -
 21037    31   593    39    31   526     0     111  off
 21038    31   593    43    31   526     0      65  :
 21039    31   593    45    31   526     0     112  0
 21040    31   593    46    31   526     0      60  )
 21041    31   593    47    31   526     0     102  ;
 21042    31   595     9    31   526     0      36  int
 21043    31   595    13    31   526     0     111  size
 21044    31   595    18    31   526     0      67  =
 21045    31   595    20    31   526     0     111  rem
 21046    31   595    24    31   526     0      84  >>
 21047    31   595    27    31   526     0     112  1
 21048    31   595    28    31   526     0     102  ;
 21049    31   596     9    31   526     0      31  if
 21050    31   596    12    31   526     0      59  (
 21051    31   596    13    31   526     0      69  !
 21052    31   596    14    31   526     0     111  unaligned
 21053    31   596    24    31   526     0     101  &&
 21054    31   596    27    31   526     0      59  (
 21055    31   596    28    31   526     0      59  (
 21056    31   596    29    31   526     0     111  address
 21057    31   596    37    31   526     0      74  +
 21058    31   596    39    31   526     0     111  off
 21059    31   596    42    31   526     0      60  )
 21060    31   596    44    31   526     0      82  %
 21061    31   596    46    31   526     0      59  (
 21062    31   596    47    31   526     0     112  1
 21063    31   596    49    31   526     0      90  <<
 21064    31   596    52    31   526     0     112  1
 21065    31   596    53    31   526     0      60  )
 21066    31   596    55    31   526     0      71  !=
 21067    31   596    58    31   526     0     112  0
 21068    31   596    59    31   526     0      60  )
 21069    31   596    60    31   526     0      60  )
 21070    31   596    62    31   526     0      63  {
 21071    31   597    13    31   526     0      19  return
 21072    31   597    20    31   526     0      59  (
 21073    31   597    21    31   526     0     111  bigEndian
 21074    31   598    21    31   526     0      58  ?
 21075    31   598    23    31   526     0      59  (
 21076    31   598    24    31   526     0     111  ShortBuffer
 21077    31   598    35    31   526     0      60  )
 21078    31   598    36    31   526     0      59  (
 21079    31   598    37    31   526     0      15  new
 21080    31   598    41    31   526     0     111  ByteBufferAsShortBufferB
 21081    31   598    65    31   526     0      59  (
 21082    31   598    66    31   526     0      44  this
 21083    31   598    70    31   526     0      66  ,
 21084    31   599    72    31   526     0      77  -
 21085    31   599    73    31   526     0     112  1
 21086    31   599    74    31   526     0      66  ,
 21087    31   600    72    31   526     0     112  0
 21088    31   600    73    31   526     0      66  ,
 21089    31   601    72    31   526     1     111  size
 21090    31   601    76    31   526     1      66  ,
 21091    31   602    72    31   526     1     111  size
 21092    31   602    76    31   526     1      66  ,
 21093    31   603    72    31   526     0     111  off
 21094    31   603    75    31   526     0      60  )
 21095    31   603    76    31   526     0      60  )
 21096    31   604    21    31   526     0      65  :
 21097    31   604    23    31   526     0      59  (
 21098    31   604    24    31   526     0     111  ShortBuffer
 21099    31   604    35    31   526     0      60  )
 21100    31   604    36    31   526     0      59  (
 21101    31   604    37    31   526     0      15  new
 21102    31   604    41    31   526     0     111  ByteBufferAsShortBufferL
 21103    31   604    65    31   526     0      59  (
 21104    31   604    66    31   526     0      44  this
 21105    31   604    70    31   526     0      66  ,
 21106    31   605    72    31   526     0      77  -
 21107    31   605    73    31   526     0     112  1
 21108    31   605    74    31   526     0      66  ,
 21109    31   606    72    31   526     0     112  0
 21110    31   606    73    31   526     0      66  ,
 21111    31   607    72    31   526     1     111  size
 21112    31   607    76    31   526     1      66  ,
 21113    31   608    72    31   526     1     111  size
 21114    31   608    76    31   526     1      66  ,
 21115    31   609    72    31   526     0     111  off
 21116    31   609    75    31   526     0      60  )
 21117    31   609    76    31   526     0      60  )
 21118    31   609    77    31   526     0      60  )
 21119    31   609    78    31   526     0     102  ;
 21120    31   610     9    31   526     0      64  }
 21121    31   610    11    31   526     0      48  else
 21122    31   610    16    31   526     0      63  {
 21123    31   611    13    31   526     0      19  return
 21124    31   611    20    31   526     0      59  (
 21125    31   611    21    31   526     0     111  nativeByteOrder
 21126    31   612    21    31   526     0      58  ?
 21127    31   612    23    31   526     0      59  (
 21128    31   612    24    31   526     0     111  ShortBuffer
 21129    31   612    35    31   526     0      60  )
 21130    31   612    36    31   526     0      59  (
 21131    31   612    37    31   526     0      15  new
 21132    31   612    41    31   526     0     111  DirectShortBufferU
 21133    31   612    59    31   526     0      59  (
 21134    31   612    60    31   526     0      44  this
 21135    31   612    64    31   526     0      66  ,
 21136    31   613    66    31   526     0      77  -
 21137    31   613    67    31   526     0     112  1
 21138    31   613    68    31   526     0      66  ,
 21139    31   614    66    31   526     0     112  0
 21140    31   614    67    31   526     0      66  ,
 21141    31   615    66    31   526     1     111  size
 21142    31   615    70    31   526     1      66  ,
 21143    31   616    66    31   526     1     111  size
 21144    31   616    70    31   526     1      66  ,
 21145    31   617    66    31   526     0     111  off
 21146    31   617    69    31   526     0      60  )
 21147    31   617    70    31   526     0      60  )
 21148    31   618    21    31   526     0      65  :
 21149    31   618    23    31   526     0      59  (
 21150    31   618    24    31   526     0     111  ShortBuffer
 21151    31   618    35    31   526     0      60  )
 21152    31   618    36    31   526     0      59  (
 21153    31   618    37    31   526     0      15  new
 21154    31   618    41    31   526     0     111  DirectShortBufferS
 21155    31   618    59    31   526     0      59  (
 21156    31   618    60    31   526     0      44  this
 21157    31   618    64    31   526     0      66  ,
 21158    31   619    66    31   526     0      77  -
 21159    31   619    67    31   526     0     112  1
 21160    31   619    68    31   526     0      66  ,
 21161    31   620    66    31   526     0     112  0
 21162    31   620    67    31   526     0      66  ,
 21163    31   621    66    31   526     1     111  size
 21164    31   621    70    31   526     1      66  ,
 21165    31   622    66    31   526     1     111  size
 21166    31   622    70    31   526     1      66  ,
 21167    31   623    66    31   526     0     111  off
 21168    31   623    69    31   526     0      60  )
 21169    31   623    70    31   526     0      60  )
 21170    31   623    71    31   526     0      60  )
 21171    31   623    72    31   526     0     102  ;
 21172    31   624     9    31   526     0      64  }
 21173    31   625     5    31   526     0      64  }
 21174    31   625     5    31   526     0    1300  ENDMETHOD
 21175    31   625     5    31   527     0    1301  STARTMETHOD
 21176    31   630     5    31   527     0      41  private
 21177    31   630    13    31   527     0      36  int
 21178    31   630    17    31   527     0     111  getInt
 21179    31   630    23    31   527     0      59  (
 21180    31   630    24    31   527     0      53  long
 21181    31   630    29    31   527     0     111  a
 21182    31   630    30    31   527     0      60  )
 21183    31   630    32    31   527     0      63  {
 21184    31   631     9    31   527     0      31  if
 21185    31   631    12    31   527     0      59  (
 21186    31   631    13    31   527     0     111  unaligned
 21187    31   631    22    31   527     0      60  )
 21188    31   631    24    31   527     0      63  {
 21189    31   632    13    31   527     0      36  int
 21190    31   632    17    31   527     0     111  x
 21191    31   632    19    31   527     0      67  =
 21192    31   632    21    31   527     0     111  unsafe.getInt
 21193    31   632    34    31   527     0      59  (
 21194    31   632    35    31   527     0     111  a
 21195    31   632    36    31   527     0      60  )
 21196    31   632    37    31   527     0     102  ;
 21197    31   633    13    31   527     0      19  return
 21198    31   633    20    31   527     0      59  (
 21199    31   633    21    31   527     0     111  nativeByteOrder
 21200    31   633    37    31   527     0      58  ?
 21201    31   633    39    31   527     0     111  x
 21202    31   633    41    31   527     0      65  :
 21203    31   633    43    31   527     0     111  Bits.swap
 21204    31   633    52    31   527     0      59  (
 21205    31   633    53    31   527     0     111  x
 21206    31   633    54    31   527     0      60  )
 21207    31   633    55    31   527     0      60  )
 21208    31   633    56    31   527     0     102  ;
 21209    31   634     9    31   527     0      64  }
 21210    31   635     9    31   527     0      19  return
 21211    31   635    16    31   527     0     111  Bits.getInt
 21212    31   635    27    31   527     0      59  (
 21213    31   635    28    31   527     0     111  a
 21214    31   635    29    31   527     0      66  ,
 21215    31   635    31    31   527     0     111  bigEndian
 21216    31   635    40    31   527     0      60  )
 21217    31   635    41    31   527     0     102  ;
 21218    31   636     5    31   527     0      64  }
 21219    31   636     5    31   527     0    1302  ENDMETHOD
 21220    31   636     5    31   528     0    1303  STARTMETHOD
 21221    31   638     5    31   528     0      10  public
 21222    31   638    12    31   528     0      36  int
 21223    31   638    16    31   528     0     111  getInt
 21224    31   638    22    31   528     0      59  (
 21225    31   638    23    31   528     0      60  )
 21226    31   638    25    31   528     0      63  {
 21227    31   639     9    31   528     0      19  return
 21228    31   639    16    31   528     0     111  getInt
 21229    31   639    22    31   528     0      59  (
 21230    31   639    23    31   528     0     111  ix
 21231    31   639    25    31   528     0      59  (
 21232    31   639    26    31   528     0     111  nextGetIndex
 21233    31   639    38    31   528     0      59  (
 21234    31   639    39    31   528     0      59  (
 21235    31   639    40    31   528     0     112  1
 21236    31   639    42    31   528     0      90  <<
 21237    31   639    45    31   528     0     112  2
 21238    31   639    46    31   528     0      60  )
 21239    31   639    47    31   528     0      60  )
 21240    31   639    48    31   528     0      60  )
 21241    31   639    49    31   528     0      60  )
 21242    31   639    50    31   528     0     102  ;
 21243    31   640     5    31   528     0      64  }
 21244    31   640     5    31   528     0    1304  ENDMETHOD
 21245    31   640     5    31   529     0    1305  STARTMETHOD
 21246    31   642     5    31   529     0      10  public
 21247    31   642    12    31   529     0      36  int
 21248    31   642    16    31   529     0     111  getInt
 21249    31   642    22    31   529     0      59  (
 21250    31   642    23    31   529     0      36  int
 21251    31   642    27    31   529     0     111  i
 21252    31   642    28    31   529     0      60  )
 21253    31   642    30    31   529     0      63  {
 21254    31   643     9    31   529     0      19  return
 21255    31   643    16    31   529     0     111  getInt
 21256    31   643    22    31   529     0      59  (
 21257    31   643    23    31   529     0     111  ix
 21258    31   643    25    31   529     0      59  (
 21259    31   643    26    31   529     0     111  checkIndex
 21260    31   643    36    31   529     0      59  (
 21261    31   643    37    31   529     0     111  i
 21262    31   643    38    31   529     0      66  ,
 21263    31   643    40    31   529     0      59  (
 21264    31   643    41    31   529     0     112  1
 21265    31   643    43    31   529     0      90  <<
 21266    31   643    46    31   529     0     112  2
 21267    31   643    47    31   529     0      60  )
 21268    31   643    48    31   529     0      60  )
 21269    31   643    49    31   529     0      60  )
 21270    31   643    50    31   529     0      60  )
 21271    31   643    51    31   529     0     102  ;
 21272    31   644     5    31   529     0      64  }
 21273    31   644     5    31   529     0    1306  ENDMETHOD
 21274    31   644     5    31   530     0    1307  STARTMETHOD
 21275    31   648     5    31   530     0      41  private
 21276    31   648    13    31   530     0     111  ByteBuffer
 21277    31   648    24    31   530     0     111  putInt
 21278    31   648    30    31   530     0      59  (
 21279    31   648    31    31   530     0      53  long
 21280    31   648    36    31   530     0     111  a
 21281    31   648    37    31   530     0      66  ,
 21282    31   648    39    31   530     0      36  int
 21283    31   648    43    31   530     0     111  x
 21284    31   648    44    31   530     0      60  )
 21285    31   648    46    31   530     0      63  {
 21286    31   650     9    31   530     0      31  if
 21287    31   650    12    31   530     0      59  (
 21288    31   650    13    31   530     0     111  unaligned
 21289    31   650    22    31   530     0      60  )
 21290    31   650    24    31   530     0      63  {
 21291    31   651    13    31   530     0      36  int
 21292    31   651    17    31   530     0     111  y
 21293    31   651    19    31   530     0      67  =
 21294    31   651    21    31   530     0      59  (
 21295    31   651    22    31   530     0     111  x
 21296    31   651    23    31   530     0      60  )
 21297    31   651    24    31   530     0     102  ;
 21298    31   652    13    31   530     0     111  unsafe.putInt
 21299    31   652    26    31   530     0      59  (
 21300    31   652    27    31   530     0     111  a
 21301    31   652    28    31   530     0      66  ,
 21302    31   652    30    31   530     0      59  (
 21303    31   652    31    31   530     0     111  nativeByteOrder
 21304    31   652    47    31   530     0      58  ?
 21305    31   652    49    31   530     0     111  y
 21306    31   652    51    31   530     0      65  :
 21307    31   652    53    31   530     0     111  Bits.swap
 21308    31   652    62    31   530     0      59  (
 21309    31   652    63    31   530     0     111  y
 21310    31   652    64    31   530     0      60  )
 21311    31   652    65    31   530     0      60  )
 21312    31   652    66    31   530     0      60  )
 21313    31   652    67    31   530     0     102  ;
 21314    31   653     9    31   530     0      64  }
 21315    31   653    11    31   530     0      48  else
 21316    31   653    16    31   530     0      63  {
 21317    31   654    13    31   530     0     111  Bits.putInt
 21318    31   654    24    31   530     0      59  (
 21319    31   654    25    31   530     0     111  a
 21320    31   654    26    31   530     0      66  ,
 21321    31   654    28    31   530     0     111  x
 21322    31   654    29    31   530     0      66  ,
 21323    31   654    31    31   530     0     111  bigEndian
 21324    31   654    40    31   530     0      60  )
 21325    31   654    41    31   530     0     102  ;
 21326    31   655     9    31   530     0      64  }
 21327    31   656     9    31   530     0      19  return
 21328    31   656    16    31   530     0      44  this
 21329    31   656    20    31   530     0     102  ;
 21330    31   660     5    31   530     0      64  }
 21331    31   660     5    31   530     0    1308  ENDMETHOD
 21332    31   660     5    31   531     0    1309  STARTMETHOD
 21333    31   662     5    31   531     0      10  public
 21334    31   662    12    31   531     0     111  ByteBuffer
 21335    31   662    23    31   531     0     111  putInt
 21336    31   662    29    31   531     0      59  (
 21337    31   662    30    31   531     0      36  int
 21338    31   662    34    31   531     0     111  x
 21339    31   662    35    31   531     0      60  )
 21340    31   662    37    31   531     0      63  {
 21341    31   664     9    31   531     0     111  putInt
 21342    31   664    15    31   531     0      59  (
 21343    31   664    16    31   531     0     111  ix
 21344    31   664    18    31   531     0      59  (
 21345    31   664    19    31   531     0     111  nextPutIndex
 21346    31   664    31    31   531     0      59  (
 21347    31   664    32    31   531     0      59  (
 21348    31   664    33    31   531     0     112  1
 21349    31   664    35    31   531     0      90  <<
 21350    31   664    38    31   531     0     112  2
 21351    31   664    39    31   531     0      60  )
 21352    31   664    40    31   531     0      60  )
 21353    31   664    41    31   531     0      60  )
 21354    31   664    42    31   531     0      66  ,
 21355    31   664    44    31   531     0     111  x
 21356    31   664    45    31   531     0      60  )
 21357    31   664    46    31   531     0     102  ;
 21358    31   665     9    31   531     0      19  return
 21359    31   665    16    31   531     0      44  this
 21360    31   665    20    31   531     0     102  ;
 21361    31   669     5    31   531     0      64  }
 21362    31   669     5    31   531     0    1310  ENDMETHOD
 21363    31   669     5    31   532     0    1311  STARTMETHOD
 21364    31   671     5    31   532     0      10  public
 21365    31   671    12    31   532     0     111  ByteBuffer
 21366    31   671    23    31   532     0     111  putInt
 21367    31   671    29    31   532     0      59  (
 21368    31   671    30    31   532     0      36  int
 21369    31   671    34    31   532     0     111  i
 21370    31   671    35    31   532     0      66  ,
 21371    31   671    37    31   532     0      36  int
 21372    31   671    41    31   532     0     111  x
 21373    31   671    42    31   532     0      60  )
 21374    31   671    44    31   532     0      63  {
 21375    31   673     9    31   532     0     111  putInt
 21376    31   673    15    31   532     0      59  (
 21377    31   673    16    31   532     0     111  ix
 21378    31   673    18    31   532     0      59  (
 21379    31   673    19    31   532     0     111  checkIndex
 21380    31   673    29    31   532     0      59  (
 21381    31   673    30    31   532     0     111  i
 21382    31   673    31    31   532     0      66  ,
 21383    31   673    33    31   532     0      59  (
 21384    31   673    34    31   532     0     112  1
 21385    31   673    36    31   532     0      90  <<
 21386    31   673    39    31   532     0     112  2
 21387    31   673    40    31   532     0      60  )
 21388    31   673    41    31   532     0      60  )
 21389    31   673    42    31   532     0      60  )
 21390    31   673    43    31   532     0      66  ,
 21391    31   673    45    31   532     0     111  x
 21392    31   673    46    31   532     0      60  )
 21393    31   673    47    31   532     0     102  ;
 21394    31   674     9    31   532     0      19  return
 21395    31   674    16    31   532     0      44  this
 21396    31   674    20    31   532     0     102  ;
 21397    31   678     5    31   532     0      64  }
 21398    31   678     5    31   532     0    1312  ENDMETHOD
 21399    31   678     5    31   533     0    1313  STARTMETHOD
 21400    31   680     5    31   533     0      10  public
 21401    31   680    12    31   533     0     111  IntBuffer
 21402    31   680    22    31   533     0     111  asIntBuffer
 21403    31   680    33    31   533     0      59  (
 21404    31   680    34    31   533     0      60  )
 21405    31   680    36    31   533     0      63  {
 21406    31   681     9    31   533     1      36  int
 21407    31   681    13    31   533     1     111  off
 21408    31   681    17    31   533     1      67  =
 21409    31   681    19    31   533     1     111  this.position
 21410    31   681    32    31   533     1      59  (
 21411    31   681    33    31   533     1      60  )
 21412    31   681    34    31   533     1     102  ;
 21413    31   682     9    31   533     1      36  int
 21414    31   682    13    31   533     1     111  lim
 21415    31   682    17    31   533     1      67  =
 21416    31   682    19    31   533     1     111  this.limit
 21417    31   682    29    31   533     1      59  (
 21418    31   682    30    31   533     1      60  )
 21419    31   682    31    31   533     1     102  ;
 21420    31   683     9    31   533     0     111  assert
 21421    31   683    16    31   533     0      59  (
 21422    31   683    17    31   533     0     111  off
 21423    31   683    21    31   533     0      92  <=
 21424    31   683    24    31   533     0     111  lim
 21425    31   683    27    31   533     0      60  )
 21426    31   683    28    31   533     0     102  ;
 21427    31   684     9    31   533     0      36  int
 21428    31   684    13    31   533     0     111  rem
 21429    31   684    17    31   533     0      67  =
 21430    31   684    19    31   533     0      59  (
 21431    31   684    20    31   533     0     111  off
 21432    31   684    24    31   533     0      92  <=
 21433    31   684    27    31   533     0     111  lim
 21434    31   684    31    31   533     0      58  ?
 21435    31   684    33    31   533     0     111  lim
 21436    31   684    37    31   533     0      77  -
 21437    31   684    39    31   533     0     111  off
 21438    31   684    43    31   533     0      65  :
 21439    31   684    45    31   533     0     112  0
 21440    31   684    46    31   533     0      60  )
 21441    31   684    47    31   533     0     102  ;
 21442    31   686     9    31   533     0      36  int
 21443    31   686    13    31   533     0     111  size
 21444    31   686    18    31   533     0      67  =
 21445    31   686    20    31   533     0     111  rem
 21446    31   686    24    31   533     0      84  >>
 21447    31   686    27    31   533     0     112  2
 21448    31   686    28    31   533     0     102  ;
 21449    31   687     9    31   533     0      31  if
 21450    31   687    12    31   533     0      59  (
 21451    31   687    13    31   533     0      69  !
 21452    31   687    14    31   533     0     111  unaligned
 21453    31   687    24    31   533     0     101  &&
 21454    31   687    27    31   533     0      59  (
 21455    31   687    28    31   533     0      59  (
 21456    31   687    29    31   533     0     111  address
 21457    31   687    37    31   533     0      74  +
 21458    31   687    39    31   533     0     111  off
 21459    31   687    42    31   533     0      60  )
 21460    31   687    44    31   533     0      82  %
 21461    31   687    46    31   533     0      59  (
 21462    31   687    47    31   533     0     112  1
 21463    31   687    49    31   533     0      90  <<
 21464    31   687    52    31   533     0     112  2
 21465    31   687    53    31   533     0      60  )
 21466    31   687    55    31   533     0      71  !=
 21467    31   687    58    31   533     0     112  0
 21468    31   687    59    31   533     0      60  )
 21469    31   687    60    31   533     0      60  )
 21470    31   687    62    31   533     0      63  {
 21471    31   688    13    31   533     0      19  return
 21472    31   688    20    31   533     0      59  (
 21473    31   688    21    31   533     0     111  bigEndian
 21474    31   689    21    31   533     0      58  ?
 21475    31   689    23    31   533     0      59  (
 21476    31   689    24    31   533     0     111  IntBuffer
 21477    31   689    33    31   533     0      60  )
 21478    31   689    34    31   533     0      59  (
 21479    31   689    35    31   533     0      15  new
 21480    31   689    39    31   533     0     111  ByteBufferAsIntBufferB
 21481    31   689    61    31   533     0      59  (
 21482    31   689    62    31   533     0      44  this
 21483    31   689    66    31   533     0      66  ,
 21484    31   690    72    31   533     0      77  -
 21485    31   690    73    31   533     0     112  1
 21486    31   690    74    31   533     0      66  ,
 21487    31   691    72    31   533     0     112  0
 21488    31   691    73    31   533     0      66  ,
 21489    31   692    72    31   533     1     111  size
 21490    31   692    76    31   533     1      66  ,
 21491    31   693    72    31   533     1     111  size
 21492    31   693    76    31   533     1      66  ,
 21493    31   694    72    31   533     0     111  off
 21494    31   694    75    31   533     0      60  )
 21495    31   694    76    31   533     0      60  )
 21496    31   695    21    31   533     0      65  :
 21497    31   695    23    31   533     0      59  (
 21498    31   695    24    31   533     0     111  IntBuffer
 21499    31   695    33    31   533     0      60  )
 21500    31   695    34    31   533     0      59  (
 21501    31   695    35    31   533     0      15  new
 21502    31   695    39    31   533     0     111  ByteBufferAsIntBufferL
 21503    31   695    61    31   533     0      59  (
 21504    31   695    62    31   533     0      44  this
 21505    31   695    66    31   533     0      66  ,
 21506    31   696    72    31   533     0      77  -
 21507    31   696    73    31   533     0     112  1
 21508    31   696    74    31   533     0      66  ,
 21509    31   697    72    31   533     0     112  0
 21510    31   697    73    31   533     0      66  ,
 21511    31   698    72    31   533     1     111  size
 21512    31   698    76    31   533     1      66  ,
 21513    31   699    72    31   533     1     111  size
 21514    31   699    76    31   533     1      66  ,
 21515    31   700    72    31   533     0     111  off
 21516    31   700    75    31   533     0      60  )
 21517    31   700    76    31   533     0      60  )
 21518    31   700    77    31   533     0      60  )
 21519    31   700    78    31   533     0     102  ;
 21520    31   701     9    31   533     0      64  }
 21521    31   701    11    31   533     0      48  else
 21522    31   701    16    31   533     0      63  {
 21523    31   702    13    31   533     0      19  return
 21524    31   702    20    31   533     0      59  (
 21525    31   702    21    31   533     0     111  nativeByteOrder
 21526    31   703    21    31   533     0      58  ?
 21527    31   703    23    31   533     0      59  (
 21528    31   703    24    31   533     0     111  IntBuffer
 21529    31   703    33    31   533     0      60  )
 21530    31   703    34    31   533     0      59  (
 21531    31   703    35    31   533     0      15  new
 21532    31   703    39    31   533     0     111  DirectIntBufferU
 21533    31   703    55    31   533     0      59  (
 21534    31   703    56    31   533     0      44  this
 21535    31   703    60    31   533     0      66  ,
 21536    31   704    66    31   533     0      77  -
 21537    31   704    67    31   533     0     112  1
 21538    31   704    68    31   533     0      66  ,
 21539    31   705    66    31   533     0     112  0
 21540    31   705    67    31   533     0      66  ,
 21541    31   706    66    31   533     1     111  size
 21542    31   706    70    31   533     1      66  ,
 21543    31   707    66    31   533     1     111  size
 21544    31   707    70    31   533     1      66  ,
 21545    31   708    66    31   533     0     111  off
 21546    31   708    69    31   533     0      60  )
 21547    31   708    70    31   533     0      60  )
 21548    31   709    21    31   533     0      65  :
 21549    31   709    23    31   533     0      59  (
 21550    31   709    24    31   533     0     111  IntBuffer
 21551    31   709    33    31   533     0      60  )
 21552    31   709    34    31   533     0      59  (
 21553    31   709    35    31   533     0      15  new
 21554    31   709    39    31   533     0     111  DirectIntBufferS
 21555    31   709    55    31   533     0      59  (
 21556    31   709    56    31   533     0      44  this
 21557    31   709    60    31   533     0      66  ,
 21558    31   710    66    31   533     0      77  -
 21559    31   710    67    31   533     0     112  1
 21560    31   710    68    31   533     0      66  ,
 21561    31   711    66    31   533     0     112  0
 21562    31   711    67    31   533     0      66  ,
 21563    31   712    66    31   533     1     111  size
 21564    31   712    70    31   533     1      66  ,
 21565    31   713    66    31   533     1     111  size
 21566    31   713    70    31   533     1      66  ,
 21567    31   714    66    31   533     0     111  off
 21568    31   714    69    31   533     0      60  )
 21569    31   714    70    31   533     0      60  )
 21570    31   714    71    31   533     0      60  )
 21571    31   714    72    31   533     0     102  ;
 21572    31   715     9    31   533     0      64  }
 21573    31   716     5    31   533     0      64  }
 21574    31   716     5    31   533     0    1314  ENDMETHOD
 21575    31   716     5    31   534     0    1315  STARTMETHOD
 21576    31   721     5    31   534     0      41  private
 21577    31   721    13    31   534     0      53  long
 21578    31   721    18    31   534     0     111  getLong
 21579    31   721    25    31   534     0      59  (
 21580    31   721    26    31   534     0      53  long
 21581    31   721    31    31   534     0     111  a
 21582    31   721    32    31   534     0      60  )
 21583    31   721    34    31   534     0      63  {
 21584    31   722     9    31   534     0      31  if
 21585    31   722    12    31   534     0      59  (
 21586    31   722    13    31   534     0     111  unaligned
 21587    31   722    22    31   534     0      60  )
 21588    31   722    24    31   534     0      63  {
 21589    31   723    13    31   534     0      53  long
 21590    31   723    18    31   534     0     111  x
 21591    31   723    20    31   534     0      67  =
 21592    31   723    22    31   534     0     111  unsafe.getLong
 21593    31   723    36    31   534     0      59  (
 21594    31   723    37    31   534     0     111  a
 21595    31   723    38    31   534     0      60  )
 21596    31   723    39    31   534     0     102  ;
 21597    31   724    13    31   534     0      19  return
 21598    31   724    20    31   534     0      59  (
 21599    31   724    21    31   534     0     111  nativeByteOrder
 21600    31   724    37    31   534     0      58  ?
 21601    31   724    39    31   534     0     111  x
 21602    31   724    41    31   534     0      65  :
 21603    31   724    43    31   534     0     111  Bits.swap
 21604    31   724    52    31   534     0      59  (
 21605    31   724    53    31   534     0     111  x
 21606    31   724    54    31   534     0      60  )
 21607    31   724    55    31   534     0      60  )
 21608    31   724    56    31   534     0     102  ;
 21609    31   725     9    31   534     0      64  }
 21610    31   726     9    31   534     0      19  return
 21611    31   726    16    31   534     0     111  Bits.getLong
 21612    31   726    28    31   534     0      59  (
 21613    31   726    29    31   534     0     111  a
 21614    31   726    30    31   534     0      66  ,
 21615    31   726    32    31   534     0     111  bigEndian
 21616    31   726    41    31   534     0      60  )
 21617    31   726    42    31   534     0     102  ;
 21618    31   727     5    31   534     0      64  }
 21619    31   727     5    31   534     0    1316  ENDMETHOD
 21620    31   727     5    31   535     0    1317  STARTMETHOD
 21621    31   729     5    31   535     0      10  public
 21622    31   729    12    31   535     0      53  long
 21623    31   729    17    31   535     0     111  getLong
 21624    31   729    24    31   535     0      59  (
 21625    31   729    25    31   535     0      60  )
 21626    31   729    27    31   535     0      63  {
 21627    31   730     9    31   535     0      19  return
 21628    31   730    16    31   535     0     111  getLong
 21629    31   730    23    31   535     0      59  (
 21630    31   730    24    31   535     0     111  ix
 21631    31   730    26    31   535     0      59  (
 21632    31   730    27    31   535     0     111  nextGetIndex
 21633    31   730    39    31   535     0      59  (
 21634    31   730    40    31   535     0      59  (
 21635    31   730    41    31   535     0     112  1
 21636    31   730    43    31   535     0      90  <<
 21637    31   730    46    31   535     0     112  3
 21638    31   730    47    31   535     0      60  )
 21639    31   730    48    31   535     0      60  )
 21640    31   730    49    31   535     0      60  )
 21641    31   730    50    31   535     0      60  )
 21642    31   730    51    31   535     0     102  ;
 21643    31   731     5    31   535     0      64  }
 21644    31   731     5    31   535     0    1318  ENDMETHOD
 21645    31   731     5    31   536     0    1319  STARTMETHOD
 21646    31   733     5    31   536     0      10  public
 21647    31   733    12    31   536     0      53  long
 21648    31   733    17    31   536     0     111  getLong
 21649    31   733    24    31   536     0      59  (
 21650    31   733    25    31   536     0      36  int
 21651    31   733    29    31   536     0     111  i
 21652    31   733    30    31   536     0      60  )
 21653    31   733    32    31   536     0      63  {
 21654    31   734     9    31   536     0      19  return
 21655    31   734    16    31   536     0     111  getLong
 21656    31   734    23    31   536     0      59  (
 21657    31   734    24    31   536     0     111  ix
 21658    31   734    26    31   536     0      59  (
 21659    31   734    27    31   536     0     111  checkIndex
 21660    31   734    37    31   536     0      59  (
 21661    31   734    38    31   536     0     111  i
 21662    31   734    39    31   536     0      66  ,
 21663    31   734    41    31   536     0      59  (
 21664    31   734    42    31   536     0     112  1
 21665    31   734    44    31   536     0      90  <<
 21666    31   734    47    31   536     0     112  3
 21667    31   734    48    31   536     0      60  )
 21668    31   734    49    31   536     0      60  )
 21669    31   734    50    31   536     0      60  )
 21670    31   734    51    31   536     0      60  )
 21671    31   734    52    31   536     0     102  ;
 21672    31   735     5    31   536     0      64  }
 21673    31   735     5    31   536     0    1320  ENDMETHOD
 21674    31   735     5    31   537     0    1321  STARTMETHOD
 21675    31   739     5    31   537     0      41  private
 21676    31   739    13    31   537     0     111  ByteBuffer
 21677    31   739    24    31   537     0     111  putLong
 21678    31   739    31    31   537     0      59  (
 21679    31   739    32    31   537     0      53  long
 21680    31   739    37    31   537     0     111  a
 21681    31   739    38    31   537     0      66  ,
 21682    31   739    40    31   537     0      53  long
 21683    31   739    45    31   537     0     111  x
 21684    31   739    46    31   537     0      60  )
 21685    31   739    48    31   537     0      63  {
 21686    31   741     9    31   537     0      31  if
 21687    31   741    12    31   537     0      59  (
 21688    31   741    13    31   537     0     111  unaligned
 21689    31   741    22    31   537     0      60  )
 21690    31   741    24    31   537     0      63  {
 21691    31   742    13    31   537     0      53  long
 21692    31   742    18    31   537     0     111  y
 21693    31   742    20    31   537     0      67  =
 21694    31   742    22    31   537     0      59  (
 21695    31   742    23    31   537     0     111  x
 21696    31   742    24    31   537     0      60  )
 21697    31   742    25    31   537     0     102  ;
 21698    31   743    13    31   537     0     111  unsafe.putLong
 21699    31   743    27    31   537     0      59  (
 21700    31   743    28    31   537     0     111  a
 21701    31   743    29    31   537     0      66  ,
 21702    31   743    31    31   537     0      59  (
 21703    31   743    32    31   537     0     111  nativeByteOrder
 21704    31   743    48    31   537     0      58  ?
 21705    31   743    50    31   537     0     111  y
 21706    31   743    52    31   537     0      65  :
 21707    31   743    54    31   537     0     111  Bits.swap
 21708    31   743    63    31   537     0      59  (
 21709    31   743    64    31   537     0     111  y
 21710    31   743    65    31   537     0      60  )
 21711    31   743    66    31   537     0      60  )
 21712    31   743    67    31   537     0      60  )
 21713    31   743    68    31   537     0     102  ;
 21714    31   744     9    31   537     0      64  }
 21715    31   744    11    31   537     0      48  else
 21716    31   744    16    31   537     0      63  {
 21717    31   745    13    31   537     0     111  Bits.putLong
 21718    31   745    25    31   537     0      59  (
 21719    31   745    26    31   537     0     111  a
 21720    31   745    27    31   537     0      66  ,
 21721    31   745    29    31   537     0     111  x
 21722    31   745    30    31   537     0      66  ,
 21723    31   745    32    31   537     0     111  bigEndian
 21724    31   745    41    31   537     0      60  )
 21725    31   745    42    31   537     0     102  ;
 21726    31   746     9    31   537     0      64  }
 21727    31   747     9    31   537     0      19  return
 21728    31   747    16    31   537     0      44  this
 21729    31   747    20    31   537     0     102  ;
 21730    31   751     5    31   537     0      64  }
 21731    31   751     5    31   537     0    1322  ENDMETHOD
 21732    31   751     5    31   538     0    1323  STARTMETHOD
 21733    31   753     5    31   538     0      10  public
 21734    31   753    12    31   538     0     111  ByteBuffer
 21735    31   753    23    31   538     0     111  putLong
 21736    31   753    30    31   538     0      59  (
 21737    31   753    31    31   538     0      53  long
 21738    31   753    36    31   538     0     111  x
 21739    31   753    37    31   538     0      60  )
 21740    31   753    39    31   538     0      63  {
 21741    31   755     9    31   538     0     111  putLong
 21742    31   755    16    31   538     0      59  (
 21743    31   755    17    31   538     0     111  ix
 21744    31   755    19    31   538     0      59  (
 21745    31   755    20    31   538     0     111  nextPutIndex
 21746    31   755    32    31   538     0      59  (
 21747    31   755    33    31   538     0      59  (
 21748    31   755    34    31   538     0     112  1
 21749    31   755    36    31   538     0      90  <<
 21750    31   755    39    31   538     0     112  3
 21751    31   755    40    31   538     0      60  )
 21752    31   755    41    31   538     0      60  )
 21753    31   755    42    31   538     0      60  )
 21754    31   755    43    31   538     0      66  ,
 21755    31   755    45    31   538     0     111  x
 21756    31   755    46    31   538     0      60  )
 21757    31   755    47    31   538     0     102  ;
 21758    31   756     9    31   538     0      19  return
 21759    31   756    16    31   538     0      44  this
 21760    31   756    20    31   538     0     102  ;
 21761    31   760     5    31   538     0      64  }
 21762    31   760     5    31   538     0    1324  ENDMETHOD
 21763    31   760     5    31   539     0    1325  STARTMETHOD
 21764    31   762     5    31   539     0      10  public
 21765    31   762    12    31   539     0     111  ByteBuffer
 21766    31   762    23    31   539     0     111  putLong
 21767    31   762    30    31   539     0      59  (
 21768    31   762    31    31   539     0      36  int
 21769    31   762    35    31   539     0     111  i
 21770    31   762    36    31   539     0      66  ,
 21771    31   762    38    31   539     0      53  long
 21772    31   762    43    31   539     0     111  x
 21773    31   762    44    31   539     0      60  )
 21774    31   762    46    31   539     0      63  {
 21775    31   764     9    31   539     0     111  putLong
 21776    31   764    16    31   539     0      59  (
 21777    31   764    17    31   539     0     111  ix
 21778    31   764    19    31   539     0      59  (
 21779    31   764    20    31   539     0     111  checkIndex
 21780    31   764    30    31   539     0      59  (
 21781    31   764    31    31   539     0     111  i
 21782    31   764    32    31   539     0      66  ,
 21783    31   764    34    31   539     0      59  (
 21784    31   764    35    31   539     0     112  1
 21785    31   764    37    31   539     0      90  <<
 21786    31   764    40    31   539     0     112  3
 21787    31   764    41    31   539     0      60  )
 21788    31   764    42    31   539     0      60  )
 21789    31   764    43    31   539     0      60  )
 21790    31   764    44    31   539     0      66  ,
 21791    31   764    46    31   539     0     111  x
 21792    31   764    47    31   539     0      60  )
 21793    31   764    48    31   539     0     102  ;
 21794    31   765     9    31   539     0      19  return
 21795    31   765    16    31   539     0      44  this
 21796    31   765    20    31   539     0     102  ;
 21797    31   769     5    31   539     0      64  }
 21798    31   769     5    31   539     0    1326  ENDMETHOD
 21799    31   769     5    31   540     0    1327  STARTMETHOD
 21800    31   771     5    31   540     0      10  public
 21801    31   771    12    31   540     0     111  LongBuffer
 21802    31   771    23    31   540     0     111  asLongBuffer
 21803    31   771    35    31   540     0      59  (
 21804    31   771    36    31   540     0      60  )
 21805    31   771    38    31   540     0      63  {
 21806    31   772     9    31   540     1      36  int
 21807    31   772    13    31   540     1     111  off
 21808    31   772    17    31   540     1      67  =
 21809    31   772    19    31   540     1     111  this.position
 21810    31   772    32    31   540     1      59  (
 21811    31   772    33    31   540     1      60  )
 21812    31   772    34    31   540     1     102  ;
 21813    31   773     9    31   540     1      36  int
 21814    31   773    13    31   540     1     111  lim
 21815    31   773    17    31   540     1      67  =
 21816    31   773    19    31   540     1     111  this.limit
 21817    31   773    29    31   540     1      59  (
 21818    31   773    30    31   540     1      60  )
 21819    31   773    31    31   540     1     102  ;
 21820    31   774     9    31   540     0     111  assert
 21821    31   774    16    31   540     0      59  (
 21822    31   774    17    31   540     0     111  off
 21823    31   774    21    31   540     0      92  <=
 21824    31   774    24    31   540     0     111  lim
 21825    31   774    27    31   540     0      60  )
 21826    31   774    28    31   540     0     102  ;
 21827    31   775     9    31   540     0      36  int
 21828    31   775    13    31   540     0     111  rem
 21829    31   775    17    31   540     0      67  =
 21830    31   775    19    31   540     0      59  (
 21831    31   775    20    31   540     0     111  off
 21832    31   775    24    31   540     0      92  <=
 21833    31   775    27    31   540     0     111  lim
 21834    31   775    31    31   540     0      58  ?
 21835    31   775    33    31   540     0     111  lim
 21836    31   775    37    31   540     0      77  -
 21837    31   775    39    31   540     0     111  off
 21838    31   775    43    31   540     0      65  :
 21839    31   775    45    31   540     0     112  0
 21840    31   775    46    31   540     0      60  )
 21841    31   775    47    31   540     0     102  ;
 21842    31   777     9    31   540     0      36  int
 21843    31   777    13    31   540     0     111  size
 21844    31   777    18    31   540     0      67  =
 21845    31   777    20    31   540     0     111  rem
 21846    31   777    24    31   540     0      84  >>
 21847    31   777    27    31   540     0     112  3
 21848    31   777    28    31   540     0     102  ;
 21849    31   778     9    31   540     0      31  if
 21850    31   778    12    31   540     0      59  (
 21851    31   778    13    31   540     0      69  !
 21852    31   778    14    31   540     0     111  unaligned
 21853    31   778    24    31   540     0     101  &&
 21854    31   778    27    31   540     0      59  (
 21855    31   778    28    31   540     0      59  (
 21856    31   778    29    31   540     0     111  address
 21857    31   778    37    31   540     0      74  +
 21858    31   778    39    31   540     0     111  off
 21859    31   778    42    31   540     0      60  )
 21860    31   778    44    31   540     0      82  %
 21861    31   778    46    31   540     0      59  (
 21862    31   778    47    31   540     0     112  1
 21863    31   778    49    31   540     0      90  <<
 21864    31   778    52    31   540     0     112  3
 21865    31   778    53    31   540     0      60  )
 21866    31   778    55    31   540     0      71  !=
 21867    31   778    58    31   540     0     112  0
 21868    31   778    59    31   540     0      60  )
 21869    31   778    60    31   540     0      60  )
 21870    31   778    62    31   540     0      63  {
 21871    31   779    13    31   540     0      19  return
 21872    31   779    20    31   540     0      59  (
 21873    31   779    21    31   540     0     111  bigEndian
 21874    31   780    21    31   540     0      58  ?
 21875    31   780    23    31   540     0      59  (
 21876    31   780    24    31   540     0     111  LongBuffer
 21877    31   780    34    31   540     0      60  )
 21878    31   780    35    31   540     0      59  (
 21879    31   780    36    31   540     0      15  new
 21880    31   780    40    31   540     0     111  ByteBufferAsLongBufferB
 21881    31   780    63    31   540     0      59  (
 21882    31   780    64    31   540     0      44  this
 21883    31   780    68    31   540     0      66  ,
 21884    31   781    72    31   540     0      77  -
 21885    31   781    73    31   540     0     112  1
 21886    31   781    74    31   540     0      66  ,
 21887    31   782    72    31   540     0     112  0
 21888    31   782    73    31   540     0      66  ,
 21889    31   783    72    31   540     1     111  size
 21890    31   783    76    31   540     1      66  ,
 21891    31   784    72    31   540     1     111  size
 21892    31   784    76    31   540     1      66  ,
 21893    31   785    72    31   540     0     111  off
 21894    31   785    75    31   540     0      60  )
 21895    31   785    76    31   540     0      60  )
 21896    31   786    21    31   540     0      65  :
 21897    31   786    23    31   540     0      59  (
 21898    31   786    24    31   540     0     111  LongBuffer
 21899    31   786    34    31   540     0      60  )
 21900    31   786    35    31   540     0      59  (
 21901    31   786    36    31   540     0      15  new
 21902    31   786    40    31   540     0     111  ByteBufferAsLongBufferL
 21903    31   786    63    31   540     0      59  (
 21904    31   786    64    31   540     0      44  this
 21905    31   786    68    31   540     0      66  ,
 21906    31   787    72    31   540     0      77  -
 21907    31   787    73    31   540     0     112  1
 21908    31   787    74    31   540     0      66  ,
 21909    31   788    72    31   540     0     112  0
 21910    31   788    73    31   540     0      66  ,
 21911    31   789    72    31   540     1     111  size
 21912    31   789    76    31   540     1      66  ,
 21913    31   790    72    31   540     1     111  size
 21914    31   790    76    31   540     1      66  ,
 21915    31   791    72    31   540     0     111  off
 21916    31   791    75    31   540     0      60  )
 21917    31   791    76    31   540     0      60  )
 21918    31   791    77    31   540     0      60  )
 21919    31   791    78    31   540     0     102  ;
 21920    31   792     9    31   540     0      64  }
 21921    31   792    11    31   540     0      48  else
 21922    31   792    16    31   540     0      63  {
 21923    31   793    13    31   540     0      19  return
 21924    31   793    20    31   540     0      59  (
 21925    31   793    21    31   540     0     111  nativeByteOrder
 21926    31   794    21    31   540     0      58  ?
 21927    31   794    23    31   540     0      59  (
 21928    31   794    24    31   540     0     111  LongBuffer
 21929    31   794    34    31   540     0      60  )
 21930    31   794    35    31   540     0      59  (
 21931    31   794    36    31   540     0      15  new
 21932    31   794    40    31   540     0     111  DirectLongBufferU
 21933    31   794    57    31   540     0      59  (
 21934    31   794    58    31   540     0      44  this
 21935    31   794    62    31   540     0      66  ,
 21936    31   795    66    31   540     0      77  -
 21937    31   795    67    31   540     0     112  1
 21938    31   795    68    31   540     0      66  ,
 21939    31   796    66    31   540     0     112  0
 21940    31   796    67    31   540     0      66  ,
 21941    31   797    66    31   540     1     111  size
 21942    31   797    70    31   540     1      66  ,
 21943    31   798    66    31   540     1     111  size
 21944    31   798    70    31   540     1      66  ,
 21945    31   799    66    31   540     0     111  off
 21946    31   799    69    31   540     0      60  )
 21947    31   799    70    31   540     0      60  )
 21948    31   800    21    31   540     0      65  :
 21949    31   800    23    31   540     0      59  (
 21950    31   800    24    31   540     0     111  LongBuffer
 21951    31   800    34    31   540     0      60  )
 21952    31   800    35    31   540     0      59  (
 21953    31   800    36    31   540     0      15  new
 21954    31   800    40    31   540     0     111  DirectLongBufferS
 21955    31   800    57    31   540     0      59  (
 21956    31   800    58    31   540     0      44  this
 21957    31   800    62    31   540     0      66  ,
 21958    31   801    66    31   540     0      77  -
 21959    31   801    67    31   540     0     112  1
 21960    31   801    68    31   540     0      66  ,
 21961    31   802    66    31   540     0     112  0
 21962    31   802    67    31   540     0      66  ,
 21963    31   803    66    31   540     1     111  size
 21964    31   803    70    31   540     1      66  ,
 21965    31   804    66    31   540     1     111  size
 21966    31   804    70    31   540     1      66  ,
 21967    31   805    66    31   540     0     111  off
 21968    31   805    69    31   540     0      60  )
 21969    31   805    70    31   540     0      60  )
 21970    31   805    71    31   540     0      60  )
 21971    31   805    72    31   540     0     102  ;
 21972    31   806     9    31   540     0      64  }
 21973    31   807     5    31   540     0      64  }
 21974    31   807     5    31   540     0    1328  ENDMETHOD
 21975    31   807     5    31   541     0    1329  STARTMETHOD
 21976    31   812     5    31   541     0      41  private
 21977    31   812    13    31   541     0       4  float
 21978    31   812    19    31   541     0     111  getFloat
 21979    31   812    27    31   541     0      59  (
 21980    31   812    28    31   541     0      53  long
 21981    31   812    33    31   541     0     111  a
 21982    31   812    34    31   541     0      60  )
 21983    31   812    36    31   541     0      63  {
 21984    31   813     9    31   541     0      31  if
 21985    31   813    12    31   541     0      59  (
 21986    31   813    13    31   541     0     111  unaligned
 21987    31   813    22    31   541     0      60  )
 21988    31   813    24    31   541     0      63  {
 21989    31   814    13    31   541     0      36  int
 21990    31   814    17    31   541     0     111  x
 21991    31   814    19    31   541     0      67  =
 21992    31   814    21    31   541     0     111  unsafe.getInt
 21993    31   814    34    31   541     0      59  (
 21994    31   814    35    31   541     0     111  a
 21995    31   814    36    31   541     0      60  )
 21996    31   814    37    31   541     0     102  ;
 21997    31   815    13    31   541     0      19  return
 21998    31   815    20    31   541     0     111  Float.intBitsToFloat
 21999    31   815    40    31   541     0      59  (
 22000    31   815    41    31   541     0     111  nativeByteOrder
 22001    31   815    57    31   541     0      58  ?
 22002    31   815    59    31   541     0     111  x
 22003    31   815    61    31   541     0      65  :
 22004    31   815    63    31   541     0     111  Bits.swap
 22005    31   815    72    31   541     0      59  (
 22006    31   815    73    31   541     0     111  x
 22007    31   815    74    31   541     0      60  )
 22008    31   815    75    31   541     0      60  )
 22009    31   815    76    31   541     0     102  ;
 22010    31   816     9    31   541     0      64  }
 22011    31   817     9    31   541     0      19  return
 22012    31   817    16    31   541     0     111  Bits.getFloat
 22013    31   817    29    31   541     0      59  (
 22014    31   817    30    31   541     0     111  a
 22015    31   817    31    31   541     0      66  ,
 22016    31   817    33    31   541     0     111  bigEndian
 22017    31   817    42    31   541     0      60  )
 22018    31   817    43    31   541     0     102  ;
 22019    31   818     5    31   541     0      64  }
 22020    31   818     5    31   541     0    1330  ENDMETHOD
 22021    31   818     5    31   542     0    1331  STARTMETHOD
 22022    31   820     5    31   542     0      10  public
 22023    31   820    12    31   542     0       4  float
 22024    31   820    18    31   542     0     111  getFloat
 22025    31   820    26    31   542     0      59  (
 22026    31   820    27    31   542     0      60  )
 22027    31   820    29    31   542     0      63  {
 22028    31   821     9    31   542     0      19  return
 22029    31   821    16    31   542     0     111  getFloat
 22030    31   821    24    31   542     0      59  (
 22031    31   821    25    31   542     0     111  ix
 22032    31   821    27    31   542     0      59  (
 22033    31   821    28    31   542     0     111  nextGetIndex
 22034    31   821    40    31   542     0      59  (
 22035    31   821    41    31   542     0      59  (
 22036    31   821    42    31   542     0     112  1
 22037    31   821    44    31   542     0      90  <<
 22038    31   821    47    31   542     0     112  2
 22039    31   821    48    31   542     0      60  )
 22040    31   821    49    31   542     0      60  )
 22041    31   821    50    31   542     0      60  )
 22042    31   821    51    31   542     0      60  )
 22043    31   821    52    31   542     0     102  ;
 22044    31   822     5    31   542     0      64  }
 22045    31   822     5    31   542     0    1332  ENDMETHOD
 22046    31   822     5    31   543     0    1333  STARTMETHOD
 22047    31   824     5    31   543     0      10  public
 22048    31   824    12    31   543     0       4  float
 22049    31   824    18    31   543     0     111  getFloat
 22050    31   824    26    31   543     0      59  (
 22051    31   824    27    31   543     0      36  int
 22052    31   824    31    31   543     0     111  i
 22053    31   824    32    31   543     0      60  )
 22054    31   824    34    31   543     0      63  {
 22055    31   825     9    31   543     0      19  return
 22056    31   825    16    31   543     0     111  getFloat
 22057    31   825    24    31   543     0      59  (
 22058    31   825    25    31   543     0     111  ix
 22059    31   825    27    31   543     0      59  (
 22060    31   825    28    31   543     0     111  checkIndex
 22061    31   825    38    31   543     0      59  (
 22062    31   825    39    31   543     0     111  i
 22063    31   825    40    31   543     0      66  ,
 22064    31   825    42    31   543     0      59  (
 22065    31   825    43    31   543     0     112  1
 22066    31   825    45    31   543     0      90  <<
 22067    31   825    48    31   543     0     112  2
 22068    31   825    49    31   543     0      60  )
 22069    31   825    50    31   543     0      60  )
 22070    31   825    51    31   543     0      60  )
 22071    31   825    52    31   543     0      60  )
 22072    31   825    53    31   543     0     102  ;
 22073    31   826     5    31   543     0      64  }
 22074    31   826     5    31   543     0    1334  ENDMETHOD
 22075    31   826     5    31   544     0    1335  STARTMETHOD
 22076    31   830     5    31   544     0      41  private
 22077    31   830    13    31   544     0     111  ByteBuffer
 22078    31   830    24    31   544     0     111  putFloat
 22079    31   830    32    31   544     0      59  (
 22080    31   830    33    31   544     0      53  long
 22081    31   830    38    31   544     0     111  a
 22082    31   830    39    31   544     0      66  ,
 22083    31   830    41    31   544     0       4  float
 22084    31   830    47    31   544     0     111  x
 22085    31   830    48    31   544     0      60  )
 22086    31   830    50    31   544     0      63  {
 22087    31   832     9    31   544     0      31  if
 22088    31   832    12    31   544     0      59  (
 22089    31   832    13    31   544     0     111  unaligned
 22090    31   832    22    31   544     0      60  )
 22091    31   832    24    31   544     0      63  {
 22092    31   833    13    31   544     0      36  int
 22093    31   833    17    31   544     0     111  y
 22094    31   833    19    31   544     0      67  =
 22095    31   833    21    31   544     0     111  Float.floatToRawIntBits
 22096    31   833    44    31   544     0      59  (
 22097    31   833    45    31   544     0     111  x
 22098    31   833    46    31   544     0      60  )
 22099    31   833    47    31   544     0     102  ;
 22100    31   834    13    31   544     0     111  unsafe.putInt
 22101    31   834    26    31   544     0      59  (
 22102    31   834    27    31   544     0     111  a
 22103    31   834    28    31   544     0      66  ,
 22104    31   834    30    31   544     0      59  (
 22105    31   834    31    31   544     0     111  nativeByteOrder
 22106    31   834    47    31   544     0      58  ?
 22107    31   834    49    31   544     0     111  y
 22108    31   834    51    31   544     0      65  :
 22109    31   834    53    31   544     0     111  Bits.swap
 22110    31   834    62    31   544     0      59  (
 22111    31   834    63    31   544     0     111  y
 22112    31   834    64    31   544     0      60  )
 22113    31   834    65    31   544     0      60  )
 22114    31   834    66    31   544     0      60  )
 22115    31   834    67    31   544     0     102  ;
 22116    31   835     9    31   544     0      64  }
 22117    31   835    11    31   544     0      48  else
 22118    31   835    16    31   544     0      63  {
 22119    31   836    13    31   544     0     111  Bits.putFloat
 22120    31   836    26    31   544     0      59  (
 22121    31   836    27    31   544     0     111  a
 22122    31   836    28    31   544     0      66  ,
 22123    31   836    30    31   544     0     111  x
 22124    31   836    31    31   544     0      66  ,
 22125    31   836    33    31   544     0     111  bigEndian
 22126    31   836    42    31   544     0      60  )
 22127    31   836    43    31   544     0     102  ;
 22128    31   837     9    31   544     0      64  }
 22129    31   838     9    31   544     0      19  return
 22130    31   838    16    31   544     0      44  this
 22131    31   838    20    31   544     0     102  ;
 22132    31   842     5    31   544     0      64  }
 22133    31   842     5    31   544     0    1336  ENDMETHOD
 22134    31   842     5    31   545     0    1337  STARTMETHOD
 22135    31   844     5    31   545     0      10  public
 22136    31   844    12    31   545     0     111  ByteBuffer
 22137    31   844    23    31   545     0     111  putFloat
 22138    31   844    31    31   545     0      59  (
 22139    31   844    32    31   545     0       4  float
 22140    31   844    38    31   545     0     111  x
 22141    31   844    39    31   545     0      60  )
 22142    31   844    41    31   545     0      63  {
 22143    31   846     9    31   545     0     111  putFloat
 22144    31   846    17    31   545     0      59  (
 22145    31   846    18    31   545     0     111  ix
 22146    31   846    20    31   545     0      59  (
 22147    31   846    21    31   545     0     111  nextPutIndex
 22148    31   846    33    31   545     0      59  (
 22149    31   846    34    31   545     0      59  (
 22150    31   846    35    31   545     0     112  1
 22151    31   846    37    31   545     0      90  <<
 22152    31   846    40    31   545     0     112  2
 22153    31   846    41    31   545     0      60  )
 22154    31   846    42    31   545     0      60  )
 22155    31   846    43    31   545     0      60  )
 22156    31   846    44    31   545     0      66  ,
 22157    31   846    46    31   545     0     111  x
 22158    31   846    47    31   545     0      60  )
 22159    31   846    48    31   545     0     102  ;
 22160    31   847     9    31   545     0      19  return
 22161    31   847    16    31   545     0      44  this
 22162    31   847    20    31   545     0     102  ;
 22163    31   851     5    31   545     0      64  }
 22164    31   851     5    31   545     0    1338  ENDMETHOD
 22165    31   851     5    31   546     0    1339  STARTMETHOD
 22166    31   853     5    31   546     0      10  public
 22167    31   853    12    31   546     0     111  ByteBuffer
 22168    31   853    23    31   546     0     111  putFloat
 22169    31   853    31    31   546     0      59  (
 22170    31   853    32    31   546     0      36  int
 22171    31   853    36    31   546     0     111  i
 22172    31   853    37    31   546     0      66  ,
 22173    31   853    39    31   546     0       4  float
 22174    31   853    45    31   546     0     111  x
 22175    31   853    46    31   546     0      60  )
 22176    31   853    48    31   546     0      63  {
 22177    31   855     9    31   546     0     111  putFloat
 22178    31   855    17    31   546     0      59  (
 22179    31   855    18    31   546     0     111  ix
 22180    31   855    20    31   546     0      59  (
 22181    31   855    21    31   546     0     111  checkIndex
 22182    31   855    31    31   546     0      59  (
 22183    31   855    32    31   546     0     111  i
 22184    31   855    33    31   546     0      66  ,
 22185    31   855    35    31   546     0      59  (
 22186    31   855    36    31   546     0     112  1
 22187    31   855    38    31   546     0      90  <<
 22188    31   855    41    31   546     0     112  2
 22189    31   855    42    31   546     0      60  )
 22190    31   855    43    31   546     0      60  )
 22191    31   855    44    31   546     0      60  )
 22192    31   855    45    31   546     0      66  ,
 22193    31   855    47    31   546     0     111  x
 22194    31   855    48    31   546     0      60  )
 22195    31   855    49    31   546     0     102  ;
 22196    31   856     9    31   546     0      19  return
 22197    31   856    16    31   546     0      44  this
 22198    31   856    20    31   546     0     102  ;
 22199    31   860     5    31   546     0      64  }
 22200    31   860     5    31   546     0    1340  ENDMETHOD
 22201    31   860     5    31   547     0    1341  STARTMETHOD
 22202    31   862     5    31   547     0      10  public
 22203    31   862    12    31   547     0     111  FloatBuffer
 22204    31   862    24    31   547     0     111  asFloatBuffer
 22205    31   862    37    31   547     0      59  (
 22206    31   862    38    31   547     0      60  )
 22207    31   862    40    31   547     0      63  {
 22208    31   863     9    31   547     1      36  int
 22209    31   863    13    31   547     1     111  off
 22210    31   863    17    31   547     1      67  =
 22211    31   863    19    31   547     1     111  this.position
 22212    31   863    32    31   547     1      59  (
 22213    31   863    33    31   547     1      60  )
 22214    31   863    34    31   547     1     102  ;
 22215    31   864     9    31   547     1      36  int
 22216    31   864    13    31   547     1     111  lim
 22217    31   864    17    31   547     1      67  =
 22218    31   864    19    31   547     1     111  this.limit
 22219    31   864    29    31   547     1      59  (
 22220    31   864    30    31   547     1      60  )
 22221    31   864    31    31   547     1     102  ;
 22222    31   865     9    31   547     0     111  assert
 22223    31   865    16    31   547     0      59  (
 22224    31   865    17    31   547     0     111  off
 22225    31   865    21    31   547     0      92  <=
 22226    31   865    24    31   547     0     111  lim
 22227    31   865    27    31   547     0      60  )
 22228    31   865    28    31   547     0     102  ;
 22229    31   866     9    31   547     0      36  int
 22230    31   866    13    31   547     0     111  rem
 22231    31   866    17    31   547     0      67  =
 22232    31   866    19    31   547     0      59  (
 22233    31   866    20    31   547     0     111  off
 22234    31   866    24    31   547     0      92  <=
 22235    31   866    27    31   547     0     111  lim
 22236    31   866    31    31   547     0      58  ?
 22237    31   866    33    31   547     0     111  lim
 22238    31   866    37    31   547     0      77  -
 22239    31   866    39    31   547     0     111  off
 22240    31   866    43    31   547     0      65  :
 22241    31   866    45    31   547     0     112  0
 22242    31   866    46    31   547     0      60  )
 22243    31   866    47    31   547     0     102  ;
 22244    31   868     9    31   547     0      36  int
 22245    31   868    13    31   547     0     111  size
 22246    31   868    18    31   547     0      67  =
 22247    31   868    20    31   547     0     111  rem
 22248    31   868    24    31   547     0      84  >>
 22249    31   868    27    31   547     0     112  2
 22250    31   868    28    31   547     0     102  ;
 22251    31   869     9    31   547     0      31  if
 22252    31   869    12    31   547     0      59  (
 22253    31   869    13    31   547     0      69  !
 22254    31   869    14    31   547     0     111  unaligned
 22255    31   869    24    31   547     0     101  &&
 22256    31   869    27    31   547     0      59  (
 22257    31   869    28    31   547     0      59  (
 22258    31   869    29    31   547     0     111  address
 22259    31   869    37    31   547     0      74  +
 22260    31   869    39    31   547     0     111  off
 22261    31   869    42    31   547     0      60  )
 22262    31   869    44    31   547     0      82  %
 22263    31   869    46    31   547     0      59  (
 22264    31   869    47    31   547     0     112  1
 22265    31   869    49    31   547     0      90  <<
 22266    31   869    52    31   547     0     112  2
 22267    31   869    53    31   547     0      60  )
 22268    31   869    55    31   547     0      71  !=
 22269    31   869    58    31   547     0     112  0
 22270    31   869    59    31   547     0      60  )
 22271    31   869    60    31   547     0      60  )
 22272    31   869    62    31   547     0      63  {
 22273    31   870    13    31   547     0      19  return
 22274    31   870    20    31   547     0      59  (
 22275    31   870    21    31   547     0     111  bigEndian
 22276    31   871    21    31   547     0      58  ?
 22277    31   871    23    31   547     0      59  (
 22278    31   871    24    31   547     0     111  FloatBuffer
 22279    31   871    35    31   547     0      60  )
 22280    31   871    36    31   547     0      59  (
 22281    31   871    37    31   547     0      15  new
 22282    31   871    41    31   547     0     111  ByteBufferAsFloatBufferB
 22283    31   871    65    31   547     0      59  (
 22284    31   871    66    31   547     0      44  this
 22285    31   871    70    31   547     0      66  ,
 22286    31   872    72    31   547     0      77  -
 22287    31   872    73    31   547     0     112  1
 22288    31   872    74    31   547     0      66  ,
 22289    31   873    72    31   547     0     112  0
 22290    31   873    73    31   547     0      66  ,
 22291    31   874    72    31   547     1     111  size
 22292    31   874    76    31   547     1      66  ,
 22293    31   875    72    31   547     1     111  size
 22294    31   875    76    31   547     1      66  ,
 22295    31   876    72    31   547     0     111  off
 22296    31   876    75    31   547     0      60  )
 22297    31   876    76    31   547     0      60  )
 22298    31   877    21    31   547     0      65  :
 22299    31   877    23    31   547     0      59  (
 22300    31   877    24    31   547     0     111  FloatBuffer
 22301    31   877    35    31   547     0      60  )
 22302    31   877    36    31   547     0      59  (
 22303    31   877    37    31   547     0      15  new
 22304    31   877    41    31   547     0     111  ByteBufferAsFloatBufferL
 22305    31   877    65    31   547     0      59  (
 22306    31   877    66    31   547     0      44  this
 22307    31   877    70    31   547     0      66  ,
 22308    31   878    72    31   547     0      77  -
 22309    31   878    73    31   547     0     112  1
 22310    31   878    74    31   547     0      66  ,
 22311    31   879    72    31   547     0     112  0
 22312    31   879    73    31   547     0      66  ,
 22313    31   880    72    31   547     1     111  size
 22314    31   880    76    31   547     1      66  ,
 22315    31   881    72    31   547     1     111  size
 22316    31   881    76    31   547     1      66  ,
 22317    31   882    72    31   547     0     111  off
 22318    31   882    75    31   547     0      60  )
 22319    31   882    76    31   547     0      60  )
 22320    31   882    77    31   547     0      60  )
 22321    31   882    78    31   547     0     102  ;
 22322    31   883     9    31   547     0      64  }
 22323    31   883    11    31   547     0      48  else
 22324    31   883    16    31   547     0      63  {
 22325    31   884    13    31   547     0      19  return
 22326    31   884    20    31   547     0      59  (
 22327    31   884    21    31   547     0     111  nativeByteOrder
 22328    31   885    21    31   547     0      58  ?
 22329    31   885    23    31   547     0      59  (
 22330    31   885    24    31   547     0     111  FloatBuffer
 22331    31   885    35    31   547     0      60  )
 22332    31   885    36    31   547     0      59  (
 22333    31   885    37    31   547     0      15  new
 22334    31   885    41    31   547     0     111  DirectFloatBufferU
 22335    31   885    59    31   547     0      59  (
 22336    31   885    60    31   547     0      44  this
 22337    31   885    64    31   547     0      66  ,
 22338    31   886    66    31   547     0      77  -
 22339    31   886    67    31   547     0     112  1
 22340    31   886    68    31   547     0      66  ,
 22341    31   887    66    31   547     0     112  0
 22342    31   887    67    31   547     0      66  ,
 22343    31   888    66    31   547     1     111  size
 22344    31   888    70    31   547     1      66  ,
 22345    31   889    66    31   547     1     111  size
 22346    31   889    70    31   547     1      66  ,
 22347    31   890    66    31   547     0     111  off
 22348    31   890    69    31   547     0      60  )
 22349    31   890    70    31   547     0      60  )
 22350    31   891    21    31   547     0      65  :
 22351    31   891    23    31   547     0      59  (
 22352    31   891    24    31   547     0     111  FloatBuffer
 22353    31   891    35    31   547     0      60  )
 22354    31   891    36    31   547     0      59  (
 22355    31   891    37    31   547     0      15  new
 22356    31   891    41    31   547     0     111  DirectFloatBufferS
 22357    31   891    59    31   547     0      59  (
 22358    31   891    60    31   547     0      44  this
 22359    31   891    64    31   547     0      66  ,
 22360    31   892    66    31   547     0      77  -
 22361    31   892    67    31   547     0     112  1
 22362    31   892    68    31   547     0      66  ,
 22363    31   893    66    31   547     0     112  0
 22364    31   893    67    31   547     0      66  ,
 22365    31   894    66    31   547     1     111  size
 22366    31   894    70    31   547     1      66  ,
 22367    31   895    66    31   547     1     111  size
 22368    31   895    70    31   547     1      66  ,
 22369    31   896    66    31   547     0     111  off
 22370    31   896    69    31   547     0      60  )
 22371    31   896    70    31   547     0      60  )
 22372    31   896    71    31   547     0      60  )
 22373    31   896    72    31   547     0     102  ;
 22374    31   897     9    31   547     0      64  }
 22375    31   898     5    31   547     0      64  }
 22376    31   898     5    31   547     0    1342  ENDMETHOD
 22377    31   898     5    31   548     0    1343  STARTMETHOD
 22378    31   903     5    31   548     0      41  private
 22379    31   903    13    31   548     0      32  double
 22380    31   903    20    31   548     0     111  getDouble
 22381    31   903    29    31   548     0      59  (
 22382    31   903    30    31   548     0      53  long
 22383    31   903    35    31   548     0     111  a
 22384    31   903    36    31   548     0      60  )
 22385    31   903    38    31   548     0      63  {
 22386    31   904     9    31   548     0      31  if
 22387    31   904    12    31   548     0      59  (
 22388    31   904    13    31   548     0     111  unaligned
 22389    31   904    22    31   548     0      60  )
 22390    31   904    24    31   548     0      63  {
 22391    31   905    13    31   548     0      53  long
 22392    31   905    18    31   548     0     111  x
 22393    31   905    20    31   548     0      67  =
 22394    31   905    22    31   548     0     111  unsafe.getLong
 22395    31   905    36    31   548     0      59  (
 22396    31   905    37    31   548     0     111  a
 22397    31   905    38    31   548     0      60  )
 22398    31   905    39    31   548     0     102  ;
 22399    31   906    13    31   548     0      19  return
 22400    31   906    20    31   548     0     111  Double.longBitsToDouble
 22401    31   906    43    31   548     0      59  (
 22402    31   906    44    31   548     0     111  nativeByteOrder
 22403    31   906    60    31   548     0      58  ?
 22404    31   906    62    31   548     0     111  x
 22405    31   906    64    31   548     0      65  :
 22406    31   906    66    31   548     0     111  Bits.swap
 22407    31   906    75    31   548     0      59  (
 22408    31   906    76    31   548     0     111  x
 22409    31   906    77    31   548     0      60  )
 22410    31   906    78    31   548     0      60  )
 22411    31   906    79    31   548     0     102  ;
 22412    31   907     9    31   548     0      64  }
 22413    31   908     9    31   548     0      19  return
 22414    31   908    16    31   548     0     111  Bits.getDouble
 22415    31   908    30    31   548     0      59  (
 22416    31   908    31    31   548     0     111  a
 22417    31   908    32    31   548     0      66  ,
 22418    31   908    34    31   548     0     111  bigEndian
 22419    31   908    43    31   548     0      60  )
 22420    31   908    44    31   548     0     102  ;
 22421    31   909     5    31   548     0      64  }
 22422    31   909     5    31   548     0    1344  ENDMETHOD
 22423    31   909     5    31   549     0    1345  STARTMETHOD
 22424    31   911     5    31   549     0      10  public
 22425    31   911    12    31   549     0      32  double
 22426    31   911    19    31   549     0     111  getDouble
 22427    31   911    28    31   549     0      59  (
 22428    31   911    29    31   549     0      60  )
 22429    31   911    31    31   549     0      63  {
 22430    31   912     9    31   549     0      19  return
 22431    31   912    16    31   549     0     111  getDouble
 22432    31   912    25    31   549     0      59  (
 22433    31   912    26    31   549     0     111  ix
 22434    31   912    28    31   549     0      59  (
 22435    31   912    29    31   549     0     111  nextGetIndex
 22436    31   912    41    31   549     0      59  (
 22437    31   912    42    31   549     0      59  (
 22438    31   912    43    31   549     0     112  1
 22439    31   912    45    31   549     0      90  <<
 22440    31   912    48    31   549     0     112  3
 22441    31   912    49    31   549     0      60  )
 22442    31   912    50    31   549     0      60  )
 22443    31   912    51    31   549     0      60  )
 22444    31   912    52    31   549     0      60  )
 22445    31   912    53    31   549     0     102  ;
 22446    31   913     5    31   549     0      64  }
 22447    31   913     5    31   549     0    1346  ENDMETHOD
 22448    31   913     5    31   550     0    1347  STARTMETHOD
 22449    31   915     5    31   550     0      10  public
 22450    31   915    12    31   550     0      32  double
 22451    31   915    19    31   550     0     111  getDouble
 22452    31   915    28    31   550     0      59  (
 22453    31   915    29    31   550     0      36  int
 22454    31   915    33    31   550     0     111  i
 22455    31   915    34    31   550     0      60  )
 22456    31   915    36    31   550     0      63  {
 22457    31   916     9    31   550     0      19  return
 22458    31   916    16    31   550     0     111  getDouble
 22459    31   916    25    31   550     0      59  (
 22460    31   916    26    31   550     0     111  ix
 22461    31   916    28    31   550     0      59  (
 22462    31   916    29    31   550     0     111  checkIndex
 22463    31   916    39    31   550     0      59  (
 22464    31   916    40    31   550     0     111  i
 22465    31   916    41    31   550     0      66  ,
 22466    31   916    43    31   550     0      59  (
 22467    31   916    44    31   550     0     112  1
 22468    31   916    46    31   550     0      90  <<
 22469    31   916    49    31   550     0     112  3
 22470    31   916    50    31   550     0      60  )
 22471    31   916    51    31   550     0      60  )
 22472    31   916    52    31   550     0      60  )
 22473    31   916    53    31   550     0      60  )
 22474    31   916    54    31   550     0     102  ;
 22475    31   917     5    31   550     0      64  }
 22476    31   917     5    31   550     0    1348  ENDMETHOD
 22477    31   917     5    31   551     0    1349  STARTMETHOD
 22478    31   921     5    31   551     0      41  private
 22479    31   921    13    31   551     0     111  ByteBuffer
 22480    31   921    24    31   551     0     111  putDouble
 22481    31   921    33    31   551     0      59  (
 22482    31   921    34    31   551     0      53  long
 22483    31   921    39    31   551     0     111  a
 22484    31   921    40    31   551     0      66  ,
 22485    31   921    42    31   551     0      32  double
 22486    31   921    49    31   551     0     111  x
 22487    31   921    50    31   551     0      60  )
 22488    31   921    52    31   551     0      63  {
 22489    31   923     9    31   551     0      31  if
 22490    31   923    12    31   551     0      59  (
 22491    31   923    13    31   551     0     111  unaligned
 22492    31   923    22    31   551     0      60  )
 22493    31   923    24    31   551     0      63  {
 22494    31   924    13    31   551     0      53  long
 22495    31   924    18    31   551     0     111  y
 22496    31   924    20    31   551     0      67  =
 22497    31   924    22    31   551     0     111  Double.doubleToRawLongBits
 22498    31   924    48    31   551     0      59  (
 22499    31   924    49    31   551     0     111  x
 22500    31   924    50    31   551     0      60  )
 22501    31   924    51    31   551     0     102  ;
 22502    31   925    13    31   551     0     111  unsafe.putLong
 22503    31   925    27    31   551     0      59  (
 22504    31   925    28    31   551     0     111  a
 22505    31   925    29    31   551     0      66  ,
 22506    31   925    31    31   551     0      59  (
 22507    31   925    32    31   551     0     111  nativeByteOrder
 22508    31   925    48    31   551     0      58  ?
 22509    31   925    50    31   551     0     111  y
 22510    31   925    52    31   551     0      65  :
 22511    31   925    54    31   551     0     111  Bits.swap
 22512    31   925    63    31   551     0      59  (
 22513    31   925    64    31   551     0     111  y
 22514    31   925    65    31   551     0      60  )
 22515    31   925    66    31   551     0      60  )
 22516    31   925    67    31   551     0      60  )
 22517    31   925    68    31   551     0     102  ;
 22518    31   926     9    31   551     0      64  }
 22519    31   926    11    31   551     0      48  else
 22520    31   926    16    31   551     0      63  {
 22521    31   927    13    31   551     0     111  Bits.putDouble
 22522    31   927    27    31   551     0      59  (
 22523    31   927    28    31   551     0     111  a
 22524    31   927    29    31   551     0      66  ,
 22525    31   927    31    31   551     0     111  x
 22526    31   927    32    31   551     0      66  ,
 22527    31   927    34    31   551     0     111  bigEndian
 22528    31   927    43    31   551     0      60  )
 22529    31   927    44    31   551     0     102  ;
 22530    31   928     9    31   551     0      64  }
 22531    31   929     9    31   551     0      19  return
 22532    31   929    16    31   551     0      44  this
 22533    31   929    20    31   551     0     102  ;
 22534    31   933     5    31   551     0      64  }
 22535    31   933     5    31   551     0    1350  ENDMETHOD
 22536    31   933     5    31   552     0    1351  STARTMETHOD
 22537    31   935     5    31   552     0      10  public
 22538    31   935    12    31   552     0     111  ByteBuffer
 22539    31   935    23    31   552     0     111  putDouble
 22540    31   935    32    31   552     0      59  (
 22541    31   935    33    31   552     0      32  double
 22542    31   935    40    31   552     0     111  x
 22543    31   935    41    31   552     0      60  )
 22544    31   935    43    31   552     0      63  {
 22545    31   937     9    31   552     0     111  putDouble
 22546    31   937    18    31   552     0      59  (
 22547    31   937    19    31   552     0     111  ix
 22548    31   937    21    31   552     0      59  (
 22549    31   937    22    31   552     0     111  nextPutIndex
 22550    31   937    34    31   552     0      59  (
 22551    31   937    35    31   552     0      59  (
 22552    31   937    36    31   552     0     112  1
 22553    31   937    38    31   552     0      90  <<
 22554    31   937    41    31   552     0     112  3
 22555    31   937    42    31   552     0      60  )
 22556    31   937    43    31   552     0      60  )
 22557    31   937    44    31   552     0      60  )
 22558    31   937    45    31   552     0      66  ,
 22559    31   937    47    31   552     0     111  x
 22560    31   937    48    31   552     0      60  )
 22561    31   937    49    31   552     0     102  ;
 22562    31   938     9    31   552     0      19  return
 22563    31   938    16    31   552     0      44  this
 22564    31   938    20    31   552     0     102  ;
 22565    31   942     5    31   552     0      64  }
 22566    31   942     5    31   552     0    1352  ENDMETHOD
 22567    31   942     5    31   553     0    1353  STARTMETHOD
 22568    31   944     5    31   553     0      10  public
 22569    31   944    12    31   553     0     111  ByteBuffer
 22570    31   944    23    31   553     0     111  putDouble
 22571    31   944    32    31   553     0      59  (
 22572    31   944    33    31   553     0      36  int
 22573    31   944    37    31   553     0     111  i
 22574    31   944    38    31   553     0      66  ,
 22575    31   944    40    31   553     0      32  double
 22576    31   944    47    31   553     0     111  x
 22577    31   944    48    31   553     0      60  )
 22578    31   944    50    31   553     0      63  {
 22579    31   946     9    31   553     0     111  putDouble
 22580    31   946    18    31   553     0      59  (
 22581    31   946    19    31   553     0     111  ix
 22582    31   946    21    31   553     0      59  (
 22583    31   946    22    31   553     0     111  checkIndex
 22584    31   946    32    31   553     0      59  (
 22585    31   946    33    31   553     0     111  i
 22586    31   946    34    31   553     0      66  ,
 22587    31   946    36    31   553     0      59  (
 22588    31   946    37    31   553     0     112  1
 22589    31   946    39    31   553     0      90  <<
 22590    31   946    42    31   553     0     112  3
 22591    31   946    43    31   553     0      60  )
 22592    31   946    44    31   553     0      60  )
 22593    31   946    45    31   553     0      60  )
 22594    31   946    46    31   553     0      66  ,
 22595    31   946    48    31   553     0     111  x
 22596    31   946    49    31   553     0      60  )
 22597    31   946    50    31   553     0     102  ;
 22598    31   947     9    31   553     0      19  return
 22599    31   947    16    31   553     0      44  this
 22600    31   947    20    31   553     0     102  ;
 22601    31   951     5    31   553     0      64  }
 22602    31   951     5    31   553     0    1354  ENDMETHOD
 22603    31   951     5    31   554     0    1355  STARTMETHOD
 22604    31   953     5    31   554     0      10  public
 22605    31   953    12    31   554     0     111  DoubleBuffer
 22606    31   953    25    31   554     0     111  asDoubleBuffer
 22607    31   953    39    31   554     0      59  (
 22608    31   953    40    31   554     0      60  )
 22609    31   953    42    31   554     0      63  {
 22610    31   954     9    31   554     1      36  int
 22611    31   954    13    31   554     1     111  off
 22612    31   954    17    31   554     1      67  =
 22613    31   954    19    31   554     1     111  this.position
 22614    31   954    32    31   554     1      59  (
 22615    31   954    33    31   554     1      60  )
 22616    31   954    34    31   554     1     102  ;
 22617    31   955     9    31   554     1      36  int
 22618    31   955    13    31   554     1     111  lim
 22619    31   955    17    31   554     1      67  =
 22620    31   955    19    31   554     1     111  this.limit
 22621    31   955    29    31   554     1      59  (
 22622    31   955    30    31   554     1      60  )
 22623    31   955    31    31   554     1     102  ;
 22624    31   956     9    31   554     0     111  assert
 22625    31   956    16    31   554     0      59  (
 22626    31   956    17    31   554     0     111  off
 22627    31   956    21    31   554     0      92  <=
 22628    31   956    24    31   554     0     111  lim
 22629    31   956    27    31   554     0      60  )
 22630    31   956    28    31   554     0     102  ;
 22631    31   957     9    31   554     0      36  int
 22632    31   957    13    31   554     0     111  rem
 22633    31   957    17    31   554     0      67  =
 22634    31   957    19    31   554     0      59  (
 22635    31   957    20    31   554     0     111  off
 22636    31   957    24    31   554     0      92  <=
 22637    31   957    27    31   554     0     111  lim
 22638    31   957    31    31   554     0      58  ?
 22639    31   957    33    31   554     0     111  lim
 22640    31   957    37    31   554     0      77  -
 22641    31   957    39    31   554     0     111  off
 22642    31   957    43    31   554     0      65  :
 22643    31   957    45    31   554     0     112  0
 22644    31   957    46    31   554     0      60  )
 22645    31   957    47    31   554     0     102  ;
 22646    31   959     9    31   554     0      36  int
 22647    31   959    13    31   554     0     111  size
 22648    31   959    18    31   554     0      67  =
 22649    31   959    20    31   554     0     111  rem
 22650    31   959    24    31   554     0      84  >>
 22651    31   959    27    31   554     0     112  3
 22652    31   959    28    31   554     0     102  ;
 22653    31   960     9    31   554     0      31  if
 22654    31   960    12    31   554     0      59  (
 22655    31   960    13    31   554     0      69  !
 22656    31   960    14    31   554     0     111  unaligned
 22657    31   960    24    31   554     0     101  &&
 22658    31   960    27    31   554     0      59  (
 22659    31   960    28    31   554     0      59  (
 22660    31   960    29    31   554     0     111  address
 22661    31   960    37    31   554     0      74  +
 22662    31   960    39    31   554     0     111  off
 22663    31   960    42    31   554     0      60  )
 22664    31   960    44    31   554     0      82  %
 22665    31   960    46    31   554     0      59  (
 22666    31   960    47    31   554     0     112  1
 22667    31   960    49    31   554     0      90  <<
 22668    31   960    52    31   554     0     112  3
 22669    31   960    53    31   554     0      60  )
 22670    31   960    55    31   554     0      71  !=
 22671    31   960    58    31   554     0     112  0
 22672    31   960    59    31   554     0      60  )
 22673    31   960    60    31   554     0      60  )
 22674    31   960    62    31   554     0      63  {
 22675    31   961    13    31   554     0      19  return
 22676    31   961    20    31   554     0      59  (
 22677    31   961    21    31   554     0     111  bigEndian
 22678    31   962    21    31   554     0      58  ?
 22679    31   962    23    31   554     0      59  (
 22680    31   962    24    31   554     0     111  DoubleBuffer
 22681    31   962    36    31   554     0      60  )
 22682    31   962    37    31   554     0      59  (
 22683    31   962    38    31   554     0      15  new
 22684    31   962    42    31   554     0     111  ByteBufferAsDoubleBufferB
 22685    31   962    67    31   554     0      59  (
 22686    31   962    68    31   554     0      44  this
 22687    31   962    72    31   554     0      66  ,
 22688    31   963    72    31   554     0      77  -
 22689    31   963    73    31   554     0     112  1
 22690    31   963    74    31   554     0      66  ,
 22691    31   964    72    31   554     0     112  0
 22692    31   964    73    31   554     0      66  ,
 22693    31   965    72    31   554     1     111  size
 22694    31   965    76    31   554     1      66  ,
 22695    31   966    72    31   554     1     111  size
 22696    31   966    76    31   554     1      66  ,
 22697    31   967    72    31   554     0     111  off
 22698    31   967    75    31   554     0      60  )
 22699    31   967    76    31   554     0      60  )
 22700    31   968    21    31   554     0      65  :
 22701    31   968    23    31   554     0      59  (
 22702    31   968    24    31   554     0     111  DoubleBuffer
 22703    31   968    36    31   554     0      60  )
 22704    31   968    37    31   554     0      59  (
 22705    31   968    38    31   554     0      15  new
 22706    31   968    42    31   554     0     111  ByteBufferAsDoubleBufferL
 22707    31   968    67    31   554     0      59  (
 22708    31   968    68    31   554     0      44  this
 22709    31   968    72    31   554     0      66  ,
 22710    31   969    72    31   554     0      77  -
 22711    31   969    73    31   554     0     112  1
 22712    31   969    74    31   554     0      66  ,
 22713    31   970    72    31   554     0     112  0
 22714    31   970    73    31   554     0      66  ,
 22715    31   971    72    31   554     1     111  size
 22716    31   971    76    31   554     1      66  ,
 22717    31   972    72    31   554     1     111  size
 22718    31   972    76    31   554     1      66  ,
 22719    31   973    72    31   554     0     111  off
 22720    31   973    75    31   554     0      60  )
 22721    31   973    76    31   554     0      60  )
 22722    31   973    77    31   554     0      60  )
 22723    31   973    78    31   554     0     102  ;
 22724    31   974     9    31   554     0      64  }
 22725    31   974    11    31   554     0      48  else
 22726    31   974    16    31   554     0      63  {
 22727    31   975    13    31   554     0      19  return
 22728    31   975    20    31   554     0      59  (
 22729    31   975    21    31   554     0     111  nativeByteOrder
 22730    31   976    21    31   554     0      58  ?
 22731    31   976    23    31   554     0      59  (
 22732    31   976    24    31   554     0     111  DoubleBuffer
 22733    31   976    36    31   554     0      60  )
 22734    31   976    37    31   554     0      59  (
 22735    31   976    38    31   554     0      15  new
 22736    31   976    42    31   554     0     111  DirectDoubleBufferU
 22737    31   976    61    31   554     0      59  (
 22738    31   976    62    31   554     0      44  this
 22739    31   976    66    31   554     0      66  ,
 22740    31   977    66    31   554     0      77  -
 22741    31   977    67    31   554     0     112  1
 22742    31   977    68    31   554     0      66  ,
 22743    31   978    66    31   554     0     112  0
 22744    31   978    67    31   554     0      66  ,
 22745    31   979    66    31   554     1     111  size
 22746    31   979    70    31   554     1      66  ,
 22747    31   980    66    31   554     1     111  size
 22748    31   980    70    31   554     1      66  ,
 22749    31   981    66    31   554     0     111  off
 22750    31   981    69    31   554     0      60  )
 22751    31   981    70    31   554     0      60  )
 22752    31   982    21    31   554     0      65  :
 22753    31   982    23    31   554     0      59  (
 22754    31   982    24    31   554     0     111  DoubleBuffer
 22755    31   982    36    31   554     0      60  )
 22756    31   982    37    31   554     0      59  (
 22757    31   982    38    31   554     0      15  new
 22758    31   982    42    31   554     0     111  DirectDoubleBufferS
 22759    31   982    61    31   554     0      59  (
 22760    31   982    62    31   554     0      44  this
 22761    31   982    66    31   554     0      66  ,
 22762    31   983    66    31   554     0      77  -
 22763    31   983    67    31   554     0     112  1
 22764    31   983    68    31   554     0      66  ,
 22765    31   984    66    31   554     0     112  0
 22766    31   984    67    31   554     0      66  ,
 22767    31   985    66    31   554     1     111  size
 22768    31   985    70    31   554     1      66  ,
 22769    31   986    66    31   554     1     111  size
 22770    31   986    70    31   554     1      66  ,
 22771    31   987    66    31   554     0     111  off
 22772    31   987    69    31   554     0      60  )
 22773    31   987    70    31   554     0      60  )
 22774    31   987    71    31   554     0      60  )
 22775    31   987    72    31   554     0     102  ;
 22776    31   988     9    31   554     0      64  }
 22777    31   989     5    31   554     0      64  }
 22778    31   989     5    31   554     0    1356  ENDMETHOD
 22779    31   991     1    31    -1     0      64  }
 22780    31   991     1    31    -1     1    1357  ENDCLASS
 22781    31   991     1    -1    -1     1    1358  ENDFILE C:\javasrc\java\nio\DirectByteBuffer.java
 22782    32     1     1    -1    -1     1    1359  STARTFILE C:\javasrc\java\nio\DirectByteBufferR.java
 22783    32    28     1    -1    -1     0       5  package
 22784    32    28     9    -1    -1     0     111  java.nio
 22785    32    28    17    -1    -1     0     102  ;
 22786    32    30     1    -1    -1     1      49  import
 22787    32    30     8    -1    -1     1     111  sun.misc.Cleaner
 22788    32    30    24    -1    -1     1     102  ;
 22789    32    31     1    -1    -1     1      49  import
 22790    32    31     8    -1    -1     1     111  sun.misc.Unsafe
 22791    32    31    23    -1    -1     1     102  ;
 22792    32    32     1    -1    -1     1      49  import
 22793    32    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 22794    32    32    31    -1    -1     1     102  ;
 22795    32    33     1    -1    -1     1      49  import
 22796    32    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 22797    32    33    34    -1    -1     1     102  ;
 22798    32    36     1    32    -1     0    1360  STARTCLASS
 22799    32    36     1    32    -1     0      24  class
 22800    32    36     7    32    -1     0     111  DirectByteBufferR
 22801    32    40     5    32    -1     0      38  extends
 22802    32    40    13    32    -1     0     111  DirectByteBuffer
 22803    32    42     5    32    -1     0      17  implements
 22804    32    42    16    32    -1     0     111  DirectBuffer
 22805    32    43     1    32    -1     0      63  {
 22806    32    43     1    32   555     0    1361  STARTMETHOD
 22807    32   110     5    32   555     0     111  DirectByteBufferR
 22808    32   110    22    32   555     0      59  (
 22809    32   110    23    32   555     0      36  int
 22810    32   110    27    32   555     0     111  cap
 22811    32   110    30    32   555     0      60  )
 22812    32   110    32    32   555     0      63  {
 22813    32   131     9    32   555     0      27  super
 22814    32   131    14    32   555     0      59  (
 22815    32   131    15    32   555     0     111  cap
 22816    32   131    18    32   555     0      60  )
 22817    32   131    19    32   555     0     102  ;
 22818    32   133     5    32   555     0      64  }
 22819    32   133     5    32   555     0    1362  ENDMETHOD
 22820    32   133     5    32   556     0    1363  STARTMETHOD
 22821    32   149     5    32   556     0      23  protected
 22822    32   149    15    32   556     0     111  DirectByteBufferR
 22823    32   149    32    32   556     0      59  (
 22824    32   149    33    32   556     0      36  int
 22825    32   149    37    32   556     0     111  cap
 22826    32   149    40    32   556     0      66  ,
 22827    32   149    42    32   556     0      53  long
 22828    32   149    47    32   556     0     111  addr
 22829    32   149    51    32   556     0      66  ,
 22830    32   149    53    32   556     0     111  Runnable
 22831    32   149    62    32   556     0     111  unmapper
 22832    32   149    70    32   556     0      60  )
 22833    32   149    72    32   556     0      63  {
 22834    32   156     9    32   556     0      27  super
 22835    32   156    14    32   556     0      59  (
 22836    32   156    15    32   556     0     111  cap
 22837    32   156    18    32   556     0      66  ,
 22838    32   156    20    32   556     0     111  addr
 22839    32   156    24    32   556     0      66  ,
 22840    32   156    26    32   556     0     111  unmapper
 22841    32   156    34    32   556     0      60  )
 22842    32   156    35    32   556     0     102  ;
 22843    32   158     5    32   556     0      64  }
 22844    32   158     5    32   556     0    1364  ENDMETHOD
 22845    32   158     5    32   557     0    1365  STARTMETHOD
 22846    32   164     5    32   557     0     111  DirectByteBufferR
 22847    32   164    22    32   557     0      59  (
 22848    32   164    23    32   557     0     111  DirectBuffer
 22849    32   164    36    32   557     0     111  db
 22850    32   164    38    32   557     0      66  ,
 22851    32   165    32    32   557     0      36  int
 22852    32   165    36    32   557     0     111  mark
 22853    32   165    40    32   557     0      66  ,
 22854    32   165    42    32   557     0      36  int
 22855    32   165    46    32   557     0     111  pos
 22856    32   165    49    32   557     0      66  ,
 22857    32   165    51    32   557     0      36  int
 22858    32   165    55    32   557     0     111  lim
 22859    32   165    58    32   557     0      66  ,
 22860    32   165    60    32   557     0      36  int
 22861    32   165    64    32   557     0     111  cap
 22862    32   165    67    32   557     0      66  ,
 22863    32   166    32    32   557     0      36  int
 22864    32   166    36    32   557     0     111  off
 22865    32   166    39    32   557     0      60  )
 22866    32   167     5    32   557     0      63  {
 22867    32   176     9    32   557     0      27  super
 22868    32   176    14    32   557     0      59  (
 22869    32   176    15    32   557     0     111  db
 22870    32   176    17    32   557     0      66  ,
 22871    32   176    19    32   557     0     111  mark
 22872    32   176    23    32   557     0      66  ,
 22873    32   176    25    32   557     0     111  pos
 22874    32   176    28    32   557     0      66  ,
 22875    32   176    30    32   557     0     111  lim
 22876    32   176    33    32   557     0      66  ,
 22877    32   176    35    32   557     0     111  cap
 22878    32   176    38    32   557     0      66  ,
 22879    32   176    40    32   557     0     111  off
 22880    32   176    43    32   557     0      60  )
 22881    32   176    44    32   557     0     102  ;
 22882    32   178     5    32   557     0      64  }
 22883    32   178     5    32   557     0    1366  ENDMETHOD
 22884    32   178     5    32   558     0    1367  STARTMETHOD
 22885    32   180     5    32   558     0      10  public
 22886    32   180    12    32   558     0     111  ByteBuffer
 22887    32   180    23    32   558     0     111  slice
 22888    32   180    28    32   558     0      59  (
 22889    32   180    29    32   558     0      60  )
 22890    32   180    31    32   558     0      63  {
 22891    32   181     9    32   558     1      36  int
 22892    32   181    13    32   558     1     111  pos
 22893    32   181    17    32   558     1      67  =
 22894    32   181    19    32   558     1     111  this.position
 22895    32   181    32    32   558     1      59  (
 22896    32   181    33    32   558     1      60  )
 22897    32   181    34    32   558     1     102  ;
 22898    32   182     9    32   558     1      36  int
 22899    32   182    13    32   558     1     111  lim
 22900    32   182    17    32   558     1      67  =
 22901    32   182    19    32   558     1     111  this.limit
 22902    32   182    29    32   558     1      59  (
 22903    32   182    30    32   558     1      60  )
 22904    32   182    31    32   558     1     102  ;
 22905    32   183     9    32   558     0     111  assert
 22906    32   183    16    32   558     0      59  (
 22907    32   183    17    32   558     0     111  pos
 22908    32   183    21    32   558     0      92  <=
 22909    32   183    24    32   558     0     111  lim
 22910    32   183    27    32   558     0      60  )
 22911    32   183    28    32   558     0     102  ;
 22912    32   184     9    32   558     0      36  int
 22913    32   184    13    32   558     0     111  rem
 22914    32   184    17    32   558     0      67  =
 22915    32   184    19    32   558     0      59  (
 22916    32   184    20    32   558     0     111  pos
 22917    32   184    24    32   558     0      92  <=
 22918    32   184    27    32   558     0     111  lim
 22919    32   184    31    32   558     0      58  ?
 22920    32   184    33    32   558     0     111  lim
 22921    32   184    37    32   558     0      77  -
 22922    32   184    39    32   558     0     111  pos
 22923    32   184    43    32   558     0      65  :
 22924    32   184    45    32   558     0     112  0
 22925    32   184    46    32   558     0      60  )
 22926    32   184    47    32   558     0     102  ;
 22927    32   185     9    32   558     0      36  int
 22928    32   185    13    32   558     0     111  off
 22929    32   185    17    32   558     0      67  =
 22930    32   185    19    32   558     0      59  (
 22931    32   185    20    32   558     0     111  pos
 22932    32   185    24    32   558     0      90  <<
 22933    32   185    27    32   558     0     112  0
 22934    32   185    28    32   558     0      60  )
 22935    32   185    29    32   558     0     102  ;
 22936    32   186     9    32   558     0     111  assert
 22937    32   186    16    32   558     0      59  (
 22938    32   186    17    32   558     0     111  off
 22939    32   186    21    32   558     0      88  >=
 22940    32   186    24    32   558     0     112  0
 22941    32   186    25    32   558     0      60  )
 22942    32   186    26    32   558     0     102  ;
 22943    32   187     9    32   558     0      19  return
 22944    32   187    16    32   558     0      15  new
 22945    32   187    20    32   558     0     111  DirectByteBufferR
 22946    32   187    37    32   558     0      59  (
 22947    32   187    38    32   558     0      44  this
 22948    32   187    42    32   558     0      66  ,
 22949    32   187    44    32   558     0      77  -
 22950    32   187    45    32   558     0     112  1
 22951    32   187    46    32   558     0      66  ,
 22952    32   187    48    32   558     0     112  0
 22953    32   187    49    32   558     0      66  ,
 22954    32   187    51    32   558     0     111  rem
 22955    32   187    54    32   558     0      66  ,
 22956    32   187    56    32   558     0     111  rem
 22957    32   187    59    32   558     0      66  ,
 22958    32   187    61    32   558     0     111  off
 22959    32   187    64    32   558     0      60  )
 22960    32   187    65    32   558     0     102  ;
 22961    32   188     5    32   558     0      64  }
 22962    32   188     5    32   558     0    1368  ENDMETHOD
 22963    32   188     5    32   559     0    1369  STARTMETHOD
 22964    32   190     5    32   559     0      10  public
 22965    32   190    12    32   559     0     111  ByteBuffer
 22966    32   190    23    32   559     0     111  duplicate
 22967    32   190    32    32   559     0      59  (
 22968    32   190    33    32   559     0      60  )
 22969    32   190    35    32   559     0      63  {
 22970    32   191     9    32   559     0      19  return
 22971    32   191    16    32   559     0      15  new
 22972    32   191    20    32   559     0     111  DirectByteBufferR
 22973    32   191    37    32   559     0      59  (
 22974    32   191    38    32   559     0      44  this
 22975    32   191    42    32   559     0      66  ,
 22976    32   192    47    32   559     1     111  this.markValue
 22977    32   192    61    32   559     1      59  (
 22978    32   192    62    32   559     1      60  )
 22979    32   192    63    32   559     1      66  ,
 22980    32   193    47    32   559     1     111  this.position
 22981    32   193    60    32   559     1      59  (
 22982    32   193    61    32   559     1      60  )
 22983    32   193    62    32   559     1      66  ,
 22984    32   194    47    32   559     1     111  this.limit
 22985    32   194    57    32   559     1      59  (
 22986    32   194    58    32   559     1      60  )
 22987    32   194    59    32   559     1      66  ,
 22988    32   195    47    32   559     1     111  this.capacity
 22989    32   195    60    32   559     1      59  (
 22990    32   195    61    32   559     1      60  )
 22991    32   195    62    32   559     1      66  ,
 22992    32   196    47    32   559     0     112  0
 22993    32   196    48    32   559     0      60  )
 22994    32   196    49    32   559     0     102  ;
 22995    32   197     5    32   559     0      64  }
 22996    32   197     5    32   559     0    1370  ENDMETHOD
 22997    32   197     5    32   560     0    1371  STARTMETHOD
 22998    32   199     5    32   560     0      10  public
 22999    32   199    12    32   560     0     111  ByteBuffer
 23000    32   199    23    32   560     0     111  asReadOnlyBuffer
 23001    32   199    39    32   560     0      59  (
 23002    32   199    40    32   560     0      60  )
 23003    32   199    42    32   560     0      63  {
 23004    32   208     9    32   560     0      19  return
 23005    32   208    16    32   560     0     111  duplicate
 23006    32   208    25    32   560     0      59  (
 23007    32   208    26    32   560     0      60  )
 23008    32   208    27    32   560     0     102  ;
 23009    32   210     5    32   560     0      64  }
 23010    32   210     5    32   560     0    1372  ENDMETHOD
 23011    32   210     5    32   561     0    1373  STARTMETHOD
 23012    32   261     5    32   561     0      10  public
 23013    32   261    12    32   561     0     111  ByteBuffer
 23014    32   261    23    32   561     0     111  put
 23015    32   261    26    32   561     0      59  (
 23016    32   261    27    32   561     0       9  byte
 23017    32   261    32    32   561     0     111  x
 23018    32   261    33    32   561     0      60  )
 23019    32   261    35    32   561     0      63  {
 23020    32   266     9    32   561     0      20  throw
 23021    32   266    15    32   561     0      15  new
 23022    32   266    19    32   561     0     111  ReadOnlyBufferException
 23023    32   266    42    32   561     0      59  (
 23024    32   266    43    32   561     0      60  )
 23025    32   266    44    32   561     0     102  ;
 23026    32   268     5    32   561     0      64  }
 23027    32   268     5    32   561     0    1374  ENDMETHOD
 23028    32   268     5    32   562     0    1375  STARTMETHOD
 23029    32   270     5    32   562     0      10  public
 23030    32   270    12    32   562     0     111  ByteBuffer
 23031    32   270    23    32   562     0     111  put
 23032    32   270    26    32   562     0      59  (
 23033    32   270    27    32   562     0      36  int
 23034    32   270    31    32   562     0     111  i
 23035    32   270    32    32   562     0      66  ,
 23036    32   270    34    32   562     0       9  byte
 23037    32   270    39    32   562     0     111  x
 23038    32   270    40    32   562     0      60  )
 23039    32   270    42    32   562     0      63  {
 23040    32   275     9    32   562     0      20  throw
 23041    32   275    15    32   562     0      15  new
 23042    32   275    19    32   562     0     111  ReadOnlyBufferException
 23043    32   275    42    32   562     0      59  (
 23044    32   275    43    32   562     0      60  )
 23045    32   275    44    32   562     0     102  ;
 23046    32   277     5    32   562     0      64  }
 23047    32   277     5    32   562     0    1376  ENDMETHOD
 23048    32   277     5    32   563     0    1377  STARTMETHOD
 23049    32   279     5    32   563     0      10  public
 23050    32   279    12    32   563     0     111  ByteBuffer
 23051    32   279    23    32   563     0     111  put
 23052    32   279    26    32   563     0      59  (
 23053    32   279    27    32   563     0     111  ByteBuffer
 23054    32   279    38    32   563     0     111  src
 23055    32   279    41    32   563     0      60  )
 23056    32   279    43    32   563     0      63  {
 23057    32   316     9    32   563     0      20  throw
 23058    32   316    15    32   563     0      15  new
 23059    32   316    19    32   563     0     111  ReadOnlyBufferException
 23060    32   316    42    32   563     0      59  (
 23061    32   316    43    32   563     0      60  )
 23062    32   316    44    32   563     0     102  ;
 23063    32   318     5    32   563     0      64  }
 23064    32   318     5    32   563     0    1378  ENDMETHOD
 23065    32   318     5    32   564     0    1379  STARTMETHOD
 23066    32   320     5    32   564     0      10  public
 23067    32   320    12    32   564     0     111  ByteBuffer
 23068    32   320    23    32   564     0     111  put
 23069    32   320    26    32   564     0      59  (
 23070    32   320    27    32   564     0       9  byte
 23071    32   320    31    32   564     0      61  [
 23072    32   320    32    32   564     0      62  ]
 23073    32   320    34    32   564     0     111  src
 23074    32   320    37    32   564     0      66  ,
 23075    32   320    39    32   564     0      36  int
 23076    32   320    43    32   564     0     111  offset
 23077    32   320    49    32   564     0      66  ,
 23078    32   320    51    32   564     0      36  int
 23079    32   320    55    32   564     0     111  length
 23080    32   320    61    32   564     0      60  )
 23081    32   320    63    32   564     0      63  {
 23082    32   343     9    32   564     0      20  throw
 23083    32   343    15    32   564     0      15  new
 23084    32   343    19    32   564     0     111  ReadOnlyBufferException
 23085    32   343    42    32   564     0      59  (
 23086    32   343    43    32   564     0      60  )
 23087    32   343    44    32   564     0     102  ;
 23088    32   345     5    32   564     0      64  }
 23089    32   345     5    32   564     0    1380  ENDMETHOD
 23090    32   345     5    32   565     0    1381  STARTMETHOD
 23091    32   347     5    32   565     0      10  public
 23092    32   347    12    32   565     0     111  ByteBuffer
 23093    32   347    23    32   565     0     111  compact
 23094    32   347    30    32   565     0      59  (
 23095    32   347    31    32   565     0      60  )
 23096    32   347    33    32   565     0      63  {
 23097    32   360     9    32   565     0      20  throw
 23098    32   360    15    32   565     0      15  new
 23099    32   360    19    32   565     0     111  ReadOnlyBufferException
 23100    32   360    42    32   565     0      59  (
 23101    32   360    43    32   565     0      60  )
 23102    32   360    44    32   565     1     102  ;
 23103    32   362     5    32   565     1      64  }
 23104    32   362     5    32   565     0    1382  ENDMETHOD
 23105    32   362     5    32   566     0    1383  STARTMETHOD
 23106    32   364     5    32   566     0      10  public
 23107    32   364    12    32   566     0      39  boolean
 23108    32   364    20    32   566     0     111  isDirect
 23109    32   364    28    32   566     0      59  (
 23110    32   364    29    32   566     0      60  )
 23111    32   364    31    32   566     0      63  {
 23112    32   365     9    32   566     0      19  return
 23113    32   365    16    32   566     0      52  true
 23114    32   365    20    32   566     1     102  ;
 23115    32   366     5    32   566     1      64  }
 23116    32   366     5    32   566     0    1384  ENDMETHOD
 23117    32   366     5    32   567     0    1385  STARTMETHOD
 23118    32   368     5    32   567     0      10  public
 23119    32   368    12    32   567     0      39  boolean
 23120    32   368    20    32   567     0     111  isReadOnly
 23121    32   368    30    32   567     0      59  (
 23122    32   368    31    32   567     0      60  )
 23123    32   368    33    32   567     0      63  {
 23124    32   369     9    32   567     0      19  return
 23125    32   369    16    32   567     0      52  true
 23126    32   369    20    32   567     1     102  ;
 23127    32   370     5    32   567     1      64  }
 23128    32   370     5    32   567     0    1386  ENDMETHOD
 23129    32   370     5    32   568     0    1387  STARTMETHOD
 23130    32   433     5    32   568     0       9  byte
 23131    32   433    10    32   568     0     111  _get
 23132    32   433    14    32   568     0      59  (
 23133    32   433    15    32   568     0      36  int
 23134    32   433    19    32   568     0     111  i
 23135    32   433    20    32   568     0      60  )
 23136    32   433    22    32   568     0      63  {
 23137    32   434     9    32   568     0      19  return
 23138    32   434    16    32   568     0     111  unsafe.getByte
 23139    32   434    30    32   568     0      59  (
 23140    32   434    31    32   568     0     111  address
 23141    32   434    39    32   568     0      74  +
 23142    32   434    41    32   568     0     111  i
 23143    32   434    42    32   568     0      60  )
 23144    32   434    43    32   568     0     102  ;
 23145    32   435     5    32   568     0      64  }
 23146    32   435     5    32   568     0    1388  ENDMETHOD
 23147    32   435     5    32   569     0    1389  STARTMETHOD
 23148    32   437     5    32   569     0      50  void
 23149    32   437    10    32   569     0     111  _put
 23150    32   437    14    32   569     0      59  (
 23151    32   437    15    32   569     0      36  int
 23152    32   437    19    32   569     0     111  i
 23153    32   437    20    32   569     0      66  ,
 23154    32   437    22    32   569     0       9  byte
 23155    32   437    27    32   569     0     111  b
 23156    32   437    28    32   569     0      60  )
 23157    32   437    30    32   569     0      63  {
 23158    32   441     9    32   569     0      20  throw
 23159    32   441    15    32   569     0      15  new
 23160    32   441    19    32   569     0     111  ReadOnlyBufferException
 23161    32   441    42    32   569     0      59  (
 23162    32   441    43    32   569     0      60  )
 23163    32   441    44    32   569     0     102  ;
 23164    32   443     5    32   569     0      64  }
 23165    32   443     5    32   569     0    1390  ENDMETHOD
 23166    32   443     5    32   570     0    1391  STARTMETHOD
 23167    32   466     5    32   570     0      41  private
 23168    32   466    13    32   570     0     111  ByteBuffer
 23169    32   466    24    32   570     0     111  putChar
 23170    32   466    31    32   570     0      59  (
 23171    32   466    32    32   570     0      53  long
 23172    32   466    37    32   570     0     111  a
 23173    32   466    38    32   570     0      66  ,
 23174    32   466    40    32   570     0      40  char
 23175    32   466    45    32   570     0     111  x
 23176    32   466    46    32   570     0      60  )
 23177    32   466    48    32   570     0      63  {
 23178    32   476     9    32   570     0      20  throw
 23179    32   476    15    32   570     0      15  new
 23180    32   476    19    32   570     0     111  ReadOnlyBufferException
 23181    32   476    42    32   570     0      59  (
 23182    32   476    43    32   570     0      60  )
 23183    32   476    44    32   570     0     102  ;
 23184    32   478     5    32   570     0      64  }
 23185    32   478     5    32   570     0    1392  ENDMETHOD
 23186    32   478     5    32   571     0    1393  STARTMETHOD
 23187    32   480     5    32   571     0      10  public
 23188    32   480    12    32   571     0     111  ByteBuffer
 23189    32   480    23    32   571     0     111  putChar
 23190    32   480    30    32   571     0      59  (
 23191    32   480    31    32   571     0      40  char
 23192    32   480    36    32   571     0     111  x
 23193    32   480    37    32   571     0      60  )
 23194    32   480    39    32   571     0      63  {
 23195    32   485     9    32   571     0      20  throw
 23196    32   485    15    32   571     0      15  new
 23197    32   485    19    32   571     0     111  ReadOnlyBufferException
 23198    32   485    42    32   571     0      59  (
 23199    32   485    43    32   571     0      60  )
 23200    32   485    44    32   571     0     102  ;
 23201    32   487     5    32   571     0      64  }
 23202    32   487     5    32   571     0    1394  ENDMETHOD
 23203    32   487     5    32   572     0    1395  STARTMETHOD
 23204    32   489     5    32   572     0      10  public
 23205    32   489    12    32   572     0     111  ByteBuffer
 23206    32   489    23    32   572     0     111  putChar
 23207    32   489    30    32   572     0      59  (
 23208    32   489    31    32   572     0      36  int
 23209    32   489    35    32   572     0     111  i
 23210    32   489    36    32   572     0      66  ,
 23211    32   489    38    32   572     0      40  char
 23212    32   489    43    32   572     0     111  x
 23213    32   489    44    32   572     0      60  )
 23214    32   489    46    32   572     0      63  {
 23215    32   494     9    32   572     0      20  throw
 23216    32   494    15    32   572     0      15  new
 23217    32   494    19    32   572     0     111  ReadOnlyBufferException
 23218    32   494    42    32   572     0      59  (
 23219    32   494    43    32   572     0      60  )
 23220    32   494    44    32   572     0     102  ;
 23221    32   496     5    32   572     0      64  }
 23222    32   496     5    32   572     0    1396  ENDMETHOD
 23223    32   496     5    32   573     0    1397  STARTMETHOD
 23224    32   498     5    32   573     0      10  public
 23225    32   498    12    32   573     0     111  CharBuffer
 23226    32   498    23    32   573     0     111  asCharBuffer
 23227    32   498    35    32   573     0      59  (
 23228    32   498    36    32   573     0      60  )
 23229    32   498    38    32   573     0      63  {
 23230    32   499     9    32   573     1      36  int
 23231    32   499    13    32   573     1     111  off
 23232    32   499    17    32   573     1      67  =
 23233    32   499    19    32   573     1     111  this.position
 23234    32   499    32    32   573     1      59  (
 23235    32   499    33    32   573     1      60  )
 23236    32   499    34    32   573     1     102  ;
 23237    32   500     9    32   573     1      36  int
 23238    32   500    13    32   573     1     111  lim
 23239    32   500    17    32   573     1      67  =
 23240    32   500    19    32   573     1     111  this.limit
 23241    32   500    29    32   573     1      59  (
 23242    32   500    30    32   573     1      60  )
 23243    32   500    31    32   573     1     102  ;
 23244    32   501     9    32   573     0     111  assert
 23245    32   501    16    32   573     0      59  (
 23246    32   501    17    32   573     0     111  off
 23247    32   501    21    32   573     0      92  <=
 23248    32   501    24    32   573     0     111  lim
 23249    32   501    27    32   573     0      60  )
 23250    32   501    28    32   573     0     102  ;
 23251    32   502     9    32   573     0      36  int
 23252    32   502    13    32   573     0     111  rem
 23253    32   502    17    32   573     0      67  =
 23254    32   502    19    32   573     0      59  (
 23255    32   502    20    32   573     0     111  off
 23256    32   502    24    32   573     0      92  <=
 23257    32   502    27    32   573     0     111  lim
 23258    32   502    31    32   573     0      58  ?
 23259    32   502    33    32   573     0     111  lim
 23260    32   502    37    32   573     0      77  -
 23261    32   502    39    32   573     0     111  off
 23262    32   502    43    32   573     0      65  :
 23263    32   502    45    32   573     0     112  0
 23264    32   502    46    32   573     0      60  )
 23265    32   502    47    32   573     0     102  ;
 23266    32   504     9    32   573     0      36  int
 23267    32   504    13    32   573     0     111  size
 23268    32   504    18    32   573     0      67  =
 23269    32   504    20    32   573     0     111  rem
 23270    32   504    24    32   573     0      84  >>
 23271    32   504    27    32   573     0     112  1
 23272    32   504    28    32   573     0     102  ;
 23273    32   505     9    32   573     0      31  if
 23274    32   505    12    32   573     0      59  (
 23275    32   505    13    32   573     0      69  !
 23276    32   505    14    32   573     0     111  unaligned
 23277    32   505    24    32   573     0     101  &&
 23278    32   505    27    32   573     0      59  (
 23279    32   505    28    32   573     0      59  (
 23280    32   505    29    32   573     0     111  address
 23281    32   505    37    32   573     0      74  +
 23282    32   505    39    32   573     0     111  off
 23283    32   505    42    32   573     0      60  )
 23284    32   505    44    32   573     0      82  %
 23285    32   505    46    32   573     0      59  (
 23286    32   505    47    32   573     0     112  1
 23287    32   505    49    32   573     0      90  <<
 23288    32   505    52    32   573     0     112  1
 23289    32   505    53    32   573     0      60  )
 23290    32   505    55    32   573     0      71  !=
 23291    32   505    58    32   573     0     112  0
 23292    32   505    59    32   573     0      60  )
 23293    32   505    60    32   573     0      60  )
 23294    32   505    62    32   573     0      63  {
 23295    32   506    13    32   573     0      19  return
 23296    32   506    20    32   573     0      59  (
 23297    32   506    21    32   573     0     111  bigEndian
 23298    32   507    21    32   573     0      58  ?
 23299    32   507    23    32   573     0      59  (
 23300    32   507    24    32   573     0     111  CharBuffer
 23301    32   507    34    32   573     0      60  )
 23302    32   507    35    32   573     0      59  (
 23303    32   507    36    32   573     0      15  new
 23304    32   507    40    32   573     0     111  ByteBufferAsCharBufferRB
 23305    32   507    64    32   573     0      59  (
 23306    32   507    65    32   573     0      44  this
 23307    32   507    69    32   573     0      66  ,
 23308    32   508    72    32   573     0      77  -
 23309    32   508    73    32   573     0     112  1
 23310    32   508    74    32   573     0      66  ,
 23311    32   509    72    32   573     0     112  0
 23312    32   509    73    32   573     0      66  ,
 23313    32   510    72    32   573     1     111  size
 23314    32   510    76    32   573     1      66  ,
 23315    32   511    72    32   573     1     111  size
 23316    32   511    76    32   573     1      66  ,
 23317    32   512    72    32   573     0     111  off
 23318    32   512    75    32   573     0      60  )
 23319    32   512    76    32   573     0      60  )
 23320    32   513    21    32   573     0      65  :
 23321    32   513    23    32   573     0      59  (
 23322    32   513    24    32   573     0     111  CharBuffer
 23323    32   513    34    32   573     0      60  )
 23324    32   513    35    32   573     0      59  (
 23325    32   513    36    32   573     0      15  new
 23326    32   513    40    32   573     0     111  ByteBufferAsCharBufferRL
 23327    32   513    64    32   573     0      59  (
 23328    32   513    65    32   573     0      44  this
 23329    32   513    69    32   573     0      66  ,
 23330    32   514    72    32   573     0      77  -
 23331    32   514    73    32   573     0     112  1
 23332    32   514    74    32   573     0      66  ,
 23333    32   515    72    32   573     0     112  0
 23334    32   515    73    32   573     0      66  ,
 23335    32   516    72    32   573     1     111  size
 23336    32   516    76    32   573     1      66  ,
 23337    32   517    72    32   573     1     111  size
 23338    32   517    76    32   573     1      66  ,
 23339    32   518    72    32   573     0     111  off
 23340    32   518    75    32   573     0      60  )
 23341    32   518    76    32   573     0      60  )
 23342    32   518    77    32   573     0      60  )
 23343    32   518    78    32   573     0     102  ;
 23344    32   519     9    32   573     0      64  }
 23345    32   519    11    32   573     0      48  else
 23346    32   519    16    32   573     0      63  {
 23347    32   520    13    32   573     0      19  return
 23348    32   520    20    32   573     0      59  (
 23349    32   520    21    32   573     0     111  nativeByteOrder
 23350    32   521    21    32   573     0      58  ?
 23351    32   521    23    32   573     0      59  (
 23352    32   521    24    32   573     0     111  CharBuffer
 23353    32   521    34    32   573     0      60  )
 23354    32   521    35    32   573     0      59  (
 23355    32   521    36    32   573     0      15  new
 23356    32   521    40    32   573     0     111  DirectCharBufferRU
 23357    32   521    58    32   573     0      59  (
 23358    32   521    59    32   573     0      44  this
 23359    32   521    63    32   573     0      66  ,
 23360    32   522    66    32   573     0      77  -
 23361    32   522    67    32   573     0     112  1
 23362    32   522    68    32   573     0      66  ,
 23363    32   523    66    32   573     0     112  0
 23364    32   523    67    32   573     0      66  ,
 23365    32   524    66    32   573     1     111  size
 23366    32   524    70    32   573     1      66  ,
 23367    32   525    66    32   573     1     111  size
 23368    32   525    70    32   573     1      66  ,
 23369    32   526    66    32   573     0     111  off
 23370    32   526    69    32   573     0      60  )
 23371    32   526    70    32   573     0      60  )
 23372    32   527    21    32   573     0      65  :
 23373    32   527    23    32   573     0      59  (
 23374    32   527    24    32   573     0     111  CharBuffer
 23375    32   527    34    32   573     0      60  )
 23376    32   527    35    32   573     0      59  (
 23377    32   527    36    32   573     0      15  new
 23378    32   527    40    32   573     0     111  DirectCharBufferRS
 23379    32   527    58    32   573     0      59  (
 23380    32   527    59    32   573     0      44  this
 23381    32   527    63    32   573     0      66  ,
 23382    32   528    66    32   573     0      77  -
 23383    32   528    67    32   573     0     112  1
 23384    32   528    68    32   573     0      66  ,
 23385    32   529    66    32   573     0     112  0
 23386    32   529    67    32   573     0      66  ,
 23387    32   530    66    32   573     1     111  size
 23388    32   530    70    32   573     1      66  ,
 23389    32   531    66    32   573     1     111  size
 23390    32   531    70    32   573     1      66  ,
 23391    32   532    66    32   573     0     111  off
 23392    32   532    69    32   573     0      60  )
 23393    32   532    70    32   573     0      60  )
 23394    32   532    71    32   573     0      60  )
 23395    32   532    72    32   573     0     102  ;
 23396    32   533     9    32   573     0      64  }
 23397    32   534     5    32   573     0      64  }
 23398    32   534     5    32   573     0    1398  ENDMETHOD
 23399    32   534     5    32   574     0    1399  STARTMETHOD
 23400    32   557     5    32   574     0      41  private
 23401    32   557    13    32   574     0     111  ByteBuffer
 23402    32   557    24    32   574     0     111  putShort
 23403    32   557    32    32   574     0      59  (
 23404    32   557    33    32   574     0      53  long
 23405    32   557    38    32   574     0     111  a
 23406    32   557    39    32   574     0      66  ,
 23407    32   557    41    32   574     0      12  short
 23408    32   557    47    32   574     0     111  x
 23409    32   557    48    32   574     0      60  )
 23410    32   557    50    32   574     0      63  {
 23411    32   567     9    32   574     0      20  throw
 23412    32   567    15    32   574     0      15  new
 23413    32   567    19    32   574     0     111  ReadOnlyBufferException
 23414    32   567    42    32   574     0      59  (
 23415    32   567    43    32   574     0      60  )
 23416    32   567    44    32   574     0     102  ;
 23417    32   569     5    32   574     0      64  }
 23418    32   569     5    32   574     0    1400  ENDMETHOD
 23419    32   569     5    32   575     0    1401  STARTMETHOD
 23420    32   571     5    32   575     0      10  public
 23421    32   571    12    32   575     0     111  ByteBuffer
 23422    32   571    23    32   575     0     111  putShort
 23423    32   571    31    32   575     0      59  (
 23424    32   571    32    32   575     0      12  short
 23425    32   571    38    32   575     0     111  x
 23426    32   571    39    32   575     0      60  )
 23427    32   571    41    32   575     0      63  {
 23428    32   576     9    32   575     0      20  throw
 23429    32   576    15    32   575     0      15  new
 23430    32   576    19    32   575     0     111  ReadOnlyBufferException
 23431    32   576    42    32   575     0      59  (
 23432    32   576    43    32   575     0      60  )
 23433    32   576    44    32   575     0     102  ;
 23434    32   578     5    32   575     0      64  }
 23435    32   578     5    32   575     0    1402  ENDMETHOD
 23436    32   578     5    32   576     0    1403  STARTMETHOD
 23437    32   580     5    32   576     0      10  public
 23438    32   580    12    32   576     0     111  ByteBuffer
 23439    32   580    23    32   576     0     111  putShort
 23440    32   580    31    32   576     0      59  (
 23441    32   580    32    32   576     0      36  int
 23442    32   580    36    32   576     0     111  i
 23443    32   580    37    32   576     0      66  ,
 23444    32   580    39    32   576     0      12  short
 23445    32   580    45    32   576     0     111  x
 23446    32   580    46    32   576     0      60  )
 23447    32   580    48    32   576     0      63  {
 23448    32   585     9    32   576     0      20  throw
 23449    32   585    15    32   576     0      15  new
 23450    32   585    19    32   576     0     111  ReadOnlyBufferException
 23451    32   585    42    32   576     0      59  (
 23452    32   585    43    32   576     0      60  )
 23453    32   585    44    32   576     0     102  ;
 23454    32   587     5    32   576     0      64  }
 23455    32   587     5    32   576     0    1404  ENDMETHOD
 23456    32   587     5    32   577     0    1405  STARTMETHOD
 23457    32   589     5    32   577     0      10  public
 23458    32   589    12    32   577     0     111  ShortBuffer
 23459    32   589    24    32   577     0     111  asShortBuffer
 23460    32   589    37    32   577     0      59  (
 23461    32   589    38    32   577     0      60  )
 23462    32   589    40    32   577     0      63  {
 23463    32   590     9    32   577     1      36  int
 23464    32   590    13    32   577     1     111  off
 23465    32   590    17    32   577     1      67  =
 23466    32   590    19    32   577     1     111  this.position
 23467    32   590    32    32   577     1      59  (
 23468    32   590    33    32   577     1      60  )
 23469    32   590    34    32   577     1     102  ;
 23470    32   591     9    32   577     1      36  int
 23471    32   591    13    32   577     1     111  lim
 23472    32   591    17    32   577     1      67  =
 23473    32   591    19    32   577     1     111  this.limit
 23474    32   591    29    32   577     1      59  (
 23475    32   591    30    32   577     1      60  )
 23476    32   591    31    32   577     1     102  ;
 23477    32   592     9    32   577     0     111  assert
 23478    32   592    16    32   577     0      59  (
 23479    32   592    17    32   577     0     111  off
 23480    32   592    21    32   577     0      92  <=
 23481    32   592    24    32   577     0     111  lim
 23482    32   592    27    32   577     0      60  )
 23483    32   592    28    32   577     0     102  ;
 23484    32   593     9    32   577     0      36  int
 23485    32   593    13    32   577     0     111  rem
 23486    32   593    17    32   577     0      67  =
 23487    32   593    19    32   577     0      59  (
 23488    32   593    20    32   577     0     111  off
 23489    32   593    24    32   577     0      92  <=
 23490    32   593    27    32   577     0     111  lim
 23491    32   593    31    32   577     0      58  ?
 23492    32   593    33    32   577     0     111  lim
 23493    32   593    37    32   577     0      77  -
 23494    32   593    39    32   577     0     111  off
 23495    32   593    43    32   577     0      65  :
 23496    32   593    45    32   577     0     112  0
 23497    32   593    46    32   577     0      60  )
 23498    32   593    47    32   577     0     102  ;
 23499    32   595     9    32   577     0      36  int
 23500    32   595    13    32   577     0     111  size
 23501    32   595    18    32   577     0      67  =
 23502    32   595    20    32   577     0     111  rem
 23503    32   595    24    32   577     0      84  >>
 23504    32   595    27    32   577     0     112  1
 23505    32   595    28    32   577     0     102  ;
 23506    32   596     9    32   577     0      31  if
 23507    32   596    12    32   577     0      59  (
 23508    32   596    13    32   577     0      69  !
 23509    32   596    14    32   577     0     111  unaligned
 23510    32   596    24    32   577     0     101  &&
 23511    32   596    27    32   577     0      59  (
 23512    32   596    28    32   577     0      59  (
 23513    32   596    29    32   577     0     111  address
 23514    32   596    37    32   577     0      74  +
 23515    32   596    39    32   577     0     111  off
 23516    32   596    42    32   577     0      60  )
 23517    32   596    44    32   577     0      82  %
 23518    32   596    46    32   577     0      59  (
 23519    32   596    47    32   577     0     112  1
 23520    32   596    49    32   577     0      90  <<
 23521    32   596    52    32   577     0     112  1
 23522    32   596    53    32   577     0      60  )
 23523    32   596    55    32   577     0      71  !=
 23524    32   596    58    32   577     0     112  0
 23525    32   596    59    32   577     0      60  )
 23526    32   596    60    32   577     0      60  )
 23527    32   596    62    32   577     0      63  {
 23528    32   597    13    32   577     0      19  return
 23529    32   597    20    32   577     0      59  (
 23530    32   597    21    32   577     0     111  bigEndian
 23531    32   598    21    32   577     0      58  ?
 23532    32   598    23    32   577     0      59  (
 23533    32   598    24    32   577     0     111  ShortBuffer
 23534    32   598    35    32   577     0      60  )
 23535    32   598    36    32   577     0      59  (
 23536    32   598    37    32   577     0      15  new
 23537    32   598    41    32   577     0     111  ByteBufferAsShortBufferRB
 23538    32   598    66    32   577     0      59  (
 23539    32   598    67    32   577     0      44  this
 23540    32   598    71    32   577     0      66  ,
 23541    32   599    72    32   577     0      77  -
 23542    32   599    73    32   577     0     112  1
 23543    32   599    74    32   577     0      66  ,
 23544    32   600    72    32   577     0     112  0
 23545    32   600    73    32   577     0      66  ,
 23546    32   601    72    32   577     1     111  size
 23547    32   601    76    32   577     1      66  ,
 23548    32   602    72    32   577     1     111  size
 23549    32   602    76    32   577     1      66  ,
 23550    32   603    72    32   577     0     111  off
 23551    32   603    75    32   577     0      60  )
 23552    32   603    76    32   577     0      60  )
 23553    32   604    21    32   577     0      65  :
 23554    32   604    23    32   577     0      59  (
 23555    32   604    24    32   577     0     111  ShortBuffer
 23556    32   604    35    32   577     0      60  )
 23557    32   604    36    32   577     0      59  (
 23558    32   604    37    32   577     0      15  new
 23559    32   604    41    32   577     0     111  ByteBufferAsShortBufferRL
 23560    32   604    66    32   577     0      59  (
 23561    32   604    67    32   577     0      44  this
 23562    32   604    71    32   577     0      66  ,
 23563    32   605    72    32   577     0      77  -
 23564    32   605    73    32   577     0     112  1
 23565    32   605    74    32   577     0      66  ,
 23566    32   606    72    32   577     0     112  0
 23567    32   606    73    32   577     0      66  ,
 23568    32   607    72    32   577     1     111  size
 23569    32   607    76    32   577     1      66  ,
 23570    32   608    72    32   577     1     111  size
 23571    32   608    76    32   577     1      66  ,
 23572    32   609    72    32   577     0     111  off
 23573    32   609    75    32   577     0      60  )
 23574    32   609    76    32   577     0      60  )
 23575    32   609    77    32   577     0      60  )
 23576    32   609    78    32   577     0     102  ;
 23577    32   610     9    32   577     0      64  }
 23578    32   610    11    32   577     0      48  else
 23579    32   610    16    32   577     0      63  {
 23580    32   611    13    32   577     0      19  return
 23581    32   611    20    32   577     0      59  (
 23582    32   611    21    32   577     0     111  nativeByteOrder
 23583    32   612    21    32   577     0      58  ?
 23584    32   612    23    32   577     0      59  (
 23585    32   612    24    32   577     0     111  ShortBuffer
 23586    32   612    35    32   577     0      60  )
 23587    32   612    36    32   577     0      59  (
 23588    32   612    37    32   577     0      15  new
 23589    32   612    41    32   577     0     111  DirectShortBufferRU
 23590    32   612    60    32   577     0      59  (
 23591    32   612    61    32   577     0      44  this
 23592    32   612    65    32   577     0      66  ,
 23593    32   613    66    32   577     0      77  -
 23594    32   613    67    32   577     0     112  1
 23595    32   613    68    32   577     0      66  ,
 23596    32   614    66    32   577     0     112  0
 23597    32   614    67    32   577     0      66  ,
 23598    32   615    66    32   577     1     111  size
 23599    32   615    70    32   577     1      66  ,
 23600    32   616    66    32   577     1     111  size
 23601    32   616    70    32   577     1      66  ,
 23602    32   617    66    32   577     0     111  off
 23603    32   617    69    32   577     0      60  )
 23604    32   617    70    32   577     0      60  )
 23605    32   618    21    32   577     0      65  :
 23606    32   618    23    32   577     0      59  (
 23607    32   618    24    32   577     0     111  ShortBuffer
 23608    32   618    35    32   577     0      60  )
 23609    32   618    36    32   577     0      59  (
 23610    32   618    37    32   577     0      15  new
 23611    32   618    41    32   577     0     111  DirectShortBufferRS
 23612    32   618    60    32   577     0      59  (
 23613    32   618    61    32   577     0      44  this
 23614    32   618    65    32   577     0      66  ,
 23615    32   619    66    32   577     0      77  -
 23616    32   619    67    32   577     0     112  1
 23617    32   619    68    32   577     0      66  ,
 23618    32   620    66    32   577     0     112  0
 23619    32   620    67    32   577     0      66  ,
 23620    32   621    66    32   577     1     111  size
 23621    32   621    70    32   577     1      66  ,
 23622    32   622    66    32   577     1     111  size
 23623    32   622    70    32   577     1      66  ,
 23624    32   623    66    32   577     0     111  off
 23625    32   623    69    32   577     0      60  )
 23626    32   623    70    32   577     0      60  )
 23627    32   623    71    32   577     0      60  )
 23628    32   623    72    32   577     0     102  ;
 23629    32   624     9    32   577     0      64  }
 23630    32   625     5    32   577     0      64  }
 23631    32   625     5    32   577     0    1406  ENDMETHOD
 23632    32   625     5    32   578     0    1407  STARTMETHOD
 23633    32   648     5    32   578     0      41  private
 23634    32   648    13    32   578     0     111  ByteBuffer
 23635    32   648    24    32   578     0     111  putInt
 23636    32   648    30    32   578     0      59  (
 23637    32   648    31    32   578     0      53  long
 23638    32   648    36    32   578     0     111  a
 23639    32   648    37    32   578     0      66  ,
 23640    32   648    39    32   578     0      36  int
 23641    32   648    43    32   578     0     111  x
 23642    32   648    44    32   578     0      60  )
 23643    32   648    46    32   578     0      63  {
 23644    32   658     9    32   578     0      20  throw
 23645    32   658    15    32   578     0      15  new
 23646    32   658    19    32   578     0     111  ReadOnlyBufferException
 23647    32   658    42    32   578     0      59  (
 23648    32   658    43    32   578     0      60  )
 23649    32   658    44    32   578     0     102  ;
 23650    32   660     5    32   578     0      64  }
 23651    32   660     5    32   578     0    1408  ENDMETHOD
 23652    32   660     5    32   579     0    1409  STARTMETHOD
 23653    32   662     5    32   579     0      10  public
 23654    32   662    12    32   579     0     111  ByteBuffer
 23655    32   662    23    32   579     0     111  putInt
 23656    32   662    29    32   579     0      59  (
 23657    32   662    30    32   579     0      36  int
 23658    32   662    34    32   579     0     111  x
 23659    32   662    35    32   579     0      60  )
 23660    32   662    37    32   579     0      63  {
 23661    32   667     9    32   579     0      20  throw
 23662    32   667    15    32   579     0      15  new
 23663    32   667    19    32   579     0     111  ReadOnlyBufferException
 23664    32   667    42    32   579     0      59  (
 23665    32   667    43    32   579     0      60  )
 23666    32   667    44    32   579     0     102  ;
 23667    32   669     5    32   579     0      64  }
 23668    32   669     5    32   579     0    1410  ENDMETHOD
 23669    32   669     5    32   580     0    1411  STARTMETHOD
 23670    32   671     5    32   580     0      10  public
 23671    32   671    12    32   580     0     111  ByteBuffer
 23672    32   671    23    32   580     0     111  putInt
 23673    32   671    29    32   580     0      59  (
 23674    32   671    30    32   580     0      36  int
 23675    32   671    34    32   580     0     111  i
 23676    32   671    35    32   580     0      66  ,
 23677    32   671    37    32   580     0      36  int
 23678    32   671    41    32   580     0     111  x
 23679    32   671    42    32   580     0      60  )
 23680    32   671    44    32   580     0      63  {
 23681    32   676     9    32   580     0      20  throw
 23682    32   676    15    32   580     0      15  new
 23683    32   676    19    32   580     0     111  ReadOnlyBufferException
 23684    32   676    42    32   580     0      59  (
 23685    32   676    43    32   580     0      60  )
 23686    32   676    44    32   580     0     102  ;
 23687    32   678     5    32   580     0      64  }
 23688    32   678     5    32   580     0    1412  ENDMETHOD
 23689    32   678     5    32   581     0    1413  STARTMETHOD
 23690    32   680     5    32   581     0      10  public
 23691    32   680    12    32   581     0     111  IntBuffer
 23692    32   680    22    32   581     0     111  asIntBuffer
 23693    32   680    33    32   581     0      59  (
 23694    32   680    34    32   581     0      60  )
 23695    32   680    36    32   581     0      63  {
 23696    32   681     9    32   581     1      36  int
 23697    32   681    13    32   581     1     111  off
 23698    32   681    17    32   581     1      67  =
 23699    32   681    19    32   581     1     111  this.position
 23700    32   681    32    32   581     1      59  (
 23701    32   681    33    32   581     1      60  )
 23702    32   681    34    32   581     1     102  ;
 23703    32   682     9    32   581     1      36  int
 23704    32   682    13    32   581     1     111  lim
 23705    32   682    17    32   581     1      67  =
 23706    32   682    19    32   581     1     111  this.limit
 23707    32   682    29    32   581     1      59  (
 23708    32   682    30    32   581     1      60  )
 23709    32   682    31    32   581     1     102  ;
 23710    32   683     9    32   581     0     111  assert
 23711    32   683    16    32   581     0      59  (
 23712    32   683    17    32   581     0     111  off
 23713    32   683    21    32   581     0      92  <=
 23714    32   683    24    32   581     0     111  lim
 23715    32   683    27    32   581     0      60  )
 23716    32   683    28    32   581     0     102  ;
 23717    32   684     9    32   581     0      36  int
 23718    32   684    13    32   581     0     111  rem
 23719    32   684    17    32   581     0      67  =
 23720    32   684    19    32   581     0      59  (
 23721    32   684    20    32   581     0     111  off
 23722    32   684    24    32   581     0      92  <=
 23723    32   684    27    32   581     0     111  lim
 23724    32   684    31    32   581     0      58  ?
 23725    32   684    33    32   581     0     111  lim
 23726    32   684    37    32   581     0      77  -
 23727    32   684    39    32   581     0     111  off
 23728    32   684    43    32   581     0      65  :
 23729    32   684    45    32   581     0     112  0
 23730    32   684    46    32   581     0      60  )
 23731    32   684    47    32   581     0     102  ;
 23732    32   686     9    32   581     0      36  int
 23733    32   686    13    32   581     0     111  size
 23734    32   686    18    32   581     0      67  =
 23735    32   686    20    32   581     0     111  rem
 23736    32   686    24    32   581     0      84  >>
 23737    32   686    27    32   581     0     112  2
 23738    32   686    28    32   581     0     102  ;
 23739    32   687     9    32   581     0      31  if
 23740    32   687    12    32   581     0      59  (
 23741    32   687    13    32   581     0      69  !
 23742    32   687    14    32   581     0     111  unaligned
 23743    32   687    24    32   581     0     101  &&
 23744    32   687    27    32   581     0      59  (
 23745    32   687    28    32   581     0      59  (
 23746    32   687    29    32   581     0     111  address
 23747    32   687    37    32   581     0      74  +
 23748    32   687    39    32   581     0     111  off
 23749    32   687    42    32   581     0      60  )
 23750    32   687    44    32   581     0      82  %
 23751    32   687    46    32   581     0      59  (
 23752    32   687    47    32   581     0     112  1
 23753    32   687    49    32   581     0      90  <<
 23754    32   687    52    32   581     0     112  2
 23755    32   687    53    32   581     0      60  )
 23756    32   687    55    32   581     0      71  !=
 23757    32   687    58    32   581     0     112  0
 23758    32   687    59    32   581     0      60  )
 23759    32   687    60    32   581     0      60  )
 23760    32   687    62    32   581     0      63  {
 23761    32   688    13    32   581     0      19  return
 23762    32   688    20    32   581     0      59  (
 23763    32   688    21    32   581     0     111  bigEndian
 23764    32   689    21    32   581     0      58  ?
 23765    32   689    23    32   581     0      59  (
 23766    32   689    24    32   581     0     111  IntBuffer
 23767    32   689    33    32   581     0      60  )
 23768    32   689    34    32   581     0      59  (
 23769    32   689    35    32   581     0      15  new
 23770    32   689    39    32   581     0     111  ByteBufferAsIntBufferRB
 23771    32   689    62    32   581     0      59  (
 23772    32   689    63    32   581     0      44  this
 23773    32   689    67    32   581     0      66  ,
 23774    32   690    72    32   581     0      77  -
 23775    32   690    73    32   581     0     112  1
 23776    32   690    74    32   581     0      66  ,
 23777    32   691    72    32   581     0     112  0
 23778    32   691    73    32   581     0      66  ,
 23779    32   692    72    32   581     1     111  size
 23780    32   692    76    32   581     1      66  ,
 23781    32   693    72    32   581     1     111  size
 23782    32   693    76    32   581     1      66  ,
 23783    32   694    72    32   581     0     111  off
 23784    32   694    75    32   581     0      60  )
 23785    32   694    76    32   581     0      60  )
 23786    32   695    21    32   581     0      65  :
 23787    32   695    23    32   581     0      59  (
 23788    32   695    24    32   581     0     111  IntBuffer
 23789    32   695    33    32   581     0      60  )
 23790    32   695    34    32   581     0      59  (
 23791    32   695    35    32   581     0      15  new
 23792    32   695    39    32   581     0     111  ByteBufferAsIntBufferRL
 23793    32   695    62    32   581     0      59  (
 23794    32   695    63    32   581     0      44  this
 23795    32   695    67    32   581     0      66  ,
 23796    32   696    72    32   581     0      77  -
 23797    32   696    73    32   581     0     112  1
 23798    32   696    74    32   581     0      66  ,
 23799    32   697    72    32   581     0     112  0
 23800    32   697    73    32   581     0      66  ,
 23801    32   698    72    32   581     1     111  size
 23802    32   698    76    32   581     1      66  ,
 23803    32   699    72    32   581     1     111  size
 23804    32   699    76    32   581     1      66  ,
 23805    32   700    72    32   581     0     111  off
 23806    32   700    75    32   581     0      60  )
 23807    32   700    76    32   581     0      60  )
 23808    32   700    77    32   581     0      60  )
 23809    32   700    78    32   581     0     102  ;
 23810    32   701     9    32   581     0      64  }
 23811    32   701    11    32   581     0      48  else
 23812    32   701    16    32   581     0      63  {
 23813    32   702    13    32   581     0      19  return
 23814    32   702    20    32   581     0      59  (
 23815    32   702    21    32   581     0     111  nativeByteOrder
 23816    32   703    21    32   581     0      58  ?
 23817    32   703    23    32   581     0      59  (
 23818    32   703    24    32   581     0     111  IntBuffer
 23819    32   703    33    32   581     0      60  )
 23820    32   703    34    32   581     0      59  (
 23821    32   703    35    32   581     0      15  new
 23822    32   703    39    32   581     0     111  DirectIntBufferRU
 23823    32   703    56    32   581     0      59  (
 23824    32   703    57    32   581     0      44  this
 23825    32   703    61    32   581     0      66  ,
 23826    32   704    66    32   581     0      77  -
 23827    32   704    67    32   581     0     112  1
 23828    32   704    68    32   581     0      66  ,
 23829    32   705    66    32   581     0     112  0
 23830    32   705    67    32   581     0      66  ,
 23831    32   706    66    32   581     1     111  size
 23832    32   706    70    32   581     1      66  ,
 23833    32   707    66    32   581     1     111  size
 23834    32   707    70    32   581     1      66  ,
 23835    32   708    66    32   581     0     111  off
 23836    32   708    69    32   581     0      60  )
 23837    32   708    70    32   581     0      60  )
 23838    32   709    21    32   581     0      65  :
 23839    32   709    23    32   581     0      59  (
 23840    32   709    24    32   581     0     111  IntBuffer
 23841    32   709    33    32   581     0      60  )
 23842    32   709    34    32   581     0      59  (
 23843    32   709    35    32   581     0      15  new
 23844    32   709    39    32   581     0     111  DirectIntBufferRS
 23845    32   709    56    32   581     0      59  (
 23846    32   709    57    32   581     0      44  this
 23847    32   709    61    32   581     0      66  ,
 23848    32   710    66    32   581     0      77  -
 23849    32   710    67    32   581     0     112  1
 23850    32   710    68    32   581     0      66  ,
 23851    32   711    66    32   581     0     112  0
 23852    32   711    67    32   581     0      66  ,
 23853    32   712    66    32   581     1     111  size
 23854    32   712    70    32   581     1      66  ,
 23855    32   713    66    32   581     1     111  size
 23856    32   713    70    32   581     1      66  ,
 23857    32   714    66    32   581     0     111  off
 23858    32   714    69    32   581     0      60  )
 23859    32   714    70    32   581     0      60  )
 23860    32   714    71    32   581     0      60  )
 23861    32   714    72    32   581     0     102  ;
 23862    32   715     9    32   581     0      64  }
 23863    32   716     5    32   581     0      64  }
 23864    32   716     5    32   581     0    1414  ENDMETHOD
 23865    32   716     5    32   582     0    1415  STARTMETHOD
 23866    32   739     5    32   582     0      41  private
 23867    32   739    13    32   582     0     111  ByteBuffer
 23868    32   739    24    32   582     0     111  putLong
 23869    32   739    31    32   582     0      59  (
 23870    32   739    32    32   582     0      53  long
 23871    32   739    37    32   582     0     111  a
 23872    32   739    38    32   582     0      66  ,
 23873    32   739    40    32   582     0      53  long
 23874    32   739    45    32   582     0     111  x
 23875    32   739    46    32   582     0      60  )
 23876    32   739    48    32   582     0      63  {
 23877    32   749     9    32   582     0      20  throw
 23878    32   749    15    32   582     0      15  new
 23879    32   749    19    32   582     0     111  ReadOnlyBufferException
 23880    32   749    42    32   582     0      59  (
 23881    32   749    43    32   582     0      60  )
 23882    32   749    44    32   582     0     102  ;
 23883    32   751     5    32   582     0      64  }
 23884    32   751     5    32   582     0    1416  ENDMETHOD
 23885    32   751     5    32   583     0    1417  STARTMETHOD
 23886    32   753     5    32   583     0      10  public
 23887    32   753    12    32   583     0     111  ByteBuffer
 23888    32   753    23    32   583     0     111  putLong
 23889    32   753    30    32   583     0      59  (
 23890    32   753    31    32   583     0      53  long
 23891    32   753    36    32   583     0     111  x
 23892    32   753    37    32   583     0      60  )
 23893    32   753    39    32   583     0      63  {
 23894    32   758     9    32   583     0      20  throw
 23895    32   758    15    32   583     0      15  new
 23896    32   758    19    32   583     0     111  ReadOnlyBufferException
 23897    32   758    42    32   583     0      59  (
 23898    32   758    43    32   583     0      60  )
 23899    32   758    44    32   583     0     102  ;
 23900    32   760     5    32   583     0      64  }
 23901    32   760     5    32   583     0    1418  ENDMETHOD
 23902    32   760     5    32   584     0    1419  STARTMETHOD
 23903    32   762     5    32   584     0      10  public
 23904    32   762    12    32   584     0     111  ByteBuffer
 23905    32   762    23    32   584     0     111  putLong
 23906    32   762    30    32   584     0      59  (
 23907    32   762    31    32   584     0      36  int
 23908    32   762    35    32   584     0     111  i
 23909    32   762    36    32   584     0      66  ,
 23910    32   762    38    32   584     0      53  long
 23911    32   762    43    32   584     0     111  x
 23912    32   762    44    32   584     0      60  )
 23913    32   762    46    32   584     0      63  {
 23914    32   767     9    32   584     0      20  throw
 23915    32   767    15    32   584     0      15  new
 23916    32   767    19    32   584     0     111  ReadOnlyBufferException
 23917    32   767    42    32   584     0      59  (
 23918    32   767    43    32   584     0      60  )
 23919    32   767    44    32   584     0     102  ;
 23920    32   769     5    32   584     0      64  }
 23921    32   769     5    32   584     0    1420  ENDMETHOD
 23922    32   769     5    32   585     0    1421  STARTMETHOD
 23923    32   771     5    32   585     0      10  public
 23924    32   771    12    32   585     0     111  LongBuffer
 23925    32   771    23    32   585     0     111  asLongBuffer
 23926    32   771    35    32   585     0      59  (
 23927    32   771    36    32   585     0      60  )
 23928    32   771    38    32   585     0      63  {
 23929    32   772     9    32   585     1      36  int
 23930    32   772    13    32   585     1     111  off
 23931    32   772    17    32   585     1      67  =
 23932    32   772    19    32   585     1     111  this.position
 23933    32   772    32    32   585     1      59  (
 23934    32   772    33    32   585     1      60  )
 23935    32   772    34    32   585     1     102  ;
 23936    32   773     9    32   585     1      36  int
 23937    32   773    13    32   585     1     111  lim
 23938    32   773    17    32   585     1      67  =
 23939    32   773    19    32   585     1     111  this.limit
 23940    32   773    29    32   585     1      59  (
 23941    32   773    30    32   585     1      60  )
 23942    32   773    31    32   585     1     102  ;
 23943    32   774     9    32   585     0     111  assert
 23944    32   774    16    32   585     0      59  (
 23945    32   774    17    32   585     0     111  off
 23946    32   774    21    32   585     0      92  <=
 23947    32   774    24    32   585     0     111  lim
 23948    32   774    27    32   585     0      60  )
 23949    32   774    28    32   585     0     102  ;
 23950    32   775     9    32   585     0      36  int
 23951    32   775    13    32   585     0     111  rem
 23952    32   775    17    32   585     0      67  =
 23953    32   775    19    32   585     0      59  (
 23954    32   775    20    32   585     0     111  off
 23955    32   775    24    32   585     0      92  <=
 23956    32   775    27    32   585     0     111  lim
 23957    32   775    31    32   585     0      58  ?
 23958    32   775    33    32   585     0     111  lim
 23959    32   775    37    32   585     0      77  -
 23960    32   775    39    32   585     0     111  off
 23961    32   775    43    32   585     0      65  :
 23962    32   775    45    32   585     0     112  0
 23963    32   775    46    32   585     0      60  )
 23964    32   775    47    32   585     0     102  ;
 23965    32   777     9    32   585     0      36  int
 23966    32   777    13    32   585     0     111  size
 23967    32   777    18    32   585     0      67  =
 23968    32   777    20    32   585     0     111  rem
 23969    32   777    24    32   585     0      84  >>
 23970    32   777    27    32   585     0     112  3
 23971    32   777    28    32   585     0     102  ;
 23972    32   778     9    32   585     0      31  if
 23973    32   778    12    32   585     0      59  (
 23974    32   778    13    32   585     0      69  !
 23975    32   778    14    32   585     0     111  unaligned
 23976    32   778    24    32   585     0     101  &&
 23977    32   778    27    32   585     0      59  (
 23978    32   778    28    32   585     0      59  (
 23979    32   778    29    32   585     0     111  address
 23980    32   778    37    32   585     0      74  +
 23981    32   778    39    32   585     0     111  off
 23982    32   778    42    32   585     0      60  )
 23983    32   778    44    32   585     0      82  %
 23984    32   778    46    32   585     0      59  (
 23985    32   778    47    32   585     0     112  1
 23986    32   778    49    32   585     0      90  <<
 23987    32   778    52    32   585     0     112  3
 23988    32   778    53    32   585     0      60  )
 23989    32   778    55    32   585     0      71  !=
 23990    32   778    58    32   585     0     112  0
 23991    32   778    59    32   585     0      60  )
 23992    32   778    60    32   585     0      60  )
 23993    32   778    62    32   585     0      63  {
 23994    32   779    13    32   585     0      19  return
 23995    32   779    20    32   585     0      59  (
 23996    32   779    21    32   585     0     111  bigEndian
 23997    32   780    21    32   585     0      58  ?
 23998    32   780    23    32   585     0      59  (
 23999    32   780    24    32   585     0     111  LongBuffer
 24000    32   780    34    32   585     0      60  )
 24001    32   780    35    32   585     0      59  (
 24002    32   780    36    32   585     0      15  new
 24003    32   780    40    32   585     0     111  ByteBufferAsLongBufferRB
 24004    32   780    64    32   585     0      59  (
 24005    32   780    65    32   585     0      44  this
 24006    32   780    69    32   585     0      66  ,
 24007    32   781    72    32   585     0      77  -
 24008    32   781    73    32   585     0     112  1
 24009    32   781    74    32   585     0      66  ,
 24010    32   782    72    32   585     0     112  0
 24011    32   782    73    32   585     0      66  ,
 24012    32   783    72    32   585     1     111  size
 24013    32   783    76    32   585     1      66  ,
 24014    32   784    72    32   585     1     111  size
 24015    32   784    76    32   585     1      66  ,
 24016    32   785    72    32   585     0     111  off
 24017    32   785    75    32   585     0      60  )
 24018    32   785    76    32   585     0      60  )
 24019    32   786    21    32   585     0      65  :
 24020    32   786    23    32   585     0      59  (
 24021    32   786    24    32   585     0     111  LongBuffer
 24022    32   786    34    32   585     0      60  )
 24023    32   786    35    32   585     0      59  (
 24024    32   786    36    32   585     0      15  new
 24025    32   786    40    32   585     0     111  ByteBufferAsLongBufferRL
 24026    32   786    64    32   585     0      59  (
 24027    32   786    65    32   585     0      44  this
 24028    32   786    69    32   585     0      66  ,
 24029    32   787    72    32   585     0      77  -
 24030    32   787    73    32   585     0     112  1
 24031    32   787    74    32   585     0      66  ,
 24032    32   788    72    32   585     0     112  0
 24033    32   788    73    32   585     0      66  ,
 24034    32   789    72    32   585     1     111  size
 24035    32   789    76    32   585     1      66  ,
 24036    32   790    72    32   585     1     111  size
 24037    32   790    76    32   585     1      66  ,
 24038    32   791    72    32   585     0     111  off
 24039    32   791    75    32   585     0      60  )
 24040    32   791    76    32   585     0      60  )
 24041    32   791    77    32   585     0      60  )
 24042    32   791    78    32   585     0     102  ;
 24043    32   792     9    32   585     0      64  }
 24044    32   792    11    32   585     0      48  else
 24045    32   792    16    32   585     0      63  {
 24046    32   793    13    32   585     0      19  return
 24047    32   793    20    32   585     0      59  (
 24048    32   793    21    32   585     0     111  nativeByteOrder
 24049    32   794    21    32   585     0      58  ?
 24050    32   794    23    32   585     0      59  (
 24051    32   794    24    32   585     0     111  LongBuffer
 24052    32   794    34    32   585     0      60  )
 24053    32   794    35    32   585     0      59  (
 24054    32   794    36    32   585     0      15  new
 24055    32   794    40    32   585     0     111  DirectLongBufferRU
 24056    32   794    58    32   585     0      59  (
 24057    32   794    59    32   585     0      44  this
 24058    32   794    63    32   585     0      66  ,
 24059    32   795    66    32   585     0      77  -
 24060    32   795    67    32   585     0     112  1
 24061    32   795    68    32   585     0      66  ,
 24062    32   796    66    32   585     0     112  0
 24063    32   796    67    32   585     0      66  ,
 24064    32   797    66    32   585     1     111  size
 24065    32   797    70    32   585     1      66  ,
 24066    32   798    66    32   585     1     111  size
 24067    32   798    70    32   585     1      66  ,
 24068    32   799    66    32   585     0     111  off
 24069    32   799    69    32   585     0      60  )
 24070    32   799    70    32   585     0      60  )
 24071    32   800    21    32   585     0      65  :
 24072    32   800    23    32   585     0      59  (
 24073    32   800    24    32   585     0     111  LongBuffer
 24074    32   800    34    32   585     0      60  )
 24075    32   800    35    32   585     0      59  (
 24076    32   800    36    32   585     0      15  new
 24077    32   800    40    32   585     0     111  DirectLongBufferRS
 24078    32   800    58    32   585     0      59  (
 24079    32   800    59    32   585     0      44  this
 24080    32   800    63    32   585     0      66  ,
 24081    32   801    66    32   585     0      77  -
 24082    32   801    67    32   585     0     112  1
 24083    32   801    68    32   585     0      66  ,
 24084    32   802    66    32   585     0     112  0
 24085    32   802    67    32   585     0      66  ,
 24086    32   803    66    32   585     1     111  size
 24087    32   803    70    32   585     1      66  ,
 24088    32   804    66    32   585     1     111  size
 24089    32   804    70    32   585     1      66  ,
 24090    32   805    66    32   585     0     111  off
 24091    32   805    69    32   585     0      60  )
 24092    32   805    70    32   585     0      60  )
 24093    32   805    71    32   585     0      60  )
 24094    32   805    72    32   585     0     102  ;
 24095    32   806     9    32   585     0      64  }
 24096    32   807     5    32   585     0      64  }
 24097    32   807     5    32   585     0    1422  ENDMETHOD
 24098    32   807     5    32   586     0    1423  STARTMETHOD
 24099    32   830     5    32   586     0      41  private
 24100    32   830    13    32   586     0     111  ByteBuffer
 24101    32   830    24    32   586     0     111  putFloat
 24102    32   830    32    32   586     0      59  (
 24103    32   830    33    32   586     0      53  long
 24104    32   830    38    32   586     0     111  a
 24105    32   830    39    32   586     0      66  ,
 24106    32   830    41    32   586     0       4  float
 24107    32   830    47    32   586     0     111  x
 24108    32   830    48    32   586     0      60  )
 24109    32   830    50    32   586     0      63  {
 24110    32   840     9    32   586     0      20  throw
 24111    32   840    15    32   586     0      15  new
 24112    32   840    19    32   586     0     111  ReadOnlyBufferException
 24113    32   840    42    32   586     0      59  (
 24114    32   840    43    32   586     0      60  )
 24115    32   840    44    32   586     0     102  ;
 24116    32   842     5    32   586     0      64  }
 24117    32   842     5    32   586     0    1424  ENDMETHOD
 24118    32   842     5    32   587     0    1425  STARTMETHOD
 24119    32   844     5    32   587     0      10  public
 24120    32   844    12    32   587     0     111  ByteBuffer
 24121    32   844    23    32   587     0     111  putFloat
 24122    32   844    31    32   587     0      59  (
 24123    32   844    32    32   587     0       4  float
 24124    32   844    38    32   587     0     111  x
 24125    32   844    39    32   587     0      60  )
 24126    32   844    41    32   587     0      63  {
 24127    32   849     9    32   587     0      20  throw
 24128    32   849    15    32   587     0      15  new
 24129    32   849    19    32   587     0     111  ReadOnlyBufferException
 24130    32   849    42    32   587     0      59  (
 24131    32   849    43    32   587     0      60  )
 24132    32   849    44    32   587     0     102  ;
 24133    32   851     5    32   587     0      64  }
 24134    32   851     5    32   587     0    1426  ENDMETHOD
 24135    32   851     5    32   588     0    1427  STARTMETHOD
 24136    32   853     5    32   588     0      10  public
 24137    32   853    12    32   588     0     111  ByteBuffer
 24138    32   853    23    32   588     0     111  putFloat
 24139    32   853    31    32   588     0      59  (
 24140    32   853    32    32   588     0      36  int
 24141    32   853    36    32   588     0     111  i
 24142    32   853    37    32   588     0      66  ,
 24143    32   853    39    32   588     0       4  float
 24144    32   853    45    32   588     0     111  x
 24145    32   853    46    32   588     0      60  )
 24146    32   853    48    32   588     0      63  {
 24147    32   858     9    32   588     0      20  throw
 24148    32   858    15    32   588     0      15  new
 24149    32   858    19    32   588     0     111  ReadOnlyBufferException
 24150    32   858    42    32   588     0      59  (
 24151    32   858    43    32   588     0      60  )
 24152    32   858    44    32   588     0     102  ;
 24153    32   860     5    32   588     0      64  }
 24154    32   860     5    32   588     0    1428  ENDMETHOD
 24155    32   860     5    32   589     0    1429  STARTMETHOD
 24156    32   862     5    32   589     0      10  public
 24157    32   862    12    32   589     0     111  FloatBuffer
 24158    32   862    24    32   589     0     111  asFloatBuffer
 24159    32   862    37    32   589     0      59  (
 24160    32   862    38    32   589     0      60  )
 24161    32   862    40    32   589     0      63  {
 24162    32   863     9    32   589     1      36  int
 24163    32   863    13    32   589     1     111  off
 24164    32   863    17    32   589     1      67  =
 24165    32   863    19    32   589     1     111  this.position
 24166    32   863    32    32   589     1      59  (
 24167    32   863    33    32   589     1      60  )
 24168    32   863    34    32   589     1     102  ;
 24169    32   864     9    32   589     1      36  int
 24170    32   864    13    32   589     1     111  lim
 24171    32   864    17    32   589     1      67  =
 24172    32   864    19    32   589     1     111  this.limit
 24173    32   864    29    32   589     1      59  (
 24174    32   864    30    32   589     1      60  )
 24175    32   864    31    32   589     1     102  ;
 24176    32   865     9    32   589     0     111  assert
 24177    32   865    16    32   589     0      59  (
 24178    32   865    17    32   589     0     111  off
 24179    32   865    21    32   589     0      92  <=
 24180    32   865    24    32   589     0     111  lim
 24181    32   865    27    32   589     0      60  )
 24182    32   865    28    32   589     0     102  ;
 24183    32   866     9    32   589     0      36  int
 24184    32   866    13    32   589     0     111  rem
 24185    32   866    17    32   589     0      67  =
 24186    32   866    19    32   589     0      59  (
 24187    32   866    20    32   589     0     111  off
 24188    32   866    24    32   589     0      92  <=
 24189    32   866    27    32   589     0     111  lim
 24190    32   866    31    32   589     0      58  ?
 24191    32   866    33    32   589     0     111  lim
 24192    32   866    37    32   589     0      77  -
 24193    32   866    39    32   589     0     111  off
 24194    32   866    43    32   589     0      65  :
 24195    32   866    45    32   589     0     112  0
 24196    32   866    46    32   589     0      60  )
 24197    32   866    47    32   589     0     102  ;
 24198    32   868     9    32   589     0      36  int
 24199    32   868    13    32   589     0     111  size
 24200    32   868    18    32   589     0      67  =
 24201    32   868    20    32   589     0     111  rem
 24202    32   868    24    32   589     0      84  >>
 24203    32   868    27    32   589     0     112  2
 24204    32   868    28    32   589     0     102  ;
 24205    32   869     9    32   589     0      31  if
 24206    32   869    12    32   589     0      59  (
 24207    32   869    13    32   589     0      69  !
 24208    32   869    14    32   589     0     111  unaligned
 24209    32   869    24    32   589     0     101  &&
 24210    32   869    27    32   589     0      59  (
 24211    32   869    28    32   589     0      59  (
 24212    32   869    29    32   589     0     111  address
 24213    32   869    37    32   589     0      74  +
 24214    32   869    39    32   589     0     111  off
 24215    32   869    42    32   589     0      60  )
 24216    32   869    44    32   589     0      82  %
 24217    32   869    46    32   589     0      59  (
 24218    32   869    47    32   589     0     112  1
 24219    32   869    49    32   589     0      90  <<
 24220    32   869    52    32   589     0     112  2
 24221    32   869    53    32   589     0      60  )
 24222    32   869    55    32   589     0      71  !=
 24223    32   869    58    32   589     0     112  0
 24224    32   869    59    32   589     0      60  )
 24225    32   869    60    32   589     0      60  )
 24226    32   869    62    32   589     0      63  {
 24227    32   870    13    32   589     0      19  return
 24228    32   870    20    32   589     0      59  (
 24229    32   870    21    32   589     0     111  bigEndian
 24230    32   871    21    32   589     0      58  ?
 24231    32   871    23    32   589     0      59  (
 24232    32   871    24    32   589     0     111  FloatBuffer
 24233    32   871    35    32   589     0      60  )
 24234    32   871    36    32   589     0      59  (
 24235    32   871    37    32   589     0      15  new
 24236    32   871    41    32   589     0     111  ByteBufferAsFloatBufferRB
 24237    32   871    66    32   589     0      59  (
 24238    32   871    67    32   589     0      44  this
 24239    32   871    71    32   589     0      66  ,
 24240    32   872    72    32   589     0      77  -
 24241    32   872    73    32   589     0     112  1
 24242    32   872    74    32   589     0      66  ,
 24243    32   873    72    32   589     0     112  0
 24244    32   873    73    32   589     0      66  ,
 24245    32   874    72    32   589     1     111  size
 24246    32   874    76    32   589     1      66  ,
 24247    32   875    72    32   589     1     111  size
 24248    32   875    76    32   589     1      66  ,
 24249    32   876    72    32   589     0     111  off
 24250    32   876    75    32   589     0      60  )
 24251    32   876    76    32   589     0      60  )
 24252    32   877    21    32   589     0      65  :
 24253    32   877    23    32   589     0      59  (
 24254    32   877    24    32   589     0     111  FloatBuffer
 24255    32   877    35    32   589     0      60  )
 24256    32   877    36    32   589     0      59  (
 24257    32   877    37    32   589     0      15  new
 24258    32   877    41    32   589     0     111  ByteBufferAsFloatBufferRL
 24259    32   877    66    32   589     0      59  (
 24260    32   877    67    32   589     0      44  this
 24261    32   877    71    32   589     0      66  ,
 24262    32   878    72    32   589     0      77  -
 24263    32   878    73    32   589     0     112  1
 24264    32   878    74    32   589     0      66  ,
 24265    32   879    72    32   589     0     112  0
 24266    32   879    73    32   589     0      66  ,
 24267    32   880    72    32   589     1     111  size
 24268    32   880    76    32   589     1      66  ,
 24269    32   881    72    32   589     1     111  size
 24270    32   881    76    32   589     1      66  ,
 24271    32   882    72    32   589     0     111  off
 24272    32   882    75    32   589     0      60  )
 24273    32   882    76    32   589     0      60  )
 24274    32   882    77    32   589     0      60  )
 24275    32   882    78    32   589     0     102  ;
 24276    32   883     9    32   589     0      64  }
 24277    32   883    11    32   589     0      48  else
 24278    32   883    16    32   589     0      63  {
 24279    32   884    13    32   589     0      19  return
 24280    32   884    20    32   589     0      59  (
 24281    32   884    21    32   589     0     111  nativeByteOrder
 24282    32   885    21    32   589     0      58  ?
 24283    32   885    23    32   589     0      59  (
 24284    32   885    24    32   589     0     111  FloatBuffer
 24285    32   885    35    32   589     0      60  )
 24286    32   885    36    32   589     0      59  (
 24287    32   885    37    32   589     0      15  new
 24288    32   885    41    32   589     0     111  DirectFloatBufferRU
 24289    32   885    60    32   589     0      59  (
 24290    32   885    61    32   589     0      44  this
 24291    32   885    65    32   589     0      66  ,
 24292    32   886    66    32   589     0      77  -
 24293    32   886    67    32   589     0     112  1
 24294    32   886    68    32   589     0      66  ,
 24295    32   887    66    32   589     0     112  0
 24296    32   887    67    32   589     0      66  ,
 24297    32   888    66    32   589     1     111  size
 24298    32   888    70    32   589     1      66  ,
 24299    32   889    66    32   589     1     111  size
 24300    32   889    70    32   589     1      66  ,
 24301    32   890    66    32   589     0     111  off
 24302    32   890    69    32   589     0      60  )
 24303    32   890    70    32   589     0      60  )
 24304    32   891    21    32   589     0      65  :
 24305    32   891    23    32   589     0      59  (
 24306    32   891    24    32   589     0     111  FloatBuffer
 24307    32   891    35    32   589     0      60  )
 24308    32   891    36    32   589     0      59  (
 24309    32   891    37    32   589     0      15  new
 24310    32   891    41    32   589     0     111  DirectFloatBufferRS
 24311    32   891    60    32   589     0      59  (
 24312    32   891    61    32   589     0      44  this
 24313    32   891    65    32   589     0      66  ,
 24314    32   892    66    32   589     0      77  -
 24315    32   892    67    32   589     0     112  1
 24316    32   892    68    32   589     0      66  ,
 24317    32   893    66    32   589     0     112  0
 24318    32   893    67    32   589     0      66  ,
 24319    32   894    66    32   589     1     111  size
 24320    32   894    70    32   589     1      66  ,
 24321    32   895    66    32   589     1     111  size
 24322    32   895    70    32   589     1      66  ,
 24323    32   896    66    32   589     0     111  off
 24324    32   896    69    32   589     0      60  )
 24325    32   896    70    32   589     0      60  )
 24326    32   896    71    32   589     0      60  )
 24327    32   896    72    32   589     0     102  ;
 24328    32   897     9    32   589     0      64  }
 24329    32   898     5    32   589     0      64  }
 24330    32   898     5    32   589     0    1430  ENDMETHOD
 24331    32   898     5    32   590     0    1431  STARTMETHOD
 24332    32   921     5    32   590     0      41  private
 24333    32   921    13    32   590     0     111  ByteBuffer
 24334    32   921    24    32   590     0     111  putDouble
 24335    32   921    33    32   590     0      59  (
 24336    32   921    34    32   590     0      53  long
 24337    32   921    39    32   590     0     111  a
 24338    32   921    40    32   590     0      66  ,
 24339    32   921    42    32   590     0      32  double
 24340    32   921    49    32   590     0     111  x
 24341    32   921    50    32   590     0      60  )
 24342    32   921    52    32   590     0      63  {
 24343    32   931     9    32   590     0      20  throw
 24344    32   931    15    32   590     0      15  new
 24345    32   931    19    32   590     0     111  ReadOnlyBufferException
 24346    32   931    42    32   590     0      59  (
 24347    32   931    43    32   590     0      60  )
 24348    32   931    44    32   590     0     102  ;
 24349    32   933     5    32   590     0      64  }
 24350    32   933     5    32   590     0    1432  ENDMETHOD
 24351    32   933     5    32   591     0    1433  STARTMETHOD
 24352    32   935     5    32   591     0      10  public
 24353    32   935    12    32   591     0     111  ByteBuffer
 24354    32   935    23    32   591     0     111  putDouble
 24355    32   935    32    32   591     0      59  (
 24356    32   935    33    32   591     0      32  double
 24357    32   935    40    32   591     0     111  x
 24358    32   935    41    32   591     0      60  )
 24359    32   935    43    32   591     0      63  {
 24360    32   940     9    32   591     0      20  throw
 24361    32   940    15    32   591     0      15  new
 24362    32   940    19    32   591     0     111  ReadOnlyBufferException
 24363    32   940    42    32   591     0      59  (
 24364    32   940    43    32   591     0      60  )
 24365    32   940    44    32   591     0     102  ;
 24366    32   942     5    32   591     0      64  }
 24367    32   942     5    32   591     0    1434  ENDMETHOD
 24368    32   942     5    32   592     0    1435  STARTMETHOD
 24369    32   944     5    32   592     0      10  public
 24370    32   944    12    32   592     0     111  ByteBuffer
 24371    32   944    23    32   592     0     111  putDouble
 24372    32   944    32    32   592     0      59  (
 24373    32   944    33    32   592     0      36  int
 24374    32   944    37    32   592     0     111  i
 24375    32   944    38    32   592     0      66  ,
 24376    32   944    40    32   592     0      32  double
 24377    32   944    47    32   592     0     111  x
 24378    32   944    48    32   592     0      60  )
 24379    32   944    50    32   592     0      63  {
 24380    32   949     9    32   592     0      20  throw
 24381    32   949    15    32   592     0      15  new
 24382    32   949    19    32   592     0     111  ReadOnlyBufferException
 24383    32   949    42    32   592     0      59  (
 24384    32   949    43    32   592     0      60  )
 24385    32   949    44    32   592     0     102  ;
 24386    32   951     5    32   592     0      64  }
 24387    32   951     5    32   592     0    1436  ENDMETHOD
 24388    32   951     5    32   593     0    1437  STARTMETHOD
 24389    32   953     5    32   593     0      10  public
 24390    32   953    12    32   593     0     111  DoubleBuffer
 24391    32   953    25    32   593     0     111  asDoubleBuffer
 24392    32   953    39    32   593     0      59  (
 24393    32   953    40    32   593     0      60  )
 24394    32   953    42    32   593     0      63  {
 24395    32   954     9    32   593     1      36  int
 24396    32   954    13    32   593     1     111  off
 24397    32   954    17    32   593     1      67  =
 24398    32   954    19    32   593     1     111  this.position
 24399    32   954    32    32   593     1      59  (
 24400    32   954    33    32   593     1      60  )
 24401    32   954    34    32   593     1     102  ;
 24402    32   955     9    32   593     1      36  int
 24403    32   955    13    32   593     1     111  lim
 24404    32   955    17    32   593     1      67  =
 24405    32   955    19    32   593     1     111  this.limit
 24406    32   955    29    32   593     1      59  (
 24407    32   955    30    32   593     1      60  )
 24408    32   955    31    32   593     1     102  ;
 24409    32   956     9    32   593     0     111  assert
 24410    32   956    16    32   593     0      59  (
 24411    32   956    17    32   593     0     111  off
 24412    32   956    21    32   593     0      92  <=
 24413    32   956    24    32   593     0     111  lim
 24414    32   956    27    32   593     0      60  )
 24415    32   956    28    32   593     0     102  ;
 24416    32   957     9    32   593     0      36  int
 24417    32   957    13    32   593     0     111  rem
 24418    32   957    17    32   593     0      67  =
 24419    32   957    19    32   593     0      59  (
 24420    32   957    20    32   593     0     111  off
 24421    32   957    24    32   593     0      92  <=
 24422    32   957    27    32   593     0     111  lim
 24423    32   957    31    32   593     0      58  ?
 24424    32   957    33    32   593     0     111  lim
 24425    32   957    37    32   593     0      77  -
 24426    32   957    39    32   593     0     111  off
 24427    32   957    43    32   593     0      65  :
 24428    32   957    45    32   593     0     112  0
 24429    32   957    46    32   593     0      60  )
 24430    32   957    47    32   593     0     102  ;
 24431    32   959     9    32   593     0      36  int
 24432    32   959    13    32   593     0     111  size
 24433    32   959    18    32   593     0      67  =
 24434    32   959    20    32   593     0     111  rem
 24435    32   959    24    32   593     0      84  >>
 24436    32   959    27    32   593     0     112  3
 24437    32   959    28    32   593     0     102  ;
 24438    32   960     9    32   593     0      31  if
 24439    32   960    12    32   593     0      59  (
 24440    32   960    13    32   593     0      69  !
 24441    32   960    14    32   593     0     111  unaligned
 24442    32   960    24    32   593     0     101  &&
 24443    32   960    27    32   593     0      59  (
 24444    32   960    28    32   593     0      59  (
 24445    32   960    29    32   593     0     111  address
 24446    32   960    37    32   593     0      74  +
 24447    32   960    39    32   593     0     111  off
 24448    32   960    42    32   593     0      60  )
 24449    32   960    44    32   593     0      82  %
 24450    32   960    46    32   593     0      59  (
 24451    32   960    47    32   593     0     112  1
 24452    32   960    49    32   593     0      90  <<
 24453    32   960    52    32   593     0     112  3
 24454    32   960    53    32   593     0      60  )
 24455    32   960    55    32   593     0      71  !=
 24456    32   960    58    32   593     0     112  0
 24457    32   960    59    32   593     0      60  )
 24458    32   960    60    32   593     0      60  )
 24459    32   960    62    32   593     0      63  {
 24460    32   961    13    32   593     0      19  return
 24461    32   961    20    32   593     0      59  (
 24462    32   961    21    32   593     0     111  bigEndian
 24463    32   962    21    32   593     0      58  ?
 24464    32   962    23    32   593     0      59  (
 24465    32   962    24    32   593     0     111  DoubleBuffer
 24466    32   962    36    32   593     0      60  )
 24467    32   962    37    32   593     0      59  (
 24468    32   962    38    32   593     0      15  new
 24469    32   962    42    32   593     0     111  ByteBufferAsDoubleBufferRB
 24470    32   962    68    32   593     0      59  (
 24471    32   962    69    32   593     0      44  this
 24472    32   962    73    32   593     0      66  ,
 24473    32   963    72    32   593     0      77  -
 24474    32   963    73    32   593     0     112  1
 24475    32   963    74    32   593     0      66  ,
 24476    32   964    72    32   593     0     112  0
 24477    32   964    73    32   593     0      66  ,
 24478    32   965    72    32   593     1     111  size
 24479    32   965    76    32   593     1      66  ,
 24480    32   966    72    32   593     1     111  size
 24481    32   966    76    32   593     1      66  ,
 24482    32   967    72    32   593     0     111  off
 24483    32   967    75    32   593     0      60  )
 24484    32   967    76    32   593     0      60  )
 24485    32   968    21    32   593     0      65  :
 24486    32   968    23    32   593     0      59  (
 24487    32   968    24    32   593     0     111  DoubleBuffer
 24488    32   968    36    32   593     0      60  )
 24489    32   968    37    32   593     0      59  (
 24490    32   968    38    32   593     0      15  new
 24491    32   968    42    32   593     0     111  ByteBufferAsDoubleBufferRL
 24492    32   968    68    32   593     0      59  (
 24493    32   968    69    32   593     0      44  this
 24494    32   968    73    32   593     0      66  ,
 24495    32   969    72    32   593     0      77  -
 24496    32   969    73    32   593     0     112  1
 24497    32   969    74    32   593     0      66  ,
 24498    32   970    72    32   593     0     112  0
 24499    32   970    73    32   593     0      66  ,
 24500    32   971    72    32   593     1     111  size
 24501    32   971    76    32   593     1      66  ,
 24502    32   972    72    32   593     1     111  size
 24503    32   972    76    32   593     1      66  ,
 24504    32   973    72    32   593     0     111  off
 24505    32   973    75    32   593     0      60  )
 24506    32   973    76    32   593     0      60  )
 24507    32   973    77    32   593     0      60  )
 24508    32   973    78    32   593     0     102  ;
 24509    32   974     9    32   593     0      64  }
 24510    32   974    11    32   593     0      48  else
 24511    32   974    16    32   593     0      63  {
 24512    32   975    13    32   593     0      19  return
 24513    32   975    20    32   593     0      59  (
 24514    32   975    21    32   593     0     111  nativeByteOrder
 24515    32   976    21    32   593     0      58  ?
 24516    32   976    23    32   593     0      59  (
 24517    32   976    24    32   593     0     111  DoubleBuffer
 24518    32   976    36    32   593     0      60  )
 24519    32   976    37    32   593     0      59  (
 24520    32   976    38    32   593     0      15  new
 24521    32   976    42    32   593     0     111  DirectDoubleBufferRU
 24522    32   976    62    32   593     0      59  (
 24523    32   976    63    32   593     0      44  this
 24524    32   976    67    32   593     0      66  ,
 24525    32   977    66    32   593     0      77  -
 24526    32   977    67    32   593     0     112  1
 24527    32   977    68    32   593     0      66  ,
 24528    32   978    66    32   593     0     112  0
 24529    32   978    67    32   593     0      66  ,
 24530    32   979    66    32   593     1     111  size
 24531    32   979    70    32   593     1      66  ,
 24532    32   980    66    32   593     1     111  size
 24533    32   980    70    32   593     1      66  ,
 24534    32   981    66    32   593     0     111  off
 24535    32   981    69    32   593     0      60  )
 24536    32   981    70    32   593     0      60  )
 24537    32   982    21    32   593     0      65  :
 24538    32   982    23    32   593     0      59  (
 24539    32   982    24    32   593     0     111  DoubleBuffer
 24540    32   982    36    32   593     0      60  )
 24541    32   982    37    32   593     0      59  (
 24542    32   982    38    32   593     0      15  new
 24543    32   982    42    32   593     0     111  DirectDoubleBufferRS
 24544    32   982    62    32   593     0      59  (
 24545    32   982    63    32   593     0      44  this
 24546    32   982    67    32   593     0      66  ,
 24547    32   983    66    32   593     0      77  -
 24548    32   983    67    32   593     0     112  1
 24549    32   983    68    32   593     0      66  ,
 24550    32   984    66    32   593     0     112  0
 24551    32   984    67    32   593     0      66  ,
 24552    32   985    66    32   593     1     111  size
 24553    32   985    70    32   593     1      66  ,
 24554    32   986    66    32   593     1     111  size
 24555    32   986    70    32   593     1      66  ,
 24556    32   987    66    32   593     0     111  off
 24557    32   987    69    32   593     0      60  )
 24558    32   987    70    32   593     0      60  )
 24559    32   987    71    32   593     0      60  )
 24560    32   987    72    32   593     0     102  ;
 24561    32   988     9    32   593     0      64  }
 24562    32   989     5    32   593     0      64  }
 24563    32   989     5    32   593     0    1438  ENDMETHOD
 24564    32   991     1    32    -1     0      64  }
 24565    32   991     1    32    -1     1    1439  ENDCLASS
 24566    32   991     1    -1    -1     1    1440  ENDFILE C:\javasrc\java\nio\DirectByteBufferR.java
 24567    33     1     1    -1    -1     1    1441  STARTFILE C:\javasrc\java\nio\DirectCharBufferRS.java
 24568    33    28     1    -1    -1     0       5  package
 24569    33    28     9    -1    -1     0     111  java.nio
 24570    33    28    17    -1    -1     0     102  ;
 24571    33    30     1    -1    -1     1      49  import
 24572    33    30     8    -1    -1     1     111  sun.misc.Cleaner
 24573    33    30    24    -1    -1     1     102  ;
 24574    33    31     1    -1    -1     1      49  import
 24575    33    31     8    -1    -1     1     111  sun.misc.Unsafe
 24576    33    31    23    -1    -1     1     102  ;
 24577    33    32     1    -1    -1     1      49  import
 24578    33    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 24579    33    32    31    -1    -1     1     102  ;
 24580    33    33     1    -1    -1     1      49  import
 24581    33    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 24582    33    33    34    -1    -1     1     102  ;
 24583    33    36     1    33    -1     0    1442  STARTCLASS
 24584    33    36     1    33    -1     0      24  class
 24585    33    36     7    33    -1     0     111  DirectCharBufferRS
 24586    33    40     5    33    -1     0      38  extends
 24587    33    40    13    33    -1     0     111  DirectCharBufferS
 24588    33    42     5    33    -1     0      17  implements
 24589    33    42    16    33    -1     0     111  DirectBuffer
 24590    33    43     1    33    -1     0      63  {
 24591    33    43     1    33   594     0    1443  STARTMETHOD
 24592    33   164     5    33   594     0     111  DirectCharBufferRS
 24593    33   164    23    33   594     0      59  (
 24594    33   164    24    33   594     0     111  DirectBuffer
 24595    33   164    37    33   594     0     111  db
 24596    33   164    39    33   594     0      66  ,
 24597    33   165    32    33   594     0      36  int
 24598    33   165    36    33   594     0     111  mark
 24599    33   165    40    33   594     0      66  ,
 24600    33   165    42    33   594     0      36  int
 24601    33   165    46    33   594     0     111  pos
 24602    33   165    49    33   594     0      66  ,
 24603    33   165    51    33   594     0      36  int
 24604    33   165    55    33   594     0     111  lim
 24605    33   165    58    33   594     0      66  ,
 24606    33   165    60    33   594     0      36  int
 24607    33   165    64    33   594     0     111  cap
 24608    33   165    67    33   594     0      66  ,
 24609    33   166    32    33   594     0      36  int
 24610    33   166    36    33   594     0     111  off
 24611    33   166    39    33   594     0      60  )
 24612    33   167     5    33   594     0      63  {
 24613    33   176     9    33   594     0      27  super
 24614    33   176    14    33   594     0      59  (
 24615    33   176    15    33   594     0     111  db
 24616    33   176    17    33   594     0      66  ,
 24617    33   176    19    33   594     0     111  mark
 24618    33   176    23    33   594     0      66  ,
 24619    33   176    25    33   594     0     111  pos
 24620    33   176    28    33   594     0      66  ,
 24621    33   176    30    33   594     0     111  lim
 24622    33   176    33    33   594     0      66  ,
 24623    33   176    35    33   594     0     111  cap
 24624    33   176    38    33   594     0      66  ,
 24625    33   176    40    33   594     0     111  off
 24626    33   176    43    33   594     0      60  )
 24627    33   176    44    33   594     0     102  ;
 24628    33   178     5    33   594     0      64  }
 24629    33   178     5    33   594     0    1444  ENDMETHOD
 24630    33   178     5    33   595     0    1445  STARTMETHOD
 24631    33   180     5    33   595     0      10  public
 24632    33   180    12    33   595     0     111  CharBuffer
 24633    33   180    23    33   595     0     111  slice
 24634    33   180    28    33   595     0      59  (
 24635    33   180    29    33   595     0      60  )
 24636    33   180    31    33   595     0      63  {
 24637    33   181     9    33   595     1      36  int
 24638    33   181    13    33   595     1     111  pos
 24639    33   181    17    33   595     1      67  =
 24640    33   181    19    33   595     1     111  this.position
 24641    33   181    32    33   595     1      59  (
 24642    33   181    33    33   595     1      60  )
 24643    33   181    34    33   595     1     102  ;
 24644    33   182     9    33   595     1      36  int
 24645    33   182    13    33   595     1     111  lim
 24646    33   182    17    33   595     1      67  =
 24647    33   182    19    33   595     1     111  this.limit
 24648    33   182    29    33   595     1      59  (
 24649    33   182    30    33   595     1      60  )
 24650    33   182    31    33   595     1     102  ;
 24651    33   183     9    33   595     0     111  assert
 24652    33   183    16    33   595     0      59  (
 24653    33   183    17    33   595     0     111  pos
 24654    33   183    21    33   595     0      92  <=
 24655    33   183    24    33   595     0     111  lim
 24656    33   183    27    33   595     0      60  )
 24657    33   183    28    33   595     0     102  ;
 24658    33   184     9    33   595     0      36  int
 24659    33   184    13    33   595     0     111  rem
 24660    33   184    17    33   595     0      67  =
 24661    33   184    19    33   595     0      59  (
 24662    33   184    20    33   595     0     111  pos
 24663    33   184    24    33   595     0      92  <=
 24664    33   184    27    33   595     0     111  lim
 24665    33   184    31    33   595     0      58  ?
 24666    33   184    33    33   595     0     111  lim
 24667    33   184    37    33   595     0      77  -
 24668    33   184    39    33   595     0     111  pos
 24669    33   184    43    33   595     0      65  :
 24670    33   184    45    33   595     0     112  0
 24671    33   184    46    33   595     0      60  )
 24672    33   184    47    33   595     0     102  ;
 24673    33   185     9    33   595     0      36  int
 24674    33   185    13    33   595     0     111  off
 24675    33   185    17    33   595     0      67  =
 24676    33   185    19    33   595     0      59  (
 24677    33   185    20    33   595     0     111  pos
 24678    33   185    24    33   595     0      90  <<
 24679    33   185    27    33   595     0     112  1
 24680    33   185    28    33   595     0      60  )
 24681    33   185    29    33   595     0     102  ;
 24682    33   186     9    33   595     0     111  assert
 24683    33   186    16    33   595     0      59  (
 24684    33   186    17    33   595     0     111  off
 24685    33   186    21    33   595     0      88  >=
 24686    33   186    24    33   595     0     112  0
 24687    33   186    25    33   595     0      60  )
 24688    33   186    26    33   595     0     102  ;
 24689    33   187     9    33   595     0      19  return
 24690    33   187    16    33   595     0      15  new
 24691    33   187    20    33   595     0     111  DirectCharBufferRS
 24692    33   187    38    33   595     0      59  (
 24693    33   187    39    33   595     0      44  this
 24694    33   187    43    33   595     0      66  ,
 24695    33   187    45    33   595     0      77  -
 24696    33   187    46    33   595     0     112  1
 24697    33   187    47    33   595     0      66  ,
 24698    33   187    49    33   595     0     112  0
 24699    33   187    50    33   595     0      66  ,
 24700    33   187    52    33   595     0     111  rem
 24701    33   187    55    33   595     0      66  ,
 24702    33   187    57    33   595     0     111  rem
 24703    33   187    60    33   595     0      66  ,
 24704    33   187    62    33   595     0     111  off
 24705    33   187    65    33   595     0      60  )
 24706    33   187    66    33   595     0     102  ;
 24707    33   188     5    33   595     0      64  }
 24708    33   188     5    33   595     0    1446  ENDMETHOD
 24709    33   188     5    33   596     0    1447  STARTMETHOD
 24710    33   190     5    33   596     0      10  public
 24711    33   190    12    33   596     0     111  CharBuffer
 24712    33   190    23    33   596     0     111  duplicate
 24713    33   190    32    33   596     0      59  (
 24714    33   190    33    33   596     0      60  )
 24715    33   190    35    33   596     0      63  {
 24716    33   191     9    33   596     0      19  return
 24717    33   191    16    33   596     0      15  new
 24718    33   191    20    33   596     0     111  DirectCharBufferRS
 24719    33   191    38    33   596     0      59  (
 24720    33   191    39    33   596     0      44  this
 24721    33   191    43    33   596     0      66  ,
 24722    33   192    47    33   596     1     111  this.markValue
 24723    33   192    61    33   596     1      59  (
 24724    33   192    62    33   596     1      60  )
 24725    33   192    63    33   596     1      66  ,
 24726    33   193    47    33   596     1     111  this.position
 24727    33   193    60    33   596     1      59  (
 24728    33   193    61    33   596     1      60  )
 24729    33   193    62    33   596     1      66  ,
 24730    33   194    47    33   596     1     111  this.limit
 24731    33   194    57    33   596     1      59  (
 24732    33   194    58    33   596     1      60  )
 24733    33   194    59    33   596     1      66  ,
 24734    33   195    47    33   596     1     111  this.capacity
 24735    33   195    60    33   596     1      59  (
 24736    33   195    61    33   596     1      60  )
 24737    33   195    62    33   596     1      66  ,
 24738    33   196    47    33   596     0     112  0
 24739    33   196    48    33   596     0      60  )
 24740    33   196    49    33   596     0     102  ;
 24741    33   197     5    33   596     0      64  }
 24742    33   197     5    33   596     0    1448  ENDMETHOD
 24743    33   197     5    33   597     0    1449  STARTMETHOD
 24744    33   199     5    33   597     0      10  public
 24745    33   199    12    33   597     0     111  CharBuffer
 24746    33   199    23    33   597     0     111  asReadOnlyBuffer
 24747    33   199    39    33   597     0      59  (
 24748    33   199    40    33   597     0      60  )
 24749    33   199    42    33   597     0      63  {
 24750    33   208     9    33   597     0      19  return
 24751    33   208    16    33   597     0     111  duplicate
 24752    33   208    25    33   597     0      59  (
 24753    33   208    26    33   597     0      60  )
 24754    33   208    27    33   597     0     102  ;
 24755    33   210     5    33   597     0      64  }
 24756    33   210     5    33   597     0    1450  ENDMETHOD
 24757    33   210     5    33   598     0    1451  STARTMETHOD
 24758    33   261     5    33   598     0      10  public
 24759    33   261    12    33   598     0     111  CharBuffer
 24760    33   261    23    33   598     0     111  put
 24761    33   261    26    33   598     0      59  (
 24762    33   261    27    33   598     0      40  char
 24763    33   261    32    33   598     0     111  x
 24764    33   261    33    33   598     0      60  )
 24765    33   261    35    33   598     0      63  {
 24766    33   266     9    33   598     0      20  throw
 24767    33   266    15    33   598     0      15  new
 24768    33   266    19    33   598     0     111  ReadOnlyBufferException
 24769    33   266    42    33   598     0      59  (
 24770    33   266    43    33   598     0      60  )
 24771    33   266    44    33   598     0     102  ;
 24772    33   268     5    33   598     0      64  }
 24773    33   268     5    33   598     0    1452  ENDMETHOD
 24774    33   268     5    33   599     0    1453  STARTMETHOD
 24775    33   270     5    33   599     0      10  public
 24776    33   270    12    33   599     0     111  CharBuffer
 24777    33   270    23    33   599     0     111  put
 24778    33   270    26    33   599     0      59  (
 24779    33   270    27    33   599     0      36  int
 24780    33   270    31    33   599     0     111  i
 24781    33   270    32    33   599     0      66  ,
 24782    33   270    34    33   599     0      40  char
 24783    33   270    39    33   599     0     111  x
 24784    33   270    40    33   599     0      60  )
 24785    33   270    42    33   599     0      63  {
 24786    33   275     9    33   599     0      20  throw
 24787    33   275    15    33   599     0      15  new
 24788    33   275    19    33   599     0     111  ReadOnlyBufferException
 24789    33   275    42    33   599     0      59  (
 24790    33   275    43    33   599     0      60  )
 24791    33   275    44    33   599     0     102  ;
 24792    33   277     5    33   599     0      64  }
 24793    33   277     5    33   599     0    1454  ENDMETHOD
 24794    33   277     5    33   600     0    1455  STARTMETHOD
 24795    33   279     5    33   600     0      10  public
 24796    33   279    12    33   600     0     111  CharBuffer
 24797    33   279    23    33   600     0     111  put
 24798    33   279    26    33   600     0      59  (
 24799    33   279    27    33   600     0     111  CharBuffer
 24800    33   279    38    33   600     0     111  src
 24801    33   279    41    33   600     0      60  )
 24802    33   279    43    33   600     0      63  {
 24803    33   316     9    33   600     0      20  throw
 24804    33   316    15    33   600     0      15  new
 24805    33   316    19    33   600     0     111  ReadOnlyBufferException
 24806    33   316    42    33   600     0      59  (
 24807    33   316    43    33   600     0      60  )
 24808    33   316    44    33   600     0     102  ;
 24809    33   318     5    33   600     0      64  }
 24810    33   318     5    33   600     0    1456  ENDMETHOD
 24811    33   318     5    33   601     0    1457  STARTMETHOD
 24812    33   320     5    33   601     0      10  public
 24813    33   320    12    33   601     0     111  CharBuffer
 24814    33   320    23    33   601     0     111  put
 24815    33   320    26    33   601     0      59  (
 24816    33   320    27    33   601     0      40  char
 24817    33   320    31    33   601     0      61  [
 24818    33   320    32    33   601     0      62  ]
 24819    33   320    34    33   601     0     111  src
 24820    33   320    37    33   601     0      66  ,
 24821    33   320    39    33   601     0      36  int
 24822    33   320    43    33   601     0     111  offset
 24823    33   320    49    33   601     0      66  ,
 24824    33   320    51    33   601     0      36  int
 24825    33   320    55    33   601     0     111  length
 24826    33   320    61    33   601     0      60  )
 24827    33   320    63    33   601     0      63  {
 24828    33   343     9    33   601     0      20  throw
 24829    33   343    15    33   601     0      15  new
 24830    33   343    19    33   601     0     111  ReadOnlyBufferException
 24831    33   343    42    33   601     0      59  (
 24832    33   343    43    33   601     0      60  )
 24833    33   343    44    33   601     0     102  ;
 24834    33   345     5    33   601     0      64  }
 24835    33   345     5    33   601     0    1458  ENDMETHOD
 24836    33   345     5    33   602     0    1459  STARTMETHOD
 24837    33   347     5    33   602     0      10  public
 24838    33   347    12    33   602     0     111  CharBuffer
 24839    33   347    23    33   602     0     111  compact
 24840    33   347    30    33   602     0      59  (
 24841    33   347    31    33   602     0      60  )
 24842    33   347    33    33   602     0      63  {
 24843    33   360     9    33   602     0      20  throw
 24844    33   360    15    33   602     0      15  new
 24845    33   360    19    33   602     0     111  ReadOnlyBufferException
 24846    33   360    42    33   602     0      59  (
 24847    33   360    43    33   602     0      60  )
 24848    33   360    44    33   602     1     102  ;
 24849    33   362     5    33   602     1      64  }
 24850    33   362     5    33   602     0    1460  ENDMETHOD
 24851    33   362     5    33   603     0    1461  STARTMETHOD
 24852    33   364     5    33   603     0      10  public
 24853    33   364    12    33   603     0      39  boolean
 24854    33   364    20    33   603     0     111  isDirect
 24855    33   364    28    33   603     0      59  (
 24856    33   364    29    33   603     0      60  )
 24857    33   364    31    33   603     0      63  {
 24858    33   365     9    33   603     0      19  return
 24859    33   365    16    33   603     0      52  true
 24860    33   365    20    33   603     1     102  ;
 24861    33   366     5    33   603     1      64  }
 24862    33   366     5    33   603     0    1462  ENDMETHOD
 24863    33   366     5    33   604     0    1463  STARTMETHOD
 24864    33   368     5    33   604     0      10  public
 24865    33   368    12    33   604     0      39  boolean
 24866    33   368    20    33   604     0     111  isReadOnly
 24867    33   368    30    33   604     0      59  (
 24868    33   368    31    33   604     0      60  )
 24869    33   368    33    33   604     0      63  {
 24870    33   369     9    33   604     0      19  return
 24871    33   369    16    33   604     0      52  true
 24872    33   369    20    33   604     1     102  ;
 24873    33   370     5    33   604     1      64  }
 24874    33   370     5    33   604     0    1464  ENDMETHOD
 24875    33   370     5    33   605     0    1465  STARTMETHOD
 24876    33   375     5    33   605     0      10  public
 24877    33   375    12    33   605     0     111  String
 24878    33   375    19    33   605     0     111  toString
 24879    33   375    27    33   605     0      59  (
 24880    33   375    28    33   605     0      36  int
 24881    33   375    32    33   605     0     111  start
 24882    33   375    37    33   605     0      66  ,
 24883    33   375    39    33   605     0      36  int
 24884    33   375    43    33   605     0     111  end
 24885    33   375    46    33   605     0      60  )
 24886    33   375    48    33   605     0      63  {
 24887    33   376     9    33   605     0      31  if
 24888    33   376    12    33   605     0      59  (
 24889    33   376    13    33   605     0      59  (
 24890    33   376    14    33   605     0     111  end
 24891    33   376    18    33   605     0      89  >
 24892    33   376    20    33   605     0     111  limit
 24893    33   376    25    33   605     0      59  (
 24894    33   376    26    33   605     0      60  )
 24895    33   376    27    33   605     0      60  )
 24896    33   376    29    33   605     0      98  ||
 24897    33   376    32    33   605     0      59  (
 24898    33   376    33    33   605     0     111  start
 24899    33   376    39    33   605     0      89  >
 24900    33   376    41    33   605     0     111  end
 24901    33   376    44    33   605     0      60  )
 24902    33   376    45    33   605     0      60  )
 24903    33   377    13    33   605     0      20  throw
 24904    33   377    19    33   605     0      15  new
 24905    33   377    23    33   605     0     111  IndexOutOfBoundsException
 24906    33   377    48    33   605     0      59  (
 24907    33   377    49    33   605     0      60  )
 24908    33   377    50    33   605     0     102  ;
 24909    33   378     9    33   605     0      35  try
 24910    33   378    13    33   605     0      63  {
 24911    33   379    13    33   605     0      36  int
 24912    33   379    17    33   605     0     111  len
 24913    33   379    21    33   605     0      67  =
 24914    33   379    23    33   605     0     111  end
 24915    33   379    27    33   605     0      77  -
 24916    33   379    29    33   605     0     111  start
 24917    33   379    34    33   605     0     102  ;
 24918    33   380    13    33   605     0      40  char
 24919    33   380    17    33   605     0      61  [
 24920    33   380    18    33   605     0      62  ]
 24921    33   380    20    33   605     0     111  ca
 24922    33   380    23    33   605     0      67  =
 24923    33   380    25    33   605     0      15  new
 24924    33   380    29    33   605     0      40  char
 24925    33   380    33    33   605     0      61  [
 24926    33   380    34    33   605     0     111  len
 24927    33   380    37    33   605     0      62  ]
 24928    33   380    38    33   605     0     102  ;
 24929    33   381    13    33   605     0     111  CharBuffer
 24930    33   381    24    33   605     0     111  cb
 24931    33   381    27    33   605     0      67  =
 24932    33   381    29    33   605     0     111  CharBuffer.wrap
 24933    33   381    44    33   605     0      59  (
 24934    33   381    45    33   605     0     111  ca
 24935    33   381    47    33   605     0      60  )
 24936    33   381    48    33   605     0     102  ;
 24937    33   382    13    33   605     0     111  CharBuffer
 24938    33   382    24    33   605     0     111  db
 24939    33   382    27    33   605     0      67  =
 24940    33   382    29    33   605     0     111  this.duplicate
 24941    33   382    43    33   605     0      59  (
 24942    33   382    44    33   605     0      60  )
 24943    33   382    45    33   605     0     102  ;
 24944    33   383    13    33   605     1     111  db.position
 24945    33   383    24    33   605     1      59  (
 24946    33   383    25    33   605     1     111  start
 24947    33   383    30    33   605     1      60  )
 24948    33   383    31    33   605     1     102  ;
 24949    33   384    13    33   605     1     111  db.limit
 24950    33   384    21    33   605     1      59  (
 24951    33   384    22    33   605     1     111  end
 24952    33   384    25    33   605     1      60  )
 24953    33   384    26    33   605     1     102  ;
 24954    33   385    13    33   605     1     111  cb.put
 24955    33   385    19    33   605     1      59  (
 24956    33   385    20    33   605     1     111  db
 24957    33   385    22    33   605     1      60  )
 24958    33   385    23    33   605     1     102  ;
 24959    33   386    13    33   605     0      19  return
 24960    33   386    20    33   605     0      15  new
 24961    33   386    24    33   605     0     111  String
 24962    33   386    30    33   605     0      59  (
 24963    33   386    31    33   605     0     111  ca
 24964    33   386    33    33   605     0      60  )
 24965    33   386    34    33   605     0     102  ;
 24966    33   387     9    33   605     0      64  }
 24967    33   387    11    33   605     0      34  catch
 24968    33   387    17    33   605     0      59  (
 24969    33   387    18    33   605     0     111  StringIndexOutOfBoundsException
 24970    33   387    50    33   605     0     111  x
 24971    33   387    51    33   605     0      60  )
 24972    33   387    53    33   605     0      63  {
 24973    33   388    13    33   605     0      20  throw
 24974    33   388    19    33   605     0      15  new
 24975    33   388    23    33   605     0     111  IndexOutOfBoundsException
 24976    33   388    48    33   605     0      59  (
 24977    33   388    49    33   605     0      60  )
 24978    33   388    50    33   605     0     102  ;
 24979    33   389     9    33   605     0      64  }
 24980    33   390     5    33   605     0      64  }
 24981    33   390     5    33   605     0    1466  ENDMETHOD
 24982    33   390     5    33   606     0    1467  STARTMETHOD
 24983    33   395     5    33   606     0      10  public
 24984    33   395    12    33   606     0     111  CharSequence
 24985    33   395    25    33   606     0     111  subSequence
 24986    33   395    36    33   606     0      59  (
 24987    33   395    37    33   606     0      36  int
 24988    33   395    41    33   606     0     111  start
 24989    33   395    46    33   606     0      66  ,
 24990    33   395    48    33   606     0      36  int
 24991    33   395    52    33   606     0     111  end
 24992    33   395    55    33   606     0      60  )
 24993    33   395    57    33   606     0      63  {
 24994    33   396     9    33   606     1      36  int
 24995    33   396    13    33   606     1     111  pos
 24996    33   396    17    33   606     1      67  =
 24997    33   396    19    33   606     1     111  position
 24998    33   396    27    33   606     1      59  (
 24999    33   396    28    33   606     1      60  )
 25000    33   396    29    33   606     1     102  ;
 25001    33   397     9    33   606     1      36  int
 25002    33   397    13    33   606     1     111  lim
 25003    33   397    17    33   606     1      67  =
 25004    33   397    19    33   606     1     111  limit
 25005    33   397    24    33   606     1      59  (
 25006    33   397    25    33   606     1      60  )
 25007    33   397    26    33   606     1     102  ;
 25008    33   398     9    33   606     0     111  assert
 25009    33   398    16    33   606     0      59  (
 25010    33   398    17    33   606     0     111  pos
 25011    33   398    21    33   606     0      92  <=
 25012    33   398    24    33   606     0     111  lim
 25013    33   398    27    33   606     0      60  )
 25014    33   398    28    33   606     0     102  ;
 25015    33   399     9    33   606     0     111  pos
 25016    33   399    13    33   606     0      67  =
 25017    33   399    15    33   606     0      59  (
 25018    33   399    16    33   606     0     111  pos
 25019    33   399    20    33   606     0      92  <=
 25020    33   399    23    33   606     0     111  lim
 25021    33   399    27    33   606     0      58  ?
 25022    33   399    29    33   606     0     111  pos
 25023    33   399    33    33   606     0      65  :
 25024    33   399    35    33   606     0     111  lim
 25025    33   399    38    33   606     0      60  )
 25026    33   399    39    33   606     0     102  ;
 25027    33   400     9    33   606     0      36  int
 25028    33   400    13    33   606     0     111  len
 25029    33   400    17    33   606     0      67  =
 25030    33   400    19    33   606     0     111  lim
 25031    33   400    23    33   606     0      77  -
 25032    33   400    25    33   606     0     111  pos
 25033    33   400    28    33   606     0     102  ;
 25034    33   402     9    33   606     0      31  if
 25035    33   402    12    33   606     0      59  (
 25036    33   402    13    33   606     0      59  (
 25037    33   402    14    33   606     0     111  start
 25038    33   402    20    33   606     0      93  <
 25039    33   402    22    33   606     0     112  0
 25040    33   402    23    33   606     0      60  )
 25041    33   402    25    33   606     0      98  ||
 25042    33   402    28    33   606     0      59  (
 25043    33   402    29    33   606     0     111  end
 25044    33   402    33    33   606     0      89  >
 25045    33   402    35    33   606     0     111  len
 25046    33   402    38    33   606     0      60  )
 25047    33   402    40    33   606     0      98  ||
 25048    33   402    43    33   606     0      59  (
 25049    33   402    44    33   606     0     111  start
 25050    33   402    50    33   606     0      89  >
 25051    33   402    52    33   606     0     111  end
 25052    33   402    55    33   606     0      60  )
 25053    33   402    56    33   606     0      60  )
 25054    33   403    13    33   606     0      20  throw
 25055    33   403    19    33   606     0      15  new
 25056    33   403    23    33   606     0     111  IndexOutOfBoundsException
 25057    33   403    48    33   606     0      59  (
 25058    33   403    49    33   606     0      60  )
 25059    33   403    50    33   606     0     102  ;
 25060    33   404     9    33   606     0      36  int
 25061    33   404    13    33   606     0     111  sublen
 25062    33   404    20    33   606     0      67  =
 25063    33   404    22    33   606     0     111  end
 25064    33   404    26    33   606     0      77  -
 25065    33   404    28    33   606     0     111  start
 25066    33   404    33    33   606     0     102  ;
 25067    33   405     9    33   606     0      36  int
 25068    33   405    13    33   606     0     111  off
 25069    33   405    17    33   606     0      67  =
 25070    33   405    19    33   606     0      59  (
 25071    33   405    20    33   606     0     111  pos
 25072    33   405    24    33   606     0      74  +
 25073    33   405    26    33   606     0     111  start
 25074    33   405    31    33   606     0      60  )
 25075    33   405    33    33   606     0      90  <<
 25076    33   405    36    33   606     0     112  1
 25077    33   405    37    33   606     0     102  ;
 25078    33   406     9    33   606     0     111  assert
 25079    33   406    16    33   606     0      59  (
 25080    33   406    17    33   606     0     111  off
 25081    33   406    21    33   606     0      88  >=
 25082    33   406    24    33   606     0     112  0
 25083    33   406    25    33   606     0      60  )
 25084    33   406    26    33   606     0     102  ;
 25085    33   407     9    33   606     0      19  return
 25086    33   407    16    33   606     0      15  new
 25087    33   407    20    33   606     0     111  DirectCharBufferRS
 25088    33   407    38    33   606     0      59  (
 25089    33   407    39    33   606     0      44  this
 25090    33   407    43    33   606     0      66  ,
 25091    33   407    45    33   606     0      77  -
 25092    33   407    46    33   606     0     112  1
 25093    33   407    47    33   606     0      66  ,
 25094    33   407    49    33   606     0     112  0
 25095    33   407    50    33   606     0      66  ,
 25096    33   407    52    33   606     0     111  sublen
 25097    33   407    58    33   606     0      66  ,
 25098    33   407    60    33   606     0     111  sublen
 25099    33   407    66    33   606     0      66  ,
 25100    33   407    68    33   606     0     111  off
 25101    33   407    71    33   606     0      60  )
 25102    33   407    72    33   606     0     102  ;
 25103    33   408     5    33   606     0      64  }
 25104    33   408     5    33   606     0    1468  ENDMETHOD
 25105    33   408     5    33   607     0    1469  STARTMETHOD
 25106    33   416     5    33   607     0      10  public
 25107    33   416    12    33   607     0     111  ByteOrder
 25108    33   416    22    33   607     0     111  order
 25109    33   416    27    33   607     0      59  (
 25110    33   416    28    33   607     0      60  )
 25111    33   416    30    33   607     0      63  {
 25112    33   418     9    33   607     0      19  return
 25113    33   418    16    33   607     0      59  (
 25114    33   418    17    33   607     0      59  (
 25115    33   418    18    33   607     0     111  ByteOrder.nativeOrder
 25116    33   418    39    33   607     0      59  (
 25117    33   418    40    33   607     0      60  )
 25118    33   418    42    33   607     0      68  ==
 25119    33   418    45    33   607     0     111  ByteOrder.BIG_ENDIAN
 25120    33   418    65    33   607     0      60  )
 25121    33   419    17    33   607     0      58  ?
 25122    33   419    19    33   607     0     111  ByteOrder.LITTLE_ENDIAN
 25123    33   419    43    33   607     0      65  :
 25124    33   419    45    33   607     0     111  ByteOrder.BIG_ENDIAN
 25125    33   419    65    33   607     0      60  )
 25126    33   419    66    33   607     0     102  ;
 25127    33   425     5    33   607     0      64  }
 25128    33   425     5    33   607     0    1470  ENDMETHOD
 25129    33   452     1    33    -1     0      64  }
 25130    33   452     1    33    -1     1    1471  ENDCLASS
 25131    33   452     1    -1    -1     1    1472  ENDFILE C:\javasrc\java\nio\DirectCharBufferRS.java
 25132    34     1     1    -1    -1     1    1473  STARTFILE C:\javasrc\java\nio\DirectCharBufferRU.java
 25133    34    28     1    -1    -1     0       5  package
 25134    34    28     9    -1    -1     0     111  java.nio
 25135    34    28    17    -1    -1     0     102  ;
 25136    34    30     1    -1    -1     1      49  import
 25137    34    30     8    -1    -1     1     111  sun.misc.Cleaner
 25138    34    30    24    -1    -1     1     102  ;
 25139    34    31     1    -1    -1     1      49  import
 25140    34    31     8    -1    -1     1     111  sun.misc.Unsafe
 25141    34    31    23    -1    -1     1     102  ;
 25142    34    32     1    -1    -1     1      49  import
 25143    34    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 25144    34    32    31    -1    -1     1     102  ;
 25145    34    33     1    -1    -1     1      49  import
 25146    34    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 25147    34    33    34    -1    -1     1     102  ;
 25148    34    36     1    34    -1     0    1474  STARTCLASS
 25149    34    36     1    34    -1     0      24  class
 25150    34    36     7    34    -1     0     111  DirectCharBufferRU
 25151    34    40     5    34    -1     0      38  extends
 25152    34    40    13    34    -1     0     111  DirectCharBufferU
 25153    34    42     5    34    -1     0      17  implements
 25154    34    42    16    34    -1     0     111  DirectBuffer
 25155    34    43     1    34    -1     0      63  {
 25156    34    43     1    34   608     0    1475  STARTMETHOD
 25157    34   164     5    34   608     0     111  DirectCharBufferRU
 25158    34   164    23    34   608     0      59  (
 25159    34   164    24    34   608     0     111  DirectBuffer
 25160    34   164    37    34   608     0     111  db
 25161    34   164    39    34   608     0      66  ,
 25162    34   165    32    34   608     0      36  int
 25163    34   165    36    34   608     0     111  mark
 25164    34   165    40    34   608     0      66  ,
 25165    34   165    42    34   608     0      36  int
 25166    34   165    46    34   608     0     111  pos
 25167    34   165    49    34   608     0      66  ,
 25168    34   165    51    34   608     0      36  int
 25169    34   165    55    34   608     0     111  lim
 25170    34   165    58    34   608     0      66  ,
 25171    34   165    60    34   608     0      36  int
 25172    34   165    64    34   608     0     111  cap
 25173    34   165    67    34   608     0      66  ,
 25174    34   166    32    34   608     0      36  int
 25175    34   166    36    34   608     0     111  off
 25176    34   166    39    34   608     0      60  )
 25177    34   167     5    34   608     0      63  {
 25178    34   176     9    34   608     0      27  super
 25179    34   176    14    34   608     0      59  (
 25180    34   176    15    34   608     0     111  db
 25181    34   176    17    34   608     0      66  ,
 25182    34   176    19    34   608     0     111  mark
 25183    34   176    23    34   608     0      66  ,
 25184    34   176    25    34   608     0     111  pos
 25185    34   176    28    34   608     0      66  ,
 25186    34   176    30    34   608     0     111  lim
 25187    34   176    33    34   608     0      66  ,
 25188    34   176    35    34   608     0     111  cap
 25189    34   176    38    34   608     0      66  ,
 25190    34   176    40    34   608     0     111  off
 25191    34   176    43    34   608     0      60  )
 25192    34   176    44    34   608     0     102  ;
 25193    34   178     5    34   608     0      64  }
 25194    34   178     5    34   608     0    1476  ENDMETHOD
 25195    34   178     5    34   609     0    1477  STARTMETHOD
 25196    34   180     5    34   609     0      10  public
 25197    34   180    12    34   609     0     111  CharBuffer
 25198    34   180    23    34   609     0     111  slice
 25199    34   180    28    34   609     0      59  (
 25200    34   180    29    34   609     0      60  )
 25201    34   180    31    34   609     0      63  {
 25202    34   181     9    34   609     1      36  int
 25203    34   181    13    34   609     1     111  pos
 25204    34   181    17    34   609     1      67  =
 25205    34   181    19    34   609     1     111  this.position
 25206    34   181    32    34   609     1      59  (
 25207    34   181    33    34   609     1      60  )
 25208    34   181    34    34   609     1     102  ;
 25209    34   182     9    34   609     1      36  int
 25210    34   182    13    34   609     1     111  lim
 25211    34   182    17    34   609     1      67  =
 25212    34   182    19    34   609     1     111  this.limit
 25213    34   182    29    34   609     1      59  (
 25214    34   182    30    34   609     1      60  )
 25215    34   182    31    34   609     1     102  ;
 25216    34   183     9    34   609     0     111  assert
 25217    34   183    16    34   609     0      59  (
 25218    34   183    17    34   609     0     111  pos
 25219    34   183    21    34   609     0      92  <=
 25220    34   183    24    34   609     0     111  lim
 25221    34   183    27    34   609     0      60  )
 25222    34   183    28    34   609     0     102  ;
 25223    34   184     9    34   609     0      36  int
 25224    34   184    13    34   609     0     111  rem
 25225    34   184    17    34   609     0      67  =
 25226    34   184    19    34   609     0      59  (
 25227    34   184    20    34   609     0     111  pos
 25228    34   184    24    34   609     0      92  <=
 25229    34   184    27    34   609     0     111  lim
 25230    34   184    31    34   609     0      58  ?
 25231    34   184    33    34   609     0     111  lim
 25232    34   184    37    34   609     0      77  -
 25233    34   184    39    34   609     0     111  pos
 25234    34   184    43    34   609     0      65  :
 25235    34   184    45    34   609     0     112  0
 25236    34   184    46    34   609     0      60  )
 25237    34   184    47    34   609     0     102  ;
 25238    34   185     9    34   609     0      36  int
 25239    34   185    13    34   609     0     111  off
 25240    34   185    17    34   609     0      67  =
 25241    34   185    19    34   609     0      59  (
 25242    34   185    20    34   609     0     111  pos
 25243    34   185    24    34   609     0      90  <<
 25244    34   185    27    34   609     0     112  1
 25245    34   185    28    34   609     0      60  )
 25246    34   185    29    34   609     0     102  ;
 25247    34   186     9    34   609     0     111  assert
 25248    34   186    16    34   609     0      59  (
 25249    34   186    17    34   609     0     111  off
 25250    34   186    21    34   609     0      88  >=
 25251    34   186    24    34   609     0     112  0
 25252    34   186    25    34   609     0      60  )
 25253    34   186    26    34   609     0     102  ;
 25254    34   187     9    34   609     0      19  return
 25255    34   187    16    34   609     0      15  new
 25256    34   187    20    34   609     0     111  DirectCharBufferRU
 25257    34   187    38    34   609     0      59  (
 25258    34   187    39    34   609     0      44  this
 25259    34   187    43    34   609     0      66  ,
 25260    34   187    45    34   609     0      77  -
 25261    34   187    46    34   609     0     112  1
 25262    34   187    47    34   609     0      66  ,
 25263    34   187    49    34   609     0     112  0
 25264    34   187    50    34   609     0      66  ,
 25265    34   187    52    34   609     0     111  rem
 25266    34   187    55    34   609     0      66  ,
 25267    34   187    57    34   609     0     111  rem
 25268    34   187    60    34   609     0      66  ,
 25269    34   187    62    34   609     0     111  off
 25270    34   187    65    34   609     0      60  )
 25271    34   187    66    34   609     0     102  ;
 25272    34   188     5    34   609     0      64  }
 25273    34   188     5    34   609     0    1478  ENDMETHOD
 25274    34   188     5    34   610     0    1479  STARTMETHOD
 25275    34   190     5    34   610     0      10  public
 25276    34   190    12    34   610     0     111  CharBuffer
 25277    34   190    23    34   610     0     111  duplicate
 25278    34   190    32    34   610     0      59  (
 25279    34   190    33    34   610     0      60  )
 25280    34   190    35    34   610     0      63  {
 25281    34   191     9    34   610     0      19  return
 25282    34   191    16    34   610     0      15  new
 25283    34   191    20    34   610     0     111  DirectCharBufferRU
 25284    34   191    38    34   610     0      59  (
 25285    34   191    39    34   610     0      44  this
 25286    34   191    43    34   610     0      66  ,
 25287    34   192    47    34   610     1     111  this.markValue
 25288    34   192    61    34   610     1      59  (
 25289    34   192    62    34   610     1      60  )
 25290    34   192    63    34   610     1      66  ,
 25291    34   193    47    34   610     1     111  this.position
 25292    34   193    60    34   610     1      59  (
 25293    34   193    61    34   610     1      60  )
 25294    34   193    62    34   610     1      66  ,
 25295    34   194    47    34   610     1     111  this.limit
 25296    34   194    57    34   610     1      59  (
 25297    34   194    58    34   610     1      60  )
 25298    34   194    59    34   610     1      66  ,
 25299    34   195    47    34   610     1     111  this.capacity
 25300    34   195    60    34   610     1      59  (
 25301    34   195    61    34   610     1      60  )
 25302    34   195    62    34   610     1      66  ,
 25303    34   196    47    34   610     0     112  0
 25304    34   196    48    34   610     0      60  )
 25305    34   196    49    34   610     0     102  ;
 25306    34   197     5    34   610     0      64  }
 25307    34   197     5    34   610     0    1480  ENDMETHOD
 25308    34   197     5    34   611     0    1481  STARTMETHOD
 25309    34   199     5    34   611     0      10  public
 25310    34   199    12    34   611     0     111  CharBuffer
 25311    34   199    23    34   611     0     111  asReadOnlyBuffer
 25312    34   199    39    34   611     0      59  (
 25313    34   199    40    34   611     0      60  )
 25314    34   199    42    34   611     0      63  {
 25315    34   208     9    34   611     0      19  return
 25316    34   208    16    34   611     0     111  duplicate
 25317    34   208    25    34   611     0      59  (
 25318    34   208    26    34   611     0      60  )
 25319    34   208    27    34   611     0     102  ;
 25320    34   210     5    34   611     0      64  }
 25321    34   210     5    34   611     0    1482  ENDMETHOD
 25322    34   210     5    34   612     0    1483  STARTMETHOD
 25323    34   261     5    34   612     0      10  public
 25324    34   261    12    34   612     0     111  CharBuffer
 25325    34   261    23    34   612     0     111  put
 25326    34   261    26    34   612     0      59  (
 25327    34   261    27    34   612     0      40  char
 25328    34   261    32    34   612     0     111  x
 25329    34   261    33    34   612     0      60  )
 25330    34   261    35    34   612     0      63  {
 25331    34   266     9    34   612     0      20  throw
 25332    34   266    15    34   612     0      15  new
 25333    34   266    19    34   612     0     111  ReadOnlyBufferException
 25334    34   266    42    34   612     0      59  (
 25335    34   266    43    34   612     0      60  )
 25336    34   266    44    34   612     0     102  ;
 25337    34   268     5    34   612     0      64  }
 25338    34   268     5    34   612     0    1484  ENDMETHOD
 25339    34   268     5    34   613     0    1485  STARTMETHOD
 25340    34   270     5    34   613     0      10  public
 25341    34   270    12    34   613     0     111  CharBuffer
 25342    34   270    23    34   613     0     111  put
 25343    34   270    26    34   613     0      59  (
 25344    34   270    27    34   613     0      36  int
 25345    34   270    31    34   613     0     111  i
 25346    34   270    32    34   613     0      66  ,
 25347    34   270    34    34   613     0      40  char
 25348    34   270    39    34   613     0     111  x
 25349    34   270    40    34   613     0      60  )
 25350    34   270    42    34   613     0      63  {
 25351    34   275     9    34   613     0      20  throw
 25352    34   275    15    34   613     0      15  new
 25353    34   275    19    34   613     0     111  ReadOnlyBufferException
 25354    34   275    42    34   613     0      59  (
 25355    34   275    43    34   613     0      60  )
 25356    34   275    44    34   613     0     102  ;
 25357    34   277     5    34   613     0      64  }
 25358    34   277     5    34   613     0    1486  ENDMETHOD
 25359    34   277     5    34   614     0    1487  STARTMETHOD
 25360    34   279     5    34   614     0      10  public
 25361    34   279    12    34   614     0     111  CharBuffer
 25362    34   279    23    34   614     0     111  put
 25363    34   279    26    34   614     0      59  (
 25364    34   279    27    34   614     0     111  CharBuffer
 25365    34   279    38    34   614     0     111  src
 25366    34   279    41    34   614     0      60  )
 25367    34   279    43    34   614     0      63  {
 25368    34   316     9    34   614     0      20  throw
 25369    34   316    15    34   614     0      15  new
 25370    34   316    19    34   614     0     111  ReadOnlyBufferException
 25371    34   316    42    34   614     0      59  (
 25372    34   316    43    34   614     0      60  )
 25373    34   316    44    34   614     0     102  ;
 25374    34   318     5    34   614     0      64  }
 25375    34   318     5    34   614     0    1488  ENDMETHOD
 25376    34   318     5    34   615     0    1489  STARTMETHOD
 25377    34   320     5    34   615     0      10  public
 25378    34   320    12    34   615     0     111  CharBuffer
 25379    34   320    23    34   615     0     111  put
 25380    34   320    26    34   615     0      59  (
 25381    34   320    27    34   615     0      40  char
 25382    34   320    31    34   615     0      61  [
 25383    34   320    32    34   615     0      62  ]
 25384    34   320    34    34   615     0     111  src
 25385    34   320    37    34   615     0      66  ,
 25386    34   320    39    34   615     0      36  int
 25387    34   320    43    34   615     0     111  offset
 25388    34   320    49    34   615     0      66  ,
 25389    34   320    51    34   615     0      36  int
 25390    34   320    55    34   615     0     111  length
 25391    34   320    61    34   615     0      60  )
 25392    34   320    63    34   615     0      63  {
 25393    34   343     9    34   615     0      20  throw
 25394    34   343    15    34   615     0      15  new
 25395    34   343    19    34   615     0     111  ReadOnlyBufferException
 25396    34   343    42    34   615     0      59  (
 25397    34   343    43    34   615     0      60  )
 25398    34   343    44    34   615     0     102  ;
 25399    34   345     5    34   615     0      64  }
 25400    34   345     5    34   615     0    1490  ENDMETHOD
 25401    34   345     5    34   616     0    1491  STARTMETHOD
 25402    34   347     5    34   616     0      10  public
 25403    34   347    12    34   616     0     111  CharBuffer
 25404    34   347    23    34   616     0     111  compact
 25405    34   347    30    34   616     0      59  (
 25406    34   347    31    34   616     0      60  )
 25407    34   347    33    34   616     0      63  {
 25408    34   360     9    34   616     0      20  throw
 25409    34   360    15    34   616     0      15  new
 25410    34   360    19    34   616     0     111  ReadOnlyBufferException
 25411    34   360    42    34   616     0      59  (
 25412    34   360    43    34   616     0      60  )
 25413    34   360    44    34   616     1     102  ;
 25414    34   362     5    34   616     1      64  }
 25415    34   362     5    34   616     0    1492  ENDMETHOD
 25416    34   362     5    34   617     0    1493  STARTMETHOD
 25417    34   364     5    34   617     0      10  public
 25418    34   364    12    34   617     0      39  boolean
 25419    34   364    20    34   617     0     111  isDirect
 25420    34   364    28    34   617     0      59  (
 25421    34   364    29    34   617     0      60  )
 25422    34   364    31    34   617     0      63  {
 25423    34   365     9    34   617     0      19  return
 25424    34   365    16    34   617     0      52  true
 25425    34   365    20    34   617     1     102  ;
 25426    34   366     5    34   617     1      64  }
 25427    34   366     5    34   617     0    1494  ENDMETHOD
 25428    34   366     5    34   618     0    1495  STARTMETHOD
 25429    34   368     5    34   618     0      10  public
 25430    34   368    12    34   618     0      39  boolean
 25431    34   368    20    34   618     0     111  isReadOnly
 25432    34   368    30    34   618     0      59  (
 25433    34   368    31    34   618     0      60  )
 25434    34   368    33    34   618     0      63  {
 25435    34   369     9    34   618     0      19  return
 25436    34   369    16    34   618     0      52  true
 25437    34   369    20    34   618     1     102  ;
 25438    34   370     5    34   618     1      64  }
 25439    34   370     5    34   618     0    1496  ENDMETHOD
 25440    34   370     5    34   619     0    1497  STARTMETHOD
 25441    34   375     5    34   619     0      10  public
 25442    34   375    12    34   619     0     111  String
 25443    34   375    19    34   619     0     111  toString
 25444    34   375    27    34   619     0      59  (
 25445    34   375    28    34   619     0      36  int
 25446    34   375    32    34   619     0     111  start
 25447    34   375    37    34   619     0      66  ,
 25448    34   375    39    34   619     0      36  int
 25449    34   375    43    34   619     0     111  end
 25450    34   375    46    34   619     0      60  )
 25451    34   375    48    34   619     0      63  {
 25452    34   376     9    34   619     0      31  if
 25453    34   376    12    34   619     0      59  (
 25454    34   376    13    34   619     0      59  (
 25455    34   376    14    34   619     0     111  end
 25456    34   376    18    34   619     0      89  >
 25457    34   376    20    34   619     0     111  limit
 25458    34   376    25    34   619     0      59  (
 25459    34   376    26    34   619     0      60  )
 25460    34   376    27    34   619     0      60  )
 25461    34   376    29    34   619     0      98  ||
 25462    34   376    32    34   619     0      59  (
 25463    34   376    33    34   619     0     111  start
 25464    34   376    39    34   619     0      89  >
 25465    34   376    41    34   619     0     111  end
 25466    34   376    44    34   619     0      60  )
 25467    34   376    45    34   619     0      60  )
 25468    34   377    13    34   619     0      20  throw
 25469    34   377    19    34   619     0      15  new
 25470    34   377    23    34   619     0     111  IndexOutOfBoundsException
 25471    34   377    48    34   619     0      59  (
 25472    34   377    49    34   619     0      60  )
 25473    34   377    50    34   619     0     102  ;
 25474    34   378     9    34   619     0      35  try
 25475    34   378    13    34   619     0      63  {
 25476    34   379    13    34   619     0      36  int
 25477    34   379    17    34   619     0     111  len
 25478    34   379    21    34   619     0      67  =
 25479    34   379    23    34   619     0     111  end
 25480    34   379    27    34   619     0      77  -
 25481    34   379    29    34   619     0     111  start
 25482    34   379    34    34   619     0     102  ;
 25483    34   380    13    34   619     0      40  char
 25484    34   380    17    34   619     0      61  [
 25485    34   380    18    34   619     0      62  ]
 25486    34   380    20    34   619     0     111  ca
 25487    34   380    23    34   619     0      67  =
 25488    34   380    25    34   619     0      15  new
 25489    34   380    29    34   619     0      40  char
 25490    34   380    33    34   619     0      61  [
 25491    34   380    34    34   619     0     111  len
 25492    34   380    37    34   619     0      62  ]
 25493    34   380    38    34   619     0     102  ;
 25494    34   381    13    34   619     0     111  CharBuffer
 25495    34   381    24    34   619     0     111  cb
 25496    34   381    27    34   619     0      67  =
 25497    34   381    29    34   619     0     111  CharBuffer.wrap
 25498    34   381    44    34   619     0      59  (
 25499    34   381    45    34   619     0     111  ca
 25500    34   381    47    34   619     0      60  )
 25501    34   381    48    34   619     0     102  ;
 25502    34   382    13    34   619     0     111  CharBuffer
 25503    34   382    24    34   619     0     111  db
 25504    34   382    27    34   619     0      67  =
 25505    34   382    29    34   619     0     111  this.duplicate
 25506    34   382    43    34   619     0      59  (
 25507    34   382    44    34   619     0      60  )
 25508    34   382    45    34   619     0     102  ;
 25509    34   383    13    34   619     1     111  db.position
 25510    34   383    24    34   619     1      59  (
 25511    34   383    25    34   619     1     111  start
 25512    34   383    30    34   619     1      60  )
 25513    34   383    31    34   619     1     102  ;
 25514    34   384    13    34   619     1     111  db.limit
 25515    34   384    21    34   619     1      59  (
 25516    34   384    22    34   619     1     111  end
 25517    34   384    25    34   619     1      60  )
 25518    34   384    26    34   619     1     102  ;
 25519    34   385    13    34   619     1     111  cb.put
 25520    34   385    19    34   619     1      59  (
 25521    34   385    20    34   619     1     111  db
 25522    34   385    22    34   619     1      60  )
 25523    34   385    23    34   619     1     102  ;
 25524    34   386    13    34   619     0      19  return
 25525    34   386    20    34   619     0      15  new
 25526    34   386    24    34   619     0     111  String
 25527    34   386    30    34   619     0      59  (
 25528    34   386    31    34   619     0     111  ca
 25529    34   386    33    34   619     0      60  )
 25530    34   386    34    34   619     0     102  ;
 25531    34   387     9    34   619     0      64  }
 25532    34   387    11    34   619     0      34  catch
 25533    34   387    17    34   619     0      59  (
 25534    34   387    18    34   619     0     111  StringIndexOutOfBoundsException
 25535    34   387    50    34   619     0     111  x
 25536    34   387    51    34   619     0      60  )
 25537    34   387    53    34   619     0      63  {
 25538    34   388    13    34   619     0      20  throw
 25539    34   388    19    34   619     0      15  new
 25540    34   388    23    34   619     0     111  IndexOutOfBoundsException
 25541    34   388    48    34   619     0      59  (
 25542    34   388    49    34   619     0      60  )
 25543    34   388    50    34   619     0     102  ;
 25544    34   389     9    34   619     0      64  }
 25545    34   390     5    34   619     0      64  }
 25546    34   390     5    34   619     0    1498  ENDMETHOD
 25547    34   390     5    34   620     0    1499  STARTMETHOD
 25548    34   395     5    34   620     0      10  public
 25549    34   395    12    34   620     0     111  CharSequence
 25550    34   395    25    34   620     0     111  subSequence
 25551    34   395    36    34   620     0      59  (
 25552    34   395    37    34   620     0      36  int
 25553    34   395    41    34   620     0     111  start
 25554    34   395    46    34   620     0      66  ,
 25555    34   395    48    34   620     0      36  int
 25556    34   395    52    34   620     0     111  end
 25557    34   395    55    34   620     0      60  )
 25558    34   395    57    34   620     0      63  {
 25559    34   396     9    34   620     1      36  int
 25560    34   396    13    34   620     1     111  pos
 25561    34   396    17    34   620     1      67  =
 25562    34   396    19    34   620     1     111  position
 25563    34   396    27    34   620     1      59  (
 25564    34   396    28    34   620     1      60  )
 25565    34   396    29    34   620     1     102  ;
 25566    34   397     9    34   620     1      36  int
 25567    34   397    13    34   620     1     111  lim
 25568    34   397    17    34   620     1      67  =
 25569    34   397    19    34   620     1     111  limit
 25570    34   397    24    34   620     1      59  (
 25571    34   397    25    34   620     1      60  )
 25572    34   397    26    34   620     1     102  ;
 25573    34   398     9    34   620     0     111  assert
 25574    34   398    16    34   620     0      59  (
 25575    34   398    17    34   620     0     111  pos
 25576    34   398    21    34   620     0      92  <=
 25577    34   398    24    34   620     0     111  lim
 25578    34   398    27    34   620     0      60  )
 25579    34   398    28    34   620     0     102  ;
 25580    34   399     9    34   620     0     111  pos
 25581    34   399    13    34   620     0      67  =
 25582    34   399    15    34   620     0      59  (
 25583    34   399    16    34   620     0     111  pos
 25584    34   399    20    34   620     0      92  <=
 25585    34   399    23    34   620     0     111  lim
 25586    34   399    27    34   620     0      58  ?
 25587    34   399    29    34   620     0     111  pos
 25588    34   399    33    34   620     0      65  :
 25589    34   399    35    34   620     0     111  lim
 25590    34   399    38    34   620     0      60  )
 25591    34   399    39    34   620     0     102  ;
 25592    34   400     9    34   620     0      36  int
 25593    34   400    13    34   620     0     111  len
 25594    34   400    17    34   620     0      67  =
 25595    34   400    19    34   620     0     111  lim
 25596    34   400    23    34   620     0      77  -
 25597    34   400    25    34   620     0     111  pos
 25598    34   400    28    34   620     0     102  ;
 25599    34   402     9    34   620     0      31  if
 25600    34   402    12    34   620     0      59  (
 25601    34   402    13    34   620     0      59  (
 25602    34   402    14    34   620     0     111  start
 25603    34   402    20    34   620     0      93  <
 25604    34   402    22    34   620     0     112  0
 25605    34   402    23    34   620     0      60  )
 25606    34   402    25    34   620     0      98  ||
 25607    34   402    28    34   620     0      59  (
 25608    34   402    29    34   620     0     111  end
 25609    34   402    33    34   620     0      89  >
 25610    34   402    35    34   620     0     111  len
 25611    34   402    38    34   620     0      60  )
 25612    34   402    40    34   620     0      98  ||
 25613    34   402    43    34   620     0      59  (
 25614    34   402    44    34   620     0     111  start
 25615    34   402    50    34   620     0      89  >
 25616    34   402    52    34   620     0     111  end
 25617    34   402    55    34   620     0      60  )
 25618    34   402    56    34   620     0      60  )
 25619    34   403    13    34   620     0      20  throw
 25620    34   403    19    34   620     0      15  new
 25621    34   403    23    34   620     0     111  IndexOutOfBoundsException
 25622    34   403    48    34   620     0      59  (
 25623    34   403    49    34   620     0      60  )
 25624    34   403    50    34   620     0     102  ;
 25625    34   404     9    34   620     0      36  int
 25626    34   404    13    34   620     0     111  sublen
 25627    34   404    20    34   620     0      67  =
 25628    34   404    22    34   620     0     111  end
 25629    34   404    26    34   620     0      77  -
 25630    34   404    28    34   620     0     111  start
 25631    34   404    33    34   620     0     102  ;
 25632    34   405     9    34   620     0      36  int
 25633    34   405    13    34   620     0     111  off
 25634    34   405    17    34   620     0      67  =
 25635    34   405    19    34   620     0      59  (
 25636    34   405    20    34   620     0     111  pos
 25637    34   405    24    34   620     0      74  +
 25638    34   405    26    34   620     0     111  start
 25639    34   405    31    34   620     0      60  )
 25640    34   405    33    34   620     0      90  <<
 25641    34   405    36    34   620     0     112  1
 25642    34   405    37    34   620     0     102  ;
 25643    34   406     9    34   620     0     111  assert
 25644    34   406    16    34   620     0      59  (
 25645    34   406    17    34   620     0     111  off
 25646    34   406    21    34   620     0      88  >=
 25647    34   406    24    34   620     0     112  0
 25648    34   406    25    34   620     0      60  )
 25649    34   406    26    34   620     0     102  ;
 25650    34   407     9    34   620     0      19  return
 25651    34   407    16    34   620     0      15  new
 25652    34   407    20    34   620     0     111  DirectCharBufferRU
 25653    34   407    38    34   620     0      59  (
 25654    34   407    39    34   620     0      44  this
 25655    34   407    43    34   620     0      66  ,
 25656    34   407    45    34   620     0      77  -
 25657    34   407    46    34   620     0     112  1
 25658    34   407    47    34   620     0      66  ,
 25659    34   407    49    34   620     0     112  0
 25660    34   407    50    34   620     0      66  ,
 25661    34   407    52    34   620     0     111  sublen
 25662    34   407    58    34   620     0      66  ,
 25663    34   407    60    34   620     0     111  sublen
 25664    34   407    66    34   620     0      66  ,
 25665    34   407    68    34   620     0     111  off
 25666    34   407    71    34   620     0      60  )
 25667    34   407    72    34   620     0     102  ;
 25668    34   408     5    34   620     0      64  }
 25669    34   408     5    34   620     0    1500  ENDMETHOD
 25670    34   408     5    34   621     0    1501  STARTMETHOD
 25671    34   416     5    34   621     0      10  public
 25672    34   416    12    34   621     0     111  ByteOrder
 25673    34   416    22    34   621     0     111  order
 25674    34   416    27    34   621     0      59  (
 25675    34   416    28    34   621     0      60  )
 25676    34   416    30    34   621     0      63  {
 25677    34   422     9    34   621     0      19  return
 25678    34   422    16    34   621     0      59  (
 25679    34   422    17    34   621     0      59  (
 25680    34   422    18    34   621     0     111  ByteOrder.nativeOrder
 25681    34   422    39    34   621     0      59  (
 25682    34   422    40    34   621     0      60  )
 25683    34   422    42    34   621     0      71  !=
 25684    34   422    45    34   621     0     111  ByteOrder.BIG_ENDIAN
 25685    34   422    65    34   621     0      60  )
 25686    34   423    17    34   621     0      58  ?
 25687    34   423    19    34   621     0     111  ByteOrder.LITTLE_ENDIAN
 25688    34   423    43    34   621     0      65  :
 25689    34   423    45    34   621     0     111  ByteOrder.BIG_ENDIAN
 25690    34   423    65    34   621     0      60  )
 25691    34   423    66    34   621     0     102  ;
 25692    34   425     5    34   621     0      64  }
 25693    34   425     5    34   621     0    1502  ENDMETHOD
 25694    34   452     1    34    -1     0      64  }
 25695    34   452     1    34    -1     1    1503  ENDCLASS
 25696    34   452     1    -1    -1     1    1504  ENDFILE C:\javasrc\java\nio\DirectCharBufferRU.java
 25697    35     1     1    -1    -1     1    1505  STARTFILE C:\javasrc\java\nio\DirectCharBufferS.java
 25698    35    28     1    -1    -1     0       5  package
 25699    35    28     9    -1    -1     0     111  java.nio
 25700    35    28    17    -1    -1     0     102  ;
 25701    35    30     1    -1    -1     1      49  import
 25702    35    30     8    -1    -1     1     111  sun.misc.Cleaner
 25703    35    30    24    -1    -1     1     102  ;
 25704    35    31     1    -1    -1     1      49  import
 25705    35    31     8    -1    -1     1     111  sun.misc.Unsafe
 25706    35    31    23    -1    -1     1     102  ;
 25707    35    32     1    -1    -1     1      49  import
 25708    35    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 25709    35    32    31    -1    -1     1     102  ;
 25710    35    33     1    -1    -1     1      49  import
 25711    35    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 25712    35    33    34    -1    -1     1     102  ;
 25713    35    36     1    35    -1     0    1506  STARTCLASS
 25714    35    36     1    35    -1     0      24  class
 25715    35    36     7    35    -1     0     111  DirectCharBufferS
 25716    35    38     5    35    -1     0      38  extends
 25717    35    38    13    35    -1     0     111  CharBuffer
 25718    35    42     5    35    -1     0      17  implements
 25719    35    42    16    35    -1     0     111  DirectBuffer
 25720    35    43     1    35    -1     0      63  {
 25721    35    48     5    35    -1     0      23  protected
 25722    35    48    15    35    -1     0      45  static
 25723    35    48    22    35    -1     0       6  final
 25724    35    48    28    35    -1     0     111  Unsafe
 25725    35    48    35    35    -1     0     111  unsafe
 25726    35    48    42    35    -1     0      67  =
 25727    35    48    44    35    -1     0     111  Bits.unsafe
 25728    35    48    55    35    -1     0      59  (
 25729    35    48    56    35    -1     0      60  )
 25730    35    48    57    35    -1     0     102  ;
 25731    35    51     5    35    -1     0      23  protected
 25732    35    51    15    35    -1     0      45  static
 25733    35    51    22    35    -1     0       6  final
 25734    35    51    28    35    -1     0      39  boolean
 25735    35    51    36    35    -1     0     111  unaligned
 25736    35    51    46    35    -1     0      67  =
 25737    35    51    48    35    -1     0     111  Bits.unaligned
 25738    35    51    62    35    -1     0      59  (
 25739    35    51    63    35    -1     0      60  )
 25740    35    51    64    35    -1     0     102  ;
 25741    35    59     5    35    -1     0      23  protected
 25742    35    59    15    35    -1     0     111  Object
 25743    35    59    22    35    -1     0     111  viewedBuffer
 25744    35    59    35    35    -1     0      67  =
 25745    35    59    37    35    -1     0      21  null
 25746    35    59    41    35    -1     0     102  ;
 25747    35    59    41    35   622     0    1507  STARTMETHOD
 25748    35    61     5    35   622     0      10  public
 25749    35    61    12    35   622     0     111  Object
 25750    35    61    19    35   622     0     111  viewedBuffer
 25751    35    61    31    35   622     0      59  (
 25752    35    61    32    35   622     0      60  )
 25753    35    61    34    35   622     0      63  {
 25754    35    62     9    35   622     0      19  return
 25755    35    62    16    35   622     0     111  viewedBuffer
 25756    35    62    28    35   622     0     102  ;
 25757    35    63     5    35   622     0      64  }
 25758    35    63     5    35   622     0    1508  ENDMETHOD
 25759    35    63     5    35   623     0    1509  STARTMETHOD
 25760    35   100     5    35   623     0      10  public
 25761    35   100    12    35   623     0     111  Cleaner
 25762    35   100    20    35   623     0     111  cleaner
 25763    35   100    27    35   623     0      59  (
 25764    35   100    28    35   623     0      60  )
 25765    35   100    30    35   623     0      63  {
 25766    35   100    32    35   623     0      19  return
 25767    35   100    39    35   623     0      21  null
 25768    35   100    43    35   623     0     102  ;
 25769    35   100    45    35   623     0      64  }
 25770    35   100    45    35   623     0    1510  ENDMETHOD
 25771    35   100    45    35   624     0    1511  STARTMETHOD
 25772    35   164     5    35   624     0     111  DirectCharBufferS
 25773    35   164    22    35   624     0      59  (
 25774    35   164    23    35   624     0     111  DirectBuffer
 25775    35   164    36    35   624     0     111  db
 25776    35   164    38    35   624     0      66  ,
 25777    35   165    32    35   624     0      36  int
 25778    35   165    36    35   624     0     111  mark
 25779    35   165    40    35   624     0      66  ,
 25780    35   165    42    35   624     0      36  int
 25781    35   165    46    35   624     0     111  pos
 25782    35   165    49    35   624     0      66  ,
 25783    35   165    51    35   624     0      36  int
 25784    35   165    55    35   624     0     111  lim
 25785    35   165    58    35   624     0      66  ,
 25786    35   165    60    35   624     0      36  int
 25787    35   165    64    35   624     0     111  cap
 25788    35   165    67    35   624     0      66  ,
 25789    35   166    32    35   624     0      36  int
 25790    35   166    36    35   624     0     111  off
 25791    35   166    39    35   624     0      60  )
 25792    35   167     5    35   624     0      63  {
 25793    35   169     9    35   624     0      27  super
 25794    35   169    14    35   624     0      59  (
 25795    35   169    15    35   624     0     111  mark
 25796    35   169    19    35   624     0      66  ,
 25797    35   169    21    35   624     0     111  pos
 25798    35   169    24    35   624     0      66  ,
 25799    35   169    26    35   624     0     111  lim
 25800    35   169    29    35   624     0      66  ,
 25801    35   169    31    35   624     0     111  cap
 25802    35   169    34    35   624     0      60  )
 25803    35   169    35    35   624     0     102  ;
 25804    35   170     9    35   624     0     111  address
 25805    35   170    17    35   624     0      67  =
 25806    35   170    19    35   624     0     111  db.address
 25807    35   170    29    35   624     0      59  (
 25808    35   170    30    35   624     0      60  )
 25809    35   170    32    35   624     0      74  +
 25810    35   170    34    35   624     0     111  off
 25811    35   170    37    35   624     0     102  ;
 25812    35   171     9    35   624     0     111  viewedBuffer
 25813    35   171    22    35   624     0      67  =
 25814    35   171    24    35   624     0     111  db
 25815    35   171    26    35   624     0     102  ;
 25816    35   178     5    35   624     0      64  }
 25817    35   178     5    35   624     0    1512  ENDMETHOD
 25818    35   178     5    35   625     0    1513  STARTMETHOD
 25819    35   180     5    35   625     0      10  public
 25820    35   180    12    35   625     0     111  CharBuffer
 25821    35   180    23    35   625     0     111  slice
 25822    35   180    28    35   625     0      59  (
 25823    35   180    29    35   625     0      60  )
 25824    35   180    31    35   625     0      63  {
 25825    35   181     9    35   625     1      36  int
 25826    35   181    13    35   625     1     111  pos
 25827    35   181    17    35   625     1      67  =
 25828    35   181    19    35   625     1     111  this.position
 25829    35   181    32    35   625     1      59  (
 25830    35   181    33    35   625     1      60  )
 25831    35   181    34    35   625     1     102  ;
 25832    35   182     9    35   625     1      36  int
 25833    35   182    13    35   625     1     111  lim
 25834    35   182    17    35   625     1      67  =
 25835    35   182    19    35   625     1     111  this.limit
 25836    35   182    29    35   625     1      59  (
 25837    35   182    30    35   625     1      60  )
 25838    35   182    31    35   625     1     102  ;
 25839    35   183     9    35   625     0     111  assert
 25840    35   183    16    35   625     0      59  (
 25841    35   183    17    35   625     0     111  pos
 25842    35   183    21    35   625     0      92  <=
 25843    35   183    24    35   625     0     111  lim
 25844    35   183    27    35   625     0      60  )
 25845    35   183    28    35   625     0     102  ;
 25846    35   184     9    35   625     0      36  int
 25847    35   184    13    35   625     0     111  rem
 25848    35   184    17    35   625     0      67  =
 25849    35   184    19    35   625     0      59  (
 25850    35   184    20    35   625     0     111  pos
 25851    35   184    24    35   625     0      92  <=
 25852    35   184    27    35   625     0     111  lim
 25853    35   184    31    35   625     0      58  ?
 25854    35   184    33    35   625     0     111  lim
 25855    35   184    37    35   625     0      77  -
 25856    35   184    39    35   625     0     111  pos
 25857    35   184    43    35   625     0      65  :
 25858    35   184    45    35   625     0     112  0
 25859    35   184    46    35   625     0      60  )
 25860    35   184    47    35   625     0     102  ;
 25861    35   185     9    35   625     0      36  int
 25862    35   185    13    35   625     0     111  off
 25863    35   185    17    35   625     0      67  =
 25864    35   185    19    35   625     0      59  (
 25865    35   185    20    35   625     0     111  pos
 25866    35   185    24    35   625     0      90  <<
 25867    35   185    27    35   625     0     112  1
 25868    35   185    28    35   625     0      60  )
 25869    35   185    29    35   625     0     102  ;
 25870    35   186     9    35   625     0     111  assert
 25871    35   186    16    35   625     0      59  (
 25872    35   186    17    35   625     0     111  off
 25873    35   186    21    35   625     0      88  >=
 25874    35   186    24    35   625     0     112  0
 25875    35   186    25    35   625     0      60  )
 25876    35   186    26    35   625     0     102  ;
 25877    35   187     9    35   625     0      19  return
 25878    35   187    16    35   625     0      15  new
 25879    35   187    20    35   625     0     111  DirectCharBufferS
 25880    35   187    37    35   625     0      59  (
 25881    35   187    38    35   625     0      44  this
 25882    35   187    42    35   625     0      66  ,
 25883    35   187    44    35   625     0      77  -
 25884    35   187    45    35   625     0     112  1
 25885    35   187    46    35   625     0      66  ,
 25886    35   187    48    35   625     0     112  0
 25887    35   187    49    35   625     0      66  ,
 25888    35   187    51    35   625     0     111  rem
 25889    35   187    54    35   625     0      66  ,
 25890    35   187    56    35   625     0     111  rem
 25891    35   187    59    35   625     0      66  ,
 25892    35   187    61    35   625     0     111  off
 25893    35   187    64    35   625     1      60  )
 25894    35   187    65    35   625     1     102  ;
 25895    35   188     5    35   625     1      64  }
 25896    35   188     5    35   625     0    1514  ENDMETHOD
 25897    35   188     5    35   626     0    1515  STARTMETHOD
 25898    35   190     5    35   626     0      10  public
 25899    35   190    12    35   626     0     111  CharBuffer
 25900    35   190    23    35   626     0     111  duplicate
 25901    35   190    32    35   626     0      59  (
 25902    35   190    33    35   626     0      60  )
 25903    35   190    35    35   626     0      63  {
 25904    35   191     9    35   626     0      19  return
 25905    35   191    16    35   626     0      15  new
 25906    35   191    20    35   626     0     111  DirectCharBufferS
 25907    35   191    37    35   626     0      59  (
 25908    35   191    38    35   626     0      44  this
 25909    35   191    42    35   626     0      66  ,
 25910    35   192    47    35   626     1     111  this.markValue
 25911    35   192    61    35   626     1      59  (
 25912    35   192    62    35   626     1      60  )
 25913    35   192    63    35   626     1      66  ,
 25914    35   193    47    35   626     1     111  this.position
 25915    35   193    60    35   626     1      59  (
 25916    35   193    61    35   626     1      60  )
 25917    35   193    62    35   626     1      66  ,
 25918    35   194    47    35   626     1     111  this.limit
 25919    35   194    57    35   626     1      59  (
 25920    35   194    58    35   626     1      60  )
 25921    35   194    59    35   626     1      66  ,
 25922    35   195    47    35   626     1     111  this.capacity
 25923    35   195    60    35   626     1      59  (
 25924    35   195    61    35   626     1      60  )
 25925    35   195    62    35   626     1      66  ,
 25926    35   196    47    35   626     0     112  0
 25927    35   196    48    35   626     1      60  )
 25928    35   196    49    35   626     1     102  ;
 25929    35   197     5    35   626     1      64  }
 25930    35   197     5    35   626     0    1516  ENDMETHOD
 25931    35   197     5    35   627     0    1517  STARTMETHOD
 25932    35   199     5    35   627     0      10  public
 25933    35   199    12    35   627     0     111  CharBuffer
 25934    35   199    23    35   627     0     111  asReadOnlyBuffer
 25935    35   199    39    35   627     0      59  (
 25936    35   199    40    35   627     0      60  )
 25937    35   199    42    35   627     0      63  {
 25938    35   201     9    35   627     0      19  return
 25939    35   201    16    35   627     0      15  new
 25940    35   201    20    35   627     0     111  DirectCharBufferRS
 25941    35   201    38    35   627     0      59  (
 25942    35   201    39    35   627     0      44  this
 25943    35   201    43    35   627     0      66  ,
 25944    35   202    44    35   627     1     111  this.markValue
 25945    35   202    58    35   627     1      59  (
 25946    35   202    59    35   627     1      60  )
 25947    35   202    60    35   627     1      66  ,
 25948    35   203    44    35   627     1     111  this.position
 25949    35   203    57    35   627     1      59  (
 25950    35   203    58    35   627     1      60  )
 25951    35   203    59    35   627     1      66  ,
 25952    35   204    44    35   627     1     111  this.limit
 25953    35   204    54    35   627     1      59  (
 25954    35   204    55    35   627     1      60  )
 25955    35   204    56    35   627     1      66  ,
 25956    35   205    44    35   627     1     111  this.capacity
 25957    35   205    57    35   627     1      59  (
 25958    35   205    58    35   627     1      60  )
 25959    35   205    59    35   627     1      66  ,
 25960    35   206    44    35   627     0     112  0
 25961    35   206    45    35   627     1      60  )
 25962    35   206    46    35   627     1     102  ;
 25963    35   210     5    35   627     1      64  }
 25964    35   210     5    35   627     0    1518  ENDMETHOD
 25965    35   210     5    35   628     0    1519  STARTMETHOD
 25966    35   214     5    35   628     0      10  public
 25967    35   214    12    35   628     0      53  long
 25968    35   214    17    35   628     0     111  address
 25969    35   214    24    35   628     0      59  (
 25970    35   214    25    35   628     0      60  )
 25971    35   214    27    35   628     0      63  {
 25972    35   215     9    35   628     0      19  return
 25973    35   215    16    35   628     0     111  address
 25974    35   215    23    35   628     0     102  ;
 25975    35   216     5    35   628     0      64  }
 25976    35   216     5    35   628     0    1520  ENDMETHOD
 25977    35   216     5    35   629     0    1521  STARTMETHOD
 25978    35   218     5    35   629     0      41  private
 25979    35   218    13    35   629     0      53  long
 25980    35   218    18    35   629     0     111  ix
 25981    35   218    20    35   629     0      59  (
 25982    35   218    21    35   629     0      36  int
 25983    35   218    25    35   629     0     111  i
 25984    35   218    26    35   629     0      60  )
 25985    35   218    28    35   629     0      63  {
 25986    35   219     9    35   629     0      19  return
 25987    35   219    16    35   629     0     111  address
 25988    35   219    24    35   629     0      74  +
 25989    35   219    26    35   629     0      59  (
 25990    35   219    27    35   629     0     111  i
 25991    35   219    29    35   629     0      90  <<
 25992    35   219    32    35   629     0     112  1
 25993    35   219    33    35   629     0      60  )
 25994    35   219    34    35   629     0     102  ;
 25995    35   220     5    35   629     0      64  }
 25996    35   220     5    35   629     0    1522  ENDMETHOD
 25997    35   220     5    35   630     0    1523  STARTMETHOD
 25998    35   222     5    35   630     0      10  public
 25999    35   222    12    35   630     0      40  char
 26000    35   222    17    35   630     0     111  get
 26001    35   222    20    35   630     0      59  (
 26002    35   222    21    35   630     0      60  )
 26003    35   222    23    35   630     0      63  {
 26004    35   223     9    35   630     0      19  return
 26005    35   223    16    35   630     0      59  (
 26006    35   223    17    35   630     0     111  Bits.swap
 26007    35   223    26    35   630     0      59  (
 26008    35   223    27    35   630     0     111  unsafe.getChar
 26009    35   223    41    35   630     0      59  (
 26010    35   223    42    35   630     0     111  ix
 26011    35   223    44    35   630     0      59  (
 26012    35   223    45    35   630     0     111  nextGetIndex
 26013    35   223    57    35   630     0      59  (
 26014    35   223    58    35   630     0      60  )
 26015    35   223    59    35   630     0      60  )
 26016    35   223    60    35   630     0      60  )
 26017    35   223    61    35   630     0      60  )
 26018    35   223    62    35   630     0      60  )
 26019    35   223    63    35   630     0     102  ;
 26020    35   224     5    35   630     0      64  }
 26021    35   224     5    35   630     0    1524  ENDMETHOD
 26022    35   224     5    35   631     0    1525  STARTMETHOD
 26023    35   226     5    35   631     0      10  public
 26024    35   226    12    35   631     0      40  char
 26025    35   226    17    35   631     0     111  get
 26026    35   226    20    35   631     0      59  (
 26027    35   226    21    35   631     0      36  int
 26028    35   226    25    35   631     0     111  i
 26029    35   226    26    35   631     0      60  )
 26030    35   226    28    35   631     0      63  {
 26031    35   227     9    35   631     0      19  return
 26032    35   227    16    35   631     0      59  (
 26033    35   227    17    35   631     0     111  Bits.swap
 26034    35   227    26    35   631     0      59  (
 26035    35   227    27    35   631     0     111  unsafe.getChar
 26036    35   227    41    35   631     0      59  (
 26037    35   227    42    35   631     0     111  ix
 26038    35   227    44    35   631     0      59  (
 26039    35   227    45    35   631     0     111  checkIndex
 26040    35   227    55    35   631     0      59  (
 26041    35   227    56    35   631     0     111  i
 26042    35   227    57    35   631     0      60  )
 26043    35   227    58    35   631     0      60  )
 26044    35   227    59    35   631     0      60  )
 26045    35   227    60    35   631     0      60  )
 26046    35   227    61    35   631     0      60  )
 26047    35   227    62    35   631     0     102  ;
 26048    35   228     5    35   631     0      64  }
 26049    35   228     5    35   631     0    1526  ENDMETHOD
 26050    35   228     5    35   632     0    1527  STARTMETHOD
 26051    35   230     5    35   632     0      10  public
 26052    35   230    12    35   632     0     111  CharBuffer
 26053    35   230    23    35   632     0     111  get
 26054    35   230    26    35   632     0      59  (
 26055    35   230    27    35   632     0      40  char
 26056    35   230    31    35   632     0      61  [
 26057    35   230    32    35   632     0      62  ]
 26058    35   230    34    35   632     0     111  dst
 26059    35   230    37    35   632     0      66  ,
 26060    35   230    39    35   632     0      36  int
 26061    35   230    43    35   632     0     111  offset
 26062    35   230    49    35   632     0      66  ,
 26063    35   230    51    35   632     0      36  int
 26064    35   230    55    35   632     0     111  length
 26065    35   230    61    35   632     0      60  )
 26066    35   230    63    35   632     0      63  {
 26067    35   232     9    35   632     0      31  if
 26068    35   232    12    35   632     0      59  (
 26069    35   232    13    35   632     0      59  (
 26070    35   232    14    35   632     0     111  length
 26071    35   232    21    35   632     0      90  <<
 26072    35   232    24    35   632     0     112  1
 26073    35   232    25    35   632     0      60  )
 26074    35   232    27    35   632     0      89  >
 26075    35   232    29    35   632     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 26076    35   232    61    35   632     0      60  )
 26077    35   232    63    35   632     0      63  {
 26078    35   233    13    35   632     0     111  checkBounds
 26079    35   233    24    35   632     0      59  (
 26080    35   233    25    35   632     0     111  offset
 26081    35   233    31    35   632     0      66  ,
 26082    35   233    33    35   632     0     111  length
 26083    35   233    39    35   632     0      66  ,
 26084    35   233    41    35   632     0     111  dst.length
 26085    35   233    51    35   632     0      60  )
 26086    35   233    52    35   632     0     102  ;
 26087    35   234    13    35   632     1      36  int
 26088    35   234    17    35   632     1     111  pos
 26089    35   234    21    35   632     1      67  =
 26090    35   234    23    35   632     1     111  position
 26091    35   234    31    35   632     1      59  (
 26092    35   234    32    35   632     1      60  )
 26093    35   234    33    35   632     1     102  ;
 26094    35   235    13    35   632     1      36  int
 26095    35   235    17    35   632     1     111  lim
 26096    35   235    21    35   632     1      67  =
 26097    35   235    23    35   632     1     111  limit
 26098    35   235    28    35   632     1      59  (
 26099    35   235    29    35   632     1      60  )
 26100    35   235    30    35   632     1     102  ;
 26101    35   236    13    35   632     0     111  assert
 26102    35   236    20    35   632     0      59  (
 26103    35   236    21    35   632     0     111  pos
 26104    35   236    25    35   632     0      92  <=
 26105    35   236    28    35   632     0     111  lim
 26106    35   236    31    35   632     0      60  )
 26107    35   236    32    35   632     0     102  ;
 26108    35   237    13    35   632     0      36  int
 26109    35   237    17    35   632     0     111  rem
 26110    35   237    21    35   632     0      67  =
 26111    35   237    23    35   632     0      59  (
 26112    35   237    24    35   632     0     111  pos
 26113    35   237    28    35   632     0      92  <=
 26114    35   237    31    35   632     0     111  lim
 26115    35   237    35    35   632     0      58  ?
 26116    35   237    37    35   632     0     111  lim
 26117    35   237    41    35   632     0      77  -
 26118    35   237    43    35   632     0     111  pos
 26119    35   237    47    35   632     0      65  :
 26120    35   237    49    35   632     0     112  0
 26121    35   237    50    35   632     0      60  )
 26122    35   237    51    35   632     0     102  ;
 26123    35   238    13    35   632     0      31  if
 26124    35   238    16    35   632     0      59  (
 26125    35   238    17    35   632     0     111  length
 26126    35   238    24    35   632     0      89  >
 26127    35   238    26    35   632     0     111  rem
 26128    35   238    29    35   632     0      60  )
 26129    35   239    17    35   632     0      20  throw
 26130    35   239    23    35   632     0      15  new
 26131    35   239    27    35   632     0     111  BufferUnderflowException
 26132    35   239    51    35   632     0      59  (
 26133    35   239    52    35   632     0      60  )
 26134    35   239    53    35   632     0     102  ;
 26135    35   241    13    35   632     0      31  if
 26136    35   241    16    35   632     0      59  (
 26137    35   241    17    35   632     0     111  order
 26138    35   241    22    35   632     0      59  (
 26139    35   241    23    35   632     0      60  )
 26140    35   241    25    35   632     0      71  !=
 26141    35   241    28    35   632     0     111  ByteOrder.nativeOrder
 26142    35   241    49    35   632     0      59  (
 26143    35   241    50    35   632     0      60  )
 26144    35   241    51    35   632     0      60  )
 26145    35   242    17    35   632     0     111  Bits.copyToCharArray
 26146    35   242    37    35   632     0      59  (
 26147    35   242    38    35   632     0     111  ix
 26148    35   242    40    35   632     0      59  (
 26149    35   242    41    35   632     0     111  pos
 26150    35   242    44    35   632     0      60  )
 26151    35   242    45    35   632     0      66  ,
 26152    35   242    47    35   632     0     111  dst
 26153    35   242    50    35   632     0      66  ,
 26154    35   243    43    35   632     0     111  offset
 26155    35   243    50    35   632     0      90  <<
 26156    35   243    53    35   632     0     112  1
 26157    35   243    54    35   632     0      66  ,
 26158    35   244    43    35   632     0     111  length
 26159    35   244    50    35   632     0      90  <<
 26160    35   244    53    35   632     0     112  1
 26161    35   244    54    35   632     0      60  )
 26162    35   244    55    35   632     0     102  ;
 26163    35   245    13    35   632     0      48  else
 26164    35   246    17    35   632     0     111  Bits.copyToByteArray
 26165    35   246    37    35   632     0      59  (
 26166    35   246    38    35   632     0     111  ix
 26167    35   246    40    35   632     0      59  (
 26168    35   246    41    35   632     0     111  pos
 26169    35   246    44    35   632     0      60  )
 26170    35   246    45    35   632     0      66  ,
 26171    35   246    47    35   632     0     111  dst
 26172    35   246    50    35   632     0      66  ,
 26173    35   247    38    35   632     0     111  offset
 26174    35   247    45    35   632     0      90  <<
 26175    35   247    48    35   632     0     112  1
 26176    35   247    49    35   632     0      66  ,
 26177    35   248    38    35   632     0     111  length
 26178    35   248    45    35   632     0      90  <<
 26179    35   248    48    35   632     0     112  1
 26180    35   248    49    35   632     0      60  )
 26181    35   248    50    35   632     0     102  ;
 26182    35   249    13    35   632     0     111  position
 26183    35   249    21    35   632     0      59  (
 26184    35   249    22    35   632     0     111  pos
 26185    35   249    26    35   632     0      74  +
 26186    35   249    28    35   632     0     111  length
 26187    35   249    34    35   632     0      60  )
 26188    35   249    35    35   632     0     102  ;
 26189    35   250     9    35   632     0      64  }
 26190    35   250    11    35   632     0      48  else
 26191    35   250    16    35   632     0      63  {
 26192    35   251    13    35   632     0     111  super.get
 26193    35   251    22    35   632     0      59  (
 26194    35   251    23    35   632     0     111  dst
 26195    35   251    26    35   632     0      66  ,
 26196    35   251    28    35   632     0     111  offset
 26197    35   251    34    35   632     0      66  ,
 26198    35   251    36    35   632     0     111  length
 26199    35   251    42    35   632     0      60  )
 26200    35   251    43    35   632     0     102  ;
 26201    35   252     9    35   632     0      64  }
 26202    35   253     9    35   632     0      19  return
 26203    35   253    16    35   632     0      44  this
 26204    35   253    20    35   632     0     102  ;
 26205    35   257     5    35   632     0      64  }
 26206    35   257     5    35   632     0    1528  ENDMETHOD
 26207    35   257     5    35   633     0    1529  STARTMETHOD
 26208    35   261     5    35   633     0      10  public
 26209    35   261    12    35   633     0     111  CharBuffer
 26210    35   261    23    35   633     0     111  put
 26211    35   261    26    35   633     0      59  (
 26212    35   261    27    35   633     0      40  char
 26213    35   261    32    35   633     0     111  x
 26214    35   261    33    35   633     0      60  )
 26215    35   261    35    35   633     0      63  {
 26216    35   263     9    35   633     0     111  unsafe.putChar
 26217    35   263    23    35   633     0      59  (
 26218    35   263    24    35   633     0     111  ix
 26219    35   263    26    35   633     0      59  (
 26220    35   263    27    35   633     0     111  nextPutIndex
 26221    35   263    39    35   633     0      59  (
 26222    35   263    40    35   633     0      60  )
 26223    35   263    41    35   633     0      60  )
 26224    35   263    42    35   633     0      66  ,
 26225    35   263    44    35   633     0     111  Bits.swap
 26226    35   263    53    35   633     0      59  (
 26227    35   263    54    35   633     0      59  (
 26228    35   263    55    35   633     0     111  x
 26229    35   263    56    35   633     0      60  )
 26230    35   263    57    35   633     0      60  )
 26231    35   263    58    35   633     0      60  )
 26232    35   263    59    35   633     0     102  ;
 26233    35   264     9    35   633     0      19  return
 26234    35   264    16    35   633     0      44  this
 26235    35   264    20    35   633     0     102  ;
 26236    35   268     5    35   633     0      64  }
 26237    35   268     5    35   633     0    1530  ENDMETHOD
 26238    35   268     5    35   634     0    1531  STARTMETHOD
 26239    35   270     5    35   634     0      10  public
 26240    35   270    12    35   634     0     111  CharBuffer
 26241    35   270    23    35   634     0     111  put
 26242    35   270    26    35   634     0      59  (
 26243    35   270    27    35   634     0      36  int
 26244    35   270    31    35   634     0     111  i
 26245    35   270    32    35   634     0      66  ,
 26246    35   270    34    35   634     0      40  char
 26247    35   270    39    35   634     0     111  x
 26248    35   270    40    35   634     0      60  )
 26249    35   270    42    35   634     0      63  {
 26250    35   272     9    35   634     0     111  unsafe.putChar
 26251    35   272    23    35   634     0      59  (
 26252    35   272    24    35   634     0     111  ix
 26253    35   272    26    35   634     0      59  (
 26254    35   272    27    35   634     0     111  checkIndex
 26255    35   272    37    35   634     0      59  (
 26256    35   272    38    35   634     0     111  i
 26257    35   272    39    35   634     0      60  )
 26258    35   272    40    35   634     0      60  )
 26259    35   272    41    35   634     0      66  ,
 26260    35   272    43    35   634     0     111  Bits.swap
 26261    35   272    52    35   634     0      59  (
 26262    35   272    53    35   634     0      59  (
 26263    35   272    54    35   634     0     111  x
 26264    35   272    55    35   634     0      60  )
 26265    35   272    56    35   634     0      60  )
 26266    35   272    57    35   634     0      60  )
 26267    35   272    58    35   634     0     102  ;
 26268    35   273     9    35   634     0      19  return
 26269    35   273    16    35   634     0      44  this
 26270    35   273    20    35   634     0     102  ;
 26271    35   277     5    35   634     0      64  }
 26272    35   277     5    35   634     0    1532  ENDMETHOD
 26273    35   277     5    35   635     0    1533  STARTMETHOD
 26274    35   279     5    35   635     0      10  public
 26275    35   279    12    35   635     0     111  CharBuffer
 26276    35   279    23    35   635     0     111  put
 26277    35   279    26    35   635     0      59  (
 26278    35   279    27    35   635     0     111  CharBuffer
 26279    35   279    38    35   635     0     111  src
 26280    35   279    41    35   635     0      60  )
 26281    35   279    43    35   635     0      63  {
 26282    35   281     9    35   635     0      31  if
 26283    35   281    12    35   635     0      59  (
 26284    35   281    13    35   635     0     111  src
 26285    35   281    17    35   635     0      16  instanceof
 26286    35   281    28    35   635     0     111  DirectCharBufferS
 26287    35   281    45    35   635     0      60  )
 26288    35   281    47    35   635     0      63  {
 26289    35   282    13    35   635     0      31  if
 26290    35   282    16    35   635     0      59  (
 26291    35   282    17    35   635     0     111  src
 26292    35   282    21    35   635     0      68  ==
 26293    35   282    24    35   635     0      44  this
 26294    35   282    28    35   635     0      60  )
 26295    35   283    17    35   635     0      20  throw
 26296    35   283    23    35   635     0      15  new
 26297    35   283    27    35   635     0     111  IllegalArgumentException
 26298    35   283    51    35   635     0      59  (
 26299    35   283    52    35   635     0      60  )
 26300    35   283    53    35   635     0     102  ;
 26301    35   284    13    35   635     0     111  DirectCharBufferS
 26302    35   284    31    35   635     0     111  sb
 26303    35   284    34    35   635     0      67  =
 26304    35   284    36    35   635     0      59  (
 26305    35   284    37    35   635     0     111  DirectCharBufferS
 26306    35   284    54    35   635     0      60  )
 26307    35   284    55    35   635     0     111  src
 26308    35   284    58    35   635     0     102  ;
 26309    35   286    13    35   635     1      36  int
 26310    35   286    17    35   635     1     111  spos
 26311    35   286    22    35   635     1      67  =
 26312    35   286    24    35   635     1     111  sb.position
 26313    35   286    35    35   635     1      59  (
 26314    35   286    36    35   635     1      60  )
 26315    35   286    37    35   635     1     102  ;
 26316    35   287    13    35   635     1      36  int
 26317    35   287    17    35   635     1     111  slim
 26318    35   287    22    35   635     1      67  =
 26319    35   287    24    35   635     1     111  sb.limit
 26320    35   287    32    35   635     1      59  (
 26321    35   287    33    35   635     1      60  )
 26322    35   287    34    35   635     1     102  ;
 26323    35   288    13    35   635     0     111  assert
 26324    35   288    20    35   635     0      59  (
 26325    35   288    21    35   635     0     111  spos
 26326    35   288    26    35   635     0      92  <=
 26327    35   288    29    35   635     0     111  slim
 26328    35   288    33    35   635     0      60  )
 26329    35   288    34    35   635     0     102  ;
 26330    35   289    13    35   635     0      36  int
 26331    35   289    17    35   635     0     111  srem
 26332    35   289    22    35   635     0      67  =
 26333    35   289    24    35   635     0      59  (
 26334    35   289    25    35   635     0     111  spos
 26335    35   289    30    35   635     0      92  <=
 26336    35   289    33    35   635     0     111  slim
 26337    35   289    38    35   635     0      58  ?
 26338    35   289    40    35   635     0     111  slim
 26339    35   289    45    35   635     0      77  -
 26340    35   289    47    35   635     0     111  spos
 26341    35   289    52    35   635     0      65  :
 26342    35   289    54    35   635     0     112  0
 26343    35   289    55    35   635     0      60  )
 26344    35   289    56    35   635     0     102  ;
 26345    35   291    13    35   635     1      36  int
 26346    35   291    17    35   635     1     111  pos
 26347    35   291    21    35   635     1      67  =
 26348    35   291    23    35   635     1     111  position
 26349    35   291    31    35   635     1      59  (
 26350    35   291    32    35   635     1      60  )
 26351    35   291    33    35   635     1     102  ;
 26352    35   292    13    35   635     1      36  int
 26353    35   292    17    35   635     1     111  lim
 26354    35   292    21    35   635     1      67  =
 26355    35   292    23    35   635     1     111  limit
 26356    35   292    28    35   635     1      59  (
 26357    35   292    29    35   635     1      60  )
 26358    35   292    30    35   635     1     102  ;
 26359    35   293    13    35   635     0     111  assert
 26360    35   293    20    35   635     0      59  (
 26361    35   293    21    35   635     0     111  pos
 26362    35   293    25    35   635     0      92  <=
 26363    35   293    28    35   635     0     111  lim
 26364    35   293    31    35   635     0      60  )
 26365    35   293    32    35   635     0     102  ;
 26366    35   294    13    35   635     0      36  int
 26367    35   294    17    35   635     0     111  rem
 26368    35   294    21    35   635     0      67  =
 26369    35   294    23    35   635     0      59  (
 26370    35   294    24    35   635     0     111  pos
 26371    35   294    28    35   635     0      92  <=
 26372    35   294    31    35   635     0     111  lim
 26373    35   294    35    35   635     0      58  ?
 26374    35   294    37    35   635     0     111  lim
 26375    35   294    41    35   635     0      77  -
 26376    35   294    43    35   635     0     111  pos
 26377    35   294    47    35   635     0      65  :
 26378    35   294    49    35   635     0     112  0
 26379    35   294    50    35   635     0      60  )
 26380    35   294    51    35   635     0     102  ;
 26381    35   296    13    35   635     0      31  if
 26382    35   296    16    35   635     0      59  (
 26383    35   296    17    35   635     0     111  srem
 26384    35   296    22    35   635     0      89  >
 26385    35   296    24    35   635     0     111  rem
 26386    35   296    27    35   635     0      60  )
 26387    35   297    17    35   635     0      20  throw
 26388    35   297    23    35   635     0      15  new
 26389    35   297    27    35   635     0     111  BufferOverflowException
 26390    35   297    50    35   635     0      59  (
 26391    35   297    51    35   635     0      60  )
 26392    35   297    52    35   635     0     102  ;
 26393    35   298    13    35   635     0     111  unsafe.copyMemory
 26394    35   298    30    35   635     0      59  (
 26395    35   298    31    35   635     0     111  sb.ix
 26396    35   298    36    35   635     0      59  (
 26397    35   298    37    35   635     0     111  spos
 26398    35   298    41    35   635     0      60  )
 26399    35   298    42    35   635     0      66  ,
 26400    35   298    44    35   635     0     111  ix
 26401    35   298    46    35   635     0      59  (
 26402    35   298    47    35   635     0     111  pos
 26403    35   298    50    35   635     0      60  )
 26404    35   298    51    35   635     0      66  ,
 26405    35   298    53    35   635     0     111  srem
 26406    35   298    58    35   635     0      90  <<
 26407    35   298    61    35   635     0     112  1
 26408    35   298    62    35   635     0      60  )
 26409    35   298    63    35   635     0     102  ;
 26410    35   299    13    35   635     1     111  sb.position
 26411    35   299    24    35   635     1      59  (
 26412    35   299    25    35   635     1     111  spos
 26413    35   299    30    35   635     1      74  +
 26414    35   299    32    35   635     1     111  srem
 26415    35   299    36    35   635     1      60  )
 26416    35   299    37    35   635     1     102  ;
 26417    35   300    13    35   635     1     111  position
 26418    35   300    21    35   635     1      59  (
 26419    35   300    22    35   635     1     111  pos
 26420    35   300    26    35   635     1      74  +
 26421    35   300    28    35   635     1     111  srem
 26422    35   300    32    35   635     1      60  )
 26423    35   300    33    35   635     1     102  ;
 26424    35   301     9    35   635     0      64  }
 26425    35   301    11    35   635     0      48  else
 26426    35   301    16    35   635     0      31  if
 26427    35   301    19    35   635     0      59  (
 26428    35   301    20    35   635     0     111  src.hb
 26429    35   301    27    35   635     0      71  !=
 26430    35   301    30    35   635     0      21  null
 26431    35   301    34    35   635     0      60  )
 26432    35   301    36    35   635     0      63  {
 26433    35   303    13    35   635     1      36  int
 26434    35   303    17    35   635     1     111  spos
 26435    35   303    22    35   635     1      67  =
 26436    35   303    24    35   635     1     111  src.position
 26437    35   303    36    35   635     1      59  (
 26438    35   303    37    35   635     1      60  )
 26439    35   303    38    35   635     1     102  ;
 26440    35   304    13    35   635     1      36  int
 26441    35   304    17    35   635     1     111  slim
 26442    35   304    22    35   635     1      67  =
 26443    35   304    24    35   635     1     111  src.limit
 26444    35   304    33    35   635     1      59  (
 26445    35   304    34    35   635     1      60  )
 26446    35   304    35    35   635     1     102  ;
 26447    35   305    13    35   635     0     111  assert
 26448    35   305    20    35   635     0      59  (
 26449    35   305    21    35   635     0     111  spos
 26450    35   305    26    35   635     0      92  <=
 26451    35   305    29    35   635     0     111  slim
 26452    35   305    33    35   635     0      60  )
 26453    35   305    34    35   635     0     102  ;
 26454    35   306    13    35   635     0      36  int
 26455    35   306    17    35   635     0     111  srem
 26456    35   306    22    35   635     0      67  =
 26457    35   306    24    35   635     0      59  (
 26458    35   306    25    35   635     0     111  spos
 26459    35   306    30    35   635     0      92  <=
 26460    35   306    33    35   635     0     111  slim
 26461    35   306    38    35   635     0      58  ?
 26462    35   306    40    35   635     0     111  slim
 26463    35   306    45    35   635     0      77  -
 26464    35   306    47    35   635     0     111  spos
 26465    35   306    52    35   635     0      65  :
 26466    35   306    54    35   635     0     112  0
 26467    35   306    55    35   635     0      60  )
 26468    35   306    56    35   635     0     102  ;
 26469    35   308    13    35   635     0     111  put
 26470    35   308    16    35   635     0      59  (
 26471    35   308    17    35   635     0     111  src.hb
 26472    35   308    23    35   635     0      66  ,
 26473    35   308    25    35   635     0     111  src.offset
 26474    35   308    36    35   635     0      74  +
 26475    35   308    38    35   635     0     111  spos
 26476    35   308    42    35   635     0      66  ,
 26477    35   308    44    35   635     0     111  srem
 26478    35   308    48    35   635     0      60  )
 26479    35   308    49    35   635     0     102  ;
 26480    35   309    13    35   635     0     111  src.position
 26481    35   309    25    35   635     0      59  (
 26482    35   309    26    35   635     0     111  spos
 26483    35   309    31    35   635     0      74  +
 26484    35   309    33    35   635     0     111  srem
 26485    35   309    37    35   635     0      60  )
 26486    35   309    38    35   635     0     102  ;
 26487    35   311     9    35   635     0      64  }
 26488    35   311    11    35   635     0      48  else
 26489    35   311    16    35   635     0      63  {
 26490    35   312    13    35   635     0     111  super.put
 26491    35   312    22    35   635     0      59  (
 26492    35   312    23    35   635     0     111  src
 26493    35   312    26    35   635     0      60  )
 26494    35   312    27    35   635     0     102  ;
 26495    35   313     9    35   635     0      64  }
 26496    35   314     9    35   635     0      19  return
 26497    35   314    16    35   635     0      44  this
 26498    35   314    20    35   635     0     102  ;
 26499    35   318     5    35   635     0      64  }
 26500    35   318     5    35   635     0    1534  ENDMETHOD
 26501    35   318     5    35   636     0    1535  STARTMETHOD
 26502    35   320     5    35   636     0      10  public
 26503    35   320    12    35   636     0     111  CharBuffer
 26504    35   320    23    35   636     0     111  put
 26505    35   320    26    35   636     0      59  (
 26506    35   320    27    35   636     0      40  char
 26507    35   320    31    35   636     0      61  [
 26508    35   320    32    35   636     0      62  ]
 26509    35   320    34    35   636     0     111  src
 26510    35   320    37    35   636     0      66  ,
 26511    35   320    39    35   636     0      36  int
 26512    35   320    43    35   636     0     111  offset
 26513    35   320    49    35   636     0      66  ,
 26514    35   320    51    35   636     0      36  int
 26515    35   320    55    35   636     0     111  length
 26516    35   320    61    35   636     0      60  )
 26517    35   320    63    35   636     0      63  {
 26518    35   322     9    35   636     0      31  if
 26519    35   322    12    35   636     0      59  (
 26520    35   322    13    35   636     0      59  (
 26521    35   322    14    35   636     0     111  length
 26522    35   322    21    35   636     0      90  <<
 26523    35   322    24    35   636     0     112  1
 26524    35   322    25    35   636     0      60  )
 26525    35   322    27    35   636     0      89  >
 26526    35   322    29    35   636     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 26527    35   322    63    35   636     0      60  )
 26528    35   322    65    35   636     0      63  {
 26529    35   323    13    35   636     0     111  checkBounds
 26530    35   323    24    35   636     0      59  (
 26531    35   323    25    35   636     0     111  offset
 26532    35   323    31    35   636     0      66  ,
 26533    35   323    33    35   636     0     111  length
 26534    35   323    39    35   636     0      66  ,
 26535    35   323    41    35   636     0     111  src.length
 26536    35   323    51    35   636     0      60  )
 26537    35   323    52    35   636     0     102  ;
 26538    35   324    13    35   636     1      36  int
 26539    35   324    17    35   636     1     111  pos
 26540    35   324    21    35   636     1      67  =
 26541    35   324    23    35   636     1     111  position
 26542    35   324    31    35   636     1      59  (
 26543    35   324    32    35   636     1      60  )
 26544    35   324    33    35   636     1     102  ;
 26545    35   325    13    35   636     1      36  int
 26546    35   325    17    35   636     1     111  lim
 26547    35   325    21    35   636     1      67  =
 26548    35   325    23    35   636     1     111  limit
 26549    35   325    28    35   636     1      59  (
 26550    35   325    29    35   636     1      60  )
 26551    35   325    30    35   636     1     102  ;
 26552    35   326    13    35   636     0     111  assert
 26553    35   326    20    35   636     0      59  (
 26554    35   326    21    35   636     0     111  pos
 26555    35   326    25    35   636     0      92  <=
 26556    35   326    28    35   636     0     111  lim
 26557    35   326    31    35   636     0      60  )
 26558    35   326    32    35   636     0     102  ;
 26559    35   327    13    35   636     0      36  int
 26560    35   327    17    35   636     0     111  rem
 26561    35   327    21    35   636     0      67  =
 26562    35   327    23    35   636     0      59  (
 26563    35   327    24    35   636     0     111  pos
 26564    35   327    28    35   636     0      92  <=
 26565    35   327    31    35   636     0     111  lim
 26566    35   327    35    35   636     0      58  ?
 26567    35   327    37    35   636     0     111  lim
 26568    35   327    41    35   636     0      77  -
 26569    35   327    43    35   636     0     111  pos
 26570    35   327    47    35   636     0      65  :
 26571    35   327    49    35   636     0     112  0
 26572    35   327    50    35   636     0      60  )
 26573    35   327    51    35   636     0     102  ;
 26574    35   328    13    35   636     0      31  if
 26575    35   328    16    35   636     0      59  (
 26576    35   328    17    35   636     0     111  length
 26577    35   328    24    35   636     0      89  >
 26578    35   328    26    35   636     0     111  rem
 26579    35   328    29    35   636     0      60  )
 26580    35   329    17    35   636     0      20  throw
 26581    35   329    23    35   636     0      15  new
 26582    35   329    27    35   636     0     111  BufferOverflowException
 26583    35   329    50    35   636     0      59  (
 26584    35   329    51    35   636     0      60  )
 26585    35   329    52    35   636     0     102  ;
 26586    35   331    13    35   636     0      31  if
 26587    35   331    16    35   636     0      59  (
 26588    35   331    17    35   636     0     111  order
 26589    35   331    22    35   636     0      59  (
 26590    35   331    23    35   636     0      60  )
 26591    35   331    25    35   636     0      71  !=
 26592    35   331    28    35   636     0     111  ByteOrder.nativeOrder
 26593    35   331    49    35   636     0      59  (
 26594    35   331    50    35   636     0      60  )
 26595    35   331    51    35   636     0      60  )
 26596    35   332    17    35   636     0     111  Bits.copyFromCharArray
 26597    35   332    39    35   636     0      59  (
 26598    35   332    40    35   636     0     111  src
 26599    35   332    43    35   636     0      66  ,
 26600    35   332    45    35   636     0     111  offset
 26601    35   332    52    35   636     0      90  <<
 26602    35   332    55    35   636     0     112  1
 26603    35   332    56    35   636     0      66  ,
 26604    35   333    45    35   636     0     111  ix
 26605    35   333    47    35   636     0      59  (
 26606    35   333    48    35   636     0     111  pos
 26607    35   333    51    35   636     0      60  )
 26608    35   333    52    35   636     0      66  ,
 26609    35   333    54    35   636     0     111  length
 26610    35   333    61    35   636     0      90  <<
 26611    35   333    64    35   636     0     112  1
 26612    35   333    65    35   636     0      60  )
 26613    35   333    66    35   636     0     102  ;
 26614    35   334    13    35   636     0      48  else
 26615    35   335    17    35   636     0     111  Bits.copyFromByteArray
 26616    35   335    39    35   636     0      59  (
 26617    35   335    40    35   636     0     111  src
 26618    35   335    43    35   636     0      66  ,
 26619    35   335    45    35   636     0     111  offset
 26620    35   335    52    35   636     0      90  <<
 26621    35   335    55    35   636     0     112  1
 26622    35   335    56    35   636     0      66  ,
 26623    35   336    40    35   636     0     111  ix
 26624    35   336    42    35   636     0      59  (
 26625    35   336    43    35   636     0     111  pos
 26626    35   336    46    35   636     0      60  )
 26627    35   336    47    35   636     0      66  ,
 26628    35   336    49    35   636     0     111  length
 26629    35   336    56    35   636     0      90  <<
 26630    35   336    59    35   636     0     112  1
 26631    35   336    60    35   636     0      60  )
 26632    35   336    61    35   636     0     102  ;
 26633    35   337    13    35   636     0     111  position
 26634    35   337    21    35   636     0      59  (
 26635    35   337    22    35   636     0     111  pos
 26636    35   337    26    35   636     0      74  +
 26637    35   337    28    35   636     0     111  length
 26638    35   337    34    35   636     0      60  )
 26639    35   337    35    35   636     0     102  ;
 26640    35   338     9    35   636     0      64  }
 26641    35   338    11    35   636     0      48  else
 26642    35   338    16    35   636     0      63  {
 26643    35   339    13    35   636     0     111  super.put
 26644    35   339    22    35   636     0      59  (
 26645    35   339    23    35   636     0     111  src
 26646    35   339    26    35   636     0      66  ,
 26647    35   339    28    35   636     0     111  offset
 26648    35   339    34    35   636     0      66  ,
 26649    35   339    36    35   636     0     111  length
 26650    35   339    42    35   636     0      60  )
 26651    35   339    43    35   636     0     102  ;
 26652    35   340     9    35   636     0      64  }
 26653    35   341     9    35   636     0      19  return
 26654    35   341    16    35   636     0      44  this
 26655    35   341    20    35   636     0     102  ;
 26656    35   345     5    35   636     0      64  }
 26657    35   345     5    35   636     0    1536  ENDMETHOD
 26658    35   345     5    35   637     0    1537  STARTMETHOD
 26659    35   347     5    35   637     0      10  public
 26660    35   347    12    35   637     0     111  CharBuffer
 26661    35   347    23    35   637     0     111  compact
 26662    35   347    30    35   637     0      59  (
 26663    35   347    31    35   637     0      60  )
 26664    35   347    33    35   637     0      63  {
 26665    35   349     9    35   637     1      36  int
 26666    35   349    13    35   637     1     111  pos
 26667    35   349    17    35   637     1      67  =
 26668    35   349    19    35   637     1     111  position
 26669    35   349    27    35   637     1      59  (
 26670    35   349    28    35   637     1      60  )
 26671    35   349    29    35   637     1     102  ;
 26672    35   350     9    35   637     1      36  int
 26673    35   350    13    35   637     1     111  lim
 26674    35   350    17    35   637     1      67  =
 26675    35   350    19    35   637     1     111  limit
 26676    35   350    24    35   637     1      59  (
 26677    35   350    25    35   637     1      60  )
 26678    35   350    26    35   637     1     102  ;
 26679    35   351     9    35   637     0     111  assert
 26680    35   351    16    35   637     0      59  (
 26681    35   351    17    35   637     0     111  pos
 26682    35   351    21    35   637     0      92  <=
 26683    35   351    24    35   637     0     111  lim
 26684    35   351    27    35   637     0      60  )
 26685    35   351    28    35   637     0     102  ;
 26686    35   352     9    35   637     0      36  int
 26687    35   352    13    35   637     0     111  rem
 26688    35   352    17    35   637     0      67  =
 26689    35   352    19    35   637     0      59  (
 26690    35   352    20    35   637     0     111  pos
 26691    35   352    24    35   637     0      92  <=
 26692    35   352    27    35   637     0     111  lim
 26693    35   352    31    35   637     0      58  ?
 26694    35   352    33    35   637     0     111  lim
 26695    35   352    37    35   637     0      77  -
 26696    35   352    39    35   637     0     111  pos
 26697    35   352    43    35   637     0      65  :
 26698    35   352    45    35   637     0     112  0
 26699    35   352    46    35   637     0      60  )
 26700    35   352    47    35   637     0     102  ;
 26701    35   354     9    35   637     0     111  unsafe.copyMemory
 26702    35   354    26    35   637     0      59  (
 26703    35   354    27    35   637     0     111  ix
 26704    35   354    29    35   637     0      59  (
 26705    35   354    30    35   637     0     111  pos
 26706    35   354    33    35   637     0      60  )
 26707    35   354    34    35   637     0      66  ,
 26708    35   354    36    35   637     0     111  ix
 26709    35   354    38    35   637     0      59  (
 26710    35   354    39    35   637     0     112  0
 26711    35   354    40    35   637     0      60  )
 26712    35   354    41    35   637     0      66  ,
 26713    35   354    43    35   637     0     111  rem
 26714    35   354    47    35   637     0      90  <<
 26715    35   354    50    35   637     0     112  1
 26716    35   354    51    35   637     0      60  )
 26717    35   354    52    35   637     0     102  ;
 26718    35   355     9    35   637     0     111  position
 26719    35   355    17    35   637     0      59  (
 26720    35   355    18    35   637     0     111  rem
 26721    35   355    21    35   637     0      60  )
 26722    35   355    22    35   637     0     102  ;
 26723    35   356     9    35   637     0     111  limit
 26724    35   356    14    35   637     0      59  (
 26725    35   356    15    35   637     0     111  capacity
 26726    35   356    23    35   637     0      59  (
 26727    35   356    24    35   637     0      60  )
 26728    35   356    25    35   637     0      60  )
 26729    35   356    26    35   637     0     102  ;
 26730    35   357     9    35   637     0     111  clearMark
 26731    35   357    18    35   637     0      59  (
 26732    35   357    19    35   637     0      60  )
 26733    35   357    20    35   637     0     102  ;
 26734    35   358     9    35   637     0      19  return
 26735    35   358    16    35   637     0      44  this
 26736    35   358    20    35   637     1     102  ;
 26737    35   362     5    35   637     1      64  }
 26738    35   362     5    35   637     0    1538  ENDMETHOD
 26739    35   362     5    35   638     0    1539  STARTMETHOD
 26740    35   364     5    35   638     0      10  public
 26741    35   364    12    35   638     0      39  boolean
 26742    35   364    20    35   638     0     111  isDirect
 26743    35   364    28    35   638     0      59  (
 26744    35   364    29    35   638     0      60  )
 26745    35   364    31    35   638     0      63  {
 26746    35   365     9    35   638     0      19  return
 26747    35   365    16    35   638     0      52  true
 26748    35   365    20    35   638     1     102  ;
 26749    35   366     5    35   638     1      64  }
 26750    35   366     5    35   638     0    1540  ENDMETHOD
 26751    35   366     5    35   639     0    1541  STARTMETHOD
 26752    35   368     5    35   639     0      10  public
 26753    35   368    12    35   639     0      39  boolean
 26754    35   368    20    35   639     0     111  isReadOnly
 26755    35   368    30    35   639     0      59  (
 26756    35   368    31    35   639     0      60  )
 26757    35   368    33    35   639     0      63  {
 26758    35   369     9    35   639     0      19  return
 26759    35   369    16    35   639     0      43  false
 26760    35   369    21    35   639     1     102  ;
 26761    35   370     5    35   639     1      64  }
 26762    35   370     5    35   639     0    1542  ENDMETHOD
 26763    35   370     5    35   640     0    1543  STARTMETHOD
 26764    35   375     5    35   640     0      10  public
 26765    35   375    12    35   640     0     111  String
 26766    35   375    19    35   640     0     111  toString
 26767    35   375    27    35   640     0      59  (
 26768    35   375    28    35   640     0      36  int
 26769    35   375    32    35   640     0     111  start
 26770    35   375    37    35   640     0      66  ,
 26771    35   375    39    35   640     0      36  int
 26772    35   375    43    35   640     0     111  end
 26773    35   375    46    35   640     0      60  )
 26774    35   375    48    35   640     0      63  {
 26775    35   376     9    35   640     0      31  if
 26776    35   376    12    35   640     0      59  (
 26777    35   376    13    35   640     0      59  (
 26778    35   376    14    35   640     0     111  end
 26779    35   376    18    35   640     0      89  >
 26780    35   376    20    35   640     0     111  limit
 26781    35   376    25    35   640     0      59  (
 26782    35   376    26    35   640     0      60  )
 26783    35   376    27    35   640     0      60  )
 26784    35   376    29    35   640     0      98  ||
 26785    35   376    32    35   640     0      59  (
 26786    35   376    33    35   640     0     111  start
 26787    35   376    39    35   640     0      89  >
 26788    35   376    41    35   640     0     111  end
 26789    35   376    44    35   640     0      60  )
 26790    35   376    45    35   640     0      60  )
 26791    35   377    13    35   640     0      20  throw
 26792    35   377    19    35   640     0      15  new
 26793    35   377    23    35   640     0     111  IndexOutOfBoundsException
 26794    35   377    48    35   640     0      59  (
 26795    35   377    49    35   640     0      60  )
 26796    35   377    50    35   640     0     102  ;
 26797    35   378     9    35   640     0      35  try
 26798    35   378    13    35   640     0      63  {
 26799    35   379    13    35   640     0      36  int
 26800    35   379    17    35   640     0     111  len
 26801    35   379    21    35   640     0      67  =
 26802    35   379    23    35   640     0     111  end
 26803    35   379    27    35   640     0      77  -
 26804    35   379    29    35   640     0     111  start
 26805    35   379    34    35   640     0     102  ;
 26806    35   380    13    35   640     0      40  char
 26807    35   380    17    35   640     0      61  [
 26808    35   380    18    35   640     0      62  ]
 26809    35   380    20    35   640     0     111  ca
 26810    35   380    23    35   640     0      67  =
 26811    35   380    25    35   640     0      15  new
 26812    35   380    29    35   640     0      40  char
 26813    35   380    33    35   640     0      61  [
 26814    35   380    34    35   640     0     111  len
 26815    35   380    37    35   640     0      62  ]
 26816    35   380    38    35   640     0     102  ;
 26817    35   381    13    35   640     0     111  CharBuffer
 26818    35   381    24    35   640     0     111  cb
 26819    35   381    27    35   640     0      67  =
 26820    35   381    29    35   640     0     111  CharBuffer.wrap
 26821    35   381    44    35   640     0      59  (
 26822    35   381    45    35   640     0     111  ca
 26823    35   381    47    35   640     0      60  )
 26824    35   381    48    35   640     0     102  ;
 26825    35   382    13    35   640     0     111  CharBuffer
 26826    35   382    24    35   640     0     111  db
 26827    35   382    27    35   640     0      67  =
 26828    35   382    29    35   640     0     111  this.duplicate
 26829    35   382    43    35   640     0      59  (
 26830    35   382    44    35   640     0      60  )
 26831    35   382    45    35   640     0     102  ;
 26832    35   383    13    35   640     1     111  db.position
 26833    35   383    24    35   640     1      59  (
 26834    35   383    25    35   640     1     111  start
 26835    35   383    30    35   640     1      60  )
 26836    35   383    31    35   640     1     102  ;
 26837    35   384    13    35   640     1     111  db.limit
 26838    35   384    21    35   640     1      59  (
 26839    35   384    22    35   640     1     111  end
 26840    35   384    25    35   640     1      60  )
 26841    35   384    26    35   640     1     102  ;
 26842    35   385    13    35   640     1     111  cb.put
 26843    35   385    19    35   640     1      59  (
 26844    35   385    20    35   640     1     111  db
 26845    35   385    22    35   640     1      60  )
 26846    35   385    23    35   640     1     102  ;
 26847    35   386    13    35   640     0      19  return
 26848    35   386    20    35   640     0      15  new
 26849    35   386    24    35   640     0     111  String
 26850    35   386    30    35   640     0      59  (
 26851    35   386    31    35   640     0     111  ca
 26852    35   386    33    35   640     0      60  )
 26853    35   386    34    35   640     0     102  ;
 26854    35   387     9    35   640     0      64  }
 26855    35   387    11    35   640     0      34  catch
 26856    35   387    17    35   640     0      59  (
 26857    35   387    18    35   640     0     111  StringIndexOutOfBoundsException
 26858    35   387    50    35   640     0     111  x
 26859    35   387    51    35   640     0      60  )
 26860    35   387    53    35   640     0      63  {
 26861    35   388    13    35   640     0      20  throw
 26862    35   388    19    35   640     0      15  new
 26863    35   388    23    35   640     0     111  IndexOutOfBoundsException
 26864    35   388    48    35   640     0      59  (
 26865    35   388    49    35   640     0      60  )
 26866    35   388    50    35   640     0     102  ;
 26867    35   389     9    35   640     0      64  }
 26868    35   390     5    35   640     0      64  }
 26869    35   390     5    35   640     0    1544  ENDMETHOD
 26870    35   390     5    35   641     0    1545  STARTMETHOD
 26871    35   395     5    35   641     0      10  public
 26872    35   395    12    35   641     0     111  CharSequence
 26873    35   395    25    35   641     0     111  subSequence
 26874    35   395    36    35   641     0      59  (
 26875    35   395    37    35   641     0      36  int
 26876    35   395    41    35   641     0     111  start
 26877    35   395    46    35   641     0      66  ,
 26878    35   395    48    35   641     0      36  int
 26879    35   395    52    35   641     0     111  end
 26880    35   395    55    35   641     0      60  )
 26881    35   395    57    35   641     0      63  {
 26882    35   396     9    35   641     1      36  int
 26883    35   396    13    35   641     1     111  pos
 26884    35   396    17    35   641     1      67  =
 26885    35   396    19    35   641     1     111  position
 26886    35   396    27    35   641     1      59  (
 26887    35   396    28    35   641     1      60  )
 26888    35   396    29    35   641     1     102  ;
 26889    35   397     9    35   641     1      36  int
 26890    35   397    13    35   641     1     111  lim
 26891    35   397    17    35   641     1      67  =
 26892    35   397    19    35   641     1     111  limit
 26893    35   397    24    35   641     1      59  (
 26894    35   397    25    35   641     1      60  )
 26895    35   397    26    35   641     1     102  ;
 26896    35   398     9    35   641     0     111  assert
 26897    35   398    16    35   641     0      59  (
 26898    35   398    17    35   641     0     111  pos
 26899    35   398    21    35   641     0      92  <=
 26900    35   398    24    35   641     0     111  lim
 26901    35   398    27    35   641     0      60  )
 26902    35   398    28    35   641     0     102  ;
 26903    35   399     9    35   641     0     111  pos
 26904    35   399    13    35   641     0      67  =
 26905    35   399    15    35   641     0      59  (
 26906    35   399    16    35   641     0     111  pos
 26907    35   399    20    35   641     0      92  <=
 26908    35   399    23    35   641     0     111  lim
 26909    35   399    27    35   641     0      58  ?
 26910    35   399    29    35   641     0     111  pos
 26911    35   399    33    35   641     0      65  :
 26912    35   399    35    35   641     0     111  lim
 26913    35   399    38    35   641     0      60  )
 26914    35   399    39    35   641     0     102  ;
 26915    35   400     9    35   641     0      36  int
 26916    35   400    13    35   641     0     111  len
 26917    35   400    17    35   641     0      67  =
 26918    35   400    19    35   641     0     111  lim
 26919    35   400    23    35   641     0      77  -
 26920    35   400    25    35   641     0     111  pos
 26921    35   400    28    35   641     0     102  ;
 26922    35   402     9    35   641     0      31  if
 26923    35   402    12    35   641     0      59  (
 26924    35   402    13    35   641     0      59  (
 26925    35   402    14    35   641     0     111  start
 26926    35   402    20    35   641     0      93  <
 26927    35   402    22    35   641     0     112  0
 26928    35   402    23    35   641     0      60  )
 26929    35   402    25    35   641     0      98  ||
 26930    35   402    28    35   641     0      59  (
 26931    35   402    29    35   641     0     111  end
 26932    35   402    33    35   641     0      89  >
 26933    35   402    35    35   641     0     111  len
 26934    35   402    38    35   641     0      60  )
 26935    35   402    40    35   641     0      98  ||
 26936    35   402    43    35   641     0      59  (
 26937    35   402    44    35   641     0     111  start
 26938    35   402    50    35   641     0      89  >
 26939    35   402    52    35   641     0     111  end
 26940    35   402    55    35   641     0      60  )
 26941    35   402    56    35   641     0      60  )
 26942    35   403    13    35   641     0      20  throw
 26943    35   403    19    35   641     0      15  new
 26944    35   403    23    35   641     0     111  IndexOutOfBoundsException
 26945    35   403    48    35   641     0      59  (
 26946    35   403    49    35   641     0      60  )
 26947    35   403    50    35   641     0     102  ;
 26948    35   404     9    35   641     0      36  int
 26949    35   404    13    35   641     0     111  sublen
 26950    35   404    20    35   641     0      67  =
 26951    35   404    22    35   641     0     111  end
 26952    35   404    26    35   641     0      77  -
 26953    35   404    28    35   641     0     111  start
 26954    35   404    33    35   641     0     102  ;
 26955    35   405     9    35   641     0      36  int
 26956    35   405    13    35   641     0     111  off
 26957    35   405    17    35   641     0      67  =
 26958    35   405    19    35   641     0      59  (
 26959    35   405    20    35   641     0     111  pos
 26960    35   405    24    35   641     0      74  +
 26961    35   405    26    35   641     0     111  start
 26962    35   405    31    35   641     0      60  )
 26963    35   405    33    35   641     0      90  <<
 26964    35   405    36    35   641     0     112  1
 26965    35   405    37    35   641     0     102  ;
 26966    35   406     9    35   641     0     111  assert
 26967    35   406    16    35   641     0      59  (
 26968    35   406    17    35   641     0     111  off
 26969    35   406    21    35   641     0      88  >=
 26970    35   406    24    35   641     0     112  0
 26971    35   406    25    35   641     0      60  )
 26972    35   406    26    35   641     0     102  ;
 26973    35   407     9    35   641     0      19  return
 26974    35   407    16    35   641     0      15  new
 26975    35   407    20    35   641     0     111  DirectCharBufferS
 26976    35   407    37    35   641     0      59  (
 26977    35   407    38    35   641     0      44  this
 26978    35   407    42    35   641     0      66  ,
 26979    35   407    44    35   641     0      77  -
 26980    35   407    45    35   641     0     112  1
 26981    35   407    46    35   641     0      66  ,
 26982    35   407    48    35   641     0     112  0
 26983    35   407    49    35   641     0      66  ,
 26984    35   407    51    35   641     0     111  sublen
 26985    35   407    57    35   641     0      66  ,
 26986    35   407    59    35   641     0     111  sublen
 26987    35   407    65    35   641     0      66  ,
 26988    35   407    67    35   641     0     111  off
 26989    35   407    70    35   641     0      60  )
 26990    35   407    71    35   641     0     102  ;
 26991    35   408     5    35   641     0      64  }
 26992    35   408     5    35   641     0    1546  ENDMETHOD
 26993    35   408     5    35   642     0    1547  STARTMETHOD
 26994    35   416     5    35   642     0      10  public
 26995    35   416    12    35   642     0     111  ByteOrder
 26996    35   416    22    35   642     0     111  order
 26997    35   416    27    35   642     0      59  (
 26998    35   416    28    35   642     0      60  )
 26999    35   416    30    35   642     0      63  {
 27000    35   418     9    35   642     0      19  return
 27001    35   418    16    35   642     0      59  (
 27002    35   418    17    35   642     0      59  (
 27003    35   418    18    35   642     0     111  ByteOrder.nativeOrder
 27004    35   418    39    35   642     0      59  (
 27005    35   418    40    35   642     0      60  )
 27006    35   418    42    35   642     0      68  ==
 27007    35   418    45    35   642     0     111  ByteOrder.BIG_ENDIAN
 27008    35   418    65    35   642     0      60  )
 27009    35   419    17    35   642     0      58  ?
 27010    35   419    19    35   642     0     111  ByteOrder.LITTLE_ENDIAN
 27011    35   419    43    35   642     0      65  :
 27012    35   419    45    35   642     0     111  ByteOrder.BIG_ENDIAN
 27013    35   419    65    35   642     0      60  )
 27014    35   419    66    35   642     0     102  ;
 27015    35   425     5    35   642     0      64  }
 27016    35   425     5    35   642     0    1548  ENDMETHOD
 27017    35   452     1    35    -1     0      64  }
 27018    35   452     1    35    -1     1    1549  ENDCLASS
 27019    35   452     1    -1    -1     1    1550  ENDFILE C:\javasrc\java\nio\DirectCharBufferS.java
 27020    36     1     1    -1    -1     1    1551  STARTFILE C:\javasrc\java\nio\DirectCharBufferU.java
 27021    36    28     1    -1    -1     0       5  package
 27022    36    28     9    -1    -1     0     111  java.nio
 27023    36    28    17    -1    -1     0     102  ;
 27024    36    30     1    -1    -1     1      49  import
 27025    36    30     8    -1    -1     1     111  sun.misc.Cleaner
 27026    36    30    24    -1    -1     1     102  ;
 27027    36    31     1    -1    -1     1      49  import
 27028    36    31     8    -1    -1     1     111  sun.misc.Unsafe
 27029    36    31    23    -1    -1     1     102  ;
 27030    36    32     1    -1    -1     1      49  import
 27031    36    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 27032    36    32    31    -1    -1     1     102  ;
 27033    36    33     1    -1    -1     1      49  import
 27034    36    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 27035    36    33    34    -1    -1     1     102  ;
 27036    36    36     1    36    -1     0    1552  STARTCLASS
 27037    36    36     1    36    -1     0      24  class
 27038    36    36     7    36    -1     0     111  DirectCharBufferU
 27039    36    38     5    36    -1     0      38  extends
 27040    36    38    13    36    -1     0     111  CharBuffer
 27041    36    42     5    36    -1     0      17  implements
 27042    36    42    16    36    -1     0     111  DirectBuffer
 27043    36    43     1    36    -1     0      63  {
 27044    36    48     5    36    -1     0      23  protected
 27045    36    48    15    36    -1     0      45  static
 27046    36    48    22    36    -1     0       6  final
 27047    36    48    28    36    -1     0     111  Unsafe
 27048    36    48    35    36    -1     0     111  unsafe
 27049    36    48    42    36    -1     0      67  =
 27050    36    48    44    36    -1     0     111  Bits.unsafe
 27051    36    48    55    36    -1     0      59  (
 27052    36    48    56    36    -1     0      60  )
 27053    36    48    57    36    -1     0     102  ;
 27054    36    51     5    36    -1     0      23  protected
 27055    36    51    15    36    -1     0      45  static
 27056    36    51    22    36    -1     0       6  final
 27057    36    51    28    36    -1     0      39  boolean
 27058    36    51    36    36    -1     0     111  unaligned
 27059    36    51    46    36    -1     0      67  =
 27060    36    51    48    36    -1     0     111  Bits.unaligned
 27061    36    51    62    36    -1     0      59  (
 27062    36    51    63    36    -1     0      60  )
 27063    36    51    64    36    -1     0     102  ;
 27064    36    59     5    36    -1     0      23  protected
 27065    36    59    15    36    -1     0     111  Object
 27066    36    59    22    36    -1     0     111  viewedBuffer
 27067    36    59    35    36    -1     0      67  =
 27068    36    59    37    36    -1     0      21  null
 27069    36    59    41    36    -1     0     102  ;
 27070    36    59    41    36   643     0    1553  STARTMETHOD
 27071    36    61     5    36   643     0      10  public
 27072    36    61    12    36   643     0     111  Object
 27073    36    61    19    36   643     0     111  viewedBuffer
 27074    36    61    31    36   643     0      59  (
 27075    36    61    32    36   643     0      60  )
 27076    36    61    34    36   643     0      63  {
 27077    36    62     9    36   643     0      19  return
 27078    36    62    16    36   643     0     111  viewedBuffer
 27079    36    62    28    36   643     0     102  ;
 27080    36    63     5    36   643     0      64  }
 27081    36    63     5    36   643     0    1554  ENDMETHOD
 27082    36    63     5    36   644     0    1555  STARTMETHOD
 27083    36   100     5    36   644     0      10  public
 27084    36   100    12    36   644     0     111  Cleaner
 27085    36   100    20    36   644     0     111  cleaner
 27086    36   100    27    36   644     0      59  (
 27087    36   100    28    36   644     0      60  )
 27088    36   100    30    36   644     0      63  {
 27089    36   100    32    36   644     0      19  return
 27090    36   100    39    36   644     0      21  null
 27091    36   100    43    36   644     0     102  ;
 27092    36   100    45    36   644     0      64  }
 27093    36   100    45    36   644     0    1556  ENDMETHOD
 27094    36   100    45    36   645     0    1557  STARTMETHOD
 27095    36   164     5    36   645     0     111  DirectCharBufferU
 27096    36   164    22    36   645     0      59  (
 27097    36   164    23    36   645     0     111  DirectBuffer
 27098    36   164    36    36   645     0     111  db
 27099    36   164    38    36   645     0      66  ,
 27100    36   165    32    36   645     0      36  int
 27101    36   165    36    36   645     0     111  mark
 27102    36   165    40    36   645     0      66  ,
 27103    36   165    42    36   645     0      36  int
 27104    36   165    46    36   645     0     111  pos
 27105    36   165    49    36   645     0      66  ,
 27106    36   165    51    36   645     0      36  int
 27107    36   165    55    36   645     0     111  lim
 27108    36   165    58    36   645     0      66  ,
 27109    36   165    60    36   645     0      36  int
 27110    36   165    64    36   645     0     111  cap
 27111    36   165    67    36   645     0      66  ,
 27112    36   166    32    36   645     0      36  int
 27113    36   166    36    36   645     0     111  off
 27114    36   166    39    36   645     0      60  )
 27115    36   167     5    36   645     0      63  {
 27116    36   169     9    36   645     0      27  super
 27117    36   169    14    36   645     0      59  (
 27118    36   169    15    36   645     0     111  mark
 27119    36   169    19    36   645     0      66  ,
 27120    36   169    21    36   645     0     111  pos
 27121    36   169    24    36   645     0      66  ,
 27122    36   169    26    36   645     0     111  lim
 27123    36   169    29    36   645     0      66  ,
 27124    36   169    31    36   645     0     111  cap
 27125    36   169    34    36   645     0      60  )
 27126    36   169    35    36   645     0     102  ;
 27127    36   170     9    36   645     0     111  address
 27128    36   170    17    36   645     0      67  =
 27129    36   170    19    36   645     0     111  db.address
 27130    36   170    29    36   645     0      59  (
 27131    36   170    30    36   645     0      60  )
 27132    36   170    32    36   645     0      74  +
 27133    36   170    34    36   645     0     111  off
 27134    36   170    37    36   645     0     102  ;
 27135    36   171     9    36   645     0     111  viewedBuffer
 27136    36   171    22    36   645     0      67  =
 27137    36   171    24    36   645     0     111  db
 27138    36   171    26    36   645     0     102  ;
 27139    36   178     5    36   645     0      64  }
 27140    36   178     5    36   645     0    1558  ENDMETHOD
 27141    36   178     5    36   646     0    1559  STARTMETHOD
 27142    36   180     5    36   646     0      10  public
 27143    36   180    12    36   646     0     111  CharBuffer
 27144    36   180    23    36   646     0     111  slice
 27145    36   180    28    36   646     0      59  (
 27146    36   180    29    36   646     0      60  )
 27147    36   180    31    36   646     0      63  {
 27148    36   181     9    36   646     1      36  int
 27149    36   181    13    36   646     1     111  pos
 27150    36   181    17    36   646     1      67  =
 27151    36   181    19    36   646     1     111  this.position
 27152    36   181    32    36   646     1      59  (
 27153    36   181    33    36   646     1      60  )
 27154    36   181    34    36   646     1     102  ;
 27155    36   182     9    36   646     1      36  int
 27156    36   182    13    36   646     1     111  lim
 27157    36   182    17    36   646     1      67  =
 27158    36   182    19    36   646     1     111  this.limit
 27159    36   182    29    36   646     1      59  (
 27160    36   182    30    36   646     1      60  )
 27161    36   182    31    36   646     1     102  ;
 27162    36   183     9    36   646     0     111  assert
 27163    36   183    16    36   646     0      59  (
 27164    36   183    17    36   646     0     111  pos
 27165    36   183    21    36   646     0      92  <=
 27166    36   183    24    36   646     0     111  lim
 27167    36   183    27    36   646     0      60  )
 27168    36   183    28    36   646     0     102  ;
 27169    36   184     9    36   646     0      36  int
 27170    36   184    13    36   646     0     111  rem
 27171    36   184    17    36   646     0      67  =
 27172    36   184    19    36   646     0      59  (
 27173    36   184    20    36   646     0     111  pos
 27174    36   184    24    36   646     0      92  <=
 27175    36   184    27    36   646     0     111  lim
 27176    36   184    31    36   646     0      58  ?
 27177    36   184    33    36   646     0     111  lim
 27178    36   184    37    36   646     0      77  -
 27179    36   184    39    36   646     0     111  pos
 27180    36   184    43    36   646     0      65  :
 27181    36   184    45    36   646     0     112  0
 27182    36   184    46    36   646     0      60  )
 27183    36   184    47    36   646     0     102  ;
 27184    36   185     9    36   646     0      36  int
 27185    36   185    13    36   646     0     111  off
 27186    36   185    17    36   646     0      67  =
 27187    36   185    19    36   646     0      59  (
 27188    36   185    20    36   646     0     111  pos
 27189    36   185    24    36   646     0      90  <<
 27190    36   185    27    36   646     0     112  1
 27191    36   185    28    36   646     0      60  )
 27192    36   185    29    36   646     0     102  ;
 27193    36   186     9    36   646     0     111  assert
 27194    36   186    16    36   646     0      59  (
 27195    36   186    17    36   646     0     111  off
 27196    36   186    21    36   646     0      88  >=
 27197    36   186    24    36   646     0     112  0
 27198    36   186    25    36   646     0      60  )
 27199    36   186    26    36   646     0     102  ;
 27200    36   187     9    36   646     0      19  return
 27201    36   187    16    36   646     0      15  new
 27202    36   187    20    36   646     0     111  DirectCharBufferU
 27203    36   187    37    36   646     0      59  (
 27204    36   187    38    36   646     0      44  this
 27205    36   187    42    36   646     0      66  ,
 27206    36   187    44    36   646     0      77  -
 27207    36   187    45    36   646     0     112  1
 27208    36   187    46    36   646     0      66  ,
 27209    36   187    48    36   646     0     112  0
 27210    36   187    49    36   646     0      66  ,
 27211    36   187    51    36   646     0     111  rem
 27212    36   187    54    36   646     0      66  ,
 27213    36   187    56    36   646     0     111  rem
 27214    36   187    59    36   646     0      66  ,
 27215    36   187    61    36   646     0     111  off
 27216    36   187    64    36   646     1      60  )
 27217    36   187    65    36   646     1     102  ;
 27218    36   188     5    36   646     1      64  }
 27219    36   188     5    36   646     0    1560  ENDMETHOD
 27220    36   188     5    36   647     0    1561  STARTMETHOD
 27221    36   190     5    36   647     0      10  public
 27222    36   190    12    36   647     0     111  CharBuffer
 27223    36   190    23    36   647     0     111  duplicate
 27224    36   190    32    36   647     0      59  (
 27225    36   190    33    36   647     0      60  )
 27226    36   190    35    36   647     0      63  {
 27227    36   191     9    36   647     0      19  return
 27228    36   191    16    36   647     0      15  new
 27229    36   191    20    36   647     0     111  DirectCharBufferU
 27230    36   191    37    36   647     0      59  (
 27231    36   191    38    36   647     0      44  this
 27232    36   191    42    36   647     0      66  ,
 27233    36   192    47    36   647     1     111  this.markValue
 27234    36   192    61    36   647     1      59  (
 27235    36   192    62    36   647     1      60  )
 27236    36   192    63    36   647     1      66  ,
 27237    36   193    47    36   647     1     111  this.position
 27238    36   193    60    36   647     1      59  (
 27239    36   193    61    36   647     1      60  )
 27240    36   193    62    36   647     1      66  ,
 27241    36   194    47    36   647     1     111  this.limit
 27242    36   194    57    36   647     1      59  (
 27243    36   194    58    36   647     1      60  )
 27244    36   194    59    36   647     1      66  ,
 27245    36   195    47    36   647     1     111  this.capacity
 27246    36   195    60    36   647     1      59  (
 27247    36   195    61    36   647     1      60  )
 27248    36   195    62    36   647     1      66  ,
 27249    36   196    47    36   647     0     112  0
 27250    36   196    48    36   647     1      60  )
 27251    36   196    49    36   647     1     102  ;
 27252    36   197     5    36   647     1      64  }
 27253    36   197     5    36   647     0    1562  ENDMETHOD
 27254    36   197     5    36   648     0    1563  STARTMETHOD
 27255    36   199     5    36   648     0      10  public
 27256    36   199    12    36   648     0     111  CharBuffer
 27257    36   199    23    36   648     0     111  asReadOnlyBuffer
 27258    36   199    39    36   648     0      59  (
 27259    36   199    40    36   648     0      60  )
 27260    36   199    42    36   648     0      63  {
 27261    36   201     9    36   648     0      19  return
 27262    36   201    16    36   648     0      15  new
 27263    36   201    20    36   648     0     111  DirectCharBufferRU
 27264    36   201    38    36   648     0      59  (
 27265    36   201    39    36   648     0      44  this
 27266    36   201    43    36   648     0      66  ,
 27267    36   202    44    36   648     1     111  this.markValue
 27268    36   202    58    36   648     1      59  (
 27269    36   202    59    36   648     1      60  )
 27270    36   202    60    36   648     1      66  ,
 27271    36   203    44    36   648     1     111  this.position
 27272    36   203    57    36   648     1      59  (
 27273    36   203    58    36   648     1      60  )
 27274    36   203    59    36   648     1      66  ,
 27275    36   204    44    36   648     1     111  this.limit
 27276    36   204    54    36   648     1      59  (
 27277    36   204    55    36   648     1      60  )
 27278    36   204    56    36   648     1      66  ,
 27279    36   205    44    36   648     1     111  this.capacity
 27280    36   205    57    36   648     1      59  (
 27281    36   205    58    36   648     1      60  )
 27282    36   205    59    36   648     1      66  ,
 27283    36   206    44    36   648     0     112  0
 27284    36   206    45    36   648     1      60  )
 27285    36   206    46    36   648     1     102  ;
 27286    36   210     5    36   648     1      64  }
 27287    36   210     5    36   648     0    1564  ENDMETHOD
 27288    36   210     5    36   649     0    1565  STARTMETHOD
 27289    36   214     5    36   649     0      10  public
 27290    36   214    12    36   649     0      53  long
 27291    36   214    17    36   649     0     111  address
 27292    36   214    24    36   649     0      59  (
 27293    36   214    25    36   649     0      60  )
 27294    36   214    27    36   649     0      63  {
 27295    36   215     9    36   649     0      19  return
 27296    36   215    16    36   649     0     111  address
 27297    36   215    23    36   649     0     102  ;
 27298    36   216     5    36   649     0      64  }
 27299    36   216     5    36   649     0    1566  ENDMETHOD
 27300    36   216     5    36   650     0    1567  STARTMETHOD
 27301    36   218     5    36   650     0      41  private
 27302    36   218    13    36   650     0      53  long
 27303    36   218    18    36   650     0     111  ix
 27304    36   218    20    36   650     0      59  (
 27305    36   218    21    36   650     0      36  int
 27306    36   218    25    36   650     0     111  i
 27307    36   218    26    36   650     0      60  )
 27308    36   218    28    36   650     0      63  {
 27309    36   219     9    36   650     0      19  return
 27310    36   219    16    36   650     0     111  address
 27311    36   219    24    36   650     0      74  +
 27312    36   219    26    36   650     0      59  (
 27313    36   219    27    36   650     0     111  i
 27314    36   219    29    36   650     0      90  <<
 27315    36   219    32    36   650     0     112  1
 27316    36   219    33    36   650     0      60  )
 27317    36   219    34    36   650     0     102  ;
 27318    36   220     5    36   650     0      64  }
 27319    36   220     5    36   650     0    1568  ENDMETHOD
 27320    36   220     5    36   651     0    1569  STARTMETHOD
 27321    36   222     5    36   651     0      10  public
 27322    36   222    12    36   651     0      40  char
 27323    36   222    17    36   651     0     111  get
 27324    36   222    20    36   651     0      59  (
 27325    36   222    21    36   651     0      60  )
 27326    36   222    23    36   651     0      63  {
 27327    36   223     9    36   651     0      19  return
 27328    36   223    16    36   651     0      59  (
 27329    36   223    17    36   651     0      59  (
 27330    36   223    18    36   651     0     111  unsafe.getChar
 27331    36   223    32    36   651     0      59  (
 27332    36   223    33    36   651     0     111  ix
 27333    36   223    35    36   651     0      59  (
 27334    36   223    36    36   651     0     111  nextGetIndex
 27335    36   223    48    36   651     0      59  (
 27336    36   223    49    36   651     0      60  )
 27337    36   223    50    36   651     0      60  )
 27338    36   223    51    36   651     0      60  )
 27339    36   223    52    36   651     0      60  )
 27340    36   223    53    36   651     0      60  )
 27341    36   223    54    36   651     0     102  ;
 27342    36   224     5    36   651     0      64  }
 27343    36   224     5    36   651     0    1570  ENDMETHOD
 27344    36   224     5    36   652     0    1571  STARTMETHOD
 27345    36   226     5    36   652     0      10  public
 27346    36   226    12    36   652     0      40  char
 27347    36   226    17    36   652     0     111  get
 27348    36   226    20    36   652     0      59  (
 27349    36   226    21    36   652     0      36  int
 27350    36   226    25    36   652     0     111  i
 27351    36   226    26    36   652     0      60  )
 27352    36   226    28    36   652     0      63  {
 27353    36   227     9    36   652     0      19  return
 27354    36   227    16    36   652     0      59  (
 27355    36   227    17    36   652     0      59  (
 27356    36   227    18    36   652     0     111  unsafe.getChar
 27357    36   227    32    36   652     0      59  (
 27358    36   227    33    36   652     0     111  ix
 27359    36   227    35    36   652     0      59  (
 27360    36   227    36    36   652     0     111  checkIndex
 27361    36   227    46    36   652     0      59  (
 27362    36   227    47    36   652     0     111  i
 27363    36   227    48    36   652     0      60  )
 27364    36   227    49    36   652     0      60  )
 27365    36   227    50    36   652     0      60  )
 27366    36   227    51    36   652     0      60  )
 27367    36   227    52    36   652     0      60  )
 27368    36   227    53    36   652     0     102  ;
 27369    36   228     5    36   652     0      64  }
 27370    36   228     5    36   652     0    1572  ENDMETHOD
 27371    36   228     5    36   653     0    1573  STARTMETHOD
 27372    36   230     5    36   653     0      10  public
 27373    36   230    12    36   653     0     111  CharBuffer
 27374    36   230    23    36   653     0     111  get
 27375    36   230    26    36   653     0      59  (
 27376    36   230    27    36   653     0      40  char
 27377    36   230    31    36   653     0      61  [
 27378    36   230    32    36   653     0      62  ]
 27379    36   230    34    36   653     0     111  dst
 27380    36   230    37    36   653     0      66  ,
 27381    36   230    39    36   653     0      36  int
 27382    36   230    43    36   653     0     111  offset
 27383    36   230    49    36   653     0      66  ,
 27384    36   230    51    36   653     0      36  int
 27385    36   230    55    36   653     0     111  length
 27386    36   230    61    36   653     0      60  )
 27387    36   230    63    36   653     0      63  {
 27388    36   232     9    36   653     0      31  if
 27389    36   232    12    36   653     0      59  (
 27390    36   232    13    36   653     0      59  (
 27391    36   232    14    36   653     0     111  length
 27392    36   232    21    36   653     0      90  <<
 27393    36   232    24    36   653     0     112  1
 27394    36   232    25    36   653     0      60  )
 27395    36   232    27    36   653     0      89  >
 27396    36   232    29    36   653     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 27397    36   232    61    36   653     0      60  )
 27398    36   232    63    36   653     0      63  {
 27399    36   233    13    36   653     0     111  checkBounds
 27400    36   233    24    36   653     0      59  (
 27401    36   233    25    36   653     0     111  offset
 27402    36   233    31    36   653     0      66  ,
 27403    36   233    33    36   653     0     111  length
 27404    36   233    39    36   653     0      66  ,
 27405    36   233    41    36   653     0     111  dst.length
 27406    36   233    51    36   653     0      60  )
 27407    36   233    52    36   653     0     102  ;
 27408    36   234    13    36   653     1      36  int
 27409    36   234    17    36   653     1     111  pos
 27410    36   234    21    36   653     1      67  =
 27411    36   234    23    36   653     1     111  position
 27412    36   234    31    36   653     1      59  (
 27413    36   234    32    36   653     1      60  )
 27414    36   234    33    36   653     1     102  ;
 27415    36   235    13    36   653     1      36  int
 27416    36   235    17    36   653     1     111  lim
 27417    36   235    21    36   653     1      67  =
 27418    36   235    23    36   653     1     111  limit
 27419    36   235    28    36   653     1      59  (
 27420    36   235    29    36   653     1      60  )
 27421    36   235    30    36   653     1     102  ;
 27422    36   236    13    36   653     0     111  assert
 27423    36   236    20    36   653     0      59  (
 27424    36   236    21    36   653     0     111  pos
 27425    36   236    25    36   653     0      92  <=
 27426    36   236    28    36   653     0     111  lim
 27427    36   236    31    36   653     0      60  )
 27428    36   236    32    36   653     0     102  ;
 27429    36   237    13    36   653     0      36  int
 27430    36   237    17    36   653     0     111  rem
 27431    36   237    21    36   653     0      67  =
 27432    36   237    23    36   653     0      59  (
 27433    36   237    24    36   653     0     111  pos
 27434    36   237    28    36   653     0      92  <=
 27435    36   237    31    36   653     0     111  lim
 27436    36   237    35    36   653     0      58  ?
 27437    36   237    37    36   653     0     111  lim
 27438    36   237    41    36   653     0      77  -
 27439    36   237    43    36   653     0     111  pos
 27440    36   237    47    36   653     0      65  :
 27441    36   237    49    36   653     0     112  0
 27442    36   237    50    36   653     0      60  )
 27443    36   237    51    36   653     0     102  ;
 27444    36   238    13    36   653     0      31  if
 27445    36   238    16    36   653     0      59  (
 27446    36   238    17    36   653     0     111  length
 27447    36   238    24    36   653     0      89  >
 27448    36   238    26    36   653     0     111  rem
 27449    36   238    29    36   653     0      60  )
 27450    36   239    17    36   653     0      20  throw
 27451    36   239    23    36   653     0      15  new
 27452    36   239    27    36   653     0     111  BufferUnderflowException
 27453    36   239    51    36   653     0      59  (
 27454    36   239    52    36   653     0      60  )
 27455    36   239    53    36   653     0     102  ;
 27456    36   241    13    36   653     0      31  if
 27457    36   241    16    36   653     0      59  (
 27458    36   241    17    36   653     0     111  order
 27459    36   241    22    36   653     0      59  (
 27460    36   241    23    36   653     0      60  )
 27461    36   241    25    36   653     0      71  !=
 27462    36   241    28    36   653     0     111  ByteOrder.nativeOrder
 27463    36   241    49    36   653     0      59  (
 27464    36   241    50    36   653     0      60  )
 27465    36   241    51    36   653     0      60  )
 27466    36   242    17    36   653     0     111  Bits.copyToCharArray
 27467    36   242    37    36   653     0      59  (
 27468    36   242    38    36   653     0     111  ix
 27469    36   242    40    36   653     0      59  (
 27470    36   242    41    36   653     0     111  pos
 27471    36   242    44    36   653     0      60  )
 27472    36   242    45    36   653     0      66  ,
 27473    36   242    47    36   653     0     111  dst
 27474    36   242    50    36   653     0      66  ,
 27475    36   243    43    36   653     0     111  offset
 27476    36   243    50    36   653     0      90  <<
 27477    36   243    53    36   653     0     112  1
 27478    36   243    54    36   653     0      66  ,
 27479    36   244    43    36   653     0     111  length
 27480    36   244    50    36   653     0      90  <<
 27481    36   244    53    36   653     0     112  1
 27482    36   244    54    36   653     0      60  )
 27483    36   244    55    36   653     0     102  ;
 27484    36   245    13    36   653     0      48  else
 27485    36   246    17    36   653     0     111  Bits.copyToByteArray
 27486    36   246    37    36   653     0      59  (
 27487    36   246    38    36   653     0     111  ix
 27488    36   246    40    36   653     0      59  (
 27489    36   246    41    36   653     0     111  pos
 27490    36   246    44    36   653     0      60  )
 27491    36   246    45    36   653     0      66  ,
 27492    36   246    47    36   653     0     111  dst
 27493    36   246    50    36   653     0      66  ,
 27494    36   247    38    36   653     0     111  offset
 27495    36   247    45    36   653     0      90  <<
 27496    36   247    48    36   653     0     112  1
 27497    36   247    49    36   653     0      66  ,
 27498    36   248    38    36   653     0     111  length
 27499    36   248    45    36   653     0      90  <<
 27500    36   248    48    36   653     0     112  1
 27501    36   248    49    36   653     0      60  )
 27502    36   248    50    36   653     0     102  ;
 27503    36   249    13    36   653     0     111  position
 27504    36   249    21    36   653     0      59  (
 27505    36   249    22    36   653     0     111  pos
 27506    36   249    26    36   653     0      74  +
 27507    36   249    28    36   653     0     111  length
 27508    36   249    34    36   653     0      60  )
 27509    36   249    35    36   653     0     102  ;
 27510    36   250     9    36   653     0      64  }
 27511    36   250    11    36   653     0      48  else
 27512    36   250    16    36   653     0      63  {
 27513    36   251    13    36   653     0     111  super.get
 27514    36   251    22    36   653     0      59  (
 27515    36   251    23    36   653     0     111  dst
 27516    36   251    26    36   653     0      66  ,
 27517    36   251    28    36   653     0     111  offset
 27518    36   251    34    36   653     0      66  ,
 27519    36   251    36    36   653     0     111  length
 27520    36   251    42    36   653     0      60  )
 27521    36   251    43    36   653     0     102  ;
 27522    36   252     9    36   653     0      64  }
 27523    36   253     9    36   653     0      19  return
 27524    36   253    16    36   653     0      44  this
 27525    36   253    20    36   653     0     102  ;
 27526    36   257     5    36   653     0      64  }
 27527    36   257     5    36   653     0    1574  ENDMETHOD
 27528    36   257     5    36   654     0    1575  STARTMETHOD
 27529    36   261     5    36   654     0      10  public
 27530    36   261    12    36   654     0     111  CharBuffer
 27531    36   261    23    36   654     0     111  put
 27532    36   261    26    36   654     0      59  (
 27533    36   261    27    36   654     0      40  char
 27534    36   261    32    36   654     0     111  x
 27535    36   261    33    36   654     0      60  )
 27536    36   261    35    36   654     0      63  {
 27537    36   263     9    36   654     0     111  unsafe.putChar
 27538    36   263    23    36   654     0      59  (
 27539    36   263    24    36   654     0     111  ix
 27540    36   263    26    36   654     0      59  (
 27541    36   263    27    36   654     0     111  nextPutIndex
 27542    36   263    39    36   654     0      59  (
 27543    36   263    40    36   654     0      60  )
 27544    36   263    41    36   654     0      60  )
 27545    36   263    42    36   654     0      66  ,
 27546    36   263    44    36   654     0      59  (
 27547    36   263    45    36   654     0      59  (
 27548    36   263    46    36   654     0     111  x
 27549    36   263    47    36   654     0      60  )
 27550    36   263    48    36   654     0      60  )
 27551    36   263    49    36   654     0      60  )
 27552    36   263    50    36   654     0     102  ;
 27553    36   264     9    36   654     0      19  return
 27554    36   264    16    36   654     0      44  this
 27555    36   264    20    36   654     0     102  ;
 27556    36   268     5    36   654     0      64  }
 27557    36   268     5    36   654     0    1576  ENDMETHOD
 27558    36   268     5    36   655     0    1577  STARTMETHOD
 27559    36   270     5    36   655     0      10  public
 27560    36   270    12    36   655     0     111  CharBuffer
 27561    36   270    23    36   655     0     111  put
 27562    36   270    26    36   655     0      59  (
 27563    36   270    27    36   655     0      36  int
 27564    36   270    31    36   655     0     111  i
 27565    36   270    32    36   655     0      66  ,
 27566    36   270    34    36   655     0      40  char
 27567    36   270    39    36   655     0     111  x
 27568    36   270    40    36   655     0      60  )
 27569    36   270    42    36   655     0      63  {
 27570    36   272     9    36   655     0     111  unsafe.putChar
 27571    36   272    23    36   655     0      59  (
 27572    36   272    24    36   655     0     111  ix
 27573    36   272    26    36   655     0      59  (
 27574    36   272    27    36   655     0     111  checkIndex
 27575    36   272    37    36   655     0      59  (
 27576    36   272    38    36   655     0     111  i
 27577    36   272    39    36   655     0      60  )
 27578    36   272    40    36   655     0      60  )
 27579    36   272    41    36   655     0      66  ,
 27580    36   272    43    36   655     0      59  (
 27581    36   272    44    36   655     0      59  (
 27582    36   272    45    36   655     0     111  x
 27583    36   272    46    36   655     0      60  )
 27584    36   272    47    36   655     0      60  )
 27585    36   272    48    36   655     0      60  )
 27586    36   272    49    36   655     0     102  ;
 27587    36   273     9    36   655     0      19  return
 27588    36   273    16    36   655     0      44  this
 27589    36   273    20    36   655     0     102  ;
 27590    36   277     5    36   655     0      64  }
 27591    36   277     5    36   655     0    1578  ENDMETHOD
 27592    36   277     5    36   656     0    1579  STARTMETHOD
 27593    36   279     5    36   656     0      10  public
 27594    36   279    12    36   656     0     111  CharBuffer
 27595    36   279    23    36   656     0     111  put
 27596    36   279    26    36   656     0      59  (
 27597    36   279    27    36   656     0     111  CharBuffer
 27598    36   279    38    36   656     0     111  src
 27599    36   279    41    36   656     0      60  )
 27600    36   279    43    36   656     0      63  {
 27601    36   281     9    36   656     0      31  if
 27602    36   281    12    36   656     0      59  (
 27603    36   281    13    36   656     0     111  src
 27604    36   281    17    36   656     0      16  instanceof
 27605    36   281    28    36   656     0     111  DirectCharBufferU
 27606    36   281    45    36   656     0      60  )
 27607    36   281    47    36   656     0      63  {
 27608    36   282    13    36   656     0      31  if
 27609    36   282    16    36   656     0      59  (
 27610    36   282    17    36   656     0     111  src
 27611    36   282    21    36   656     0      68  ==
 27612    36   282    24    36   656     0      44  this
 27613    36   282    28    36   656     0      60  )
 27614    36   283    17    36   656     0      20  throw
 27615    36   283    23    36   656     0      15  new
 27616    36   283    27    36   656     0     111  IllegalArgumentException
 27617    36   283    51    36   656     0      59  (
 27618    36   283    52    36   656     0      60  )
 27619    36   283    53    36   656     0     102  ;
 27620    36   284    13    36   656     0     111  DirectCharBufferU
 27621    36   284    31    36   656     0     111  sb
 27622    36   284    34    36   656     0      67  =
 27623    36   284    36    36   656     0      59  (
 27624    36   284    37    36   656     0     111  DirectCharBufferU
 27625    36   284    54    36   656     0      60  )
 27626    36   284    55    36   656     0     111  src
 27627    36   284    58    36   656     0     102  ;
 27628    36   286    13    36   656     1      36  int
 27629    36   286    17    36   656     1     111  spos
 27630    36   286    22    36   656     1      67  =
 27631    36   286    24    36   656     1     111  sb.position
 27632    36   286    35    36   656     1      59  (
 27633    36   286    36    36   656     1      60  )
 27634    36   286    37    36   656     1     102  ;
 27635    36   287    13    36   656     1      36  int
 27636    36   287    17    36   656     1     111  slim
 27637    36   287    22    36   656     1      67  =
 27638    36   287    24    36   656     1     111  sb.limit
 27639    36   287    32    36   656     1      59  (
 27640    36   287    33    36   656     1      60  )
 27641    36   287    34    36   656     1     102  ;
 27642    36   288    13    36   656     0     111  assert
 27643    36   288    20    36   656     0      59  (
 27644    36   288    21    36   656     0     111  spos
 27645    36   288    26    36   656     0      92  <=
 27646    36   288    29    36   656     0     111  slim
 27647    36   288    33    36   656     0      60  )
 27648    36   288    34    36   656     0     102  ;
 27649    36   289    13    36   656     0      36  int
 27650    36   289    17    36   656     0     111  srem
 27651    36   289    22    36   656     0      67  =
 27652    36   289    24    36   656     0      59  (
 27653    36   289    25    36   656     0     111  spos
 27654    36   289    30    36   656     0      92  <=
 27655    36   289    33    36   656     0     111  slim
 27656    36   289    38    36   656     0      58  ?
 27657    36   289    40    36   656     0     111  slim
 27658    36   289    45    36   656     0      77  -
 27659    36   289    47    36   656     0     111  spos
 27660    36   289    52    36   656     0      65  :
 27661    36   289    54    36   656     0     112  0
 27662    36   289    55    36   656     0      60  )
 27663    36   289    56    36   656     0     102  ;
 27664    36   291    13    36   656     1      36  int
 27665    36   291    17    36   656     1     111  pos
 27666    36   291    21    36   656     1      67  =
 27667    36   291    23    36   656     1     111  position
 27668    36   291    31    36   656     1      59  (
 27669    36   291    32    36   656     1      60  )
 27670    36   291    33    36   656     1     102  ;
 27671    36   292    13    36   656     1      36  int
 27672    36   292    17    36   656     1     111  lim
 27673    36   292    21    36   656     1      67  =
 27674    36   292    23    36   656     1     111  limit
 27675    36   292    28    36   656     1      59  (
 27676    36   292    29    36   656     1      60  )
 27677    36   292    30    36   656     1     102  ;
 27678    36   293    13    36   656     0     111  assert
 27679    36   293    20    36   656     0      59  (
 27680    36   293    21    36   656     0     111  pos
 27681    36   293    25    36   656     0      92  <=
 27682    36   293    28    36   656     0     111  lim
 27683    36   293    31    36   656     0      60  )
 27684    36   293    32    36   656     0     102  ;
 27685    36   294    13    36   656     0      36  int
 27686    36   294    17    36   656     0     111  rem
 27687    36   294    21    36   656     0      67  =
 27688    36   294    23    36   656     0      59  (
 27689    36   294    24    36   656     0     111  pos
 27690    36   294    28    36   656     0      92  <=
 27691    36   294    31    36   656     0     111  lim
 27692    36   294    35    36   656     0      58  ?
 27693    36   294    37    36   656     0     111  lim
 27694    36   294    41    36   656     0      77  -
 27695    36   294    43    36   656     0     111  pos
 27696    36   294    47    36   656     0      65  :
 27697    36   294    49    36   656     0     112  0
 27698    36   294    50    36   656     0      60  )
 27699    36   294    51    36   656     0     102  ;
 27700    36   296    13    36   656     0      31  if
 27701    36   296    16    36   656     0      59  (
 27702    36   296    17    36   656     0     111  srem
 27703    36   296    22    36   656     0      89  >
 27704    36   296    24    36   656     0     111  rem
 27705    36   296    27    36   656     0      60  )
 27706    36   297    17    36   656     0      20  throw
 27707    36   297    23    36   656     0      15  new
 27708    36   297    27    36   656     0     111  BufferOverflowException
 27709    36   297    50    36   656     0      59  (
 27710    36   297    51    36   656     0      60  )
 27711    36   297    52    36   656     0     102  ;
 27712    36   298    13    36   656     0     111  unsafe.copyMemory
 27713    36   298    30    36   656     0      59  (
 27714    36   298    31    36   656     0     111  sb.ix
 27715    36   298    36    36   656     0      59  (
 27716    36   298    37    36   656     0     111  spos
 27717    36   298    41    36   656     0      60  )
 27718    36   298    42    36   656     0      66  ,
 27719    36   298    44    36   656     0     111  ix
 27720    36   298    46    36   656     0      59  (
 27721    36   298    47    36   656     0     111  pos
 27722    36   298    50    36   656     0      60  )
 27723    36   298    51    36   656     0      66  ,
 27724    36   298    53    36   656     0     111  srem
 27725    36   298    58    36   656     0      90  <<
 27726    36   298    61    36   656     0     112  1
 27727    36   298    62    36   656     0      60  )
 27728    36   298    63    36   656     0     102  ;
 27729    36   299    13    36   656     1     111  sb.position
 27730    36   299    24    36   656     1      59  (
 27731    36   299    25    36   656     1     111  spos
 27732    36   299    30    36   656     1      74  +
 27733    36   299    32    36   656     1     111  srem
 27734    36   299    36    36   656     1      60  )
 27735    36   299    37    36   656     1     102  ;
 27736    36   300    13    36   656     1     111  position
 27737    36   300    21    36   656     1      59  (
 27738    36   300    22    36   656     1     111  pos
 27739    36   300    26    36   656     1      74  +
 27740    36   300    28    36   656     1     111  srem
 27741    36   300    32    36   656     1      60  )
 27742    36   300    33    36   656     1     102  ;
 27743    36   301     9    36   656     0      64  }
 27744    36   301    11    36   656     0      48  else
 27745    36   301    16    36   656     0      31  if
 27746    36   301    19    36   656     0      59  (
 27747    36   301    20    36   656     0     111  src.hb
 27748    36   301    27    36   656     0      71  !=
 27749    36   301    30    36   656     0      21  null
 27750    36   301    34    36   656     0      60  )
 27751    36   301    36    36   656     0      63  {
 27752    36   303    13    36   656     1      36  int
 27753    36   303    17    36   656     1     111  spos
 27754    36   303    22    36   656     1      67  =
 27755    36   303    24    36   656     1     111  src.position
 27756    36   303    36    36   656     1      59  (
 27757    36   303    37    36   656     1      60  )
 27758    36   303    38    36   656     1     102  ;
 27759    36   304    13    36   656     1      36  int
 27760    36   304    17    36   656     1     111  slim
 27761    36   304    22    36   656     1      67  =
 27762    36   304    24    36   656     1     111  src.limit
 27763    36   304    33    36   656     1      59  (
 27764    36   304    34    36   656     1      60  )
 27765    36   304    35    36   656     1     102  ;
 27766    36   305    13    36   656     0     111  assert
 27767    36   305    20    36   656     0      59  (
 27768    36   305    21    36   656     0     111  spos
 27769    36   305    26    36   656     0      92  <=
 27770    36   305    29    36   656     0     111  slim
 27771    36   305    33    36   656     0      60  )
 27772    36   305    34    36   656     0     102  ;
 27773    36   306    13    36   656     0      36  int
 27774    36   306    17    36   656     0     111  srem
 27775    36   306    22    36   656     0      67  =
 27776    36   306    24    36   656     0      59  (
 27777    36   306    25    36   656     0     111  spos
 27778    36   306    30    36   656     0      92  <=
 27779    36   306    33    36   656     0     111  slim
 27780    36   306    38    36   656     0      58  ?
 27781    36   306    40    36   656     0     111  slim
 27782    36   306    45    36   656     0      77  -
 27783    36   306    47    36   656     0     111  spos
 27784    36   306    52    36   656     0      65  :
 27785    36   306    54    36   656     0     112  0
 27786    36   306    55    36   656     0      60  )
 27787    36   306    56    36   656     0     102  ;
 27788    36   308    13    36   656     0     111  put
 27789    36   308    16    36   656     0      59  (
 27790    36   308    17    36   656     0     111  src.hb
 27791    36   308    23    36   656     0      66  ,
 27792    36   308    25    36   656     0     111  src.offset
 27793    36   308    36    36   656     0      74  +
 27794    36   308    38    36   656     0     111  spos
 27795    36   308    42    36   656     0      66  ,
 27796    36   308    44    36   656     0     111  srem
 27797    36   308    48    36   656     0      60  )
 27798    36   308    49    36   656     0     102  ;
 27799    36   309    13    36   656     0     111  src.position
 27800    36   309    25    36   656     0      59  (
 27801    36   309    26    36   656     0     111  spos
 27802    36   309    31    36   656     0      74  +
 27803    36   309    33    36   656     0     111  srem
 27804    36   309    37    36   656     0      60  )
 27805    36   309    38    36   656     0     102  ;
 27806    36   311     9    36   656     0      64  }
 27807    36   311    11    36   656     0      48  else
 27808    36   311    16    36   656     0      63  {
 27809    36   312    13    36   656     0     111  super.put
 27810    36   312    22    36   656     0      59  (
 27811    36   312    23    36   656     0     111  src
 27812    36   312    26    36   656     0      60  )
 27813    36   312    27    36   656     0     102  ;
 27814    36   313     9    36   656     0      64  }
 27815    36   314     9    36   656     0      19  return
 27816    36   314    16    36   656     0      44  this
 27817    36   314    20    36   656     0     102  ;
 27818    36   318     5    36   656     0      64  }
 27819    36   318     5    36   656     0    1580  ENDMETHOD
 27820    36   318     5    36   657     0    1581  STARTMETHOD
 27821    36   320     5    36   657     0      10  public
 27822    36   320    12    36   657     0     111  CharBuffer
 27823    36   320    23    36   657     0     111  put
 27824    36   320    26    36   657     0      59  (
 27825    36   320    27    36   657     0      40  char
 27826    36   320    31    36   657     0      61  [
 27827    36   320    32    36   657     0      62  ]
 27828    36   320    34    36   657     0     111  src
 27829    36   320    37    36   657     0      66  ,
 27830    36   320    39    36   657     0      36  int
 27831    36   320    43    36   657     0     111  offset
 27832    36   320    49    36   657     0      66  ,
 27833    36   320    51    36   657     0      36  int
 27834    36   320    55    36   657     0     111  length
 27835    36   320    61    36   657     0      60  )
 27836    36   320    63    36   657     0      63  {
 27837    36   322     9    36   657     0      31  if
 27838    36   322    12    36   657     0      59  (
 27839    36   322    13    36   657     0      59  (
 27840    36   322    14    36   657     0     111  length
 27841    36   322    21    36   657     0      90  <<
 27842    36   322    24    36   657     0     112  1
 27843    36   322    25    36   657     0      60  )
 27844    36   322    27    36   657     0      89  >
 27845    36   322    29    36   657     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 27846    36   322    63    36   657     0      60  )
 27847    36   322    65    36   657     0      63  {
 27848    36   323    13    36   657     0     111  checkBounds
 27849    36   323    24    36   657     0      59  (
 27850    36   323    25    36   657     0     111  offset
 27851    36   323    31    36   657     0      66  ,
 27852    36   323    33    36   657     0     111  length
 27853    36   323    39    36   657     0      66  ,
 27854    36   323    41    36   657     0     111  src.length
 27855    36   323    51    36   657     0      60  )
 27856    36   323    52    36   657     0     102  ;
 27857    36   324    13    36   657     1      36  int
 27858    36   324    17    36   657     1     111  pos
 27859    36   324    21    36   657     1      67  =
 27860    36   324    23    36   657     1     111  position
 27861    36   324    31    36   657     1      59  (
 27862    36   324    32    36   657     1      60  )
 27863    36   324    33    36   657     1     102  ;
 27864    36   325    13    36   657     1      36  int
 27865    36   325    17    36   657     1     111  lim
 27866    36   325    21    36   657     1      67  =
 27867    36   325    23    36   657     1     111  limit
 27868    36   325    28    36   657     1      59  (
 27869    36   325    29    36   657     1      60  )
 27870    36   325    30    36   657     1     102  ;
 27871    36   326    13    36   657     0     111  assert
 27872    36   326    20    36   657     0      59  (
 27873    36   326    21    36   657     0     111  pos
 27874    36   326    25    36   657     0      92  <=
 27875    36   326    28    36   657     0     111  lim
 27876    36   326    31    36   657     0      60  )
 27877    36   326    32    36   657     0     102  ;
 27878    36   327    13    36   657     0      36  int
 27879    36   327    17    36   657     0     111  rem
 27880    36   327    21    36   657     0      67  =
 27881    36   327    23    36   657     0      59  (
 27882    36   327    24    36   657     0     111  pos
 27883    36   327    28    36   657     0      92  <=
 27884    36   327    31    36   657     0     111  lim
 27885    36   327    35    36   657     0      58  ?
 27886    36   327    37    36   657     0     111  lim
 27887    36   327    41    36   657     0      77  -
 27888    36   327    43    36   657     0     111  pos
 27889    36   327    47    36   657     0      65  :
 27890    36   327    49    36   657     0     112  0
 27891    36   327    50    36   657     0      60  )
 27892    36   327    51    36   657     0     102  ;
 27893    36   328    13    36   657     0      31  if
 27894    36   328    16    36   657     0      59  (
 27895    36   328    17    36   657     0     111  length
 27896    36   328    24    36   657     0      89  >
 27897    36   328    26    36   657     0     111  rem
 27898    36   328    29    36   657     0      60  )
 27899    36   329    17    36   657     0      20  throw
 27900    36   329    23    36   657     0      15  new
 27901    36   329    27    36   657     0     111  BufferOverflowException
 27902    36   329    50    36   657     0      59  (
 27903    36   329    51    36   657     0      60  )
 27904    36   329    52    36   657     0     102  ;
 27905    36   331    13    36   657     0      31  if
 27906    36   331    16    36   657     0      59  (
 27907    36   331    17    36   657     0     111  order
 27908    36   331    22    36   657     0      59  (
 27909    36   331    23    36   657     0      60  )
 27910    36   331    25    36   657     0      71  !=
 27911    36   331    28    36   657     0     111  ByteOrder.nativeOrder
 27912    36   331    49    36   657     0      59  (
 27913    36   331    50    36   657     0      60  )
 27914    36   331    51    36   657     0      60  )
 27915    36   332    17    36   657     0     111  Bits.copyFromCharArray
 27916    36   332    39    36   657     0      59  (
 27917    36   332    40    36   657     0     111  src
 27918    36   332    43    36   657     0      66  ,
 27919    36   332    45    36   657     0     111  offset
 27920    36   332    52    36   657     0      90  <<
 27921    36   332    55    36   657     0     112  1
 27922    36   332    56    36   657     0      66  ,
 27923    36   333    45    36   657     0     111  ix
 27924    36   333    47    36   657     0      59  (
 27925    36   333    48    36   657     0     111  pos
 27926    36   333    51    36   657     0      60  )
 27927    36   333    52    36   657     0      66  ,
 27928    36   333    54    36   657     0     111  length
 27929    36   333    61    36   657     0      90  <<
 27930    36   333    64    36   657     0     112  1
 27931    36   333    65    36   657     0      60  )
 27932    36   333    66    36   657     0     102  ;
 27933    36   334    13    36   657     0      48  else
 27934    36   335    17    36   657     0     111  Bits.copyFromByteArray
 27935    36   335    39    36   657     0      59  (
 27936    36   335    40    36   657     0     111  src
 27937    36   335    43    36   657     0      66  ,
 27938    36   335    45    36   657     0     111  offset
 27939    36   335    52    36   657     0      90  <<
 27940    36   335    55    36   657     0     112  1
 27941    36   335    56    36   657     0      66  ,
 27942    36   336    40    36   657     0     111  ix
 27943    36   336    42    36   657     0      59  (
 27944    36   336    43    36   657     0     111  pos
 27945    36   336    46    36   657     0      60  )
 27946    36   336    47    36   657     0      66  ,
 27947    36   336    49    36   657     0     111  length
 27948    36   336    56    36   657     0      90  <<
 27949    36   336    59    36   657     0     112  1
 27950    36   336    60    36   657     0      60  )
 27951    36   336    61    36   657     0     102  ;
 27952    36   337    13    36   657     0     111  position
 27953    36   337    21    36   657     0      59  (
 27954    36   337    22    36   657     0     111  pos
 27955    36   337    26    36   657     0      74  +
 27956    36   337    28    36   657     0     111  length
 27957    36   337    34    36   657     0      60  )
 27958    36   337    35    36   657     0     102  ;
 27959    36   338     9    36   657     0      64  }
 27960    36   338    11    36   657     0      48  else
 27961    36   338    16    36   657     0      63  {
 27962    36   339    13    36   657     0     111  super.put
 27963    36   339    22    36   657     0      59  (
 27964    36   339    23    36   657     0     111  src
 27965    36   339    26    36   657     0      66  ,
 27966    36   339    28    36   657     0     111  offset
 27967    36   339    34    36   657     0      66  ,
 27968    36   339    36    36   657     0     111  length
 27969    36   339    42    36   657     0      60  )
 27970    36   339    43    36   657     0     102  ;
 27971    36   340     9    36   657     0      64  }
 27972    36   341     9    36   657     0      19  return
 27973    36   341    16    36   657     0      44  this
 27974    36   341    20    36   657     0     102  ;
 27975    36   345     5    36   657     0      64  }
 27976    36   345     5    36   657     0    1582  ENDMETHOD
 27977    36   345     5    36   658     0    1583  STARTMETHOD
 27978    36   347     5    36   658     0      10  public
 27979    36   347    12    36   658     0     111  CharBuffer
 27980    36   347    23    36   658     0     111  compact
 27981    36   347    30    36   658     0      59  (
 27982    36   347    31    36   658     0      60  )
 27983    36   347    33    36   658     0      63  {
 27984    36   349     9    36   658     1      36  int
 27985    36   349    13    36   658     1     111  pos
 27986    36   349    17    36   658     1      67  =
 27987    36   349    19    36   658     1     111  position
 27988    36   349    27    36   658     1      59  (
 27989    36   349    28    36   658     1      60  )
 27990    36   349    29    36   658     1     102  ;
 27991    36   350     9    36   658     1      36  int
 27992    36   350    13    36   658     1     111  lim
 27993    36   350    17    36   658     1      67  =
 27994    36   350    19    36   658     1     111  limit
 27995    36   350    24    36   658     1      59  (
 27996    36   350    25    36   658     1      60  )
 27997    36   350    26    36   658     1     102  ;
 27998    36   351     9    36   658     0     111  assert
 27999    36   351    16    36   658     0      59  (
 28000    36   351    17    36   658     0     111  pos
 28001    36   351    21    36   658     0      92  <=
 28002    36   351    24    36   658     0     111  lim
 28003    36   351    27    36   658     0      60  )
 28004    36   351    28    36   658     0     102  ;
 28005    36   352     9    36   658     0      36  int
 28006    36   352    13    36   658     0     111  rem
 28007    36   352    17    36   658     0      67  =
 28008    36   352    19    36   658     0      59  (
 28009    36   352    20    36   658     0     111  pos
 28010    36   352    24    36   658     0      92  <=
 28011    36   352    27    36   658     0     111  lim
 28012    36   352    31    36   658     0      58  ?
 28013    36   352    33    36   658     0     111  lim
 28014    36   352    37    36   658     0      77  -
 28015    36   352    39    36   658     0     111  pos
 28016    36   352    43    36   658     0      65  :
 28017    36   352    45    36   658     0     112  0
 28018    36   352    46    36   658     0      60  )
 28019    36   352    47    36   658     0     102  ;
 28020    36   354     9    36   658     0     111  unsafe.copyMemory
 28021    36   354    26    36   658     0      59  (
 28022    36   354    27    36   658     0     111  ix
 28023    36   354    29    36   658     0      59  (
 28024    36   354    30    36   658     0     111  pos
 28025    36   354    33    36   658     0      60  )
 28026    36   354    34    36   658     0      66  ,
 28027    36   354    36    36   658     0     111  ix
 28028    36   354    38    36   658     0      59  (
 28029    36   354    39    36   658     0     112  0
 28030    36   354    40    36   658     0      60  )
 28031    36   354    41    36   658     0      66  ,
 28032    36   354    43    36   658     0     111  rem
 28033    36   354    47    36   658     0      90  <<
 28034    36   354    50    36   658     0     112  1
 28035    36   354    51    36   658     0      60  )
 28036    36   354    52    36   658     0     102  ;
 28037    36   355     9    36   658     0     111  position
 28038    36   355    17    36   658     0      59  (
 28039    36   355    18    36   658     0     111  rem
 28040    36   355    21    36   658     0      60  )
 28041    36   355    22    36   658     0     102  ;
 28042    36   356     9    36   658     0     111  limit
 28043    36   356    14    36   658     0      59  (
 28044    36   356    15    36   658     0     111  capacity
 28045    36   356    23    36   658     0      59  (
 28046    36   356    24    36   658     0      60  )
 28047    36   356    25    36   658     0      60  )
 28048    36   356    26    36   658     0     102  ;
 28049    36   357     9    36   658     0     111  clearMark
 28050    36   357    18    36   658     0      59  (
 28051    36   357    19    36   658     0      60  )
 28052    36   357    20    36   658     0     102  ;
 28053    36   358     9    36   658     0      19  return
 28054    36   358    16    36   658     0      44  this
 28055    36   358    20    36   658     1     102  ;
 28056    36   362     5    36   658     1      64  }
 28057    36   362     5    36   658     0    1584  ENDMETHOD
 28058    36   362     5    36   659     0    1585  STARTMETHOD
 28059    36   364     5    36   659     0      10  public
 28060    36   364    12    36   659     0      39  boolean
 28061    36   364    20    36   659     0     111  isDirect
 28062    36   364    28    36   659     0      59  (
 28063    36   364    29    36   659     0      60  )
 28064    36   364    31    36   659     0      63  {
 28065    36   365     9    36   659     0      19  return
 28066    36   365    16    36   659     0      52  true
 28067    36   365    20    36   659     1     102  ;
 28068    36   366     5    36   659     1      64  }
 28069    36   366     5    36   659     0    1586  ENDMETHOD
 28070    36   366     5    36   660     0    1587  STARTMETHOD
 28071    36   368     5    36   660     0      10  public
 28072    36   368    12    36   660     0      39  boolean
 28073    36   368    20    36   660     0     111  isReadOnly
 28074    36   368    30    36   660     0      59  (
 28075    36   368    31    36   660     0      60  )
 28076    36   368    33    36   660     0      63  {
 28077    36   369     9    36   660     0      19  return
 28078    36   369    16    36   660     0      43  false
 28079    36   369    21    36   660     1     102  ;
 28080    36   370     5    36   660     1      64  }
 28081    36   370     5    36   660     0    1588  ENDMETHOD
 28082    36   370     5    36   661     0    1589  STARTMETHOD
 28083    36   375     5    36   661     0      10  public
 28084    36   375    12    36   661     0     111  String
 28085    36   375    19    36   661     0     111  toString
 28086    36   375    27    36   661     0      59  (
 28087    36   375    28    36   661     0      36  int
 28088    36   375    32    36   661     0     111  start
 28089    36   375    37    36   661     0      66  ,
 28090    36   375    39    36   661     0      36  int
 28091    36   375    43    36   661     0     111  end
 28092    36   375    46    36   661     0      60  )
 28093    36   375    48    36   661     0      63  {
 28094    36   376     9    36   661     0      31  if
 28095    36   376    12    36   661     0      59  (
 28096    36   376    13    36   661     0      59  (
 28097    36   376    14    36   661     0     111  end
 28098    36   376    18    36   661     0      89  >
 28099    36   376    20    36   661     0     111  limit
 28100    36   376    25    36   661     0      59  (
 28101    36   376    26    36   661     0      60  )
 28102    36   376    27    36   661     0      60  )
 28103    36   376    29    36   661     0      98  ||
 28104    36   376    32    36   661     0      59  (
 28105    36   376    33    36   661     0     111  start
 28106    36   376    39    36   661     0      89  >
 28107    36   376    41    36   661     0     111  end
 28108    36   376    44    36   661     0      60  )
 28109    36   376    45    36   661     0      60  )
 28110    36   377    13    36   661     0      20  throw
 28111    36   377    19    36   661     0      15  new
 28112    36   377    23    36   661     0     111  IndexOutOfBoundsException
 28113    36   377    48    36   661     0      59  (
 28114    36   377    49    36   661     0      60  )
 28115    36   377    50    36   661     0     102  ;
 28116    36   378     9    36   661     0      35  try
 28117    36   378    13    36   661     0      63  {
 28118    36   379    13    36   661     0      36  int
 28119    36   379    17    36   661     0     111  len
 28120    36   379    21    36   661     0      67  =
 28121    36   379    23    36   661     0     111  end
 28122    36   379    27    36   661     0      77  -
 28123    36   379    29    36   661     0     111  start
 28124    36   379    34    36   661     0     102  ;
 28125    36   380    13    36   661     0      40  char
 28126    36   380    17    36   661     0      61  [
 28127    36   380    18    36   661     0      62  ]
 28128    36   380    20    36   661     0     111  ca
 28129    36   380    23    36   661     0      67  =
 28130    36   380    25    36   661     0      15  new
 28131    36   380    29    36   661     0      40  char
 28132    36   380    33    36   661     0      61  [
 28133    36   380    34    36   661     0     111  len
 28134    36   380    37    36   661     0      62  ]
 28135    36   380    38    36   661     0     102  ;
 28136    36   381    13    36   661     0     111  CharBuffer
 28137    36   381    24    36   661     0     111  cb
 28138    36   381    27    36   661     0      67  =
 28139    36   381    29    36   661     0     111  CharBuffer.wrap
 28140    36   381    44    36   661     0      59  (
 28141    36   381    45    36   661     0     111  ca
 28142    36   381    47    36   661     0      60  )
 28143    36   381    48    36   661     0     102  ;
 28144    36   382    13    36   661     0     111  CharBuffer
 28145    36   382    24    36   661     0     111  db
 28146    36   382    27    36   661     0      67  =
 28147    36   382    29    36   661     0     111  this.duplicate
 28148    36   382    43    36   661     0      59  (
 28149    36   382    44    36   661     0      60  )
 28150    36   382    45    36   661     0     102  ;
 28151    36   383    13    36   661     1     111  db.position
 28152    36   383    24    36   661     1      59  (
 28153    36   383    25    36   661     1     111  start
 28154    36   383    30    36   661     1      60  )
 28155    36   383    31    36   661     1     102  ;
 28156    36   384    13    36   661     1     111  db.limit
 28157    36   384    21    36   661     1      59  (
 28158    36   384    22    36   661     1     111  end
 28159    36   384    25    36   661     1      60  )
 28160    36   384    26    36   661     1     102  ;
 28161    36   385    13    36   661     1     111  cb.put
 28162    36   385    19    36   661     1      59  (
 28163    36   385    20    36   661     1     111  db
 28164    36   385    22    36   661     1      60  )
 28165    36   385    23    36   661     1     102  ;
 28166    36   386    13    36   661     0      19  return
 28167    36   386    20    36   661     0      15  new
 28168    36   386    24    36   661     0     111  String
 28169    36   386    30    36   661     0      59  (
 28170    36   386    31    36   661     0     111  ca
 28171    36   386    33    36   661     0      60  )
 28172    36   386    34    36   661     0     102  ;
 28173    36   387     9    36   661     0      64  }
 28174    36   387    11    36   661     0      34  catch
 28175    36   387    17    36   661     0      59  (
 28176    36   387    18    36   661     0     111  StringIndexOutOfBoundsException
 28177    36   387    50    36   661     0     111  x
 28178    36   387    51    36   661     0      60  )
 28179    36   387    53    36   661     0      63  {
 28180    36   388    13    36   661     0      20  throw
 28181    36   388    19    36   661     0      15  new
 28182    36   388    23    36   661     0     111  IndexOutOfBoundsException
 28183    36   388    48    36   661     0      59  (
 28184    36   388    49    36   661     0      60  )
 28185    36   388    50    36   661     0     102  ;
 28186    36   389     9    36   661     0      64  }
 28187    36   390     5    36   661     0      64  }
 28188    36   390     5    36   661     0    1590  ENDMETHOD
 28189    36   390     5    36   662     0    1591  STARTMETHOD
 28190    36   395     5    36   662     0      10  public
 28191    36   395    12    36   662     0     111  CharSequence
 28192    36   395    25    36   662     0     111  subSequence
 28193    36   395    36    36   662     0      59  (
 28194    36   395    37    36   662     0      36  int
 28195    36   395    41    36   662     0     111  start
 28196    36   395    46    36   662     0      66  ,
 28197    36   395    48    36   662     0      36  int
 28198    36   395    52    36   662     0     111  end
 28199    36   395    55    36   662     0      60  )
 28200    36   395    57    36   662     0      63  {
 28201    36   396     9    36   662     1      36  int
 28202    36   396    13    36   662     1     111  pos
 28203    36   396    17    36   662     1      67  =
 28204    36   396    19    36   662     1     111  position
 28205    36   396    27    36   662     1      59  (
 28206    36   396    28    36   662     1      60  )
 28207    36   396    29    36   662     1     102  ;
 28208    36   397     9    36   662     1      36  int
 28209    36   397    13    36   662     1     111  lim
 28210    36   397    17    36   662     1      67  =
 28211    36   397    19    36   662     1     111  limit
 28212    36   397    24    36   662     1      59  (
 28213    36   397    25    36   662     1      60  )
 28214    36   397    26    36   662     1     102  ;
 28215    36   398     9    36   662     0     111  assert
 28216    36   398    16    36   662     0      59  (
 28217    36   398    17    36   662     0     111  pos
 28218    36   398    21    36   662     0      92  <=
 28219    36   398    24    36   662     0     111  lim
 28220    36   398    27    36   662     0      60  )
 28221    36   398    28    36   662     0     102  ;
 28222    36   399     9    36   662     0     111  pos
 28223    36   399    13    36   662     0      67  =
 28224    36   399    15    36   662     0      59  (
 28225    36   399    16    36   662     0     111  pos
 28226    36   399    20    36   662     0      92  <=
 28227    36   399    23    36   662     0     111  lim
 28228    36   399    27    36   662     0      58  ?
 28229    36   399    29    36   662     0     111  pos
 28230    36   399    33    36   662     0      65  :
 28231    36   399    35    36   662     0     111  lim
 28232    36   399    38    36   662     0      60  )
 28233    36   399    39    36   662     0     102  ;
 28234    36   400     9    36   662     0      36  int
 28235    36   400    13    36   662     0     111  len
 28236    36   400    17    36   662     0      67  =
 28237    36   400    19    36   662     0     111  lim
 28238    36   400    23    36   662     0      77  -
 28239    36   400    25    36   662     0     111  pos
 28240    36   400    28    36   662     0     102  ;
 28241    36   402     9    36   662     0      31  if
 28242    36   402    12    36   662     0      59  (
 28243    36   402    13    36   662     0      59  (
 28244    36   402    14    36   662     0     111  start
 28245    36   402    20    36   662     0      93  <
 28246    36   402    22    36   662     0     112  0
 28247    36   402    23    36   662     0      60  )
 28248    36   402    25    36   662     0      98  ||
 28249    36   402    28    36   662     0      59  (
 28250    36   402    29    36   662     0     111  end
 28251    36   402    33    36   662     0      89  >
 28252    36   402    35    36   662     0     111  len
 28253    36   402    38    36   662     0      60  )
 28254    36   402    40    36   662     0      98  ||
 28255    36   402    43    36   662     0      59  (
 28256    36   402    44    36   662     0     111  start
 28257    36   402    50    36   662     0      89  >
 28258    36   402    52    36   662     0     111  end
 28259    36   402    55    36   662     0      60  )
 28260    36   402    56    36   662     0      60  )
 28261    36   403    13    36   662     0      20  throw
 28262    36   403    19    36   662     0      15  new
 28263    36   403    23    36   662     0     111  IndexOutOfBoundsException
 28264    36   403    48    36   662     0      59  (
 28265    36   403    49    36   662     0      60  )
 28266    36   403    50    36   662     0     102  ;
 28267    36   404     9    36   662     0      36  int
 28268    36   404    13    36   662     0     111  sublen
 28269    36   404    20    36   662     0      67  =
 28270    36   404    22    36   662     0     111  end
 28271    36   404    26    36   662     0      77  -
 28272    36   404    28    36   662     0     111  start
 28273    36   404    33    36   662     0     102  ;
 28274    36   405     9    36   662     0      36  int
 28275    36   405    13    36   662     0     111  off
 28276    36   405    17    36   662     0      67  =
 28277    36   405    19    36   662     0      59  (
 28278    36   405    20    36   662     0     111  pos
 28279    36   405    24    36   662     0      74  +
 28280    36   405    26    36   662     0     111  start
 28281    36   405    31    36   662     0      60  )
 28282    36   405    33    36   662     0      90  <<
 28283    36   405    36    36   662     0     112  1
 28284    36   405    37    36   662     0     102  ;
 28285    36   406     9    36   662     0     111  assert
 28286    36   406    16    36   662     0      59  (
 28287    36   406    17    36   662     0     111  off
 28288    36   406    21    36   662     0      88  >=
 28289    36   406    24    36   662     0     112  0
 28290    36   406    25    36   662     0      60  )
 28291    36   406    26    36   662     0     102  ;
 28292    36   407     9    36   662     0      19  return
 28293    36   407    16    36   662     0      15  new
 28294    36   407    20    36   662     0     111  DirectCharBufferU
 28295    36   407    37    36   662     0      59  (
 28296    36   407    38    36   662     0      44  this
 28297    36   407    42    36   662     0      66  ,
 28298    36   407    44    36   662     0      77  -
 28299    36   407    45    36   662     0     112  1
 28300    36   407    46    36   662     0      66  ,
 28301    36   407    48    36   662     0     112  0
 28302    36   407    49    36   662     0      66  ,
 28303    36   407    51    36   662     0     111  sublen
 28304    36   407    57    36   662     0      66  ,
 28305    36   407    59    36   662     0     111  sublen
 28306    36   407    65    36   662     0      66  ,
 28307    36   407    67    36   662     0     111  off
 28308    36   407    70    36   662     0      60  )
 28309    36   407    71    36   662     0     102  ;
 28310    36   408     5    36   662     0      64  }
 28311    36   408     5    36   662     0    1592  ENDMETHOD
 28312    36   408     5    36   663     0    1593  STARTMETHOD
 28313    36   416     5    36   663     0      10  public
 28314    36   416    12    36   663     0     111  ByteOrder
 28315    36   416    22    36   663     0     111  order
 28316    36   416    27    36   663     0      59  (
 28317    36   416    28    36   663     0      60  )
 28318    36   416    30    36   663     0      63  {
 28319    36   422     9    36   663     0      19  return
 28320    36   422    16    36   663     0      59  (
 28321    36   422    17    36   663     0      59  (
 28322    36   422    18    36   663     0     111  ByteOrder.nativeOrder
 28323    36   422    39    36   663     0      59  (
 28324    36   422    40    36   663     0      60  )
 28325    36   422    42    36   663     0      71  !=
 28326    36   422    45    36   663     0     111  ByteOrder.BIG_ENDIAN
 28327    36   422    65    36   663     0      60  )
 28328    36   423    17    36   663     0      58  ?
 28329    36   423    19    36   663     0     111  ByteOrder.LITTLE_ENDIAN
 28330    36   423    43    36   663     0      65  :
 28331    36   423    45    36   663     0     111  ByteOrder.BIG_ENDIAN
 28332    36   423    65    36   663     0      60  )
 28333    36   423    66    36   663     0     102  ;
 28334    36   425     5    36   663     0      64  }
 28335    36   425     5    36   663     0    1594  ENDMETHOD
 28336    36   452     1    36    -1     0      64  }
 28337    36   452     1    36    -1     1    1595  ENDCLASS
 28338    36   452     1    -1    -1     1    1596  ENDFILE C:\javasrc\java\nio\DirectCharBufferU.java
 28339    37     1     1    -1    -1     1    1597  STARTFILE C:\javasrc\java\nio\DirectDoubleBufferRS.java
 28340    37    28     1    -1    -1     0       5  package
 28341    37    28     9    -1    -1     0     111  java.nio
 28342    37    28    17    -1    -1     0     102  ;
 28343    37    30     1    -1    -1     1      49  import
 28344    37    30     8    -1    -1     1     111  sun.misc.Cleaner
 28345    37    30    24    -1    -1     1     102  ;
 28346    37    31     1    -1    -1     1      49  import
 28347    37    31     8    -1    -1     1     111  sun.misc.Unsafe
 28348    37    31    23    -1    -1     1     102  ;
 28349    37    32     1    -1    -1     1      49  import
 28350    37    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 28351    37    32    31    -1    -1     1     102  ;
 28352    37    33     1    -1    -1     1      49  import
 28353    37    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 28354    37    33    34    -1    -1     1     102  ;
 28355    37    36     1    37    -1     0    1598  STARTCLASS
 28356    37    36     1    37    -1     0      24  class
 28357    37    36     7    37    -1     0     111  DirectDoubleBufferRS
 28358    37    40     5    37    -1     0      38  extends
 28359    37    40    13    37    -1     0     111  DirectDoubleBufferS
 28360    37    42     5    37    -1     0      17  implements
 28361    37    42    16    37    -1     0     111  DirectBuffer
 28362    37    43     1    37    -1     0      63  {
 28363    37    43     1    37   664     0    1599  STARTMETHOD
 28364    37   164     5    37   664     0     111  DirectDoubleBufferRS
 28365    37   164    25    37   664     0      59  (
 28366    37   164    26    37   664     0     111  DirectBuffer
 28367    37   164    39    37   664     0     111  db
 28368    37   164    41    37   664     0      66  ,
 28369    37   165    32    37   664     0      36  int
 28370    37   165    36    37   664     0     111  mark
 28371    37   165    40    37   664     0      66  ,
 28372    37   165    42    37   664     0      36  int
 28373    37   165    46    37   664     0     111  pos
 28374    37   165    49    37   664     0      66  ,
 28375    37   165    51    37   664     0      36  int
 28376    37   165    55    37   664     0     111  lim
 28377    37   165    58    37   664     0      66  ,
 28378    37   165    60    37   664     0      36  int
 28379    37   165    64    37   664     0     111  cap
 28380    37   165    67    37   664     0      66  ,
 28381    37   166    32    37   664     0      36  int
 28382    37   166    36    37   664     0     111  off
 28383    37   166    39    37   664     0      60  )
 28384    37   167     5    37   664     0      63  {
 28385    37   176     9    37   664     0      27  super
 28386    37   176    14    37   664     0      59  (
 28387    37   176    15    37   664     0     111  db
 28388    37   176    17    37   664     0      66  ,
 28389    37   176    19    37   664     0     111  mark
 28390    37   176    23    37   664     0      66  ,
 28391    37   176    25    37   664     0     111  pos
 28392    37   176    28    37   664     0      66  ,
 28393    37   176    30    37   664     0     111  lim
 28394    37   176    33    37   664     0      66  ,
 28395    37   176    35    37   664     0     111  cap
 28396    37   176    38    37   664     0      66  ,
 28397    37   176    40    37   664     0     111  off
 28398    37   176    43    37   664     0      60  )
 28399    37   176    44    37   664     0     102  ;
 28400    37   178     5    37   664     0      64  }
 28401    37   178     5    37   664     0    1600  ENDMETHOD
 28402    37   178     5    37   665     0    1601  STARTMETHOD
 28403    37   180     5    37   665     0      10  public
 28404    37   180    12    37   665     0     111  DoubleBuffer
 28405    37   180    25    37   665     0     111  slice
 28406    37   180    30    37   665     0      59  (
 28407    37   180    31    37   665     0      60  )
 28408    37   180    33    37   665     0      63  {
 28409    37   181     9    37   665     1      36  int
 28410    37   181    13    37   665     1     111  pos
 28411    37   181    17    37   665     1      67  =
 28412    37   181    19    37   665     1     111  this.position
 28413    37   181    32    37   665     1      59  (
 28414    37   181    33    37   665     1      60  )
 28415    37   181    34    37   665     1     102  ;
 28416    37   182     9    37   665     1      36  int
 28417    37   182    13    37   665     1     111  lim
 28418    37   182    17    37   665     1      67  =
 28419    37   182    19    37   665     1     111  this.limit
 28420    37   182    29    37   665     1      59  (
 28421    37   182    30    37   665     1      60  )
 28422    37   182    31    37   665     1     102  ;
 28423    37   183     9    37   665     0     111  assert
 28424    37   183    16    37   665     0      59  (
 28425    37   183    17    37   665     0     111  pos
 28426    37   183    21    37   665     0      92  <=
 28427    37   183    24    37   665     0     111  lim
 28428    37   183    27    37   665     0      60  )
 28429    37   183    28    37   665     0     102  ;
 28430    37   184     9    37   665     0      36  int
 28431    37   184    13    37   665     0     111  rem
 28432    37   184    17    37   665     0      67  =
 28433    37   184    19    37   665     0      59  (
 28434    37   184    20    37   665     0     111  pos
 28435    37   184    24    37   665     0      92  <=
 28436    37   184    27    37   665     0     111  lim
 28437    37   184    31    37   665     0      58  ?
 28438    37   184    33    37   665     0     111  lim
 28439    37   184    37    37   665     0      77  -
 28440    37   184    39    37   665     0     111  pos
 28441    37   184    43    37   665     0      65  :
 28442    37   184    45    37   665     0     112  0
 28443    37   184    46    37   665     0      60  )
 28444    37   184    47    37   665     0     102  ;
 28445    37   185     9    37   665     0      36  int
 28446    37   185    13    37   665     0     111  off
 28447    37   185    17    37   665     0      67  =
 28448    37   185    19    37   665     0      59  (
 28449    37   185    20    37   665     0     111  pos
 28450    37   185    24    37   665     0      90  <<
 28451    37   185    27    37   665     0     112  3
 28452    37   185    28    37   665     0      60  )
 28453    37   185    29    37   665     0     102  ;
 28454    37   186     9    37   665     0     111  assert
 28455    37   186    16    37   665     0      59  (
 28456    37   186    17    37   665     0     111  off
 28457    37   186    21    37   665     0      88  >=
 28458    37   186    24    37   665     0     112  0
 28459    37   186    25    37   665     0      60  )
 28460    37   186    26    37   665     0     102  ;
 28461    37   187     9    37   665     0      19  return
 28462    37   187    16    37   665     0      15  new
 28463    37   187    20    37   665     0     111  DirectDoubleBufferRS
 28464    37   187    40    37   665     0      59  (
 28465    37   187    41    37   665     0      44  this
 28466    37   187    45    37   665     0      66  ,
 28467    37   187    47    37   665     0      77  -
 28468    37   187    48    37   665     0     112  1
 28469    37   187    49    37   665     0      66  ,
 28470    37   187    51    37   665     0     112  0
 28471    37   187    52    37   665     0      66  ,
 28472    37   187    54    37   665     0     111  rem
 28473    37   187    57    37   665     0      66  ,
 28474    37   187    59    37   665     0     111  rem
 28475    37   187    62    37   665     0      66  ,
 28476    37   187    64    37   665     0     111  off
 28477    37   187    67    37   665     0      60  )
 28478    37   187    68    37   665     0     102  ;
 28479    37   188     5    37   665     0      64  }
 28480    37   188     5    37   665     0    1602  ENDMETHOD
 28481    37   188     5    37   666     0    1603  STARTMETHOD
 28482    37   190     5    37   666     0      10  public
 28483    37   190    12    37   666     0     111  DoubleBuffer
 28484    37   190    25    37   666     0     111  duplicate
 28485    37   190    34    37   666     0      59  (
 28486    37   190    35    37   666     0      60  )
 28487    37   190    37    37   666     0      63  {
 28488    37   191     9    37   666     0      19  return
 28489    37   191    16    37   666     0      15  new
 28490    37   191    20    37   666     0     111  DirectDoubleBufferRS
 28491    37   191    40    37   666     0      59  (
 28492    37   191    41    37   666     0      44  this
 28493    37   191    45    37   666     0      66  ,
 28494    37   192    47    37   666     1     111  this.markValue
 28495    37   192    61    37   666     1      59  (
 28496    37   192    62    37   666     1      60  )
 28497    37   192    63    37   666     1      66  ,
 28498    37   193    47    37   666     1     111  this.position
 28499    37   193    60    37   666     1      59  (
 28500    37   193    61    37   666     1      60  )
 28501    37   193    62    37   666     1      66  ,
 28502    37   194    47    37   666     1     111  this.limit
 28503    37   194    57    37   666     1      59  (
 28504    37   194    58    37   666     1      60  )
 28505    37   194    59    37   666     1      66  ,
 28506    37   195    47    37   666     1     111  this.capacity
 28507    37   195    60    37   666     1      59  (
 28508    37   195    61    37   666     1      60  )
 28509    37   195    62    37   666     1      66  ,
 28510    37   196    47    37   666     0     112  0
 28511    37   196    48    37   666     0      60  )
 28512    37   196    49    37   666     0     102  ;
 28513    37   197     5    37   666     0      64  }
 28514    37   197     5    37   666     0    1604  ENDMETHOD
 28515    37   197     5    37   667     0    1605  STARTMETHOD
 28516    37   199     5    37   667     0      10  public
 28517    37   199    12    37   667     0     111  DoubleBuffer
 28518    37   199    25    37   667     0     111  asReadOnlyBuffer
 28519    37   199    41    37   667     0      59  (
 28520    37   199    42    37   667     0      60  )
 28521    37   199    44    37   667     0      63  {
 28522    37   208     9    37   667     0      19  return
 28523    37   208    16    37   667     0     111  duplicate
 28524    37   208    25    37   667     0      59  (
 28525    37   208    26    37   667     0      60  )
 28526    37   208    27    37   667     0     102  ;
 28527    37   210     5    37   667     0      64  }
 28528    37   210     5    37   667     0    1606  ENDMETHOD
 28529    37   210     5    37   668     0    1607  STARTMETHOD
 28530    37   261     5    37   668     0      10  public
 28531    37   261    12    37   668     0     111  DoubleBuffer
 28532    37   261    25    37   668     0     111  put
 28533    37   261    28    37   668     0      59  (
 28534    37   261    29    37   668     0      32  double
 28535    37   261    36    37   668     0     111  x
 28536    37   261    37    37   668     0      60  )
 28537    37   261    39    37   668     0      63  {
 28538    37   266     9    37   668     0      20  throw
 28539    37   266    15    37   668     0      15  new
 28540    37   266    19    37   668     0     111  ReadOnlyBufferException
 28541    37   266    42    37   668     0      59  (
 28542    37   266    43    37   668     0      60  )
 28543    37   266    44    37   668     0     102  ;
 28544    37   268     5    37   668     0      64  }
 28545    37   268     5    37   668     0    1608  ENDMETHOD
 28546    37   268     5    37   669     0    1609  STARTMETHOD
 28547    37   270     5    37   669     0      10  public
 28548    37   270    12    37   669     0     111  DoubleBuffer
 28549    37   270    25    37   669     0     111  put
 28550    37   270    28    37   669     0      59  (
 28551    37   270    29    37   669     0      36  int
 28552    37   270    33    37   669     0     111  i
 28553    37   270    34    37   669     0      66  ,
 28554    37   270    36    37   669     0      32  double
 28555    37   270    43    37   669     0     111  x
 28556    37   270    44    37   669     0      60  )
 28557    37   270    46    37   669     0      63  {
 28558    37   275     9    37   669     0      20  throw
 28559    37   275    15    37   669     0      15  new
 28560    37   275    19    37   669     0     111  ReadOnlyBufferException
 28561    37   275    42    37   669     0      59  (
 28562    37   275    43    37   669     0      60  )
 28563    37   275    44    37   669     0     102  ;
 28564    37   277     5    37   669     0      64  }
 28565    37   277     5    37   669     0    1610  ENDMETHOD
 28566    37   277     5    37   670     0    1611  STARTMETHOD
 28567    37   279     5    37   670     0      10  public
 28568    37   279    12    37   670     0     111  DoubleBuffer
 28569    37   279    25    37   670     0     111  put
 28570    37   279    28    37   670     0      59  (
 28571    37   279    29    37   670     0     111  DoubleBuffer
 28572    37   279    42    37   670     0     111  src
 28573    37   279    45    37   670     0      60  )
 28574    37   279    47    37   670     0      63  {
 28575    37   316     9    37   670     0      20  throw
 28576    37   316    15    37   670     0      15  new
 28577    37   316    19    37   670     0     111  ReadOnlyBufferException
 28578    37   316    42    37   670     0      59  (
 28579    37   316    43    37   670     0      60  )
 28580    37   316    44    37   670     0     102  ;
 28581    37   318     5    37   670     0      64  }
 28582    37   318     5    37   670     0    1612  ENDMETHOD
 28583    37   318     5    37   671     0    1613  STARTMETHOD
 28584    37   320     5    37   671     0      10  public
 28585    37   320    12    37   671     0     111  DoubleBuffer
 28586    37   320    25    37   671     0     111  put
 28587    37   320    28    37   671     0      59  (
 28588    37   320    29    37   671     0      32  double
 28589    37   320    35    37   671     0      61  [
 28590    37   320    36    37   671     0      62  ]
 28591    37   320    38    37   671     0     111  src
 28592    37   320    41    37   671     0      66  ,
 28593    37   320    43    37   671     0      36  int
 28594    37   320    47    37   671     0     111  offset
 28595    37   320    53    37   671     0      66  ,
 28596    37   320    55    37   671     0      36  int
 28597    37   320    59    37   671     0     111  length
 28598    37   320    65    37   671     0      60  )
 28599    37   320    67    37   671     0      63  {
 28600    37   343     9    37   671     0      20  throw
 28601    37   343    15    37   671     0      15  new
 28602    37   343    19    37   671     0     111  ReadOnlyBufferException
 28603    37   343    42    37   671     0      59  (
 28604    37   343    43    37   671     0      60  )
 28605    37   343    44    37   671     0     102  ;
 28606    37   345     5    37   671     0      64  }
 28607    37   345     5    37   671     0    1614  ENDMETHOD
 28608    37   345     5    37   672     0    1615  STARTMETHOD
 28609    37   347     5    37   672     0      10  public
 28610    37   347    12    37   672     0     111  DoubleBuffer
 28611    37   347    25    37   672     0     111  compact
 28612    37   347    32    37   672     0      59  (
 28613    37   347    33    37   672     0      60  )
 28614    37   347    35    37   672     0      63  {
 28615    37   360     9    37   672     0      20  throw
 28616    37   360    15    37   672     0      15  new
 28617    37   360    19    37   672     0     111  ReadOnlyBufferException
 28618    37   360    42    37   672     0      59  (
 28619    37   360    43    37   672     0      60  )
 28620    37   360    44    37   672     1     102  ;
 28621    37   362     5    37   672     1      64  }
 28622    37   362     5    37   672     0    1616  ENDMETHOD
 28623    37   362     5    37   673     0    1617  STARTMETHOD
 28624    37   364     5    37   673     0      10  public
 28625    37   364    12    37   673     0      39  boolean
 28626    37   364    20    37   673     0     111  isDirect
 28627    37   364    28    37   673     0      59  (
 28628    37   364    29    37   673     0      60  )
 28629    37   364    31    37   673     0      63  {
 28630    37   365     9    37   673     0      19  return
 28631    37   365    16    37   673     0      52  true
 28632    37   365    20    37   673     1     102  ;
 28633    37   366     5    37   673     1      64  }
 28634    37   366     5    37   673     0    1618  ENDMETHOD
 28635    37   366     5    37   674     0    1619  STARTMETHOD
 28636    37   368     5    37   674     0      10  public
 28637    37   368    12    37   674     0      39  boolean
 28638    37   368    20    37   674     0     111  isReadOnly
 28639    37   368    30    37   674     0      59  (
 28640    37   368    31    37   674     0      60  )
 28641    37   368    33    37   674     0      63  {
 28642    37   369     9    37   674     0      19  return
 28643    37   369    16    37   674     0      52  true
 28644    37   369    20    37   674     1     102  ;
 28645    37   370     5    37   674     1      64  }
 28646    37   370     5    37   674     0    1620  ENDMETHOD
 28647    37   370     5    37   675     0    1621  STARTMETHOD
 28648    37   416     5    37   675     0      10  public
 28649    37   416    12    37   675     0     111  ByteOrder
 28650    37   416    22    37   675     0     111  order
 28651    37   416    27    37   675     0      59  (
 28652    37   416    28    37   675     0      60  )
 28653    37   416    30    37   675     0      63  {
 28654    37   418     9    37   675     0      19  return
 28655    37   418    16    37   675     0      59  (
 28656    37   418    17    37   675     0      59  (
 28657    37   418    18    37   675     0     111  ByteOrder.nativeOrder
 28658    37   418    39    37   675     0      59  (
 28659    37   418    40    37   675     0      60  )
 28660    37   418    42    37   675     0      68  ==
 28661    37   418    45    37   675     0     111  ByteOrder.BIG_ENDIAN
 28662    37   418    65    37   675     0      60  )
 28663    37   419    17    37   675     0      58  ?
 28664    37   419    19    37   675     0     111  ByteOrder.LITTLE_ENDIAN
 28665    37   419    43    37   675     0      65  :
 28666    37   419    45    37   675     0     111  ByteOrder.BIG_ENDIAN
 28667    37   419    65    37   675     0      60  )
 28668    37   419    66    37   675     0     102  ;
 28669    37   425     5    37   675     0      64  }
 28670    37   425     5    37   675     0    1622  ENDMETHOD
 28671    37   452     1    37    -1     0      64  }
 28672    37   452     1    37    -1     1    1623  ENDCLASS
 28673    37   452     1    -1    -1     1    1624  ENDFILE C:\javasrc\java\nio\DirectDoubleBufferRS.java
 28674    38     1     1    -1    -1     1    1625  STARTFILE C:\javasrc\java\nio\DirectDoubleBufferRU.java
 28675    38    28     1    -1    -1     0       5  package
 28676    38    28     9    -1    -1     0     111  java.nio
 28677    38    28    17    -1    -1     0     102  ;
 28678    38    30     1    -1    -1     1      49  import
 28679    38    30     8    -1    -1     1     111  sun.misc.Cleaner
 28680    38    30    24    -1    -1     1     102  ;
 28681    38    31     1    -1    -1     1      49  import
 28682    38    31     8    -1    -1     1     111  sun.misc.Unsafe
 28683    38    31    23    -1    -1     1     102  ;
 28684    38    32     1    -1    -1     1      49  import
 28685    38    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 28686    38    32    31    -1    -1     1     102  ;
 28687    38    33     1    -1    -1     1      49  import
 28688    38    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 28689    38    33    34    -1    -1     1     102  ;
 28690    38    36     1    38    -1     0    1626  STARTCLASS
 28691    38    36     1    38    -1     0      24  class
 28692    38    36     7    38    -1     0     111  DirectDoubleBufferRU
 28693    38    40     5    38    -1     0      38  extends
 28694    38    40    13    38    -1     0     111  DirectDoubleBufferU
 28695    38    42     5    38    -1     0      17  implements
 28696    38    42    16    38    -1     0     111  DirectBuffer
 28697    38    43     1    38    -1     0      63  {
 28698    38    43     1    38   676     0    1627  STARTMETHOD
 28699    38   164     5    38   676     0     111  DirectDoubleBufferRU
 28700    38   164    25    38   676     0      59  (
 28701    38   164    26    38   676     0     111  DirectBuffer
 28702    38   164    39    38   676     0     111  db
 28703    38   164    41    38   676     0      66  ,
 28704    38   165    32    38   676     0      36  int
 28705    38   165    36    38   676     0     111  mark
 28706    38   165    40    38   676     0      66  ,
 28707    38   165    42    38   676     0      36  int
 28708    38   165    46    38   676     0     111  pos
 28709    38   165    49    38   676     0      66  ,
 28710    38   165    51    38   676     0      36  int
 28711    38   165    55    38   676     0     111  lim
 28712    38   165    58    38   676     0      66  ,
 28713    38   165    60    38   676     0      36  int
 28714    38   165    64    38   676     0     111  cap
 28715    38   165    67    38   676     0      66  ,
 28716    38   166    32    38   676     0      36  int
 28717    38   166    36    38   676     0     111  off
 28718    38   166    39    38   676     0      60  )
 28719    38   167     5    38   676     0      63  {
 28720    38   176     9    38   676     0      27  super
 28721    38   176    14    38   676     0      59  (
 28722    38   176    15    38   676     0     111  db
 28723    38   176    17    38   676     0      66  ,
 28724    38   176    19    38   676     0     111  mark
 28725    38   176    23    38   676     0      66  ,
 28726    38   176    25    38   676     0     111  pos
 28727    38   176    28    38   676     0      66  ,
 28728    38   176    30    38   676     0     111  lim
 28729    38   176    33    38   676     0      66  ,
 28730    38   176    35    38   676     0     111  cap
 28731    38   176    38    38   676     0      66  ,
 28732    38   176    40    38   676     0     111  off
 28733    38   176    43    38   676     0      60  )
 28734    38   176    44    38   676     0     102  ;
 28735    38   178     5    38   676     0      64  }
 28736    38   178     5    38   676     0    1628  ENDMETHOD
 28737    38   178     5    38   677     0    1629  STARTMETHOD
 28738    38   180     5    38   677     0      10  public
 28739    38   180    12    38   677     0     111  DoubleBuffer
 28740    38   180    25    38   677     0     111  slice
 28741    38   180    30    38   677     0      59  (
 28742    38   180    31    38   677     0      60  )
 28743    38   180    33    38   677     0      63  {
 28744    38   181     9    38   677     1      36  int
 28745    38   181    13    38   677     1     111  pos
 28746    38   181    17    38   677     1      67  =
 28747    38   181    19    38   677     1     111  this.position
 28748    38   181    32    38   677     1      59  (
 28749    38   181    33    38   677     1      60  )
 28750    38   181    34    38   677     1     102  ;
 28751    38   182     9    38   677     1      36  int
 28752    38   182    13    38   677     1     111  lim
 28753    38   182    17    38   677     1      67  =
 28754    38   182    19    38   677     1     111  this.limit
 28755    38   182    29    38   677     1      59  (
 28756    38   182    30    38   677     1      60  )
 28757    38   182    31    38   677     1     102  ;
 28758    38   183     9    38   677     0     111  assert
 28759    38   183    16    38   677     0      59  (
 28760    38   183    17    38   677     0     111  pos
 28761    38   183    21    38   677     0      92  <=
 28762    38   183    24    38   677     0     111  lim
 28763    38   183    27    38   677     0      60  )
 28764    38   183    28    38   677     0     102  ;
 28765    38   184     9    38   677     0      36  int
 28766    38   184    13    38   677     0     111  rem
 28767    38   184    17    38   677     0      67  =
 28768    38   184    19    38   677     0      59  (
 28769    38   184    20    38   677     0     111  pos
 28770    38   184    24    38   677     0      92  <=
 28771    38   184    27    38   677     0     111  lim
 28772    38   184    31    38   677     0      58  ?
 28773    38   184    33    38   677     0     111  lim
 28774    38   184    37    38   677     0      77  -
 28775    38   184    39    38   677     0     111  pos
 28776    38   184    43    38   677     0      65  :
 28777    38   184    45    38   677     0     112  0
 28778    38   184    46    38   677     0      60  )
 28779    38   184    47    38   677     0     102  ;
 28780    38   185     9    38   677     0      36  int
 28781    38   185    13    38   677     0     111  off
 28782    38   185    17    38   677     0      67  =
 28783    38   185    19    38   677     0      59  (
 28784    38   185    20    38   677     0     111  pos
 28785    38   185    24    38   677     0      90  <<
 28786    38   185    27    38   677     0     112  3
 28787    38   185    28    38   677     0      60  )
 28788    38   185    29    38   677     0     102  ;
 28789    38   186     9    38   677     0     111  assert
 28790    38   186    16    38   677     0      59  (
 28791    38   186    17    38   677     0     111  off
 28792    38   186    21    38   677     0      88  >=
 28793    38   186    24    38   677     0     112  0
 28794    38   186    25    38   677     0      60  )
 28795    38   186    26    38   677     0     102  ;
 28796    38   187     9    38   677     0      19  return
 28797    38   187    16    38   677     0      15  new
 28798    38   187    20    38   677     0     111  DirectDoubleBufferRU
 28799    38   187    40    38   677     0      59  (
 28800    38   187    41    38   677     0      44  this
 28801    38   187    45    38   677     0      66  ,
 28802    38   187    47    38   677     0      77  -
 28803    38   187    48    38   677     0     112  1
 28804    38   187    49    38   677     0      66  ,
 28805    38   187    51    38   677     0     112  0
 28806    38   187    52    38   677     0      66  ,
 28807    38   187    54    38   677     0     111  rem
 28808    38   187    57    38   677     0      66  ,
 28809    38   187    59    38   677     0     111  rem
 28810    38   187    62    38   677     0      66  ,
 28811    38   187    64    38   677     0     111  off
 28812    38   187    67    38   677     0      60  )
 28813    38   187    68    38   677     0     102  ;
 28814    38   188     5    38   677     0      64  }
 28815    38   188     5    38   677     0    1630  ENDMETHOD
 28816    38   188     5    38   678     0    1631  STARTMETHOD
 28817    38   190     5    38   678     0      10  public
 28818    38   190    12    38   678     0     111  DoubleBuffer
 28819    38   190    25    38   678     0     111  duplicate
 28820    38   190    34    38   678     0      59  (
 28821    38   190    35    38   678     0      60  )
 28822    38   190    37    38   678     0      63  {
 28823    38   191     9    38   678     0      19  return
 28824    38   191    16    38   678     0      15  new
 28825    38   191    20    38   678     0     111  DirectDoubleBufferRU
 28826    38   191    40    38   678     0      59  (
 28827    38   191    41    38   678     0      44  this
 28828    38   191    45    38   678     0      66  ,
 28829    38   192    47    38   678     1     111  this.markValue
 28830    38   192    61    38   678     1      59  (
 28831    38   192    62    38   678     1      60  )
 28832    38   192    63    38   678     1      66  ,
 28833    38   193    47    38   678     1     111  this.position
 28834    38   193    60    38   678     1      59  (
 28835    38   193    61    38   678     1      60  )
 28836    38   193    62    38   678     1      66  ,
 28837    38   194    47    38   678     1     111  this.limit
 28838    38   194    57    38   678     1      59  (
 28839    38   194    58    38   678     1      60  )
 28840    38   194    59    38   678     1      66  ,
 28841    38   195    47    38   678     1     111  this.capacity
 28842    38   195    60    38   678     1      59  (
 28843    38   195    61    38   678     1      60  )
 28844    38   195    62    38   678     1      66  ,
 28845    38   196    47    38   678     0     112  0
 28846    38   196    48    38   678     0      60  )
 28847    38   196    49    38   678     0     102  ;
 28848    38   197     5    38   678     0      64  }
 28849    38   197     5    38   678     0    1632  ENDMETHOD
 28850    38   197     5    38   679     0    1633  STARTMETHOD
 28851    38   199     5    38   679     0      10  public
 28852    38   199    12    38   679     0     111  DoubleBuffer
 28853    38   199    25    38   679     0     111  asReadOnlyBuffer
 28854    38   199    41    38   679     0      59  (
 28855    38   199    42    38   679     0      60  )
 28856    38   199    44    38   679     0      63  {
 28857    38   208     9    38   679     0      19  return
 28858    38   208    16    38   679     0     111  duplicate
 28859    38   208    25    38   679     0      59  (
 28860    38   208    26    38   679     0      60  )
 28861    38   208    27    38   679     0     102  ;
 28862    38   210     5    38   679     0      64  }
 28863    38   210     5    38   679     0    1634  ENDMETHOD
 28864    38   210     5    38   680     0    1635  STARTMETHOD
 28865    38   261     5    38   680     0      10  public
 28866    38   261    12    38   680     0     111  DoubleBuffer
 28867    38   261    25    38   680     0     111  put
 28868    38   261    28    38   680     0      59  (
 28869    38   261    29    38   680     0      32  double
 28870    38   261    36    38   680     0     111  x
 28871    38   261    37    38   680     0      60  )
 28872    38   261    39    38   680     0      63  {
 28873    38   266     9    38   680     0      20  throw
 28874    38   266    15    38   680     0      15  new
 28875    38   266    19    38   680     0     111  ReadOnlyBufferException
 28876    38   266    42    38   680     0      59  (
 28877    38   266    43    38   680     0      60  )
 28878    38   266    44    38   680     0     102  ;
 28879    38   268     5    38   680     0      64  }
 28880    38   268     5    38   680     0    1636  ENDMETHOD
 28881    38   268     5    38   681     0    1637  STARTMETHOD
 28882    38   270     5    38   681     0      10  public
 28883    38   270    12    38   681     0     111  DoubleBuffer
 28884    38   270    25    38   681     0     111  put
 28885    38   270    28    38   681     0      59  (
 28886    38   270    29    38   681     0      36  int
 28887    38   270    33    38   681     0     111  i
 28888    38   270    34    38   681     0      66  ,
 28889    38   270    36    38   681     0      32  double
 28890    38   270    43    38   681     0     111  x
 28891    38   270    44    38   681     0      60  )
 28892    38   270    46    38   681     0      63  {
 28893    38   275     9    38   681     0      20  throw
 28894    38   275    15    38   681     0      15  new
 28895    38   275    19    38   681     0     111  ReadOnlyBufferException
 28896    38   275    42    38   681     0      59  (
 28897    38   275    43    38   681     0      60  )
 28898    38   275    44    38   681     0     102  ;
 28899    38   277     5    38   681     0      64  }
 28900    38   277     5    38   681     0    1638  ENDMETHOD
 28901    38   277     5    38   682     0    1639  STARTMETHOD
 28902    38   279     5    38   682     0      10  public
 28903    38   279    12    38   682     0     111  DoubleBuffer
 28904    38   279    25    38   682     0     111  put
 28905    38   279    28    38   682     0      59  (
 28906    38   279    29    38   682     0     111  DoubleBuffer
 28907    38   279    42    38   682     0     111  src
 28908    38   279    45    38   682     0      60  )
 28909    38   279    47    38   682     0      63  {
 28910    38   316     9    38   682     0      20  throw
 28911    38   316    15    38   682     0      15  new
 28912    38   316    19    38   682     0     111  ReadOnlyBufferException
 28913    38   316    42    38   682     0      59  (
 28914    38   316    43    38   682     0      60  )
 28915    38   316    44    38   682     0     102  ;
 28916    38   318     5    38   682     0      64  }
 28917    38   318     5    38   682     0    1640  ENDMETHOD
 28918    38   318     5    38   683     0    1641  STARTMETHOD
 28919    38   320     5    38   683     0      10  public
 28920    38   320    12    38   683     0     111  DoubleBuffer
 28921    38   320    25    38   683     0     111  put
 28922    38   320    28    38   683     0      59  (
 28923    38   320    29    38   683     0      32  double
 28924    38   320    35    38   683     0      61  [
 28925    38   320    36    38   683     0      62  ]
 28926    38   320    38    38   683     0     111  src
 28927    38   320    41    38   683     0      66  ,
 28928    38   320    43    38   683     0      36  int
 28929    38   320    47    38   683     0     111  offset
 28930    38   320    53    38   683     0      66  ,
 28931    38   320    55    38   683     0      36  int
 28932    38   320    59    38   683     0     111  length
 28933    38   320    65    38   683     0      60  )
 28934    38   320    67    38   683     0      63  {
 28935    38   343     9    38   683     0      20  throw
 28936    38   343    15    38   683     0      15  new
 28937    38   343    19    38   683     0     111  ReadOnlyBufferException
 28938    38   343    42    38   683     0      59  (
 28939    38   343    43    38   683     0      60  )
 28940    38   343    44    38   683     0     102  ;
 28941    38   345     5    38   683     0      64  }
 28942    38   345     5    38   683     0    1642  ENDMETHOD
 28943    38   345     5    38   684     0    1643  STARTMETHOD
 28944    38   347     5    38   684     0      10  public
 28945    38   347    12    38   684     0     111  DoubleBuffer
 28946    38   347    25    38   684     0     111  compact
 28947    38   347    32    38   684     0      59  (
 28948    38   347    33    38   684     0      60  )
 28949    38   347    35    38   684     0      63  {
 28950    38   360     9    38   684     0      20  throw
 28951    38   360    15    38   684     0      15  new
 28952    38   360    19    38   684     0     111  ReadOnlyBufferException
 28953    38   360    42    38   684     0      59  (
 28954    38   360    43    38   684     0      60  )
 28955    38   360    44    38   684     1     102  ;
 28956    38   362     5    38   684     1      64  }
 28957    38   362     5    38   684     0    1644  ENDMETHOD
 28958    38   362     5    38   685     0    1645  STARTMETHOD
 28959    38   364     5    38   685     0      10  public
 28960    38   364    12    38   685     0      39  boolean
 28961    38   364    20    38   685     0     111  isDirect
 28962    38   364    28    38   685     0      59  (
 28963    38   364    29    38   685     0      60  )
 28964    38   364    31    38   685     0      63  {
 28965    38   365     9    38   685     0      19  return
 28966    38   365    16    38   685     0      52  true
 28967    38   365    20    38   685     1     102  ;
 28968    38   366     5    38   685     1      64  }
 28969    38   366     5    38   685     0    1646  ENDMETHOD
 28970    38   366     5    38   686     0    1647  STARTMETHOD
 28971    38   368     5    38   686     0      10  public
 28972    38   368    12    38   686     0      39  boolean
 28973    38   368    20    38   686     0     111  isReadOnly
 28974    38   368    30    38   686     0      59  (
 28975    38   368    31    38   686     0      60  )
 28976    38   368    33    38   686     0      63  {
 28977    38   369     9    38   686     0      19  return
 28978    38   369    16    38   686     0      52  true
 28979    38   369    20    38   686     1     102  ;
 28980    38   370     5    38   686     1      64  }
 28981    38   370     5    38   686     0    1648  ENDMETHOD
 28982    38   370     5    38   687     0    1649  STARTMETHOD
 28983    38   416     5    38   687     0      10  public
 28984    38   416    12    38   687     0     111  ByteOrder
 28985    38   416    22    38   687     0     111  order
 28986    38   416    27    38   687     0      59  (
 28987    38   416    28    38   687     0      60  )
 28988    38   416    30    38   687     0      63  {
 28989    38   422     9    38   687     0      19  return
 28990    38   422    16    38   687     0      59  (
 28991    38   422    17    38   687     0      59  (
 28992    38   422    18    38   687     0     111  ByteOrder.nativeOrder
 28993    38   422    39    38   687     0      59  (
 28994    38   422    40    38   687     0      60  )
 28995    38   422    42    38   687     0      71  !=
 28996    38   422    45    38   687     0     111  ByteOrder.BIG_ENDIAN
 28997    38   422    65    38   687     0      60  )
 28998    38   423    17    38   687     0      58  ?
 28999    38   423    19    38   687     0     111  ByteOrder.LITTLE_ENDIAN
 29000    38   423    43    38   687     0      65  :
 29001    38   423    45    38   687     0     111  ByteOrder.BIG_ENDIAN
 29002    38   423    65    38   687     0      60  )
 29003    38   423    66    38   687     0     102  ;
 29004    38   425     5    38   687     0      64  }
 29005    38   425     5    38   687     0    1650  ENDMETHOD
 29006    38   452     1    38    -1     0      64  }
 29007    38   452     1    38    -1     1    1651  ENDCLASS
 29008    38   452     1    -1    -1     1    1652  ENDFILE C:\javasrc\java\nio\DirectDoubleBufferRU.java
 29009    39     1     1    -1    -1     1    1653  STARTFILE C:\javasrc\java\nio\DirectDoubleBufferS.java
 29010    39    28     1    -1    -1     0       5  package
 29011    39    28     9    -1    -1     0     111  java.nio
 29012    39    28    17    -1    -1     0     102  ;
 29013    39    30     1    -1    -1     1      49  import
 29014    39    30     8    -1    -1     1     111  sun.misc.Cleaner
 29015    39    30    24    -1    -1     1     102  ;
 29016    39    31     1    -1    -1     1      49  import
 29017    39    31     8    -1    -1     1     111  sun.misc.Unsafe
 29018    39    31    23    -1    -1     1     102  ;
 29019    39    32     1    -1    -1     1      49  import
 29020    39    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 29021    39    32    31    -1    -1     1     102  ;
 29022    39    33     1    -1    -1     1      49  import
 29023    39    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 29024    39    33    34    -1    -1     1     102  ;
 29025    39    36     1    39    -1     0    1654  STARTCLASS
 29026    39    36     1    39    -1     0      24  class
 29027    39    36     7    39    -1     0     111  DirectDoubleBufferS
 29028    39    38     5    39    -1     0      38  extends
 29029    39    38    13    39    -1     0     111  DoubleBuffer
 29030    39    42     5    39    -1     0      17  implements
 29031    39    42    16    39    -1     0     111  DirectBuffer
 29032    39    43     1    39    -1     0      63  {
 29033    39    48     5    39    -1     0      23  protected
 29034    39    48    15    39    -1     0      45  static
 29035    39    48    22    39    -1     0       6  final
 29036    39    48    28    39    -1     0     111  Unsafe
 29037    39    48    35    39    -1     0     111  unsafe
 29038    39    48    42    39    -1     0      67  =
 29039    39    48    44    39    -1     0     111  Bits.unsafe
 29040    39    48    55    39    -1     0      59  (
 29041    39    48    56    39    -1     0      60  )
 29042    39    48    57    39    -1     0     102  ;
 29043    39    51     5    39    -1     0      23  protected
 29044    39    51    15    39    -1     0      45  static
 29045    39    51    22    39    -1     0       6  final
 29046    39    51    28    39    -1     0      39  boolean
 29047    39    51    36    39    -1     0     111  unaligned
 29048    39    51    46    39    -1     0      67  =
 29049    39    51    48    39    -1     0     111  Bits.unaligned
 29050    39    51    62    39    -1     0      59  (
 29051    39    51    63    39    -1     0      60  )
 29052    39    51    64    39    -1     0     102  ;
 29053    39    59     5    39    -1     0      23  protected
 29054    39    59    15    39    -1     0     111  Object
 29055    39    59    22    39    -1     0     111  viewedBuffer
 29056    39    59    35    39    -1     0      67  =
 29057    39    59    37    39    -1     0      21  null
 29058    39    59    41    39    -1     0     102  ;
 29059    39    59    41    39   688     0    1655  STARTMETHOD
 29060    39    61     5    39   688     0      10  public
 29061    39    61    12    39   688     0     111  Object
 29062    39    61    19    39   688     0     111  viewedBuffer
 29063    39    61    31    39   688     0      59  (
 29064    39    61    32    39   688     0      60  )
 29065    39    61    34    39   688     0      63  {
 29066    39    62     9    39   688     0      19  return
 29067    39    62    16    39   688     0     111  viewedBuffer
 29068    39    62    28    39   688     0     102  ;
 29069    39    63     5    39   688     0      64  }
 29070    39    63     5    39   688     0    1656  ENDMETHOD
 29071    39    63     5    39   689     0    1657  STARTMETHOD
 29072    39   100     5    39   689     0      10  public
 29073    39   100    12    39   689     0     111  Cleaner
 29074    39   100    20    39   689     0     111  cleaner
 29075    39   100    27    39   689     0      59  (
 29076    39   100    28    39   689     0      60  )
 29077    39   100    30    39   689     0      63  {
 29078    39   100    32    39   689     0      19  return
 29079    39   100    39    39   689     0      21  null
 29080    39   100    43    39   689     0     102  ;
 29081    39   100    45    39   689     0      64  }
 29082    39   100    45    39   689     0    1658  ENDMETHOD
 29083    39   100    45    39   690     0    1659  STARTMETHOD
 29084    39   164     5    39   690     0     111  DirectDoubleBufferS
 29085    39   164    24    39   690     0      59  (
 29086    39   164    25    39   690     0     111  DirectBuffer
 29087    39   164    38    39   690     0     111  db
 29088    39   164    40    39   690     0      66  ,
 29089    39   165    32    39   690     0      36  int
 29090    39   165    36    39   690     0     111  mark
 29091    39   165    40    39   690     0      66  ,
 29092    39   165    42    39   690     0      36  int
 29093    39   165    46    39   690     0     111  pos
 29094    39   165    49    39   690     0      66  ,
 29095    39   165    51    39   690     0      36  int
 29096    39   165    55    39   690     0     111  lim
 29097    39   165    58    39   690     0      66  ,
 29098    39   165    60    39   690     0      36  int
 29099    39   165    64    39   690     0     111  cap
 29100    39   165    67    39   690     0      66  ,
 29101    39   166    32    39   690     0      36  int
 29102    39   166    36    39   690     0     111  off
 29103    39   166    39    39   690     0      60  )
 29104    39   167     5    39   690     0      63  {
 29105    39   169     9    39   690     0      27  super
 29106    39   169    14    39   690     0      59  (
 29107    39   169    15    39   690     0     111  mark
 29108    39   169    19    39   690     0      66  ,
 29109    39   169    21    39   690     0     111  pos
 29110    39   169    24    39   690     0      66  ,
 29111    39   169    26    39   690     0     111  lim
 29112    39   169    29    39   690     0      66  ,
 29113    39   169    31    39   690     0     111  cap
 29114    39   169    34    39   690     0      60  )
 29115    39   169    35    39   690     0     102  ;
 29116    39   170     9    39   690     0     111  address
 29117    39   170    17    39   690     0      67  =
 29118    39   170    19    39   690     0     111  db.address
 29119    39   170    29    39   690     0      59  (
 29120    39   170    30    39   690     0      60  )
 29121    39   170    32    39   690     0      74  +
 29122    39   170    34    39   690     0     111  off
 29123    39   170    37    39   690     0     102  ;
 29124    39   171     9    39   690     0     111  viewedBuffer
 29125    39   171    22    39   690     0      67  =
 29126    39   171    24    39   690     0     111  db
 29127    39   171    26    39   690     0     102  ;
 29128    39   178     5    39   690     0      64  }
 29129    39   178     5    39   690     0    1660  ENDMETHOD
 29130    39   178     5    39   691     0    1661  STARTMETHOD
 29131    39   180     5    39   691     0      10  public
 29132    39   180    12    39   691     0     111  DoubleBuffer
 29133    39   180    25    39   691     0     111  slice
 29134    39   180    30    39   691     0      59  (
 29135    39   180    31    39   691     0      60  )
 29136    39   180    33    39   691     0      63  {
 29137    39   181     9    39   691     1      36  int
 29138    39   181    13    39   691     1     111  pos
 29139    39   181    17    39   691     1      67  =
 29140    39   181    19    39   691     1     111  this.position
 29141    39   181    32    39   691     1      59  (
 29142    39   181    33    39   691     1      60  )
 29143    39   181    34    39   691     1     102  ;
 29144    39   182     9    39   691     1      36  int
 29145    39   182    13    39   691     1     111  lim
 29146    39   182    17    39   691     1      67  =
 29147    39   182    19    39   691     1     111  this.limit
 29148    39   182    29    39   691     1      59  (
 29149    39   182    30    39   691     1      60  )
 29150    39   182    31    39   691     1     102  ;
 29151    39   183     9    39   691     0     111  assert
 29152    39   183    16    39   691     0      59  (
 29153    39   183    17    39   691     0     111  pos
 29154    39   183    21    39   691     0      92  <=
 29155    39   183    24    39   691     0     111  lim
 29156    39   183    27    39   691     0      60  )
 29157    39   183    28    39   691     0     102  ;
 29158    39   184     9    39   691     0      36  int
 29159    39   184    13    39   691     0     111  rem
 29160    39   184    17    39   691     0      67  =
 29161    39   184    19    39   691     0      59  (
 29162    39   184    20    39   691     0     111  pos
 29163    39   184    24    39   691     0      92  <=
 29164    39   184    27    39   691     0     111  lim
 29165    39   184    31    39   691     0      58  ?
 29166    39   184    33    39   691     0     111  lim
 29167    39   184    37    39   691     0      77  -
 29168    39   184    39    39   691     0     111  pos
 29169    39   184    43    39   691     0      65  :
 29170    39   184    45    39   691     0     112  0
 29171    39   184    46    39   691     0      60  )
 29172    39   184    47    39   691     0     102  ;
 29173    39   185     9    39   691     0      36  int
 29174    39   185    13    39   691     0     111  off
 29175    39   185    17    39   691     0      67  =
 29176    39   185    19    39   691     0      59  (
 29177    39   185    20    39   691     0     111  pos
 29178    39   185    24    39   691     0      90  <<
 29179    39   185    27    39   691     0     112  3
 29180    39   185    28    39   691     0      60  )
 29181    39   185    29    39   691     0     102  ;
 29182    39   186     9    39   691     0     111  assert
 29183    39   186    16    39   691     0      59  (
 29184    39   186    17    39   691     0     111  off
 29185    39   186    21    39   691     0      88  >=
 29186    39   186    24    39   691     0     112  0
 29187    39   186    25    39   691     0      60  )
 29188    39   186    26    39   691     0     102  ;
 29189    39   187     9    39   691     0      19  return
 29190    39   187    16    39   691     0      15  new
 29191    39   187    20    39   691     0     111  DirectDoubleBufferS
 29192    39   187    39    39   691     0      59  (
 29193    39   187    40    39   691     0      44  this
 29194    39   187    44    39   691     0      66  ,
 29195    39   187    46    39   691     0      77  -
 29196    39   187    47    39   691     0     112  1
 29197    39   187    48    39   691     0      66  ,
 29198    39   187    50    39   691     0     112  0
 29199    39   187    51    39   691     0      66  ,
 29200    39   187    53    39   691     0     111  rem
 29201    39   187    56    39   691     0      66  ,
 29202    39   187    58    39   691     0     111  rem
 29203    39   187    61    39   691     0      66  ,
 29204    39   187    63    39   691     0     111  off
 29205    39   187    66    39   691     1      60  )
 29206    39   187    67    39   691     1     102  ;
 29207    39   188     5    39   691     1      64  }
 29208    39   188     5    39   691     0    1662  ENDMETHOD
 29209    39   188     5    39   692     0    1663  STARTMETHOD
 29210    39   190     5    39   692     0      10  public
 29211    39   190    12    39   692     0     111  DoubleBuffer
 29212    39   190    25    39   692     0     111  duplicate
 29213    39   190    34    39   692     0      59  (
 29214    39   190    35    39   692     0      60  )
 29215    39   190    37    39   692     0      63  {
 29216    39   191     9    39   692     0      19  return
 29217    39   191    16    39   692     0      15  new
 29218    39   191    20    39   692     0     111  DirectDoubleBufferS
 29219    39   191    39    39   692     0      59  (
 29220    39   191    40    39   692     0      44  this
 29221    39   191    44    39   692     0      66  ,
 29222    39   192    47    39   692     1     111  this.markValue
 29223    39   192    61    39   692     1      59  (
 29224    39   192    62    39   692     1      60  )
 29225    39   192    63    39   692     1      66  ,
 29226    39   193    47    39   692     1     111  this.position
 29227    39   193    60    39   692     1      59  (
 29228    39   193    61    39   692     1      60  )
 29229    39   193    62    39   692     1      66  ,
 29230    39   194    47    39   692     1     111  this.limit
 29231    39   194    57    39   692     1      59  (
 29232    39   194    58    39   692     1      60  )
 29233    39   194    59    39   692     1      66  ,
 29234    39   195    47    39   692     1     111  this.capacity
 29235    39   195    60    39   692     1      59  (
 29236    39   195    61    39   692     1      60  )
 29237    39   195    62    39   692     1      66  ,
 29238    39   196    47    39   692     0     112  0
 29239    39   196    48    39   692     1      60  )
 29240    39   196    49    39   692     1     102  ;
 29241    39   197     5    39   692     1      64  }
 29242    39   197     5    39   692     0    1664  ENDMETHOD
 29243    39   197     5    39   693     0    1665  STARTMETHOD
 29244    39   199     5    39   693     0      10  public
 29245    39   199    12    39   693     0     111  DoubleBuffer
 29246    39   199    25    39   693     0     111  asReadOnlyBuffer
 29247    39   199    41    39   693     0      59  (
 29248    39   199    42    39   693     0      60  )
 29249    39   199    44    39   693     0      63  {
 29250    39   201     9    39   693     0      19  return
 29251    39   201    16    39   693     0      15  new
 29252    39   201    20    39   693     0     111  DirectDoubleBufferRS
 29253    39   201    40    39   693     0      59  (
 29254    39   201    41    39   693     0      44  this
 29255    39   201    45    39   693     0      66  ,
 29256    39   202    44    39   693     1     111  this.markValue
 29257    39   202    58    39   693     1      59  (
 29258    39   202    59    39   693     1      60  )
 29259    39   202    60    39   693     1      66  ,
 29260    39   203    44    39   693     1     111  this.position
 29261    39   203    57    39   693     1      59  (
 29262    39   203    58    39   693     1      60  )
 29263    39   203    59    39   693     1      66  ,
 29264    39   204    44    39   693     1     111  this.limit
 29265    39   204    54    39   693     1      59  (
 29266    39   204    55    39   693     1      60  )
 29267    39   204    56    39   693     1      66  ,
 29268    39   205    44    39   693     1     111  this.capacity
 29269    39   205    57    39   693     1      59  (
 29270    39   205    58    39   693     1      60  )
 29271    39   205    59    39   693     1      66  ,
 29272    39   206    44    39   693     0     112  0
 29273    39   206    45    39   693     1      60  )
 29274    39   206    46    39   693     1     102  ;
 29275    39   210     5    39   693     1      64  }
 29276    39   210     5    39   693     0    1666  ENDMETHOD
 29277    39   210     5    39   694     0    1667  STARTMETHOD
 29278    39   214     5    39   694     0      10  public
 29279    39   214    12    39   694     0      53  long
 29280    39   214    17    39   694     0     111  address
 29281    39   214    24    39   694     0      59  (
 29282    39   214    25    39   694     0      60  )
 29283    39   214    27    39   694     0      63  {
 29284    39   215     9    39   694     0      19  return
 29285    39   215    16    39   694     0     111  address
 29286    39   215    23    39   694     0     102  ;
 29287    39   216     5    39   694     0      64  }
 29288    39   216     5    39   694     0    1668  ENDMETHOD
 29289    39   216     5    39   695     0    1669  STARTMETHOD
 29290    39   218     5    39   695     0      41  private
 29291    39   218    13    39   695     0      53  long
 29292    39   218    18    39   695     0     111  ix
 29293    39   218    20    39   695     0      59  (
 29294    39   218    21    39   695     0      36  int
 29295    39   218    25    39   695     0     111  i
 29296    39   218    26    39   695     0      60  )
 29297    39   218    28    39   695     0      63  {
 29298    39   219     9    39   695     0      19  return
 29299    39   219    16    39   695     0     111  address
 29300    39   219    24    39   695     0      74  +
 29301    39   219    26    39   695     0      59  (
 29302    39   219    27    39   695     0     111  i
 29303    39   219    29    39   695     0      90  <<
 29304    39   219    32    39   695     0     112  3
 29305    39   219    33    39   695     0      60  )
 29306    39   219    34    39   695     0     102  ;
 29307    39   220     5    39   695     0      64  }
 29308    39   220     5    39   695     0    1670  ENDMETHOD
 29309    39   220     5    39   696     0    1671  STARTMETHOD
 29310    39   222     5    39   696     0      10  public
 29311    39   222    12    39   696     0      32  double
 29312    39   222    19    39   696     0     111  get
 29313    39   222    22    39   696     0      59  (
 29314    39   222    23    39   696     0      60  )
 29315    39   222    25    39   696     0      63  {
 29316    39   223     9    39   696     0      19  return
 29317    39   223    16    39   696     0     111  Double.longBitsToDouble
 29318    39   223    39    39   696     0      59  (
 29319    39   223    40    39   696     0     111  Bits.swap
 29320    39   223    49    39   696     0      59  (
 29321    39   223    50    39   696     0     111  unsafe.getLong
 29322    39   223    64    39   696     0      59  (
 29323    39   223    65    39   696     0     111  ix
 29324    39   223    67    39   696     0      59  (
 29325    39   223    68    39   696     0     111  nextGetIndex
 29326    39   223    80    39   696     0      59  (
 29327    39   223    81    39   696     0      60  )
 29328    39   223    82    39   696     0      60  )
 29329    39   223    83    39   696     0      60  )
 29330    39   223    84    39   696     0      60  )
 29331    39   223    85    39   696     0      60  )
 29332    39   223    86    39   696     0     102  ;
 29333    39   224     5    39   696     0      64  }
 29334    39   224     5    39   696     0    1672  ENDMETHOD
 29335    39   224     5    39   697     0    1673  STARTMETHOD
 29336    39   226     5    39   697     0      10  public
 29337    39   226    12    39   697     0      32  double
 29338    39   226    19    39   697     0     111  get
 29339    39   226    22    39   697     0      59  (
 29340    39   226    23    39   697     0      36  int
 29341    39   226    27    39   697     0     111  i
 29342    39   226    28    39   697     0      60  )
 29343    39   226    30    39   697     0      63  {
 29344    39   227     9    39   697     0      19  return
 29345    39   227    16    39   697     0     111  Double.longBitsToDouble
 29346    39   227    39    39   697     0      59  (
 29347    39   227    40    39   697     0     111  Bits.swap
 29348    39   227    49    39   697     0      59  (
 29349    39   227    50    39   697     0     111  unsafe.getLong
 29350    39   227    64    39   697     0      59  (
 29351    39   227    65    39   697     0     111  ix
 29352    39   227    67    39   697     0      59  (
 29353    39   227    68    39   697     0     111  checkIndex
 29354    39   227    78    39   697     0      59  (
 29355    39   227    79    39   697     0     111  i
 29356    39   227    80    39   697     0      60  )
 29357    39   227    81    39   697     0      60  )
 29358    39   227    82    39   697     0      60  )
 29359    39   227    83    39   697     0      60  )
 29360    39   227    84    39   697     0      60  )
 29361    39   227    85    39   697     0     102  ;
 29362    39   228     5    39   697     0      64  }
 29363    39   228     5    39   697     0    1674  ENDMETHOD
 29364    39   228     5    39   698     0    1675  STARTMETHOD
 29365    39   230     5    39   698     0      10  public
 29366    39   230    12    39   698     0     111  DoubleBuffer
 29367    39   230    25    39   698     0     111  get
 29368    39   230    28    39   698     0      59  (
 29369    39   230    29    39   698     0      32  double
 29370    39   230    35    39   698     0      61  [
 29371    39   230    36    39   698     0      62  ]
 29372    39   230    38    39   698     0     111  dst
 29373    39   230    41    39   698     0      66  ,
 29374    39   230    43    39   698     0      36  int
 29375    39   230    47    39   698     0     111  offset
 29376    39   230    53    39   698     0      66  ,
 29377    39   230    55    39   698     0      36  int
 29378    39   230    59    39   698     0     111  length
 29379    39   230    65    39   698     0      60  )
 29380    39   230    67    39   698     0      63  {
 29381    39   232     9    39   698     0      31  if
 29382    39   232    12    39   698     0      59  (
 29383    39   232    13    39   698     0      59  (
 29384    39   232    14    39   698     0     111  length
 29385    39   232    21    39   698     0      90  <<
 29386    39   232    24    39   698     0     112  3
 29387    39   232    25    39   698     0      60  )
 29388    39   232    27    39   698     0      89  >
 29389    39   232    29    39   698     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 29390    39   232    61    39   698     0      60  )
 29391    39   232    63    39   698     0      63  {
 29392    39   233    13    39   698     0     111  checkBounds
 29393    39   233    24    39   698     0      59  (
 29394    39   233    25    39   698     0     111  offset
 29395    39   233    31    39   698     0      66  ,
 29396    39   233    33    39   698     0     111  length
 29397    39   233    39    39   698     0      66  ,
 29398    39   233    41    39   698     0     111  dst.length
 29399    39   233    51    39   698     0      60  )
 29400    39   233    52    39   698     0     102  ;
 29401    39   234    13    39   698     1      36  int
 29402    39   234    17    39   698     1     111  pos
 29403    39   234    21    39   698     1      67  =
 29404    39   234    23    39   698     1     111  position
 29405    39   234    31    39   698     1      59  (
 29406    39   234    32    39   698     1      60  )
 29407    39   234    33    39   698     1     102  ;
 29408    39   235    13    39   698     1      36  int
 29409    39   235    17    39   698     1     111  lim
 29410    39   235    21    39   698     1      67  =
 29411    39   235    23    39   698     1     111  limit
 29412    39   235    28    39   698     1      59  (
 29413    39   235    29    39   698     1      60  )
 29414    39   235    30    39   698     1     102  ;
 29415    39   236    13    39   698     0     111  assert
 29416    39   236    20    39   698     0      59  (
 29417    39   236    21    39   698     0     111  pos
 29418    39   236    25    39   698     0      92  <=
 29419    39   236    28    39   698     0     111  lim
 29420    39   236    31    39   698     0      60  )
 29421    39   236    32    39   698     0     102  ;
 29422    39   237    13    39   698     0      36  int
 29423    39   237    17    39   698     0     111  rem
 29424    39   237    21    39   698     0      67  =
 29425    39   237    23    39   698     0      59  (
 29426    39   237    24    39   698     0     111  pos
 29427    39   237    28    39   698     0      92  <=
 29428    39   237    31    39   698     0     111  lim
 29429    39   237    35    39   698     0      58  ?
 29430    39   237    37    39   698     0     111  lim
 29431    39   237    41    39   698     0      77  -
 29432    39   237    43    39   698     0     111  pos
 29433    39   237    47    39   698     0      65  :
 29434    39   237    49    39   698     0     112  0
 29435    39   237    50    39   698     0      60  )
 29436    39   237    51    39   698     0     102  ;
 29437    39   238    13    39   698     0      31  if
 29438    39   238    16    39   698     0      59  (
 29439    39   238    17    39   698     0     111  length
 29440    39   238    24    39   698     0      89  >
 29441    39   238    26    39   698     0     111  rem
 29442    39   238    29    39   698     0      60  )
 29443    39   239    17    39   698     0      20  throw
 29444    39   239    23    39   698     0      15  new
 29445    39   239    27    39   698     0     111  BufferUnderflowException
 29446    39   239    51    39   698     0      59  (
 29447    39   239    52    39   698     0      60  )
 29448    39   239    53    39   698     0     102  ;
 29449    39   241    13    39   698     0      31  if
 29450    39   241    16    39   698     0      59  (
 29451    39   241    17    39   698     0     111  order
 29452    39   241    22    39   698     0      59  (
 29453    39   241    23    39   698     0      60  )
 29454    39   241    25    39   698     0      71  !=
 29455    39   241    28    39   698     0     111  ByteOrder.nativeOrder
 29456    39   241    49    39   698     0      59  (
 29457    39   241    50    39   698     0      60  )
 29458    39   241    51    39   698     0      60  )
 29459    39   242    17    39   698     0     111  Bits.copyToLongArray
 29460    39   242    37    39   698     0      59  (
 29461    39   242    38    39   698     0     111  ix
 29462    39   242    40    39   698     0      59  (
 29463    39   242    41    39   698     0     111  pos
 29464    39   242    44    39   698     0      60  )
 29465    39   242    45    39   698     0      66  ,
 29466    39   242    47    39   698     0     111  dst
 29467    39   242    50    39   698     0      66  ,
 29468    39   243    43    39   698     0     111  offset
 29469    39   243    50    39   698     0      90  <<
 29470    39   243    53    39   698     0     112  3
 29471    39   243    54    39   698     0      66  ,
 29472    39   244    43    39   698     0     111  length
 29473    39   244    50    39   698     0      90  <<
 29474    39   244    53    39   698     0     112  3
 29475    39   244    54    39   698     0      60  )
 29476    39   244    55    39   698     0     102  ;
 29477    39   245    13    39   698     0      48  else
 29478    39   246    17    39   698     0     111  Bits.copyToByteArray
 29479    39   246    37    39   698     0      59  (
 29480    39   246    38    39   698     0     111  ix
 29481    39   246    40    39   698     0      59  (
 29482    39   246    41    39   698     0     111  pos
 29483    39   246    44    39   698     0      60  )
 29484    39   246    45    39   698     0      66  ,
 29485    39   246    47    39   698     0     111  dst
 29486    39   246    50    39   698     0      66  ,
 29487    39   247    38    39   698     0     111  offset
 29488    39   247    45    39   698     0      90  <<
 29489    39   247    48    39   698     0     112  3
 29490    39   247    49    39   698     0      66  ,
 29491    39   248    38    39   698     0     111  length
 29492    39   248    45    39   698     0      90  <<
 29493    39   248    48    39   698     0     112  3
 29494    39   248    49    39   698     0      60  )
 29495    39   248    50    39   698     0     102  ;
 29496    39   249    13    39   698     0     111  position
 29497    39   249    21    39   698     0      59  (
 29498    39   249    22    39   698     0     111  pos
 29499    39   249    26    39   698     0      74  +
 29500    39   249    28    39   698     0     111  length
 29501    39   249    34    39   698     0      60  )
 29502    39   249    35    39   698     0     102  ;
 29503    39   250     9    39   698     0      64  }
 29504    39   250    11    39   698     0      48  else
 29505    39   250    16    39   698     0      63  {
 29506    39   251    13    39   698     0     111  super.get
 29507    39   251    22    39   698     0      59  (
 29508    39   251    23    39   698     0     111  dst
 29509    39   251    26    39   698     0      66  ,
 29510    39   251    28    39   698     0     111  offset
 29511    39   251    34    39   698     0      66  ,
 29512    39   251    36    39   698     0     111  length
 29513    39   251    42    39   698     0      60  )
 29514    39   251    43    39   698     0     102  ;
 29515    39   252     9    39   698     0      64  }
 29516    39   253     9    39   698     0      19  return
 29517    39   253    16    39   698     0      44  this
 29518    39   253    20    39   698     0     102  ;
 29519    39   257     5    39   698     0      64  }
 29520    39   257     5    39   698     0    1676  ENDMETHOD
 29521    39   257     5    39   699     0    1677  STARTMETHOD
 29522    39   261     5    39   699     0      10  public
 29523    39   261    12    39   699     0     111  DoubleBuffer
 29524    39   261    25    39   699     0     111  put
 29525    39   261    28    39   699     0      59  (
 29526    39   261    29    39   699     0      32  double
 29527    39   261    36    39   699     0     111  x
 29528    39   261    37    39   699     0      60  )
 29529    39   261    39    39   699     0      63  {
 29530    39   263     9    39   699     0     111  unsafe.putLong
 29531    39   263    23    39   699     0      59  (
 29532    39   263    24    39   699     0     111  ix
 29533    39   263    26    39   699     0      59  (
 29534    39   263    27    39   699     0     111  nextPutIndex
 29535    39   263    39    39   699     0      59  (
 29536    39   263    40    39   699     0      60  )
 29537    39   263    41    39   699     0      60  )
 29538    39   263    42    39   699     0      66  ,
 29539    39   263    44    39   699     0     111  Bits.swap
 29540    39   263    53    39   699     0      59  (
 29541    39   263    54    39   699     0     111  Double.doubleToRawLongBits
 29542    39   263    80    39   699     0      59  (
 29543    39   263    81    39   699     0     111  x
 29544    39   263    82    39   699     0      60  )
 29545    39   263    83    39   699     0      60  )
 29546    39   263    84    39   699     0      60  )
 29547    39   263    85    39   699     0     102  ;
 29548    39   264     9    39   699     0      19  return
 29549    39   264    16    39   699     0      44  this
 29550    39   264    20    39   699     0     102  ;
 29551    39   268     5    39   699     0      64  }
 29552    39   268     5    39   699     0    1678  ENDMETHOD
 29553    39   268     5    39   700     0    1679  STARTMETHOD
 29554    39   270     5    39   700     0      10  public
 29555    39   270    12    39   700     0     111  DoubleBuffer
 29556    39   270    25    39   700     0     111  put
 29557    39   270    28    39   700     0      59  (
 29558    39   270    29    39   700     0      36  int
 29559    39   270    33    39   700     0     111  i
 29560    39   270    34    39   700     0      66  ,
 29561    39   270    36    39   700     0      32  double
 29562    39   270    43    39   700     0     111  x
 29563    39   270    44    39   700     0      60  )
 29564    39   270    46    39   700     0      63  {
 29565    39   272     9    39   700     0     111  unsafe.putLong
 29566    39   272    23    39   700     0      59  (
 29567    39   272    24    39   700     0     111  ix
 29568    39   272    26    39   700     0      59  (
 29569    39   272    27    39   700     0     111  checkIndex
 29570    39   272    37    39   700     0      59  (
 29571    39   272    38    39   700     0     111  i
 29572    39   272    39    39   700     0      60  )
 29573    39   272    40    39   700     0      60  )
 29574    39   272    41    39   700     0      66  ,
 29575    39   272    43    39   700     0     111  Bits.swap
 29576    39   272    52    39   700     0      59  (
 29577    39   272    53    39   700     0     111  Double.doubleToRawLongBits
 29578    39   272    79    39   700     0      59  (
 29579    39   272    80    39   700     0     111  x
 29580    39   272    81    39   700     0      60  )
 29581    39   272    82    39   700     0      60  )
 29582    39   272    83    39   700     0      60  )
 29583    39   272    84    39   700     0     102  ;
 29584    39   273     9    39   700     0      19  return
 29585    39   273    16    39   700     0      44  this
 29586    39   273    20    39   700     0     102  ;
 29587    39   277     5    39   700     0      64  }
 29588    39   277     5    39   700     0    1680  ENDMETHOD
 29589    39   277     5    39   701     0    1681  STARTMETHOD
 29590    39   279     5    39   701     0      10  public
 29591    39   279    12    39   701     0     111  DoubleBuffer
 29592    39   279    25    39   701     0     111  put
 29593    39   279    28    39   701     0      59  (
 29594    39   279    29    39   701     0     111  DoubleBuffer
 29595    39   279    42    39   701     0     111  src
 29596    39   279    45    39   701     0      60  )
 29597    39   279    47    39   701     0      63  {
 29598    39   281     9    39   701     0      31  if
 29599    39   281    12    39   701     0      59  (
 29600    39   281    13    39   701     0     111  src
 29601    39   281    17    39   701     0      16  instanceof
 29602    39   281    28    39   701     0     111  DirectDoubleBufferS
 29603    39   281    47    39   701     0      60  )
 29604    39   281    49    39   701     0      63  {
 29605    39   282    13    39   701     0      31  if
 29606    39   282    16    39   701     0      59  (
 29607    39   282    17    39   701     0     111  src
 29608    39   282    21    39   701     0      68  ==
 29609    39   282    24    39   701     0      44  this
 29610    39   282    28    39   701     0      60  )
 29611    39   283    17    39   701     0      20  throw
 29612    39   283    23    39   701     0      15  new
 29613    39   283    27    39   701     0     111  IllegalArgumentException
 29614    39   283    51    39   701     0      59  (
 29615    39   283    52    39   701     0      60  )
 29616    39   283    53    39   701     0     102  ;
 29617    39   284    13    39   701     0     111  DirectDoubleBufferS
 29618    39   284    33    39   701     0     111  sb
 29619    39   284    36    39   701     0      67  =
 29620    39   284    38    39   701     0      59  (
 29621    39   284    39    39   701     0     111  DirectDoubleBufferS
 29622    39   284    58    39   701     0      60  )
 29623    39   284    59    39   701     0     111  src
 29624    39   284    62    39   701     0     102  ;
 29625    39   286    13    39   701     1      36  int
 29626    39   286    17    39   701     1     111  spos
 29627    39   286    22    39   701     1      67  =
 29628    39   286    24    39   701     1     111  sb.position
 29629    39   286    35    39   701     1      59  (
 29630    39   286    36    39   701     1      60  )
 29631    39   286    37    39   701     1     102  ;
 29632    39   287    13    39   701     1      36  int
 29633    39   287    17    39   701     1     111  slim
 29634    39   287    22    39   701     1      67  =
 29635    39   287    24    39   701     1     111  sb.limit
 29636    39   287    32    39   701     1      59  (
 29637    39   287    33    39   701     1      60  )
 29638    39   287    34    39   701     1     102  ;
 29639    39   288    13    39   701     0     111  assert
 29640    39   288    20    39   701     0      59  (
 29641    39   288    21    39   701     0     111  spos
 29642    39   288    26    39   701     0      92  <=
 29643    39   288    29    39   701     0     111  slim
 29644    39   288    33    39   701     0      60  )
 29645    39   288    34    39   701     0     102  ;
 29646    39   289    13    39   701     0      36  int
 29647    39   289    17    39   701     0     111  srem
 29648    39   289    22    39   701     0      67  =
 29649    39   289    24    39   701     0      59  (
 29650    39   289    25    39   701     0     111  spos
 29651    39   289    30    39   701     0      92  <=
 29652    39   289    33    39   701     0     111  slim
 29653    39   289    38    39   701     0      58  ?
 29654    39   289    40    39   701     0     111  slim
 29655    39   289    45    39   701     0      77  -
 29656    39   289    47    39   701     0     111  spos
 29657    39   289    52    39   701     0      65  :
 29658    39   289    54    39   701     0     112  0
 29659    39   289    55    39   701     0      60  )
 29660    39   289    56    39   701     0     102  ;
 29661    39   291    13    39   701     1      36  int
 29662    39   291    17    39   701     1     111  pos
 29663    39   291    21    39   701     1      67  =
 29664    39   291    23    39   701     1     111  position
 29665    39   291    31    39   701     1      59  (
 29666    39   291    32    39   701     1      60  )
 29667    39   291    33    39   701     1     102  ;
 29668    39   292    13    39   701     1      36  int
 29669    39   292    17    39   701     1     111  lim
 29670    39   292    21    39   701     1      67  =
 29671    39   292    23    39   701     1     111  limit
 29672    39   292    28    39   701     1      59  (
 29673    39   292    29    39   701     1      60  )
 29674    39   292    30    39   701     1     102  ;
 29675    39   293    13    39   701     0     111  assert
 29676    39   293    20    39   701     0      59  (
 29677    39   293    21    39   701     0     111  pos
 29678    39   293    25    39   701     0      92  <=
 29679    39   293    28    39   701     0     111  lim
 29680    39   293    31    39   701     0      60  )
 29681    39   293    32    39   701     0     102  ;
 29682    39   294    13    39   701     0      36  int
 29683    39   294    17    39   701     0     111  rem
 29684    39   294    21    39   701     0      67  =
 29685    39   294    23    39   701     0      59  (
 29686    39   294    24    39   701     0     111  pos
 29687    39   294    28    39   701     0      92  <=
 29688    39   294    31    39   701     0     111  lim
 29689    39   294    35    39   701     0      58  ?
 29690    39   294    37    39   701     0     111  lim
 29691    39   294    41    39   701     0      77  -
 29692    39   294    43    39   701     0     111  pos
 29693    39   294    47    39   701     0      65  :
 29694    39   294    49    39   701     0     112  0
 29695    39   294    50    39   701     0      60  )
 29696    39   294    51    39   701     0     102  ;
 29697    39   296    13    39   701     0      31  if
 29698    39   296    16    39   701     0      59  (
 29699    39   296    17    39   701     0     111  srem
 29700    39   296    22    39   701     0      89  >
 29701    39   296    24    39   701     0     111  rem
 29702    39   296    27    39   701     0      60  )
 29703    39   297    17    39   701     0      20  throw
 29704    39   297    23    39   701     0      15  new
 29705    39   297    27    39   701     0     111  BufferOverflowException
 29706    39   297    50    39   701     0      59  (
 29707    39   297    51    39   701     0      60  )
 29708    39   297    52    39   701     0     102  ;
 29709    39   298    13    39   701     0     111  unsafe.copyMemory
 29710    39   298    30    39   701     0      59  (
 29711    39   298    31    39   701     0     111  sb.ix
 29712    39   298    36    39   701     0      59  (
 29713    39   298    37    39   701     0     111  spos
 29714    39   298    41    39   701     0      60  )
 29715    39   298    42    39   701     0      66  ,
 29716    39   298    44    39   701     0     111  ix
 29717    39   298    46    39   701     0      59  (
 29718    39   298    47    39   701     0     111  pos
 29719    39   298    50    39   701     0      60  )
 29720    39   298    51    39   701     0      66  ,
 29721    39   298    53    39   701     0     111  srem
 29722    39   298    58    39   701     0      90  <<
 29723    39   298    61    39   701     0     112  3
 29724    39   298    62    39   701     0      60  )
 29725    39   298    63    39   701     0     102  ;
 29726    39   299    13    39   701     1     111  sb.position
 29727    39   299    24    39   701     1      59  (
 29728    39   299    25    39   701     1     111  spos
 29729    39   299    30    39   701     1      74  +
 29730    39   299    32    39   701     1     111  srem
 29731    39   299    36    39   701     1      60  )
 29732    39   299    37    39   701     1     102  ;
 29733    39   300    13    39   701     1     111  position
 29734    39   300    21    39   701     1      59  (
 29735    39   300    22    39   701     1     111  pos
 29736    39   300    26    39   701     1      74  +
 29737    39   300    28    39   701     1     111  srem
 29738    39   300    32    39   701     1      60  )
 29739    39   300    33    39   701     1     102  ;
 29740    39   301     9    39   701     0      64  }
 29741    39   301    11    39   701     0      48  else
 29742    39   301    16    39   701     0      31  if
 29743    39   301    19    39   701     0      59  (
 29744    39   301    20    39   701     0     111  src.hb
 29745    39   301    27    39   701     0      71  !=
 29746    39   301    30    39   701     0      21  null
 29747    39   301    34    39   701     0      60  )
 29748    39   301    36    39   701     0      63  {
 29749    39   303    13    39   701     1      36  int
 29750    39   303    17    39   701     1     111  spos
 29751    39   303    22    39   701     1      67  =
 29752    39   303    24    39   701     1     111  src.position
 29753    39   303    36    39   701     1      59  (
 29754    39   303    37    39   701     1      60  )
 29755    39   303    38    39   701     1     102  ;
 29756    39   304    13    39   701     1      36  int
 29757    39   304    17    39   701     1     111  slim
 29758    39   304    22    39   701     1      67  =
 29759    39   304    24    39   701     1     111  src.limit
 29760    39   304    33    39   701     1      59  (
 29761    39   304    34    39   701     1      60  )
 29762    39   304    35    39   701     1     102  ;
 29763    39   305    13    39   701     0     111  assert
 29764    39   305    20    39   701     0      59  (
 29765    39   305    21    39   701     0     111  spos
 29766    39   305    26    39   701     0      92  <=
 29767    39   305    29    39   701     0     111  slim
 29768    39   305    33    39   701     0      60  )
 29769    39   305    34    39   701     0     102  ;
 29770    39   306    13    39   701     0      36  int
 29771    39   306    17    39   701     0     111  srem
 29772    39   306    22    39   701     0      67  =
 29773    39   306    24    39   701     0      59  (
 29774    39   306    25    39   701     0     111  spos
 29775    39   306    30    39   701     0      92  <=
 29776    39   306    33    39   701     0     111  slim
 29777    39   306    38    39   701     0      58  ?
 29778    39   306    40    39   701     0     111  slim
 29779    39   306    45    39   701     0      77  -
 29780    39   306    47    39   701     0     111  spos
 29781    39   306    52    39   701     0      65  :
 29782    39   306    54    39   701     0     112  0
 29783    39   306    55    39   701     0      60  )
 29784    39   306    56    39   701     0     102  ;
 29785    39   308    13    39   701     0     111  put
 29786    39   308    16    39   701     0      59  (
 29787    39   308    17    39   701     0     111  src.hb
 29788    39   308    23    39   701     0      66  ,
 29789    39   308    25    39   701     0     111  src.offset
 29790    39   308    36    39   701     0      74  +
 29791    39   308    38    39   701     0     111  spos
 29792    39   308    42    39   701     0      66  ,
 29793    39   308    44    39   701     0     111  srem
 29794    39   308    48    39   701     0      60  )
 29795    39   308    49    39   701     0     102  ;
 29796    39   309    13    39   701     0     111  src.position
 29797    39   309    25    39   701     0      59  (
 29798    39   309    26    39   701     0     111  spos
 29799    39   309    31    39   701     0      74  +
 29800    39   309    33    39   701     0     111  srem
 29801    39   309    37    39   701     0      60  )
 29802    39   309    38    39   701     0     102  ;
 29803    39   311     9    39   701     0      64  }
 29804    39   311    11    39   701     0      48  else
 29805    39   311    16    39   701     0      63  {
 29806    39   312    13    39   701     0     111  super.put
 29807    39   312    22    39   701     0      59  (
 29808    39   312    23    39   701     0     111  src
 29809    39   312    26    39   701     0      60  )
 29810    39   312    27    39   701     0     102  ;
 29811    39   313     9    39   701     0      64  }
 29812    39   314     9    39   701     0      19  return
 29813    39   314    16    39   701     0      44  this
 29814    39   314    20    39   701     0     102  ;
 29815    39   318     5    39   701     0      64  }
 29816    39   318     5    39   701     0    1682  ENDMETHOD
 29817    39   318     5    39   702     0    1683  STARTMETHOD
 29818    39   320     5    39   702     0      10  public
 29819    39   320    12    39   702     0     111  DoubleBuffer
 29820    39   320    25    39   702     0     111  put
 29821    39   320    28    39   702     0      59  (
 29822    39   320    29    39   702     0      32  double
 29823    39   320    35    39   702     0      61  [
 29824    39   320    36    39   702     0      62  ]
 29825    39   320    38    39   702     0     111  src
 29826    39   320    41    39   702     0      66  ,
 29827    39   320    43    39   702     0      36  int
 29828    39   320    47    39   702     0     111  offset
 29829    39   320    53    39   702     0      66  ,
 29830    39   320    55    39   702     0      36  int
 29831    39   320    59    39   702     0     111  length
 29832    39   320    65    39   702     0      60  )
 29833    39   320    67    39   702     0      63  {
 29834    39   322     9    39   702     0      31  if
 29835    39   322    12    39   702     0      59  (
 29836    39   322    13    39   702     0      59  (
 29837    39   322    14    39   702     0     111  length
 29838    39   322    21    39   702     0      90  <<
 29839    39   322    24    39   702     0     112  3
 29840    39   322    25    39   702     0      60  )
 29841    39   322    27    39   702     0      89  >
 29842    39   322    29    39   702     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 29843    39   322    63    39   702     0      60  )
 29844    39   322    65    39   702     0      63  {
 29845    39   323    13    39   702     0     111  checkBounds
 29846    39   323    24    39   702     0      59  (
 29847    39   323    25    39   702     0     111  offset
 29848    39   323    31    39   702     0      66  ,
 29849    39   323    33    39   702     0     111  length
 29850    39   323    39    39   702     0      66  ,
 29851    39   323    41    39   702     0     111  src.length
 29852    39   323    51    39   702     0      60  )
 29853    39   323    52    39   702     0     102  ;
 29854    39   324    13    39   702     1      36  int
 29855    39   324    17    39   702     1     111  pos
 29856    39   324    21    39   702     1      67  =
 29857    39   324    23    39   702     1     111  position
 29858    39   324    31    39   702     1      59  (
 29859    39   324    32    39   702     1      60  )
 29860    39   324    33    39   702     1     102  ;
 29861    39   325    13    39   702     1      36  int
 29862    39   325    17    39   702     1     111  lim
 29863    39   325    21    39   702     1      67  =
 29864    39   325    23    39   702     1     111  limit
 29865    39   325    28    39   702     1      59  (
 29866    39   325    29    39   702     1      60  )
 29867    39   325    30    39   702     1     102  ;
 29868    39   326    13    39   702     0     111  assert
 29869    39   326    20    39   702     0      59  (
 29870    39   326    21    39   702     0     111  pos
 29871    39   326    25    39   702     0      92  <=
 29872    39   326    28    39   702     0     111  lim
 29873    39   326    31    39   702     0      60  )
 29874    39   326    32    39   702     0     102  ;
 29875    39   327    13    39   702     0      36  int
 29876    39   327    17    39   702     0     111  rem
 29877    39   327    21    39   702     0      67  =
 29878    39   327    23    39   702     0      59  (
 29879    39   327    24    39   702     0     111  pos
 29880    39   327    28    39   702     0      92  <=
 29881    39   327    31    39   702     0     111  lim
 29882    39   327    35    39   702     0      58  ?
 29883    39   327    37    39   702     0     111  lim
 29884    39   327    41    39   702     0      77  -
 29885    39   327    43    39   702     0     111  pos
 29886    39   327    47    39   702     0      65  :
 29887    39   327    49    39   702     0     112  0
 29888    39   327    50    39   702     0      60  )
 29889    39   327    51    39   702     0     102  ;
 29890    39   328    13    39   702     0      31  if
 29891    39   328    16    39   702     0      59  (
 29892    39   328    17    39   702     0     111  length
 29893    39   328    24    39   702     0      89  >
 29894    39   328    26    39   702     0     111  rem
 29895    39   328    29    39   702     0      60  )
 29896    39   329    17    39   702     0      20  throw
 29897    39   329    23    39   702     0      15  new
 29898    39   329    27    39   702     0     111  BufferOverflowException
 29899    39   329    50    39   702     0      59  (
 29900    39   329    51    39   702     0      60  )
 29901    39   329    52    39   702     0     102  ;
 29902    39   331    13    39   702     0      31  if
 29903    39   331    16    39   702     0      59  (
 29904    39   331    17    39   702     0     111  order
 29905    39   331    22    39   702     0      59  (
 29906    39   331    23    39   702     0      60  )
 29907    39   331    25    39   702     0      71  !=
 29908    39   331    28    39   702     0     111  ByteOrder.nativeOrder
 29909    39   331    49    39   702     0      59  (
 29910    39   331    50    39   702     0      60  )
 29911    39   331    51    39   702     0      60  )
 29912    39   332    17    39   702     0     111  Bits.copyFromLongArray
 29913    39   332    39    39   702     0      59  (
 29914    39   332    40    39   702     0     111  src
 29915    39   332    43    39   702     0      66  ,
 29916    39   332    45    39   702     0     111  offset
 29917    39   332    52    39   702     0      90  <<
 29918    39   332    55    39   702     0     112  3
 29919    39   332    56    39   702     0      66  ,
 29920    39   333    45    39   702     0     111  ix
 29921    39   333    47    39   702     0      59  (
 29922    39   333    48    39   702     0     111  pos
 29923    39   333    51    39   702     0      60  )
 29924    39   333    52    39   702     0      66  ,
 29925    39   333    54    39   702     0     111  length
 29926    39   333    61    39   702     0      90  <<
 29927    39   333    64    39   702     0     112  3
 29928    39   333    65    39   702     0      60  )
 29929    39   333    66    39   702     0     102  ;
 29930    39   334    13    39   702     0      48  else
 29931    39   335    17    39   702     0     111  Bits.copyFromByteArray
 29932    39   335    39    39   702     0      59  (
 29933    39   335    40    39   702     0     111  src
 29934    39   335    43    39   702     0      66  ,
 29935    39   335    45    39   702     0     111  offset
 29936    39   335    52    39   702     0      90  <<
 29937    39   335    55    39   702     0     112  3
 29938    39   335    56    39   702     0      66  ,
 29939    39   336    40    39   702     0     111  ix
 29940    39   336    42    39   702     0      59  (
 29941    39   336    43    39   702     0     111  pos
 29942    39   336    46    39   702     0      60  )
 29943    39   336    47    39   702     0      66  ,
 29944    39   336    49    39   702     0     111  length
 29945    39   336    56    39   702     0      90  <<
 29946    39   336    59    39   702     0     112  3
 29947    39   336    60    39   702     0      60  )
 29948    39   336    61    39   702     0     102  ;
 29949    39   337    13    39   702     0     111  position
 29950    39   337    21    39   702     0      59  (
 29951    39   337    22    39   702     0     111  pos
 29952    39   337    26    39   702     0      74  +
 29953    39   337    28    39   702     0     111  length
 29954    39   337    34    39   702     0      60  )
 29955    39   337    35    39   702     0     102  ;
 29956    39   338     9    39   702     0      64  }
 29957    39   338    11    39   702     0      48  else
 29958    39   338    16    39   702     0      63  {
 29959    39   339    13    39   702     0     111  super.put
 29960    39   339    22    39   702     0      59  (
 29961    39   339    23    39   702     0     111  src
 29962    39   339    26    39   702     0      66  ,
 29963    39   339    28    39   702     0     111  offset
 29964    39   339    34    39   702     0      66  ,
 29965    39   339    36    39   702     0     111  length
 29966    39   339    42    39   702     0      60  )
 29967    39   339    43    39   702     0     102  ;
 29968    39   340     9    39   702     0      64  }
 29969    39   341     9    39   702     0      19  return
 29970    39   341    16    39   702     0      44  this
 29971    39   341    20    39   702     0     102  ;
 29972    39   345     5    39   702     0      64  }
 29973    39   345     5    39   702     0    1684  ENDMETHOD
 29974    39   345     5    39   703     0    1685  STARTMETHOD
 29975    39   347     5    39   703     0      10  public
 29976    39   347    12    39   703     0     111  DoubleBuffer
 29977    39   347    25    39   703     0     111  compact
 29978    39   347    32    39   703     0      59  (
 29979    39   347    33    39   703     0      60  )
 29980    39   347    35    39   703     0      63  {
 29981    39   349     9    39   703     1      36  int
 29982    39   349    13    39   703     1     111  pos
 29983    39   349    17    39   703     1      67  =
 29984    39   349    19    39   703     1     111  position
 29985    39   349    27    39   703     1      59  (
 29986    39   349    28    39   703     1      60  )
 29987    39   349    29    39   703     1     102  ;
 29988    39   350     9    39   703     1      36  int
 29989    39   350    13    39   703     1     111  lim
 29990    39   350    17    39   703     1      67  =
 29991    39   350    19    39   703     1     111  limit
 29992    39   350    24    39   703     1      59  (
 29993    39   350    25    39   703     1      60  )
 29994    39   350    26    39   703     1     102  ;
 29995    39   351     9    39   703     0     111  assert
 29996    39   351    16    39   703     0      59  (
 29997    39   351    17    39   703     0     111  pos
 29998    39   351    21    39   703     0      92  <=
 29999    39   351    24    39   703     0     111  lim
 30000    39   351    27    39   703     0      60  )
 30001    39   351    28    39   703     0     102  ;
 30002    39   352     9    39   703     0      36  int
 30003    39   352    13    39   703     0     111  rem
 30004    39   352    17    39   703     0      67  =
 30005    39   352    19    39   703     0      59  (
 30006    39   352    20    39   703     0     111  pos
 30007    39   352    24    39   703     0      92  <=
 30008    39   352    27    39   703     0     111  lim
 30009    39   352    31    39   703     0      58  ?
 30010    39   352    33    39   703     0     111  lim
 30011    39   352    37    39   703     0      77  -
 30012    39   352    39    39   703     0     111  pos
 30013    39   352    43    39   703     0      65  :
 30014    39   352    45    39   703     0     112  0
 30015    39   352    46    39   703     0      60  )
 30016    39   352    47    39   703     0     102  ;
 30017    39   354     9    39   703     0     111  unsafe.copyMemory
 30018    39   354    26    39   703     0      59  (
 30019    39   354    27    39   703     0     111  ix
 30020    39   354    29    39   703     0      59  (
 30021    39   354    30    39   703     0     111  pos
 30022    39   354    33    39   703     0      60  )
 30023    39   354    34    39   703     0      66  ,
 30024    39   354    36    39   703     0     111  ix
 30025    39   354    38    39   703     0      59  (
 30026    39   354    39    39   703     0     112  0
 30027    39   354    40    39   703     0      60  )
 30028    39   354    41    39   703     0      66  ,
 30029    39   354    43    39   703     0     111  rem
 30030    39   354    47    39   703     0      90  <<
 30031    39   354    50    39   703     0     112  3
 30032    39   354    51    39   703     0      60  )
 30033    39   354    52    39   703     0     102  ;
 30034    39   355     9    39   703     0     111  position
 30035    39   355    17    39   703     0      59  (
 30036    39   355    18    39   703     0     111  rem
 30037    39   355    21    39   703     0      60  )
 30038    39   355    22    39   703     0     102  ;
 30039    39   356     9    39   703     0     111  limit
 30040    39   356    14    39   703     0      59  (
 30041    39   356    15    39   703     0     111  capacity
 30042    39   356    23    39   703     0      59  (
 30043    39   356    24    39   703     0      60  )
 30044    39   356    25    39   703     0      60  )
 30045    39   356    26    39   703     0     102  ;
 30046    39   357     9    39   703     0     111  clearMark
 30047    39   357    18    39   703     0      59  (
 30048    39   357    19    39   703     0      60  )
 30049    39   357    20    39   703     0     102  ;
 30050    39   358     9    39   703     0      19  return
 30051    39   358    16    39   703     0      44  this
 30052    39   358    20    39   703     1     102  ;
 30053    39   362     5    39   703     1      64  }
 30054    39   362     5    39   703     0    1686  ENDMETHOD
 30055    39   362     5    39   704     0    1687  STARTMETHOD
 30056    39   364     5    39   704     0      10  public
 30057    39   364    12    39   704     0      39  boolean
 30058    39   364    20    39   704     0     111  isDirect
 30059    39   364    28    39   704     0      59  (
 30060    39   364    29    39   704     0      60  )
 30061    39   364    31    39   704     0      63  {
 30062    39   365     9    39   704     0      19  return
 30063    39   365    16    39   704     0      52  true
 30064    39   365    20    39   704     1     102  ;
 30065    39   366     5    39   704     1      64  }
 30066    39   366     5    39   704     0    1688  ENDMETHOD
 30067    39   366     5    39   705     0    1689  STARTMETHOD
 30068    39   368     5    39   705     0      10  public
 30069    39   368    12    39   705     0      39  boolean
 30070    39   368    20    39   705     0     111  isReadOnly
 30071    39   368    30    39   705     0      59  (
 30072    39   368    31    39   705     0      60  )
 30073    39   368    33    39   705     0      63  {
 30074    39   369     9    39   705     0      19  return
 30075    39   369    16    39   705     0      43  false
 30076    39   369    21    39   705     1     102  ;
 30077    39   370     5    39   705     1      64  }
 30078    39   370     5    39   705     0    1690  ENDMETHOD
 30079    39   370     5    39   706     0    1691  STARTMETHOD
 30080    39   416     5    39   706     0      10  public
 30081    39   416    12    39   706     0     111  ByteOrder
 30082    39   416    22    39   706     0     111  order
 30083    39   416    27    39   706     0      59  (
 30084    39   416    28    39   706     0      60  )
 30085    39   416    30    39   706     0      63  {
 30086    39   418     9    39   706     0      19  return
 30087    39   418    16    39   706     0      59  (
 30088    39   418    17    39   706     0      59  (
 30089    39   418    18    39   706     0     111  ByteOrder.nativeOrder
 30090    39   418    39    39   706     0      59  (
 30091    39   418    40    39   706     0      60  )
 30092    39   418    42    39   706     0      68  ==
 30093    39   418    45    39   706     0     111  ByteOrder.BIG_ENDIAN
 30094    39   418    65    39   706     0      60  )
 30095    39   419    17    39   706     0      58  ?
 30096    39   419    19    39   706     0     111  ByteOrder.LITTLE_ENDIAN
 30097    39   419    43    39   706     0      65  :
 30098    39   419    45    39   706     0     111  ByteOrder.BIG_ENDIAN
 30099    39   419    65    39   706     0      60  )
 30100    39   419    66    39   706     0     102  ;
 30101    39   425     5    39   706     0      64  }
 30102    39   425     5    39   706     0    1692  ENDMETHOD
 30103    39   452     1    39    -1     0      64  }
 30104    39   452     1    39    -1     1    1693  ENDCLASS
 30105    39   452     1    -1    -1     1    1694  ENDFILE C:\javasrc\java\nio\DirectDoubleBufferS.java
 30106    40     1     1    -1    -1     1    1695  STARTFILE C:\javasrc\java\nio\DirectDoubleBufferU.java
 30107    40    28     1    -1    -1     0       5  package
 30108    40    28     9    -1    -1     0     111  java.nio
 30109    40    28    17    -1    -1     0     102  ;
 30110    40    30     1    -1    -1     1      49  import
 30111    40    30     8    -1    -1     1     111  sun.misc.Cleaner
 30112    40    30    24    -1    -1     1     102  ;
 30113    40    31     1    -1    -1     1      49  import
 30114    40    31     8    -1    -1     1     111  sun.misc.Unsafe
 30115    40    31    23    -1    -1     1     102  ;
 30116    40    32     1    -1    -1     1      49  import
 30117    40    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 30118    40    32    31    -1    -1     1     102  ;
 30119    40    33     1    -1    -1     1      49  import
 30120    40    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 30121    40    33    34    -1    -1     1     102  ;
 30122    40    36     1    40    -1     0    1696  STARTCLASS
 30123    40    36     1    40    -1     0      24  class
 30124    40    36     7    40    -1     0     111  DirectDoubleBufferU
 30125    40    38     5    40    -1     0      38  extends
 30126    40    38    13    40    -1     0     111  DoubleBuffer
 30127    40    42     5    40    -1     0      17  implements
 30128    40    42    16    40    -1     0     111  DirectBuffer
 30129    40    43     1    40    -1     0      63  {
 30130    40    48     5    40    -1     0      23  protected
 30131    40    48    15    40    -1     0      45  static
 30132    40    48    22    40    -1     0       6  final
 30133    40    48    28    40    -1     0     111  Unsafe
 30134    40    48    35    40    -1     0     111  unsafe
 30135    40    48    42    40    -1     0      67  =
 30136    40    48    44    40    -1     0     111  Bits.unsafe
 30137    40    48    55    40    -1     0      59  (
 30138    40    48    56    40    -1     0      60  )
 30139    40    48    57    40    -1     0     102  ;
 30140    40    51     5    40    -1     0      23  protected
 30141    40    51    15    40    -1     0      45  static
 30142    40    51    22    40    -1     0       6  final
 30143    40    51    28    40    -1     0      39  boolean
 30144    40    51    36    40    -1     0     111  unaligned
 30145    40    51    46    40    -1     0      67  =
 30146    40    51    48    40    -1     0     111  Bits.unaligned
 30147    40    51    62    40    -1     0      59  (
 30148    40    51    63    40    -1     0      60  )
 30149    40    51    64    40    -1     0     102  ;
 30150    40    59     5    40    -1     0      23  protected
 30151    40    59    15    40    -1     0     111  Object
 30152    40    59    22    40    -1     0     111  viewedBuffer
 30153    40    59    35    40    -1     0      67  =
 30154    40    59    37    40    -1     0      21  null
 30155    40    59    41    40    -1     0     102  ;
 30156    40    59    41    40   707     0    1697  STARTMETHOD
 30157    40    61     5    40   707     0      10  public
 30158    40    61    12    40   707     0     111  Object
 30159    40    61    19    40   707     0     111  viewedBuffer
 30160    40    61    31    40   707     0      59  (
 30161    40    61    32    40   707     0      60  )
 30162    40    61    34    40   707     0      63  {
 30163    40    62     9    40   707     0      19  return
 30164    40    62    16    40   707     0     111  viewedBuffer
 30165    40    62    28    40   707     0     102  ;
 30166    40    63     5    40   707     0      64  }
 30167    40    63     5    40   707     0    1698  ENDMETHOD
 30168    40    63     5    40   708     0    1699  STARTMETHOD
 30169    40   100     5    40   708     0      10  public
 30170    40   100    12    40   708     0     111  Cleaner
 30171    40   100    20    40   708     0     111  cleaner
 30172    40   100    27    40   708     0      59  (
 30173    40   100    28    40   708     0      60  )
 30174    40   100    30    40   708     0      63  {
 30175    40   100    32    40   708     0      19  return
 30176    40   100    39    40   708     0      21  null
 30177    40   100    43    40   708     0     102  ;
 30178    40   100    45    40   708     0      64  }
 30179    40   100    45    40   708     0    1700  ENDMETHOD
 30180    40   100    45    40   709     0    1701  STARTMETHOD
 30181    40   164     5    40   709     0     111  DirectDoubleBufferU
 30182    40   164    24    40   709     0      59  (
 30183    40   164    25    40   709     0     111  DirectBuffer
 30184    40   164    38    40   709     0     111  db
 30185    40   164    40    40   709     0      66  ,
 30186    40   165    32    40   709     0      36  int
 30187    40   165    36    40   709     0     111  mark
 30188    40   165    40    40   709     0      66  ,
 30189    40   165    42    40   709     0      36  int
 30190    40   165    46    40   709     0     111  pos
 30191    40   165    49    40   709     0      66  ,
 30192    40   165    51    40   709     0      36  int
 30193    40   165    55    40   709     0     111  lim
 30194    40   165    58    40   709     0      66  ,
 30195    40   165    60    40   709     0      36  int
 30196    40   165    64    40   709     0     111  cap
 30197    40   165    67    40   709     0      66  ,
 30198    40   166    32    40   709     0      36  int
 30199    40   166    36    40   709     0     111  off
 30200    40   166    39    40   709     0      60  )
 30201    40   167     5    40   709     0      63  {
 30202    40   169     9    40   709     0      27  super
 30203    40   169    14    40   709     0      59  (
 30204    40   169    15    40   709     0     111  mark
 30205    40   169    19    40   709     0      66  ,
 30206    40   169    21    40   709     0     111  pos
 30207    40   169    24    40   709     0      66  ,
 30208    40   169    26    40   709     0     111  lim
 30209    40   169    29    40   709     0      66  ,
 30210    40   169    31    40   709     0     111  cap
 30211    40   169    34    40   709     0      60  )
 30212    40   169    35    40   709     0     102  ;
 30213    40   170     9    40   709     0     111  address
 30214    40   170    17    40   709     0      67  =
 30215    40   170    19    40   709     0     111  db.address
 30216    40   170    29    40   709     0      59  (
 30217    40   170    30    40   709     0      60  )
 30218    40   170    32    40   709     0      74  +
 30219    40   170    34    40   709     0     111  off
 30220    40   170    37    40   709     0     102  ;
 30221    40   171     9    40   709     0     111  viewedBuffer
 30222    40   171    22    40   709     0      67  =
 30223    40   171    24    40   709     0     111  db
 30224    40   171    26    40   709     0     102  ;
 30225    40   178     5    40   709     0      64  }
 30226    40   178     5    40   709     0    1702  ENDMETHOD
 30227    40   178     5    40   710     0    1703  STARTMETHOD
 30228    40   180     5    40   710     0      10  public
 30229    40   180    12    40   710     0     111  DoubleBuffer
 30230    40   180    25    40   710     0     111  slice
 30231    40   180    30    40   710     0      59  (
 30232    40   180    31    40   710     0      60  )
 30233    40   180    33    40   710     0      63  {
 30234    40   181     9    40   710     1      36  int
 30235    40   181    13    40   710     1     111  pos
 30236    40   181    17    40   710     1      67  =
 30237    40   181    19    40   710     1     111  this.position
 30238    40   181    32    40   710     1      59  (
 30239    40   181    33    40   710     1      60  )
 30240    40   181    34    40   710     1     102  ;
 30241    40   182     9    40   710     1      36  int
 30242    40   182    13    40   710     1     111  lim
 30243    40   182    17    40   710     1      67  =
 30244    40   182    19    40   710     1     111  this.limit
 30245    40   182    29    40   710     1      59  (
 30246    40   182    30    40   710     1      60  )
 30247    40   182    31    40   710     1     102  ;
 30248    40   183     9    40   710     0     111  assert
 30249    40   183    16    40   710     0      59  (
 30250    40   183    17    40   710     0     111  pos
 30251    40   183    21    40   710     0      92  <=
 30252    40   183    24    40   710     0     111  lim
 30253    40   183    27    40   710     0      60  )
 30254    40   183    28    40   710     0     102  ;
 30255    40   184     9    40   710     0      36  int
 30256    40   184    13    40   710     0     111  rem
 30257    40   184    17    40   710     0      67  =
 30258    40   184    19    40   710     0      59  (
 30259    40   184    20    40   710     0     111  pos
 30260    40   184    24    40   710     0      92  <=
 30261    40   184    27    40   710     0     111  lim
 30262    40   184    31    40   710     0      58  ?
 30263    40   184    33    40   710     0     111  lim
 30264    40   184    37    40   710     0      77  -
 30265    40   184    39    40   710     0     111  pos
 30266    40   184    43    40   710     0      65  :
 30267    40   184    45    40   710     0     112  0
 30268    40   184    46    40   710     0      60  )
 30269    40   184    47    40   710     0     102  ;
 30270    40   185     9    40   710     0      36  int
 30271    40   185    13    40   710     0     111  off
 30272    40   185    17    40   710     0      67  =
 30273    40   185    19    40   710     0      59  (
 30274    40   185    20    40   710     0     111  pos
 30275    40   185    24    40   710     0      90  <<
 30276    40   185    27    40   710     0     112  3
 30277    40   185    28    40   710     0      60  )
 30278    40   185    29    40   710     0     102  ;
 30279    40   186     9    40   710     0     111  assert
 30280    40   186    16    40   710     0      59  (
 30281    40   186    17    40   710     0     111  off
 30282    40   186    21    40   710     0      88  >=
 30283    40   186    24    40   710     0     112  0
 30284    40   186    25    40   710     0      60  )
 30285    40   186    26    40   710     0     102  ;
 30286    40   187     9    40   710     0      19  return
 30287    40   187    16    40   710     0      15  new
 30288    40   187    20    40   710     0     111  DirectDoubleBufferU
 30289    40   187    39    40   710     0      59  (
 30290    40   187    40    40   710     0      44  this
 30291    40   187    44    40   710     0      66  ,
 30292    40   187    46    40   710     0      77  -
 30293    40   187    47    40   710     0     112  1
 30294    40   187    48    40   710     0      66  ,
 30295    40   187    50    40   710     0     112  0
 30296    40   187    51    40   710     0      66  ,
 30297    40   187    53    40   710     0     111  rem
 30298    40   187    56    40   710     0      66  ,
 30299    40   187    58    40   710     0     111  rem
 30300    40   187    61    40   710     0      66  ,
 30301    40   187    63    40   710     0     111  off
 30302    40   187    66    40   710     1      60  )
 30303    40   187    67    40   710     1     102  ;
 30304    40   188     5    40   710     1      64  }
 30305    40   188     5    40   710     0    1704  ENDMETHOD
 30306    40   188     5    40   711     0    1705  STARTMETHOD
 30307    40   190     5    40   711     0      10  public
 30308    40   190    12    40   711     0     111  DoubleBuffer
 30309    40   190    25    40   711     0     111  duplicate
 30310    40   190    34    40   711     0      59  (
 30311    40   190    35    40   711     0      60  )
 30312    40   190    37    40   711     0      63  {
 30313    40   191     9    40   711     0      19  return
 30314    40   191    16    40   711     0      15  new
 30315    40   191    20    40   711     0     111  DirectDoubleBufferU
 30316    40   191    39    40   711     0      59  (
 30317    40   191    40    40   711     0      44  this
 30318    40   191    44    40   711     0      66  ,
 30319    40   192    47    40   711     1     111  this.markValue
 30320    40   192    61    40   711     1      59  (
 30321    40   192    62    40   711     1      60  )
 30322    40   192    63    40   711     1      66  ,
 30323    40   193    47    40   711     1     111  this.position
 30324    40   193    60    40   711     1      59  (
 30325    40   193    61    40   711     1      60  )
 30326    40   193    62    40   711     1      66  ,
 30327    40   194    47    40   711     1     111  this.limit
 30328    40   194    57    40   711     1      59  (
 30329    40   194    58    40   711     1      60  )
 30330    40   194    59    40   711     1      66  ,
 30331    40   195    47    40   711     1     111  this.capacity
 30332    40   195    60    40   711     1      59  (
 30333    40   195    61    40   711     1      60  )
 30334    40   195    62    40   711     1      66  ,
 30335    40   196    47    40   711     0     112  0
 30336    40   196    48    40   711     1      60  )
 30337    40   196    49    40   711     1     102  ;
 30338    40   197     5    40   711     1      64  }
 30339    40   197     5    40   711     0    1706  ENDMETHOD
 30340    40   197     5    40   712     0    1707  STARTMETHOD
 30341    40   199     5    40   712     0      10  public
 30342    40   199    12    40   712     0     111  DoubleBuffer
 30343    40   199    25    40   712     0     111  asReadOnlyBuffer
 30344    40   199    41    40   712     0      59  (
 30345    40   199    42    40   712     0      60  )
 30346    40   199    44    40   712     0      63  {
 30347    40   201     9    40   712     0      19  return
 30348    40   201    16    40   712     0      15  new
 30349    40   201    20    40   712     0     111  DirectDoubleBufferRU
 30350    40   201    40    40   712     0      59  (
 30351    40   201    41    40   712     0      44  this
 30352    40   201    45    40   712     0      66  ,
 30353    40   202    44    40   712     1     111  this.markValue
 30354    40   202    58    40   712     1      59  (
 30355    40   202    59    40   712     1      60  )
 30356    40   202    60    40   712     1      66  ,
 30357    40   203    44    40   712     1     111  this.position
 30358    40   203    57    40   712     1      59  (
 30359    40   203    58    40   712     1      60  )
 30360    40   203    59    40   712     1      66  ,
 30361    40   204    44    40   712     1     111  this.limit
 30362    40   204    54    40   712     1      59  (
 30363    40   204    55    40   712     1      60  )
 30364    40   204    56    40   712     1      66  ,
 30365    40   205    44    40   712     1     111  this.capacity
 30366    40   205    57    40   712     1      59  (
 30367    40   205    58    40   712     1      60  )
 30368    40   205    59    40   712     1      66  ,
 30369    40   206    44    40   712     0     112  0
 30370    40   206    45    40   712     1      60  )
 30371    40   206    46    40   712     1     102  ;
 30372    40   210     5    40   712     1      64  }
 30373    40   210     5    40   712     0    1708  ENDMETHOD
 30374    40   210     5    40   713     0    1709  STARTMETHOD
 30375    40   214     5    40   713     0      10  public
 30376    40   214    12    40   713     0      53  long
 30377    40   214    17    40   713     0     111  address
 30378    40   214    24    40   713     0      59  (
 30379    40   214    25    40   713     0      60  )
 30380    40   214    27    40   713     0      63  {
 30381    40   215     9    40   713     0      19  return
 30382    40   215    16    40   713     0     111  address
 30383    40   215    23    40   713     0     102  ;
 30384    40   216     5    40   713     0      64  }
 30385    40   216     5    40   713     0    1710  ENDMETHOD
 30386    40   216     5    40   714     0    1711  STARTMETHOD
 30387    40   218     5    40   714     0      41  private
 30388    40   218    13    40   714     0      53  long
 30389    40   218    18    40   714     0     111  ix
 30390    40   218    20    40   714     0      59  (
 30391    40   218    21    40   714     0      36  int
 30392    40   218    25    40   714     0     111  i
 30393    40   218    26    40   714     0      60  )
 30394    40   218    28    40   714     0      63  {
 30395    40   219     9    40   714     0      19  return
 30396    40   219    16    40   714     0     111  address
 30397    40   219    24    40   714     0      74  +
 30398    40   219    26    40   714     0      59  (
 30399    40   219    27    40   714     0     111  i
 30400    40   219    29    40   714     0      90  <<
 30401    40   219    32    40   714     0     112  3
 30402    40   219    33    40   714     0      60  )
 30403    40   219    34    40   714     0     102  ;
 30404    40   220     5    40   714     0      64  }
 30405    40   220     5    40   714     0    1712  ENDMETHOD
 30406    40   220     5    40   715     0    1713  STARTMETHOD
 30407    40   222     5    40   715     0      10  public
 30408    40   222    12    40   715     0      32  double
 30409    40   222    19    40   715     0     111  get
 30410    40   222    22    40   715     0      59  (
 30411    40   222    23    40   715     0      60  )
 30412    40   222    25    40   715     0      63  {
 30413    40   223     9    40   715     0      19  return
 30414    40   223    16    40   715     0      59  (
 30415    40   223    17    40   715     0      59  (
 30416    40   223    18    40   715     0     111  unsafe.getDouble
 30417    40   223    34    40   715     0      59  (
 30418    40   223    35    40   715     0     111  ix
 30419    40   223    37    40   715     0      59  (
 30420    40   223    38    40   715     0     111  nextGetIndex
 30421    40   223    50    40   715     0      59  (
 30422    40   223    51    40   715     0      60  )
 30423    40   223    52    40   715     0      60  )
 30424    40   223    53    40   715     0      60  )
 30425    40   223    54    40   715     0      60  )
 30426    40   223    55    40   715     0      60  )
 30427    40   223    56    40   715     0     102  ;
 30428    40   224     5    40   715     0      64  }
 30429    40   224     5    40   715     0    1714  ENDMETHOD
 30430    40   224     5    40   716     0    1715  STARTMETHOD
 30431    40   226     5    40   716     0      10  public
 30432    40   226    12    40   716     0      32  double
 30433    40   226    19    40   716     0     111  get
 30434    40   226    22    40   716     0      59  (
 30435    40   226    23    40   716     0      36  int
 30436    40   226    27    40   716     0     111  i
 30437    40   226    28    40   716     0      60  )
 30438    40   226    30    40   716     0      63  {
 30439    40   227     9    40   716     0      19  return
 30440    40   227    16    40   716     0      59  (
 30441    40   227    17    40   716     0      59  (
 30442    40   227    18    40   716     0     111  unsafe.getDouble
 30443    40   227    34    40   716     0      59  (
 30444    40   227    35    40   716     0     111  ix
 30445    40   227    37    40   716     0      59  (
 30446    40   227    38    40   716     0     111  checkIndex
 30447    40   227    48    40   716     0      59  (
 30448    40   227    49    40   716     0     111  i
 30449    40   227    50    40   716     0      60  )
 30450    40   227    51    40   716     0      60  )
 30451    40   227    52    40   716     0      60  )
 30452    40   227    53    40   716     0      60  )
 30453    40   227    54    40   716     0      60  )
 30454    40   227    55    40   716     0     102  ;
 30455    40   228     5    40   716     0      64  }
 30456    40   228     5    40   716     0    1716  ENDMETHOD
 30457    40   228     5    40   717     0    1717  STARTMETHOD
 30458    40   230     5    40   717     0      10  public
 30459    40   230    12    40   717     0     111  DoubleBuffer
 30460    40   230    25    40   717     0     111  get
 30461    40   230    28    40   717     0      59  (
 30462    40   230    29    40   717     0      32  double
 30463    40   230    35    40   717     0      61  [
 30464    40   230    36    40   717     0      62  ]
 30465    40   230    38    40   717     0     111  dst
 30466    40   230    41    40   717     0      66  ,
 30467    40   230    43    40   717     0      36  int
 30468    40   230    47    40   717     0     111  offset
 30469    40   230    53    40   717     0      66  ,
 30470    40   230    55    40   717     0      36  int
 30471    40   230    59    40   717     0     111  length
 30472    40   230    65    40   717     0      60  )
 30473    40   230    67    40   717     0      63  {
 30474    40   232     9    40   717     0      31  if
 30475    40   232    12    40   717     0      59  (
 30476    40   232    13    40   717     0      59  (
 30477    40   232    14    40   717     0     111  length
 30478    40   232    21    40   717     0      90  <<
 30479    40   232    24    40   717     0     112  3
 30480    40   232    25    40   717     0      60  )
 30481    40   232    27    40   717     0      89  >
 30482    40   232    29    40   717     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 30483    40   232    61    40   717     0      60  )
 30484    40   232    63    40   717     0      63  {
 30485    40   233    13    40   717     0     111  checkBounds
 30486    40   233    24    40   717     0      59  (
 30487    40   233    25    40   717     0     111  offset
 30488    40   233    31    40   717     0      66  ,
 30489    40   233    33    40   717     0     111  length
 30490    40   233    39    40   717     0      66  ,
 30491    40   233    41    40   717     0     111  dst.length
 30492    40   233    51    40   717     0      60  )
 30493    40   233    52    40   717     0     102  ;
 30494    40   234    13    40   717     1      36  int
 30495    40   234    17    40   717     1     111  pos
 30496    40   234    21    40   717     1      67  =
 30497    40   234    23    40   717     1     111  position
 30498    40   234    31    40   717     1      59  (
 30499    40   234    32    40   717     1      60  )
 30500    40   234    33    40   717     1     102  ;
 30501    40   235    13    40   717     1      36  int
 30502    40   235    17    40   717     1     111  lim
 30503    40   235    21    40   717     1      67  =
 30504    40   235    23    40   717     1     111  limit
 30505    40   235    28    40   717     1      59  (
 30506    40   235    29    40   717     1      60  )
 30507    40   235    30    40   717     1     102  ;
 30508    40   236    13    40   717     0     111  assert
 30509    40   236    20    40   717     0      59  (
 30510    40   236    21    40   717     0     111  pos
 30511    40   236    25    40   717     0      92  <=
 30512    40   236    28    40   717     0     111  lim
 30513    40   236    31    40   717     0      60  )
 30514    40   236    32    40   717     0     102  ;
 30515    40   237    13    40   717     0      36  int
 30516    40   237    17    40   717     0     111  rem
 30517    40   237    21    40   717     0      67  =
 30518    40   237    23    40   717     0      59  (
 30519    40   237    24    40   717     0     111  pos
 30520    40   237    28    40   717     0      92  <=
 30521    40   237    31    40   717     0     111  lim
 30522    40   237    35    40   717     0      58  ?
 30523    40   237    37    40   717     0     111  lim
 30524    40   237    41    40   717     0      77  -
 30525    40   237    43    40   717     0     111  pos
 30526    40   237    47    40   717     0      65  :
 30527    40   237    49    40   717     0     112  0
 30528    40   237    50    40   717     0      60  )
 30529    40   237    51    40   717     0     102  ;
 30530    40   238    13    40   717     0      31  if
 30531    40   238    16    40   717     0      59  (
 30532    40   238    17    40   717     0     111  length
 30533    40   238    24    40   717     0      89  >
 30534    40   238    26    40   717     0     111  rem
 30535    40   238    29    40   717     0      60  )
 30536    40   239    17    40   717     0      20  throw
 30537    40   239    23    40   717     0      15  new
 30538    40   239    27    40   717     0     111  BufferUnderflowException
 30539    40   239    51    40   717     0      59  (
 30540    40   239    52    40   717     0      60  )
 30541    40   239    53    40   717     0     102  ;
 30542    40   241    13    40   717     0      31  if
 30543    40   241    16    40   717     0      59  (
 30544    40   241    17    40   717     0     111  order
 30545    40   241    22    40   717     0      59  (
 30546    40   241    23    40   717     0      60  )
 30547    40   241    25    40   717     0      71  !=
 30548    40   241    28    40   717     0     111  ByteOrder.nativeOrder
 30549    40   241    49    40   717     0      59  (
 30550    40   241    50    40   717     0      60  )
 30551    40   241    51    40   717     0      60  )
 30552    40   242    17    40   717     0     111  Bits.copyToLongArray
 30553    40   242    37    40   717     0      59  (
 30554    40   242    38    40   717     0     111  ix
 30555    40   242    40    40   717     0      59  (
 30556    40   242    41    40   717     0     111  pos
 30557    40   242    44    40   717     0      60  )
 30558    40   242    45    40   717     0      66  ,
 30559    40   242    47    40   717     0     111  dst
 30560    40   242    50    40   717     0      66  ,
 30561    40   243    43    40   717     0     111  offset
 30562    40   243    50    40   717     0      90  <<
 30563    40   243    53    40   717     0     112  3
 30564    40   243    54    40   717     0      66  ,
 30565    40   244    43    40   717     0     111  length
 30566    40   244    50    40   717     0      90  <<
 30567    40   244    53    40   717     0     112  3
 30568    40   244    54    40   717     0      60  )
 30569    40   244    55    40   717     0     102  ;
 30570    40   245    13    40   717     0      48  else
 30571    40   246    17    40   717     0     111  Bits.copyToByteArray
 30572    40   246    37    40   717     0      59  (
 30573    40   246    38    40   717     0     111  ix
 30574    40   246    40    40   717     0      59  (
 30575    40   246    41    40   717     0     111  pos
 30576    40   246    44    40   717     0      60  )
 30577    40   246    45    40   717     0      66  ,
 30578    40   246    47    40   717     0     111  dst
 30579    40   246    50    40   717     0      66  ,
 30580    40   247    38    40   717     0     111  offset
 30581    40   247    45    40   717     0      90  <<
 30582    40   247    48    40   717     0     112  3
 30583    40   247    49    40   717     0      66  ,
 30584    40   248    38    40   717     0     111  length
 30585    40   248    45    40   717     0      90  <<
 30586    40   248    48    40   717     0     112  3
 30587    40   248    49    40   717     0      60  )
 30588    40   248    50    40   717     0     102  ;
 30589    40   249    13    40   717     0     111  position
 30590    40   249    21    40   717     0      59  (
 30591    40   249    22    40   717     0     111  pos
 30592    40   249    26    40   717     0      74  +
 30593    40   249    28    40   717     0     111  length
 30594    40   249    34    40   717     0      60  )
 30595    40   249    35    40   717     0     102  ;
 30596    40   250     9    40   717     0      64  }
 30597    40   250    11    40   717     0      48  else
 30598    40   250    16    40   717     0      63  {
 30599    40   251    13    40   717     0     111  super.get
 30600    40   251    22    40   717     0      59  (
 30601    40   251    23    40   717     0     111  dst
 30602    40   251    26    40   717     0      66  ,
 30603    40   251    28    40   717     0     111  offset
 30604    40   251    34    40   717     0      66  ,
 30605    40   251    36    40   717     0     111  length
 30606    40   251    42    40   717     0      60  )
 30607    40   251    43    40   717     0     102  ;
 30608    40   252     9    40   717     0      64  }
 30609    40   253     9    40   717     0      19  return
 30610    40   253    16    40   717     0      44  this
 30611    40   253    20    40   717     0     102  ;
 30612    40   257     5    40   717     0      64  }
 30613    40   257     5    40   717     0    1718  ENDMETHOD
 30614    40   257     5    40   718     0    1719  STARTMETHOD
 30615    40   261     5    40   718     0      10  public
 30616    40   261    12    40   718     0     111  DoubleBuffer
 30617    40   261    25    40   718     0     111  put
 30618    40   261    28    40   718     0      59  (
 30619    40   261    29    40   718     0      32  double
 30620    40   261    36    40   718     0     111  x
 30621    40   261    37    40   718     0      60  )
 30622    40   261    39    40   718     0      63  {
 30623    40   263     9    40   718     0     111  unsafe.putDouble
 30624    40   263    25    40   718     0      59  (
 30625    40   263    26    40   718     0     111  ix
 30626    40   263    28    40   718     0      59  (
 30627    40   263    29    40   718     0     111  nextPutIndex
 30628    40   263    41    40   718     0      59  (
 30629    40   263    42    40   718     0      60  )
 30630    40   263    43    40   718     0      60  )
 30631    40   263    44    40   718     0      66  ,
 30632    40   263    46    40   718     0      59  (
 30633    40   263    47    40   718     0      59  (
 30634    40   263    48    40   718     0     111  x
 30635    40   263    49    40   718     0      60  )
 30636    40   263    50    40   718     0      60  )
 30637    40   263    51    40   718     0      60  )
 30638    40   263    52    40   718     0     102  ;
 30639    40   264     9    40   718     0      19  return
 30640    40   264    16    40   718     0      44  this
 30641    40   264    20    40   718     0     102  ;
 30642    40   268     5    40   718     0      64  }
 30643    40   268     5    40   718     0    1720  ENDMETHOD
 30644    40   268     5    40   719     0    1721  STARTMETHOD
 30645    40   270     5    40   719     0      10  public
 30646    40   270    12    40   719     0     111  DoubleBuffer
 30647    40   270    25    40   719     0     111  put
 30648    40   270    28    40   719     0      59  (
 30649    40   270    29    40   719     0      36  int
 30650    40   270    33    40   719     0     111  i
 30651    40   270    34    40   719     0      66  ,
 30652    40   270    36    40   719     0      32  double
 30653    40   270    43    40   719     0     111  x
 30654    40   270    44    40   719     0      60  )
 30655    40   270    46    40   719     0      63  {
 30656    40   272     9    40   719     0     111  unsafe.putDouble
 30657    40   272    25    40   719     0      59  (
 30658    40   272    26    40   719     0     111  ix
 30659    40   272    28    40   719     0      59  (
 30660    40   272    29    40   719     0     111  checkIndex
 30661    40   272    39    40   719     0      59  (
 30662    40   272    40    40   719     0     111  i
 30663    40   272    41    40   719     0      60  )
 30664    40   272    42    40   719     0      60  )
 30665    40   272    43    40   719     0      66  ,
 30666    40   272    45    40   719     0      59  (
 30667    40   272    46    40   719     0      59  (
 30668    40   272    47    40   719     0     111  x
 30669    40   272    48    40   719     0      60  )
 30670    40   272    49    40   719     0      60  )
 30671    40   272    50    40   719     0      60  )
 30672    40   272    51    40   719     0     102  ;
 30673    40   273     9    40   719     0      19  return
 30674    40   273    16    40   719     0      44  this
 30675    40   273    20    40   719     0     102  ;
 30676    40   277     5    40   719     0      64  }
 30677    40   277     5    40   719     0    1722  ENDMETHOD
 30678    40   277     5    40   720     0    1723  STARTMETHOD
 30679    40   279     5    40   720     0      10  public
 30680    40   279    12    40   720     0     111  DoubleBuffer
 30681    40   279    25    40   720     0     111  put
 30682    40   279    28    40   720     0      59  (
 30683    40   279    29    40   720     0     111  DoubleBuffer
 30684    40   279    42    40   720     0     111  src
 30685    40   279    45    40   720     0      60  )
 30686    40   279    47    40   720     0      63  {
 30687    40   281     9    40   720     0      31  if
 30688    40   281    12    40   720     0      59  (
 30689    40   281    13    40   720     0     111  src
 30690    40   281    17    40   720     0      16  instanceof
 30691    40   281    28    40   720     0     111  DirectDoubleBufferU
 30692    40   281    47    40   720     0      60  )
 30693    40   281    49    40   720     0      63  {
 30694    40   282    13    40   720     0      31  if
 30695    40   282    16    40   720     0      59  (
 30696    40   282    17    40   720     0     111  src
 30697    40   282    21    40   720     0      68  ==
 30698    40   282    24    40   720     0      44  this
 30699    40   282    28    40   720     0      60  )
 30700    40   283    17    40   720     0      20  throw
 30701    40   283    23    40   720     0      15  new
 30702    40   283    27    40   720     0     111  IllegalArgumentException
 30703    40   283    51    40   720     0      59  (
 30704    40   283    52    40   720     0      60  )
 30705    40   283    53    40   720     0     102  ;
 30706    40   284    13    40   720     0     111  DirectDoubleBufferU
 30707    40   284    33    40   720     0     111  sb
 30708    40   284    36    40   720     0      67  =
 30709    40   284    38    40   720     0      59  (
 30710    40   284    39    40   720     0     111  DirectDoubleBufferU
 30711    40   284    58    40   720     0      60  )
 30712    40   284    59    40   720     0     111  src
 30713    40   284    62    40   720     0     102  ;
 30714    40   286    13    40   720     1      36  int
 30715    40   286    17    40   720     1     111  spos
 30716    40   286    22    40   720     1      67  =
 30717    40   286    24    40   720     1     111  sb.position
 30718    40   286    35    40   720     1      59  (
 30719    40   286    36    40   720     1      60  )
 30720    40   286    37    40   720     1     102  ;
 30721    40   287    13    40   720     1      36  int
 30722    40   287    17    40   720     1     111  slim
 30723    40   287    22    40   720     1      67  =
 30724    40   287    24    40   720     1     111  sb.limit
 30725    40   287    32    40   720     1      59  (
 30726    40   287    33    40   720     1      60  )
 30727    40   287    34    40   720     1     102  ;
 30728    40   288    13    40   720     0     111  assert
 30729    40   288    20    40   720     0      59  (
 30730    40   288    21    40   720     0     111  spos
 30731    40   288    26    40   720     0      92  <=
 30732    40   288    29    40   720     0     111  slim
 30733    40   288    33    40   720     0      60  )
 30734    40   288    34    40   720     0     102  ;
 30735    40   289    13    40   720     0      36  int
 30736    40   289    17    40   720     0     111  srem
 30737    40   289    22    40   720     0      67  =
 30738    40   289    24    40   720     0      59  (
 30739    40   289    25    40   720     0     111  spos
 30740    40   289    30    40   720     0      92  <=
 30741    40   289    33    40   720     0     111  slim
 30742    40   289    38    40   720     0      58  ?
 30743    40   289    40    40   720     0     111  slim
 30744    40   289    45    40   720     0      77  -
 30745    40   289    47    40   720     0     111  spos
 30746    40   289    52    40   720     0      65  :
 30747    40   289    54    40   720     0     112  0
 30748    40   289    55    40   720     0      60  )
 30749    40   289    56    40   720     0     102  ;
 30750    40   291    13    40   720     1      36  int
 30751    40   291    17    40   720     1     111  pos
 30752    40   291    21    40   720     1      67  =
 30753    40   291    23    40   720     1     111  position
 30754    40   291    31    40   720     1      59  (
 30755    40   291    32    40   720     1      60  )
 30756    40   291    33    40   720     1     102  ;
 30757    40   292    13    40   720     1      36  int
 30758    40   292    17    40   720     1     111  lim
 30759    40   292    21    40   720     1      67  =
 30760    40   292    23    40   720     1     111  limit
 30761    40   292    28    40   720     1      59  (
 30762    40   292    29    40   720     1      60  )
 30763    40   292    30    40   720     1     102  ;
 30764    40   293    13    40   720     0     111  assert
 30765    40   293    20    40   720     0      59  (
 30766    40   293    21    40   720     0     111  pos
 30767    40   293    25    40   720     0      92  <=
 30768    40   293    28    40   720     0     111  lim
 30769    40   293    31    40   720     0      60  )
 30770    40   293    32    40   720     0     102  ;
 30771    40   294    13    40   720     0      36  int
 30772    40   294    17    40   720     0     111  rem
 30773    40   294    21    40   720     0      67  =
 30774    40   294    23    40   720     0      59  (
 30775    40   294    24    40   720     0     111  pos
 30776    40   294    28    40   720     0      92  <=
 30777    40   294    31    40   720     0     111  lim
 30778    40   294    35    40   720     0      58  ?
 30779    40   294    37    40   720     0     111  lim
 30780    40   294    41    40   720     0      77  -
 30781    40   294    43    40   720     0     111  pos
 30782    40   294    47    40   720     0      65  :
 30783    40   294    49    40   720     0     112  0
 30784    40   294    50    40   720     0      60  )
 30785    40   294    51    40   720     0     102  ;
 30786    40   296    13    40   720     0      31  if
 30787    40   296    16    40   720     0      59  (
 30788    40   296    17    40   720     0     111  srem
 30789    40   296    22    40   720     0      89  >
 30790    40   296    24    40   720     0     111  rem
 30791    40   296    27    40   720     0      60  )
 30792    40   297    17    40   720     0      20  throw
 30793    40   297    23    40   720     0      15  new
 30794    40   297    27    40   720     0     111  BufferOverflowException
 30795    40   297    50    40   720     0      59  (
 30796    40   297    51    40   720     0      60  )
 30797    40   297    52    40   720     0     102  ;
 30798    40   298    13    40   720     0     111  unsafe.copyMemory
 30799    40   298    30    40   720     0      59  (
 30800    40   298    31    40   720     0     111  sb.ix
 30801    40   298    36    40   720     0      59  (
 30802    40   298    37    40   720     0     111  spos
 30803    40   298    41    40   720     0      60  )
 30804    40   298    42    40   720     0      66  ,
 30805    40   298    44    40   720     0     111  ix
 30806    40   298    46    40   720     0      59  (
 30807    40   298    47    40   720     0     111  pos
 30808    40   298    50    40   720     0      60  )
 30809    40   298    51    40   720     0      66  ,
 30810    40   298    53    40   720     0     111  srem
 30811    40   298    58    40   720     0      90  <<
 30812    40   298    61    40   720     0     112  3
 30813    40   298    62    40   720     0      60  )
 30814    40   298    63    40   720     0     102  ;
 30815    40   299    13    40   720     1     111  sb.position
 30816    40   299    24    40   720     1      59  (
 30817    40   299    25    40   720     1     111  spos
 30818    40   299    30    40   720     1      74  +
 30819    40   299    32    40   720     1     111  srem
 30820    40   299    36    40   720     1      60  )
 30821    40   299    37    40   720     1     102  ;
 30822    40   300    13    40   720     1     111  position
 30823    40   300    21    40   720     1      59  (
 30824    40   300    22    40   720     1     111  pos
 30825    40   300    26    40   720     1      74  +
 30826    40   300    28    40   720     1     111  srem
 30827    40   300    32    40   720     1      60  )
 30828    40   300    33    40   720     1     102  ;
 30829    40   301     9    40   720     0      64  }
 30830    40   301    11    40   720     0      48  else
 30831    40   301    16    40   720     0      31  if
 30832    40   301    19    40   720     0      59  (
 30833    40   301    20    40   720     0     111  src.hb
 30834    40   301    27    40   720     0      71  !=
 30835    40   301    30    40   720     0      21  null
 30836    40   301    34    40   720     0      60  )
 30837    40   301    36    40   720     0      63  {
 30838    40   303    13    40   720     1      36  int
 30839    40   303    17    40   720     1     111  spos
 30840    40   303    22    40   720     1      67  =
 30841    40   303    24    40   720     1     111  src.position
 30842    40   303    36    40   720     1      59  (
 30843    40   303    37    40   720     1      60  )
 30844    40   303    38    40   720     1     102  ;
 30845    40   304    13    40   720     1      36  int
 30846    40   304    17    40   720     1     111  slim
 30847    40   304    22    40   720     1      67  =
 30848    40   304    24    40   720     1     111  src.limit
 30849    40   304    33    40   720     1      59  (
 30850    40   304    34    40   720     1      60  )
 30851    40   304    35    40   720     1     102  ;
 30852    40   305    13    40   720     0     111  assert
 30853    40   305    20    40   720     0      59  (
 30854    40   305    21    40   720     0     111  spos
 30855    40   305    26    40   720     0      92  <=
 30856    40   305    29    40   720     0     111  slim
 30857    40   305    33    40   720     0      60  )
 30858    40   305    34    40   720     0     102  ;
 30859    40   306    13    40   720     0      36  int
 30860    40   306    17    40   720     0     111  srem
 30861    40   306    22    40   720     0      67  =
 30862    40   306    24    40   720     0      59  (
 30863    40   306    25    40   720     0     111  spos
 30864    40   306    30    40   720     0      92  <=
 30865    40   306    33    40   720     0     111  slim
 30866    40   306    38    40   720     0      58  ?
 30867    40   306    40    40   720     0     111  slim
 30868    40   306    45    40   720     0      77  -
 30869    40   306    47    40   720     0     111  spos
 30870    40   306    52    40   720     0      65  :
 30871    40   306    54    40   720     0     112  0
 30872    40   306    55    40   720     0      60  )
 30873    40   306    56    40   720     0     102  ;
 30874    40   308    13    40   720     0     111  put
 30875    40   308    16    40   720     0      59  (
 30876    40   308    17    40   720     0     111  src.hb
 30877    40   308    23    40   720     0      66  ,
 30878    40   308    25    40   720     0     111  src.offset
 30879    40   308    36    40   720     0      74  +
 30880    40   308    38    40   720     0     111  spos
 30881    40   308    42    40   720     0      66  ,
 30882    40   308    44    40   720     0     111  srem
 30883    40   308    48    40   720     0      60  )
 30884    40   308    49    40   720     0     102  ;
 30885    40   309    13    40   720     0     111  src.position
 30886    40   309    25    40   720     0      59  (
 30887    40   309    26    40   720     0     111  spos
 30888    40   309    31    40   720     0      74  +
 30889    40   309    33    40   720     0     111  srem
 30890    40   309    37    40   720     0      60  )
 30891    40   309    38    40   720     0     102  ;
 30892    40   311     9    40   720     0      64  }
 30893    40   311    11    40   720     0      48  else
 30894    40   311    16    40   720     0      63  {
 30895    40   312    13    40   720     0     111  super.put
 30896    40   312    22    40   720     0      59  (
 30897    40   312    23    40   720     0     111  src
 30898    40   312    26    40   720     0      60  )
 30899    40   312    27    40   720     0     102  ;
 30900    40   313     9    40   720     0      64  }
 30901    40   314     9    40   720     0      19  return
 30902    40   314    16    40   720     0      44  this
 30903    40   314    20    40   720     0     102  ;
 30904    40   318     5    40   720     0      64  }
 30905    40   318     5    40   720     0    1724  ENDMETHOD
 30906    40   318     5    40   721     0    1725  STARTMETHOD
 30907    40   320     5    40   721     0      10  public
 30908    40   320    12    40   721     0     111  DoubleBuffer
 30909    40   320    25    40   721     0     111  put
 30910    40   320    28    40   721     0      59  (
 30911    40   320    29    40   721     0      32  double
 30912    40   320    35    40   721     0      61  [
 30913    40   320    36    40   721     0      62  ]
 30914    40   320    38    40   721     0     111  src
 30915    40   320    41    40   721     0      66  ,
 30916    40   320    43    40   721     0      36  int
 30917    40   320    47    40   721     0     111  offset
 30918    40   320    53    40   721     0      66  ,
 30919    40   320    55    40   721     0      36  int
 30920    40   320    59    40   721     0     111  length
 30921    40   320    65    40   721     0      60  )
 30922    40   320    67    40   721     0      63  {
 30923    40   322     9    40   721     0      31  if
 30924    40   322    12    40   721     0      59  (
 30925    40   322    13    40   721     0      59  (
 30926    40   322    14    40   721     0     111  length
 30927    40   322    21    40   721     0      90  <<
 30928    40   322    24    40   721     0     112  3
 30929    40   322    25    40   721     0      60  )
 30930    40   322    27    40   721     0      89  >
 30931    40   322    29    40   721     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 30932    40   322    63    40   721     0      60  )
 30933    40   322    65    40   721     0      63  {
 30934    40   323    13    40   721     0     111  checkBounds
 30935    40   323    24    40   721     0      59  (
 30936    40   323    25    40   721     0     111  offset
 30937    40   323    31    40   721     0      66  ,
 30938    40   323    33    40   721     0     111  length
 30939    40   323    39    40   721     0      66  ,
 30940    40   323    41    40   721     0     111  src.length
 30941    40   323    51    40   721     0      60  )
 30942    40   323    52    40   721     0     102  ;
 30943    40   324    13    40   721     1      36  int
 30944    40   324    17    40   721     1     111  pos
 30945    40   324    21    40   721     1      67  =
 30946    40   324    23    40   721     1     111  position
 30947    40   324    31    40   721     1      59  (
 30948    40   324    32    40   721     1      60  )
 30949    40   324    33    40   721     1     102  ;
 30950    40   325    13    40   721     1      36  int
 30951    40   325    17    40   721     1     111  lim
 30952    40   325    21    40   721     1      67  =
 30953    40   325    23    40   721     1     111  limit
 30954    40   325    28    40   721     1      59  (
 30955    40   325    29    40   721     1      60  )
 30956    40   325    30    40   721     1     102  ;
 30957    40   326    13    40   721     0     111  assert
 30958    40   326    20    40   721     0      59  (
 30959    40   326    21    40   721     0     111  pos
 30960    40   326    25    40   721     0      92  <=
 30961    40   326    28    40   721     0     111  lim
 30962    40   326    31    40   721     0      60  )
 30963    40   326    32    40   721     0     102  ;
 30964    40   327    13    40   721     0      36  int
 30965    40   327    17    40   721     0     111  rem
 30966    40   327    21    40   721     0      67  =
 30967    40   327    23    40   721     0      59  (
 30968    40   327    24    40   721     0     111  pos
 30969    40   327    28    40   721     0      92  <=
 30970    40   327    31    40   721     0     111  lim
 30971    40   327    35    40   721     0      58  ?
 30972    40   327    37    40   721     0     111  lim
 30973    40   327    41    40   721     0      77  -
 30974    40   327    43    40   721     0     111  pos
 30975    40   327    47    40   721     0      65  :
 30976    40   327    49    40   721     0     112  0
 30977    40   327    50    40   721     0      60  )
 30978    40   327    51    40   721     0     102  ;
 30979    40   328    13    40   721     0      31  if
 30980    40   328    16    40   721     0      59  (
 30981    40   328    17    40   721     0     111  length
 30982    40   328    24    40   721     0      89  >
 30983    40   328    26    40   721     0     111  rem
 30984    40   328    29    40   721     0      60  )
 30985    40   329    17    40   721     0      20  throw
 30986    40   329    23    40   721     0      15  new
 30987    40   329    27    40   721     0     111  BufferOverflowException
 30988    40   329    50    40   721     0      59  (
 30989    40   329    51    40   721     0      60  )
 30990    40   329    52    40   721     0     102  ;
 30991    40   331    13    40   721     0      31  if
 30992    40   331    16    40   721     0      59  (
 30993    40   331    17    40   721     0     111  order
 30994    40   331    22    40   721     0      59  (
 30995    40   331    23    40   721     0      60  )
 30996    40   331    25    40   721     0      71  !=
 30997    40   331    28    40   721     0     111  ByteOrder.nativeOrder
 30998    40   331    49    40   721     0      59  (
 30999    40   331    50    40   721     0      60  )
 31000    40   331    51    40   721     0      60  )
 31001    40   332    17    40   721     0     111  Bits.copyFromLongArray
 31002    40   332    39    40   721     0      59  (
 31003    40   332    40    40   721     0     111  src
 31004    40   332    43    40   721     0      66  ,
 31005    40   332    45    40   721     0     111  offset
 31006    40   332    52    40   721     0      90  <<
 31007    40   332    55    40   721     0     112  3
 31008    40   332    56    40   721     0      66  ,
 31009    40   333    45    40   721     0     111  ix
 31010    40   333    47    40   721     0      59  (
 31011    40   333    48    40   721     0     111  pos
 31012    40   333    51    40   721     0      60  )
 31013    40   333    52    40   721     0      66  ,
 31014    40   333    54    40   721     0     111  length
 31015    40   333    61    40   721     0      90  <<
 31016    40   333    64    40   721     0     112  3
 31017    40   333    65    40   721     0      60  )
 31018    40   333    66    40   721     0     102  ;
 31019    40   334    13    40   721     0      48  else
 31020    40   335    17    40   721     0     111  Bits.copyFromByteArray
 31021    40   335    39    40   721     0      59  (
 31022    40   335    40    40   721     0     111  src
 31023    40   335    43    40   721     0      66  ,
 31024    40   335    45    40   721     0     111  offset
 31025    40   335    52    40   721     0      90  <<
 31026    40   335    55    40   721     0     112  3
 31027    40   335    56    40   721     0      66  ,
 31028    40   336    40    40   721     0     111  ix
 31029    40   336    42    40   721     0      59  (
 31030    40   336    43    40   721     0     111  pos
 31031    40   336    46    40   721     0      60  )
 31032    40   336    47    40   721     0      66  ,
 31033    40   336    49    40   721     0     111  length
 31034    40   336    56    40   721     0      90  <<
 31035    40   336    59    40   721     0     112  3
 31036    40   336    60    40   721     0      60  )
 31037    40   336    61    40   721     0     102  ;
 31038    40   337    13    40   721     0     111  position
 31039    40   337    21    40   721     0      59  (
 31040    40   337    22    40   721     0     111  pos
 31041    40   337    26    40   721     0      74  +
 31042    40   337    28    40   721     0     111  length
 31043    40   337    34    40   721     0      60  )
 31044    40   337    35    40   721     0     102  ;
 31045    40   338     9    40   721     0      64  }
 31046    40   338    11    40   721     0      48  else
 31047    40   338    16    40   721     0      63  {
 31048    40   339    13    40   721     0     111  super.put
 31049    40   339    22    40   721     0      59  (
 31050    40   339    23    40   721     0     111  src
 31051    40   339    26    40   721     0      66  ,
 31052    40   339    28    40   721     0     111  offset
 31053    40   339    34    40   721     0      66  ,
 31054    40   339    36    40   721     0     111  length
 31055    40   339    42    40   721     0      60  )
 31056    40   339    43    40   721     0     102  ;
 31057    40   340     9    40   721     0      64  }
 31058    40   341     9    40   721     0      19  return
 31059    40   341    16    40   721     0      44  this
 31060    40   341    20    40   721     0     102  ;
 31061    40   345     5    40   721     0      64  }
 31062    40   345     5    40   721     0    1726  ENDMETHOD
 31063    40   345     5    40   722     0    1727  STARTMETHOD
 31064    40   347     5    40   722     0      10  public
 31065    40   347    12    40   722     0     111  DoubleBuffer
 31066    40   347    25    40   722     0     111  compact
 31067    40   347    32    40   722     0      59  (
 31068    40   347    33    40   722     0      60  )
 31069    40   347    35    40   722     0      63  {
 31070    40   349     9    40   722     1      36  int
 31071    40   349    13    40   722     1     111  pos
 31072    40   349    17    40   722     1      67  =
 31073    40   349    19    40   722     1     111  position
 31074    40   349    27    40   722     1      59  (
 31075    40   349    28    40   722     1      60  )
 31076    40   349    29    40   722     1     102  ;
 31077    40   350     9    40   722     1      36  int
 31078    40   350    13    40   722     1     111  lim
 31079    40   350    17    40   722     1      67  =
 31080    40   350    19    40   722     1     111  limit
 31081    40   350    24    40   722     1      59  (
 31082    40   350    25    40   722     1      60  )
 31083    40   350    26    40   722     1     102  ;
 31084    40   351     9    40   722     0     111  assert
 31085    40   351    16    40   722     0      59  (
 31086    40   351    17    40   722     0     111  pos
 31087    40   351    21    40   722     0      92  <=
 31088    40   351    24    40   722     0     111  lim
 31089    40   351    27    40   722     0      60  )
 31090    40   351    28    40   722     0     102  ;
 31091    40   352     9    40   722     0      36  int
 31092    40   352    13    40   722     0     111  rem
 31093    40   352    17    40   722     0      67  =
 31094    40   352    19    40   722     0      59  (
 31095    40   352    20    40   722     0     111  pos
 31096    40   352    24    40   722     0      92  <=
 31097    40   352    27    40   722     0     111  lim
 31098    40   352    31    40   722     0      58  ?
 31099    40   352    33    40   722     0     111  lim
 31100    40   352    37    40   722     0      77  -
 31101    40   352    39    40   722     0     111  pos
 31102    40   352    43    40   722     0      65  :
 31103    40   352    45    40   722     0     112  0
 31104    40   352    46    40   722     0      60  )
 31105    40   352    47    40   722     0     102  ;
 31106    40   354     9    40   722     0     111  unsafe.copyMemory
 31107    40   354    26    40   722     0      59  (
 31108    40   354    27    40   722     0     111  ix
 31109    40   354    29    40   722     0      59  (
 31110    40   354    30    40   722     0     111  pos
 31111    40   354    33    40   722     0      60  )
 31112    40   354    34    40   722     0      66  ,
 31113    40   354    36    40   722     0     111  ix
 31114    40   354    38    40   722     0      59  (
 31115    40   354    39    40   722     0     112  0
 31116    40   354    40    40   722     0      60  )
 31117    40   354    41    40   722     0      66  ,
 31118    40   354    43    40   722     0     111  rem
 31119    40   354    47    40   722     0      90  <<
 31120    40   354    50    40   722     0     112  3
 31121    40   354    51    40   722     0      60  )
 31122    40   354    52    40   722     0     102  ;
 31123    40   355     9    40   722     0     111  position
 31124    40   355    17    40   722     0      59  (
 31125    40   355    18    40   722     0     111  rem
 31126    40   355    21    40   722     0      60  )
 31127    40   355    22    40   722     0     102  ;
 31128    40   356     9    40   722     0     111  limit
 31129    40   356    14    40   722     0      59  (
 31130    40   356    15    40   722     0     111  capacity
 31131    40   356    23    40   722     0      59  (
 31132    40   356    24    40   722     0      60  )
 31133    40   356    25    40   722     0      60  )
 31134    40   356    26    40   722     0     102  ;
 31135    40   357     9    40   722     0     111  clearMark
 31136    40   357    18    40   722     0      59  (
 31137    40   357    19    40   722     0      60  )
 31138    40   357    20    40   722     0     102  ;
 31139    40   358     9    40   722     0      19  return
 31140    40   358    16    40   722     0      44  this
 31141    40   358    20    40   722     1     102  ;
 31142    40   362     5    40   722     1      64  }
 31143    40   362     5    40   722     0    1728  ENDMETHOD
 31144    40   362     5    40   723     0    1729  STARTMETHOD
 31145    40   364     5    40   723     0      10  public
 31146    40   364    12    40   723     0      39  boolean
 31147    40   364    20    40   723     0     111  isDirect
 31148    40   364    28    40   723     0      59  (
 31149    40   364    29    40   723     0      60  )
 31150    40   364    31    40   723     0      63  {
 31151    40   365     9    40   723     0      19  return
 31152    40   365    16    40   723     0      52  true
 31153    40   365    20    40   723     1     102  ;
 31154    40   366     5    40   723     1      64  }
 31155    40   366     5    40   723     0    1730  ENDMETHOD
 31156    40   366     5    40   724     0    1731  STARTMETHOD
 31157    40   368     5    40   724     0      10  public
 31158    40   368    12    40   724     0      39  boolean
 31159    40   368    20    40   724     0     111  isReadOnly
 31160    40   368    30    40   724     0      59  (
 31161    40   368    31    40   724     0      60  )
 31162    40   368    33    40   724     0      63  {
 31163    40   369     9    40   724     0      19  return
 31164    40   369    16    40   724     0      43  false
 31165    40   369    21    40   724     1     102  ;
 31166    40   370     5    40   724     1      64  }
 31167    40   370     5    40   724     0    1732  ENDMETHOD
 31168    40   370     5    40   725     0    1733  STARTMETHOD
 31169    40   416     5    40   725     0      10  public
 31170    40   416    12    40   725     0     111  ByteOrder
 31171    40   416    22    40   725     0     111  order
 31172    40   416    27    40   725     0      59  (
 31173    40   416    28    40   725     0      60  )
 31174    40   416    30    40   725     0      63  {
 31175    40   422     9    40   725     0      19  return
 31176    40   422    16    40   725     0      59  (
 31177    40   422    17    40   725     0      59  (
 31178    40   422    18    40   725     0     111  ByteOrder.nativeOrder
 31179    40   422    39    40   725     0      59  (
 31180    40   422    40    40   725     0      60  )
 31181    40   422    42    40   725     0      71  !=
 31182    40   422    45    40   725     0     111  ByteOrder.BIG_ENDIAN
 31183    40   422    65    40   725     0      60  )
 31184    40   423    17    40   725     0      58  ?
 31185    40   423    19    40   725     0     111  ByteOrder.LITTLE_ENDIAN
 31186    40   423    43    40   725     0      65  :
 31187    40   423    45    40   725     0     111  ByteOrder.BIG_ENDIAN
 31188    40   423    65    40   725     0      60  )
 31189    40   423    66    40   725     0     102  ;
 31190    40   425     5    40   725     0      64  }
 31191    40   425     5    40   725     0    1734  ENDMETHOD
 31192    40   452     1    40    -1     0      64  }
 31193    40   452     1    40    -1     1    1735  ENDCLASS
 31194    40   452     1    -1    -1     1    1736  ENDFILE C:\javasrc\java\nio\DirectDoubleBufferU.java
 31195    41     1     1    -1    -1     1    1737  STARTFILE C:\javasrc\java\nio\DirectFloatBufferRS.java
 31196    41    28     1    -1    -1     0       5  package
 31197    41    28     9    -1    -1     0     111  java.nio
 31198    41    28    17    -1    -1     0     102  ;
 31199    41    30     1    -1    -1     1      49  import
 31200    41    30     8    -1    -1     1     111  sun.misc.Cleaner
 31201    41    30    24    -1    -1     1     102  ;
 31202    41    31     1    -1    -1     1      49  import
 31203    41    31     8    -1    -1     1     111  sun.misc.Unsafe
 31204    41    31    23    -1    -1     1     102  ;
 31205    41    32     1    -1    -1     1      49  import
 31206    41    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 31207    41    32    31    -1    -1     1     102  ;
 31208    41    33     1    -1    -1     1      49  import
 31209    41    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 31210    41    33    34    -1    -1     1     102  ;
 31211    41    36     1    41    -1     0    1738  STARTCLASS
 31212    41    36     1    41    -1     0      24  class
 31213    41    36     7    41    -1     0     111  DirectFloatBufferRS
 31214    41    40     5    41    -1     0      38  extends
 31215    41    40    13    41    -1     0     111  DirectFloatBufferS
 31216    41    42     5    41    -1     0      17  implements
 31217    41    42    16    41    -1     0     111  DirectBuffer
 31218    41    43     1    41    -1     0      63  {
 31219    41    43     1    41   726     0    1739  STARTMETHOD
 31220    41   164     5    41   726     0     111  DirectFloatBufferRS
 31221    41   164    24    41   726     0      59  (
 31222    41   164    25    41   726     0     111  DirectBuffer
 31223    41   164    38    41   726     0     111  db
 31224    41   164    40    41   726     0      66  ,
 31225    41   165    32    41   726     0      36  int
 31226    41   165    36    41   726     0     111  mark
 31227    41   165    40    41   726     0      66  ,
 31228    41   165    42    41   726     0      36  int
 31229    41   165    46    41   726     0     111  pos
 31230    41   165    49    41   726     0      66  ,
 31231    41   165    51    41   726     0      36  int
 31232    41   165    55    41   726     0     111  lim
 31233    41   165    58    41   726     0      66  ,
 31234    41   165    60    41   726     0      36  int
 31235    41   165    64    41   726     0     111  cap
 31236    41   165    67    41   726     0      66  ,
 31237    41   166    32    41   726     0      36  int
 31238    41   166    36    41   726     0     111  off
 31239    41   166    39    41   726     0      60  )
 31240    41   167     5    41   726     0      63  {
 31241    41   176     9    41   726     0      27  super
 31242    41   176    14    41   726     0      59  (
 31243    41   176    15    41   726     0     111  db
 31244    41   176    17    41   726     0      66  ,
 31245    41   176    19    41   726     0     111  mark
 31246    41   176    23    41   726     0      66  ,
 31247    41   176    25    41   726     0     111  pos
 31248    41   176    28    41   726     0      66  ,
 31249    41   176    30    41   726     0     111  lim
 31250    41   176    33    41   726     0      66  ,
 31251    41   176    35    41   726     0     111  cap
 31252    41   176    38    41   726     0      66  ,
 31253    41   176    40    41   726     0     111  off
 31254    41   176    43    41   726     0      60  )
 31255    41   176    44    41   726     0     102  ;
 31256    41   178     5    41   726     0      64  }
 31257    41   178     5    41   726     0    1740  ENDMETHOD
 31258    41   178     5    41   727     0    1741  STARTMETHOD
 31259    41   180     5    41   727     0      10  public
 31260    41   180    12    41   727     0     111  FloatBuffer
 31261    41   180    24    41   727     0     111  slice
 31262    41   180    29    41   727     0      59  (
 31263    41   180    30    41   727     0      60  )
 31264    41   180    32    41   727     0      63  {
 31265    41   181     9    41   727     1      36  int
 31266    41   181    13    41   727     1     111  pos
 31267    41   181    17    41   727     1      67  =
 31268    41   181    19    41   727     1     111  this.position
 31269    41   181    32    41   727     1      59  (
 31270    41   181    33    41   727     1      60  )
 31271    41   181    34    41   727     1     102  ;
 31272    41   182     9    41   727     1      36  int
 31273    41   182    13    41   727     1     111  lim
 31274    41   182    17    41   727     1      67  =
 31275    41   182    19    41   727     1     111  this.limit
 31276    41   182    29    41   727     1      59  (
 31277    41   182    30    41   727     1      60  )
 31278    41   182    31    41   727     1     102  ;
 31279    41   183     9    41   727     0     111  assert
 31280    41   183    16    41   727     0      59  (
 31281    41   183    17    41   727     0     111  pos
 31282    41   183    21    41   727     0      92  <=
 31283    41   183    24    41   727     0     111  lim
 31284    41   183    27    41   727     0      60  )
 31285    41   183    28    41   727     0     102  ;
 31286    41   184     9    41   727     0      36  int
 31287    41   184    13    41   727     0     111  rem
 31288    41   184    17    41   727     0      67  =
 31289    41   184    19    41   727     0      59  (
 31290    41   184    20    41   727     0     111  pos
 31291    41   184    24    41   727     0      92  <=
 31292    41   184    27    41   727     0     111  lim
 31293    41   184    31    41   727     0      58  ?
 31294    41   184    33    41   727     0     111  lim
 31295    41   184    37    41   727     0      77  -
 31296    41   184    39    41   727     0     111  pos
 31297    41   184    43    41   727     0      65  :
 31298    41   184    45    41   727     0     112  0
 31299    41   184    46    41   727     0      60  )
 31300    41   184    47    41   727     0     102  ;
 31301    41   185     9    41   727     0      36  int
 31302    41   185    13    41   727     0     111  off
 31303    41   185    17    41   727     0      67  =
 31304    41   185    19    41   727     0      59  (
 31305    41   185    20    41   727     0     111  pos
 31306    41   185    24    41   727     0      90  <<
 31307    41   185    27    41   727     0     112  2
 31308    41   185    28    41   727     0      60  )
 31309    41   185    29    41   727     0     102  ;
 31310    41   186     9    41   727     0     111  assert
 31311    41   186    16    41   727     0      59  (
 31312    41   186    17    41   727     0     111  off
 31313    41   186    21    41   727     0      88  >=
 31314    41   186    24    41   727     0     112  0
 31315    41   186    25    41   727     0      60  )
 31316    41   186    26    41   727     0     102  ;
 31317    41   187     9    41   727     0      19  return
 31318    41   187    16    41   727     0      15  new
 31319    41   187    20    41   727     0     111  DirectFloatBufferRS
 31320    41   187    39    41   727     0      59  (
 31321    41   187    40    41   727     0      44  this
 31322    41   187    44    41   727     0      66  ,
 31323    41   187    46    41   727     0      77  -
 31324    41   187    47    41   727     0     112  1
 31325    41   187    48    41   727     0      66  ,
 31326    41   187    50    41   727     0     112  0
 31327    41   187    51    41   727     0      66  ,
 31328    41   187    53    41   727     0     111  rem
 31329    41   187    56    41   727     0      66  ,
 31330    41   187    58    41   727     0     111  rem
 31331    41   187    61    41   727     0      66  ,
 31332    41   187    63    41   727     0     111  off
 31333    41   187    66    41   727     0      60  )
 31334    41   187    67    41   727     0     102  ;
 31335    41   188     5    41   727     0      64  }
 31336    41   188     5    41   727     0    1742  ENDMETHOD
 31337    41   188     5    41   728     0    1743  STARTMETHOD
 31338    41   190     5    41   728     0      10  public
 31339    41   190    12    41   728     0     111  FloatBuffer
 31340    41   190    24    41   728     0     111  duplicate
 31341    41   190    33    41   728     0      59  (
 31342    41   190    34    41   728     0      60  )
 31343    41   190    36    41   728     0      63  {
 31344    41   191     9    41   728     0      19  return
 31345    41   191    16    41   728     0      15  new
 31346    41   191    20    41   728     0     111  DirectFloatBufferRS
 31347    41   191    39    41   728     0      59  (
 31348    41   191    40    41   728     0      44  this
 31349    41   191    44    41   728     0      66  ,
 31350    41   192    47    41   728     1     111  this.markValue
 31351    41   192    61    41   728     1      59  (
 31352    41   192    62    41   728     1      60  )
 31353    41   192    63    41   728     1      66  ,
 31354    41   193    47    41   728     1     111  this.position
 31355    41   193    60    41   728     1      59  (
 31356    41   193    61    41   728     1      60  )
 31357    41   193    62    41   728     1      66  ,
 31358    41   194    47    41   728     1     111  this.limit
 31359    41   194    57    41   728     1      59  (
 31360    41   194    58    41   728     1      60  )
 31361    41   194    59    41   728     1      66  ,
 31362    41   195    47    41   728     1     111  this.capacity
 31363    41   195    60    41   728     1      59  (
 31364    41   195    61    41   728     1      60  )
 31365    41   195    62    41   728     1      66  ,
 31366    41   196    47    41   728     0     112  0
 31367    41   196    48    41   728     0      60  )
 31368    41   196    49    41   728     0     102  ;
 31369    41   197     5    41   728     0      64  }
 31370    41   197     5    41   728     0    1744  ENDMETHOD
 31371    41   197     5    41   729     0    1745  STARTMETHOD
 31372    41   199     5    41   729     0      10  public
 31373    41   199    12    41   729     0     111  FloatBuffer
 31374    41   199    24    41   729     0     111  asReadOnlyBuffer
 31375    41   199    40    41   729     0      59  (
 31376    41   199    41    41   729     0      60  )
 31377    41   199    43    41   729     0      63  {
 31378    41   208     9    41   729     0      19  return
 31379    41   208    16    41   729     0     111  duplicate
 31380    41   208    25    41   729     0      59  (
 31381    41   208    26    41   729     0      60  )
 31382    41   208    27    41   729     0     102  ;
 31383    41   210     5    41   729     0      64  }
 31384    41   210     5    41   729     0    1746  ENDMETHOD
 31385    41   210     5    41   730     0    1747  STARTMETHOD
 31386    41   261     5    41   730     0      10  public
 31387    41   261    12    41   730     0     111  FloatBuffer
 31388    41   261    24    41   730     0     111  put
 31389    41   261    27    41   730     0      59  (
 31390    41   261    28    41   730     0       4  float
 31391    41   261    34    41   730     0     111  x
 31392    41   261    35    41   730     0      60  )
 31393    41   261    37    41   730     0      63  {
 31394    41   266     9    41   730     0      20  throw
 31395    41   266    15    41   730     0      15  new
 31396    41   266    19    41   730     0     111  ReadOnlyBufferException
 31397    41   266    42    41   730     0      59  (
 31398    41   266    43    41   730     0      60  )
 31399    41   266    44    41   730     0     102  ;
 31400    41   268     5    41   730     0      64  }
 31401    41   268     5    41   730     0    1748  ENDMETHOD
 31402    41   268     5    41   731     0    1749  STARTMETHOD
 31403    41   270     5    41   731     0      10  public
 31404    41   270    12    41   731     0     111  FloatBuffer
 31405    41   270    24    41   731     0     111  put
 31406    41   270    27    41   731     0      59  (
 31407    41   270    28    41   731     0      36  int
 31408    41   270    32    41   731     0     111  i
 31409    41   270    33    41   731     0      66  ,
 31410    41   270    35    41   731     0       4  float
 31411    41   270    41    41   731     0     111  x
 31412    41   270    42    41   731     0      60  )
 31413    41   270    44    41   731     0      63  {
 31414    41   275     9    41   731     0      20  throw
 31415    41   275    15    41   731     0      15  new
 31416    41   275    19    41   731     0     111  ReadOnlyBufferException
 31417    41   275    42    41   731     0      59  (
 31418    41   275    43    41   731     0      60  )
 31419    41   275    44    41   731     0     102  ;
 31420    41   277     5    41   731     0      64  }
 31421    41   277     5    41   731     0    1750  ENDMETHOD
 31422    41   277     5    41   732     0    1751  STARTMETHOD
 31423    41   279     5    41   732     0      10  public
 31424    41   279    12    41   732     0     111  FloatBuffer
 31425    41   279    24    41   732     0     111  put
 31426    41   279    27    41   732     0      59  (
 31427    41   279    28    41   732     0     111  FloatBuffer
 31428    41   279    40    41   732     0     111  src
 31429    41   279    43    41   732     0      60  )
 31430    41   279    45    41   732     0      63  {
 31431    41   316     9    41   732     0      20  throw
 31432    41   316    15    41   732     0      15  new
 31433    41   316    19    41   732     0     111  ReadOnlyBufferException
 31434    41   316    42    41   732     0      59  (
 31435    41   316    43    41   732     0      60  )
 31436    41   316    44    41   732     0     102  ;
 31437    41   318     5    41   732     0      64  }
 31438    41   318     5    41   732     0    1752  ENDMETHOD
 31439    41   318     5    41   733     0    1753  STARTMETHOD
 31440    41   320     5    41   733     0      10  public
 31441    41   320    12    41   733     0     111  FloatBuffer
 31442    41   320    24    41   733     0     111  put
 31443    41   320    27    41   733     0      59  (
 31444    41   320    28    41   733     0       4  float
 31445    41   320    33    41   733     0      61  [
 31446    41   320    34    41   733     0      62  ]
 31447    41   320    36    41   733     0     111  src
 31448    41   320    39    41   733     0      66  ,
 31449    41   320    41    41   733     0      36  int
 31450    41   320    45    41   733     0     111  offset
 31451    41   320    51    41   733     0      66  ,
 31452    41   320    53    41   733     0      36  int
 31453    41   320    57    41   733     0     111  length
 31454    41   320    63    41   733     0      60  )
 31455    41   320    65    41   733     0      63  {
 31456    41   343     9    41   733     0      20  throw
 31457    41   343    15    41   733     0      15  new
 31458    41   343    19    41   733     0     111  ReadOnlyBufferException
 31459    41   343    42    41   733     0      59  (
 31460    41   343    43    41   733     0      60  )
 31461    41   343    44    41   733     0     102  ;
 31462    41   345     5    41   733     0      64  }
 31463    41   345     5    41   733     0    1754  ENDMETHOD
 31464    41   345     5    41   734     0    1755  STARTMETHOD
 31465    41   347     5    41   734     0      10  public
 31466    41   347    12    41   734     0     111  FloatBuffer
 31467    41   347    24    41   734     0     111  compact
 31468    41   347    31    41   734     0      59  (
 31469    41   347    32    41   734     0      60  )
 31470    41   347    34    41   734     0      63  {
 31471    41   360     9    41   734     0      20  throw
 31472    41   360    15    41   734     0      15  new
 31473    41   360    19    41   734     0     111  ReadOnlyBufferException
 31474    41   360    42    41   734     0      59  (
 31475    41   360    43    41   734     0      60  )
 31476    41   360    44    41   734     1     102  ;
 31477    41   362     5    41   734     1      64  }
 31478    41   362     5    41   734     0    1756  ENDMETHOD
 31479    41   362     5    41   735     0    1757  STARTMETHOD
 31480    41   364     5    41   735     0      10  public
 31481    41   364    12    41   735     0      39  boolean
 31482    41   364    20    41   735     0     111  isDirect
 31483    41   364    28    41   735     0      59  (
 31484    41   364    29    41   735     0      60  )
 31485    41   364    31    41   735     0      63  {
 31486    41   365     9    41   735     0      19  return
 31487    41   365    16    41   735     0      52  true
 31488    41   365    20    41   735     1     102  ;
 31489    41   366     5    41   735     1      64  }
 31490    41   366     5    41   735     0    1758  ENDMETHOD
 31491    41   366     5    41   736     0    1759  STARTMETHOD
 31492    41   368     5    41   736     0      10  public
 31493    41   368    12    41   736     0      39  boolean
 31494    41   368    20    41   736     0     111  isReadOnly
 31495    41   368    30    41   736     0      59  (
 31496    41   368    31    41   736     0      60  )
 31497    41   368    33    41   736     0      63  {
 31498    41   369     9    41   736     0      19  return
 31499    41   369    16    41   736     0      52  true
 31500    41   369    20    41   736     1     102  ;
 31501    41   370     5    41   736     1      64  }
 31502    41   370     5    41   736     0    1760  ENDMETHOD
 31503    41   370     5    41   737     0    1761  STARTMETHOD
 31504    41   416     5    41   737     0      10  public
 31505    41   416    12    41   737     0     111  ByteOrder
 31506    41   416    22    41   737     0     111  order
 31507    41   416    27    41   737     0      59  (
 31508    41   416    28    41   737     0      60  )
 31509    41   416    30    41   737     0      63  {
 31510    41   418     9    41   737     0      19  return
 31511    41   418    16    41   737     0      59  (
 31512    41   418    17    41   737     0      59  (
 31513    41   418    18    41   737     0     111  ByteOrder.nativeOrder
 31514    41   418    39    41   737     0      59  (
 31515    41   418    40    41   737     0      60  )
 31516    41   418    42    41   737     0      68  ==
 31517    41   418    45    41   737     0     111  ByteOrder.BIG_ENDIAN
 31518    41   418    65    41   737     0      60  )
 31519    41   419    17    41   737     0      58  ?
 31520    41   419    19    41   737     0     111  ByteOrder.LITTLE_ENDIAN
 31521    41   419    43    41   737     0      65  :
 31522    41   419    45    41   737     0     111  ByteOrder.BIG_ENDIAN
 31523    41   419    65    41   737     0      60  )
 31524    41   419    66    41   737     0     102  ;
 31525    41   425     5    41   737     0      64  }
 31526    41   425     5    41   737     0    1762  ENDMETHOD
 31527    41   452     1    41    -1     0      64  }
 31528    41   452     1    41    -1     1    1763  ENDCLASS
 31529    41   452     1    -1    -1     1    1764  ENDFILE C:\javasrc\java\nio\DirectFloatBufferRS.java
 31530    42     1     1    -1    -1     1    1765  STARTFILE C:\javasrc\java\nio\DirectFloatBufferRU.java
 31531    42    28     1    -1    -1     0       5  package
 31532    42    28     9    -1    -1     0     111  java.nio
 31533    42    28    17    -1    -1     0     102  ;
 31534    42    30     1    -1    -1     1      49  import
 31535    42    30     8    -1    -1     1     111  sun.misc.Cleaner
 31536    42    30    24    -1    -1     1     102  ;
 31537    42    31     1    -1    -1     1      49  import
 31538    42    31     8    -1    -1     1     111  sun.misc.Unsafe
 31539    42    31    23    -1    -1     1     102  ;
 31540    42    32     1    -1    -1     1      49  import
 31541    42    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 31542    42    32    31    -1    -1     1     102  ;
 31543    42    33     1    -1    -1     1      49  import
 31544    42    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 31545    42    33    34    -1    -1     1     102  ;
 31546    42    36     1    42    -1     0    1766  STARTCLASS
 31547    42    36     1    42    -1     0      24  class
 31548    42    36     7    42    -1     0     111  DirectFloatBufferRU
 31549    42    40     5    42    -1     0      38  extends
 31550    42    40    13    42    -1     0     111  DirectFloatBufferU
 31551    42    42     5    42    -1     0      17  implements
 31552    42    42    16    42    -1     0     111  DirectBuffer
 31553    42    43     1    42    -1     0      63  {
 31554    42    43     1    42   738     0    1767  STARTMETHOD
 31555    42   164     5    42   738     0     111  DirectFloatBufferRU
 31556    42   164    24    42   738     0      59  (
 31557    42   164    25    42   738     0     111  DirectBuffer
 31558    42   164    38    42   738     0     111  db
 31559    42   164    40    42   738     0      66  ,
 31560    42   165    32    42   738     0      36  int
 31561    42   165    36    42   738     0     111  mark
 31562    42   165    40    42   738     0      66  ,
 31563    42   165    42    42   738     0      36  int
 31564    42   165    46    42   738     0     111  pos
 31565    42   165    49    42   738     0      66  ,
 31566    42   165    51    42   738     0      36  int
 31567    42   165    55    42   738     0     111  lim
 31568    42   165    58    42   738     0      66  ,
 31569    42   165    60    42   738     0      36  int
 31570    42   165    64    42   738     0     111  cap
 31571    42   165    67    42   738     0      66  ,
 31572    42   166    32    42   738     0      36  int
 31573    42   166    36    42   738     0     111  off
 31574    42   166    39    42   738     0      60  )
 31575    42   167     5    42   738     0      63  {
 31576    42   176     9    42   738     0      27  super
 31577    42   176    14    42   738     0      59  (
 31578    42   176    15    42   738     0     111  db
 31579    42   176    17    42   738     0      66  ,
 31580    42   176    19    42   738     0     111  mark
 31581    42   176    23    42   738     0      66  ,
 31582    42   176    25    42   738     0     111  pos
 31583    42   176    28    42   738     0      66  ,
 31584    42   176    30    42   738     0     111  lim
 31585    42   176    33    42   738     0      66  ,
 31586    42   176    35    42   738     0     111  cap
 31587    42   176    38    42   738     0      66  ,
 31588    42   176    40    42   738     0     111  off
 31589    42   176    43    42   738     0      60  )
 31590    42   176    44    42   738     0     102  ;
 31591    42   178     5    42   738     0      64  }
 31592    42   178     5    42   738     0    1768  ENDMETHOD
 31593    42   178     5    42   739     0    1769  STARTMETHOD
 31594    42   180     5    42   739     0      10  public
 31595    42   180    12    42   739     0     111  FloatBuffer
 31596    42   180    24    42   739     0     111  slice
 31597    42   180    29    42   739     0      59  (
 31598    42   180    30    42   739     0      60  )
 31599    42   180    32    42   739     0      63  {
 31600    42   181     9    42   739     1      36  int
 31601    42   181    13    42   739     1     111  pos
 31602    42   181    17    42   739     1      67  =
 31603    42   181    19    42   739     1     111  this.position
 31604    42   181    32    42   739     1      59  (
 31605    42   181    33    42   739     1      60  )
 31606    42   181    34    42   739     1     102  ;
 31607    42   182     9    42   739     1      36  int
 31608    42   182    13    42   739     1     111  lim
 31609    42   182    17    42   739     1      67  =
 31610    42   182    19    42   739     1     111  this.limit
 31611    42   182    29    42   739     1      59  (
 31612    42   182    30    42   739     1      60  )
 31613    42   182    31    42   739     1     102  ;
 31614    42   183     9    42   739     0     111  assert
 31615    42   183    16    42   739     0      59  (
 31616    42   183    17    42   739     0     111  pos
 31617    42   183    21    42   739     0      92  <=
 31618    42   183    24    42   739     0     111  lim
 31619    42   183    27    42   739     0      60  )
 31620    42   183    28    42   739     0     102  ;
 31621    42   184     9    42   739     0      36  int
 31622    42   184    13    42   739     0     111  rem
 31623    42   184    17    42   739     0      67  =
 31624    42   184    19    42   739     0      59  (
 31625    42   184    20    42   739     0     111  pos
 31626    42   184    24    42   739     0      92  <=
 31627    42   184    27    42   739     0     111  lim
 31628    42   184    31    42   739     0      58  ?
 31629    42   184    33    42   739     0     111  lim
 31630    42   184    37    42   739     0      77  -
 31631    42   184    39    42   739     0     111  pos
 31632    42   184    43    42   739     0      65  :
 31633    42   184    45    42   739     0     112  0
 31634    42   184    46    42   739     0      60  )
 31635    42   184    47    42   739     0     102  ;
 31636    42   185     9    42   739     0      36  int
 31637    42   185    13    42   739     0     111  off
 31638    42   185    17    42   739     0      67  =
 31639    42   185    19    42   739     0      59  (
 31640    42   185    20    42   739     0     111  pos
 31641    42   185    24    42   739     0      90  <<
 31642    42   185    27    42   739     0     112  2
 31643    42   185    28    42   739     0      60  )
 31644    42   185    29    42   739     0     102  ;
 31645    42   186     9    42   739     0     111  assert
 31646    42   186    16    42   739     0      59  (
 31647    42   186    17    42   739     0     111  off
 31648    42   186    21    42   739     0      88  >=
 31649    42   186    24    42   739     0     112  0
 31650    42   186    25    42   739     0      60  )
 31651    42   186    26    42   739     0     102  ;
 31652    42   187     9    42   739     0      19  return
 31653    42   187    16    42   739     0      15  new
 31654    42   187    20    42   739     0     111  DirectFloatBufferRU
 31655    42   187    39    42   739     0      59  (
 31656    42   187    40    42   739     0      44  this
 31657    42   187    44    42   739     0      66  ,
 31658    42   187    46    42   739     0      77  -
 31659    42   187    47    42   739     0     112  1
 31660    42   187    48    42   739     0      66  ,
 31661    42   187    50    42   739     0     112  0
 31662    42   187    51    42   739     0      66  ,
 31663    42   187    53    42   739     0     111  rem
 31664    42   187    56    42   739     0      66  ,
 31665    42   187    58    42   739     0     111  rem
 31666    42   187    61    42   739     0      66  ,
 31667    42   187    63    42   739     0     111  off
 31668    42   187    66    42   739     0      60  )
 31669    42   187    67    42   739     0     102  ;
 31670    42   188     5    42   739     0      64  }
 31671    42   188     5    42   739     0    1770  ENDMETHOD
 31672    42   188     5    42   740     0    1771  STARTMETHOD
 31673    42   190     5    42   740     0      10  public
 31674    42   190    12    42   740     0     111  FloatBuffer
 31675    42   190    24    42   740     0     111  duplicate
 31676    42   190    33    42   740     0      59  (
 31677    42   190    34    42   740     0      60  )
 31678    42   190    36    42   740     0      63  {
 31679    42   191     9    42   740     0      19  return
 31680    42   191    16    42   740     0      15  new
 31681    42   191    20    42   740     0     111  DirectFloatBufferRU
 31682    42   191    39    42   740     0      59  (
 31683    42   191    40    42   740     0      44  this
 31684    42   191    44    42   740     0      66  ,
 31685    42   192    47    42   740     1     111  this.markValue
 31686    42   192    61    42   740     1      59  (
 31687    42   192    62    42   740     1      60  )
 31688    42   192    63    42   740     1      66  ,
 31689    42   193    47    42   740     1     111  this.position
 31690    42   193    60    42   740     1      59  (
 31691    42   193    61    42   740     1      60  )
 31692    42   193    62    42   740     1      66  ,
 31693    42   194    47    42   740     1     111  this.limit
 31694    42   194    57    42   740     1      59  (
 31695    42   194    58    42   740     1      60  )
 31696    42   194    59    42   740     1      66  ,
 31697    42   195    47    42   740     1     111  this.capacity
 31698    42   195    60    42   740     1      59  (
 31699    42   195    61    42   740     1      60  )
 31700    42   195    62    42   740     1      66  ,
 31701    42   196    47    42   740     0     112  0
 31702    42   196    48    42   740     0      60  )
 31703    42   196    49    42   740     0     102  ;
 31704    42   197     5    42   740     0      64  }
 31705    42   197     5    42   740     0    1772  ENDMETHOD
 31706    42   197     5    42   741     0    1773  STARTMETHOD
 31707    42   199     5    42   741     0      10  public
 31708    42   199    12    42   741     0     111  FloatBuffer
 31709    42   199    24    42   741     0     111  asReadOnlyBuffer
 31710    42   199    40    42   741     0      59  (
 31711    42   199    41    42   741     0      60  )
 31712    42   199    43    42   741     0      63  {
 31713    42   208     9    42   741     0      19  return
 31714    42   208    16    42   741     0     111  duplicate
 31715    42   208    25    42   741     0      59  (
 31716    42   208    26    42   741     0      60  )
 31717    42   208    27    42   741     0     102  ;
 31718    42   210     5    42   741     0      64  }
 31719    42   210     5    42   741     0    1774  ENDMETHOD
 31720    42   210     5    42   742     0    1775  STARTMETHOD
 31721    42   261     5    42   742     0      10  public
 31722    42   261    12    42   742     0     111  FloatBuffer
 31723    42   261    24    42   742     0     111  put
 31724    42   261    27    42   742     0      59  (
 31725    42   261    28    42   742     0       4  float
 31726    42   261    34    42   742     0     111  x
 31727    42   261    35    42   742     0      60  )
 31728    42   261    37    42   742     0      63  {
 31729    42   266     9    42   742     0      20  throw
 31730    42   266    15    42   742     0      15  new
 31731    42   266    19    42   742     0     111  ReadOnlyBufferException
 31732    42   266    42    42   742     0      59  (
 31733    42   266    43    42   742     0      60  )
 31734    42   266    44    42   742     0     102  ;
 31735    42   268     5    42   742     0      64  }
 31736    42   268     5    42   742     0    1776  ENDMETHOD
 31737    42   268     5    42   743     0    1777  STARTMETHOD
 31738    42   270     5    42   743     0      10  public
 31739    42   270    12    42   743     0     111  FloatBuffer
 31740    42   270    24    42   743     0     111  put
 31741    42   270    27    42   743     0      59  (
 31742    42   270    28    42   743     0      36  int
 31743    42   270    32    42   743     0     111  i
 31744    42   270    33    42   743     0      66  ,
 31745    42   270    35    42   743     0       4  float
 31746    42   270    41    42   743     0     111  x
 31747    42   270    42    42   743     0      60  )
 31748    42   270    44    42   743     0      63  {
 31749    42   275     9    42   743     0      20  throw
 31750    42   275    15    42   743     0      15  new
 31751    42   275    19    42   743     0     111  ReadOnlyBufferException
 31752    42   275    42    42   743     0      59  (
 31753    42   275    43    42   743     0      60  )
 31754    42   275    44    42   743     0     102  ;
 31755    42   277     5    42   743     0      64  }
 31756    42   277     5    42   743     0    1778  ENDMETHOD
 31757    42   277     5    42   744     0    1779  STARTMETHOD
 31758    42   279     5    42   744     0      10  public
 31759    42   279    12    42   744     0     111  FloatBuffer
 31760    42   279    24    42   744     0     111  put
 31761    42   279    27    42   744     0      59  (
 31762    42   279    28    42   744     0     111  FloatBuffer
 31763    42   279    40    42   744     0     111  src
 31764    42   279    43    42   744     0      60  )
 31765    42   279    45    42   744     0      63  {
 31766    42   316     9    42   744     0      20  throw
 31767    42   316    15    42   744     0      15  new
 31768    42   316    19    42   744     0     111  ReadOnlyBufferException
 31769    42   316    42    42   744     0      59  (
 31770    42   316    43    42   744     0      60  )
 31771    42   316    44    42   744     0     102  ;
 31772    42   318     5    42   744     0      64  }
 31773    42   318     5    42   744     0    1780  ENDMETHOD
 31774    42   318     5    42   745     0    1781  STARTMETHOD
 31775    42   320     5    42   745     0      10  public
 31776    42   320    12    42   745     0     111  FloatBuffer
 31777    42   320    24    42   745     0     111  put
 31778    42   320    27    42   745     0      59  (
 31779    42   320    28    42   745     0       4  float
 31780    42   320    33    42   745     0      61  [
 31781    42   320    34    42   745     0      62  ]
 31782    42   320    36    42   745     0     111  src
 31783    42   320    39    42   745     0      66  ,
 31784    42   320    41    42   745     0      36  int
 31785    42   320    45    42   745     0     111  offset
 31786    42   320    51    42   745     0      66  ,
 31787    42   320    53    42   745     0      36  int
 31788    42   320    57    42   745     0     111  length
 31789    42   320    63    42   745     0      60  )
 31790    42   320    65    42   745     0      63  {
 31791    42   343     9    42   745     0      20  throw
 31792    42   343    15    42   745     0      15  new
 31793    42   343    19    42   745     0     111  ReadOnlyBufferException
 31794    42   343    42    42   745     0      59  (
 31795    42   343    43    42   745     0      60  )
 31796    42   343    44    42   745     0     102  ;
 31797    42   345     5    42   745     0      64  }
 31798    42   345     5    42   745     0    1782  ENDMETHOD
 31799    42   345     5    42   746     0    1783  STARTMETHOD
 31800    42   347     5    42   746     0      10  public
 31801    42   347    12    42   746     0     111  FloatBuffer
 31802    42   347    24    42   746     0     111  compact
 31803    42   347    31    42   746     0      59  (
 31804    42   347    32    42   746     0      60  )
 31805    42   347    34    42   746     0      63  {
 31806    42   360     9    42   746     0      20  throw
 31807    42   360    15    42   746     0      15  new
 31808    42   360    19    42   746     0     111  ReadOnlyBufferException
 31809    42   360    42    42   746     0      59  (
 31810    42   360    43    42   746     0      60  )
 31811    42   360    44    42   746     1     102  ;
 31812    42   362     5    42   746     1      64  }
 31813    42   362     5    42   746     0    1784  ENDMETHOD
 31814    42   362     5    42   747     0    1785  STARTMETHOD
 31815    42   364     5    42   747     0      10  public
 31816    42   364    12    42   747     0      39  boolean
 31817    42   364    20    42   747     0     111  isDirect
 31818    42   364    28    42   747     0      59  (
 31819    42   364    29    42   747     0      60  )
 31820    42   364    31    42   747     0      63  {
 31821    42   365     9    42   747     0      19  return
 31822    42   365    16    42   747     0      52  true
 31823    42   365    20    42   747     1     102  ;
 31824    42   366     5    42   747     1      64  }
 31825    42   366     5    42   747     0    1786  ENDMETHOD
 31826    42   366     5    42   748     0    1787  STARTMETHOD
 31827    42   368     5    42   748     0      10  public
 31828    42   368    12    42   748     0      39  boolean
 31829    42   368    20    42   748     0     111  isReadOnly
 31830    42   368    30    42   748     0      59  (
 31831    42   368    31    42   748     0      60  )
 31832    42   368    33    42   748     0      63  {
 31833    42   369     9    42   748     0      19  return
 31834    42   369    16    42   748     0      52  true
 31835    42   369    20    42   748     1     102  ;
 31836    42   370     5    42   748     1      64  }
 31837    42   370     5    42   748     0    1788  ENDMETHOD
 31838    42   370     5    42   749     0    1789  STARTMETHOD
 31839    42   416     5    42   749     0      10  public
 31840    42   416    12    42   749     0     111  ByteOrder
 31841    42   416    22    42   749     0     111  order
 31842    42   416    27    42   749     0      59  (
 31843    42   416    28    42   749     0      60  )
 31844    42   416    30    42   749     0      63  {
 31845    42   422     9    42   749     0      19  return
 31846    42   422    16    42   749     0      59  (
 31847    42   422    17    42   749     0      59  (
 31848    42   422    18    42   749     0     111  ByteOrder.nativeOrder
 31849    42   422    39    42   749     0      59  (
 31850    42   422    40    42   749     0      60  )
 31851    42   422    42    42   749     0      71  !=
 31852    42   422    45    42   749     0     111  ByteOrder.BIG_ENDIAN
 31853    42   422    65    42   749     0      60  )
 31854    42   423    17    42   749     0      58  ?
 31855    42   423    19    42   749     0     111  ByteOrder.LITTLE_ENDIAN
 31856    42   423    43    42   749     0      65  :
 31857    42   423    45    42   749     0     111  ByteOrder.BIG_ENDIAN
 31858    42   423    65    42   749     0      60  )
 31859    42   423    66    42   749     0     102  ;
 31860    42   425     5    42   749     0      64  }
 31861    42   425     5    42   749     0    1790  ENDMETHOD
 31862    42   452     1    42    -1     0      64  }
 31863    42   452     1    42    -1     1    1791  ENDCLASS
 31864    42   452     1    -1    -1     1    1792  ENDFILE C:\javasrc\java\nio\DirectFloatBufferRU.java
 31865    43     1     1    -1    -1     1    1793  STARTFILE C:\javasrc\java\nio\DirectFloatBufferS.java
 31866    43    28     1    -1    -1     0       5  package
 31867    43    28     9    -1    -1     0     111  java.nio
 31868    43    28    17    -1    -1     0     102  ;
 31869    43    30     1    -1    -1     1      49  import
 31870    43    30     8    -1    -1     1     111  sun.misc.Cleaner
 31871    43    30    24    -1    -1     1     102  ;
 31872    43    31     1    -1    -1     1      49  import
 31873    43    31     8    -1    -1     1     111  sun.misc.Unsafe
 31874    43    31    23    -1    -1     1     102  ;
 31875    43    32     1    -1    -1     1      49  import
 31876    43    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 31877    43    32    31    -1    -1     1     102  ;
 31878    43    33     1    -1    -1     1      49  import
 31879    43    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 31880    43    33    34    -1    -1     1     102  ;
 31881    43    36     1    43    -1     0    1794  STARTCLASS
 31882    43    36     1    43    -1     0      24  class
 31883    43    36     7    43    -1     0     111  DirectFloatBufferS
 31884    43    38     5    43    -1     0      38  extends
 31885    43    38    13    43    -1     0     111  FloatBuffer
 31886    43    42     5    43    -1     0      17  implements
 31887    43    42    16    43    -1     0     111  DirectBuffer
 31888    43    43     1    43    -1     0      63  {
 31889    43    48     5    43    -1     0      23  protected
 31890    43    48    15    43    -1     0      45  static
 31891    43    48    22    43    -1     0       6  final
 31892    43    48    28    43    -1     0     111  Unsafe
 31893    43    48    35    43    -1     0     111  unsafe
 31894    43    48    42    43    -1     0      67  =
 31895    43    48    44    43    -1     0     111  Bits.unsafe
 31896    43    48    55    43    -1     0      59  (
 31897    43    48    56    43    -1     0      60  )
 31898    43    48    57    43    -1     0     102  ;
 31899    43    51     5    43    -1     0      23  protected
 31900    43    51    15    43    -1     0      45  static
 31901    43    51    22    43    -1     0       6  final
 31902    43    51    28    43    -1     0      39  boolean
 31903    43    51    36    43    -1     0     111  unaligned
 31904    43    51    46    43    -1     0      67  =
 31905    43    51    48    43    -1     0     111  Bits.unaligned
 31906    43    51    62    43    -1     0      59  (
 31907    43    51    63    43    -1     0      60  )
 31908    43    51    64    43    -1     0     102  ;
 31909    43    59     5    43    -1     0      23  protected
 31910    43    59    15    43    -1     0     111  Object
 31911    43    59    22    43    -1     0     111  viewedBuffer
 31912    43    59    35    43    -1     0      67  =
 31913    43    59    37    43    -1     0      21  null
 31914    43    59    41    43    -1     0     102  ;
 31915    43    59    41    43   750     0    1795  STARTMETHOD
 31916    43    61     5    43   750     0      10  public
 31917    43    61    12    43   750     0     111  Object
 31918    43    61    19    43   750     0     111  viewedBuffer
 31919    43    61    31    43   750     0      59  (
 31920    43    61    32    43   750     0      60  )
 31921    43    61    34    43   750     0      63  {
 31922    43    62     9    43   750     0      19  return
 31923    43    62    16    43   750     0     111  viewedBuffer
 31924    43    62    28    43   750     0     102  ;
 31925    43    63     5    43   750     0      64  }
 31926    43    63     5    43   750     0    1796  ENDMETHOD
 31927    43    63     5    43   751     0    1797  STARTMETHOD
 31928    43   100     5    43   751     0      10  public
 31929    43   100    12    43   751     0     111  Cleaner
 31930    43   100    20    43   751     0     111  cleaner
 31931    43   100    27    43   751     0      59  (
 31932    43   100    28    43   751     0      60  )
 31933    43   100    30    43   751     0      63  {
 31934    43   100    32    43   751     0      19  return
 31935    43   100    39    43   751     0      21  null
 31936    43   100    43    43   751     0     102  ;
 31937    43   100    45    43   751     0      64  }
 31938    43   100    45    43   751     0    1798  ENDMETHOD
 31939    43   100    45    43   752     0    1799  STARTMETHOD
 31940    43   164     5    43   752     0     111  DirectFloatBufferS
 31941    43   164    23    43   752     0      59  (
 31942    43   164    24    43   752     0     111  DirectBuffer
 31943    43   164    37    43   752     0     111  db
 31944    43   164    39    43   752     0      66  ,
 31945    43   165    32    43   752     0      36  int
 31946    43   165    36    43   752     0     111  mark
 31947    43   165    40    43   752     0      66  ,
 31948    43   165    42    43   752     0      36  int
 31949    43   165    46    43   752     0     111  pos
 31950    43   165    49    43   752     0      66  ,
 31951    43   165    51    43   752     0      36  int
 31952    43   165    55    43   752     0     111  lim
 31953    43   165    58    43   752     0      66  ,
 31954    43   165    60    43   752     0      36  int
 31955    43   165    64    43   752     0     111  cap
 31956    43   165    67    43   752     0      66  ,
 31957    43   166    32    43   752     0      36  int
 31958    43   166    36    43   752     0     111  off
 31959    43   166    39    43   752     0      60  )
 31960    43   167     5    43   752     0      63  {
 31961    43   169     9    43   752     0      27  super
 31962    43   169    14    43   752     0      59  (
 31963    43   169    15    43   752     0     111  mark
 31964    43   169    19    43   752     0      66  ,
 31965    43   169    21    43   752     0     111  pos
 31966    43   169    24    43   752     0      66  ,
 31967    43   169    26    43   752     0     111  lim
 31968    43   169    29    43   752     0      66  ,
 31969    43   169    31    43   752     0     111  cap
 31970    43   169    34    43   752     0      60  )
 31971    43   169    35    43   752     0     102  ;
 31972    43   170     9    43   752     0     111  address
 31973    43   170    17    43   752     0      67  =
 31974    43   170    19    43   752     0     111  db.address
 31975    43   170    29    43   752     0      59  (
 31976    43   170    30    43   752     0      60  )
 31977    43   170    32    43   752     0      74  +
 31978    43   170    34    43   752     0     111  off
 31979    43   170    37    43   752     0     102  ;
 31980    43   171     9    43   752     0     111  viewedBuffer
 31981    43   171    22    43   752     0      67  =
 31982    43   171    24    43   752     0     111  db
 31983    43   171    26    43   752     0     102  ;
 31984    43   178     5    43   752     0      64  }
 31985    43   178     5    43   752     0    1800  ENDMETHOD
 31986    43   178     5    43   753     0    1801  STARTMETHOD
 31987    43   180     5    43   753     0      10  public
 31988    43   180    12    43   753     0     111  FloatBuffer
 31989    43   180    24    43   753     0     111  slice
 31990    43   180    29    43   753     0      59  (
 31991    43   180    30    43   753     0      60  )
 31992    43   180    32    43   753     0      63  {
 31993    43   181     9    43   753     1      36  int
 31994    43   181    13    43   753     1     111  pos
 31995    43   181    17    43   753     1      67  =
 31996    43   181    19    43   753     1     111  this.position
 31997    43   181    32    43   753     1      59  (
 31998    43   181    33    43   753     1      60  )
 31999    43   181    34    43   753     1     102  ;
 32000    43   182     9    43   753     1      36  int
 32001    43   182    13    43   753     1     111  lim
 32002    43   182    17    43   753     1      67  =
 32003    43   182    19    43   753     1     111  this.limit
 32004    43   182    29    43   753     1      59  (
 32005    43   182    30    43   753     1      60  )
 32006    43   182    31    43   753     1     102  ;
 32007    43   183     9    43   753     0     111  assert
 32008    43   183    16    43   753     0      59  (
 32009    43   183    17    43   753     0     111  pos
 32010    43   183    21    43   753     0      92  <=
 32011    43   183    24    43   753     0     111  lim
 32012    43   183    27    43   753     0      60  )
 32013    43   183    28    43   753     0     102  ;
 32014    43   184     9    43   753     0      36  int
 32015    43   184    13    43   753     0     111  rem
 32016    43   184    17    43   753     0      67  =
 32017    43   184    19    43   753     0      59  (
 32018    43   184    20    43   753     0     111  pos
 32019    43   184    24    43   753     0      92  <=
 32020    43   184    27    43   753     0     111  lim
 32021    43   184    31    43   753     0      58  ?
 32022    43   184    33    43   753     0     111  lim
 32023    43   184    37    43   753     0      77  -
 32024    43   184    39    43   753     0     111  pos
 32025    43   184    43    43   753     0      65  :
 32026    43   184    45    43   753     0     112  0
 32027    43   184    46    43   753     0      60  )
 32028    43   184    47    43   753     0     102  ;
 32029    43   185     9    43   753     0      36  int
 32030    43   185    13    43   753     0     111  off
 32031    43   185    17    43   753     0      67  =
 32032    43   185    19    43   753     0      59  (
 32033    43   185    20    43   753     0     111  pos
 32034    43   185    24    43   753     0      90  <<
 32035    43   185    27    43   753     0     112  2
 32036    43   185    28    43   753     0      60  )
 32037    43   185    29    43   753     0     102  ;
 32038    43   186     9    43   753     0     111  assert
 32039    43   186    16    43   753     0      59  (
 32040    43   186    17    43   753     0     111  off
 32041    43   186    21    43   753     0      88  >=
 32042    43   186    24    43   753     0     112  0
 32043    43   186    25    43   753     0      60  )
 32044    43   186    26    43   753     0     102  ;
 32045    43   187     9    43   753     0      19  return
 32046    43   187    16    43   753     0      15  new
 32047    43   187    20    43   753     0     111  DirectFloatBufferS
 32048    43   187    38    43   753     0      59  (
 32049    43   187    39    43   753     0      44  this
 32050    43   187    43    43   753     0      66  ,
 32051    43   187    45    43   753     0      77  -
 32052    43   187    46    43   753     0     112  1
 32053    43   187    47    43   753     0      66  ,
 32054    43   187    49    43   753     0     112  0
 32055    43   187    50    43   753     0      66  ,
 32056    43   187    52    43   753     0     111  rem
 32057    43   187    55    43   753     0      66  ,
 32058    43   187    57    43   753     0     111  rem
 32059    43   187    60    43   753     0      66  ,
 32060    43   187    62    43   753     0     111  off
 32061    43   187    65    43   753     1      60  )
 32062    43   187    66    43   753     1     102  ;
 32063    43   188     5    43   753     1      64  }
 32064    43   188     5    43   753     0    1802  ENDMETHOD
 32065    43   188     5    43   754     0    1803  STARTMETHOD
 32066    43   190     5    43   754     0      10  public
 32067    43   190    12    43   754     0     111  FloatBuffer
 32068    43   190    24    43   754     0     111  duplicate
 32069    43   190    33    43   754     0      59  (
 32070    43   190    34    43   754     0      60  )
 32071    43   190    36    43   754     0      63  {
 32072    43   191     9    43   754     0      19  return
 32073    43   191    16    43   754     0      15  new
 32074    43   191    20    43   754     0     111  DirectFloatBufferS
 32075    43   191    38    43   754     0      59  (
 32076    43   191    39    43   754     0      44  this
 32077    43   191    43    43   754     0      66  ,
 32078    43   192    47    43   754     1     111  this.markValue
 32079    43   192    61    43   754     1      59  (
 32080    43   192    62    43   754     1      60  )
 32081    43   192    63    43   754     1      66  ,
 32082    43   193    47    43   754     1     111  this.position
 32083    43   193    60    43   754     1      59  (
 32084    43   193    61    43   754     1      60  )
 32085    43   193    62    43   754     1      66  ,
 32086    43   194    47    43   754     1     111  this.limit
 32087    43   194    57    43   754     1      59  (
 32088    43   194    58    43   754     1      60  )
 32089    43   194    59    43   754     1      66  ,
 32090    43   195    47    43   754     1     111  this.capacity
 32091    43   195    60    43   754     1      59  (
 32092    43   195    61    43   754     1      60  )
 32093    43   195    62    43   754     1      66  ,
 32094    43   196    47    43   754     0     112  0
 32095    43   196    48    43   754     1      60  )
 32096    43   196    49    43   754     1     102  ;
 32097    43   197     5    43   754     1      64  }
 32098    43   197     5    43   754     0    1804  ENDMETHOD
 32099    43   197     5    43   755     0    1805  STARTMETHOD
 32100    43   199     5    43   755     0      10  public
 32101    43   199    12    43   755     0     111  FloatBuffer
 32102    43   199    24    43   755     0     111  asReadOnlyBuffer
 32103    43   199    40    43   755     0      59  (
 32104    43   199    41    43   755     0      60  )
 32105    43   199    43    43   755     0      63  {
 32106    43   201     9    43   755     0      19  return
 32107    43   201    16    43   755     0      15  new
 32108    43   201    20    43   755     0     111  DirectFloatBufferRS
 32109    43   201    39    43   755     0      59  (
 32110    43   201    40    43   755     0      44  this
 32111    43   201    44    43   755     0      66  ,
 32112    43   202    44    43   755     1     111  this.markValue
 32113    43   202    58    43   755     1      59  (
 32114    43   202    59    43   755     1      60  )
 32115    43   202    60    43   755     1      66  ,
 32116    43   203    44    43   755     1     111  this.position
 32117    43   203    57    43   755     1      59  (
 32118    43   203    58    43   755     1      60  )
 32119    43   203    59    43   755     1      66  ,
 32120    43   204    44    43   755     1     111  this.limit
 32121    43   204    54    43   755     1      59  (
 32122    43   204    55    43   755     1      60  )
 32123    43   204    56    43   755     1      66  ,
 32124    43   205    44    43   755     1     111  this.capacity
 32125    43   205    57    43   755     1      59  (
 32126    43   205    58    43   755     1      60  )
 32127    43   205    59    43   755     1      66  ,
 32128    43   206    44    43   755     0     112  0
 32129    43   206    45    43   755     1      60  )
 32130    43   206    46    43   755     1     102  ;
 32131    43   210     5    43   755     1      64  }
 32132    43   210     5    43   755     0    1806  ENDMETHOD
 32133    43   210     5    43   756     0    1807  STARTMETHOD
 32134    43   214     5    43   756     0      10  public
 32135    43   214    12    43   756     0      53  long
 32136    43   214    17    43   756     0     111  address
 32137    43   214    24    43   756     0      59  (
 32138    43   214    25    43   756     0      60  )
 32139    43   214    27    43   756     0      63  {
 32140    43   215     9    43   756     0      19  return
 32141    43   215    16    43   756     0     111  address
 32142    43   215    23    43   756     0     102  ;
 32143    43   216     5    43   756     0      64  }
 32144    43   216     5    43   756     0    1808  ENDMETHOD
 32145    43   216     5    43   757     0    1809  STARTMETHOD
 32146    43   218     5    43   757     0      41  private
 32147    43   218    13    43   757     0      53  long
 32148    43   218    18    43   757     0     111  ix
 32149    43   218    20    43   757     0      59  (
 32150    43   218    21    43   757     0      36  int
 32151    43   218    25    43   757     0     111  i
 32152    43   218    26    43   757     0      60  )
 32153    43   218    28    43   757     0      63  {
 32154    43   219     9    43   757     0      19  return
 32155    43   219    16    43   757     0     111  address
 32156    43   219    24    43   757     0      74  +
 32157    43   219    26    43   757     0      59  (
 32158    43   219    27    43   757     0     111  i
 32159    43   219    29    43   757     0      90  <<
 32160    43   219    32    43   757     0     112  2
 32161    43   219    33    43   757     0      60  )
 32162    43   219    34    43   757     0     102  ;
 32163    43   220     5    43   757     0      64  }
 32164    43   220     5    43   757     0    1810  ENDMETHOD
 32165    43   220     5    43   758     0    1811  STARTMETHOD
 32166    43   222     5    43   758     0      10  public
 32167    43   222    12    43   758     0       4  float
 32168    43   222    18    43   758     0     111  get
 32169    43   222    21    43   758     0      59  (
 32170    43   222    22    43   758     0      60  )
 32171    43   222    24    43   758     0      63  {
 32172    43   223     9    43   758     0      19  return
 32173    43   223    16    43   758     0     111  Float.intBitsToFloat
 32174    43   223    36    43   758     0      59  (
 32175    43   223    37    43   758     0     111  Bits.swap
 32176    43   223    46    43   758     0      59  (
 32177    43   223    47    43   758     0     111  unsafe.getInt
 32178    43   223    60    43   758     0      59  (
 32179    43   223    61    43   758     0     111  ix
 32180    43   223    63    43   758     0      59  (
 32181    43   223    64    43   758     0     111  nextGetIndex
 32182    43   223    76    43   758     0      59  (
 32183    43   223    77    43   758     0      60  )
 32184    43   223    78    43   758     0      60  )
 32185    43   223    79    43   758     0      60  )
 32186    43   223    80    43   758     0      60  )
 32187    43   223    81    43   758     0      60  )
 32188    43   223    82    43   758     0     102  ;
 32189    43   224     5    43   758     0      64  }
 32190    43   224     5    43   758     0    1812  ENDMETHOD
 32191    43   224     5    43   759     0    1813  STARTMETHOD
 32192    43   226     5    43   759     0      10  public
 32193    43   226    12    43   759     0       4  float
 32194    43   226    18    43   759     0     111  get
 32195    43   226    21    43   759     0      59  (
 32196    43   226    22    43   759     0      36  int
 32197    43   226    26    43   759     0     111  i
 32198    43   226    27    43   759     0      60  )
 32199    43   226    29    43   759     0      63  {
 32200    43   227     9    43   759     0      19  return
 32201    43   227    16    43   759     0     111  Float.intBitsToFloat
 32202    43   227    36    43   759     0      59  (
 32203    43   227    37    43   759     0     111  Bits.swap
 32204    43   227    46    43   759     0      59  (
 32205    43   227    47    43   759     0     111  unsafe.getInt
 32206    43   227    60    43   759     0      59  (
 32207    43   227    61    43   759     0     111  ix
 32208    43   227    63    43   759     0      59  (
 32209    43   227    64    43   759     0     111  checkIndex
 32210    43   227    74    43   759     0      59  (
 32211    43   227    75    43   759     0     111  i
 32212    43   227    76    43   759     0      60  )
 32213    43   227    77    43   759     0      60  )
 32214    43   227    78    43   759     0      60  )
 32215    43   227    79    43   759     0      60  )
 32216    43   227    80    43   759     0      60  )
 32217    43   227    81    43   759     0     102  ;
 32218    43   228     5    43   759     0      64  }
 32219    43   228     5    43   759     0    1814  ENDMETHOD
 32220    43   228     5    43   760     0    1815  STARTMETHOD
 32221    43   230     5    43   760     0      10  public
 32222    43   230    12    43   760     0     111  FloatBuffer
 32223    43   230    24    43   760     0     111  get
 32224    43   230    27    43   760     0      59  (
 32225    43   230    28    43   760     0       4  float
 32226    43   230    33    43   760     0      61  [
 32227    43   230    34    43   760     0      62  ]
 32228    43   230    36    43   760     0     111  dst
 32229    43   230    39    43   760     0      66  ,
 32230    43   230    41    43   760     0      36  int
 32231    43   230    45    43   760     0     111  offset
 32232    43   230    51    43   760     0      66  ,
 32233    43   230    53    43   760     0      36  int
 32234    43   230    57    43   760     0     111  length
 32235    43   230    63    43   760     0      60  )
 32236    43   230    65    43   760     0      63  {
 32237    43   232     9    43   760     0      31  if
 32238    43   232    12    43   760     0      59  (
 32239    43   232    13    43   760     0      59  (
 32240    43   232    14    43   760     0     111  length
 32241    43   232    21    43   760     0      90  <<
 32242    43   232    24    43   760     0     112  2
 32243    43   232    25    43   760     0      60  )
 32244    43   232    27    43   760     0      89  >
 32245    43   232    29    43   760     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 32246    43   232    61    43   760     0      60  )
 32247    43   232    63    43   760     0      63  {
 32248    43   233    13    43   760     0     111  checkBounds
 32249    43   233    24    43   760     0      59  (
 32250    43   233    25    43   760     0     111  offset
 32251    43   233    31    43   760     0      66  ,
 32252    43   233    33    43   760     0     111  length
 32253    43   233    39    43   760     0      66  ,
 32254    43   233    41    43   760     0     111  dst.length
 32255    43   233    51    43   760     0      60  )
 32256    43   233    52    43   760     0     102  ;
 32257    43   234    13    43   760     1      36  int
 32258    43   234    17    43   760     1     111  pos
 32259    43   234    21    43   760     1      67  =
 32260    43   234    23    43   760     1     111  position
 32261    43   234    31    43   760     1      59  (
 32262    43   234    32    43   760     1      60  )
 32263    43   234    33    43   760     1     102  ;
 32264    43   235    13    43   760     1      36  int
 32265    43   235    17    43   760     1     111  lim
 32266    43   235    21    43   760     1      67  =
 32267    43   235    23    43   760     1     111  limit
 32268    43   235    28    43   760     1      59  (
 32269    43   235    29    43   760     1      60  )
 32270    43   235    30    43   760     1     102  ;
 32271    43   236    13    43   760     0     111  assert
 32272    43   236    20    43   760     0      59  (
 32273    43   236    21    43   760     0     111  pos
 32274    43   236    25    43   760     0      92  <=
 32275    43   236    28    43   760     0     111  lim
 32276    43   236    31    43   760     0      60  )
 32277    43   236    32    43   760     0     102  ;
 32278    43   237    13    43   760     0      36  int
 32279    43   237    17    43   760     0     111  rem
 32280    43   237    21    43   760     0      67  =
 32281    43   237    23    43   760     0      59  (
 32282    43   237    24    43   760     0     111  pos
 32283    43   237    28    43   760     0      92  <=
 32284    43   237    31    43   760     0     111  lim
 32285    43   237    35    43   760     0      58  ?
 32286    43   237    37    43   760     0     111  lim
 32287    43   237    41    43   760     0      77  -
 32288    43   237    43    43   760     0     111  pos
 32289    43   237    47    43   760     0      65  :
 32290    43   237    49    43   760     0     112  0
 32291    43   237    50    43   760     0      60  )
 32292    43   237    51    43   760     0     102  ;
 32293    43   238    13    43   760     0      31  if
 32294    43   238    16    43   760     0      59  (
 32295    43   238    17    43   760     0     111  length
 32296    43   238    24    43   760     0      89  >
 32297    43   238    26    43   760     0     111  rem
 32298    43   238    29    43   760     0      60  )
 32299    43   239    17    43   760     0      20  throw
 32300    43   239    23    43   760     0      15  new
 32301    43   239    27    43   760     0     111  BufferUnderflowException
 32302    43   239    51    43   760     0      59  (
 32303    43   239    52    43   760     0      60  )
 32304    43   239    53    43   760     0     102  ;
 32305    43   241    13    43   760     0      31  if
 32306    43   241    16    43   760     0      59  (
 32307    43   241    17    43   760     0     111  order
 32308    43   241    22    43   760     0      59  (
 32309    43   241    23    43   760     0      60  )
 32310    43   241    25    43   760     0      71  !=
 32311    43   241    28    43   760     0     111  ByteOrder.nativeOrder
 32312    43   241    49    43   760     0      59  (
 32313    43   241    50    43   760     0      60  )
 32314    43   241    51    43   760     0      60  )
 32315    43   242    17    43   760     0     111  Bits.copyToIntArray
 32316    43   242    36    43   760     0      59  (
 32317    43   242    37    43   760     0     111  ix
 32318    43   242    39    43   760     0      59  (
 32319    43   242    40    43   760     0     111  pos
 32320    43   242    43    43   760     0      60  )
 32321    43   242    44    43   760     0      66  ,
 32322    43   242    46    43   760     0     111  dst
 32323    43   242    49    43   760     0      66  ,
 32324    43   243    43    43   760     0     111  offset
 32325    43   243    50    43   760     0      90  <<
 32326    43   243    53    43   760     0     112  2
 32327    43   243    54    43   760     0      66  ,
 32328    43   244    43    43   760     0     111  length
 32329    43   244    50    43   760     0      90  <<
 32330    43   244    53    43   760     0     112  2
 32331    43   244    54    43   760     0      60  )
 32332    43   244    55    43   760     0     102  ;
 32333    43   245    13    43   760     0      48  else
 32334    43   246    17    43   760     0     111  Bits.copyToByteArray
 32335    43   246    37    43   760     0      59  (
 32336    43   246    38    43   760     0     111  ix
 32337    43   246    40    43   760     0      59  (
 32338    43   246    41    43   760     0     111  pos
 32339    43   246    44    43   760     0      60  )
 32340    43   246    45    43   760     0      66  ,
 32341    43   246    47    43   760     0     111  dst
 32342    43   246    50    43   760     0      66  ,
 32343    43   247    38    43   760     0     111  offset
 32344    43   247    45    43   760     0      90  <<
 32345    43   247    48    43   760     0     112  2
 32346    43   247    49    43   760     0      66  ,
 32347    43   248    38    43   760     0     111  length
 32348    43   248    45    43   760     0      90  <<
 32349    43   248    48    43   760     0     112  2
 32350    43   248    49    43   760     0      60  )
 32351    43   248    50    43   760     0     102  ;
 32352    43   249    13    43   760     0     111  position
 32353    43   249    21    43   760     0      59  (
 32354    43   249    22    43   760     0     111  pos
 32355    43   249    26    43   760     0      74  +
 32356    43   249    28    43   760     0     111  length
 32357    43   249    34    43   760     0      60  )
 32358    43   249    35    43   760     0     102  ;
 32359    43   250     9    43   760     0      64  }
 32360    43   250    11    43   760     0      48  else
 32361    43   250    16    43   760     0      63  {
 32362    43   251    13    43   760     0     111  super.get
 32363    43   251    22    43   760     0      59  (
 32364    43   251    23    43   760     0     111  dst
 32365    43   251    26    43   760     0      66  ,
 32366    43   251    28    43   760     0     111  offset
 32367    43   251    34    43   760     0      66  ,
 32368    43   251    36    43   760     0     111  length
 32369    43   251    42    43   760     0      60  )
 32370    43   251    43    43   760     0     102  ;
 32371    43   252     9    43   760     0      64  }
 32372    43   253     9    43   760     0      19  return
 32373    43   253    16    43   760     0      44  this
 32374    43   253    20    43   760     0     102  ;
 32375    43   257     5    43   760     0      64  }
 32376    43   257     5    43   760     0    1816  ENDMETHOD
 32377    43   257     5    43   761     0    1817  STARTMETHOD
 32378    43   261     5    43   761     0      10  public
 32379    43   261    12    43   761     0     111  FloatBuffer
 32380    43   261    24    43   761     0     111  put
 32381    43   261    27    43   761     0      59  (
 32382    43   261    28    43   761     0       4  float
 32383    43   261    34    43   761     0     111  x
 32384    43   261    35    43   761     0      60  )
 32385    43   261    37    43   761     0      63  {
 32386    43   263     9    43   761     0     111  unsafe.putInt
 32387    43   263    22    43   761     0      59  (
 32388    43   263    23    43   761     0     111  ix
 32389    43   263    25    43   761     0      59  (
 32390    43   263    26    43   761     0     111  nextPutIndex
 32391    43   263    38    43   761     0      59  (
 32392    43   263    39    43   761     0      60  )
 32393    43   263    40    43   761     0      60  )
 32394    43   263    41    43   761     0      66  ,
 32395    43   263    43    43   761     0     111  Bits.swap
 32396    43   263    52    43   761     0      59  (
 32397    43   263    53    43   761     0     111  Float.floatToRawIntBits
 32398    43   263    76    43   761     0      59  (
 32399    43   263    77    43   761     0     111  x
 32400    43   263    78    43   761     0      60  )
 32401    43   263    79    43   761     0      60  )
 32402    43   263    80    43   761     0      60  )
 32403    43   263    81    43   761     0     102  ;
 32404    43   264     9    43   761     0      19  return
 32405    43   264    16    43   761     0      44  this
 32406    43   264    20    43   761     0     102  ;
 32407    43   268     5    43   761     0      64  }
 32408    43   268     5    43   761     0    1818  ENDMETHOD
 32409    43   268     5    43   762     0    1819  STARTMETHOD
 32410    43   270     5    43   762     0      10  public
 32411    43   270    12    43   762     0     111  FloatBuffer
 32412    43   270    24    43   762     0     111  put
 32413    43   270    27    43   762     0      59  (
 32414    43   270    28    43   762     0      36  int
 32415    43   270    32    43   762     0     111  i
 32416    43   270    33    43   762     0      66  ,
 32417    43   270    35    43   762     0       4  float
 32418    43   270    41    43   762     0     111  x
 32419    43   270    42    43   762     0      60  )
 32420    43   270    44    43   762     0      63  {
 32421    43   272     9    43   762     0     111  unsafe.putInt
 32422    43   272    22    43   762     0      59  (
 32423    43   272    23    43   762     0     111  ix
 32424    43   272    25    43   762     0      59  (
 32425    43   272    26    43   762     0     111  checkIndex
 32426    43   272    36    43   762     0      59  (
 32427    43   272    37    43   762     0     111  i
 32428    43   272    38    43   762     0      60  )
 32429    43   272    39    43   762     0      60  )
 32430    43   272    40    43   762     0      66  ,
 32431    43   272    42    43   762     0     111  Bits.swap
 32432    43   272    51    43   762     0      59  (
 32433    43   272    52    43   762     0     111  Float.floatToRawIntBits
 32434    43   272    75    43   762     0      59  (
 32435    43   272    76    43   762     0     111  x
 32436    43   272    77    43   762     0      60  )
 32437    43   272    78    43   762     0      60  )
 32438    43   272    79    43   762     0      60  )
 32439    43   272    80    43   762     0     102  ;
 32440    43   273     9    43   762     0      19  return
 32441    43   273    16    43   762     0      44  this
 32442    43   273    20    43   762     0     102  ;
 32443    43   277     5    43   762     0      64  }
 32444    43   277     5    43   762     0    1820  ENDMETHOD
 32445    43   277     5    43   763     0    1821  STARTMETHOD
 32446    43   279     5    43   763     0      10  public
 32447    43   279    12    43   763     0     111  FloatBuffer
 32448    43   279    24    43   763     0     111  put
 32449    43   279    27    43   763     0      59  (
 32450    43   279    28    43   763     0     111  FloatBuffer
 32451    43   279    40    43   763     0     111  src
 32452    43   279    43    43   763     0      60  )
 32453    43   279    45    43   763     0      63  {
 32454    43   281     9    43   763     0      31  if
 32455    43   281    12    43   763     0      59  (
 32456    43   281    13    43   763     0     111  src
 32457    43   281    17    43   763     0      16  instanceof
 32458    43   281    28    43   763     0     111  DirectFloatBufferS
 32459    43   281    46    43   763     0      60  )
 32460    43   281    48    43   763     0      63  {
 32461    43   282    13    43   763     0      31  if
 32462    43   282    16    43   763     0      59  (
 32463    43   282    17    43   763     0     111  src
 32464    43   282    21    43   763     0      68  ==
 32465    43   282    24    43   763     0      44  this
 32466    43   282    28    43   763     0      60  )
 32467    43   283    17    43   763     0      20  throw
 32468    43   283    23    43   763     0      15  new
 32469    43   283    27    43   763     0     111  IllegalArgumentException
 32470    43   283    51    43   763     0      59  (
 32471    43   283    52    43   763     0      60  )
 32472    43   283    53    43   763     0     102  ;
 32473    43   284    13    43   763     0     111  DirectFloatBufferS
 32474    43   284    32    43   763     0     111  sb
 32475    43   284    35    43   763     0      67  =
 32476    43   284    37    43   763     0      59  (
 32477    43   284    38    43   763     0     111  DirectFloatBufferS
 32478    43   284    56    43   763     0      60  )
 32479    43   284    57    43   763     0     111  src
 32480    43   284    60    43   763     0     102  ;
 32481    43   286    13    43   763     1      36  int
 32482    43   286    17    43   763     1     111  spos
 32483    43   286    22    43   763     1      67  =
 32484    43   286    24    43   763     1     111  sb.position
 32485    43   286    35    43   763     1      59  (
 32486    43   286    36    43   763     1      60  )
 32487    43   286    37    43   763     1     102  ;
 32488    43   287    13    43   763     1      36  int
 32489    43   287    17    43   763     1     111  slim
 32490    43   287    22    43   763     1      67  =
 32491    43   287    24    43   763     1     111  sb.limit
 32492    43   287    32    43   763     1      59  (
 32493    43   287    33    43   763     1      60  )
 32494    43   287    34    43   763     1     102  ;
 32495    43   288    13    43   763     0     111  assert
 32496    43   288    20    43   763     0      59  (
 32497    43   288    21    43   763     0     111  spos
 32498    43   288    26    43   763     0      92  <=
 32499    43   288    29    43   763     0     111  slim
 32500    43   288    33    43   763     0      60  )
 32501    43   288    34    43   763     0     102  ;
 32502    43   289    13    43   763     0      36  int
 32503    43   289    17    43   763     0     111  srem
 32504    43   289    22    43   763     0      67  =
 32505    43   289    24    43   763     0      59  (
 32506    43   289    25    43   763     0     111  spos
 32507    43   289    30    43   763     0      92  <=
 32508    43   289    33    43   763     0     111  slim
 32509    43   289    38    43   763     0      58  ?
 32510    43   289    40    43   763     0     111  slim
 32511    43   289    45    43   763     0      77  -
 32512    43   289    47    43   763     0     111  spos
 32513    43   289    52    43   763     0      65  :
 32514    43   289    54    43   763     0     112  0
 32515    43   289    55    43   763     0      60  )
 32516    43   289    56    43   763     0     102  ;
 32517    43   291    13    43   763     1      36  int
 32518    43   291    17    43   763     1     111  pos
 32519    43   291    21    43   763     1      67  =
 32520    43   291    23    43   763     1     111  position
 32521    43   291    31    43   763     1      59  (
 32522    43   291    32    43   763     1      60  )
 32523    43   291    33    43   763     1     102  ;
 32524    43   292    13    43   763     1      36  int
 32525    43   292    17    43   763     1     111  lim
 32526    43   292    21    43   763     1      67  =
 32527    43   292    23    43   763     1     111  limit
 32528    43   292    28    43   763     1      59  (
 32529    43   292    29    43   763     1      60  )
 32530    43   292    30    43   763     1     102  ;
 32531    43   293    13    43   763     0     111  assert
 32532    43   293    20    43   763     0      59  (
 32533    43   293    21    43   763     0     111  pos
 32534    43   293    25    43   763     0      92  <=
 32535    43   293    28    43   763     0     111  lim
 32536    43   293    31    43   763     0      60  )
 32537    43   293    32    43   763     0     102  ;
 32538    43   294    13    43   763     0      36  int
 32539    43   294    17    43   763     0     111  rem
 32540    43   294    21    43   763     0      67  =
 32541    43   294    23    43   763     0      59  (
 32542    43   294    24    43   763     0     111  pos
 32543    43   294    28    43   763     0      92  <=
 32544    43   294    31    43   763     0     111  lim
 32545    43   294    35    43   763     0      58  ?
 32546    43   294    37    43   763     0     111  lim
 32547    43   294    41    43   763     0      77  -
 32548    43   294    43    43   763     0     111  pos
 32549    43   294    47    43   763     0      65  :
 32550    43   294    49    43   763     0     112  0
 32551    43   294    50    43   763     0      60  )
 32552    43   294    51    43   763     0     102  ;
 32553    43   296    13    43   763     0      31  if
 32554    43   296    16    43   763     0      59  (
 32555    43   296    17    43   763     0     111  srem
 32556    43   296    22    43   763     0      89  >
 32557    43   296    24    43   763     0     111  rem
 32558    43   296    27    43   763     0      60  )
 32559    43   297    17    43   763     0      20  throw
 32560    43   297    23    43   763     0      15  new
 32561    43   297    27    43   763     0     111  BufferOverflowException
 32562    43   297    50    43   763     0      59  (
 32563    43   297    51    43   763     0      60  )
 32564    43   297    52    43   763     0     102  ;
 32565    43   298    13    43   763     0     111  unsafe.copyMemory
 32566    43   298    30    43   763     0      59  (
 32567    43   298    31    43   763     0     111  sb.ix
 32568    43   298    36    43   763     0      59  (
 32569    43   298    37    43   763     0     111  spos
 32570    43   298    41    43   763     0      60  )
 32571    43   298    42    43   763     0      66  ,
 32572    43   298    44    43   763     0     111  ix
 32573    43   298    46    43   763     0      59  (
 32574    43   298    47    43   763     0     111  pos
 32575    43   298    50    43   763     0      60  )
 32576    43   298    51    43   763     0      66  ,
 32577    43   298    53    43   763     0     111  srem
 32578    43   298    58    43   763     0      90  <<
 32579    43   298    61    43   763     0     112  2
 32580    43   298    62    43   763     0      60  )
 32581    43   298    63    43   763     0     102  ;
 32582    43   299    13    43   763     1     111  sb.position
 32583    43   299    24    43   763     1      59  (
 32584    43   299    25    43   763     1     111  spos
 32585    43   299    30    43   763     1      74  +
 32586    43   299    32    43   763     1     111  srem
 32587    43   299    36    43   763     1      60  )
 32588    43   299    37    43   763     1     102  ;
 32589    43   300    13    43   763     1     111  position
 32590    43   300    21    43   763     1      59  (
 32591    43   300    22    43   763     1     111  pos
 32592    43   300    26    43   763     1      74  +
 32593    43   300    28    43   763     1     111  srem
 32594    43   300    32    43   763     1      60  )
 32595    43   300    33    43   763     1     102  ;
 32596    43   301     9    43   763     0      64  }
 32597    43   301    11    43   763     0      48  else
 32598    43   301    16    43   763     0      31  if
 32599    43   301    19    43   763     0      59  (
 32600    43   301    20    43   763     0     111  src.hb
 32601    43   301    27    43   763     0      71  !=
 32602    43   301    30    43   763     0      21  null
 32603    43   301    34    43   763     0      60  )
 32604    43   301    36    43   763     0      63  {
 32605    43   303    13    43   763     1      36  int
 32606    43   303    17    43   763     1     111  spos
 32607    43   303    22    43   763     1      67  =
 32608    43   303    24    43   763     1     111  src.position
 32609    43   303    36    43   763     1      59  (
 32610    43   303    37    43   763     1      60  )
 32611    43   303    38    43   763     1     102  ;
 32612    43   304    13    43   763     1      36  int
 32613    43   304    17    43   763     1     111  slim
 32614    43   304    22    43   763     1      67  =
 32615    43   304    24    43   763     1     111  src.limit
 32616    43   304    33    43   763     1      59  (
 32617    43   304    34    43   763     1      60  )
 32618    43   304    35    43   763     1     102  ;
 32619    43   305    13    43   763     0     111  assert
 32620    43   305    20    43   763     0      59  (
 32621    43   305    21    43   763     0     111  spos
 32622    43   305    26    43   763     0      92  <=
 32623    43   305    29    43   763     0     111  slim
 32624    43   305    33    43   763     0      60  )
 32625    43   305    34    43   763     0     102  ;
 32626    43   306    13    43   763     0      36  int
 32627    43   306    17    43   763     0     111  srem
 32628    43   306    22    43   763     0      67  =
 32629    43   306    24    43   763     0      59  (
 32630    43   306    25    43   763     0     111  spos
 32631    43   306    30    43   763     0      92  <=
 32632    43   306    33    43   763     0     111  slim
 32633    43   306    38    43   763     0      58  ?
 32634    43   306    40    43   763     0     111  slim
 32635    43   306    45    43   763     0      77  -
 32636    43   306    47    43   763     0     111  spos
 32637    43   306    52    43   763     0      65  :
 32638    43   306    54    43   763     0     112  0
 32639    43   306    55    43   763     0      60  )
 32640    43   306    56    43   763     0     102  ;
 32641    43   308    13    43   763     0     111  put
 32642    43   308    16    43   763     0      59  (
 32643    43   308    17    43   763     0     111  src.hb
 32644    43   308    23    43   763     0      66  ,
 32645    43   308    25    43   763     0     111  src.offset
 32646    43   308    36    43   763     0      74  +
 32647    43   308    38    43   763     0     111  spos
 32648    43   308    42    43   763     0      66  ,
 32649    43   308    44    43   763     0     111  srem
 32650    43   308    48    43   763     0      60  )
 32651    43   308    49    43   763     0     102  ;
 32652    43   309    13    43   763     0     111  src.position
 32653    43   309    25    43   763     0      59  (
 32654    43   309    26    43   763     0     111  spos
 32655    43   309    31    43   763     0      74  +
 32656    43   309    33    43   763     0     111  srem
 32657    43   309    37    43   763     0      60  )
 32658    43   309    38    43   763     0     102  ;
 32659    43   311     9    43   763     0      64  }
 32660    43   311    11    43   763     0      48  else
 32661    43   311    16    43   763     0      63  {
 32662    43   312    13    43   763     0     111  super.put
 32663    43   312    22    43   763     0      59  (
 32664    43   312    23    43   763     0     111  src
 32665    43   312    26    43   763     0      60  )
 32666    43   312    27    43   763     0     102  ;
 32667    43   313     9    43   763     0      64  }
 32668    43   314     9    43   763     0      19  return
 32669    43   314    16    43   763     0      44  this
 32670    43   314    20    43   763     0     102  ;
 32671    43   318     5    43   763     0      64  }
 32672    43   318     5    43   763     0    1822  ENDMETHOD
 32673    43   318     5    43   764     0    1823  STARTMETHOD
 32674    43   320     5    43   764     0      10  public
 32675    43   320    12    43   764     0     111  FloatBuffer
 32676    43   320    24    43   764     0     111  put
 32677    43   320    27    43   764     0      59  (
 32678    43   320    28    43   764     0       4  float
 32679    43   320    33    43   764     0      61  [
 32680    43   320    34    43   764     0      62  ]
 32681    43   320    36    43   764     0     111  src
 32682    43   320    39    43   764     0      66  ,
 32683    43   320    41    43   764     0      36  int
 32684    43   320    45    43   764     0     111  offset
 32685    43   320    51    43   764     0      66  ,
 32686    43   320    53    43   764     0      36  int
 32687    43   320    57    43   764     0     111  length
 32688    43   320    63    43   764     0      60  )
 32689    43   320    65    43   764     0      63  {
 32690    43   322     9    43   764     0      31  if
 32691    43   322    12    43   764     0      59  (
 32692    43   322    13    43   764     0      59  (
 32693    43   322    14    43   764     0     111  length
 32694    43   322    21    43   764     0      90  <<
 32695    43   322    24    43   764     0     112  2
 32696    43   322    25    43   764     0      60  )
 32697    43   322    27    43   764     0      89  >
 32698    43   322    29    43   764     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 32699    43   322    63    43   764     0      60  )
 32700    43   322    65    43   764     0      63  {
 32701    43   323    13    43   764     0     111  checkBounds
 32702    43   323    24    43   764     0      59  (
 32703    43   323    25    43   764     0     111  offset
 32704    43   323    31    43   764     0      66  ,
 32705    43   323    33    43   764     0     111  length
 32706    43   323    39    43   764     0      66  ,
 32707    43   323    41    43   764     0     111  src.length
 32708    43   323    51    43   764     0      60  )
 32709    43   323    52    43   764     0     102  ;
 32710    43   324    13    43   764     1      36  int
 32711    43   324    17    43   764     1     111  pos
 32712    43   324    21    43   764     1      67  =
 32713    43   324    23    43   764     1     111  position
 32714    43   324    31    43   764     1      59  (
 32715    43   324    32    43   764     1      60  )
 32716    43   324    33    43   764     1     102  ;
 32717    43   325    13    43   764     1      36  int
 32718    43   325    17    43   764     1     111  lim
 32719    43   325    21    43   764     1      67  =
 32720    43   325    23    43   764     1     111  limit
 32721    43   325    28    43   764     1      59  (
 32722    43   325    29    43   764     1      60  )
 32723    43   325    30    43   764     1     102  ;
 32724    43   326    13    43   764     0     111  assert
 32725    43   326    20    43   764     0      59  (
 32726    43   326    21    43   764     0     111  pos
 32727    43   326    25    43   764     0      92  <=
 32728    43   326    28    43   764     0     111  lim
 32729    43   326    31    43   764     0      60  )
 32730    43   326    32    43   764     0     102  ;
 32731    43   327    13    43   764     0      36  int
 32732    43   327    17    43   764     0     111  rem
 32733    43   327    21    43   764     0      67  =
 32734    43   327    23    43   764     0      59  (
 32735    43   327    24    43   764     0     111  pos
 32736    43   327    28    43   764     0      92  <=
 32737    43   327    31    43   764     0     111  lim
 32738    43   327    35    43   764     0      58  ?
 32739    43   327    37    43   764     0     111  lim
 32740    43   327    41    43   764     0      77  -
 32741    43   327    43    43   764     0     111  pos
 32742    43   327    47    43   764     0      65  :
 32743    43   327    49    43   764     0     112  0
 32744    43   327    50    43   764     0      60  )
 32745    43   327    51    43   764     0     102  ;
 32746    43   328    13    43   764     0      31  if
 32747    43   328    16    43   764     0      59  (
 32748    43   328    17    43   764     0     111  length
 32749    43   328    24    43   764     0      89  >
 32750    43   328    26    43   764     0     111  rem
 32751    43   328    29    43   764     0      60  )
 32752    43   329    17    43   764     0      20  throw
 32753    43   329    23    43   764     0      15  new
 32754    43   329    27    43   764     0     111  BufferOverflowException
 32755    43   329    50    43   764     0      59  (
 32756    43   329    51    43   764     0      60  )
 32757    43   329    52    43   764     0     102  ;
 32758    43   331    13    43   764     0      31  if
 32759    43   331    16    43   764     0      59  (
 32760    43   331    17    43   764     0     111  order
 32761    43   331    22    43   764     0      59  (
 32762    43   331    23    43   764     0      60  )
 32763    43   331    25    43   764     0      71  !=
 32764    43   331    28    43   764     0     111  ByteOrder.nativeOrder
 32765    43   331    49    43   764     0      59  (
 32766    43   331    50    43   764     0      60  )
 32767    43   331    51    43   764     0      60  )
 32768    43   332    17    43   764     0     111  Bits.copyFromIntArray
 32769    43   332    38    43   764     0      59  (
 32770    43   332    39    43   764     0     111  src
 32771    43   332    42    43   764     0      66  ,
 32772    43   332    44    43   764     0     111  offset
 32773    43   332    51    43   764     0      90  <<
 32774    43   332    54    43   764     0     112  2
 32775    43   332    55    43   764     0      66  ,
 32776    43   333    45    43   764     0     111  ix
 32777    43   333    47    43   764     0      59  (
 32778    43   333    48    43   764     0     111  pos
 32779    43   333    51    43   764     0      60  )
 32780    43   333    52    43   764     0      66  ,
 32781    43   333    54    43   764     0     111  length
 32782    43   333    61    43   764     0      90  <<
 32783    43   333    64    43   764     0     112  2
 32784    43   333    65    43   764     0      60  )
 32785    43   333    66    43   764     0     102  ;
 32786    43   334    13    43   764     0      48  else
 32787    43   335    17    43   764     0     111  Bits.copyFromByteArray
 32788    43   335    39    43   764     0      59  (
 32789    43   335    40    43   764     0     111  src
 32790    43   335    43    43   764     0      66  ,
 32791    43   335    45    43   764     0     111  offset
 32792    43   335    52    43   764     0      90  <<
 32793    43   335    55    43   764     0     112  2
 32794    43   335    56    43   764     0      66  ,
 32795    43   336    40    43   764     0     111  ix
 32796    43   336    42    43   764     0      59  (
 32797    43   336    43    43   764     0     111  pos
 32798    43   336    46    43   764     0      60  )
 32799    43   336    47    43   764     0      66  ,
 32800    43   336    49    43   764     0     111  length
 32801    43   336    56    43   764     0      90  <<
 32802    43   336    59    43   764     0     112  2
 32803    43   336    60    43   764     0      60  )
 32804    43   336    61    43   764     0     102  ;
 32805    43   337    13    43   764     0     111  position
 32806    43   337    21    43   764     0      59  (
 32807    43   337    22    43   764     0     111  pos
 32808    43   337    26    43   764     0      74  +
 32809    43   337    28    43   764     0     111  length
 32810    43   337    34    43   764     0      60  )
 32811    43   337    35    43   764     0     102  ;
 32812    43   338     9    43   764     0      64  }
 32813    43   338    11    43   764     0      48  else
 32814    43   338    16    43   764     0      63  {
 32815    43   339    13    43   764     0     111  super.put
 32816    43   339    22    43   764     0      59  (
 32817    43   339    23    43   764     0     111  src
 32818    43   339    26    43   764     0      66  ,
 32819    43   339    28    43   764     0     111  offset
 32820    43   339    34    43   764     0      66  ,
 32821    43   339    36    43   764     0     111  length
 32822    43   339    42    43   764     0      60  )
 32823    43   339    43    43   764     0     102  ;
 32824    43   340     9    43   764     0      64  }
 32825    43   341     9    43   764     0      19  return
 32826    43   341    16    43   764     0      44  this
 32827    43   341    20    43   764     0     102  ;
 32828    43   345     5    43   764     0      64  }
 32829    43   345     5    43   764     0    1824  ENDMETHOD
 32830    43   345     5    43   765     0    1825  STARTMETHOD
 32831    43   347     5    43   765     0      10  public
 32832    43   347    12    43   765     0     111  FloatBuffer
 32833    43   347    24    43   765     0     111  compact
 32834    43   347    31    43   765     0      59  (
 32835    43   347    32    43   765     0      60  )
 32836    43   347    34    43   765     0      63  {
 32837    43   349     9    43   765     1      36  int
 32838    43   349    13    43   765     1     111  pos
 32839    43   349    17    43   765     1      67  =
 32840    43   349    19    43   765     1     111  position
 32841    43   349    27    43   765     1      59  (
 32842    43   349    28    43   765     1      60  )
 32843    43   349    29    43   765     1     102  ;
 32844    43   350     9    43   765     1      36  int
 32845    43   350    13    43   765     1     111  lim
 32846    43   350    17    43   765     1      67  =
 32847    43   350    19    43   765     1     111  limit
 32848    43   350    24    43   765     1      59  (
 32849    43   350    25    43   765     1      60  )
 32850    43   350    26    43   765     1     102  ;
 32851    43   351     9    43   765     0     111  assert
 32852    43   351    16    43   765     0      59  (
 32853    43   351    17    43   765     0     111  pos
 32854    43   351    21    43   765     0      92  <=
 32855    43   351    24    43   765     0     111  lim
 32856    43   351    27    43   765     0      60  )
 32857    43   351    28    43   765     0     102  ;
 32858    43   352     9    43   765     0      36  int
 32859    43   352    13    43   765     0     111  rem
 32860    43   352    17    43   765     0      67  =
 32861    43   352    19    43   765     0      59  (
 32862    43   352    20    43   765     0     111  pos
 32863    43   352    24    43   765     0      92  <=
 32864    43   352    27    43   765     0     111  lim
 32865    43   352    31    43   765     0      58  ?
 32866    43   352    33    43   765     0     111  lim
 32867    43   352    37    43   765     0      77  -
 32868    43   352    39    43   765     0     111  pos
 32869    43   352    43    43   765     0      65  :
 32870    43   352    45    43   765     0     112  0
 32871    43   352    46    43   765     0      60  )
 32872    43   352    47    43   765     0     102  ;
 32873    43   354     9    43   765     0     111  unsafe.copyMemory
 32874    43   354    26    43   765     0      59  (
 32875    43   354    27    43   765     0     111  ix
 32876    43   354    29    43   765     0      59  (
 32877    43   354    30    43   765     0     111  pos
 32878    43   354    33    43   765     0      60  )
 32879    43   354    34    43   765     0      66  ,
 32880    43   354    36    43   765     0     111  ix
 32881    43   354    38    43   765     0      59  (
 32882    43   354    39    43   765     0     112  0
 32883    43   354    40    43   765     0      60  )
 32884    43   354    41    43   765     0      66  ,
 32885    43   354    43    43   765     0     111  rem
 32886    43   354    47    43   765     0      90  <<
 32887    43   354    50    43   765     0     112  2
 32888    43   354    51    43   765     0      60  )
 32889    43   354    52    43   765     0     102  ;
 32890    43   355     9    43   765     0     111  position
 32891    43   355    17    43   765     0      59  (
 32892    43   355    18    43   765     0     111  rem
 32893    43   355    21    43   765     0      60  )
 32894    43   355    22    43   765     0     102  ;
 32895    43   356     9    43   765     0     111  limit
 32896    43   356    14    43   765     0      59  (
 32897    43   356    15    43   765     0     111  capacity
 32898    43   356    23    43   765     0      59  (
 32899    43   356    24    43   765     0      60  )
 32900    43   356    25    43   765     0      60  )
 32901    43   356    26    43   765     0     102  ;
 32902    43   357     9    43   765     0     111  clearMark
 32903    43   357    18    43   765     0      59  (
 32904    43   357    19    43   765     0      60  )
 32905    43   357    20    43   765     0     102  ;
 32906    43   358     9    43   765     0      19  return
 32907    43   358    16    43   765     0      44  this
 32908    43   358    20    43   765     1     102  ;
 32909    43   362     5    43   765     1      64  }
 32910    43   362     5    43   765     0    1826  ENDMETHOD
 32911    43   362     5    43   766     0    1827  STARTMETHOD
 32912    43   364     5    43   766     0      10  public
 32913    43   364    12    43   766     0      39  boolean
 32914    43   364    20    43   766     0     111  isDirect
 32915    43   364    28    43   766     0      59  (
 32916    43   364    29    43   766     0      60  )
 32917    43   364    31    43   766     0      63  {
 32918    43   365     9    43   766     0      19  return
 32919    43   365    16    43   766     0      52  true
 32920    43   365    20    43   766     1     102  ;
 32921    43   366     5    43   766     1      64  }
 32922    43   366     5    43   766     0    1828  ENDMETHOD
 32923    43   366     5    43   767     0    1829  STARTMETHOD
 32924    43   368     5    43   767     0      10  public
 32925    43   368    12    43   767     0      39  boolean
 32926    43   368    20    43   767     0     111  isReadOnly
 32927    43   368    30    43   767     0      59  (
 32928    43   368    31    43   767     0      60  )
 32929    43   368    33    43   767     0      63  {
 32930    43   369     9    43   767     0      19  return
 32931    43   369    16    43   767     0      43  false
 32932    43   369    21    43   767     1     102  ;
 32933    43   370     5    43   767     1      64  }
 32934    43   370     5    43   767     0    1830  ENDMETHOD
 32935    43   370     5    43   768     0    1831  STARTMETHOD
 32936    43   416     5    43   768     0      10  public
 32937    43   416    12    43   768     0     111  ByteOrder
 32938    43   416    22    43   768     0     111  order
 32939    43   416    27    43   768     0      59  (
 32940    43   416    28    43   768     0      60  )
 32941    43   416    30    43   768     0      63  {
 32942    43   418     9    43   768     0      19  return
 32943    43   418    16    43   768     0      59  (
 32944    43   418    17    43   768     0      59  (
 32945    43   418    18    43   768     0     111  ByteOrder.nativeOrder
 32946    43   418    39    43   768     0      59  (
 32947    43   418    40    43   768     0      60  )
 32948    43   418    42    43   768     0      68  ==
 32949    43   418    45    43   768     0     111  ByteOrder.BIG_ENDIAN
 32950    43   418    65    43   768     0      60  )
 32951    43   419    17    43   768     0      58  ?
 32952    43   419    19    43   768     0     111  ByteOrder.LITTLE_ENDIAN
 32953    43   419    43    43   768     0      65  :
 32954    43   419    45    43   768     0     111  ByteOrder.BIG_ENDIAN
 32955    43   419    65    43   768     0      60  )
 32956    43   419    66    43   768     0     102  ;
 32957    43   425     5    43   768     0      64  }
 32958    43   425     5    43   768     0    1832  ENDMETHOD
 32959    43   452     1    43    -1     0      64  }
 32960    43   452     1    43    -1     1    1833  ENDCLASS
 32961    43   452     1    -1    -1     1    1834  ENDFILE C:\javasrc\java\nio\DirectFloatBufferS.java
 32962    44     1     1    -1    -1     1    1835  STARTFILE C:\javasrc\java\nio\DirectFloatBufferU.java
 32963    44    28     1    -1    -1     0       5  package
 32964    44    28     9    -1    -1     0     111  java.nio
 32965    44    28    17    -1    -1     0     102  ;
 32966    44    30     1    -1    -1     1      49  import
 32967    44    30     8    -1    -1     1     111  sun.misc.Cleaner
 32968    44    30    24    -1    -1     1     102  ;
 32969    44    31     1    -1    -1     1      49  import
 32970    44    31     8    -1    -1     1     111  sun.misc.Unsafe
 32971    44    31    23    -1    -1     1     102  ;
 32972    44    32     1    -1    -1     1      49  import
 32973    44    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 32974    44    32    31    -1    -1     1     102  ;
 32975    44    33     1    -1    -1     1      49  import
 32976    44    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 32977    44    33    34    -1    -1     1     102  ;
 32978    44    36     1    44    -1     0    1836  STARTCLASS
 32979    44    36     1    44    -1     0      24  class
 32980    44    36     7    44    -1     0     111  DirectFloatBufferU
 32981    44    38     5    44    -1     0      38  extends
 32982    44    38    13    44    -1     0     111  FloatBuffer
 32983    44    42     5    44    -1     0      17  implements
 32984    44    42    16    44    -1     0     111  DirectBuffer
 32985    44    43     1    44    -1     0      63  {
 32986    44    48     5    44    -1     0      23  protected
 32987    44    48    15    44    -1     0      45  static
 32988    44    48    22    44    -1     0       6  final
 32989    44    48    28    44    -1     0     111  Unsafe
 32990    44    48    35    44    -1     0     111  unsafe
 32991    44    48    42    44    -1     0      67  =
 32992    44    48    44    44    -1     0     111  Bits.unsafe
 32993    44    48    55    44    -1     0      59  (
 32994    44    48    56    44    -1     0      60  )
 32995    44    48    57    44    -1     0     102  ;
 32996    44    51     5    44    -1     0      23  protected
 32997    44    51    15    44    -1     0      45  static
 32998    44    51    22    44    -1     0       6  final
 32999    44    51    28    44    -1     0      39  boolean
 33000    44    51    36    44    -1     0     111  unaligned
 33001    44    51    46    44    -1     0      67  =
 33002    44    51    48    44    -1     0     111  Bits.unaligned
 33003    44    51    62    44    -1     0      59  (
 33004    44    51    63    44    -1     0      60  )
 33005    44    51    64    44    -1     0     102  ;
 33006    44    59     5    44    -1     0      23  protected
 33007    44    59    15    44    -1     0     111  Object
 33008    44    59    22    44    -1     0     111  viewedBuffer
 33009    44    59    35    44    -1     0      67  =
 33010    44    59    37    44    -1     0      21  null
 33011    44    59    41    44    -1     0     102  ;
 33012    44    59    41    44   769     0    1837  STARTMETHOD
 33013    44    61     5    44   769     0      10  public
 33014    44    61    12    44   769     0     111  Object
 33015    44    61    19    44   769     0     111  viewedBuffer
 33016    44    61    31    44   769     0      59  (
 33017    44    61    32    44   769     0      60  )
 33018    44    61    34    44   769     0      63  {
 33019    44    62     9    44   769     0      19  return
 33020    44    62    16    44   769     0     111  viewedBuffer
 33021    44    62    28    44   769     0     102  ;
 33022    44    63     5    44   769     0      64  }
 33023    44    63     5    44   769     0    1838  ENDMETHOD
 33024    44    63     5    44   770     0    1839  STARTMETHOD
 33025    44   100     5    44   770     0      10  public
 33026    44   100    12    44   770     0     111  Cleaner
 33027    44   100    20    44   770     0     111  cleaner
 33028    44   100    27    44   770     0      59  (
 33029    44   100    28    44   770     0      60  )
 33030    44   100    30    44   770     0      63  {
 33031    44   100    32    44   770     0      19  return
 33032    44   100    39    44   770     0      21  null
 33033    44   100    43    44   770     0     102  ;
 33034    44   100    45    44   770     0      64  }
 33035    44   100    45    44   770     0    1840  ENDMETHOD
 33036    44   100    45    44   771     0    1841  STARTMETHOD
 33037    44   164     5    44   771     0     111  DirectFloatBufferU
 33038    44   164    23    44   771     0      59  (
 33039    44   164    24    44   771     0     111  DirectBuffer
 33040    44   164    37    44   771     0     111  db
 33041    44   164    39    44   771     0      66  ,
 33042    44   165    32    44   771     0      36  int
 33043    44   165    36    44   771     0     111  mark
 33044    44   165    40    44   771     0      66  ,
 33045    44   165    42    44   771     0      36  int
 33046    44   165    46    44   771     0     111  pos
 33047    44   165    49    44   771     0      66  ,
 33048    44   165    51    44   771     0      36  int
 33049    44   165    55    44   771     0     111  lim
 33050    44   165    58    44   771     0      66  ,
 33051    44   165    60    44   771     0      36  int
 33052    44   165    64    44   771     0     111  cap
 33053    44   165    67    44   771     0      66  ,
 33054    44   166    32    44   771     0      36  int
 33055    44   166    36    44   771     0     111  off
 33056    44   166    39    44   771     0      60  )
 33057    44   167     5    44   771     0      63  {
 33058    44   169     9    44   771     0      27  super
 33059    44   169    14    44   771     0      59  (
 33060    44   169    15    44   771     0     111  mark
 33061    44   169    19    44   771     0      66  ,
 33062    44   169    21    44   771     0     111  pos
 33063    44   169    24    44   771     0      66  ,
 33064    44   169    26    44   771     0     111  lim
 33065    44   169    29    44   771     0      66  ,
 33066    44   169    31    44   771     0     111  cap
 33067    44   169    34    44   771     0      60  )
 33068    44   169    35    44   771     0     102  ;
 33069    44   170     9    44   771     0     111  address
 33070    44   170    17    44   771     0      67  =
 33071    44   170    19    44   771     0     111  db.address
 33072    44   170    29    44   771     0      59  (
 33073    44   170    30    44   771     0      60  )
 33074    44   170    32    44   771     0      74  +
 33075    44   170    34    44   771     0     111  off
 33076    44   170    37    44   771     0     102  ;
 33077    44   171     9    44   771     0     111  viewedBuffer
 33078    44   171    22    44   771     0      67  =
 33079    44   171    24    44   771     0     111  db
 33080    44   171    26    44   771     0     102  ;
 33081    44   178     5    44   771     0      64  }
 33082    44   178     5    44   771     0    1842  ENDMETHOD
 33083    44   178     5    44   772     0    1843  STARTMETHOD
 33084    44   180     5    44   772     0      10  public
 33085    44   180    12    44   772     0     111  FloatBuffer
 33086    44   180    24    44   772     0     111  slice
 33087    44   180    29    44   772     0      59  (
 33088    44   180    30    44   772     0      60  )
 33089    44   180    32    44   772     0      63  {
 33090    44   181     9    44   772     1      36  int
 33091    44   181    13    44   772     1     111  pos
 33092    44   181    17    44   772     1      67  =
 33093    44   181    19    44   772     1     111  this.position
 33094    44   181    32    44   772     1      59  (
 33095    44   181    33    44   772     1      60  )
 33096    44   181    34    44   772     1     102  ;
 33097    44   182     9    44   772     1      36  int
 33098    44   182    13    44   772     1     111  lim
 33099    44   182    17    44   772     1      67  =
 33100    44   182    19    44   772     1     111  this.limit
 33101    44   182    29    44   772     1      59  (
 33102    44   182    30    44   772     1      60  )
 33103    44   182    31    44   772     1     102  ;
 33104    44   183     9    44   772     0     111  assert
 33105    44   183    16    44   772     0      59  (
 33106    44   183    17    44   772     0     111  pos
 33107    44   183    21    44   772     0      92  <=
 33108    44   183    24    44   772     0     111  lim
 33109    44   183    27    44   772     0      60  )
 33110    44   183    28    44   772     0     102  ;
 33111    44   184     9    44   772     0      36  int
 33112    44   184    13    44   772     0     111  rem
 33113    44   184    17    44   772     0      67  =
 33114    44   184    19    44   772     0      59  (
 33115    44   184    20    44   772     0     111  pos
 33116    44   184    24    44   772     0      92  <=
 33117    44   184    27    44   772     0     111  lim
 33118    44   184    31    44   772     0      58  ?
 33119    44   184    33    44   772     0     111  lim
 33120    44   184    37    44   772     0      77  -
 33121    44   184    39    44   772     0     111  pos
 33122    44   184    43    44   772     0      65  :
 33123    44   184    45    44   772     0     112  0
 33124    44   184    46    44   772     0      60  )
 33125    44   184    47    44   772     0     102  ;
 33126    44   185     9    44   772     0      36  int
 33127    44   185    13    44   772     0     111  off
 33128    44   185    17    44   772     0      67  =
 33129    44   185    19    44   772     0      59  (
 33130    44   185    20    44   772     0     111  pos
 33131    44   185    24    44   772     0      90  <<
 33132    44   185    27    44   772     0     112  2
 33133    44   185    28    44   772     0      60  )
 33134    44   185    29    44   772     0     102  ;
 33135    44   186     9    44   772     0     111  assert
 33136    44   186    16    44   772     0      59  (
 33137    44   186    17    44   772     0     111  off
 33138    44   186    21    44   772     0      88  >=
 33139    44   186    24    44   772     0     112  0
 33140    44   186    25    44   772     0      60  )
 33141    44   186    26    44   772     0     102  ;
 33142    44   187     9    44   772     0      19  return
 33143    44   187    16    44   772     0      15  new
 33144    44   187    20    44   772     0     111  DirectFloatBufferU
 33145    44   187    38    44   772     0      59  (
 33146    44   187    39    44   772     0      44  this
 33147    44   187    43    44   772     0      66  ,
 33148    44   187    45    44   772     0      77  -
 33149    44   187    46    44   772     0     112  1
 33150    44   187    47    44   772     0      66  ,
 33151    44   187    49    44   772     0     112  0
 33152    44   187    50    44   772     0      66  ,
 33153    44   187    52    44   772     0     111  rem
 33154    44   187    55    44   772     0      66  ,
 33155    44   187    57    44   772     0     111  rem
 33156    44   187    60    44   772     0      66  ,
 33157    44   187    62    44   772     0     111  off
 33158    44   187    65    44   772     1      60  )
 33159    44   187    66    44   772     1     102  ;
 33160    44   188     5    44   772     1      64  }
 33161    44   188     5    44   772     0    1844  ENDMETHOD
 33162    44   188     5    44   773     0    1845  STARTMETHOD
 33163    44   190     5    44   773     0      10  public
 33164    44   190    12    44   773     0     111  FloatBuffer
 33165    44   190    24    44   773     0     111  duplicate
 33166    44   190    33    44   773     0      59  (
 33167    44   190    34    44   773     0      60  )
 33168    44   190    36    44   773     0      63  {
 33169    44   191     9    44   773     0      19  return
 33170    44   191    16    44   773     0      15  new
 33171    44   191    20    44   773     0     111  DirectFloatBufferU
 33172    44   191    38    44   773     0      59  (
 33173    44   191    39    44   773     0      44  this
 33174    44   191    43    44   773     0      66  ,
 33175    44   192    47    44   773     1     111  this.markValue
 33176    44   192    61    44   773     1      59  (
 33177    44   192    62    44   773     1      60  )
 33178    44   192    63    44   773     1      66  ,
 33179    44   193    47    44   773     1     111  this.position
 33180    44   193    60    44   773     1      59  (
 33181    44   193    61    44   773     1      60  )
 33182    44   193    62    44   773     1      66  ,
 33183    44   194    47    44   773     1     111  this.limit
 33184    44   194    57    44   773     1      59  (
 33185    44   194    58    44   773     1      60  )
 33186    44   194    59    44   773     1      66  ,
 33187    44   195    47    44   773     1     111  this.capacity
 33188    44   195    60    44   773     1      59  (
 33189    44   195    61    44   773     1      60  )
 33190    44   195    62    44   773     1      66  ,
 33191    44   196    47    44   773     0     112  0
 33192    44   196    48    44   773     1      60  )
 33193    44   196    49    44   773     1     102  ;
 33194    44   197     5    44   773     1      64  }
 33195    44   197     5    44   773     0    1846  ENDMETHOD
 33196    44   197     5    44   774     0    1847  STARTMETHOD
 33197    44   199     5    44   774     0      10  public
 33198    44   199    12    44   774     0     111  FloatBuffer
 33199    44   199    24    44   774     0     111  asReadOnlyBuffer
 33200    44   199    40    44   774     0      59  (
 33201    44   199    41    44   774     0      60  )
 33202    44   199    43    44   774     0      63  {
 33203    44   201     9    44   774     0      19  return
 33204    44   201    16    44   774     0      15  new
 33205    44   201    20    44   774     0     111  DirectFloatBufferRU
 33206    44   201    39    44   774     0      59  (
 33207    44   201    40    44   774     0      44  this
 33208    44   201    44    44   774     0      66  ,
 33209    44   202    44    44   774     1     111  this.markValue
 33210    44   202    58    44   774     1      59  (
 33211    44   202    59    44   774     1      60  )
 33212    44   202    60    44   774     1      66  ,
 33213    44   203    44    44   774     1     111  this.position
 33214    44   203    57    44   774     1      59  (
 33215    44   203    58    44   774     1      60  )
 33216    44   203    59    44   774     1      66  ,
 33217    44   204    44    44   774     1     111  this.limit
 33218    44   204    54    44   774     1      59  (
 33219    44   204    55    44   774     1      60  )
 33220    44   204    56    44   774     1      66  ,
 33221    44   205    44    44   774     1     111  this.capacity
 33222    44   205    57    44   774     1      59  (
 33223    44   205    58    44   774     1      60  )
 33224    44   205    59    44   774     1      66  ,
 33225    44   206    44    44   774     0     112  0
 33226    44   206    45    44   774     1      60  )
 33227    44   206    46    44   774     1     102  ;
 33228    44   210     5    44   774     1      64  }
 33229    44   210     5    44   774     0    1848  ENDMETHOD
 33230    44   210     5    44   775     0    1849  STARTMETHOD
 33231    44   214     5    44   775     0      10  public
 33232    44   214    12    44   775     0      53  long
 33233    44   214    17    44   775     0     111  address
 33234    44   214    24    44   775     0      59  (
 33235    44   214    25    44   775     0      60  )
 33236    44   214    27    44   775     0      63  {
 33237    44   215     9    44   775     0      19  return
 33238    44   215    16    44   775     0     111  address
 33239    44   215    23    44   775     0     102  ;
 33240    44   216     5    44   775     0      64  }
 33241    44   216     5    44   775     0    1850  ENDMETHOD
 33242    44   216     5    44   776     0    1851  STARTMETHOD
 33243    44   218     5    44   776     0      41  private
 33244    44   218    13    44   776     0      53  long
 33245    44   218    18    44   776     0     111  ix
 33246    44   218    20    44   776     0      59  (
 33247    44   218    21    44   776     0      36  int
 33248    44   218    25    44   776     0     111  i
 33249    44   218    26    44   776     0      60  )
 33250    44   218    28    44   776     0      63  {
 33251    44   219     9    44   776     0      19  return
 33252    44   219    16    44   776     0     111  address
 33253    44   219    24    44   776     0      74  +
 33254    44   219    26    44   776     0      59  (
 33255    44   219    27    44   776     0     111  i
 33256    44   219    29    44   776     0      90  <<
 33257    44   219    32    44   776     0     112  2
 33258    44   219    33    44   776     0      60  )
 33259    44   219    34    44   776     0     102  ;
 33260    44   220     5    44   776     0      64  }
 33261    44   220     5    44   776     0    1852  ENDMETHOD
 33262    44   220     5    44   777     0    1853  STARTMETHOD
 33263    44   222     5    44   777     0      10  public
 33264    44   222    12    44   777     0       4  float
 33265    44   222    18    44   777     0     111  get
 33266    44   222    21    44   777     0      59  (
 33267    44   222    22    44   777     0      60  )
 33268    44   222    24    44   777     0      63  {
 33269    44   223     9    44   777     0      19  return
 33270    44   223    16    44   777     0      59  (
 33271    44   223    17    44   777     0      59  (
 33272    44   223    18    44   777     0     111  unsafe.getFloat
 33273    44   223    33    44   777     0      59  (
 33274    44   223    34    44   777     0     111  ix
 33275    44   223    36    44   777     0      59  (
 33276    44   223    37    44   777     0     111  nextGetIndex
 33277    44   223    49    44   777     0      59  (
 33278    44   223    50    44   777     0      60  )
 33279    44   223    51    44   777     0      60  )
 33280    44   223    52    44   777     0      60  )
 33281    44   223    53    44   777     0      60  )
 33282    44   223    54    44   777     0      60  )
 33283    44   223    55    44   777     0     102  ;
 33284    44   224     5    44   777     0      64  }
 33285    44   224     5    44   777     0    1854  ENDMETHOD
 33286    44   224     5    44   778     0    1855  STARTMETHOD
 33287    44   226     5    44   778     0      10  public
 33288    44   226    12    44   778     0       4  float
 33289    44   226    18    44   778     0     111  get
 33290    44   226    21    44   778     0      59  (
 33291    44   226    22    44   778     0      36  int
 33292    44   226    26    44   778     0     111  i
 33293    44   226    27    44   778     0      60  )
 33294    44   226    29    44   778     0      63  {
 33295    44   227     9    44   778     0      19  return
 33296    44   227    16    44   778     0      59  (
 33297    44   227    17    44   778     0      59  (
 33298    44   227    18    44   778     0     111  unsafe.getFloat
 33299    44   227    33    44   778     0      59  (
 33300    44   227    34    44   778     0     111  ix
 33301    44   227    36    44   778     0      59  (
 33302    44   227    37    44   778     0     111  checkIndex
 33303    44   227    47    44   778     0      59  (
 33304    44   227    48    44   778     0     111  i
 33305    44   227    49    44   778     0      60  )
 33306    44   227    50    44   778     0      60  )
 33307    44   227    51    44   778     0      60  )
 33308    44   227    52    44   778     0      60  )
 33309    44   227    53    44   778     0      60  )
 33310    44   227    54    44   778     0     102  ;
 33311    44   228     5    44   778     0      64  }
 33312    44   228     5    44   778     0    1856  ENDMETHOD
 33313    44   228     5    44   779     0    1857  STARTMETHOD
 33314    44   230     5    44   779     0      10  public
 33315    44   230    12    44   779     0     111  FloatBuffer
 33316    44   230    24    44   779     0     111  get
 33317    44   230    27    44   779     0      59  (
 33318    44   230    28    44   779     0       4  float
 33319    44   230    33    44   779     0      61  [
 33320    44   230    34    44   779     0      62  ]
 33321    44   230    36    44   779     0     111  dst
 33322    44   230    39    44   779     0      66  ,
 33323    44   230    41    44   779     0      36  int
 33324    44   230    45    44   779     0     111  offset
 33325    44   230    51    44   779     0      66  ,
 33326    44   230    53    44   779     0      36  int
 33327    44   230    57    44   779     0     111  length
 33328    44   230    63    44   779     0      60  )
 33329    44   230    65    44   779     0      63  {
 33330    44   232     9    44   779     0      31  if
 33331    44   232    12    44   779     0      59  (
 33332    44   232    13    44   779     0      59  (
 33333    44   232    14    44   779     0     111  length
 33334    44   232    21    44   779     0      90  <<
 33335    44   232    24    44   779     0     112  2
 33336    44   232    25    44   779     0      60  )
 33337    44   232    27    44   779     0      89  >
 33338    44   232    29    44   779     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 33339    44   232    61    44   779     0      60  )
 33340    44   232    63    44   779     0      63  {
 33341    44   233    13    44   779     0     111  checkBounds
 33342    44   233    24    44   779     0      59  (
 33343    44   233    25    44   779     0     111  offset
 33344    44   233    31    44   779     0      66  ,
 33345    44   233    33    44   779     0     111  length
 33346    44   233    39    44   779     0      66  ,
 33347    44   233    41    44   779     0     111  dst.length
 33348    44   233    51    44   779     0      60  )
 33349    44   233    52    44   779     0     102  ;
 33350    44   234    13    44   779     1      36  int
 33351    44   234    17    44   779     1     111  pos
 33352    44   234    21    44   779     1      67  =
 33353    44   234    23    44   779     1     111  position
 33354    44   234    31    44   779     1      59  (
 33355    44   234    32    44   779     1      60  )
 33356    44   234    33    44   779     1     102  ;
 33357    44   235    13    44   779     1      36  int
 33358    44   235    17    44   779     1     111  lim
 33359    44   235    21    44   779     1      67  =
 33360    44   235    23    44   779     1     111  limit
 33361    44   235    28    44   779     1      59  (
 33362    44   235    29    44   779     1      60  )
 33363    44   235    30    44   779     1     102  ;
 33364    44   236    13    44   779     0     111  assert
 33365    44   236    20    44   779     0      59  (
 33366    44   236    21    44   779     0     111  pos
 33367    44   236    25    44   779     0      92  <=
 33368    44   236    28    44   779     0     111  lim
 33369    44   236    31    44   779     0      60  )
 33370    44   236    32    44   779     0     102  ;
 33371    44   237    13    44   779     0      36  int
 33372    44   237    17    44   779     0     111  rem
 33373    44   237    21    44   779     0      67  =
 33374    44   237    23    44   779     0      59  (
 33375    44   237    24    44   779     0     111  pos
 33376    44   237    28    44   779     0      92  <=
 33377    44   237    31    44   779     0     111  lim
 33378    44   237    35    44   779     0      58  ?
 33379    44   237    37    44   779     0     111  lim
 33380    44   237    41    44   779     0      77  -
 33381    44   237    43    44   779     0     111  pos
 33382    44   237    47    44   779     0      65  :
 33383    44   237    49    44   779     0     112  0
 33384    44   237    50    44   779     0      60  )
 33385    44   237    51    44   779     0     102  ;
 33386    44   238    13    44   779     0      31  if
 33387    44   238    16    44   779     0      59  (
 33388    44   238    17    44   779     0     111  length
 33389    44   238    24    44   779     0      89  >
 33390    44   238    26    44   779     0     111  rem
 33391    44   238    29    44   779     0      60  )
 33392    44   239    17    44   779     0      20  throw
 33393    44   239    23    44   779     0      15  new
 33394    44   239    27    44   779     0     111  BufferUnderflowException
 33395    44   239    51    44   779     0      59  (
 33396    44   239    52    44   779     0      60  )
 33397    44   239    53    44   779     0     102  ;
 33398    44   241    13    44   779     0      31  if
 33399    44   241    16    44   779     0      59  (
 33400    44   241    17    44   779     0     111  order
 33401    44   241    22    44   779     0      59  (
 33402    44   241    23    44   779     0      60  )
 33403    44   241    25    44   779     0      71  !=
 33404    44   241    28    44   779     0     111  ByteOrder.nativeOrder
 33405    44   241    49    44   779     0      59  (
 33406    44   241    50    44   779     0      60  )
 33407    44   241    51    44   779     0      60  )
 33408    44   242    17    44   779     0     111  Bits.copyToIntArray
 33409    44   242    36    44   779     0      59  (
 33410    44   242    37    44   779     0     111  ix
 33411    44   242    39    44   779     0      59  (
 33412    44   242    40    44   779     0     111  pos
 33413    44   242    43    44   779     0      60  )
 33414    44   242    44    44   779     0      66  ,
 33415    44   242    46    44   779     0     111  dst
 33416    44   242    49    44   779     0      66  ,
 33417    44   243    43    44   779     0     111  offset
 33418    44   243    50    44   779     0      90  <<
 33419    44   243    53    44   779     0     112  2
 33420    44   243    54    44   779     0      66  ,
 33421    44   244    43    44   779     0     111  length
 33422    44   244    50    44   779     0      90  <<
 33423    44   244    53    44   779     0     112  2
 33424    44   244    54    44   779     0      60  )
 33425    44   244    55    44   779     0     102  ;
 33426    44   245    13    44   779     0      48  else
 33427    44   246    17    44   779     0     111  Bits.copyToByteArray
 33428    44   246    37    44   779     0      59  (
 33429    44   246    38    44   779     0     111  ix
 33430    44   246    40    44   779     0      59  (
 33431    44   246    41    44   779     0     111  pos
 33432    44   246    44    44   779     0      60  )
 33433    44   246    45    44   779     0      66  ,
 33434    44   246    47    44   779     0     111  dst
 33435    44   246    50    44   779     0      66  ,
 33436    44   247    38    44   779     0     111  offset
 33437    44   247    45    44   779     0      90  <<
 33438    44   247    48    44   779     0     112  2
 33439    44   247    49    44   779     0      66  ,
 33440    44   248    38    44   779     0     111  length
 33441    44   248    45    44   779     0      90  <<
 33442    44   248    48    44   779     0     112  2
 33443    44   248    49    44   779     0      60  )
 33444    44   248    50    44   779     0     102  ;
 33445    44   249    13    44   779     0     111  position
 33446    44   249    21    44   779     0      59  (
 33447    44   249    22    44   779     0     111  pos
 33448    44   249    26    44   779     0      74  +
 33449    44   249    28    44   779     0     111  length
 33450    44   249    34    44   779     0      60  )
 33451    44   249    35    44   779     0     102  ;
 33452    44   250     9    44   779     0      64  }
 33453    44   250    11    44   779     0      48  else
 33454    44   250    16    44   779     0      63  {
 33455    44   251    13    44   779     0     111  super.get
 33456    44   251    22    44   779     0      59  (
 33457    44   251    23    44   779     0     111  dst
 33458    44   251    26    44   779     0      66  ,
 33459    44   251    28    44   779     0     111  offset
 33460    44   251    34    44   779     0      66  ,
 33461    44   251    36    44   779     0     111  length
 33462    44   251    42    44   779     0      60  )
 33463    44   251    43    44   779     0     102  ;
 33464    44   252     9    44   779     0      64  }
 33465    44   253     9    44   779     0      19  return
 33466    44   253    16    44   779     0      44  this
 33467    44   253    20    44   779     0     102  ;
 33468    44   257     5    44   779     0      64  }
 33469    44   257     5    44   779     0    1858  ENDMETHOD
 33470    44   257     5    44   780     0    1859  STARTMETHOD
 33471    44   261     5    44   780     0      10  public
 33472    44   261    12    44   780     0     111  FloatBuffer
 33473    44   261    24    44   780     0     111  put
 33474    44   261    27    44   780     0      59  (
 33475    44   261    28    44   780     0       4  float
 33476    44   261    34    44   780     0     111  x
 33477    44   261    35    44   780     0      60  )
 33478    44   261    37    44   780     0      63  {
 33479    44   263     9    44   780     0     111  unsafe.putFloat
 33480    44   263    24    44   780     0      59  (
 33481    44   263    25    44   780     0     111  ix
 33482    44   263    27    44   780     0      59  (
 33483    44   263    28    44   780     0     111  nextPutIndex
 33484    44   263    40    44   780     0      59  (
 33485    44   263    41    44   780     0      60  )
 33486    44   263    42    44   780     0      60  )
 33487    44   263    43    44   780     0      66  ,
 33488    44   263    45    44   780     0      59  (
 33489    44   263    46    44   780     0      59  (
 33490    44   263    47    44   780     0     111  x
 33491    44   263    48    44   780     0      60  )
 33492    44   263    49    44   780     0      60  )
 33493    44   263    50    44   780     0      60  )
 33494    44   263    51    44   780     0     102  ;
 33495    44   264     9    44   780     0      19  return
 33496    44   264    16    44   780     0      44  this
 33497    44   264    20    44   780     0     102  ;
 33498    44   268     5    44   780     0      64  }
 33499    44   268     5    44   780     0    1860  ENDMETHOD
 33500    44   268     5    44   781     0    1861  STARTMETHOD
 33501    44   270     5    44   781     0      10  public
 33502    44   270    12    44   781     0     111  FloatBuffer
 33503    44   270    24    44   781     0     111  put
 33504    44   270    27    44   781     0      59  (
 33505    44   270    28    44   781     0      36  int
 33506    44   270    32    44   781     0     111  i
 33507    44   270    33    44   781     0      66  ,
 33508    44   270    35    44   781     0       4  float
 33509    44   270    41    44   781     0     111  x
 33510    44   270    42    44   781     0      60  )
 33511    44   270    44    44   781     0      63  {
 33512    44   272     9    44   781     0     111  unsafe.putFloat
 33513    44   272    24    44   781     0      59  (
 33514    44   272    25    44   781     0     111  ix
 33515    44   272    27    44   781     0      59  (
 33516    44   272    28    44   781     0     111  checkIndex
 33517    44   272    38    44   781     0      59  (
 33518    44   272    39    44   781     0     111  i
 33519    44   272    40    44   781     0      60  )
 33520    44   272    41    44   781     0      60  )
 33521    44   272    42    44   781     0      66  ,
 33522    44   272    44    44   781     0      59  (
 33523    44   272    45    44   781     0      59  (
 33524    44   272    46    44   781     0     111  x
 33525    44   272    47    44   781     0      60  )
 33526    44   272    48    44   781     0      60  )
 33527    44   272    49    44   781     0      60  )
 33528    44   272    50    44   781     0     102  ;
 33529    44   273     9    44   781     0      19  return
 33530    44   273    16    44   781     0      44  this
 33531    44   273    20    44   781     0     102  ;
 33532    44   277     5    44   781     0      64  }
 33533    44   277     5    44   781     0    1862  ENDMETHOD
 33534    44   277     5    44   782     0    1863  STARTMETHOD
 33535    44   279     5    44   782     0      10  public
 33536    44   279    12    44   782     0     111  FloatBuffer
 33537    44   279    24    44   782     0     111  put
 33538    44   279    27    44   782     0      59  (
 33539    44   279    28    44   782     0     111  FloatBuffer
 33540    44   279    40    44   782     0     111  src
 33541    44   279    43    44   782     0      60  )
 33542    44   279    45    44   782     0      63  {
 33543    44   281     9    44   782     0      31  if
 33544    44   281    12    44   782     0      59  (
 33545    44   281    13    44   782     0     111  src
 33546    44   281    17    44   782     0      16  instanceof
 33547    44   281    28    44   782     0     111  DirectFloatBufferU
 33548    44   281    46    44   782     0      60  )
 33549    44   281    48    44   782     0      63  {
 33550    44   282    13    44   782     0      31  if
 33551    44   282    16    44   782     0      59  (
 33552    44   282    17    44   782     0     111  src
 33553    44   282    21    44   782     0      68  ==
 33554    44   282    24    44   782     0      44  this
 33555    44   282    28    44   782     0      60  )
 33556    44   283    17    44   782     0      20  throw
 33557    44   283    23    44   782     0      15  new
 33558    44   283    27    44   782     0     111  IllegalArgumentException
 33559    44   283    51    44   782     0      59  (
 33560    44   283    52    44   782     0      60  )
 33561    44   283    53    44   782     0     102  ;
 33562    44   284    13    44   782     0     111  DirectFloatBufferU
 33563    44   284    32    44   782     0     111  sb
 33564    44   284    35    44   782     0      67  =
 33565    44   284    37    44   782     0      59  (
 33566    44   284    38    44   782     0     111  DirectFloatBufferU
 33567    44   284    56    44   782     0      60  )
 33568    44   284    57    44   782     0     111  src
 33569    44   284    60    44   782     0     102  ;
 33570    44   286    13    44   782     1      36  int
 33571    44   286    17    44   782     1     111  spos
 33572    44   286    22    44   782     1      67  =
 33573    44   286    24    44   782     1     111  sb.position
 33574    44   286    35    44   782     1      59  (
 33575    44   286    36    44   782     1      60  )
 33576    44   286    37    44   782     1     102  ;
 33577    44   287    13    44   782     1      36  int
 33578    44   287    17    44   782     1     111  slim
 33579    44   287    22    44   782     1      67  =
 33580    44   287    24    44   782     1     111  sb.limit
 33581    44   287    32    44   782     1      59  (
 33582    44   287    33    44   782     1      60  )
 33583    44   287    34    44   782     1     102  ;
 33584    44   288    13    44   782     0     111  assert
 33585    44   288    20    44   782     0      59  (
 33586    44   288    21    44   782     0     111  spos
 33587    44   288    26    44   782     0      92  <=
 33588    44   288    29    44   782     0     111  slim
 33589    44   288    33    44   782     0      60  )
 33590    44   288    34    44   782     0     102  ;
 33591    44   289    13    44   782     0      36  int
 33592    44   289    17    44   782     0     111  srem
 33593    44   289    22    44   782     0      67  =
 33594    44   289    24    44   782     0      59  (
 33595    44   289    25    44   782     0     111  spos
 33596    44   289    30    44   782     0      92  <=
 33597    44   289    33    44   782     0     111  slim
 33598    44   289    38    44   782     0      58  ?
 33599    44   289    40    44   782     0     111  slim
 33600    44   289    45    44   782     0      77  -
 33601    44   289    47    44   782     0     111  spos
 33602    44   289    52    44   782     0      65  :
 33603    44   289    54    44   782     0     112  0
 33604    44   289    55    44   782     0      60  )
 33605    44   289    56    44   782     0     102  ;
 33606    44   291    13    44   782     1      36  int
 33607    44   291    17    44   782     1     111  pos
 33608    44   291    21    44   782     1      67  =
 33609    44   291    23    44   782     1     111  position
 33610    44   291    31    44   782     1      59  (
 33611    44   291    32    44   782     1      60  )
 33612    44   291    33    44   782     1     102  ;
 33613    44   292    13    44   782     1      36  int
 33614    44   292    17    44   782     1     111  lim
 33615    44   292    21    44   782     1      67  =
 33616    44   292    23    44   782     1     111  limit
 33617    44   292    28    44   782     1      59  (
 33618    44   292    29    44   782     1      60  )
 33619    44   292    30    44   782     1     102  ;
 33620    44   293    13    44   782     0     111  assert
 33621    44   293    20    44   782     0      59  (
 33622    44   293    21    44   782     0     111  pos
 33623    44   293    25    44   782     0      92  <=
 33624    44   293    28    44   782     0     111  lim
 33625    44   293    31    44   782     0      60  )
 33626    44   293    32    44   782     0     102  ;
 33627    44   294    13    44   782     0      36  int
 33628    44   294    17    44   782     0     111  rem
 33629    44   294    21    44   782     0      67  =
 33630    44   294    23    44   782     0      59  (
 33631    44   294    24    44   782     0     111  pos
 33632    44   294    28    44   782     0      92  <=
 33633    44   294    31    44   782     0     111  lim
 33634    44   294    35    44   782     0      58  ?
 33635    44   294    37    44   782     0     111  lim
 33636    44   294    41    44   782     0      77  -
 33637    44   294    43    44   782     0     111  pos
 33638    44   294    47    44   782     0      65  :
 33639    44   294    49    44   782     0     112  0
 33640    44   294    50    44   782     0      60  )
 33641    44   294    51    44   782     0     102  ;
 33642    44   296    13    44   782     0      31  if
 33643    44   296    16    44   782     0      59  (
 33644    44   296    17    44   782     0     111  srem
 33645    44   296    22    44   782     0      89  >
 33646    44   296    24    44   782     0     111  rem
 33647    44   296    27    44   782     0      60  )
 33648    44   297    17    44   782     0      20  throw
 33649    44   297    23    44   782     0      15  new
 33650    44   297    27    44   782     0     111  BufferOverflowException
 33651    44   297    50    44   782     0      59  (
 33652    44   297    51    44   782     0      60  )
 33653    44   297    52    44   782     0     102  ;
 33654    44   298    13    44   782     0     111  unsafe.copyMemory
 33655    44   298    30    44   782     0      59  (
 33656    44   298    31    44   782     0     111  sb.ix
 33657    44   298    36    44   782     0      59  (
 33658    44   298    37    44   782     0     111  spos
 33659    44   298    41    44   782     0      60  )
 33660    44   298    42    44   782     0      66  ,
 33661    44   298    44    44   782     0     111  ix
 33662    44   298    46    44   782     0      59  (
 33663    44   298    47    44   782     0     111  pos
 33664    44   298    50    44   782     0      60  )
 33665    44   298    51    44   782     0      66  ,
 33666    44   298    53    44   782     0     111  srem
 33667    44   298    58    44   782     0      90  <<
 33668    44   298    61    44   782     0     112  2
 33669    44   298    62    44   782     0      60  )
 33670    44   298    63    44   782     0     102  ;
 33671    44   299    13    44   782     1     111  sb.position
 33672    44   299    24    44   782     1      59  (
 33673    44   299    25    44   782     1     111  spos
 33674    44   299    30    44   782     1      74  +
 33675    44   299    32    44   782     1     111  srem
 33676    44   299    36    44   782     1      60  )
 33677    44   299    37    44   782     1     102  ;
 33678    44   300    13    44   782     1     111  position
 33679    44   300    21    44   782     1      59  (
 33680    44   300    22    44   782     1     111  pos
 33681    44   300    26    44   782     1      74  +
 33682    44   300    28    44   782     1     111  srem
 33683    44   300    32    44   782     1      60  )
 33684    44   300    33    44   782     1     102  ;
 33685    44   301     9    44   782     0      64  }
 33686    44   301    11    44   782     0      48  else
 33687    44   301    16    44   782     0      31  if
 33688    44   301    19    44   782     0      59  (
 33689    44   301    20    44   782     0     111  src.hb
 33690    44   301    27    44   782     0      71  !=
 33691    44   301    30    44   782     0      21  null
 33692    44   301    34    44   782     0      60  )
 33693    44   301    36    44   782     0      63  {
 33694    44   303    13    44   782     1      36  int
 33695    44   303    17    44   782     1     111  spos
 33696    44   303    22    44   782     1      67  =
 33697    44   303    24    44   782     1     111  src.position
 33698    44   303    36    44   782     1      59  (
 33699    44   303    37    44   782     1      60  )
 33700    44   303    38    44   782     1     102  ;
 33701    44   304    13    44   782     1      36  int
 33702    44   304    17    44   782     1     111  slim
 33703    44   304    22    44   782     1      67  =
 33704    44   304    24    44   782     1     111  src.limit
 33705    44   304    33    44   782     1      59  (
 33706    44   304    34    44   782     1      60  )
 33707    44   304    35    44   782     1     102  ;
 33708    44   305    13    44   782     0     111  assert
 33709    44   305    20    44   782     0      59  (
 33710    44   305    21    44   782     0     111  spos
 33711    44   305    26    44   782     0      92  <=
 33712    44   305    29    44   782     0     111  slim
 33713    44   305    33    44   782     0      60  )
 33714    44   305    34    44   782     0     102  ;
 33715    44   306    13    44   782     0      36  int
 33716    44   306    17    44   782     0     111  srem
 33717    44   306    22    44   782     0      67  =
 33718    44   306    24    44   782     0      59  (
 33719    44   306    25    44   782     0     111  spos
 33720    44   306    30    44   782     0      92  <=
 33721    44   306    33    44   782     0     111  slim
 33722    44   306    38    44   782     0      58  ?
 33723    44   306    40    44   782     0     111  slim
 33724    44   306    45    44   782     0      77  -
 33725    44   306    47    44   782     0     111  spos
 33726    44   306    52    44   782     0      65  :
 33727    44   306    54    44   782     0     112  0
 33728    44   306    55    44   782     0      60  )
 33729    44   306    56    44   782     0     102  ;
 33730    44   308    13    44   782     0     111  put
 33731    44   308    16    44   782     0      59  (
 33732    44   308    17    44   782     0     111  src.hb
 33733    44   308    23    44   782     0      66  ,
 33734    44   308    25    44   782     0     111  src.offset
 33735    44   308    36    44   782     0      74  +
 33736    44   308    38    44   782     0     111  spos
 33737    44   308    42    44   782     0      66  ,
 33738    44   308    44    44   782     0     111  srem
 33739    44   308    48    44   782     0      60  )
 33740    44   308    49    44   782     0     102  ;
 33741    44   309    13    44   782     0     111  src.position
 33742    44   309    25    44   782     0      59  (
 33743    44   309    26    44   782     0     111  spos
 33744    44   309    31    44   782     0      74  +
 33745    44   309    33    44   782     0     111  srem
 33746    44   309    37    44   782     0      60  )
 33747    44   309    38    44   782     0     102  ;
 33748    44   311     9    44   782     0      64  }
 33749    44   311    11    44   782     0      48  else
 33750    44   311    16    44   782     0      63  {
 33751    44   312    13    44   782     0     111  super.put
 33752    44   312    22    44   782     0      59  (
 33753    44   312    23    44   782     0     111  src
 33754    44   312    26    44   782     0      60  )
 33755    44   312    27    44   782     0     102  ;
 33756    44   313     9    44   782     0      64  }
 33757    44   314     9    44   782     0      19  return
 33758    44   314    16    44   782     0      44  this
 33759    44   314    20    44   782     0     102  ;
 33760    44   318     5    44   782     0      64  }
 33761    44   318     5    44   782     0    1864  ENDMETHOD
 33762    44   318     5    44   783     0    1865  STARTMETHOD
 33763    44   320     5    44   783     0      10  public
 33764    44   320    12    44   783     0     111  FloatBuffer
 33765    44   320    24    44   783     0     111  put
 33766    44   320    27    44   783     0      59  (
 33767    44   320    28    44   783     0       4  float
 33768    44   320    33    44   783     0      61  [
 33769    44   320    34    44   783     0      62  ]
 33770    44   320    36    44   783     0     111  src
 33771    44   320    39    44   783     0      66  ,
 33772    44   320    41    44   783     0      36  int
 33773    44   320    45    44   783     0     111  offset
 33774    44   320    51    44   783     0      66  ,
 33775    44   320    53    44   783     0      36  int
 33776    44   320    57    44   783     0     111  length
 33777    44   320    63    44   783     0      60  )
 33778    44   320    65    44   783     0      63  {
 33779    44   322     9    44   783     0      31  if
 33780    44   322    12    44   783     0      59  (
 33781    44   322    13    44   783     0      59  (
 33782    44   322    14    44   783     0     111  length
 33783    44   322    21    44   783     0      90  <<
 33784    44   322    24    44   783     0     112  2
 33785    44   322    25    44   783     0      60  )
 33786    44   322    27    44   783     0      89  >
 33787    44   322    29    44   783     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 33788    44   322    63    44   783     0      60  )
 33789    44   322    65    44   783     0      63  {
 33790    44   323    13    44   783     0     111  checkBounds
 33791    44   323    24    44   783     0      59  (
 33792    44   323    25    44   783     0     111  offset
 33793    44   323    31    44   783     0      66  ,
 33794    44   323    33    44   783     0     111  length
 33795    44   323    39    44   783     0      66  ,
 33796    44   323    41    44   783     0     111  src.length
 33797    44   323    51    44   783     0      60  )
 33798    44   323    52    44   783     0     102  ;
 33799    44   324    13    44   783     1      36  int
 33800    44   324    17    44   783     1     111  pos
 33801    44   324    21    44   783     1      67  =
 33802    44   324    23    44   783     1     111  position
 33803    44   324    31    44   783     1      59  (
 33804    44   324    32    44   783     1      60  )
 33805    44   324    33    44   783     1     102  ;
 33806    44   325    13    44   783     1      36  int
 33807    44   325    17    44   783     1     111  lim
 33808    44   325    21    44   783     1      67  =
 33809    44   325    23    44   783     1     111  limit
 33810    44   325    28    44   783     1      59  (
 33811    44   325    29    44   783     1      60  )
 33812    44   325    30    44   783     1     102  ;
 33813    44   326    13    44   783     0     111  assert
 33814    44   326    20    44   783     0      59  (
 33815    44   326    21    44   783     0     111  pos
 33816    44   326    25    44   783     0      92  <=
 33817    44   326    28    44   783     0     111  lim
 33818    44   326    31    44   783     0      60  )
 33819    44   326    32    44   783     0     102  ;
 33820    44   327    13    44   783     0      36  int
 33821    44   327    17    44   783     0     111  rem
 33822    44   327    21    44   783     0      67  =
 33823    44   327    23    44   783     0      59  (
 33824    44   327    24    44   783     0     111  pos
 33825    44   327    28    44   783     0      92  <=
 33826    44   327    31    44   783     0     111  lim
 33827    44   327    35    44   783     0      58  ?
 33828    44   327    37    44   783     0     111  lim
 33829    44   327    41    44   783     0      77  -
 33830    44   327    43    44   783     0     111  pos
 33831    44   327    47    44   783     0      65  :
 33832    44   327    49    44   783     0     112  0
 33833    44   327    50    44   783     0      60  )
 33834    44   327    51    44   783     0     102  ;
 33835    44   328    13    44   783     0      31  if
 33836    44   328    16    44   783     0      59  (
 33837    44   328    17    44   783     0     111  length
 33838    44   328    24    44   783     0      89  >
 33839    44   328    26    44   783     0     111  rem
 33840    44   328    29    44   783     0      60  )
 33841    44   329    17    44   783     0      20  throw
 33842    44   329    23    44   783     0      15  new
 33843    44   329    27    44   783     0     111  BufferOverflowException
 33844    44   329    50    44   783     0      59  (
 33845    44   329    51    44   783     0      60  )
 33846    44   329    52    44   783     0     102  ;
 33847    44   331    13    44   783     0      31  if
 33848    44   331    16    44   783     0      59  (
 33849    44   331    17    44   783     0     111  order
 33850    44   331    22    44   783     0      59  (
 33851    44   331    23    44   783     0      60  )
 33852    44   331    25    44   783     0      71  !=
 33853    44   331    28    44   783     0     111  ByteOrder.nativeOrder
 33854    44   331    49    44   783     0      59  (
 33855    44   331    50    44   783     0      60  )
 33856    44   331    51    44   783     0      60  )
 33857    44   332    17    44   783     0     111  Bits.copyFromIntArray
 33858    44   332    38    44   783     0      59  (
 33859    44   332    39    44   783     0     111  src
 33860    44   332    42    44   783     0      66  ,
 33861    44   332    44    44   783     0     111  offset
 33862    44   332    51    44   783     0      90  <<
 33863    44   332    54    44   783     0     112  2
 33864    44   332    55    44   783     0      66  ,
 33865    44   333    45    44   783     0     111  ix
 33866    44   333    47    44   783     0      59  (
 33867    44   333    48    44   783     0     111  pos
 33868    44   333    51    44   783     0      60  )
 33869    44   333    52    44   783     0      66  ,
 33870    44   333    54    44   783     0     111  length
 33871    44   333    61    44   783     0      90  <<
 33872    44   333    64    44   783     0     112  2
 33873    44   333    65    44   783     0      60  )
 33874    44   333    66    44   783     0     102  ;
 33875    44   334    13    44   783     0      48  else
 33876    44   335    17    44   783     0     111  Bits.copyFromByteArray
 33877    44   335    39    44   783     0      59  (
 33878    44   335    40    44   783     0     111  src
 33879    44   335    43    44   783     0      66  ,
 33880    44   335    45    44   783     0     111  offset
 33881    44   335    52    44   783     0      90  <<
 33882    44   335    55    44   783     0     112  2
 33883    44   335    56    44   783     0      66  ,
 33884    44   336    40    44   783     0     111  ix
 33885    44   336    42    44   783     0      59  (
 33886    44   336    43    44   783     0     111  pos
 33887    44   336    46    44   783     0      60  )
 33888    44   336    47    44   783     0      66  ,
 33889    44   336    49    44   783     0     111  length
 33890    44   336    56    44   783     0      90  <<
 33891    44   336    59    44   783     0     112  2
 33892    44   336    60    44   783     0      60  )
 33893    44   336    61    44   783     0     102  ;
 33894    44   337    13    44   783     0     111  position
 33895    44   337    21    44   783     0      59  (
 33896    44   337    22    44   783     0     111  pos
 33897    44   337    26    44   783     0      74  +
 33898    44   337    28    44   783     0     111  length
 33899    44   337    34    44   783     0      60  )
 33900    44   337    35    44   783     0     102  ;
 33901    44   338     9    44   783     0      64  }
 33902    44   338    11    44   783     0      48  else
 33903    44   338    16    44   783     0      63  {
 33904    44   339    13    44   783     0     111  super.put
 33905    44   339    22    44   783     0      59  (
 33906    44   339    23    44   783     0     111  src
 33907    44   339    26    44   783     0      66  ,
 33908    44   339    28    44   783     0     111  offset
 33909    44   339    34    44   783     0      66  ,
 33910    44   339    36    44   783     0     111  length
 33911    44   339    42    44   783     0      60  )
 33912    44   339    43    44   783     0     102  ;
 33913    44   340     9    44   783     0      64  }
 33914    44   341     9    44   783     0      19  return
 33915    44   341    16    44   783     0      44  this
 33916    44   341    20    44   783     0     102  ;
 33917    44   345     5    44   783     0      64  }
 33918    44   345     5    44   783     0    1866  ENDMETHOD
 33919    44   345     5    44   784     0    1867  STARTMETHOD
 33920    44   347     5    44   784     0      10  public
 33921    44   347    12    44   784     0     111  FloatBuffer
 33922    44   347    24    44   784     0     111  compact
 33923    44   347    31    44   784     0      59  (
 33924    44   347    32    44   784     0      60  )
 33925    44   347    34    44   784     0      63  {
 33926    44   349     9    44   784     1      36  int
 33927    44   349    13    44   784     1     111  pos
 33928    44   349    17    44   784     1      67  =
 33929    44   349    19    44   784     1     111  position
 33930    44   349    27    44   784     1      59  (
 33931    44   349    28    44   784     1      60  )
 33932    44   349    29    44   784     1     102  ;
 33933    44   350     9    44   784     1      36  int
 33934    44   350    13    44   784     1     111  lim
 33935    44   350    17    44   784     1      67  =
 33936    44   350    19    44   784     1     111  limit
 33937    44   350    24    44   784     1      59  (
 33938    44   350    25    44   784     1      60  )
 33939    44   350    26    44   784     1     102  ;
 33940    44   351     9    44   784     0     111  assert
 33941    44   351    16    44   784     0      59  (
 33942    44   351    17    44   784     0     111  pos
 33943    44   351    21    44   784     0      92  <=
 33944    44   351    24    44   784     0     111  lim
 33945    44   351    27    44   784     0      60  )
 33946    44   351    28    44   784     0     102  ;
 33947    44   352     9    44   784     0      36  int
 33948    44   352    13    44   784     0     111  rem
 33949    44   352    17    44   784     0      67  =
 33950    44   352    19    44   784     0      59  (
 33951    44   352    20    44   784     0     111  pos
 33952    44   352    24    44   784     0      92  <=
 33953    44   352    27    44   784     0     111  lim
 33954    44   352    31    44   784     0      58  ?
 33955    44   352    33    44   784     0     111  lim
 33956    44   352    37    44   784     0      77  -
 33957    44   352    39    44   784     0     111  pos
 33958    44   352    43    44   784     0      65  :
 33959    44   352    45    44   784     0     112  0
 33960    44   352    46    44   784     0      60  )
 33961    44   352    47    44   784     0     102  ;
 33962    44   354     9    44   784     0     111  unsafe.copyMemory
 33963    44   354    26    44   784     0      59  (
 33964    44   354    27    44   784     0     111  ix
 33965    44   354    29    44   784     0      59  (
 33966    44   354    30    44   784     0     111  pos
 33967    44   354    33    44   784     0      60  )
 33968    44   354    34    44   784     0      66  ,
 33969    44   354    36    44   784     0     111  ix
 33970    44   354    38    44   784     0      59  (
 33971    44   354    39    44   784     0     112  0
 33972    44   354    40    44   784     0      60  )
 33973    44   354    41    44   784     0      66  ,
 33974    44   354    43    44   784     0     111  rem
 33975    44   354    47    44   784     0      90  <<
 33976    44   354    50    44   784     0     112  2
 33977    44   354    51    44   784     0      60  )
 33978    44   354    52    44   784     0     102  ;
 33979    44   355     9    44   784     0     111  position
 33980    44   355    17    44   784     0      59  (
 33981    44   355    18    44   784     0     111  rem
 33982    44   355    21    44   784     0      60  )
 33983    44   355    22    44   784     0     102  ;
 33984    44   356     9    44   784     0     111  limit
 33985    44   356    14    44   784     0      59  (
 33986    44   356    15    44   784     0     111  capacity
 33987    44   356    23    44   784     0      59  (
 33988    44   356    24    44   784     0      60  )
 33989    44   356    25    44   784     0      60  )
 33990    44   356    26    44   784     0     102  ;
 33991    44   357     9    44   784     0     111  clearMark
 33992    44   357    18    44   784     0      59  (
 33993    44   357    19    44   784     0      60  )
 33994    44   357    20    44   784     0     102  ;
 33995    44   358     9    44   784     0      19  return
 33996    44   358    16    44   784     0      44  this
 33997    44   358    20    44   784     1     102  ;
 33998    44   362     5    44   784     1      64  }
 33999    44   362     5    44   784     0    1868  ENDMETHOD
 34000    44   362     5    44   785     0    1869  STARTMETHOD
 34001    44   364     5    44   785     0      10  public
 34002    44   364    12    44   785     0      39  boolean
 34003    44   364    20    44   785     0     111  isDirect
 34004    44   364    28    44   785     0      59  (
 34005    44   364    29    44   785     0      60  )
 34006    44   364    31    44   785     0      63  {
 34007    44   365     9    44   785     0      19  return
 34008    44   365    16    44   785     0      52  true
 34009    44   365    20    44   785     1     102  ;
 34010    44   366     5    44   785     1      64  }
 34011    44   366     5    44   785     0    1870  ENDMETHOD
 34012    44   366     5    44   786     0    1871  STARTMETHOD
 34013    44   368     5    44   786     0      10  public
 34014    44   368    12    44   786     0      39  boolean
 34015    44   368    20    44   786     0     111  isReadOnly
 34016    44   368    30    44   786     0      59  (
 34017    44   368    31    44   786     0      60  )
 34018    44   368    33    44   786     0      63  {
 34019    44   369     9    44   786     0      19  return
 34020    44   369    16    44   786     0      43  false
 34021    44   369    21    44   786     1     102  ;
 34022    44   370     5    44   786     1      64  }
 34023    44   370     5    44   786     0    1872  ENDMETHOD
 34024    44   370     5    44   787     0    1873  STARTMETHOD
 34025    44   416     5    44   787     0      10  public
 34026    44   416    12    44   787     0     111  ByteOrder
 34027    44   416    22    44   787     0     111  order
 34028    44   416    27    44   787     0      59  (
 34029    44   416    28    44   787     0      60  )
 34030    44   416    30    44   787     0      63  {
 34031    44   422     9    44   787     0      19  return
 34032    44   422    16    44   787     0      59  (
 34033    44   422    17    44   787     0      59  (
 34034    44   422    18    44   787     0     111  ByteOrder.nativeOrder
 34035    44   422    39    44   787     0      59  (
 34036    44   422    40    44   787     0      60  )
 34037    44   422    42    44   787     0      71  !=
 34038    44   422    45    44   787     0     111  ByteOrder.BIG_ENDIAN
 34039    44   422    65    44   787     0      60  )
 34040    44   423    17    44   787     0      58  ?
 34041    44   423    19    44   787     0     111  ByteOrder.LITTLE_ENDIAN
 34042    44   423    43    44   787     0      65  :
 34043    44   423    45    44   787     0     111  ByteOrder.BIG_ENDIAN
 34044    44   423    65    44   787     0      60  )
 34045    44   423    66    44   787     0     102  ;
 34046    44   425     5    44   787     0      64  }
 34047    44   425     5    44   787     0    1874  ENDMETHOD
 34048    44   452     1    44    -1     0      64  }
 34049    44   452     1    44    -1     1    1875  ENDCLASS
 34050    44   452     1    -1    -1     1    1876  ENDFILE C:\javasrc\java\nio\DirectFloatBufferU.java
 34051    45     1     1    -1    -1     1    1877  STARTFILE C:\javasrc\java\nio\DirectIntBufferRS.java
 34052    45    28     1    -1    -1     0       5  package
 34053    45    28     9    -1    -1     0     111  java.nio
 34054    45    28    17    -1    -1     0     102  ;
 34055    45    30     1    -1    -1     1      49  import
 34056    45    30     8    -1    -1     1     111  sun.misc.Cleaner
 34057    45    30    24    -1    -1     1     102  ;
 34058    45    31     1    -1    -1     1      49  import
 34059    45    31     8    -1    -1     1     111  sun.misc.Unsafe
 34060    45    31    23    -1    -1     1     102  ;
 34061    45    32     1    -1    -1     1      49  import
 34062    45    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 34063    45    32    31    -1    -1     1     102  ;
 34064    45    33     1    -1    -1     1      49  import
 34065    45    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 34066    45    33    34    -1    -1     1     102  ;
 34067    45    36     1    45    -1     0    1878  STARTCLASS
 34068    45    36     1    45    -1     0      24  class
 34069    45    36     7    45    -1     0     111  DirectIntBufferRS
 34070    45    40     5    45    -1     0      38  extends
 34071    45    40    13    45    -1     0     111  DirectIntBufferS
 34072    45    42     5    45    -1     0      17  implements
 34073    45    42    16    45    -1     0     111  DirectBuffer
 34074    45    43     1    45    -1     0      63  {
 34075    45    43     1    45   788     0    1879  STARTMETHOD
 34076    45   164     5    45   788     0     111  DirectIntBufferRS
 34077    45   164    22    45   788     0      59  (
 34078    45   164    23    45   788     0     111  DirectBuffer
 34079    45   164    36    45   788     0     111  db
 34080    45   164    38    45   788     0      66  ,
 34081    45   165    32    45   788     0      36  int
 34082    45   165    36    45   788     0     111  mark
 34083    45   165    40    45   788     0      66  ,
 34084    45   165    42    45   788     0      36  int
 34085    45   165    46    45   788     0     111  pos
 34086    45   165    49    45   788     0      66  ,
 34087    45   165    51    45   788     0      36  int
 34088    45   165    55    45   788     0     111  lim
 34089    45   165    58    45   788     0      66  ,
 34090    45   165    60    45   788     0      36  int
 34091    45   165    64    45   788     0     111  cap
 34092    45   165    67    45   788     0      66  ,
 34093    45   166    32    45   788     0      36  int
 34094    45   166    36    45   788     0     111  off
 34095    45   166    39    45   788     0      60  )
 34096    45   167     5    45   788     0      63  {
 34097    45   176     9    45   788     0      27  super
 34098    45   176    14    45   788     0      59  (
 34099    45   176    15    45   788     0     111  db
 34100    45   176    17    45   788     0      66  ,
 34101    45   176    19    45   788     0     111  mark
 34102    45   176    23    45   788     0      66  ,
 34103    45   176    25    45   788     0     111  pos
 34104    45   176    28    45   788     0      66  ,
 34105    45   176    30    45   788     0     111  lim
 34106    45   176    33    45   788     0      66  ,
 34107    45   176    35    45   788     0     111  cap
 34108    45   176    38    45   788     0      66  ,
 34109    45   176    40    45   788     0     111  off
 34110    45   176    43    45   788     0      60  )
 34111    45   176    44    45   788     0     102  ;
 34112    45   178     5    45   788     0      64  }
 34113    45   178     5    45   788     0    1880  ENDMETHOD
 34114    45   178     5    45   789     0    1881  STARTMETHOD
 34115    45   180     5    45   789     0      10  public
 34116    45   180    12    45   789     0     111  IntBuffer
 34117    45   180    22    45   789     0     111  slice
 34118    45   180    27    45   789     0      59  (
 34119    45   180    28    45   789     0      60  )
 34120    45   180    30    45   789     0      63  {
 34121    45   181     9    45   789     1      36  int
 34122    45   181    13    45   789     1     111  pos
 34123    45   181    17    45   789     1      67  =
 34124    45   181    19    45   789     1     111  this.position
 34125    45   181    32    45   789     1      59  (
 34126    45   181    33    45   789     1      60  )
 34127    45   181    34    45   789     1     102  ;
 34128    45   182     9    45   789     1      36  int
 34129    45   182    13    45   789     1     111  lim
 34130    45   182    17    45   789     1      67  =
 34131    45   182    19    45   789     1     111  this.limit
 34132    45   182    29    45   789     1      59  (
 34133    45   182    30    45   789     1      60  )
 34134    45   182    31    45   789     1     102  ;
 34135    45   183     9    45   789     0     111  assert
 34136    45   183    16    45   789     0      59  (
 34137    45   183    17    45   789     0     111  pos
 34138    45   183    21    45   789     0      92  <=
 34139    45   183    24    45   789     0     111  lim
 34140    45   183    27    45   789     0      60  )
 34141    45   183    28    45   789     0     102  ;
 34142    45   184     9    45   789     0      36  int
 34143    45   184    13    45   789     0     111  rem
 34144    45   184    17    45   789     0      67  =
 34145    45   184    19    45   789     0      59  (
 34146    45   184    20    45   789     0     111  pos
 34147    45   184    24    45   789     0      92  <=
 34148    45   184    27    45   789     0     111  lim
 34149    45   184    31    45   789     0      58  ?
 34150    45   184    33    45   789     0     111  lim
 34151    45   184    37    45   789     0      77  -
 34152    45   184    39    45   789     0     111  pos
 34153    45   184    43    45   789     0      65  :
 34154    45   184    45    45   789     0     112  0
 34155    45   184    46    45   789     0      60  )
 34156    45   184    47    45   789     0     102  ;
 34157    45   185     9    45   789     0      36  int
 34158    45   185    13    45   789     0     111  off
 34159    45   185    17    45   789     0      67  =
 34160    45   185    19    45   789     0      59  (
 34161    45   185    20    45   789     0     111  pos
 34162    45   185    24    45   789     0      90  <<
 34163    45   185    27    45   789     0     112  2
 34164    45   185    28    45   789     0      60  )
 34165    45   185    29    45   789     0     102  ;
 34166    45   186     9    45   789     0     111  assert
 34167    45   186    16    45   789     0      59  (
 34168    45   186    17    45   789     0     111  off
 34169    45   186    21    45   789     0      88  >=
 34170    45   186    24    45   789     0     112  0
 34171    45   186    25    45   789     0      60  )
 34172    45   186    26    45   789     0     102  ;
 34173    45   187     9    45   789     0      19  return
 34174    45   187    16    45   789     0      15  new
 34175    45   187    20    45   789     0     111  DirectIntBufferRS
 34176    45   187    37    45   789     0      59  (
 34177    45   187    38    45   789     0      44  this
 34178    45   187    42    45   789     0      66  ,
 34179    45   187    44    45   789     0      77  -
 34180    45   187    45    45   789     0     112  1
 34181    45   187    46    45   789     0      66  ,
 34182    45   187    48    45   789     0     112  0
 34183    45   187    49    45   789     0      66  ,
 34184    45   187    51    45   789     0     111  rem
 34185    45   187    54    45   789     0      66  ,
 34186    45   187    56    45   789     0     111  rem
 34187    45   187    59    45   789     0      66  ,
 34188    45   187    61    45   789     0     111  off
 34189    45   187    64    45   789     0      60  )
 34190    45   187    65    45   789     0     102  ;
 34191    45   188     5    45   789     0      64  }
 34192    45   188     5    45   789     0    1882  ENDMETHOD
 34193    45   188     5    45   790     0    1883  STARTMETHOD
 34194    45   190     5    45   790     0      10  public
 34195    45   190    12    45   790     0     111  IntBuffer
 34196    45   190    22    45   790     0     111  duplicate
 34197    45   190    31    45   790     0      59  (
 34198    45   190    32    45   790     0      60  )
 34199    45   190    34    45   790     0      63  {
 34200    45   191     9    45   790     0      19  return
 34201    45   191    16    45   790     0      15  new
 34202    45   191    20    45   790     0     111  DirectIntBufferRS
 34203    45   191    37    45   790     0      59  (
 34204    45   191    38    45   790     0      44  this
 34205    45   191    42    45   790     0      66  ,
 34206    45   192    47    45   790     1     111  this.markValue
 34207    45   192    61    45   790     1      59  (
 34208    45   192    62    45   790     1      60  )
 34209    45   192    63    45   790     1      66  ,
 34210    45   193    47    45   790     1     111  this.position
 34211    45   193    60    45   790     1      59  (
 34212    45   193    61    45   790     1      60  )
 34213    45   193    62    45   790     1      66  ,
 34214    45   194    47    45   790     1     111  this.limit
 34215    45   194    57    45   790     1      59  (
 34216    45   194    58    45   790     1      60  )
 34217    45   194    59    45   790     1      66  ,
 34218    45   195    47    45   790     1     111  this.capacity
 34219    45   195    60    45   790     1      59  (
 34220    45   195    61    45   790     1      60  )
 34221    45   195    62    45   790     1      66  ,
 34222    45   196    47    45   790     0     112  0
 34223    45   196    48    45   790     0      60  )
 34224    45   196    49    45   790     0     102  ;
 34225    45   197     5    45   790     0      64  }
 34226    45   197     5    45   790     0    1884  ENDMETHOD
 34227    45   197     5    45   791     0    1885  STARTMETHOD
 34228    45   199     5    45   791     0      10  public
 34229    45   199    12    45   791     0     111  IntBuffer
 34230    45   199    22    45   791     0     111  asReadOnlyBuffer
 34231    45   199    38    45   791     0      59  (
 34232    45   199    39    45   791     0      60  )
 34233    45   199    41    45   791     0      63  {
 34234    45   208     9    45   791     0      19  return
 34235    45   208    16    45   791     0     111  duplicate
 34236    45   208    25    45   791     0      59  (
 34237    45   208    26    45   791     0      60  )
 34238    45   208    27    45   791     0     102  ;
 34239    45   210     5    45   791     0      64  }
 34240    45   210     5    45   791     0    1886  ENDMETHOD
 34241    45   210     5    45   792     0    1887  STARTMETHOD
 34242    45   261     5    45   792     0      10  public
 34243    45   261    12    45   792     0     111  IntBuffer
 34244    45   261    22    45   792     0     111  put
 34245    45   261    25    45   792     0      59  (
 34246    45   261    26    45   792     0      36  int
 34247    45   261    30    45   792     0     111  x
 34248    45   261    31    45   792     0      60  )
 34249    45   261    33    45   792     0      63  {
 34250    45   266     9    45   792     0      20  throw
 34251    45   266    15    45   792     0      15  new
 34252    45   266    19    45   792     0     111  ReadOnlyBufferException
 34253    45   266    42    45   792     0      59  (
 34254    45   266    43    45   792     0      60  )
 34255    45   266    44    45   792     0     102  ;
 34256    45   268     5    45   792     0      64  }
 34257    45   268     5    45   792     0    1888  ENDMETHOD
 34258    45   268     5    45   793     0    1889  STARTMETHOD
 34259    45   270     5    45   793     0      10  public
 34260    45   270    12    45   793     0     111  IntBuffer
 34261    45   270    22    45   793     0     111  put
 34262    45   270    25    45   793     0      59  (
 34263    45   270    26    45   793     0      36  int
 34264    45   270    30    45   793     0     111  i
 34265    45   270    31    45   793     0      66  ,
 34266    45   270    33    45   793     0      36  int
 34267    45   270    37    45   793     0     111  x
 34268    45   270    38    45   793     0      60  )
 34269    45   270    40    45   793     0      63  {
 34270    45   275     9    45   793     0      20  throw
 34271    45   275    15    45   793     0      15  new
 34272    45   275    19    45   793     0     111  ReadOnlyBufferException
 34273    45   275    42    45   793     0      59  (
 34274    45   275    43    45   793     0      60  )
 34275    45   275    44    45   793     0     102  ;
 34276    45   277     5    45   793     0      64  }
 34277    45   277     5    45   793     0    1890  ENDMETHOD
 34278    45   277     5    45   794     0    1891  STARTMETHOD
 34279    45   279     5    45   794     0      10  public
 34280    45   279    12    45   794     0     111  IntBuffer
 34281    45   279    22    45   794     0     111  put
 34282    45   279    25    45   794     0      59  (
 34283    45   279    26    45   794     0     111  IntBuffer
 34284    45   279    36    45   794     0     111  src
 34285    45   279    39    45   794     0      60  )
 34286    45   279    41    45   794     0      63  {
 34287    45   316     9    45   794     0      20  throw
 34288    45   316    15    45   794     0      15  new
 34289    45   316    19    45   794     0     111  ReadOnlyBufferException
 34290    45   316    42    45   794     0      59  (
 34291    45   316    43    45   794     0      60  )
 34292    45   316    44    45   794     0     102  ;
 34293    45   318     5    45   794     0      64  }
 34294    45   318     5    45   794     0    1892  ENDMETHOD
 34295    45   318     5    45   795     0    1893  STARTMETHOD
 34296    45   320     5    45   795     0      10  public
 34297    45   320    12    45   795     0     111  IntBuffer
 34298    45   320    22    45   795     0     111  put
 34299    45   320    25    45   795     0      59  (
 34300    45   320    26    45   795     0      36  int
 34301    45   320    29    45   795     0      61  [
 34302    45   320    30    45   795     0      62  ]
 34303    45   320    32    45   795     0     111  src
 34304    45   320    35    45   795     0      66  ,
 34305    45   320    37    45   795     0      36  int
 34306    45   320    41    45   795     0     111  offset
 34307    45   320    47    45   795     0      66  ,
 34308    45   320    49    45   795     0      36  int
 34309    45   320    53    45   795     0     111  length
 34310    45   320    59    45   795     0      60  )
 34311    45   320    61    45   795     0      63  {
 34312    45   343     9    45   795     0      20  throw
 34313    45   343    15    45   795     0      15  new
 34314    45   343    19    45   795     0     111  ReadOnlyBufferException
 34315    45   343    42    45   795     0      59  (
 34316    45   343    43    45   795     0      60  )
 34317    45   343    44    45   795     0     102  ;
 34318    45   345     5    45   795     0      64  }
 34319    45   345     5    45   795     0    1894  ENDMETHOD
 34320    45   345     5    45   796     0    1895  STARTMETHOD
 34321    45   347     5    45   796     0      10  public
 34322    45   347    12    45   796     0     111  IntBuffer
 34323    45   347    22    45   796     0     111  compact
 34324    45   347    29    45   796     0      59  (
 34325    45   347    30    45   796     0      60  )
 34326    45   347    32    45   796     0      63  {
 34327    45   360     9    45   796     0      20  throw
 34328    45   360    15    45   796     0      15  new
 34329    45   360    19    45   796     0     111  ReadOnlyBufferException
 34330    45   360    42    45   796     0      59  (
 34331    45   360    43    45   796     0      60  )
 34332    45   360    44    45   796     1     102  ;
 34333    45   362     5    45   796     1      64  }
 34334    45   362     5    45   796     0    1896  ENDMETHOD
 34335    45   362     5    45   797     0    1897  STARTMETHOD
 34336    45   364     5    45   797     0      10  public
 34337    45   364    12    45   797     0      39  boolean
 34338    45   364    20    45   797     0     111  isDirect
 34339    45   364    28    45   797     0      59  (
 34340    45   364    29    45   797     0      60  )
 34341    45   364    31    45   797     0      63  {
 34342    45   365     9    45   797     0      19  return
 34343    45   365    16    45   797     0      52  true
 34344    45   365    20    45   797     1     102  ;
 34345    45   366     5    45   797     1      64  }
 34346    45   366     5    45   797     0    1898  ENDMETHOD
 34347    45   366     5    45   798     0    1899  STARTMETHOD
 34348    45   368     5    45   798     0      10  public
 34349    45   368    12    45   798     0      39  boolean
 34350    45   368    20    45   798     0     111  isReadOnly
 34351    45   368    30    45   798     0      59  (
 34352    45   368    31    45   798     0      60  )
 34353    45   368    33    45   798     0      63  {
 34354    45   369     9    45   798     0      19  return
 34355    45   369    16    45   798     0      52  true
 34356    45   369    20    45   798     1     102  ;
 34357    45   370     5    45   798     1      64  }
 34358    45   370     5    45   798     0    1900  ENDMETHOD
 34359    45   370     5    45   799     0    1901  STARTMETHOD
 34360    45   416     5    45   799     0      10  public
 34361    45   416    12    45   799     0     111  ByteOrder
 34362    45   416    22    45   799     0     111  order
 34363    45   416    27    45   799     0      59  (
 34364    45   416    28    45   799     0      60  )
 34365    45   416    30    45   799     0      63  {
 34366    45   418     9    45   799     0      19  return
 34367    45   418    16    45   799     0      59  (
 34368    45   418    17    45   799     0      59  (
 34369    45   418    18    45   799     0     111  ByteOrder.nativeOrder
 34370    45   418    39    45   799     0      59  (
 34371    45   418    40    45   799     0      60  )
 34372    45   418    42    45   799     0      68  ==
 34373    45   418    45    45   799     0     111  ByteOrder.BIG_ENDIAN
 34374    45   418    65    45   799     0      60  )
 34375    45   419    17    45   799     0      58  ?
 34376    45   419    19    45   799     0     111  ByteOrder.LITTLE_ENDIAN
 34377    45   419    43    45   799     0      65  :
 34378    45   419    45    45   799     0     111  ByteOrder.BIG_ENDIAN
 34379    45   419    65    45   799     0      60  )
 34380    45   419    66    45   799     0     102  ;
 34381    45   425     5    45   799     0      64  }
 34382    45   425     5    45   799     0    1902  ENDMETHOD
 34383    45   452     1    45    -1     0      64  }
 34384    45   452     1    45    -1     1    1903  ENDCLASS
 34385    45   452     1    -1    -1     1    1904  ENDFILE C:\javasrc\java\nio\DirectIntBufferRS.java
 34386    46     1     1    -1    -1     1    1905  STARTFILE C:\javasrc\java\nio\DirectIntBufferRU.java
 34387    46    28     1    -1    -1     0       5  package
 34388    46    28     9    -1    -1     0     111  java.nio
 34389    46    28    17    -1    -1     0     102  ;
 34390    46    30     1    -1    -1     1      49  import
 34391    46    30     8    -1    -1     1     111  sun.misc.Cleaner
 34392    46    30    24    -1    -1     1     102  ;
 34393    46    31     1    -1    -1     1      49  import
 34394    46    31     8    -1    -1     1     111  sun.misc.Unsafe
 34395    46    31    23    -1    -1     1     102  ;
 34396    46    32     1    -1    -1     1      49  import
 34397    46    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 34398    46    32    31    -1    -1     1     102  ;
 34399    46    33     1    -1    -1     1      49  import
 34400    46    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 34401    46    33    34    -1    -1     1     102  ;
 34402    46    36     1    46    -1     0    1906  STARTCLASS
 34403    46    36     1    46    -1     0      24  class
 34404    46    36     7    46    -1     0     111  DirectIntBufferRU
 34405    46    40     5    46    -1     0      38  extends
 34406    46    40    13    46    -1     0     111  DirectIntBufferU
 34407    46    42     5    46    -1     0      17  implements
 34408    46    42    16    46    -1     0     111  DirectBuffer
 34409    46    43     1    46    -1     0      63  {
 34410    46    43     1    46   800     0    1907  STARTMETHOD
 34411    46   164     5    46   800     0     111  DirectIntBufferRU
 34412    46   164    22    46   800     0      59  (
 34413    46   164    23    46   800     0     111  DirectBuffer
 34414    46   164    36    46   800     0     111  db
 34415    46   164    38    46   800     0      66  ,
 34416    46   165    32    46   800     0      36  int
 34417    46   165    36    46   800     0     111  mark
 34418    46   165    40    46   800     0      66  ,
 34419    46   165    42    46   800     0      36  int
 34420    46   165    46    46   800     0     111  pos
 34421    46   165    49    46   800     0      66  ,
 34422    46   165    51    46   800     0      36  int
 34423    46   165    55    46   800     0     111  lim
 34424    46   165    58    46   800     0      66  ,
 34425    46   165    60    46   800     0      36  int
 34426    46   165    64    46   800     0     111  cap
 34427    46   165    67    46   800     0      66  ,
 34428    46   166    32    46   800     0      36  int
 34429    46   166    36    46   800     0     111  off
 34430    46   166    39    46   800     0      60  )
 34431    46   167     5    46   800     0      63  {
 34432    46   176     9    46   800     0      27  super
 34433    46   176    14    46   800     0      59  (
 34434    46   176    15    46   800     0     111  db
 34435    46   176    17    46   800     0      66  ,
 34436    46   176    19    46   800     0     111  mark
 34437    46   176    23    46   800     0      66  ,
 34438    46   176    25    46   800     0     111  pos
 34439    46   176    28    46   800     0      66  ,
 34440    46   176    30    46   800     0     111  lim
 34441    46   176    33    46   800     0      66  ,
 34442    46   176    35    46   800     0     111  cap
 34443    46   176    38    46   800     0      66  ,
 34444    46   176    40    46   800     0     111  off
 34445    46   176    43    46   800     0      60  )
 34446    46   176    44    46   800     0     102  ;
 34447    46   178     5    46   800     0      64  }
 34448    46   178     5    46   800     0    1908  ENDMETHOD
 34449    46   178     5    46   801     0    1909  STARTMETHOD
 34450    46   180     5    46   801     0      10  public
 34451    46   180    12    46   801     0     111  IntBuffer
 34452    46   180    22    46   801     0     111  slice
 34453    46   180    27    46   801     0      59  (
 34454    46   180    28    46   801     0      60  )
 34455    46   180    30    46   801     0      63  {
 34456    46   181     9    46   801     1      36  int
 34457    46   181    13    46   801     1     111  pos
 34458    46   181    17    46   801     1      67  =
 34459    46   181    19    46   801     1     111  this.position
 34460    46   181    32    46   801     1      59  (
 34461    46   181    33    46   801     1      60  )
 34462    46   181    34    46   801     1     102  ;
 34463    46   182     9    46   801     1      36  int
 34464    46   182    13    46   801     1     111  lim
 34465    46   182    17    46   801     1      67  =
 34466    46   182    19    46   801     1     111  this.limit
 34467    46   182    29    46   801     1      59  (
 34468    46   182    30    46   801     1      60  )
 34469    46   182    31    46   801     1     102  ;
 34470    46   183     9    46   801     0     111  assert
 34471    46   183    16    46   801     0      59  (
 34472    46   183    17    46   801     0     111  pos
 34473    46   183    21    46   801     0      92  <=
 34474    46   183    24    46   801     0     111  lim
 34475    46   183    27    46   801     0      60  )
 34476    46   183    28    46   801     0     102  ;
 34477    46   184     9    46   801     0      36  int
 34478    46   184    13    46   801     0     111  rem
 34479    46   184    17    46   801     0      67  =
 34480    46   184    19    46   801     0      59  (
 34481    46   184    20    46   801     0     111  pos
 34482    46   184    24    46   801     0      92  <=
 34483    46   184    27    46   801     0     111  lim
 34484    46   184    31    46   801     0      58  ?
 34485    46   184    33    46   801     0     111  lim
 34486    46   184    37    46   801     0      77  -
 34487    46   184    39    46   801     0     111  pos
 34488    46   184    43    46   801     0      65  :
 34489    46   184    45    46   801     0     112  0
 34490    46   184    46    46   801     0      60  )
 34491    46   184    47    46   801     0     102  ;
 34492    46   185     9    46   801     0      36  int
 34493    46   185    13    46   801     0     111  off
 34494    46   185    17    46   801     0      67  =
 34495    46   185    19    46   801     0      59  (
 34496    46   185    20    46   801     0     111  pos
 34497    46   185    24    46   801     0      90  <<
 34498    46   185    27    46   801     0     112  2
 34499    46   185    28    46   801     0      60  )
 34500    46   185    29    46   801     0     102  ;
 34501    46   186     9    46   801     0     111  assert
 34502    46   186    16    46   801     0      59  (
 34503    46   186    17    46   801     0     111  off
 34504    46   186    21    46   801     0      88  >=
 34505    46   186    24    46   801     0     112  0
 34506    46   186    25    46   801     0      60  )
 34507    46   186    26    46   801     0     102  ;
 34508    46   187     9    46   801     0      19  return
 34509    46   187    16    46   801     0      15  new
 34510    46   187    20    46   801     0     111  DirectIntBufferRU
 34511    46   187    37    46   801     0      59  (
 34512    46   187    38    46   801     0      44  this
 34513    46   187    42    46   801     0      66  ,
 34514    46   187    44    46   801     0      77  -
 34515    46   187    45    46   801     0     112  1
 34516    46   187    46    46   801     0      66  ,
 34517    46   187    48    46   801     0     112  0
 34518    46   187    49    46   801     0      66  ,
 34519    46   187    51    46   801     0     111  rem
 34520    46   187    54    46   801     0      66  ,
 34521    46   187    56    46   801     0     111  rem
 34522    46   187    59    46   801     0      66  ,
 34523    46   187    61    46   801     0     111  off
 34524    46   187    64    46   801     0      60  )
 34525    46   187    65    46   801     0     102  ;
 34526    46   188     5    46   801     0      64  }
 34527    46   188     5    46   801     0    1910  ENDMETHOD
 34528    46   188     5    46   802     0    1911  STARTMETHOD
 34529    46   190     5    46   802     0      10  public
 34530    46   190    12    46   802     0     111  IntBuffer
 34531    46   190    22    46   802     0     111  duplicate
 34532    46   190    31    46   802     0      59  (
 34533    46   190    32    46   802     0      60  )
 34534    46   190    34    46   802     0      63  {
 34535    46   191     9    46   802     0      19  return
 34536    46   191    16    46   802     0      15  new
 34537    46   191    20    46   802     0     111  DirectIntBufferRU
 34538    46   191    37    46   802     0      59  (
 34539    46   191    38    46   802     0      44  this
 34540    46   191    42    46   802     0      66  ,
 34541    46   192    47    46   802     1     111  this.markValue
 34542    46   192    61    46   802     1      59  (
 34543    46   192    62    46   802     1      60  )
 34544    46   192    63    46   802     1      66  ,
 34545    46   193    47    46   802     1     111  this.position
 34546    46   193    60    46   802     1      59  (
 34547    46   193    61    46   802     1      60  )
 34548    46   193    62    46   802     1      66  ,
 34549    46   194    47    46   802     1     111  this.limit
 34550    46   194    57    46   802     1      59  (
 34551    46   194    58    46   802     1      60  )
 34552    46   194    59    46   802     1      66  ,
 34553    46   195    47    46   802     1     111  this.capacity
 34554    46   195    60    46   802     1      59  (
 34555    46   195    61    46   802     1      60  )
 34556    46   195    62    46   802     1      66  ,
 34557    46   196    47    46   802     0     112  0
 34558    46   196    48    46   802     0      60  )
 34559    46   196    49    46   802     0     102  ;
 34560    46   197     5    46   802     0      64  }
 34561    46   197     5    46   802     0    1912  ENDMETHOD
 34562    46   197     5    46   803     0    1913  STARTMETHOD
 34563    46   199     5    46   803     0      10  public
 34564    46   199    12    46   803     0     111  IntBuffer
 34565    46   199    22    46   803     0     111  asReadOnlyBuffer
 34566    46   199    38    46   803     0      59  (
 34567    46   199    39    46   803     0      60  )
 34568    46   199    41    46   803     0      63  {
 34569    46   208     9    46   803     0      19  return
 34570    46   208    16    46   803     0     111  duplicate
 34571    46   208    25    46   803     0      59  (
 34572    46   208    26    46   803     0      60  )
 34573    46   208    27    46   803     0     102  ;
 34574    46   210     5    46   803     0      64  }
 34575    46   210     5    46   803     0    1914  ENDMETHOD
 34576    46   210     5    46   804     0    1915  STARTMETHOD
 34577    46   261     5    46   804     0      10  public
 34578    46   261    12    46   804     0     111  IntBuffer
 34579    46   261    22    46   804     0     111  put
 34580    46   261    25    46   804     0      59  (
 34581    46   261    26    46   804     0      36  int
 34582    46   261    30    46   804     0     111  x
 34583    46   261    31    46   804     0      60  )
 34584    46   261    33    46   804     0      63  {
 34585    46   266     9    46   804     0      20  throw
 34586    46   266    15    46   804     0      15  new
 34587    46   266    19    46   804     0     111  ReadOnlyBufferException
 34588    46   266    42    46   804     0      59  (
 34589    46   266    43    46   804     0      60  )
 34590    46   266    44    46   804     0     102  ;
 34591    46   268     5    46   804     0      64  }
 34592    46   268     5    46   804     0    1916  ENDMETHOD
 34593    46   268     5    46   805     0    1917  STARTMETHOD
 34594    46   270     5    46   805     0      10  public
 34595    46   270    12    46   805     0     111  IntBuffer
 34596    46   270    22    46   805     0     111  put
 34597    46   270    25    46   805     0      59  (
 34598    46   270    26    46   805     0      36  int
 34599    46   270    30    46   805     0     111  i
 34600    46   270    31    46   805     0      66  ,
 34601    46   270    33    46   805     0      36  int
 34602    46   270    37    46   805     0     111  x
 34603    46   270    38    46   805     0      60  )
 34604    46   270    40    46   805     0      63  {
 34605    46   275     9    46   805     0      20  throw
 34606    46   275    15    46   805     0      15  new
 34607    46   275    19    46   805     0     111  ReadOnlyBufferException
 34608    46   275    42    46   805     0      59  (
 34609    46   275    43    46   805     0      60  )
 34610    46   275    44    46   805     0     102  ;
 34611    46   277     5    46   805     0      64  }
 34612    46   277     5    46   805     0    1918  ENDMETHOD
 34613    46   277     5    46   806     0    1919  STARTMETHOD
 34614    46   279     5    46   806     0      10  public
 34615    46   279    12    46   806     0     111  IntBuffer
 34616    46   279    22    46   806     0     111  put
 34617    46   279    25    46   806     0      59  (
 34618    46   279    26    46   806     0     111  IntBuffer
 34619    46   279    36    46   806     0     111  src
 34620    46   279    39    46   806     0      60  )
 34621    46   279    41    46   806     0      63  {
 34622    46   316     9    46   806     0      20  throw
 34623    46   316    15    46   806     0      15  new
 34624    46   316    19    46   806     0     111  ReadOnlyBufferException
 34625    46   316    42    46   806     0      59  (
 34626    46   316    43    46   806     0      60  )
 34627    46   316    44    46   806     0     102  ;
 34628    46   318     5    46   806     0      64  }
 34629    46   318     5    46   806     0    1920  ENDMETHOD
 34630    46   318     5    46   807     0    1921  STARTMETHOD
 34631    46   320     5    46   807     0      10  public
 34632    46   320    12    46   807     0     111  IntBuffer
 34633    46   320    22    46   807     0     111  put
 34634    46   320    25    46   807     0      59  (
 34635    46   320    26    46   807     0      36  int
 34636    46   320    29    46   807     0      61  [
 34637    46   320    30    46   807     0      62  ]
 34638    46   320    32    46   807     0     111  src
 34639    46   320    35    46   807     0      66  ,
 34640    46   320    37    46   807     0      36  int
 34641    46   320    41    46   807     0     111  offset
 34642    46   320    47    46   807     0      66  ,
 34643    46   320    49    46   807     0      36  int
 34644    46   320    53    46   807     0     111  length
 34645    46   320    59    46   807     0      60  )
 34646    46   320    61    46   807     0      63  {
 34647    46   343     9    46   807     0      20  throw
 34648    46   343    15    46   807     0      15  new
 34649    46   343    19    46   807     0     111  ReadOnlyBufferException
 34650    46   343    42    46   807     0      59  (
 34651    46   343    43    46   807     0      60  )
 34652    46   343    44    46   807     0     102  ;
 34653    46   345     5    46   807     0      64  }
 34654    46   345     5    46   807     0    1922  ENDMETHOD
 34655    46   345     5    46   808     0    1923  STARTMETHOD
 34656    46   347     5    46   808     0      10  public
 34657    46   347    12    46   808     0     111  IntBuffer
 34658    46   347    22    46   808     0     111  compact
 34659    46   347    29    46   808     0      59  (
 34660    46   347    30    46   808     0      60  )
 34661    46   347    32    46   808     0      63  {
 34662    46   360     9    46   808     0      20  throw
 34663    46   360    15    46   808     0      15  new
 34664    46   360    19    46   808     0     111  ReadOnlyBufferException
 34665    46   360    42    46   808     0      59  (
 34666    46   360    43    46   808     0      60  )
 34667    46   360    44    46   808     1     102  ;
 34668    46   362     5    46   808     1      64  }
 34669    46   362     5    46   808     0    1924  ENDMETHOD
 34670    46   362     5    46   809     0    1925  STARTMETHOD
 34671    46   364     5    46   809     0      10  public
 34672    46   364    12    46   809     0      39  boolean
 34673    46   364    20    46   809     0     111  isDirect
 34674    46   364    28    46   809     0      59  (
 34675    46   364    29    46   809     0      60  )
 34676    46   364    31    46   809     0      63  {
 34677    46   365     9    46   809     0      19  return
 34678    46   365    16    46   809     0      52  true
 34679    46   365    20    46   809     1     102  ;
 34680    46   366     5    46   809     1      64  }
 34681    46   366     5    46   809     0    1926  ENDMETHOD
 34682    46   366     5    46   810     0    1927  STARTMETHOD
 34683    46   368     5    46   810     0      10  public
 34684    46   368    12    46   810     0      39  boolean
 34685    46   368    20    46   810     0     111  isReadOnly
 34686    46   368    30    46   810     0      59  (
 34687    46   368    31    46   810     0      60  )
 34688    46   368    33    46   810     0      63  {
 34689    46   369     9    46   810     0      19  return
 34690    46   369    16    46   810     0      52  true
 34691    46   369    20    46   810     1     102  ;
 34692    46   370     5    46   810     1      64  }
 34693    46   370     5    46   810     0    1928  ENDMETHOD
 34694    46   370     5    46   811     0    1929  STARTMETHOD
 34695    46   416     5    46   811     0      10  public
 34696    46   416    12    46   811     0     111  ByteOrder
 34697    46   416    22    46   811     0     111  order
 34698    46   416    27    46   811     0      59  (
 34699    46   416    28    46   811     0      60  )
 34700    46   416    30    46   811     0      63  {
 34701    46   422     9    46   811     0      19  return
 34702    46   422    16    46   811     0      59  (
 34703    46   422    17    46   811     0      59  (
 34704    46   422    18    46   811     0     111  ByteOrder.nativeOrder
 34705    46   422    39    46   811     0      59  (
 34706    46   422    40    46   811     0      60  )
 34707    46   422    42    46   811     0      71  !=
 34708    46   422    45    46   811     0     111  ByteOrder.BIG_ENDIAN
 34709    46   422    65    46   811     0      60  )
 34710    46   423    17    46   811     0      58  ?
 34711    46   423    19    46   811     0     111  ByteOrder.LITTLE_ENDIAN
 34712    46   423    43    46   811     0      65  :
 34713    46   423    45    46   811     0     111  ByteOrder.BIG_ENDIAN
 34714    46   423    65    46   811     0      60  )
 34715    46   423    66    46   811     0     102  ;
 34716    46   425     5    46   811     0      64  }
 34717    46   425     5    46   811     0    1930  ENDMETHOD
 34718    46   452     1    46    -1     0      64  }
 34719    46   452     1    46    -1     1    1931  ENDCLASS
 34720    46   452     1    -1    -1     1    1932  ENDFILE C:\javasrc\java\nio\DirectIntBufferRU.java
 34721    47     1     1    -1    -1     1    1933  STARTFILE C:\javasrc\java\nio\DirectIntBufferS.java
 34722    47    28     1    -1    -1     0       5  package
 34723    47    28     9    -1    -1     0     111  java.nio
 34724    47    28    17    -1    -1     0     102  ;
 34725    47    30     1    -1    -1     1      49  import
 34726    47    30     8    -1    -1     1     111  sun.misc.Cleaner
 34727    47    30    24    -1    -1     1     102  ;
 34728    47    31     1    -1    -1     1      49  import
 34729    47    31     8    -1    -1     1     111  sun.misc.Unsafe
 34730    47    31    23    -1    -1     1     102  ;
 34731    47    32     1    -1    -1     1      49  import
 34732    47    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 34733    47    32    31    -1    -1     1     102  ;
 34734    47    33     1    -1    -1     1      49  import
 34735    47    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 34736    47    33    34    -1    -1     1     102  ;
 34737    47    36     1    47    -1     0    1934  STARTCLASS
 34738    47    36     1    47    -1     0      24  class
 34739    47    36     7    47    -1     0     111  DirectIntBufferS
 34740    47    38     5    47    -1     0      38  extends
 34741    47    38    13    47    -1     0     111  IntBuffer
 34742    47    42     5    47    -1     0      17  implements
 34743    47    42    16    47    -1     0     111  DirectBuffer
 34744    47    43     1    47    -1     0      63  {
 34745    47    48     5    47    -1     0      23  protected
 34746    47    48    15    47    -1     0      45  static
 34747    47    48    22    47    -1     0       6  final
 34748    47    48    28    47    -1     0     111  Unsafe
 34749    47    48    35    47    -1     0     111  unsafe
 34750    47    48    42    47    -1     0      67  =
 34751    47    48    44    47    -1     0     111  Bits.unsafe
 34752    47    48    55    47    -1     0      59  (
 34753    47    48    56    47    -1     0      60  )
 34754    47    48    57    47    -1     0     102  ;
 34755    47    51     5    47    -1     0      23  protected
 34756    47    51    15    47    -1     0      45  static
 34757    47    51    22    47    -1     0       6  final
 34758    47    51    28    47    -1     0      39  boolean
 34759    47    51    36    47    -1     0     111  unaligned
 34760    47    51    46    47    -1     0      67  =
 34761    47    51    48    47    -1     0     111  Bits.unaligned
 34762    47    51    62    47    -1     0      59  (
 34763    47    51    63    47    -1     0      60  )
 34764    47    51    64    47    -1     0     102  ;
 34765    47    59     5    47    -1     0      23  protected
 34766    47    59    15    47    -1     0     111  Object
 34767    47    59    22    47    -1     0     111  viewedBuffer
 34768    47    59    35    47    -1     0      67  =
 34769    47    59    37    47    -1     0      21  null
 34770    47    59    41    47    -1     0     102  ;
 34771    47    59    41    47   812     0    1935  STARTMETHOD
 34772    47    61     5    47   812     0      10  public
 34773    47    61    12    47   812     0     111  Object
 34774    47    61    19    47   812     0     111  viewedBuffer
 34775    47    61    31    47   812     0      59  (
 34776    47    61    32    47   812     0      60  )
 34777    47    61    34    47   812     0      63  {
 34778    47    62     9    47   812     0      19  return
 34779    47    62    16    47   812     0     111  viewedBuffer
 34780    47    62    28    47   812     0     102  ;
 34781    47    63     5    47   812     0      64  }
 34782    47    63     5    47   812     0    1936  ENDMETHOD
 34783    47    63     5    47   813     0    1937  STARTMETHOD
 34784    47   100     5    47   813     0      10  public
 34785    47   100    12    47   813     0     111  Cleaner
 34786    47   100    20    47   813     0     111  cleaner
 34787    47   100    27    47   813     0      59  (
 34788    47   100    28    47   813     0      60  )
 34789    47   100    30    47   813     0      63  {
 34790    47   100    32    47   813     0      19  return
 34791    47   100    39    47   813     0      21  null
 34792    47   100    43    47   813     0     102  ;
 34793    47   100    45    47   813     0      64  }
 34794    47   100    45    47   813     0    1938  ENDMETHOD
 34795    47   100    45    47   814     0    1939  STARTMETHOD
 34796    47   164     5    47   814     0     111  DirectIntBufferS
 34797    47   164    21    47   814     0      59  (
 34798    47   164    22    47   814     0     111  DirectBuffer
 34799    47   164    35    47   814     0     111  db
 34800    47   164    37    47   814     0      66  ,
 34801    47   165    32    47   814     0      36  int
 34802    47   165    36    47   814     0     111  mark
 34803    47   165    40    47   814     0      66  ,
 34804    47   165    42    47   814     0      36  int
 34805    47   165    46    47   814     0     111  pos
 34806    47   165    49    47   814     0      66  ,
 34807    47   165    51    47   814     0      36  int
 34808    47   165    55    47   814     0     111  lim
 34809    47   165    58    47   814     0      66  ,
 34810    47   165    60    47   814     0      36  int
 34811    47   165    64    47   814     0     111  cap
 34812    47   165    67    47   814     0      66  ,
 34813    47   166    32    47   814     0      36  int
 34814    47   166    36    47   814     0     111  off
 34815    47   166    39    47   814     0      60  )
 34816    47   167     5    47   814     0      63  {
 34817    47   169     9    47   814     0      27  super
 34818    47   169    14    47   814     0      59  (
 34819    47   169    15    47   814     0     111  mark
 34820    47   169    19    47   814     0      66  ,
 34821    47   169    21    47   814     0     111  pos
 34822    47   169    24    47   814     0      66  ,
 34823    47   169    26    47   814     0     111  lim
 34824    47   169    29    47   814     0      66  ,
 34825    47   169    31    47   814     0     111  cap
 34826    47   169    34    47   814     0      60  )
 34827    47   169    35    47   814     0     102  ;
 34828    47   170     9    47   814     0     111  address
 34829    47   170    17    47   814     0      67  =
 34830    47   170    19    47   814     0     111  db.address
 34831    47   170    29    47   814     0      59  (
 34832    47   170    30    47   814     0      60  )
 34833    47   170    32    47   814     0      74  +
 34834    47   170    34    47   814     0     111  off
 34835    47   170    37    47   814     0     102  ;
 34836    47   171     9    47   814     0     111  viewedBuffer
 34837    47   171    22    47   814     0      67  =
 34838    47   171    24    47   814     0     111  db
 34839    47   171    26    47   814     0     102  ;
 34840    47   178     5    47   814     0      64  }
 34841    47   178     5    47   814     0    1940  ENDMETHOD
 34842    47   178     5    47   815     0    1941  STARTMETHOD
 34843    47   180     5    47   815     0      10  public
 34844    47   180    12    47   815     0     111  IntBuffer
 34845    47   180    22    47   815     0     111  slice
 34846    47   180    27    47   815     0      59  (
 34847    47   180    28    47   815     0      60  )
 34848    47   180    30    47   815     0      63  {
 34849    47   181     9    47   815     1      36  int
 34850    47   181    13    47   815     1     111  pos
 34851    47   181    17    47   815     1      67  =
 34852    47   181    19    47   815     1     111  this.position
 34853    47   181    32    47   815     1      59  (
 34854    47   181    33    47   815     1      60  )
 34855    47   181    34    47   815     1     102  ;
 34856    47   182     9    47   815     1      36  int
 34857    47   182    13    47   815     1     111  lim
 34858    47   182    17    47   815     1      67  =
 34859    47   182    19    47   815     1     111  this.limit
 34860    47   182    29    47   815     1      59  (
 34861    47   182    30    47   815     1      60  )
 34862    47   182    31    47   815     1     102  ;
 34863    47   183     9    47   815     0     111  assert
 34864    47   183    16    47   815     0      59  (
 34865    47   183    17    47   815     0     111  pos
 34866    47   183    21    47   815     0      92  <=
 34867    47   183    24    47   815     0     111  lim
 34868    47   183    27    47   815     0      60  )
 34869    47   183    28    47   815     0     102  ;
 34870    47   184     9    47   815     0      36  int
 34871    47   184    13    47   815     0     111  rem
 34872    47   184    17    47   815     0      67  =
 34873    47   184    19    47   815     0      59  (
 34874    47   184    20    47   815     0     111  pos
 34875    47   184    24    47   815     0      92  <=
 34876    47   184    27    47   815     0     111  lim
 34877    47   184    31    47   815     0      58  ?
 34878    47   184    33    47   815     0     111  lim
 34879    47   184    37    47   815     0      77  -
 34880    47   184    39    47   815     0     111  pos
 34881    47   184    43    47   815     0      65  :
 34882    47   184    45    47   815     0     112  0
 34883    47   184    46    47   815     0      60  )
 34884    47   184    47    47   815     0     102  ;
 34885    47   185     9    47   815     0      36  int
 34886    47   185    13    47   815     0     111  off
 34887    47   185    17    47   815     0      67  =
 34888    47   185    19    47   815     0      59  (
 34889    47   185    20    47   815     0     111  pos
 34890    47   185    24    47   815     0      90  <<
 34891    47   185    27    47   815     0     112  2
 34892    47   185    28    47   815     0      60  )
 34893    47   185    29    47   815     0     102  ;
 34894    47   186     9    47   815     0     111  assert
 34895    47   186    16    47   815     0      59  (
 34896    47   186    17    47   815     0     111  off
 34897    47   186    21    47   815     0      88  >=
 34898    47   186    24    47   815     0     112  0
 34899    47   186    25    47   815     0      60  )
 34900    47   186    26    47   815     0     102  ;
 34901    47   187     9    47   815     0      19  return
 34902    47   187    16    47   815     0      15  new
 34903    47   187    20    47   815     0     111  DirectIntBufferS
 34904    47   187    36    47   815     0      59  (
 34905    47   187    37    47   815     0      44  this
 34906    47   187    41    47   815     0      66  ,
 34907    47   187    43    47   815     0      77  -
 34908    47   187    44    47   815     0     112  1
 34909    47   187    45    47   815     0      66  ,
 34910    47   187    47    47   815     0     112  0
 34911    47   187    48    47   815     0      66  ,
 34912    47   187    50    47   815     0     111  rem
 34913    47   187    53    47   815     0      66  ,
 34914    47   187    55    47   815     0     111  rem
 34915    47   187    58    47   815     0      66  ,
 34916    47   187    60    47   815     0     111  off
 34917    47   187    63    47   815     1      60  )
 34918    47   187    64    47   815     1     102  ;
 34919    47   188     5    47   815     1      64  }
 34920    47   188     5    47   815     0    1942  ENDMETHOD
 34921    47   188     5    47   816     0    1943  STARTMETHOD
 34922    47   190     5    47   816     0      10  public
 34923    47   190    12    47   816     0     111  IntBuffer
 34924    47   190    22    47   816     0     111  duplicate
 34925    47   190    31    47   816     0      59  (
 34926    47   190    32    47   816     0      60  )
 34927    47   190    34    47   816     0      63  {
 34928    47   191     9    47   816     0      19  return
 34929    47   191    16    47   816     0      15  new
 34930    47   191    20    47   816     0     111  DirectIntBufferS
 34931    47   191    36    47   816     0      59  (
 34932    47   191    37    47   816     0      44  this
 34933    47   191    41    47   816     0      66  ,
 34934    47   192    47    47   816     1     111  this.markValue
 34935    47   192    61    47   816     1      59  (
 34936    47   192    62    47   816     1      60  )
 34937    47   192    63    47   816     1      66  ,
 34938    47   193    47    47   816     1     111  this.position
 34939    47   193    60    47   816     1      59  (
 34940    47   193    61    47   816     1      60  )
 34941    47   193    62    47   816     1      66  ,
 34942    47   194    47    47   816     1     111  this.limit
 34943    47   194    57    47   816     1      59  (
 34944    47   194    58    47   816     1      60  )
 34945    47   194    59    47   816     1      66  ,
 34946    47   195    47    47   816     1     111  this.capacity
 34947    47   195    60    47   816     1      59  (
 34948    47   195    61    47   816     1      60  )
 34949    47   195    62    47   816     1      66  ,
 34950    47   196    47    47   816     0     112  0
 34951    47   196    48    47   816     1      60  )
 34952    47   196    49    47   816     1     102  ;
 34953    47   197     5    47   816     1      64  }
 34954    47   197     5    47   816     0    1944  ENDMETHOD
 34955    47   197     5    47   817     0    1945  STARTMETHOD
 34956    47   199     5    47   817     0      10  public
 34957    47   199    12    47   817     0     111  IntBuffer
 34958    47   199    22    47   817     0     111  asReadOnlyBuffer
 34959    47   199    38    47   817     0      59  (
 34960    47   199    39    47   817     0      60  )
 34961    47   199    41    47   817     0      63  {
 34962    47   201     9    47   817     0      19  return
 34963    47   201    16    47   817     0      15  new
 34964    47   201    20    47   817     0     111  DirectIntBufferRS
 34965    47   201    37    47   817     0      59  (
 34966    47   201    38    47   817     0      44  this
 34967    47   201    42    47   817     0      66  ,
 34968    47   202    44    47   817     1     111  this.markValue
 34969    47   202    58    47   817     1      59  (
 34970    47   202    59    47   817     1      60  )
 34971    47   202    60    47   817     1      66  ,
 34972    47   203    44    47   817     1     111  this.position
 34973    47   203    57    47   817     1      59  (
 34974    47   203    58    47   817     1      60  )
 34975    47   203    59    47   817     1      66  ,
 34976    47   204    44    47   817     1     111  this.limit
 34977    47   204    54    47   817     1      59  (
 34978    47   204    55    47   817     1      60  )
 34979    47   204    56    47   817     1      66  ,
 34980    47   205    44    47   817     1     111  this.capacity
 34981    47   205    57    47   817     1      59  (
 34982    47   205    58    47   817     1      60  )
 34983    47   205    59    47   817     1      66  ,
 34984    47   206    44    47   817     0     112  0
 34985    47   206    45    47   817     1      60  )
 34986    47   206    46    47   817     1     102  ;
 34987    47   210     5    47   817     1      64  }
 34988    47   210     5    47   817     0    1946  ENDMETHOD
 34989    47   210     5    47   818     0    1947  STARTMETHOD
 34990    47   214     5    47   818     0      10  public
 34991    47   214    12    47   818     0      53  long
 34992    47   214    17    47   818     0     111  address
 34993    47   214    24    47   818     0      59  (
 34994    47   214    25    47   818     0      60  )
 34995    47   214    27    47   818     0      63  {
 34996    47   215     9    47   818     0      19  return
 34997    47   215    16    47   818     0     111  address
 34998    47   215    23    47   818     0     102  ;
 34999    47   216     5    47   818     0      64  }
 35000    47   216     5    47   818     0    1948  ENDMETHOD
 35001    47   216     5    47   819     0    1949  STARTMETHOD
 35002    47   218     5    47   819     0      41  private
 35003    47   218    13    47   819     0      53  long
 35004    47   218    18    47   819     0     111  ix
 35005    47   218    20    47   819     0      59  (
 35006    47   218    21    47   819     0      36  int
 35007    47   218    25    47   819     0     111  i
 35008    47   218    26    47   819     0      60  )
 35009    47   218    28    47   819     0      63  {
 35010    47   219     9    47   819     0      19  return
 35011    47   219    16    47   819     0     111  address
 35012    47   219    24    47   819     0      74  +
 35013    47   219    26    47   819     0      59  (
 35014    47   219    27    47   819     0     111  i
 35015    47   219    29    47   819     0      90  <<
 35016    47   219    32    47   819     0     112  2
 35017    47   219    33    47   819     0      60  )
 35018    47   219    34    47   819     0     102  ;
 35019    47   220     5    47   819     0      64  }
 35020    47   220     5    47   819     0    1950  ENDMETHOD
 35021    47   220     5    47   820     0    1951  STARTMETHOD
 35022    47   222     5    47   820     0      10  public
 35023    47   222    12    47   820     0      36  int
 35024    47   222    16    47   820     0     111  get
 35025    47   222    19    47   820     0      59  (
 35026    47   222    20    47   820     0      60  )
 35027    47   222    22    47   820     0      63  {
 35028    47   223     9    47   820     0      19  return
 35029    47   223    16    47   820     0      59  (
 35030    47   223    17    47   820     0     111  Bits.swap
 35031    47   223    26    47   820     0      59  (
 35032    47   223    27    47   820     0     111  unsafe.getInt
 35033    47   223    40    47   820     0      59  (
 35034    47   223    41    47   820     0     111  ix
 35035    47   223    43    47   820     0      59  (
 35036    47   223    44    47   820     0     111  nextGetIndex
 35037    47   223    56    47   820     0      59  (
 35038    47   223    57    47   820     0      60  )
 35039    47   223    58    47   820     0      60  )
 35040    47   223    59    47   820     0      60  )
 35041    47   223    60    47   820     0      60  )
 35042    47   223    61    47   820     0      60  )
 35043    47   223    62    47   820     0     102  ;
 35044    47   224     5    47   820     0      64  }
 35045    47   224     5    47   820     0    1952  ENDMETHOD
 35046    47   224     5    47   821     0    1953  STARTMETHOD
 35047    47   226     5    47   821     0      10  public
 35048    47   226    12    47   821     0      36  int
 35049    47   226    16    47   821     0     111  get
 35050    47   226    19    47   821     0      59  (
 35051    47   226    20    47   821     0      36  int
 35052    47   226    24    47   821     0     111  i
 35053    47   226    25    47   821     0      60  )
 35054    47   226    27    47   821     0      63  {
 35055    47   227     9    47   821     0      19  return
 35056    47   227    16    47   821     0      59  (
 35057    47   227    17    47   821     0     111  Bits.swap
 35058    47   227    26    47   821     0      59  (
 35059    47   227    27    47   821     0     111  unsafe.getInt
 35060    47   227    40    47   821     0      59  (
 35061    47   227    41    47   821     0     111  ix
 35062    47   227    43    47   821     0      59  (
 35063    47   227    44    47   821     0     111  checkIndex
 35064    47   227    54    47   821     0      59  (
 35065    47   227    55    47   821     0     111  i
 35066    47   227    56    47   821     0      60  )
 35067    47   227    57    47   821     0      60  )
 35068    47   227    58    47   821     0      60  )
 35069    47   227    59    47   821     0      60  )
 35070    47   227    60    47   821     0      60  )
 35071    47   227    61    47   821     0     102  ;
 35072    47   228     5    47   821     0      64  }
 35073    47   228     5    47   821     0    1954  ENDMETHOD
 35074    47   228     5    47   822     0    1955  STARTMETHOD
 35075    47   230     5    47   822     0      10  public
 35076    47   230    12    47   822     0     111  IntBuffer
 35077    47   230    22    47   822     0     111  get
 35078    47   230    25    47   822     0      59  (
 35079    47   230    26    47   822     0      36  int
 35080    47   230    29    47   822     0      61  [
 35081    47   230    30    47   822     0      62  ]
 35082    47   230    32    47   822     0     111  dst
 35083    47   230    35    47   822     0      66  ,
 35084    47   230    37    47   822     0      36  int
 35085    47   230    41    47   822     0     111  offset
 35086    47   230    47    47   822     0      66  ,
 35087    47   230    49    47   822     0      36  int
 35088    47   230    53    47   822     0     111  length
 35089    47   230    59    47   822     0      60  )
 35090    47   230    61    47   822     0      63  {
 35091    47   232     9    47   822     0      31  if
 35092    47   232    12    47   822     0      59  (
 35093    47   232    13    47   822     0      59  (
 35094    47   232    14    47   822     0     111  length
 35095    47   232    21    47   822     0      90  <<
 35096    47   232    24    47   822     0     112  2
 35097    47   232    25    47   822     0      60  )
 35098    47   232    27    47   822     0      89  >
 35099    47   232    29    47   822     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 35100    47   232    61    47   822     0      60  )
 35101    47   232    63    47   822     0      63  {
 35102    47   233    13    47   822     0     111  checkBounds
 35103    47   233    24    47   822     0      59  (
 35104    47   233    25    47   822     0     111  offset
 35105    47   233    31    47   822     0      66  ,
 35106    47   233    33    47   822     0     111  length
 35107    47   233    39    47   822     0      66  ,
 35108    47   233    41    47   822     0     111  dst.length
 35109    47   233    51    47   822     0      60  )
 35110    47   233    52    47   822     0     102  ;
 35111    47   234    13    47   822     1      36  int
 35112    47   234    17    47   822     1     111  pos
 35113    47   234    21    47   822     1      67  =
 35114    47   234    23    47   822     1     111  position
 35115    47   234    31    47   822     1      59  (
 35116    47   234    32    47   822     1      60  )
 35117    47   234    33    47   822     1     102  ;
 35118    47   235    13    47   822     1      36  int
 35119    47   235    17    47   822     1     111  lim
 35120    47   235    21    47   822     1      67  =
 35121    47   235    23    47   822     1     111  limit
 35122    47   235    28    47   822     1      59  (
 35123    47   235    29    47   822     1      60  )
 35124    47   235    30    47   822     1     102  ;
 35125    47   236    13    47   822     0     111  assert
 35126    47   236    20    47   822     0      59  (
 35127    47   236    21    47   822     0     111  pos
 35128    47   236    25    47   822     0      92  <=
 35129    47   236    28    47   822     0     111  lim
 35130    47   236    31    47   822     0      60  )
 35131    47   236    32    47   822     0     102  ;
 35132    47   237    13    47   822     0      36  int
 35133    47   237    17    47   822     0     111  rem
 35134    47   237    21    47   822     0      67  =
 35135    47   237    23    47   822     0      59  (
 35136    47   237    24    47   822     0     111  pos
 35137    47   237    28    47   822     0      92  <=
 35138    47   237    31    47   822     0     111  lim
 35139    47   237    35    47   822     0      58  ?
 35140    47   237    37    47   822     0     111  lim
 35141    47   237    41    47   822     0      77  -
 35142    47   237    43    47   822     0     111  pos
 35143    47   237    47    47   822     0      65  :
 35144    47   237    49    47   822     0     112  0
 35145    47   237    50    47   822     0      60  )
 35146    47   237    51    47   822     0     102  ;
 35147    47   238    13    47   822     0      31  if
 35148    47   238    16    47   822     0      59  (
 35149    47   238    17    47   822     0     111  length
 35150    47   238    24    47   822     0      89  >
 35151    47   238    26    47   822     0     111  rem
 35152    47   238    29    47   822     0      60  )
 35153    47   239    17    47   822     0      20  throw
 35154    47   239    23    47   822     0      15  new
 35155    47   239    27    47   822     0     111  BufferUnderflowException
 35156    47   239    51    47   822     0      59  (
 35157    47   239    52    47   822     0      60  )
 35158    47   239    53    47   822     0     102  ;
 35159    47   241    13    47   822     0      31  if
 35160    47   241    16    47   822     0      59  (
 35161    47   241    17    47   822     0     111  order
 35162    47   241    22    47   822     0      59  (
 35163    47   241    23    47   822     0      60  )
 35164    47   241    25    47   822     0      71  !=
 35165    47   241    28    47   822     0     111  ByteOrder.nativeOrder
 35166    47   241    49    47   822     0      59  (
 35167    47   241    50    47   822     0      60  )
 35168    47   241    51    47   822     0      60  )
 35169    47   242    17    47   822     0     111  Bits.copyToIntArray
 35170    47   242    36    47   822     0      59  (
 35171    47   242    37    47   822     0     111  ix
 35172    47   242    39    47   822     0      59  (
 35173    47   242    40    47   822     0     111  pos
 35174    47   242    43    47   822     0      60  )
 35175    47   242    44    47   822     0      66  ,
 35176    47   242    46    47   822     0     111  dst
 35177    47   242    49    47   822     0      66  ,
 35178    47   243    43    47   822     0     111  offset
 35179    47   243    50    47   822     0      90  <<
 35180    47   243    53    47   822     0     112  2
 35181    47   243    54    47   822     0      66  ,
 35182    47   244    43    47   822     0     111  length
 35183    47   244    50    47   822     0      90  <<
 35184    47   244    53    47   822     0     112  2
 35185    47   244    54    47   822     0      60  )
 35186    47   244    55    47   822     0     102  ;
 35187    47   245    13    47   822     0      48  else
 35188    47   246    17    47   822     0     111  Bits.copyToByteArray
 35189    47   246    37    47   822     0      59  (
 35190    47   246    38    47   822     0     111  ix
 35191    47   246    40    47   822     0      59  (
 35192    47   246    41    47   822     0     111  pos
 35193    47   246    44    47   822     0      60  )
 35194    47   246    45    47   822     0      66  ,
 35195    47   246    47    47   822     0     111  dst
 35196    47   246    50    47   822     0      66  ,
 35197    47   247    38    47   822     0     111  offset
 35198    47   247    45    47   822     0      90  <<
 35199    47   247    48    47   822     0     112  2
 35200    47   247    49    47   822     0      66  ,
 35201    47   248    38    47   822     0     111  length
 35202    47   248    45    47   822     0      90  <<
 35203    47   248    48    47   822     0     112  2
 35204    47   248    49    47   822     0      60  )
 35205    47   248    50    47   822     0     102  ;
 35206    47   249    13    47   822     0     111  position
 35207    47   249    21    47   822     0      59  (
 35208    47   249    22    47   822     0     111  pos
 35209    47   249    26    47   822     0      74  +
 35210    47   249    28    47   822     0     111  length
 35211    47   249    34    47   822     0      60  )
 35212    47   249    35    47   822     0     102  ;
 35213    47   250     9    47   822     0      64  }
 35214    47   250    11    47   822     0      48  else
 35215    47   250    16    47   822     0      63  {
 35216    47   251    13    47   822     0     111  super.get
 35217    47   251    22    47   822     0      59  (
 35218    47   251    23    47   822     0     111  dst
 35219    47   251    26    47   822     0      66  ,
 35220    47   251    28    47   822     0     111  offset
 35221    47   251    34    47   822     0      66  ,
 35222    47   251    36    47   822     0     111  length
 35223    47   251    42    47   822     0      60  )
 35224    47   251    43    47   822     0     102  ;
 35225    47   252     9    47   822     0      64  }
 35226    47   253     9    47   822     0      19  return
 35227    47   253    16    47   822     0      44  this
 35228    47   253    20    47   822     0     102  ;
 35229    47   257     5    47   822     0      64  }
 35230    47   257     5    47   822     0    1956  ENDMETHOD
 35231    47   257     5    47   823     0    1957  STARTMETHOD
 35232    47   261     5    47   823     0      10  public
 35233    47   261    12    47   823     0     111  IntBuffer
 35234    47   261    22    47   823     0     111  put
 35235    47   261    25    47   823     0      59  (
 35236    47   261    26    47   823     0      36  int
 35237    47   261    30    47   823     0     111  x
 35238    47   261    31    47   823     0      60  )
 35239    47   261    33    47   823     0      63  {
 35240    47   263     9    47   823     0     111  unsafe.putInt
 35241    47   263    22    47   823     0      59  (
 35242    47   263    23    47   823     0     111  ix
 35243    47   263    25    47   823     0      59  (
 35244    47   263    26    47   823     0     111  nextPutIndex
 35245    47   263    38    47   823     0      59  (
 35246    47   263    39    47   823     0      60  )
 35247    47   263    40    47   823     0      60  )
 35248    47   263    41    47   823     0      66  ,
 35249    47   263    43    47   823     0     111  Bits.swap
 35250    47   263    52    47   823     0      59  (
 35251    47   263    53    47   823     0      59  (
 35252    47   263    54    47   823     0     111  x
 35253    47   263    55    47   823     0      60  )
 35254    47   263    56    47   823     0      60  )
 35255    47   263    57    47   823     0      60  )
 35256    47   263    58    47   823     0     102  ;
 35257    47   264     9    47   823     0      19  return
 35258    47   264    16    47   823     0      44  this
 35259    47   264    20    47   823     0     102  ;
 35260    47   268     5    47   823     0      64  }
 35261    47   268     5    47   823     0    1958  ENDMETHOD
 35262    47   268     5    47   824     0    1959  STARTMETHOD
 35263    47   270     5    47   824     0      10  public
 35264    47   270    12    47   824     0     111  IntBuffer
 35265    47   270    22    47   824     0     111  put
 35266    47   270    25    47   824     0      59  (
 35267    47   270    26    47   824     0      36  int
 35268    47   270    30    47   824     0     111  i
 35269    47   270    31    47   824     0      66  ,
 35270    47   270    33    47   824     0      36  int
 35271    47   270    37    47   824     0     111  x
 35272    47   270    38    47   824     0      60  )
 35273    47   270    40    47   824     0      63  {
 35274    47   272     9    47   824     0     111  unsafe.putInt
 35275    47   272    22    47   824     0      59  (
 35276    47   272    23    47   824     0     111  ix
 35277    47   272    25    47   824     0      59  (
 35278    47   272    26    47   824     0     111  checkIndex
 35279    47   272    36    47   824     0      59  (
 35280    47   272    37    47   824     0     111  i
 35281    47   272    38    47   824     0      60  )
 35282    47   272    39    47   824     0      60  )
 35283    47   272    40    47   824     0      66  ,
 35284    47   272    42    47   824     0     111  Bits.swap
 35285    47   272    51    47   824     0      59  (
 35286    47   272    52    47   824     0      59  (
 35287    47   272    53    47   824     0     111  x
 35288    47   272    54    47   824     0      60  )
 35289    47   272    55    47   824     0      60  )
 35290    47   272    56    47   824     0      60  )
 35291    47   272    57    47   824     0     102  ;
 35292    47   273     9    47   824     0      19  return
 35293    47   273    16    47   824     0      44  this
 35294    47   273    20    47   824     0     102  ;
 35295    47   277     5    47   824     0      64  }
 35296    47   277     5    47   824     0    1960  ENDMETHOD
 35297    47   277     5    47   825     0    1961  STARTMETHOD
 35298    47   279     5    47   825     0      10  public
 35299    47   279    12    47   825     0     111  IntBuffer
 35300    47   279    22    47   825     0     111  put
 35301    47   279    25    47   825     0      59  (
 35302    47   279    26    47   825     0     111  IntBuffer
 35303    47   279    36    47   825     0     111  src
 35304    47   279    39    47   825     0      60  )
 35305    47   279    41    47   825     0      63  {
 35306    47   281     9    47   825     0      31  if
 35307    47   281    12    47   825     0      59  (
 35308    47   281    13    47   825     0     111  src
 35309    47   281    17    47   825     0      16  instanceof
 35310    47   281    28    47   825     0     111  DirectIntBufferS
 35311    47   281    44    47   825     0      60  )
 35312    47   281    46    47   825     0      63  {
 35313    47   282    13    47   825     0      31  if
 35314    47   282    16    47   825     0      59  (
 35315    47   282    17    47   825     0     111  src
 35316    47   282    21    47   825     0      68  ==
 35317    47   282    24    47   825     0      44  this
 35318    47   282    28    47   825     0      60  )
 35319    47   283    17    47   825     0      20  throw
 35320    47   283    23    47   825     0      15  new
 35321    47   283    27    47   825     0     111  IllegalArgumentException
 35322    47   283    51    47   825     0      59  (
 35323    47   283    52    47   825     0      60  )
 35324    47   283    53    47   825     0     102  ;
 35325    47   284    13    47   825     0     111  DirectIntBufferS
 35326    47   284    30    47   825     0     111  sb
 35327    47   284    33    47   825     0      67  =
 35328    47   284    35    47   825     0      59  (
 35329    47   284    36    47   825     0     111  DirectIntBufferS
 35330    47   284    52    47   825     0      60  )
 35331    47   284    53    47   825     0     111  src
 35332    47   284    56    47   825     0     102  ;
 35333    47   286    13    47   825     1      36  int
 35334    47   286    17    47   825     1     111  spos
 35335    47   286    22    47   825     1      67  =
 35336    47   286    24    47   825     1     111  sb.position
 35337    47   286    35    47   825     1      59  (
 35338    47   286    36    47   825     1      60  )
 35339    47   286    37    47   825     1     102  ;
 35340    47   287    13    47   825     1      36  int
 35341    47   287    17    47   825     1     111  slim
 35342    47   287    22    47   825     1      67  =
 35343    47   287    24    47   825     1     111  sb.limit
 35344    47   287    32    47   825     1      59  (
 35345    47   287    33    47   825     1      60  )
 35346    47   287    34    47   825     1     102  ;
 35347    47   288    13    47   825     0     111  assert
 35348    47   288    20    47   825     0      59  (
 35349    47   288    21    47   825     0     111  spos
 35350    47   288    26    47   825     0      92  <=
 35351    47   288    29    47   825     0     111  slim
 35352    47   288    33    47   825     0      60  )
 35353    47   288    34    47   825     0     102  ;
 35354    47   289    13    47   825     0      36  int
 35355    47   289    17    47   825     0     111  srem
 35356    47   289    22    47   825     0      67  =
 35357    47   289    24    47   825     0      59  (
 35358    47   289    25    47   825     0     111  spos
 35359    47   289    30    47   825     0      92  <=
 35360    47   289    33    47   825     0     111  slim
 35361    47   289    38    47   825     0      58  ?
 35362    47   289    40    47   825     0     111  slim
 35363    47   289    45    47   825     0      77  -
 35364    47   289    47    47   825     0     111  spos
 35365    47   289    52    47   825     0      65  :
 35366    47   289    54    47   825     0     112  0
 35367    47   289    55    47   825     0      60  )
 35368    47   289    56    47   825     0     102  ;
 35369    47   291    13    47   825     1      36  int
 35370    47   291    17    47   825     1     111  pos
 35371    47   291    21    47   825     1      67  =
 35372    47   291    23    47   825     1     111  position
 35373    47   291    31    47   825     1      59  (
 35374    47   291    32    47   825     1      60  )
 35375    47   291    33    47   825     1     102  ;
 35376    47   292    13    47   825     1      36  int
 35377    47   292    17    47   825     1     111  lim
 35378    47   292    21    47   825     1      67  =
 35379    47   292    23    47   825     1     111  limit
 35380    47   292    28    47   825     1      59  (
 35381    47   292    29    47   825     1      60  )
 35382    47   292    30    47   825     1     102  ;
 35383    47   293    13    47   825     0     111  assert
 35384    47   293    20    47   825     0      59  (
 35385    47   293    21    47   825     0     111  pos
 35386    47   293    25    47   825     0      92  <=
 35387    47   293    28    47   825     0     111  lim
 35388    47   293    31    47   825     0      60  )
 35389    47   293    32    47   825     0     102  ;
 35390    47   294    13    47   825     0      36  int
 35391    47   294    17    47   825     0     111  rem
 35392    47   294    21    47   825     0      67  =
 35393    47   294    23    47   825     0      59  (
 35394    47   294    24    47   825     0     111  pos
 35395    47   294    28    47   825     0      92  <=
 35396    47   294    31    47   825     0     111  lim
 35397    47   294    35    47   825     0      58  ?
 35398    47   294    37    47   825     0     111  lim
 35399    47   294    41    47   825     0      77  -
 35400    47   294    43    47   825     0     111  pos
 35401    47   294    47    47   825     0      65  :
 35402    47   294    49    47   825     0     112  0
 35403    47   294    50    47   825     0      60  )
 35404    47   294    51    47   825     0     102  ;
 35405    47   296    13    47   825     0      31  if
 35406    47   296    16    47   825     0      59  (
 35407    47   296    17    47   825     0     111  srem
 35408    47   296    22    47   825     0      89  >
 35409    47   296    24    47   825     0     111  rem
 35410    47   296    27    47   825     0      60  )
 35411    47   297    17    47   825     0      20  throw
 35412    47   297    23    47   825     0      15  new
 35413    47   297    27    47   825     0     111  BufferOverflowException
 35414    47   297    50    47   825     0      59  (
 35415    47   297    51    47   825     0      60  )
 35416    47   297    52    47   825     0     102  ;
 35417    47   298    13    47   825     0     111  unsafe.copyMemory
 35418    47   298    30    47   825     0      59  (
 35419    47   298    31    47   825     0     111  sb.ix
 35420    47   298    36    47   825     0      59  (
 35421    47   298    37    47   825     0     111  spos
 35422    47   298    41    47   825     0      60  )
 35423    47   298    42    47   825     0      66  ,
 35424    47   298    44    47   825     0     111  ix
 35425    47   298    46    47   825     0      59  (
 35426    47   298    47    47   825     0     111  pos
 35427    47   298    50    47   825     0      60  )
 35428    47   298    51    47   825     0      66  ,
 35429    47   298    53    47   825     0     111  srem
 35430    47   298    58    47   825     0      90  <<
 35431    47   298    61    47   825     0     112  2
 35432    47   298    62    47   825     0      60  )
 35433    47   298    63    47   825     0     102  ;
 35434    47   299    13    47   825     1     111  sb.position
 35435    47   299    24    47   825     1      59  (
 35436    47   299    25    47   825     1     111  spos
 35437    47   299    30    47   825     1      74  +
 35438    47   299    32    47   825     1     111  srem
 35439    47   299    36    47   825     1      60  )
 35440    47   299    37    47   825     1     102  ;
 35441    47   300    13    47   825     1     111  position
 35442    47   300    21    47   825     1      59  (
 35443    47   300    22    47   825     1     111  pos
 35444    47   300    26    47   825     1      74  +
 35445    47   300    28    47   825     1     111  srem
 35446    47   300    32    47   825     1      60  )
 35447    47   300    33    47   825     1     102  ;
 35448    47   301     9    47   825     0      64  }
 35449    47   301    11    47   825     0      48  else
 35450    47   301    16    47   825     0      31  if
 35451    47   301    19    47   825     0      59  (
 35452    47   301    20    47   825     0     111  src.hb
 35453    47   301    27    47   825     0      71  !=
 35454    47   301    30    47   825     0      21  null
 35455    47   301    34    47   825     0      60  )
 35456    47   301    36    47   825     0      63  {
 35457    47   303    13    47   825     1      36  int
 35458    47   303    17    47   825     1     111  spos
 35459    47   303    22    47   825     1      67  =
 35460    47   303    24    47   825     1     111  src.position
 35461    47   303    36    47   825     1      59  (
 35462    47   303    37    47   825     1      60  )
 35463    47   303    38    47   825     1     102  ;
 35464    47   304    13    47   825     1      36  int
 35465    47   304    17    47   825     1     111  slim
 35466    47   304    22    47   825     1      67  =
 35467    47   304    24    47   825     1     111  src.limit
 35468    47   304    33    47   825     1      59  (
 35469    47   304    34    47   825     1      60  )
 35470    47   304    35    47   825     1     102  ;
 35471    47   305    13    47   825     0     111  assert
 35472    47   305    20    47   825     0      59  (
 35473    47   305    21    47   825     0     111  spos
 35474    47   305    26    47   825     0      92  <=
 35475    47   305    29    47   825     0     111  slim
 35476    47   305    33    47   825     0      60  )
 35477    47   305    34    47   825     0     102  ;
 35478    47   306    13    47   825     0      36  int
 35479    47   306    17    47   825     0     111  srem
 35480    47   306    22    47   825     0      67  =
 35481    47   306    24    47   825     0      59  (
 35482    47   306    25    47   825     0     111  spos
 35483    47   306    30    47   825     0      92  <=
 35484    47   306    33    47   825     0     111  slim
 35485    47   306    38    47   825     0      58  ?
 35486    47   306    40    47   825     0     111  slim
 35487    47   306    45    47   825     0      77  -
 35488    47   306    47    47   825     0     111  spos
 35489    47   306    52    47   825     0      65  :
 35490    47   306    54    47   825     0     112  0
 35491    47   306    55    47   825     0      60  )
 35492    47   306    56    47   825     0     102  ;
 35493    47   308    13    47   825     0     111  put
 35494    47   308    16    47   825     0      59  (
 35495    47   308    17    47   825     0     111  src.hb
 35496    47   308    23    47   825     0      66  ,
 35497    47   308    25    47   825     0     111  src.offset
 35498    47   308    36    47   825     0      74  +
 35499    47   308    38    47   825     0     111  spos
 35500    47   308    42    47   825     0      66  ,
 35501    47   308    44    47   825     0     111  srem
 35502    47   308    48    47   825     0      60  )
 35503    47   308    49    47   825     0     102  ;
 35504    47   309    13    47   825     0     111  src.position
 35505    47   309    25    47   825     0      59  (
 35506    47   309    26    47   825     0     111  spos
 35507    47   309    31    47   825     0      74  +
 35508    47   309    33    47   825     0     111  srem
 35509    47   309    37    47   825     0      60  )
 35510    47   309    38    47   825     0     102  ;
 35511    47   311     9    47   825     0      64  }
 35512    47   311    11    47   825     0      48  else
 35513    47   311    16    47   825     0      63  {
 35514    47   312    13    47   825     0     111  super.put
 35515    47   312    22    47   825     0      59  (
 35516    47   312    23    47   825     0     111  src
 35517    47   312    26    47   825     0      60  )
 35518    47   312    27    47   825     0     102  ;
 35519    47   313     9    47   825     0      64  }
 35520    47   314     9    47   825     0      19  return
 35521    47   314    16    47   825     0      44  this
 35522    47   314    20    47   825     0     102  ;
 35523    47   318     5    47   825     0      64  }
 35524    47   318     5    47   825     0    1962  ENDMETHOD
 35525    47   318     5    47   826     0    1963  STARTMETHOD
 35526    47   320     5    47   826     0      10  public
 35527    47   320    12    47   826     0     111  IntBuffer
 35528    47   320    22    47   826     0     111  put
 35529    47   320    25    47   826     0      59  (
 35530    47   320    26    47   826     0      36  int
 35531    47   320    29    47   826     0      61  [
 35532    47   320    30    47   826     0      62  ]
 35533    47   320    32    47   826     0     111  src
 35534    47   320    35    47   826     0      66  ,
 35535    47   320    37    47   826     0      36  int
 35536    47   320    41    47   826     0     111  offset
 35537    47   320    47    47   826     0      66  ,
 35538    47   320    49    47   826     0      36  int
 35539    47   320    53    47   826     0     111  length
 35540    47   320    59    47   826     0      60  )
 35541    47   320    61    47   826     0      63  {
 35542    47   322     9    47   826     0      31  if
 35543    47   322    12    47   826     0      59  (
 35544    47   322    13    47   826     0      59  (
 35545    47   322    14    47   826     0     111  length
 35546    47   322    21    47   826     0      90  <<
 35547    47   322    24    47   826     0     112  2
 35548    47   322    25    47   826     0      60  )
 35549    47   322    27    47   826     0      89  >
 35550    47   322    29    47   826     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 35551    47   322    63    47   826     0      60  )
 35552    47   322    65    47   826     0      63  {
 35553    47   323    13    47   826     0     111  checkBounds
 35554    47   323    24    47   826     0      59  (
 35555    47   323    25    47   826     0     111  offset
 35556    47   323    31    47   826     0      66  ,
 35557    47   323    33    47   826     0     111  length
 35558    47   323    39    47   826     0      66  ,
 35559    47   323    41    47   826     0     111  src.length
 35560    47   323    51    47   826     0      60  )
 35561    47   323    52    47   826     0     102  ;
 35562    47   324    13    47   826     1      36  int
 35563    47   324    17    47   826     1     111  pos
 35564    47   324    21    47   826     1      67  =
 35565    47   324    23    47   826     1     111  position
 35566    47   324    31    47   826     1      59  (
 35567    47   324    32    47   826     1      60  )
 35568    47   324    33    47   826     1     102  ;
 35569    47   325    13    47   826     1      36  int
 35570    47   325    17    47   826     1     111  lim
 35571    47   325    21    47   826     1      67  =
 35572    47   325    23    47   826     1     111  limit
 35573    47   325    28    47   826     1      59  (
 35574    47   325    29    47   826     1      60  )
 35575    47   325    30    47   826     1     102  ;
 35576    47   326    13    47   826     0     111  assert
 35577    47   326    20    47   826     0      59  (
 35578    47   326    21    47   826     0     111  pos
 35579    47   326    25    47   826     0      92  <=
 35580    47   326    28    47   826     0     111  lim
 35581    47   326    31    47   826     0      60  )
 35582    47   326    32    47   826     0     102  ;
 35583    47   327    13    47   826     0      36  int
 35584    47   327    17    47   826     0     111  rem
 35585    47   327    21    47   826     0      67  =
 35586    47   327    23    47   826     0      59  (
 35587    47   327    24    47   826     0     111  pos
 35588    47   327    28    47   826     0      92  <=
 35589    47   327    31    47   826     0     111  lim
 35590    47   327    35    47   826     0      58  ?
 35591    47   327    37    47   826     0     111  lim
 35592    47   327    41    47   826     0      77  -
 35593    47   327    43    47   826     0     111  pos
 35594    47   327    47    47   826     0      65  :
 35595    47   327    49    47   826     0     112  0
 35596    47   327    50    47   826     0      60  )
 35597    47   327    51    47   826     0     102  ;
 35598    47   328    13    47   826     0      31  if
 35599    47   328    16    47   826     0      59  (
 35600    47   328    17    47   826     0     111  length
 35601    47   328    24    47   826     0      89  >
 35602    47   328    26    47   826     0     111  rem
 35603    47   328    29    47   826     0      60  )
 35604    47   329    17    47   826     0      20  throw
 35605    47   329    23    47   826     0      15  new
 35606    47   329    27    47   826     0     111  BufferOverflowException
 35607    47   329    50    47   826     0      59  (
 35608    47   329    51    47   826     0      60  )
 35609    47   329    52    47   826     0     102  ;
 35610    47   331    13    47   826     0      31  if
 35611    47   331    16    47   826     0      59  (
 35612    47   331    17    47   826     0     111  order
 35613    47   331    22    47   826     0      59  (
 35614    47   331    23    47   826     0      60  )
 35615    47   331    25    47   826     0      71  !=
 35616    47   331    28    47   826     0     111  ByteOrder.nativeOrder
 35617    47   331    49    47   826     0      59  (
 35618    47   331    50    47   826     0      60  )
 35619    47   331    51    47   826     0      60  )
 35620    47   332    17    47   826     0     111  Bits.copyFromIntArray
 35621    47   332    38    47   826     0      59  (
 35622    47   332    39    47   826     0     111  src
 35623    47   332    42    47   826     0      66  ,
 35624    47   332    44    47   826     0     111  offset
 35625    47   332    51    47   826     0      90  <<
 35626    47   332    54    47   826     0     112  2
 35627    47   332    55    47   826     0      66  ,
 35628    47   333    45    47   826     0     111  ix
 35629    47   333    47    47   826     0      59  (
 35630    47   333    48    47   826     0     111  pos
 35631    47   333    51    47   826     0      60  )
 35632    47   333    52    47   826     0      66  ,
 35633    47   333    54    47   826     0     111  length
 35634    47   333    61    47   826     0      90  <<
 35635    47   333    64    47   826     0     112  2
 35636    47   333    65    47   826     0      60  )
 35637    47   333    66    47   826     0     102  ;
 35638    47   334    13    47   826     0      48  else
 35639    47   335    17    47   826     0     111  Bits.copyFromByteArray
 35640    47   335    39    47   826     0      59  (
 35641    47   335    40    47   826     0     111  src
 35642    47   335    43    47   826     0      66  ,
 35643    47   335    45    47   826     0     111  offset
 35644    47   335    52    47   826     0      90  <<
 35645    47   335    55    47   826     0     112  2
 35646    47   335    56    47   826     0      66  ,
 35647    47   336    40    47   826     0     111  ix
 35648    47   336    42    47   826     0      59  (
 35649    47   336    43    47   826     0     111  pos
 35650    47   336    46    47   826     0      60  )
 35651    47   336    47    47   826     0      66  ,
 35652    47   336    49    47   826     0     111  length
 35653    47   336    56    47   826     0      90  <<
 35654    47   336    59    47   826     0     112  2
 35655    47   336    60    47   826     0      60  )
 35656    47   336    61    47   826     0     102  ;
 35657    47   337    13    47   826     0     111  position
 35658    47   337    21    47   826     0      59  (
 35659    47   337    22    47   826     0     111  pos
 35660    47   337    26    47   826     0      74  +
 35661    47   337    28    47   826     0     111  length
 35662    47   337    34    47   826     0      60  )
 35663    47   337    35    47   826     0     102  ;
 35664    47   338     9    47   826     0      64  }
 35665    47   338    11    47   826     0      48  else
 35666    47   338    16    47   826     0      63  {
 35667    47   339    13    47   826     0     111  super.put
 35668    47   339    22    47   826     0      59  (
 35669    47   339    23    47   826     0     111  src
 35670    47   339    26    47   826     0      66  ,
 35671    47   339    28    47   826     0     111  offset
 35672    47   339    34    47   826     0      66  ,
 35673    47   339    36    47   826     0     111  length
 35674    47   339    42    47   826     0      60  )
 35675    47   339    43    47   826     0     102  ;
 35676    47   340     9    47   826     0      64  }
 35677    47   341     9    47   826     0      19  return
 35678    47   341    16    47   826     0      44  this
 35679    47   341    20    47   826     0     102  ;
 35680    47   345     5    47   826     0      64  }
 35681    47   345     5    47   826     0    1964  ENDMETHOD
 35682    47   345     5    47   827     0    1965  STARTMETHOD
 35683    47   347     5    47   827     0      10  public
 35684    47   347    12    47   827     0     111  IntBuffer
 35685    47   347    22    47   827     0     111  compact
 35686    47   347    29    47   827     0      59  (
 35687    47   347    30    47   827     0      60  )
 35688    47   347    32    47   827     0      63  {
 35689    47   349     9    47   827     1      36  int
 35690    47   349    13    47   827     1     111  pos
 35691    47   349    17    47   827     1      67  =
 35692    47   349    19    47   827     1     111  position
 35693    47   349    27    47   827     1      59  (
 35694    47   349    28    47   827     1      60  )
 35695    47   349    29    47   827     1     102  ;
 35696    47   350     9    47   827     1      36  int
 35697    47   350    13    47   827     1     111  lim
 35698    47   350    17    47   827     1      67  =
 35699    47   350    19    47   827     1     111  limit
 35700    47   350    24    47   827     1      59  (
 35701    47   350    25    47   827     1      60  )
 35702    47   350    26    47   827     1     102  ;
 35703    47   351     9    47   827     0     111  assert
 35704    47   351    16    47   827     0      59  (
 35705    47   351    17    47   827     0     111  pos
 35706    47   351    21    47   827     0      92  <=
 35707    47   351    24    47   827     0     111  lim
 35708    47   351    27    47   827     0      60  )
 35709    47   351    28    47   827     0     102  ;
 35710    47   352     9    47   827     0      36  int
 35711    47   352    13    47   827     0     111  rem
 35712    47   352    17    47   827     0      67  =
 35713    47   352    19    47   827     0      59  (
 35714    47   352    20    47   827     0     111  pos
 35715    47   352    24    47   827     0      92  <=
 35716    47   352    27    47   827     0     111  lim
 35717    47   352    31    47   827     0      58  ?
 35718    47   352    33    47   827     0     111  lim
 35719    47   352    37    47   827     0      77  -
 35720    47   352    39    47   827     0     111  pos
 35721    47   352    43    47   827     0      65  :
 35722    47   352    45    47   827     0     112  0
 35723    47   352    46    47   827     0      60  )
 35724    47   352    47    47   827     0     102  ;
 35725    47   354     9    47   827     0     111  unsafe.copyMemory
 35726    47   354    26    47   827     0      59  (
 35727    47   354    27    47   827     0     111  ix
 35728    47   354    29    47   827     0      59  (
 35729    47   354    30    47   827     0     111  pos
 35730    47   354    33    47   827     0      60  )
 35731    47   354    34    47   827     0      66  ,
 35732    47   354    36    47   827     0     111  ix
 35733    47   354    38    47   827     0      59  (
 35734    47   354    39    47   827     0     112  0
 35735    47   354    40    47   827     0      60  )
 35736    47   354    41    47   827     0      66  ,
 35737    47   354    43    47   827     0     111  rem
 35738    47   354    47    47   827     0      90  <<
 35739    47   354    50    47   827     0     112  2
 35740    47   354    51    47   827     0      60  )
 35741    47   354    52    47   827     0     102  ;
 35742    47   355     9    47   827     0     111  position
 35743    47   355    17    47   827     0      59  (
 35744    47   355    18    47   827     0     111  rem
 35745    47   355    21    47   827     0      60  )
 35746    47   355    22    47   827     0     102  ;
 35747    47   356     9    47   827     0     111  limit
 35748    47   356    14    47   827     0      59  (
 35749    47   356    15    47   827     0     111  capacity
 35750    47   356    23    47   827     0      59  (
 35751    47   356    24    47   827     0      60  )
 35752    47   356    25    47   827     0      60  )
 35753    47   356    26    47   827     0     102  ;
 35754    47   357     9    47   827     0     111  clearMark
 35755    47   357    18    47   827     0      59  (
 35756    47   357    19    47   827     0      60  )
 35757    47   357    20    47   827     0     102  ;
 35758    47   358     9    47   827     0      19  return
 35759    47   358    16    47   827     0      44  this
 35760    47   358    20    47   827     1     102  ;
 35761    47   362     5    47   827     1      64  }
 35762    47   362     5    47   827     0    1966  ENDMETHOD
 35763    47   362     5    47   828     0    1967  STARTMETHOD
 35764    47   364     5    47   828     0      10  public
 35765    47   364    12    47   828     0      39  boolean
 35766    47   364    20    47   828     0     111  isDirect
 35767    47   364    28    47   828     0      59  (
 35768    47   364    29    47   828     0      60  )
 35769    47   364    31    47   828     0      63  {
 35770    47   365     9    47   828     0      19  return
 35771    47   365    16    47   828     0      52  true
 35772    47   365    20    47   828     1     102  ;
 35773    47   366     5    47   828     1      64  }
 35774    47   366     5    47   828     0    1968  ENDMETHOD
 35775    47   366     5    47   829     0    1969  STARTMETHOD
 35776    47   368     5    47   829     0      10  public
 35777    47   368    12    47   829     0      39  boolean
 35778    47   368    20    47   829     0     111  isReadOnly
 35779    47   368    30    47   829     0      59  (
 35780    47   368    31    47   829     0      60  )
 35781    47   368    33    47   829     0      63  {
 35782    47   369     9    47   829     0      19  return
 35783    47   369    16    47   829     0      43  false
 35784    47   369    21    47   829     1     102  ;
 35785    47   370     5    47   829     1      64  }
 35786    47   370     5    47   829     0    1970  ENDMETHOD
 35787    47   370     5    47   830     0    1971  STARTMETHOD
 35788    47   416     5    47   830     0      10  public
 35789    47   416    12    47   830     0     111  ByteOrder
 35790    47   416    22    47   830     0     111  order
 35791    47   416    27    47   830     0      59  (
 35792    47   416    28    47   830     0      60  )
 35793    47   416    30    47   830     0      63  {
 35794    47   418     9    47   830     0      19  return
 35795    47   418    16    47   830     0      59  (
 35796    47   418    17    47   830     0      59  (
 35797    47   418    18    47   830     0     111  ByteOrder.nativeOrder
 35798    47   418    39    47   830     0      59  (
 35799    47   418    40    47   830     0      60  )
 35800    47   418    42    47   830     0      68  ==
 35801    47   418    45    47   830     0     111  ByteOrder.BIG_ENDIAN
 35802    47   418    65    47   830     0      60  )
 35803    47   419    17    47   830     0      58  ?
 35804    47   419    19    47   830     0     111  ByteOrder.LITTLE_ENDIAN
 35805    47   419    43    47   830     0      65  :
 35806    47   419    45    47   830     0     111  ByteOrder.BIG_ENDIAN
 35807    47   419    65    47   830     0      60  )
 35808    47   419    66    47   830     0     102  ;
 35809    47   425     5    47   830     0      64  }
 35810    47   425     5    47   830     0    1972  ENDMETHOD
 35811    47   452     1    47    -1     0      64  }
 35812    47   452     1    47    -1     1    1973  ENDCLASS
 35813    47   452     1    -1    -1     1    1974  ENDFILE C:\javasrc\java\nio\DirectIntBufferS.java
 35814    48     1     1    -1    -1     1    1975  STARTFILE C:\javasrc\java\nio\DirectIntBufferU.java
 35815    48    28     1    -1    -1     0       5  package
 35816    48    28     9    -1    -1     0     111  java.nio
 35817    48    28    17    -1    -1     0     102  ;
 35818    48    30     1    -1    -1     1      49  import
 35819    48    30     8    -1    -1     1     111  sun.misc.Cleaner
 35820    48    30    24    -1    -1     1     102  ;
 35821    48    31     1    -1    -1     1      49  import
 35822    48    31     8    -1    -1     1     111  sun.misc.Unsafe
 35823    48    31    23    -1    -1     1     102  ;
 35824    48    32     1    -1    -1     1      49  import
 35825    48    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 35826    48    32    31    -1    -1     1     102  ;
 35827    48    33     1    -1    -1     1      49  import
 35828    48    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 35829    48    33    34    -1    -1     1     102  ;
 35830    48    36     1    48    -1     0    1976  STARTCLASS
 35831    48    36     1    48    -1     0      24  class
 35832    48    36     7    48    -1     0     111  DirectIntBufferU
 35833    48    38     5    48    -1     0      38  extends
 35834    48    38    13    48    -1     0     111  IntBuffer
 35835    48    42     5    48    -1     0      17  implements
 35836    48    42    16    48    -1     0     111  DirectBuffer
 35837    48    43     1    48    -1     0      63  {
 35838    48    48     5    48    -1     0      23  protected
 35839    48    48    15    48    -1     0      45  static
 35840    48    48    22    48    -1     0       6  final
 35841    48    48    28    48    -1     0     111  Unsafe
 35842    48    48    35    48    -1     0     111  unsafe
 35843    48    48    42    48    -1     0      67  =
 35844    48    48    44    48    -1     0     111  Bits.unsafe
 35845    48    48    55    48    -1     0      59  (
 35846    48    48    56    48    -1     0      60  )
 35847    48    48    57    48    -1     0     102  ;
 35848    48    51     5    48    -1     0      23  protected
 35849    48    51    15    48    -1     0      45  static
 35850    48    51    22    48    -1     0       6  final
 35851    48    51    28    48    -1     0      39  boolean
 35852    48    51    36    48    -1     0     111  unaligned
 35853    48    51    46    48    -1     0      67  =
 35854    48    51    48    48    -1     0     111  Bits.unaligned
 35855    48    51    62    48    -1     0      59  (
 35856    48    51    63    48    -1     0      60  )
 35857    48    51    64    48    -1     0     102  ;
 35858    48    59     5    48    -1     0      23  protected
 35859    48    59    15    48    -1     0     111  Object
 35860    48    59    22    48    -1     0     111  viewedBuffer
 35861    48    59    35    48    -1     0      67  =
 35862    48    59    37    48    -1     0      21  null
 35863    48    59    41    48    -1     0     102  ;
 35864    48    59    41    48   831     0    1977  STARTMETHOD
 35865    48    61     5    48   831     0      10  public
 35866    48    61    12    48   831     0     111  Object
 35867    48    61    19    48   831     0     111  viewedBuffer
 35868    48    61    31    48   831     0      59  (
 35869    48    61    32    48   831     0      60  )
 35870    48    61    34    48   831     0      63  {
 35871    48    62     9    48   831     0      19  return
 35872    48    62    16    48   831     0     111  viewedBuffer
 35873    48    62    28    48   831     0     102  ;
 35874    48    63     5    48   831     0      64  }
 35875    48    63     5    48   831     0    1978  ENDMETHOD
 35876    48    63     5    48   832     0    1979  STARTMETHOD
 35877    48   100     5    48   832     0      10  public
 35878    48   100    12    48   832     0     111  Cleaner
 35879    48   100    20    48   832     0     111  cleaner
 35880    48   100    27    48   832     0      59  (
 35881    48   100    28    48   832     0      60  )
 35882    48   100    30    48   832     0      63  {
 35883    48   100    32    48   832     0      19  return
 35884    48   100    39    48   832     0      21  null
 35885    48   100    43    48   832     0     102  ;
 35886    48   100    45    48   832     0      64  }
 35887    48   100    45    48   832     0    1980  ENDMETHOD
 35888    48   100    45    48   833     0    1981  STARTMETHOD
 35889    48   164     5    48   833     0     111  DirectIntBufferU
 35890    48   164    21    48   833     0      59  (
 35891    48   164    22    48   833     0     111  DirectBuffer
 35892    48   164    35    48   833     0     111  db
 35893    48   164    37    48   833     0      66  ,
 35894    48   165    32    48   833     0      36  int
 35895    48   165    36    48   833     0     111  mark
 35896    48   165    40    48   833     0      66  ,
 35897    48   165    42    48   833     0      36  int
 35898    48   165    46    48   833     0     111  pos
 35899    48   165    49    48   833     0      66  ,
 35900    48   165    51    48   833     0      36  int
 35901    48   165    55    48   833     0     111  lim
 35902    48   165    58    48   833     0      66  ,
 35903    48   165    60    48   833     0      36  int
 35904    48   165    64    48   833     0     111  cap
 35905    48   165    67    48   833     0      66  ,
 35906    48   166    32    48   833     0      36  int
 35907    48   166    36    48   833     0     111  off
 35908    48   166    39    48   833     0      60  )
 35909    48   167     5    48   833     0      63  {
 35910    48   169     9    48   833     0      27  super
 35911    48   169    14    48   833     0      59  (
 35912    48   169    15    48   833     0     111  mark
 35913    48   169    19    48   833     0      66  ,
 35914    48   169    21    48   833     0     111  pos
 35915    48   169    24    48   833     0      66  ,
 35916    48   169    26    48   833     0     111  lim
 35917    48   169    29    48   833     0      66  ,
 35918    48   169    31    48   833     0     111  cap
 35919    48   169    34    48   833     0      60  )
 35920    48   169    35    48   833     0     102  ;
 35921    48   170     9    48   833     0     111  address
 35922    48   170    17    48   833     0      67  =
 35923    48   170    19    48   833     0     111  db.address
 35924    48   170    29    48   833     0      59  (
 35925    48   170    30    48   833     0      60  )
 35926    48   170    32    48   833     0      74  +
 35927    48   170    34    48   833     0     111  off
 35928    48   170    37    48   833     0     102  ;
 35929    48   171     9    48   833     0     111  viewedBuffer
 35930    48   171    22    48   833     0      67  =
 35931    48   171    24    48   833     0     111  db
 35932    48   171    26    48   833     0     102  ;
 35933    48   178     5    48   833     0      64  }
 35934    48   178     5    48   833     0    1982  ENDMETHOD
 35935    48   178     5    48   834     0    1983  STARTMETHOD
 35936    48   180     5    48   834     0      10  public
 35937    48   180    12    48   834     0     111  IntBuffer
 35938    48   180    22    48   834     0     111  slice
 35939    48   180    27    48   834     0      59  (
 35940    48   180    28    48   834     0      60  )
 35941    48   180    30    48   834     0      63  {
 35942    48   181     9    48   834     1      36  int
 35943    48   181    13    48   834     1     111  pos
 35944    48   181    17    48   834     1      67  =
 35945    48   181    19    48   834     1     111  this.position
 35946    48   181    32    48   834     1      59  (
 35947    48   181    33    48   834     1      60  )
 35948    48   181    34    48   834     1     102  ;
 35949    48   182     9    48   834     1      36  int
 35950    48   182    13    48   834     1     111  lim
 35951    48   182    17    48   834     1      67  =
 35952    48   182    19    48   834     1     111  this.limit
 35953    48   182    29    48   834     1      59  (
 35954    48   182    30    48   834     1      60  )
 35955    48   182    31    48   834     1     102  ;
 35956    48   183     9    48   834     0     111  assert
 35957    48   183    16    48   834     0      59  (
 35958    48   183    17    48   834     0     111  pos
 35959    48   183    21    48   834     0      92  <=
 35960    48   183    24    48   834     0     111  lim
 35961    48   183    27    48   834     0      60  )
 35962    48   183    28    48   834     0     102  ;
 35963    48   184     9    48   834     0      36  int
 35964    48   184    13    48   834     0     111  rem
 35965    48   184    17    48   834     0      67  =
 35966    48   184    19    48   834     0      59  (
 35967    48   184    20    48   834     0     111  pos
 35968    48   184    24    48   834     0      92  <=
 35969    48   184    27    48   834     0     111  lim
 35970    48   184    31    48   834     0      58  ?
 35971    48   184    33    48   834     0     111  lim
 35972    48   184    37    48   834     0      77  -
 35973    48   184    39    48   834     0     111  pos
 35974    48   184    43    48   834     0      65  :
 35975    48   184    45    48   834     0     112  0
 35976    48   184    46    48   834     0      60  )
 35977    48   184    47    48   834     0     102  ;
 35978    48   185     9    48   834     0      36  int
 35979    48   185    13    48   834     0     111  off
 35980    48   185    17    48   834     0      67  =
 35981    48   185    19    48   834     0      59  (
 35982    48   185    20    48   834     0     111  pos
 35983    48   185    24    48   834     0      90  <<
 35984    48   185    27    48   834     0     112  2
 35985    48   185    28    48   834     0      60  )
 35986    48   185    29    48   834     0     102  ;
 35987    48   186     9    48   834     0     111  assert
 35988    48   186    16    48   834     0      59  (
 35989    48   186    17    48   834     0     111  off
 35990    48   186    21    48   834     0      88  >=
 35991    48   186    24    48   834     0     112  0
 35992    48   186    25    48   834     0      60  )
 35993    48   186    26    48   834     0     102  ;
 35994    48   187     9    48   834     0      19  return
 35995    48   187    16    48   834     0      15  new
 35996    48   187    20    48   834     0     111  DirectIntBufferU
 35997    48   187    36    48   834     0      59  (
 35998    48   187    37    48   834     0      44  this
 35999    48   187    41    48   834     0      66  ,
 36000    48   187    43    48   834     0      77  -
 36001    48   187    44    48   834     0     112  1
 36002    48   187    45    48   834     0      66  ,
 36003    48   187    47    48   834     0     112  0
 36004    48   187    48    48   834     0      66  ,
 36005    48   187    50    48   834     0     111  rem
 36006    48   187    53    48   834     0      66  ,
 36007    48   187    55    48   834     0     111  rem
 36008    48   187    58    48   834     0      66  ,
 36009    48   187    60    48   834     0     111  off
 36010    48   187    63    48   834     1      60  )
 36011    48   187    64    48   834     1     102  ;
 36012    48   188     5    48   834     1      64  }
 36013    48   188     5    48   834     0    1984  ENDMETHOD
 36014    48   188     5    48   835     0    1985  STARTMETHOD
 36015    48   190     5    48   835     0      10  public
 36016    48   190    12    48   835     0     111  IntBuffer
 36017    48   190    22    48   835     0     111  duplicate
 36018    48   190    31    48   835     0      59  (
 36019    48   190    32    48   835     0      60  )
 36020    48   190    34    48   835     0      63  {
 36021    48   191     9    48   835     0      19  return
 36022    48   191    16    48   835     0      15  new
 36023    48   191    20    48   835     0     111  DirectIntBufferU
 36024    48   191    36    48   835     0      59  (
 36025    48   191    37    48   835     0      44  this
 36026    48   191    41    48   835     0      66  ,
 36027    48   192    47    48   835     1     111  this.markValue
 36028    48   192    61    48   835     1      59  (
 36029    48   192    62    48   835     1      60  )
 36030    48   192    63    48   835     1      66  ,
 36031    48   193    47    48   835     1     111  this.position
 36032    48   193    60    48   835     1      59  (
 36033    48   193    61    48   835     1      60  )
 36034    48   193    62    48   835     1      66  ,
 36035    48   194    47    48   835     1     111  this.limit
 36036    48   194    57    48   835     1      59  (
 36037    48   194    58    48   835     1      60  )
 36038    48   194    59    48   835     1      66  ,
 36039    48   195    47    48   835     1     111  this.capacity
 36040    48   195    60    48   835     1      59  (
 36041    48   195    61    48   835     1      60  )
 36042    48   195    62    48   835     1      66  ,
 36043    48   196    47    48   835     0     112  0
 36044    48   196    48    48   835     1      60  )
 36045    48   196    49    48   835     1     102  ;
 36046    48   197     5    48   835     1      64  }
 36047    48   197     5    48   835     0    1986  ENDMETHOD
 36048    48   197     5    48   836     0    1987  STARTMETHOD
 36049    48   199     5    48   836     0      10  public
 36050    48   199    12    48   836     0     111  IntBuffer
 36051    48   199    22    48   836     0     111  asReadOnlyBuffer
 36052    48   199    38    48   836     0      59  (
 36053    48   199    39    48   836     0      60  )
 36054    48   199    41    48   836     0      63  {
 36055    48   201     9    48   836     0      19  return
 36056    48   201    16    48   836     0      15  new
 36057    48   201    20    48   836     0     111  DirectIntBufferRU
 36058    48   201    37    48   836     0      59  (
 36059    48   201    38    48   836     0      44  this
 36060    48   201    42    48   836     0      66  ,
 36061    48   202    44    48   836     1     111  this.markValue
 36062    48   202    58    48   836     1      59  (
 36063    48   202    59    48   836     1      60  )
 36064    48   202    60    48   836     1      66  ,
 36065    48   203    44    48   836     1     111  this.position
 36066    48   203    57    48   836     1      59  (
 36067    48   203    58    48   836     1      60  )
 36068    48   203    59    48   836     1      66  ,
 36069    48   204    44    48   836     1     111  this.limit
 36070    48   204    54    48   836     1      59  (
 36071    48   204    55    48   836     1      60  )
 36072    48   204    56    48   836     1      66  ,
 36073    48   205    44    48   836     1     111  this.capacity
 36074    48   205    57    48   836     1      59  (
 36075    48   205    58    48   836     1      60  )
 36076    48   205    59    48   836     1      66  ,
 36077    48   206    44    48   836     0     112  0
 36078    48   206    45    48   836     1      60  )
 36079    48   206    46    48   836     1     102  ;
 36080    48   210     5    48   836     1      64  }
 36081    48   210     5    48   836     0    1988  ENDMETHOD
 36082    48   210     5    48   837     0    1989  STARTMETHOD
 36083    48   214     5    48   837     0      10  public
 36084    48   214    12    48   837     0      53  long
 36085    48   214    17    48   837     0     111  address
 36086    48   214    24    48   837     0      59  (
 36087    48   214    25    48   837     0      60  )
 36088    48   214    27    48   837     0      63  {
 36089    48   215     9    48   837     0      19  return
 36090    48   215    16    48   837     0     111  address
 36091    48   215    23    48   837     0     102  ;
 36092    48   216     5    48   837     0      64  }
 36093    48   216     5    48   837     0    1990  ENDMETHOD
 36094    48   216     5    48   838     0    1991  STARTMETHOD
 36095    48   218     5    48   838     0      41  private
 36096    48   218    13    48   838     0      53  long
 36097    48   218    18    48   838     0     111  ix
 36098    48   218    20    48   838     0      59  (
 36099    48   218    21    48   838     0      36  int
 36100    48   218    25    48   838     0     111  i
 36101    48   218    26    48   838     0      60  )
 36102    48   218    28    48   838     0      63  {
 36103    48   219     9    48   838     0      19  return
 36104    48   219    16    48   838     0     111  address
 36105    48   219    24    48   838     0      74  +
 36106    48   219    26    48   838     0      59  (
 36107    48   219    27    48   838     0     111  i
 36108    48   219    29    48   838     0      90  <<
 36109    48   219    32    48   838     0     112  2
 36110    48   219    33    48   838     0      60  )
 36111    48   219    34    48   838     0     102  ;
 36112    48   220     5    48   838     0      64  }
 36113    48   220     5    48   838     0    1992  ENDMETHOD
 36114    48   220     5    48   839     0    1993  STARTMETHOD
 36115    48   222     5    48   839     0      10  public
 36116    48   222    12    48   839     0      36  int
 36117    48   222    16    48   839     0     111  get
 36118    48   222    19    48   839     0      59  (
 36119    48   222    20    48   839     0      60  )
 36120    48   222    22    48   839     0      63  {
 36121    48   223     9    48   839     0      19  return
 36122    48   223    16    48   839     0      59  (
 36123    48   223    17    48   839     0      59  (
 36124    48   223    18    48   839     0     111  unsafe.getInt
 36125    48   223    31    48   839     0      59  (
 36126    48   223    32    48   839     0     111  ix
 36127    48   223    34    48   839     0      59  (
 36128    48   223    35    48   839     0     111  nextGetIndex
 36129    48   223    47    48   839     0      59  (
 36130    48   223    48    48   839     0      60  )
 36131    48   223    49    48   839     0      60  )
 36132    48   223    50    48   839     0      60  )
 36133    48   223    51    48   839     0      60  )
 36134    48   223    52    48   839     0      60  )
 36135    48   223    53    48   839     0     102  ;
 36136    48   224     5    48   839     0      64  }
 36137    48   224     5    48   839     0    1994  ENDMETHOD
 36138    48   224     5    48   840     0    1995  STARTMETHOD
 36139    48   226     5    48   840     0      10  public
 36140    48   226    12    48   840     0      36  int
 36141    48   226    16    48   840     0     111  get
 36142    48   226    19    48   840     0      59  (
 36143    48   226    20    48   840     0      36  int
 36144    48   226    24    48   840     0     111  i
 36145    48   226    25    48   840     0      60  )
 36146    48   226    27    48   840     0      63  {
 36147    48   227     9    48   840     0      19  return
 36148    48   227    16    48   840     0      59  (
 36149    48   227    17    48   840     0      59  (
 36150    48   227    18    48   840     0     111  unsafe.getInt
 36151    48   227    31    48   840     0      59  (
 36152    48   227    32    48   840     0     111  ix
 36153    48   227    34    48   840     0      59  (
 36154    48   227    35    48   840     0     111  checkIndex
 36155    48   227    45    48   840     0      59  (
 36156    48   227    46    48   840     0     111  i
 36157    48   227    47    48   840     0      60  )
 36158    48   227    48    48   840     0      60  )
 36159    48   227    49    48   840     0      60  )
 36160    48   227    50    48   840     0      60  )
 36161    48   227    51    48   840     0      60  )
 36162    48   227    52    48   840     0     102  ;
 36163    48   228     5    48   840     0      64  }
 36164    48   228     5    48   840     0    1996  ENDMETHOD
 36165    48   228     5    48   841     0    1997  STARTMETHOD
 36166    48   230     5    48   841     0      10  public
 36167    48   230    12    48   841     0     111  IntBuffer
 36168    48   230    22    48   841     0     111  get
 36169    48   230    25    48   841     0      59  (
 36170    48   230    26    48   841     0      36  int
 36171    48   230    29    48   841     0      61  [
 36172    48   230    30    48   841     0      62  ]
 36173    48   230    32    48   841     0     111  dst
 36174    48   230    35    48   841     0      66  ,
 36175    48   230    37    48   841     0      36  int
 36176    48   230    41    48   841     0     111  offset
 36177    48   230    47    48   841     0      66  ,
 36178    48   230    49    48   841     0      36  int
 36179    48   230    53    48   841     0     111  length
 36180    48   230    59    48   841     0      60  )
 36181    48   230    61    48   841     0      63  {
 36182    48   232     9    48   841     0      31  if
 36183    48   232    12    48   841     0      59  (
 36184    48   232    13    48   841     0      59  (
 36185    48   232    14    48   841     0     111  length
 36186    48   232    21    48   841     0      90  <<
 36187    48   232    24    48   841     0     112  2
 36188    48   232    25    48   841     0      60  )
 36189    48   232    27    48   841     0      89  >
 36190    48   232    29    48   841     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 36191    48   232    61    48   841     0      60  )
 36192    48   232    63    48   841     0      63  {
 36193    48   233    13    48   841     0     111  checkBounds
 36194    48   233    24    48   841     0      59  (
 36195    48   233    25    48   841     0     111  offset
 36196    48   233    31    48   841     0      66  ,
 36197    48   233    33    48   841     0     111  length
 36198    48   233    39    48   841     0      66  ,
 36199    48   233    41    48   841     0     111  dst.length
 36200    48   233    51    48   841     0      60  )
 36201    48   233    52    48   841     0     102  ;
 36202    48   234    13    48   841     1      36  int
 36203    48   234    17    48   841     1     111  pos
 36204    48   234    21    48   841     1      67  =
 36205    48   234    23    48   841     1     111  position
 36206    48   234    31    48   841     1      59  (
 36207    48   234    32    48   841     1      60  )
 36208    48   234    33    48   841     1     102  ;
 36209    48   235    13    48   841     1      36  int
 36210    48   235    17    48   841     1     111  lim
 36211    48   235    21    48   841     1      67  =
 36212    48   235    23    48   841     1     111  limit
 36213    48   235    28    48   841     1      59  (
 36214    48   235    29    48   841     1      60  )
 36215    48   235    30    48   841     1     102  ;
 36216    48   236    13    48   841     0     111  assert
 36217    48   236    20    48   841     0      59  (
 36218    48   236    21    48   841     0     111  pos
 36219    48   236    25    48   841     0      92  <=
 36220    48   236    28    48   841     0     111  lim
 36221    48   236    31    48   841     0      60  )
 36222    48   236    32    48   841     0     102  ;
 36223    48   237    13    48   841     0      36  int
 36224    48   237    17    48   841     0     111  rem
 36225    48   237    21    48   841     0      67  =
 36226    48   237    23    48   841     0      59  (
 36227    48   237    24    48   841     0     111  pos
 36228    48   237    28    48   841     0      92  <=
 36229    48   237    31    48   841     0     111  lim
 36230    48   237    35    48   841     0      58  ?
 36231    48   237    37    48   841     0     111  lim
 36232    48   237    41    48   841     0      77  -
 36233    48   237    43    48   841     0     111  pos
 36234    48   237    47    48   841     0      65  :
 36235    48   237    49    48   841     0     112  0
 36236    48   237    50    48   841     0      60  )
 36237    48   237    51    48   841     0     102  ;
 36238    48   238    13    48   841     0      31  if
 36239    48   238    16    48   841     0      59  (
 36240    48   238    17    48   841     0     111  length
 36241    48   238    24    48   841     0      89  >
 36242    48   238    26    48   841     0     111  rem
 36243    48   238    29    48   841     0      60  )
 36244    48   239    17    48   841     0      20  throw
 36245    48   239    23    48   841     0      15  new
 36246    48   239    27    48   841     0     111  BufferUnderflowException
 36247    48   239    51    48   841     0      59  (
 36248    48   239    52    48   841     0      60  )
 36249    48   239    53    48   841     0     102  ;
 36250    48   241    13    48   841     0      31  if
 36251    48   241    16    48   841     0      59  (
 36252    48   241    17    48   841     0     111  order
 36253    48   241    22    48   841     0      59  (
 36254    48   241    23    48   841     0      60  )
 36255    48   241    25    48   841     0      71  !=
 36256    48   241    28    48   841     0     111  ByteOrder.nativeOrder
 36257    48   241    49    48   841     0      59  (
 36258    48   241    50    48   841     0      60  )
 36259    48   241    51    48   841     0      60  )
 36260    48   242    17    48   841     0     111  Bits.copyToIntArray
 36261    48   242    36    48   841     0      59  (
 36262    48   242    37    48   841     0     111  ix
 36263    48   242    39    48   841     0      59  (
 36264    48   242    40    48   841     0     111  pos
 36265    48   242    43    48   841     0      60  )
 36266    48   242    44    48   841     0      66  ,
 36267    48   242    46    48   841     0     111  dst
 36268    48   242    49    48   841     0      66  ,
 36269    48   243    43    48   841     0     111  offset
 36270    48   243    50    48   841     0      90  <<
 36271    48   243    53    48   841     0     112  2
 36272    48   243    54    48   841     0      66  ,
 36273    48   244    43    48   841     0     111  length
 36274    48   244    50    48   841     0      90  <<
 36275    48   244    53    48   841     0     112  2
 36276    48   244    54    48   841     0      60  )
 36277    48   244    55    48   841     0     102  ;
 36278    48   245    13    48   841     0      48  else
 36279    48   246    17    48   841     0     111  Bits.copyToByteArray
 36280    48   246    37    48   841     0      59  (
 36281    48   246    38    48   841     0     111  ix
 36282    48   246    40    48   841     0      59  (
 36283    48   246    41    48   841     0     111  pos
 36284    48   246    44    48   841     0      60  )
 36285    48   246    45    48   841     0      66  ,
 36286    48   246    47    48   841     0     111  dst
 36287    48   246    50    48   841     0      66  ,
 36288    48   247    38    48   841     0     111  offset
 36289    48   247    45    48   841     0      90  <<
 36290    48   247    48    48   841     0     112  2
 36291    48   247    49    48   841     0      66  ,
 36292    48   248    38    48   841     0     111  length
 36293    48   248    45    48   841     0      90  <<
 36294    48   248    48    48   841     0     112  2
 36295    48   248    49    48   841     0      60  )
 36296    48   248    50    48   841     0     102  ;
 36297    48   249    13    48   841     0     111  position
 36298    48   249    21    48   841     0      59  (
 36299    48   249    22    48   841     0     111  pos
 36300    48   249    26    48   841     0      74  +
 36301    48   249    28    48   841     0     111  length
 36302    48   249    34    48   841     0      60  )
 36303    48   249    35    48   841     0     102  ;
 36304    48   250     9    48   841     0      64  }
 36305    48   250    11    48   841     0      48  else
 36306    48   250    16    48   841     0      63  {
 36307    48   251    13    48   841     0     111  super.get
 36308    48   251    22    48   841     0      59  (
 36309    48   251    23    48   841     0     111  dst
 36310    48   251    26    48   841     0      66  ,
 36311    48   251    28    48   841     0     111  offset
 36312    48   251    34    48   841     0      66  ,
 36313    48   251    36    48   841     0     111  length
 36314    48   251    42    48   841     0      60  )
 36315    48   251    43    48   841     0     102  ;
 36316    48   252     9    48   841     0      64  }
 36317    48   253     9    48   841     0      19  return
 36318    48   253    16    48   841     0      44  this
 36319    48   253    20    48   841     0     102  ;
 36320    48   257     5    48   841     0      64  }
 36321    48   257     5    48   841     0    1998  ENDMETHOD
 36322    48   257     5    48   842     0    1999  STARTMETHOD
 36323    48   261     5    48   842     0      10  public
 36324    48   261    12    48   842     0     111  IntBuffer
 36325    48   261    22    48   842     0     111  put
 36326    48   261    25    48   842     0      59  (
 36327    48   261    26    48   842     0      36  int
 36328    48   261    30    48   842     0     111  x
 36329    48   261    31    48   842     0      60  )
 36330    48   261    33    48   842     0      63  {
 36331    48   263     9    48   842     0     111  unsafe.putInt
 36332    48   263    22    48   842     0      59  (
 36333    48   263    23    48   842     0     111  ix
 36334    48   263    25    48   842     0      59  (
 36335    48   263    26    48   842     0     111  nextPutIndex
 36336    48   263    38    48   842     0      59  (
 36337    48   263    39    48   842     0      60  )
 36338    48   263    40    48   842     0      60  )
 36339    48   263    41    48   842     0      66  ,
 36340    48   263    43    48   842     0      59  (
 36341    48   263    44    48   842     0      59  (
 36342    48   263    45    48   842     0     111  x
 36343    48   263    46    48   842     0      60  )
 36344    48   263    47    48   842     0      60  )
 36345    48   263    48    48   842     0      60  )
 36346    48   263    49    48   842     0     102  ;
 36347    48   264     9    48   842     0      19  return
 36348    48   264    16    48   842     0      44  this
 36349    48   264    20    48   842     0     102  ;
 36350    48   268     5    48   842     0      64  }
 36351    48   268     5    48   842     0    2000  ENDMETHOD
 36352    48   268     5    48   843     0    2001  STARTMETHOD
 36353    48   270     5    48   843     0      10  public
 36354    48   270    12    48   843     0     111  IntBuffer
 36355    48   270    22    48   843     0     111  put
 36356    48   270    25    48   843     0      59  (
 36357    48   270    26    48   843     0      36  int
 36358    48   270    30    48   843     0     111  i
 36359    48   270    31    48   843     0      66  ,
 36360    48   270    33    48   843     0      36  int
 36361    48   270    37    48   843     0     111  x
 36362    48   270    38    48   843     0      60  )
 36363    48   270    40    48   843     0      63  {
 36364    48   272     9    48   843     0     111  unsafe.putInt
 36365    48   272    22    48   843     0      59  (
 36366    48   272    23    48   843     0     111  ix
 36367    48   272    25    48   843     0      59  (
 36368    48   272    26    48   843     0     111  checkIndex
 36369    48   272    36    48   843     0      59  (
 36370    48   272    37    48   843     0     111  i
 36371    48   272    38    48   843     0      60  )
 36372    48   272    39    48   843     0      60  )
 36373    48   272    40    48   843     0      66  ,
 36374    48   272    42    48   843     0      59  (
 36375    48   272    43    48   843     0      59  (
 36376    48   272    44    48   843     0     111  x
 36377    48   272    45    48   843     0      60  )
 36378    48   272    46    48   843     0      60  )
 36379    48   272    47    48   843     0      60  )
 36380    48   272    48    48   843     0     102  ;
 36381    48   273     9    48   843     0      19  return
 36382    48   273    16    48   843     0      44  this
 36383    48   273    20    48   843     0     102  ;
 36384    48   277     5    48   843     0      64  }
 36385    48   277     5    48   843     0    2002  ENDMETHOD
 36386    48   277     5    48   844     0    2003  STARTMETHOD
 36387    48   279     5    48   844     0      10  public
 36388    48   279    12    48   844     0     111  IntBuffer
 36389    48   279    22    48   844     0     111  put
 36390    48   279    25    48   844     0      59  (
 36391    48   279    26    48   844     0     111  IntBuffer
 36392    48   279    36    48   844     0     111  src
 36393    48   279    39    48   844     0      60  )
 36394    48   279    41    48   844     0      63  {
 36395    48   281     9    48   844     0      31  if
 36396    48   281    12    48   844     0      59  (
 36397    48   281    13    48   844     0     111  src
 36398    48   281    17    48   844     0      16  instanceof
 36399    48   281    28    48   844     0     111  DirectIntBufferU
 36400    48   281    44    48   844     0      60  )
 36401    48   281    46    48   844     0      63  {
 36402    48   282    13    48   844     0      31  if
 36403    48   282    16    48   844     0      59  (
 36404    48   282    17    48   844     0     111  src
 36405    48   282    21    48   844     0      68  ==
 36406    48   282    24    48   844     0      44  this
 36407    48   282    28    48   844     0      60  )
 36408    48   283    17    48   844     0      20  throw
 36409    48   283    23    48   844     0      15  new
 36410    48   283    27    48   844     0     111  IllegalArgumentException
 36411    48   283    51    48   844     0      59  (
 36412    48   283    52    48   844     0      60  )
 36413    48   283    53    48   844     0     102  ;
 36414    48   284    13    48   844     0     111  DirectIntBufferU
 36415    48   284    30    48   844     0     111  sb
 36416    48   284    33    48   844     0      67  =
 36417    48   284    35    48   844     0      59  (
 36418    48   284    36    48   844     0     111  DirectIntBufferU
 36419    48   284    52    48   844     0      60  )
 36420    48   284    53    48   844     0     111  src
 36421    48   284    56    48   844     0     102  ;
 36422    48   286    13    48   844     1      36  int
 36423    48   286    17    48   844     1     111  spos
 36424    48   286    22    48   844     1      67  =
 36425    48   286    24    48   844     1     111  sb.position
 36426    48   286    35    48   844     1      59  (
 36427    48   286    36    48   844     1      60  )
 36428    48   286    37    48   844     1     102  ;
 36429    48   287    13    48   844     1      36  int
 36430    48   287    17    48   844     1     111  slim
 36431    48   287    22    48   844     1      67  =
 36432    48   287    24    48   844     1     111  sb.limit
 36433    48   287    32    48   844     1      59  (
 36434    48   287    33    48   844     1      60  )
 36435    48   287    34    48   844     1     102  ;
 36436    48   288    13    48   844     0     111  assert
 36437    48   288    20    48   844     0      59  (
 36438    48   288    21    48   844     0     111  spos
 36439    48   288    26    48   844     0      92  <=
 36440    48   288    29    48   844     0     111  slim
 36441    48   288    33    48   844     0      60  )
 36442    48   288    34    48   844     0     102  ;
 36443    48   289    13    48   844     0      36  int
 36444    48   289    17    48   844     0     111  srem
 36445    48   289    22    48   844     0      67  =
 36446    48   289    24    48   844     0      59  (
 36447    48   289    25    48   844     0     111  spos
 36448    48   289    30    48   844     0      92  <=
 36449    48   289    33    48   844     0     111  slim
 36450    48   289    38    48   844     0      58  ?
 36451    48   289    40    48   844     0     111  slim
 36452    48   289    45    48   844     0      77  -
 36453    48   289    47    48   844     0     111  spos
 36454    48   289    52    48   844     0      65  :
 36455    48   289    54    48   844     0     112  0
 36456    48   289    55    48   844     0      60  )
 36457    48   289    56    48   844     0     102  ;
 36458    48   291    13    48   844     1      36  int
 36459    48   291    17    48   844     1     111  pos
 36460    48   291    21    48   844     1      67  =
 36461    48   291    23    48   844     1     111  position
 36462    48   291    31    48   844     1      59  (
 36463    48   291    32    48   844     1      60  )
 36464    48   291    33    48   844     1     102  ;
 36465    48   292    13    48   844     1      36  int
 36466    48   292    17    48   844     1     111  lim
 36467    48   292    21    48   844     1      67  =
 36468    48   292    23    48   844     1     111  limit
 36469    48   292    28    48   844     1      59  (
 36470    48   292    29    48   844     1      60  )
 36471    48   292    30    48   844     1     102  ;
 36472    48   293    13    48   844     0     111  assert
 36473    48   293    20    48   844     0      59  (
 36474    48   293    21    48   844     0     111  pos
 36475    48   293    25    48   844     0      92  <=
 36476    48   293    28    48   844     0     111  lim
 36477    48   293    31    48   844     0      60  )
 36478    48   293    32    48   844     0     102  ;
 36479    48   294    13    48   844     0      36  int
 36480    48   294    17    48   844     0     111  rem
 36481    48   294    21    48   844     0      67  =
 36482    48   294    23    48   844     0      59  (
 36483    48   294    24    48   844     0     111  pos
 36484    48   294    28    48   844     0      92  <=
 36485    48   294    31    48   844     0     111  lim
 36486    48   294    35    48   844     0      58  ?
 36487    48   294    37    48   844     0     111  lim
 36488    48   294    41    48   844     0      77  -
 36489    48   294    43    48   844     0     111  pos
 36490    48   294    47    48   844     0      65  :
 36491    48   294    49    48   844     0     112  0
 36492    48   294    50    48   844     0      60  )
 36493    48   294    51    48   844     0     102  ;
 36494    48   296    13    48   844     0      31  if
 36495    48   296    16    48   844     0      59  (
 36496    48   296    17    48   844     0     111  srem
 36497    48   296    22    48   844     0      89  >
 36498    48   296    24    48   844     0     111  rem
 36499    48   296    27    48   844     0      60  )
 36500    48   297    17    48   844     0      20  throw
 36501    48   297    23    48   844     0      15  new
 36502    48   297    27    48   844     0     111  BufferOverflowException
 36503    48   297    50    48   844     0      59  (
 36504    48   297    51    48   844     0      60  )
 36505    48   297    52    48   844     0     102  ;
 36506    48   298    13    48   844     0     111  unsafe.copyMemory
 36507    48   298    30    48   844     0      59  (
 36508    48   298    31    48   844     0     111  sb.ix
 36509    48   298    36    48   844     0      59  (
 36510    48   298    37    48   844     0     111  spos
 36511    48   298    41    48   844     0      60  )
 36512    48   298    42    48   844     0      66  ,
 36513    48   298    44    48   844     0     111  ix
 36514    48   298    46    48   844     0      59  (
 36515    48   298    47    48   844     0     111  pos
 36516    48   298    50    48   844     0      60  )
 36517    48   298    51    48   844     0      66  ,
 36518    48   298    53    48   844     0     111  srem
 36519    48   298    58    48   844     0      90  <<
 36520    48   298    61    48   844     0     112  2
 36521    48   298    62    48   844     0      60  )
 36522    48   298    63    48   844     0     102  ;
 36523    48   299    13    48   844     1     111  sb.position
 36524    48   299    24    48   844     1      59  (
 36525    48   299    25    48   844     1     111  spos
 36526    48   299    30    48   844     1      74  +
 36527    48   299    32    48   844     1     111  srem
 36528    48   299    36    48   844     1      60  )
 36529    48   299    37    48   844     1     102  ;
 36530    48   300    13    48   844     1     111  position
 36531    48   300    21    48   844     1      59  (
 36532    48   300    22    48   844     1     111  pos
 36533    48   300    26    48   844     1      74  +
 36534    48   300    28    48   844     1     111  srem
 36535    48   300    32    48   844     1      60  )
 36536    48   300    33    48   844     1     102  ;
 36537    48   301     9    48   844     0      64  }
 36538    48   301    11    48   844     0      48  else
 36539    48   301    16    48   844     0      31  if
 36540    48   301    19    48   844     0      59  (
 36541    48   301    20    48   844     0     111  src.hb
 36542    48   301    27    48   844     0      71  !=
 36543    48   301    30    48   844     0      21  null
 36544    48   301    34    48   844     0      60  )
 36545    48   301    36    48   844     0      63  {
 36546    48   303    13    48   844     1      36  int
 36547    48   303    17    48   844     1     111  spos
 36548    48   303    22    48   844     1      67  =
 36549    48   303    24    48   844     1     111  src.position
 36550    48   303    36    48   844     1      59  (
 36551    48   303    37    48   844     1      60  )
 36552    48   303    38    48   844     1     102  ;
 36553    48   304    13    48   844     1      36  int
 36554    48   304    17    48   844     1     111  slim
 36555    48   304    22    48   844     1      67  =
 36556    48   304    24    48   844     1     111  src.limit
 36557    48   304    33    48   844     1      59  (
 36558    48   304    34    48   844     1      60  )
 36559    48   304    35    48   844     1     102  ;
 36560    48   305    13    48   844     0     111  assert
 36561    48   305    20    48   844     0      59  (
 36562    48   305    21    48   844     0     111  spos
 36563    48   305    26    48   844     0      92  <=
 36564    48   305    29    48   844     0     111  slim
 36565    48   305    33    48   844     0      60  )
 36566    48   305    34    48   844     0     102  ;
 36567    48   306    13    48   844     0      36  int
 36568    48   306    17    48   844     0     111  srem
 36569    48   306    22    48   844     0      67  =
 36570    48   306    24    48   844     0      59  (
 36571    48   306    25    48   844     0     111  spos
 36572    48   306    30    48   844     0      92  <=
 36573    48   306    33    48   844     0     111  slim
 36574    48   306    38    48   844     0      58  ?
 36575    48   306    40    48   844     0     111  slim
 36576    48   306    45    48   844     0      77  -
 36577    48   306    47    48   844     0     111  spos
 36578    48   306    52    48   844     0      65  :
 36579    48   306    54    48   844     0     112  0
 36580    48   306    55    48   844     0      60  )
 36581    48   306    56    48   844     0     102  ;
 36582    48   308    13    48   844     0     111  put
 36583    48   308    16    48   844     0      59  (
 36584    48   308    17    48   844     0     111  src.hb
 36585    48   308    23    48   844     0      66  ,
 36586    48   308    25    48   844     0     111  src.offset
 36587    48   308    36    48   844     0      74  +
 36588    48   308    38    48   844     0     111  spos
 36589    48   308    42    48   844     0      66  ,
 36590    48   308    44    48   844     0     111  srem
 36591    48   308    48    48   844     0      60  )
 36592    48   308    49    48   844     0     102  ;
 36593    48   309    13    48   844     0     111  src.position
 36594    48   309    25    48   844     0      59  (
 36595    48   309    26    48   844     0     111  spos
 36596    48   309    31    48   844     0      74  +
 36597    48   309    33    48   844     0     111  srem
 36598    48   309    37    48   844     0      60  )
 36599    48   309    38    48   844     0     102  ;
 36600    48   311     9    48   844     0      64  }
 36601    48   311    11    48   844     0      48  else
 36602    48   311    16    48   844     0      63  {
 36603    48   312    13    48   844     0     111  super.put
 36604    48   312    22    48   844     0      59  (
 36605    48   312    23    48   844     0     111  src
 36606    48   312    26    48   844     0      60  )
 36607    48   312    27    48   844     0     102  ;
 36608    48   313     9    48   844     0      64  }
 36609    48   314     9    48   844     0      19  return
 36610    48   314    16    48   844     0      44  this
 36611    48   314    20    48   844     0     102  ;
 36612    48   318     5    48   844     0      64  }
 36613    48   318     5    48   844     0    2004  ENDMETHOD
 36614    48   318     5    48   845     0    2005  STARTMETHOD
 36615    48   320     5    48   845     0      10  public
 36616    48   320    12    48   845     0     111  IntBuffer
 36617    48   320    22    48   845     0     111  put
 36618    48   320    25    48   845     0      59  (
 36619    48   320    26    48   845     0      36  int
 36620    48   320    29    48   845     0      61  [
 36621    48   320    30    48   845     0      62  ]
 36622    48   320    32    48   845     0     111  src
 36623    48   320    35    48   845     0      66  ,
 36624    48   320    37    48   845     0      36  int
 36625    48   320    41    48   845     0     111  offset
 36626    48   320    47    48   845     0      66  ,
 36627    48   320    49    48   845     0      36  int
 36628    48   320    53    48   845     0     111  length
 36629    48   320    59    48   845     0      60  )
 36630    48   320    61    48   845     0      63  {
 36631    48   322     9    48   845     0      31  if
 36632    48   322    12    48   845     0      59  (
 36633    48   322    13    48   845     0      59  (
 36634    48   322    14    48   845     0     111  length
 36635    48   322    21    48   845     0      90  <<
 36636    48   322    24    48   845     0     112  2
 36637    48   322    25    48   845     0      60  )
 36638    48   322    27    48   845     0      89  >
 36639    48   322    29    48   845     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 36640    48   322    63    48   845     0      60  )
 36641    48   322    65    48   845     0      63  {
 36642    48   323    13    48   845     0     111  checkBounds
 36643    48   323    24    48   845     0      59  (
 36644    48   323    25    48   845     0     111  offset
 36645    48   323    31    48   845     0      66  ,
 36646    48   323    33    48   845     0     111  length
 36647    48   323    39    48   845     0      66  ,
 36648    48   323    41    48   845     0     111  src.length
 36649    48   323    51    48   845     0      60  )
 36650    48   323    52    48   845     0     102  ;
 36651    48   324    13    48   845     1      36  int
 36652    48   324    17    48   845     1     111  pos
 36653    48   324    21    48   845     1      67  =
 36654    48   324    23    48   845     1     111  position
 36655    48   324    31    48   845     1      59  (
 36656    48   324    32    48   845     1      60  )
 36657    48   324    33    48   845     1     102  ;
 36658    48   325    13    48   845     1      36  int
 36659    48   325    17    48   845     1     111  lim
 36660    48   325    21    48   845     1      67  =
 36661    48   325    23    48   845     1     111  limit
 36662    48   325    28    48   845     1      59  (
 36663    48   325    29    48   845     1      60  )
 36664    48   325    30    48   845     1     102  ;
 36665    48   326    13    48   845     0     111  assert
 36666    48   326    20    48   845     0      59  (
 36667    48   326    21    48   845     0     111  pos
 36668    48   326    25    48   845     0      92  <=
 36669    48   326    28    48   845     0     111  lim
 36670    48   326    31    48   845     0      60  )
 36671    48   326    32    48   845     0     102  ;
 36672    48   327    13    48   845     0      36  int
 36673    48   327    17    48   845     0     111  rem
 36674    48   327    21    48   845     0      67  =
 36675    48   327    23    48   845     0      59  (
 36676    48   327    24    48   845     0     111  pos
 36677    48   327    28    48   845     0      92  <=
 36678    48   327    31    48   845     0     111  lim
 36679    48   327    35    48   845     0      58  ?
 36680    48   327    37    48   845     0     111  lim
 36681    48   327    41    48   845     0      77  -
 36682    48   327    43    48   845     0     111  pos
 36683    48   327    47    48   845     0      65  :
 36684    48   327    49    48   845     0     112  0
 36685    48   327    50    48   845     0      60  )
 36686    48   327    51    48   845     0     102  ;
 36687    48   328    13    48   845     0      31  if
 36688    48   328    16    48   845     0      59  (
 36689    48   328    17    48   845     0     111  length
 36690    48   328    24    48   845     0      89  >
 36691    48   328    26    48   845     0     111  rem
 36692    48   328    29    48   845     0      60  )
 36693    48   329    17    48   845     0      20  throw
 36694    48   329    23    48   845     0      15  new
 36695    48   329    27    48   845     0     111  BufferOverflowException
 36696    48   329    50    48   845     0      59  (
 36697    48   329    51    48   845     0      60  )
 36698    48   329    52    48   845     0     102  ;
 36699    48   331    13    48   845     0      31  if
 36700    48   331    16    48   845     0      59  (
 36701    48   331    17    48   845     0     111  order
 36702    48   331    22    48   845     0      59  (
 36703    48   331    23    48   845     0      60  )
 36704    48   331    25    48   845     0      71  !=
 36705    48   331    28    48   845     0     111  ByteOrder.nativeOrder
 36706    48   331    49    48   845     0      59  (
 36707    48   331    50    48   845     0      60  )
 36708    48   331    51    48   845     0      60  )
 36709    48   332    17    48   845     0     111  Bits.copyFromIntArray
 36710    48   332    38    48   845     0      59  (
 36711    48   332    39    48   845     0     111  src
 36712    48   332    42    48   845     0      66  ,
 36713    48   332    44    48   845     0     111  offset
 36714    48   332    51    48   845     0      90  <<
 36715    48   332    54    48   845     0     112  2
 36716    48   332    55    48   845     0      66  ,
 36717    48   333    45    48   845     0     111  ix
 36718    48   333    47    48   845     0      59  (
 36719    48   333    48    48   845     0     111  pos
 36720    48   333    51    48   845     0      60  )
 36721    48   333    52    48   845     0      66  ,
 36722    48   333    54    48   845     0     111  length
 36723    48   333    61    48   845     0      90  <<
 36724    48   333    64    48   845     0     112  2
 36725    48   333    65    48   845     0      60  )
 36726    48   333    66    48   845     0     102  ;
 36727    48   334    13    48   845     0      48  else
 36728    48   335    17    48   845     0     111  Bits.copyFromByteArray
 36729    48   335    39    48   845     0      59  (
 36730    48   335    40    48   845     0     111  src
 36731    48   335    43    48   845     0      66  ,
 36732    48   335    45    48   845     0     111  offset
 36733    48   335    52    48   845     0      90  <<
 36734    48   335    55    48   845     0     112  2
 36735    48   335    56    48   845     0      66  ,
 36736    48   336    40    48   845     0     111  ix
 36737    48   336    42    48   845     0      59  (
 36738    48   336    43    48   845     0     111  pos
 36739    48   336    46    48   845     0      60  )
 36740    48   336    47    48   845     0      66  ,
 36741    48   336    49    48   845     0     111  length
 36742    48   336    56    48   845     0      90  <<
 36743    48   336    59    48   845     0     112  2
 36744    48   336    60    48   845     0      60  )
 36745    48   336    61    48   845     0     102  ;
 36746    48   337    13    48   845     0     111  position
 36747    48   337    21    48   845     0      59  (
 36748    48   337    22    48   845     0     111  pos
 36749    48   337    26    48   845     0      74  +
 36750    48   337    28    48   845     0     111  length
 36751    48   337    34    48   845     0      60  )
 36752    48   337    35    48   845     0     102  ;
 36753    48   338     9    48   845     0      64  }
 36754    48   338    11    48   845     0      48  else
 36755    48   338    16    48   845     0      63  {
 36756    48   339    13    48   845     0     111  super.put
 36757    48   339    22    48   845     0      59  (
 36758    48   339    23    48   845     0     111  src
 36759    48   339    26    48   845     0      66  ,
 36760    48   339    28    48   845     0     111  offset
 36761    48   339    34    48   845     0      66  ,
 36762    48   339    36    48   845     0     111  length
 36763    48   339    42    48   845     0      60  )
 36764    48   339    43    48   845     0     102  ;
 36765    48   340     9    48   845     0      64  }
 36766    48   341     9    48   845     0      19  return
 36767    48   341    16    48   845     0      44  this
 36768    48   341    20    48   845     0     102  ;
 36769    48   345     5    48   845     0      64  }
 36770    48   345     5    48   845     0    2006  ENDMETHOD
 36771    48   345     5    48   846     0    2007  STARTMETHOD
 36772    48   347     5    48   846     0      10  public
 36773    48   347    12    48   846     0     111  IntBuffer
 36774    48   347    22    48   846     0     111  compact
 36775    48   347    29    48   846     0      59  (
 36776    48   347    30    48   846     0      60  )
 36777    48   347    32    48   846     0      63  {
 36778    48   349     9    48   846     1      36  int
 36779    48   349    13    48   846     1     111  pos
 36780    48   349    17    48   846     1      67  =
 36781    48   349    19    48   846     1     111  position
 36782    48   349    27    48   846     1      59  (
 36783    48   349    28    48   846     1      60  )
 36784    48   349    29    48   846     1     102  ;
 36785    48   350     9    48   846     1      36  int
 36786    48   350    13    48   846     1     111  lim
 36787    48   350    17    48   846     1      67  =
 36788    48   350    19    48   846     1     111  limit
 36789    48   350    24    48   846     1      59  (
 36790    48   350    25    48   846     1      60  )
 36791    48   350    26    48   846     1     102  ;
 36792    48   351     9    48   846     0     111  assert
 36793    48   351    16    48   846     0      59  (
 36794    48   351    17    48   846     0     111  pos
 36795    48   351    21    48   846     0      92  <=
 36796    48   351    24    48   846     0     111  lim
 36797    48   351    27    48   846     0      60  )
 36798    48   351    28    48   846     0     102  ;
 36799    48   352     9    48   846     0      36  int
 36800    48   352    13    48   846     0     111  rem
 36801    48   352    17    48   846     0      67  =
 36802    48   352    19    48   846     0      59  (
 36803    48   352    20    48   846     0     111  pos
 36804    48   352    24    48   846     0      92  <=
 36805    48   352    27    48   846     0     111  lim
 36806    48   352    31    48   846     0      58  ?
 36807    48   352    33    48   846     0     111  lim
 36808    48   352    37    48   846     0      77  -
 36809    48   352    39    48   846     0     111  pos
 36810    48   352    43    48   846     0      65  :
 36811    48   352    45    48   846     0     112  0
 36812    48   352    46    48   846     0      60  )
 36813    48   352    47    48   846     0     102  ;
 36814    48   354     9    48   846     0     111  unsafe.copyMemory
 36815    48   354    26    48   846     0      59  (
 36816    48   354    27    48   846     0     111  ix
 36817    48   354    29    48   846     0      59  (
 36818    48   354    30    48   846     0     111  pos
 36819    48   354    33    48   846     0      60  )
 36820    48   354    34    48   846     0      66  ,
 36821    48   354    36    48   846     0     111  ix
 36822    48   354    38    48   846     0      59  (
 36823    48   354    39    48   846     0     112  0
 36824    48   354    40    48   846     0      60  )
 36825    48   354    41    48   846     0      66  ,
 36826    48   354    43    48   846     0     111  rem
 36827    48   354    47    48   846     0      90  <<
 36828    48   354    50    48   846     0     112  2
 36829    48   354    51    48   846     0      60  )
 36830    48   354    52    48   846     0     102  ;
 36831    48   355     9    48   846     0     111  position
 36832    48   355    17    48   846     0      59  (
 36833    48   355    18    48   846     0     111  rem
 36834    48   355    21    48   846     0      60  )
 36835    48   355    22    48   846     0     102  ;
 36836    48   356     9    48   846     0     111  limit
 36837    48   356    14    48   846     0      59  (
 36838    48   356    15    48   846     0     111  capacity
 36839    48   356    23    48   846     0      59  (
 36840    48   356    24    48   846     0      60  )
 36841    48   356    25    48   846     0      60  )
 36842    48   356    26    48   846     0     102  ;
 36843    48   357     9    48   846     0     111  clearMark
 36844    48   357    18    48   846     0      59  (
 36845    48   357    19    48   846     0      60  )
 36846    48   357    20    48   846     0     102  ;
 36847    48   358     9    48   846     0      19  return
 36848    48   358    16    48   846     0      44  this
 36849    48   358    20    48   846     1     102  ;
 36850    48   362     5    48   846     1      64  }
 36851    48   362     5    48   846     0    2008  ENDMETHOD
 36852    48   362     5    48   847     0    2009  STARTMETHOD
 36853    48   364     5    48   847     0      10  public
 36854    48   364    12    48   847     0      39  boolean
 36855    48   364    20    48   847     0     111  isDirect
 36856    48   364    28    48   847     0      59  (
 36857    48   364    29    48   847     0      60  )
 36858    48   364    31    48   847     0      63  {
 36859    48   365     9    48   847     0      19  return
 36860    48   365    16    48   847     0      52  true
 36861    48   365    20    48   847     1     102  ;
 36862    48   366     5    48   847     1      64  }
 36863    48   366     5    48   847     0    2010  ENDMETHOD
 36864    48   366     5    48   848     0    2011  STARTMETHOD
 36865    48   368     5    48   848     0      10  public
 36866    48   368    12    48   848     0      39  boolean
 36867    48   368    20    48   848     0     111  isReadOnly
 36868    48   368    30    48   848     0      59  (
 36869    48   368    31    48   848     0      60  )
 36870    48   368    33    48   848     0      63  {
 36871    48   369     9    48   848     0      19  return
 36872    48   369    16    48   848     0      43  false
 36873    48   369    21    48   848     1     102  ;
 36874    48   370     5    48   848     1      64  }
 36875    48   370     5    48   848     0    2012  ENDMETHOD
 36876    48   370     5    48   849     0    2013  STARTMETHOD
 36877    48   416     5    48   849     0      10  public
 36878    48   416    12    48   849     0     111  ByteOrder
 36879    48   416    22    48   849     0     111  order
 36880    48   416    27    48   849     0      59  (
 36881    48   416    28    48   849     0      60  )
 36882    48   416    30    48   849     0      63  {
 36883    48   422     9    48   849     0      19  return
 36884    48   422    16    48   849     0      59  (
 36885    48   422    17    48   849     0      59  (
 36886    48   422    18    48   849     0     111  ByteOrder.nativeOrder
 36887    48   422    39    48   849     0      59  (
 36888    48   422    40    48   849     0      60  )
 36889    48   422    42    48   849     0      71  !=
 36890    48   422    45    48   849     0     111  ByteOrder.BIG_ENDIAN
 36891    48   422    65    48   849     0      60  )
 36892    48   423    17    48   849     0      58  ?
 36893    48   423    19    48   849     0     111  ByteOrder.LITTLE_ENDIAN
 36894    48   423    43    48   849     0      65  :
 36895    48   423    45    48   849     0     111  ByteOrder.BIG_ENDIAN
 36896    48   423    65    48   849     0      60  )
 36897    48   423    66    48   849     0     102  ;
 36898    48   425     5    48   849     0      64  }
 36899    48   425     5    48   849     0    2014  ENDMETHOD
 36900    48   452     1    48    -1     0      64  }
 36901    48   452     1    48    -1     1    2015  ENDCLASS
 36902    48   452     1    -1    -1     1    2016  ENDFILE C:\javasrc\java\nio\DirectIntBufferU.java
 36903    49     1     1    -1    -1     1    2017  STARTFILE C:\javasrc\java\nio\DirectLongBufferRS.java
 36904    49    28     1    -1    -1     0       5  package
 36905    49    28     9    -1    -1     0     111  java.nio
 36906    49    28    17    -1    -1     0     102  ;
 36907    49    30     1    -1    -1     1      49  import
 36908    49    30     8    -1    -1     1     111  sun.misc.Cleaner
 36909    49    30    24    -1    -1     1     102  ;
 36910    49    31     1    -1    -1     1      49  import
 36911    49    31     8    -1    -1     1     111  sun.misc.Unsafe
 36912    49    31    23    -1    -1     1     102  ;
 36913    49    32     1    -1    -1     1      49  import
 36914    49    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 36915    49    32    31    -1    -1     1     102  ;
 36916    49    33     1    -1    -1     1      49  import
 36917    49    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 36918    49    33    34    -1    -1     1     102  ;
 36919    49    36     1    49    -1     0    2018  STARTCLASS
 36920    49    36     1    49    -1     0      24  class
 36921    49    36     7    49    -1     0     111  DirectLongBufferRS
 36922    49    40     5    49    -1     0      38  extends
 36923    49    40    13    49    -1     0     111  DirectLongBufferS
 36924    49    42     5    49    -1     0      17  implements
 36925    49    42    16    49    -1     0     111  DirectBuffer
 36926    49    43     1    49    -1     0      63  {
 36927    49    43     1    49   850     0    2019  STARTMETHOD
 36928    49   164     5    49   850     0     111  DirectLongBufferRS
 36929    49   164    23    49   850     0      59  (
 36930    49   164    24    49   850     0     111  DirectBuffer
 36931    49   164    37    49   850     0     111  db
 36932    49   164    39    49   850     0      66  ,
 36933    49   165    32    49   850     0      36  int
 36934    49   165    36    49   850     0     111  mark
 36935    49   165    40    49   850     0      66  ,
 36936    49   165    42    49   850     0      36  int
 36937    49   165    46    49   850     0     111  pos
 36938    49   165    49    49   850     0      66  ,
 36939    49   165    51    49   850     0      36  int
 36940    49   165    55    49   850     0     111  lim
 36941    49   165    58    49   850     0      66  ,
 36942    49   165    60    49   850     0      36  int
 36943    49   165    64    49   850     0     111  cap
 36944    49   165    67    49   850     0      66  ,
 36945    49   166    32    49   850     0      36  int
 36946    49   166    36    49   850     0     111  off
 36947    49   166    39    49   850     0      60  )
 36948    49   167     5    49   850     0      63  {
 36949    49   176     9    49   850     0      27  super
 36950    49   176    14    49   850     0      59  (
 36951    49   176    15    49   850     0     111  db
 36952    49   176    17    49   850     0      66  ,
 36953    49   176    19    49   850     0     111  mark
 36954    49   176    23    49   850     0      66  ,
 36955    49   176    25    49   850     0     111  pos
 36956    49   176    28    49   850     0      66  ,
 36957    49   176    30    49   850     0     111  lim
 36958    49   176    33    49   850     0      66  ,
 36959    49   176    35    49   850     0     111  cap
 36960    49   176    38    49   850     0      66  ,
 36961    49   176    40    49   850     0     111  off
 36962    49   176    43    49   850     0      60  )
 36963    49   176    44    49   850     0     102  ;
 36964    49   178     5    49   850     0      64  }
 36965    49   178     5    49   850     0    2020  ENDMETHOD
 36966    49   178     5    49   851     0    2021  STARTMETHOD
 36967    49   180     5    49   851     0      10  public
 36968    49   180    12    49   851     0     111  LongBuffer
 36969    49   180    23    49   851     0     111  slice
 36970    49   180    28    49   851     0      59  (
 36971    49   180    29    49   851     0      60  )
 36972    49   180    31    49   851     0      63  {
 36973    49   181     9    49   851     1      36  int
 36974    49   181    13    49   851     1     111  pos
 36975    49   181    17    49   851     1      67  =
 36976    49   181    19    49   851     1     111  this.position
 36977    49   181    32    49   851     1      59  (
 36978    49   181    33    49   851     1      60  )
 36979    49   181    34    49   851     1     102  ;
 36980    49   182     9    49   851     1      36  int
 36981    49   182    13    49   851     1     111  lim
 36982    49   182    17    49   851     1      67  =
 36983    49   182    19    49   851     1     111  this.limit
 36984    49   182    29    49   851     1      59  (
 36985    49   182    30    49   851     1      60  )
 36986    49   182    31    49   851     1     102  ;
 36987    49   183     9    49   851     0     111  assert
 36988    49   183    16    49   851     0      59  (
 36989    49   183    17    49   851     0     111  pos
 36990    49   183    21    49   851     0      92  <=
 36991    49   183    24    49   851     0     111  lim
 36992    49   183    27    49   851     0      60  )
 36993    49   183    28    49   851     0     102  ;
 36994    49   184     9    49   851     0      36  int
 36995    49   184    13    49   851     0     111  rem
 36996    49   184    17    49   851     0      67  =
 36997    49   184    19    49   851     0      59  (
 36998    49   184    20    49   851     0     111  pos
 36999    49   184    24    49   851     0      92  <=
 37000    49   184    27    49   851     0     111  lim
 37001    49   184    31    49   851     0      58  ?
 37002    49   184    33    49   851     0     111  lim
 37003    49   184    37    49   851     0      77  -
 37004    49   184    39    49   851     0     111  pos
 37005    49   184    43    49   851     0      65  :
 37006    49   184    45    49   851     0     112  0
 37007    49   184    46    49   851     0      60  )
 37008    49   184    47    49   851     0     102  ;
 37009    49   185     9    49   851     0      36  int
 37010    49   185    13    49   851     0     111  off
 37011    49   185    17    49   851     0      67  =
 37012    49   185    19    49   851     0      59  (
 37013    49   185    20    49   851     0     111  pos
 37014    49   185    24    49   851     0      90  <<
 37015    49   185    27    49   851     0     112  3
 37016    49   185    28    49   851     0      60  )
 37017    49   185    29    49   851     0     102  ;
 37018    49   186     9    49   851     0     111  assert
 37019    49   186    16    49   851     0      59  (
 37020    49   186    17    49   851     0     111  off
 37021    49   186    21    49   851     0      88  >=
 37022    49   186    24    49   851     0     112  0
 37023    49   186    25    49   851     0      60  )
 37024    49   186    26    49   851     0     102  ;
 37025    49   187     9    49   851     0      19  return
 37026    49   187    16    49   851     0      15  new
 37027    49   187    20    49   851     0     111  DirectLongBufferRS
 37028    49   187    38    49   851     0      59  (
 37029    49   187    39    49   851     0      44  this
 37030    49   187    43    49   851     0      66  ,
 37031    49   187    45    49   851     0      77  -
 37032    49   187    46    49   851     0     112  1
 37033    49   187    47    49   851     0      66  ,
 37034    49   187    49    49   851     0     112  0
 37035    49   187    50    49   851     0      66  ,
 37036    49   187    52    49   851     0     111  rem
 37037    49   187    55    49   851     0      66  ,
 37038    49   187    57    49   851     0     111  rem
 37039    49   187    60    49   851     0      66  ,
 37040    49   187    62    49   851     0     111  off
 37041    49   187    65    49   851     0      60  )
 37042    49   187    66    49   851     0     102  ;
 37043    49   188     5    49   851     0      64  }
 37044    49   188     5    49   851     0    2022  ENDMETHOD
 37045    49   188     5    49   852     0    2023  STARTMETHOD
 37046    49   190     5    49   852     0      10  public
 37047    49   190    12    49   852     0     111  LongBuffer
 37048    49   190    23    49   852     0     111  duplicate
 37049    49   190    32    49   852     0      59  (
 37050    49   190    33    49   852     0      60  )
 37051    49   190    35    49   852     0      63  {
 37052    49   191     9    49   852     0      19  return
 37053    49   191    16    49   852     0      15  new
 37054    49   191    20    49   852     0     111  DirectLongBufferRS
 37055    49   191    38    49   852     0      59  (
 37056    49   191    39    49   852     0      44  this
 37057    49   191    43    49   852     0      66  ,
 37058    49   192    47    49   852     1     111  this.markValue
 37059    49   192    61    49   852     1      59  (
 37060    49   192    62    49   852     1      60  )
 37061    49   192    63    49   852     1      66  ,
 37062    49   193    47    49   852     1     111  this.position
 37063    49   193    60    49   852     1      59  (
 37064    49   193    61    49   852     1      60  )
 37065    49   193    62    49   852     1      66  ,
 37066    49   194    47    49   852     1     111  this.limit
 37067    49   194    57    49   852     1      59  (
 37068    49   194    58    49   852     1      60  )
 37069    49   194    59    49   852     1      66  ,
 37070    49   195    47    49   852     1     111  this.capacity
 37071    49   195    60    49   852     1      59  (
 37072    49   195    61    49   852     1      60  )
 37073    49   195    62    49   852     1      66  ,
 37074    49   196    47    49   852     0     112  0
 37075    49   196    48    49   852     0      60  )
 37076    49   196    49    49   852     0     102  ;
 37077    49   197     5    49   852     0      64  }
 37078    49   197     5    49   852     0    2024  ENDMETHOD
 37079    49   197     5    49   853     0    2025  STARTMETHOD
 37080    49   199     5    49   853     0      10  public
 37081    49   199    12    49   853     0     111  LongBuffer
 37082    49   199    23    49   853     0     111  asReadOnlyBuffer
 37083    49   199    39    49   853     0      59  (
 37084    49   199    40    49   853     0      60  )
 37085    49   199    42    49   853     0      63  {
 37086    49   208     9    49   853     0      19  return
 37087    49   208    16    49   853     0     111  duplicate
 37088    49   208    25    49   853     0      59  (
 37089    49   208    26    49   853     0      60  )
 37090    49   208    27    49   853     0     102  ;
 37091    49   210     5    49   853     0      64  }
 37092    49   210     5    49   853     0    2026  ENDMETHOD
 37093    49   210     5    49   854     0    2027  STARTMETHOD
 37094    49   261     5    49   854     0      10  public
 37095    49   261    12    49   854     0     111  LongBuffer
 37096    49   261    23    49   854     0     111  put
 37097    49   261    26    49   854     0      59  (
 37098    49   261    27    49   854     0      53  long
 37099    49   261    32    49   854     0     111  x
 37100    49   261    33    49   854     0      60  )
 37101    49   261    35    49   854     0      63  {
 37102    49   266     9    49   854     0      20  throw
 37103    49   266    15    49   854     0      15  new
 37104    49   266    19    49   854     0     111  ReadOnlyBufferException
 37105    49   266    42    49   854     0      59  (
 37106    49   266    43    49   854     0      60  )
 37107    49   266    44    49   854     0     102  ;
 37108    49   268     5    49   854     0      64  }
 37109    49   268     5    49   854     0    2028  ENDMETHOD
 37110    49   268     5    49   855     0    2029  STARTMETHOD
 37111    49   270     5    49   855     0      10  public
 37112    49   270    12    49   855     0     111  LongBuffer
 37113    49   270    23    49   855     0     111  put
 37114    49   270    26    49   855     0      59  (
 37115    49   270    27    49   855     0      36  int
 37116    49   270    31    49   855     0     111  i
 37117    49   270    32    49   855     0      66  ,
 37118    49   270    34    49   855     0      53  long
 37119    49   270    39    49   855     0     111  x
 37120    49   270    40    49   855     0      60  )
 37121    49   270    42    49   855     0      63  {
 37122    49   275     9    49   855     0      20  throw
 37123    49   275    15    49   855     0      15  new
 37124    49   275    19    49   855     0     111  ReadOnlyBufferException
 37125    49   275    42    49   855     0      59  (
 37126    49   275    43    49   855     0      60  )
 37127    49   275    44    49   855     0     102  ;
 37128    49   277     5    49   855     0      64  }
 37129    49   277     5    49   855     0    2030  ENDMETHOD
 37130    49   277     5    49   856     0    2031  STARTMETHOD
 37131    49   279     5    49   856     0      10  public
 37132    49   279    12    49   856     0     111  LongBuffer
 37133    49   279    23    49   856     0     111  put
 37134    49   279    26    49   856     0      59  (
 37135    49   279    27    49   856     0     111  LongBuffer
 37136    49   279    38    49   856     0     111  src
 37137    49   279    41    49   856     0      60  )
 37138    49   279    43    49   856     0      63  {
 37139    49   316     9    49   856     0      20  throw
 37140    49   316    15    49   856     0      15  new
 37141    49   316    19    49   856     0     111  ReadOnlyBufferException
 37142    49   316    42    49   856     0      59  (
 37143    49   316    43    49   856     0      60  )
 37144    49   316    44    49   856     0     102  ;
 37145    49   318     5    49   856     0      64  }
 37146    49   318     5    49   856     0    2032  ENDMETHOD
 37147    49   318     5    49   857     0    2033  STARTMETHOD
 37148    49   320     5    49   857     0      10  public
 37149    49   320    12    49   857     0     111  LongBuffer
 37150    49   320    23    49   857     0     111  put
 37151    49   320    26    49   857     0      59  (
 37152    49   320    27    49   857     0      53  long
 37153    49   320    31    49   857     0      61  [
 37154    49   320    32    49   857     0      62  ]
 37155    49   320    34    49   857     0     111  src
 37156    49   320    37    49   857     0      66  ,
 37157    49   320    39    49   857     0      36  int
 37158    49   320    43    49   857     0     111  offset
 37159    49   320    49    49   857     0      66  ,
 37160    49   320    51    49   857     0      36  int
 37161    49   320    55    49   857     0     111  length
 37162    49   320    61    49   857     0      60  )
 37163    49   320    63    49   857     0      63  {
 37164    49   343     9    49   857     0      20  throw
 37165    49   343    15    49   857     0      15  new
 37166    49   343    19    49   857     0     111  ReadOnlyBufferException
 37167    49   343    42    49   857     0      59  (
 37168    49   343    43    49   857     0      60  )
 37169    49   343    44    49   857     0     102  ;
 37170    49   345     5    49   857     0      64  }
 37171    49   345     5    49   857     0    2034  ENDMETHOD
 37172    49   345     5    49   858     0    2035  STARTMETHOD
 37173    49   347     5    49   858     0      10  public
 37174    49   347    12    49   858     0     111  LongBuffer
 37175    49   347    23    49   858     0     111  compact
 37176    49   347    30    49   858     0      59  (
 37177    49   347    31    49   858     0      60  )
 37178    49   347    33    49   858     0      63  {
 37179    49   360     9    49   858     0      20  throw
 37180    49   360    15    49   858     0      15  new
 37181    49   360    19    49   858     0     111  ReadOnlyBufferException
 37182    49   360    42    49   858     0      59  (
 37183    49   360    43    49   858     0      60  )
 37184    49   360    44    49   858     1     102  ;
 37185    49   362     5    49   858     1      64  }
 37186    49   362     5    49   858     0    2036  ENDMETHOD
 37187    49   362     5    49   859     0    2037  STARTMETHOD
 37188    49   364     5    49   859     0      10  public
 37189    49   364    12    49   859     0      39  boolean
 37190    49   364    20    49   859     0     111  isDirect
 37191    49   364    28    49   859     0      59  (
 37192    49   364    29    49   859     0      60  )
 37193    49   364    31    49   859     0      63  {
 37194    49   365     9    49   859     0      19  return
 37195    49   365    16    49   859     0      52  true
 37196    49   365    20    49   859     1     102  ;
 37197    49   366     5    49   859     1      64  }
 37198    49   366     5    49   859     0    2038  ENDMETHOD
 37199    49   366     5    49   860     0    2039  STARTMETHOD
 37200    49   368     5    49   860     0      10  public
 37201    49   368    12    49   860     0      39  boolean
 37202    49   368    20    49   860     0     111  isReadOnly
 37203    49   368    30    49   860     0      59  (
 37204    49   368    31    49   860     0      60  )
 37205    49   368    33    49   860     0      63  {
 37206    49   369     9    49   860     0      19  return
 37207    49   369    16    49   860     0      52  true
 37208    49   369    20    49   860     1     102  ;
 37209    49   370     5    49   860     1      64  }
 37210    49   370     5    49   860     0    2040  ENDMETHOD
 37211    49   370     5    49   861     0    2041  STARTMETHOD
 37212    49   416     5    49   861     0      10  public
 37213    49   416    12    49   861     0     111  ByteOrder
 37214    49   416    22    49   861     0     111  order
 37215    49   416    27    49   861     0      59  (
 37216    49   416    28    49   861     0      60  )
 37217    49   416    30    49   861     0      63  {
 37218    49   418     9    49   861     0      19  return
 37219    49   418    16    49   861     0      59  (
 37220    49   418    17    49   861     0      59  (
 37221    49   418    18    49   861     0     111  ByteOrder.nativeOrder
 37222    49   418    39    49   861     0      59  (
 37223    49   418    40    49   861     0      60  )
 37224    49   418    42    49   861     0      68  ==
 37225    49   418    45    49   861     0     111  ByteOrder.BIG_ENDIAN
 37226    49   418    65    49   861     0      60  )
 37227    49   419    17    49   861     0      58  ?
 37228    49   419    19    49   861     0     111  ByteOrder.LITTLE_ENDIAN
 37229    49   419    43    49   861     0      65  :
 37230    49   419    45    49   861     0     111  ByteOrder.BIG_ENDIAN
 37231    49   419    65    49   861     0      60  )
 37232    49   419    66    49   861     0     102  ;
 37233    49   425     5    49   861     0      64  }
 37234    49   425     5    49   861     0    2042  ENDMETHOD
 37235    49   452     1    49    -1     0      64  }
 37236    49   452     1    49    -1     1    2043  ENDCLASS
 37237    49   452     1    -1    -1     1    2044  ENDFILE C:\javasrc\java\nio\DirectLongBufferRS.java
 37238    50     1     1    -1    -1     1    2045  STARTFILE C:\javasrc\java\nio\DirectLongBufferRU.java
 37239    50    28     1    -1    -1     0       5  package
 37240    50    28     9    -1    -1     0     111  java.nio
 37241    50    28    17    -1    -1     0     102  ;
 37242    50    30     1    -1    -1     1      49  import
 37243    50    30     8    -1    -1     1     111  sun.misc.Cleaner
 37244    50    30    24    -1    -1     1     102  ;
 37245    50    31     1    -1    -1     1      49  import
 37246    50    31     8    -1    -1     1     111  sun.misc.Unsafe
 37247    50    31    23    -1    -1     1     102  ;
 37248    50    32     1    -1    -1     1      49  import
 37249    50    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 37250    50    32    31    -1    -1     1     102  ;
 37251    50    33     1    -1    -1     1      49  import
 37252    50    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 37253    50    33    34    -1    -1     1     102  ;
 37254    50    36     1    50    -1     0    2046  STARTCLASS
 37255    50    36     1    50    -1     0      24  class
 37256    50    36     7    50    -1     0     111  DirectLongBufferRU
 37257    50    40     5    50    -1     0      38  extends
 37258    50    40    13    50    -1     0     111  DirectLongBufferU
 37259    50    42     5    50    -1     0      17  implements
 37260    50    42    16    50    -1     0     111  DirectBuffer
 37261    50    43     1    50    -1     0      63  {
 37262    50    43     1    50   862     0    2047  STARTMETHOD
 37263    50   164     5    50   862     0     111  DirectLongBufferRU
 37264    50   164    23    50   862     0      59  (
 37265    50   164    24    50   862     0     111  DirectBuffer
 37266    50   164    37    50   862     0     111  db
 37267    50   164    39    50   862     0      66  ,
 37268    50   165    32    50   862     0      36  int
 37269    50   165    36    50   862     0     111  mark
 37270    50   165    40    50   862     0      66  ,
 37271    50   165    42    50   862     0      36  int
 37272    50   165    46    50   862     0     111  pos
 37273    50   165    49    50   862     0      66  ,
 37274    50   165    51    50   862     0      36  int
 37275    50   165    55    50   862     0     111  lim
 37276    50   165    58    50   862     0      66  ,
 37277    50   165    60    50   862     0      36  int
 37278    50   165    64    50   862     0     111  cap
 37279    50   165    67    50   862     0      66  ,
 37280    50   166    32    50   862     0      36  int
 37281    50   166    36    50   862     0     111  off
 37282    50   166    39    50   862     0      60  )
 37283    50   167     5    50   862     0      63  {
 37284    50   176     9    50   862     0      27  super
 37285    50   176    14    50   862     0      59  (
 37286    50   176    15    50   862     0     111  db
 37287    50   176    17    50   862     0      66  ,
 37288    50   176    19    50   862     0     111  mark
 37289    50   176    23    50   862     0      66  ,
 37290    50   176    25    50   862     0     111  pos
 37291    50   176    28    50   862     0      66  ,
 37292    50   176    30    50   862     0     111  lim
 37293    50   176    33    50   862     0      66  ,
 37294    50   176    35    50   862     0     111  cap
 37295    50   176    38    50   862     0      66  ,
 37296    50   176    40    50   862     0     111  off
 37297    50   176    43    50   862     0      60  )
 37298    50   176    44    50   862     0     102  ;
 37299    50   178     5    50   862     0      64  }
 37300    50   178     5    50   862     0    2048  ENDMETHOD
 37301    50   178     5    50   863     0    2049  STARTMETHOD
 37302    50   180     5    50   863     0      10  public
 37303    50   180    12    50   863     0     111  LongBuffer
 37304    50   180    23    50   863     0     111  slice
 37305    50   180    28    50   863     0      59  (
 37306    50   180    29    50   863     0      60  )
 37307    50   180    31    50   863     0      63  {
 37308    50   181     9    50   863     1      36  int
 37309    50   181    13    50   863     1     111  pos
 37310    50   181    17    50   863     1      67  =
 37311    50   181    19    50   863     1     111  this.position
 37312    50   181    32    50   863     1      59  (
 37313    50   181    33    50   863     1      60  )
 37314    50   181    34    50   863     1     102  ;
 37315    50   182     9    50   863     1      36  int
 37316    50   182    13    50   863     1     111  lim
 37317    50   182    17    50   863     1      67  =
 37318    50   182    19    50   863     1     111  this.limit
 37319    50   182    29    50   863     1      59  (
 37320    50   182    30    50   863     1      60  )
 37321    50   182    31    50   863     1     102  ;
 37322    50   183     9    50   863     0     111  assert
 37323    50   183    16    50   863     0      59  (
 37324    50   183    17    50   863     0     111  pos
 37325    50   183    21    50   863     0      92  <=
 37326    50   183    24    50   863     0     111  lim
 37327    50   183    27    50   863     0      60  )
 37328    50   183    28    50   863     0     102  ;
 37329    50   184     9    50   863     0      36  int
 37330    50   184    13    50   863     0     111  rem
 37331    50   184    17    50   863     0      67  =
 37332    50   184    19    50   863     0      59  (
 37333    50   184    20    50   863     0     111  pos
 37334    50   184    24    50   863     0      92  <=
 37335    50   184    27    50   863     0     111  lim
 37336    50   184    31    50   863     0      58  ?
 37337    50   184    33    50   863     0     111  lim
 37338    50   184    37    50   863     0      77  -
 37339    50   184    39    50   863     0     111  pos
 37340    50   184    43    50   863     0      65  :
 37341    50   184    45    50   863     0     112  0
 37342    50   184    46    50   863     0      60  )
 37343    50   184    47    50   863     0     102  ;
 37344    50   185     9    50   863     0      36  int
 37345    50   185    13    50   863     0     111  off
 37346    50   185    17    50   863     0      67  =
 37347    50   185    19    50   863     0      59  (
 37348    50   185    20    50   863     0     111  pos
 37349    50   185    24    50   863     0      90  <<
 37350    50   185    27    50   863     0     112  3
 37351    50   185    28    50   863     0      60  )
 37352    50   185    29    50   863     0     102  ;
 37353    50   186     9    50   863     0     111  assert
 37354    50   186    16    50   863     0      59  (
 37355    50   186    17    50   863     0     111  off
 37356    50   186    21    50   863     0      88  >=
 37357    50   186    24    50   863     0     112  0
 37358    50   186    25    50   863     0      60  )
 37359    50   186    26    50   863     0     102  ;
 37360    50   187     9    50   863     0      19  return
 37361    50   187    16    50   863     0      15  new
 37362    50   187    20    50   863     0     111  DirectLongBufferRU
 37363    50   187    38    50   863     0      59  (
 37364    50   187    39    50   863     0      44  this
 37365    50   187    43    50   863     0      66  ,
 37366    50   187    45    50   863     0      77  -
 37367    50   187    46    50   863     0     112  1
 37368    50   187    47    50   863     0      66  ,
 37369    50   187    49    50   863     0     112  0
 37370    50   187    50    50   863     0      66  ,
 37371    50   187    52    50   863     0     111  rem
 37372    50   187    55    50   863     0      66  ,
 37373    50   187    57    50   863     0     111  rem
 37374    50   187    60    50   863     0      66  ,
 37375    50   187    62    50   863     0     111  off
 37376    50   187    65    50   863     0      60  )
 37377    50   187    66    50   863     0     102  ;
 37378    50   188     5    50   863     0      64  }
 37379    50   188     5    50   863     0    2050  ENDMETHOD
 37380    50   188     5    50   864     0    2051  STARTMETHOD
 37381    50   190     5    50   864     0      10  public
 37382    50   190    12    50   864     0     111  LongBuffer
 37383    50   190    23    50   864     0     111  duplicate
 37384    50   190    32    50   864     0      59  (
 37385    50   190    33    50   864     0      60  )
 37386    50   190    35    50   864     0      63  {
 37387    50   191     9    50   864     0      19  return
 37388    50   191    16    50   864     0      15  new
 37389    50   191    20    50   864     0     111  DirectLongBufferRU
 37390    50   191    38    50   864     0      59  (
 37391    50   191    39    50   864     0      44  this
 37392    50   191    43    50   864     0      66  ,
 37393    50   192    47    50   864     1     111  this.markValue
 37394    50   192    61    50   864     1      59  (
 37395    50   192    62    50   864     1      60  )
 37396    50   192    63    50   864     1      66  ,
 37397    50   193    47    50   864     1     111  this.position
 37398    50   193    60    50   864     1      59  (
 37399    50   193    61    50   864     1      60  )
 37400    50   193    62    50   864     1      66  ,
 37401    50   194    47    50   864     1     111  this.limit
 37402    50   194    57    50   864     1      59  (
 37403    50   194    58    50   864     1      60  )
 37404    50   194    59    50   864     1      66  ,
 37405    50   195    47    50   864     1     111  this.capacity
 37406    50   195    60    50   864     1      59  (
 37407    50   195    61    50   864     1      60  )
 37408    50   195    62    50   864     1      66  ,
 37409    50   196    47    50   864     0     112  0
 37410    50   196    48    50   864     0      60  )
 37411    50   196    49    50   864     0     102  ;
 37412    50   197     5    50   864     0      64  }
 37413    50   197     5    50   864     0    2052  ENDMETHOD
 37414    50   197     5    50   865     0    2053  STARTMETHOD
 37415    50   199     5    50   865     0      10  public
 37416    50   199    12    50   865     0     111  LongBuffer
 37417    50   199    23    50   865     0     111  asReadOnlyBuffer
 37418    50   199    39    50   865     0      59  (
 37419    50   199    40    50   865     0      60  )
 37420    50   199    42    50   865     0      63  {
 37421    50   208     9    50   865     0      19  return
 37422    50   208    16    50   865     0     111  duplicate
 37423    50   208    25    50   865     0      59  (
 37424    50   208    26    50   865     0      60  )
 37425    50   208    27    50   865     0     102  ;
 37426    50   210     5    50   865     0      64  }
 37427    50   210     5    50   865     0    2054  ENDMETHOD
 37428    50   210     5    50   866     0    2055  STARTMETHOD
 37429    50   261     5    50   866     0      10  public
 37430    50   261    12    50   866     0     111  LongBuffer
 37431    50   261    23    50   866     0     111  put
 37432    50   261    26    50   866     0      59  (
 37433    50   261    27    50   866     0      53  long
 37434    50   261    32    50   866     0     111  x
 37435    50   261    33    50   866     0      60  )
 37436    50   261    35    50   866     0      63  {
 37437    50   266     9    50   866     0      20  throw
 37438    50   266    15    50   866     0      15  new
 37439    50   266    19    50   866     0     111  ReadOnlyBufferException
 37440    50   266    42    50   866     0      59  (
 37441    50   266    43    50   866     0      60  )
 37442    50   266    44    50   866     0     102  ;
 37443    50   268     5    50   866     0      64  }
 37444    50   268     5    50   866     0    2056  ENDMETHOD
 37445    50   268     5    50   867     0    2057  STARTMETHOD
 37446    50   270     5    50   867     0      10  public
 37447    50   270    12    50   867     0     111  LongBuffer
 37448    50   270    23    50   867     0     111  put
 37449    50   270    26    50   867     0      59  (
 37450    50   270    27    50   867     0      36  int
 37451    50   270    31    50   867     0     111  i
 37452    50   270    32    50   867     0      66  ,
 37453    50   270    34    50   867     0      53  long
 37454    50   270    39    50   867     0     111  x
 37455    50   270    40    50   867     0      60  )
 37456    50   270    42    50   867     0      63  {
 37457    50   275     9    50   867     0      20  throw
 37458    50   275    15    50   867     0      15  new
 37459    50   275    19    50   867     0     111  ReadOnlyBufferException
 37460    50   275    42    50   867     0      59  (
 37461    50   275    43    50   867     0      60  )
 37462    50   275    44    50   867     0     102  ;
 37463    50   277     5    50   867     0      64  }
 37464    50   277     5    50   867     0    2058  ENDMETHOD
 37465    50   277     5    50   868     0    2059  STARTMETHOD
 37466    50   279     5    50   868     0      10  public
 37467    50   279    12    50   868     0     111  LongBuffer
 37468    50   279    23    50   868     0     111  put
 37469    50   279    26    50   868     0      59  (
 37470    50   279    27    50   868     0     111  LongBuffer
 37471    50   279    38    50   868     0     111  src
 37472    50   279    41    50   868     0      60  )
 37473    50   279    43    50   868     0      63  {
 37474    50   316     9    50   868     0      20  throw
 37475    50   316    15    50   868     0      15  new
 37476    50   316    19    50   868     0     111  ReadOnlyBufferException
 37477    50   316    42    50   868     0      59  (
 37478    50   316    43    50   868     0      60  )
 37479    50   316    44    50   868     0     102  ;
 37480    50   318     5    50   868     0      64  }
 37481    50   318     5    50   868     0    2060  ENDMETHOD
 37482    50   318     5    50   869     0    2061  STARTMETHOD
 37483    50   320     5    50   869     0      10  public
 37484    50   320    12    50   869     0     111  LongBuffer
 37485    50   320    23    50   869     0     111  put
 37486    50   320    26    50   869     0      59  (
 37487    50   320    27    50   869     0      53  long
 37488    50   320    31    50   869     0      61  [
 37489    50   320    32    50   869     0      62  ]
 37490    50   320    34    50   869     0     111  src
 37491    50   320    37    50   869     0      66  ,
 37492    50   320    39    50   869     0      36  int
 37493    50   320    43    50   869     0     111  offset
 37494    50   320    49    50   869     0      66  ,
 37495    50   320    51    50   869     0      36  int
 37496    50   320    55    50   869     0     111  length
 37497    50   320    61    50   869     0      60  )
 37498    50   320    63    50   869     0      63  {
 37499    50   343     9    50   869     0      20  throw
 37500    50   343    15    50   869     0      15  new
 37501    50   343    19    50   869     0     111  ReadOnlyBufferException
 37502    50   343    42    50   869     0      59  (
 37503    50   343    43    50   869     0      60  )
 37504    50   343    44    50   869     0     102  ;
 37505    50   345     5    50   869     0      64  }
 37506    50   345     5    50   869     0    2062  ENDMETHOD
 37507    50   345     5    50   870     0    2063  STARTMETHOD
 37508    50   347     5    50   870     0      10  public
 37509    50   347    12    50   870     0     111  LongBuffer
 37510    50   347    23    50   870     0     111  compact
 37511    50   347    30    50   870     0      59  (
 37512    50   347    31    50   870     0      60  )
 37513    50   347    33    50   870     0      63  {
 37514    50   360     9    50   870     0      20  throw
 37515    50   360    15    50   870     0      15  new
 37516    50   360    19    50   870     0     111  ReadOnlyBufferException
 37517    50   360    42    50   870     0      59  (
 37518    50   360    43    50   870     0      60  )
 37519    50   360    44    50   870     1     102  ;
 37520    50   362     5    50   870     1      64  }
 37521    50   362     5    50   870     0    2064  ENDMETHOD
 37522    50   362     5    50   871     0    2065  STARTMETHOD
 37523    50   364     5    50   871     0      10  public
 37524    50   364    12    50   871     0      39  boolean
 37525    50   364    20    50   871     0     111  isDirect
 37526    50   364    28    50   871     0      59  (
 37527    50   364    29    50   871     0      60  )
 37528    50   364    31    50   871     0      63  {
 37529    50   365     9    50   871     0      19  return
 37530    50   365    16    50   871     0      52  true
 37531    50   365    20    50   871     1     102  ;
 37532    50   366     5    50   871     1      64  }
 37533    50   366     5    50   871     0    2066  ENDMETHOD
 37534    50   366     5    50   872     0    2067  STARTMETHOD
 37535    50   368     5    50   872     0      10  public
 37536    50   368    12    50   872     0      39  boolean
 37537    50   368    20    50   872     0     111  isReadOnly
 37538    50   368    30    50   872     0      59  (
 37539    50   368    31    50   872     0      60  )
 37540    50   368    33    50   872     0      63  {
 37541    50   369     9    50   872     0      19  return
 37542    50   369    16    50   872     0      52  true
 37543    50   369    20    50   872     1     102  ;
 37544    50   370     5    50   872     1      64  }
 37545    50   370     5    50   872     0    2068  ENDMETHOD
 37546    50   370     5    50   873     0    2069  STARTMETHOD
 37547    50   416     5    50   873     0      10  public
 37548    50   416    12    50   873     0     111  ByteOrder
 37549    50   416    22    50   873     0     111  order
 37550    50   416    27    50   873     0      59  (
 37551    50   416    28    50   873     0      60  )
 37552    50   416    30    50   873     0      63  {
 37553    50   422     9    50   873     0      19  return
 37554    50   422    16    50   873     0      59  (
 37555    50   422    17    50   873     0      59  (
 37556    50   422    18    50   873     0     111  ByteOrder.nativeOrder
 37557    50   422    39    50   873     0      59  (
 37558    50   422    40    50   873     0      60  )
 37559    50   422    42    50   873     0      71  !=
 37560    50   422    45    50   873     0     111  ByteOrder.BIG_ENDIAN
 37561    50   422    65    50   873     0      60  )
 37562    50   423    17    50   873     0      58  ?
 37563    50   423    19    50   873     0     111  ByteOrder.LITTLE_ENDIAN
 37564    50   423    43    50   873     0      65  :
 37565    50   423    45    50   873     0     111  ByteOrder.BIG_ENDIAN
 37566    50   423    65    50   873     0      60  )
 37567    50   423    66    50   873     0     102  ;
 37568    50   425     5    50   873     0      64  }
 37569    50   425     5    50   873     0    2070  ENDMETHOD
 37570    50   452     1    50    -1     0      64  }
 37571    50   452     1    50    -1     1    2071  ENDCLASS
 37572    50   452     1    -1    -1     1    2072  ENDFILE C:\javasrc\java\nio\DirectLongBufferRU.java
 37573    51     1     1    -1    -1     1    2073  STARTFILE C:\javasrc\java\nio\DirectLongBufferS.java
 37574    51    28     1    -1    -1     0       5  package
 37575    51    28     9    -1    -1     0     111  java.nio
 37576    51    28    17    -1    -1     0     102  ;
 37577    51    30     1    -1    -1     1      49  import
 37578    51    30     8    -1    -1     1     111  sun.misc.Cleaner
 37579    51    30    24    -1    -1     1     102  ;
 37580    51    31     1    -1    -1     1      49  import
 37581    51    31     8    -1    -1     1     111  sun.misc.Unsafe
 37582    51    31    23    -1    -1     1     102  ;
 37583    51    32     1    -1    -1     1      49  import
 37584    51    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 37585    51    32    31    -1    -1     1     102  ;
 37586    51    33     1    -1    -1     1      49  import
 37587    51    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 37588    51    33    34    -1    -1     1     102  ;
 37589    51    36     1    51    -1     0    2074  STARTCLASS
 37590    51    36     1    51    -1     0      24  class
 37591    51    36     7    51    -1     0     111  DirectLongBufferS
 37592    51    38     5    51    -1     0      38  extends
 37593    51    38    13    51    -1     0     111  LongBuffer
 37594    51    42     5    51    -1     0      17  implements
 37595    51    42    16    51    -1     0     111  DirectBuffer
 37596    51    43     1    51    -1     0      63  {
 37597    51    48     5    51    -1     0      23  protected
 37598    51    48    15    51    -1     0      45  static
 37599    51    48    22    51    -1     0       6  final
 37600    51    48    28    51    -1     0     111  Unsafe
 37601    51    48    35    51    -1     0     111  unsafe
 37602    51    48    42    51    -1     0      67  =
 37603    51    48    44    51    -1     0     111  Bits.unsafe
 37604    51    48    55    51    -1     0      59  (
 37605    51    48    56    51    -1     0      60  )
 37606    51    48    57    51    -1     0     102  ;
 37607    51    51     5    51    -1     0      23  protected
 37608    51    51    15    51    -1     0      45  static
 37609    51    51    22    51    -1     0       6  final
 37610    51    51    28    51    -1     0      39  boolean
 37611    51    51    36    51    -1     0     111  unaligned
 37612    51    51    46    51    -1     0      67  =
 37613    51    51    48    51    -1     0     111  Bits.unaligned
 37614    51    51    62    51    -1     0      59  (
 37615    51    51    63    51    -1     0      60  )
 37616    51    51    64    51    -1     0     102  ;
 37617    51    59     5    51    -1     0      23  protected
 37618    51    59    15    51    -1     0     111  Object
 37619    51    59    22    51    -1     0     111  viewedBuffer
 37620    51    59    35    51    -1     0      67  =
 37621    51    59    37    51    -1     0      21  null
 37622    51    59    41    51    -1     0     102  ;
 37623    51    59    41    51   874     0    2075  STARTMETHOD
 37624    51    61     5    51   874     0      10  public
 37625    51    61    12    51   874     0     111  Object
 37626    51    61    19    51   874     0     111  viewedBuffer
 37627    51    61    31    51   874     0      59  (
 37628    51    61    32    51   874     0      60  )
 37629    51    61    34    51   874     0      63  {
 37630    51    62     9    51   874     0      19  return
 37631    51    62    16    51   874     0     111  viewedBuffer
 37632    51    62    28    51   874     0     102  ;
 37633    51    63     5    51   874     0      64  }
 37634    51    63     5    51   874     0    2076  ENDMETHOD
 37635    51    63     5    51   875     0    2077  STARTMETHOD
 37636    51   100     5    51   875     0      10  public
 37637    51   100    12    51   875     0     111  Cleaner
 37638    51   100    20    51   875     0     111  cleaner
 37639    51   100    27    51   875     0      59  (
 37640    51   100    28    51   875     0      60  )
 37641    51   100    30    51   875     0      63  {
 37642    51   100    32    51   875     0      19  return
 37643    51   100    39    51   875     0      21  null
 37644    51   100    43    51   875     0     102  ;
 37645    51   100    45    51   875     0      64  }
 37646    51   100    45    51   875     0    2078  ENDMETHOD
 37647    51   100    45    51   876     0    2079  STARTMETHOD
 37648    51   164     5    51   876     0     111  DirectLongBufferS
 37649    51   164    22    51   876     0      59  (
 37650    51   164    23    51   876     0     111  DirectBuffer
 37651    51   164    36    51   876     0     111  db
 37652    51   164    38    51   876     0      66  ,
 37653    51   165    32    51   876     0      36  int
 37654    51   165    36    51   876     0     111  mark
 37655    51   165    40    51   876     0      66  ,
 37656    51   165    42    51   876     0      36  int
 37657    51   165    46    51   876     0     111  pos
 37658    51   165    49    51   876     0      66  ,
 37659    51   165    51    51   876     0      36  int
 37660    51   165    55    51   876     0     111  lim
 37661    51   165    58    51   876     0      66  ,
 37662    51   165    60    51   876     0      36  int
 37663    51   165    64    51   876     0     111  cap
 37664    51   165    67    51   876     0      66  ,
 37665    51   166    32    51   876     0      36  int
 37666    51   166    36    51   876     0     111  off
 37667    51   166    39    51   876     0      60  )
 37668    51   167     5    51   876     0      63  {
 37669    51   169     9    51   876     0      27  super
 37670    51   169    14    51   876     0      59  (
 37671    51   169    15    51   876     0     111  mark
 37672    51   169    19    51   876     0      66  ,
 37673    51   169    21    51   876     0     111  pos
 37674    51   169    24    51   876     0      66  ,
 37675    51   169    26    51   876     0     111  lim
 37676    51   169    29    51   876     0      66  ,
 37677    51   169    31    51   876     0     111  cap
 37678    51   169    34    51   876     0      60  )
 37679    51   169    35    51   876     0     102  ;
 37680    51   170     9    51   876     0     111  address
 37681    51   170    17    51   876     0      67  =
 37682    51   170    19    51   876     0     111  db.address
 37683    51   170    29    51   876     0      59  (
 37684    51   170    30    51   876     0      60  )
 37685    51   170    32    51   876     0      74  +
 37686    51   170    34    51   876     0     111  off
 37687    51   170    37    51   876     0     102  ;
 37688    51   171     9    51   876     0     111  viewedBuffer
 37689    51   171    22    51   876     0      67  =
 37690    51   171    24    51   876     0     111  db
 37691    51   171    26    51   876     0     102  ;
 37692    51   178     5    51   876     0      64  }
 37693    51   178     5    51   876     0    2080  ENDMETHOD
 37694    51   178     5    51   877     0    2081  STARTMETHOD
 37695    51   180     5    51   877     0      10  public
 37696    51   180    12    51   877     0     111  LongBuffer
 37697    51   180    23    51   877     0     111  slice
 37698    51   180    28    51   877     0      59  (
 37699    51   180    29    51   877     0      60  )
 37700    51   180    31    51   877     0      63  {
 37701    51   181     9    51   877     1      36  int
 37702    51   181    13    51   877     1     111  pos
 37703    51   181    17    51   877     1      67  =
 37704    51   181    19    51   877     1     111  this.position
 37705    51   181    32    51   877     1      59  (
 37706    51   181    33    51   877     1      60  )
 37707    51   181    34    51   877     1     102  ;
 37708    51   182     9    51   877     1      36  int
 37709    51   182    13    51   877     1     111  lim
 37710    51   182    17    51   877     1      67  =
 37711    51   182    19    51   877     1     111  this.limit
 37712    51   182    29    51   877     1      59  (
 37713    51   182    30    51   877     1      60  )
 37714    51   182    31    51   877     1     102  ;
 37715    51   183     9    51   877     0     111  assert
 37716    51   183    16    51   877     0      59  (
 37717    51   183    17    51   877     0     111  pos
 37718    51   183    21    51   877     0      92  <=
 37719    51   183    24    51   877     0     111  lim
 37720    51   183    27    51   877     0      60  )
 37721    51   183    28    51   877     0     102  ;
 37722    51   184     9    51   877     0      36  int
 37723    51   184    13    51   877     0     111  rem
 37724    51   184    17    51   877     0      67  =
 37725    51   184    19    51   877     0      59  (
 37726    51   184    20    51   877     0     111  pos
 37727    51   184    24    51   877     0      92  <=
 37728    51   184    27    51   877     0     111  lim
 37729    51   184    31    51   877     0      58  ?
 37730    51   184    33    51   877     0     111  lim
 37731    51   184    37    51   877     0      77  -
 37732    51   184    39    51   877     0     111  pos
 37733    51   184    43    51   877     0      65  :
 37734    51   184    45    51   877     0     112  0
 37735    51   184    46    51   877     0      60  )
 37736    51   184    47    51   877     0     102  ;
 37737    51   185     9    51   877     0      36  int
 37738    51   185    13    51   877     0     111  off
 37739    51   185    17    51   877     0      67  =
 37740    51   185    19    51   877     0      59  (
 37741    51   185    20    51   877     0     111  pos
 37742    51   185    24    51   877     0      90  <<
 37743    51   185    27    51   877     0     112  3
 37744    51   185    28    51   877     0      60  )
 37745    51   185    29    51   877     0     102  ;
 37746    51   186     9    51   877     0     111  assert
 37747    51   186    16    51   877     0      59  (
 37748    51   186    17    51   877     0     111  off
 37749    51   186    21    51   877     0      88  >=
 37750    51   186    24    51   877     0     112  0
 37751    51   186    25    51   877     0      60  )
 37752    51   186    26    51   877     0     102  ;
 37753    51   187     9    51   877     0      19  return
 37754    51   187    16    51   877     0      15  new
 37755    51   187    20    51   877     0     111  DirectLongBufferS
 37756    51   187    37    51   877     0      59  (
 37757    51   187    38    51   877     0      44  this
 37758    51   187    42    51   877     0      66  ,
 37759    51   187    44    51   877     0      77  -
 37760    51   187    45    51   877     0     112  1
 37761    51   187    46    51   877     0      66  ,
 37762    51   187    48    51   877     0     112  0
 37763    51   187    49    51   877     0      66  ,
 37764    51   187    51    51   877     0     111  rem
 37765    51   187    54    51   877     0      66  ,
 37766    51   187    56    51   877     0     111  rem
 37767    51   187    59    51   877     0      66  ,
 37768    51   187    61    51   877     0     111  off
 37769    51   187    64    51   877     1      60  )
 37770    51   187    65    51   877     1     102  ;
 37771    51   188     5    51   877     1      64  }
 37772    51   188     5    51   877     0    2082  ENDMETHOD
 37773    51   188     5    51   878     0    2083  STARTMETHOD
 37774    51   190     5    51   878     0      10  public
 37775    51   190    12    51   878     0     111  LongBuffer
 37776    51   190    23    51   878     0     111  duplicate
 37777    51   190    32    51   878     0      59  (
 37778    51   190    33    51   878     0      60  )
 37779    51   190    35    51   878     0      63  {
 37780    51   191     9    51   878     0      19  return
 37781    51   191    16    51   878     0      15  new
 37782    51   191    20    51   878     0     111  DirectLongBufferS
 37783    51   191    37    51   878     0      59  (
 37784    51   191    38    51   878     0      44  this
 37785    51   191    42    51   878     0      66  ,
 37786    51   192    47    51   878     1     111  this.markValue
 37787    51   192    61    51   878     1      59  (
 37788    51   192    62    51   878     1      60  )
 37789    51   192    63    51   878     1      66  ,
 37790    51   193    47    51   878     1     111  this.position
 37791    51   193    60    51   878     1      59  (
 37792    51   193    61    51   878     1      60  )
 37793    51   193    62    51   878     1      66  ,
 37794    51   194    47    51   878     1     111  this.limit
 37795    51   194    57    51   878     1      59  (
 37796    51   194    58    51   878     1      60  )
 37797    51   194    59    51   878     1      66  ,
 37798    51   195    47    51   878     1     111  this.capacity
 37799    51   195    60    51   878     1      59  (
 37800    51   195    61    51   878     1      60  )
 37801    51   195    62    51   878     1      66  ,
 37802    51   196    47    51   878     0     112  0
 37803    51   196    48    51   878     1      60  )
 37804    51   196    49    51   878     1     102  ;
 37805    51   197     5    51   878     1      64  }
 37806    51   197     5    51   878     0    2084  ENDMETHOD
 37807    51   197     5    51   879     0    2085  STARTMETHOD
 37808    51   199     5    51   879     0      10  public
 37809    51   199    12    51   879     0     111  LongBuffer
 37810    51   199    23    51   879     0     111  asReadOnlyBuffer
 37811    51   199    39    51   879     0      59  (
 37812    51   199    40    51   879     0      60  )
 37813    51   199    42    51   879     0      63  {
 37814    51   201     9    51   879     0      19  return
 37815    51   201    16    51   879     0      15  new
 37816    51   201    20    51   879     0     111  DirectLongBufferRS
 37817    51   201    38    51   879     0      59  (
 37818    51   201    39    51   879     0      44  this
 37819    51   201    43    51   879     0      66  ,
 37820    51   202    44    51   879     1     111  this.markValue
 37821    51   202    58    51   879     1      59  (
 37822    51   202    59    51   879     1      60  )
 37823    51   202    60    51   879     1      66  ,
 37824    51   203    44    51   879     1     111  this.position
 37825    51   203    57    51   879     1      59  (
 37826    51   203    58    51   879     1      60  )
 37827    51   203    59    51   879     1      66  ,
 37828    51   204    44    51   879     1     111  this.limit
 37829    51   204    54    51   879     1      59  (
 37830    51   204    55    51   879     1      60  )
 37831    51   204    56    51   879     1      66  ,
 37832    51   205    44    51   879     1     111  this.capacity
 37833    51   205    57    51   879     1      59  (
 37834    51   205    58    51   879     1      60  )
 37835    51   205    59    51   879     1      66  ,
 37836    51   206    44    51   879     0     112  0
 37837    51   206    45    51   879     1      60  )
 37838    51   206    46    51   879     1     102  ;
 37839    51   210     5    51   879     1      64  }
 37840    51   210     5    51   879     0    2086  ENDMETHOD
 37841    51   210     5    51   880     0    2087  STARTMETHOD
 37842    51   214     5    51   880     0      10  public
 37843    51   214    12    51   880     0      53  long
 37844    51   214    17    51   880     0     111  address
 37845    51   214    24    51   880     0      59  (
 37846    51   214    25    51   880     0      60  )
 37847    51   214    27    51   880     0      63  {
 37848    51   215     9    51   880     0      19  return
 37849    51   215    16    51   880     0     111  address
 37850    51   215    23    51   880     0     102  ;
 37851    51   216     5    51   880     0      64  }
 37852    51   216     5    51   880     0    2088  ENDMETHOD
 37853    51   216     5    51   881     0    2089  STARTMETHOD
 37854    51   218     5    51   881     0      41  private
 37855    51   218    13    51   881     0      53  long
 37856    51   218    18    51   881     0     111  ix
 37857    51   218    20    51   881     0      59  (
 37858    51   218    21    51   881     0      36  int
 37859    51   218    25    51   881     0     111  i
 37860    51   218    26    51   881     0      60  )
 37861    51   218    28    51   881     0      63  {
 37862    51   219     9    51   881     0      19  return
 37863    51   219    16    51   881     0     111  address
 37864    51   219    24    51   881     0      74  +
 37865    51   219    26    51   881     0      59  (
 37866    51   219    27    51   881     0     111  i
 37867    51   219    29    51   881     0      90  <<
 37868    51   219    32    51   881     0     112  3
 37869    51   219    33    51   881     0      60  )
 37870    51   219    34    51   881     0     102  ;
 37871    51   220     5    51   881     0      64  }
 37872    51   220     5    51   881     0    2090  ENDMETHOD
 37873    51   220     5    51   882     0    2091  STARTMETHOD
 37874    51   222     5    51   882     0      10  public
 37875    51   222    12    51   882     0      53  long
 37876    51   222    17    51   882     0     111  get
 37877    51   222    20    51   882     0      59  (
 37878    51   222    21    51   882     0      60  )
 37879    51   222    23    51   882     0      63  {
 37880    51   223     9    51   882     0      19  return
 37881    51   223    16    51   882     0      59  (
 37882    51   223    17    51   882     0     111  Bits.swap
 37883    51   223    26    51   882     0      59  (
 37884    51   223    27    51   882     0     111  unsafe.getLong
 37885    51   223    41    51   882     0      59  (
 37886    51   223    42    51   882     0     111  ix
 37887    51   223    44    51   882     0      59  (
 37888    51   223    45    51   882     0     111  nextGetIndex
 37889    51   223    57    51   882     0      59  (
 37890    51   223    58    51   882     0      60  )
 37891    51   223    59    51   882     0      60  )
 37892    51   223    60    51   882     0      60  )
 37893    51   223    61    51   882     0      60  )
 37894    51   223    62    51   882     0      60  )
 37895    51   223    63    51   882     0     102  ;
 37896    51   224     5    51   882     0      64  }
 37897    51   224     5    51   882     0    2092  ENDMETHOD
 37898    51   224     5    51   883     0    2093  STARTMETHOD
 37899    51   226     5    51   883     0      10  public
 37900    51   226    12    51   883     0      53  long
 37901    51   226    17    51   883     0     111  get
 37902    51   226    20    51   883     0      59  (
 37903    51   226    21    51   883     0      36  int
 37904    51   226    25    51   883     0     111  i
 37905    51   226    26    51   883     0      60  )
 37906    51   226    28    51   883     0      63  {
 37907    51   227     9    51   883     0      19  return
 37908    51   227    16    51   883     0      59  (
 37909    51   227    17    51   883     0     111  Bits.swap
 37910    51   227    26    51   883     0      59  (
 37911    51   227    27    51   883     0     111  unsafe.getLong
 37912    51   227    41    51   883     0      59  (
 37913    51   227    42    51   883     0     111  ix
 37914    51   227    44    51   883     0      59  (
 37915    51   227    45    51   883     0     111  checkIndex
 37916    51   227    55    51   883     0      59  (
 37917    51   227    56    51   883     0     111  i
 37918    51   227    57    51   883     0      60  )
 37919    51   227    58    51   883     0      60  )
 37920    51   227    59    51   883     0      60  )
 37921    51   227    60    51   883     0      60  )
 37922    51   227    61    51   883     0      60  )
 37923    51   227    62    51   883     0     102  ;
 37924    51   228     5    51   883     0      64  }
 37925    51   228     5    51   883     0    2094  ENDMETHOD
 37926    51   228     5    51   884     0    2095  STARTMETHOD
 37927    51   230     5    51   884     0      10  public
 37928    51   230    12    51   884     0     111  LongBuffer
 37929    51   230    23    51   884     0     111  get
 37930    51   230    26    51   884     0      59  (
 37931    51   230    27    51   884     0      53  long
 37932    51   230    31    51   884     0      61  [
 37933    51   230    32    51   884     0      62  ]
 37934    51   230    34    51   884     0     111  dst
 37935    51   230    37    51   884     0      66  ,
 37936    51   230    39    51   884     0      36  int
 37937    51   230    43    51   884     0     111  offset
 37938    51   230    49    51   884     0      66  ,
 37939    51   230    51    51   884     0      36  int
 37940    51   230    55    51   884     0     111  length
 37941    51   230    61    51   884     0      60  )
 37942    51   230    63    51   884     0      63  {
 37943    51   232     9    51   884     0      31  if
 37944    51   232    12    51   884     0      59  (
 37945    51   232    13    51   884     0      59  (
 37946    51   232    14    51   884     0     111  length
 37947    51   232    21    51   884     0      90  <<
 37948    51   232    24    51   884     0     112  3
 37949    51   232    25    51   884     0      60  )
 37950    51   232    27    51   884     0      89  >
 37951    51   232    29    51   884     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 37952    51   232    61    51   884     0      60  )
 37953    51   232    63    51   884     0      63  {
 37954    51   233    13    51   884     0     111  checkBounds
 37955    51   233    24    51   884     0      59  (
 37956    51   233    25    51   884     0     111  offset
 37957    51   233    31    51   884     0      66  ,
 37958    51   233    33    51   884     0     111  length
 37959    51   233    39    51   884     0      66  ,
 37960    51   233    41    51   884     0     111  dst.length
 37961    51   233    51    51   884     0      60  )
 37962    51   233    52    51   884     0     102  ;
 37963    51   234    13    51   884     1      36  int
 37964    51   234    17    51   884     1     111  pos
 37965    51   234    21    51   884     1      67  =
 37966    51   234    23    51   884     1     111  position
 37967    51   234    31    51   884     1      59  (
 37968    51   234    32    51   884     1      60  )
 37969    51   234    33    51   884     1     102  ;
 37970    51   235    13    51   884     1      36  int
 37971    51   235    17    51   884     1     111  lim
 37972    51   235    21    51   884     1      67  =
 37973    51   235    23    51   884     1     111  limit
 37974    51   235    28    51   884     1      59  (
 37975    51   235    29    51   884     1      60  )
 37976    51   235    30    51   884     1     102  ;
 37977    51   236    13    51   884     0     111  assert
 37978    51   236    20    51   884     0      59  (
 37979    51   236    21    51   884     0     111  pos
 37980    51   236    25    51   884     0      92  <=
 37981    51   236    28    51   884     0     111  lim
 37982    51   236    31    51   884     0      60  )
 37983    51   236    32    51   884     0     102  ;
 37984    51   237    13    51   884     0      36  int
 37985    51   237    17    51   884     0     111  rem
 37986    51   237    21    51   884     0      67  =
 37987    51   237    23    51   884     0      59  (
 37988    51   237    24    51   884     0     111  pos
 37989    51   237    28    51   884     0      92  <=
 37990    51   237    31    51   884     0     111  lim
 37991    51   237    35    51   884     0      58  ?
 37992    51   237    37    51   884     0     111  lim
 37993    51   237    41    51   884     0      77  -
 37994    51   237    43    51   884     0     111  pos
 37995    51   237    47    51   884     0      65  :
 37996    51   237    49    51   884     0     112  0
 37997    51   237    50    51   884     0      60  )
 37998    51   237    51    51   884     0     102  ;
 37999    51   238    13    51   884     0      31  if
 38000    51   238    16    51   884     0      59  (
 38001    51   238    17    51   884     0     111  length
 38002    51   238    24    51   884     0      89  >
 38003    51   238    26    51   884     0     111  rem
 38004    51   238    29    51   884     0      60  )
 38005    51   239    17    51   884     0      20  throw
 38006    51   239    23    51   884     0      15  new
 38007    51   239    27    51   884     0     111  BufferUnderflowException
 38008    51   239    51    51   884     0      59  (
 38009    51   239    52    51   884     0      60  )
 38010    51   239    53    51   884     0     102  ;
 38011    51   241    13    51   884     0      31  if
 38012    51   241    16    51   884     0      59  (
 38013    51   241    17    51   884     0     111  order
 38014    51   241    22    51   884     0      59  (
 38015    51   241    23    51   884     0      60  )
 38016    51   241    25    51   884     0      71  !=
 38017    51   241    28    51   884     0     111  ByteOrder.nativeOrder
 38018    51   241    49    51   884     0      59  (
 38019    51   241    50    51   884     0      60  )
 38020    51   241    51    51   884     0      60  )
 38021    51   242    17    51   884     0     111  Bits.copyToLongArray
 38022    51   242    37    51   884     0      59  (
 38023    51   242    38    51   884     0     111  ix
 38024    51   242    40    51   884     0      59  (
 38025    51   242    41    51   884     0     111  pos
 38026    51   242    44    51   884     0      60  )
 38027    51   242    45    51   884     0      66  ,
 38028    51   242    47    51   884     0     111  dst
 38029    51   242    50    51   884     0      66  ,
 38030    51   243    43    51   884     0     111  offset
 38031    51   243    50    51   884     0      90  <<
 38032    51   243    53    51   884     0     112  3
 38033    51   243    54    51   884     0      66  ,
 38034    51   244    43    51   884     0     111  length
 38035    51   244    50    51   884     0      90  <<
 38036    51   244    53    51   884     0     112  3
 38037    51   244    54    51   884     0      60  )
 38038    51   244    55    51   884     0     102  ;
 38039    51   245    13    51   884     0      48  else
 38040    51   246    17    51   884     0     111  Bits.copyToByteArray
 38041    51   246    37    51   884     0      59  (
 38042    51   246    38    51   884     0     111  ix
 38043    51   246    40    51   884     0      59  (
 38044    51   246    41    51   884     0     111  pos
 38045    51   246    44    51   884     0      60  )
 38046    51   246    45    51   884     0      66  ,
 38047    51   246    47    51   884     0     111  dst
 38048    51   246    50    51   884     0      66  ,
 38049    51   247    38    51   884     0     111  offset
 38050    51   247    45    51   884     0      90  <<
 38051    51   247    48    51   884     0     112  3
 38052    51   247    49    51   884     0      66  ,
 38053    51   248    38    51   884     0     111  length
 38054    51   248    45    51   884     0      90  <<
 38055    51   248    48    51   884     0     112  3
 38056    51   248    49    51   884     0      60  )
 38057    51   248    50    51   884     0     102  ;
 38058    51   249    13    51   884     0     111  position
 38059    51   249    21    51   884     0      59  (
 38060    51   249    22    51   884     0     111  pos
 38061    51   249    26    51   884     0      74  +
 38062    51   249    28    51   884     0     111  length
 38063    51   249    34    51   884     0      60  )
 38064    51   249    35    51   884     0     102  ;
 38065    51   250     9    51   884     0      64  }
 38066    51   250    11    51   884     0      48  else
 38067    51   250    16    51   884     0      63  {
 38068    51   251    13    51   884     0     111  super.get
 38069    51   251    22    51   884     0      59  (
 38070    51   251    23    51   884     0     111  dst
 38071    51   251    26    51   884     0      66  ,
 38072    51   251    28    51   884     0     111  offset
 38073    51   251    34    51   884     0      66  ,
 38074    51   251    36    51   884     0     111  length
 38075    51   251    42    51   884     0      60  )
 38076    51   251    43    51   884     0     102  ;
 38077    51   252     9    51   884     0      64  }
 38078    51   253     9    51   884     0      19  return
 38079    51   253    16    51   884     0      44  this
 38080    51   253    20    51   884     0     102  ;
 38081    51   257     5    51   884     0      64  }
 38082    51   257     5    51   884     0    2096  ENDMETHOD
 38083    51   257     5    51   885     0    2097  STARTMETHOD
 38084    51   261     5    51   885     0      10  public
 38085    51   261    12    51   885     0     111  LongBuffer
 38086    51   261    23    51   885     0     111  put
 38087    51   261    26    51   885     0      59  (
 38088    51   261    27    51   885     0      53  long
 38089    51   261    32    51   885     0     111  x
 38090    51   261    33    51   885     0      60  )
 38091    51   261    35    51   885     0      63  {
 38092    51   263     9    51   885     0     111  unsafe.putLong
 38093    51   263    23    51   885     0      59  (
 38094    51   263    24    51   885     0     111  ix
 38095    51   263    26    51   885     0      59  (
 38096    51   263    27    51   885     0     111  nextPutIndex
 38097    51   263    39    51   885     0      59  (
 38098    51   263    40    51   885     0      60  )
 38099    51   263    41    51   885     0      60  )
 38100    51   263    42    51   885     0      66  ,
 38101    51   263    44    51   885     0     111  Bits.swap
 38102    51   263    53    51   885     0      59  (
 38103    51   263    54    51   885     0      59  (
 38104    51   263    55    51   885     0     111  x
 38105    51   263    56    51   885     0      60  )
 38106    51   263    57    51   885     0      60  )
 38107    51   263    58    51   885     0      60  )
 38108    51   263    59    51   885     0     102  ;
 38109    51   264     9    51   885     0      19  return
 38110    51   264    16    51   885     0      44  this
 38111    51   264    20    51   885     0     102  ;
 38112    51   268     5    51   885     0      64  }
 38113    51   268     5    51   885     0    2098  ENDMETHOD
 38114    51   268     5    51   886     0    2099  STARTMETHOD
 38115    51   270     5    51   886     0      10  public
 38116    51   270    12    51   886     0     111  LongBuffer
 38117    51   270    23    51   886     0     111  put
 38118    51   270    26    51   886     0      59  (
 38119    51   270    27    51   886     0      36  int
 38120    51   270    31    51   886     0     111  i
 38121    51   270    32    51   886     0      66  ,
 38122    51   270    34    51   886     0      53  long
 38123    51   270    39    51   886     0     111  x
 38124    51   270    40    51   886     0      60  )
 38125    51   270    42    51   886     0      63  {
 38126    51   272     9    51   886     0     111  unsafe.putLong
 38127    51   272    23    51   886     0      59  (
 38128    51   272    24    51   886     0     111  ix
 38129    51   272    26    51   886     0      59  (
 38130    51   272    27    51   886     0     111  checkIndex
 38131    51   272    37    51   886     0      59  (
 38132    51   272    38    51   886     0     111  i
 38133    51   272    39    51   886     0      60  )
 38134    51   272    40    51   886     0      60  )
 38135    51   272    41    51   886     0      66  ,
 38136    51   272    43    51   886     0     111  Bits.swap
 38137    51   272    52    51   886     0      59  (
 38138    51   272    53    51   886     0      59  (
 38139    51   272    54    51   886     0     111  x
 38140    51   272    55    51   886     0      60  )
 38141    51   272    56    51   886     0      60  )
 38142    51   272    57    51   886     0      60  )
 38143    51   272    58    51   886     0     102  ;
 38144    51   273     9    51   886     0      19  return
 38145    51   273    16    51   886     0      44  this
 38146    51   273    20    51   886     0     102  ;
 38147    51   277     5    51   886     0      64  }
 38148    51   277     5    51   886     0    2100  ENDMETHOD
 38149    51   277     5    51   887     0    2101  STARTMETHOD
 38150    51   279     5    51   887     0      10  public
 38151    51   279    12    51   887     0     111  LongBuffer
 38152    51   279    23    51   887     0     111  put
 38153    51   279    26    51   887     0      59  (
 38154    51   279    27    51   887     0     111  LongBuffer
 38155    51   279    38    51   887     0     111  src
 38156    51   279    41    51   887     0      60  )
 38157    51   279    43    51   887     0      63  {
 38158    51   281     9    51   887     0      31  if
 38159    51   281    12    51   887     0      59  (
 38160    51   281    13    51   887     0     111  src
 38161    51   281    17    51   887     0      16  instanceof
 38162    51   281    28    51   887     0     111  DirectLongBufferS
 38163    51   281    45    51   887     0      60  )
 38164    51   281    47    51   887     0      63  {
 38165    51   282    13    51   887     0      31  if
 38166    51   282    16    51   887     0      59  (
 38167    51   282    17    51   887     0     111  src
 38168    51   282    21    51   887     0      68  ==
 38169    51   282    24    51   887     0      44  this
 38170    51   282    28    51   887     0      60  )
 38171    51   283    17    51   887     0      20  throw
 38172    51   283    23    51   887     0      15  new
 38173    51   283    27    51   887     0     111  IllegalArgumentException
 38174    51   283    51    51   887     0      59  (
 38175    51   283    52    51   887     0      60  )
 38176    51   283    53    51   887     0     102  ;
 38177    51   284    13    51   887     0     111  DirectLongBufferS
 38178    51   284    31    51   887     0     111  sb
 38179    51   284    34    51   887     0      67  =
 38180    51   284    36    51   887     0      59  (
 38181    51   284    37    51   887     0     111  DirectLongBufferS
 38182    51   284    54    51   887     0      60  )
 38183    51   284    55    51   887     0     111  src
 38184    51   284    58    51   887     0     102  ;
 38185    51   286    13    51   887     1      36  int
 38186    51   286    17    51   887     1     111  spos
 38187    51   286    22    51   887     1      67  =
 38188    51   286    24    51   887     1     111  sb.position
 38189    51   286    35    51   887     1      59  (
 38190    51   286    36    51   887     1      60  )
 38191    51   286    37    51   887     1     102  ;
 38192    51   287    13    51   887     1      36  int
 38193    51   287    17    51   887     1     111  slim
 38194    51   287    22    51   887     1      67  =
 38195    51   287    24    51   887     1     111  sb.limit
 38196    51   287    32    51   887     1      59  (
 38197    51   287    33    51   887     1      60  )
 38198    51   287    34    51   887     1     102  ;
 38199    51   288    13    51   887     0     111  assert
 38200    51   288    20    51   887     0      59  (
 38201    51   288    21    51   887     0     111  spos
 38202    51   288    26    51   887     0      92  <=
 38203    51   288    29    51   887     0     111  slim
 38204    51   288    33    51   887     0      60  )
 38205    51   288    34    51   887     0     102  ;
 38206    51   289    13    51   887     0      36  int
 38207    51   289    17    51   887     0     111  srem
 38208    51   289    22    51   887     0      67  =
 38209    51   289    24    51   887     0      59  (
 38210    51   289    25    51   887     0     111  spos
 38211    51   289    30    51   887     0      92  <=
 38212    51   289    33    51   887     0     111  slim
 38213    51   289    38    51   887     0      58  ?
 38214    51   289    40    51   887     0     111  slim
 38215    51   289    45    51   887     0      77  -
 38216    51   289    47    51   887     0     111  spos
 38217    51   289    52    51   887     0      65  :
 38218    51   289    54    51   887     0     112  0
 38219    51   289    55    51   887     0      60  )
 38220    51   289    56    51   887     0     102  ;
 38221    51   291    13    51   887     1      36  int
 38222    51   291    17    51   887     1     111  pos
 38223    51   291    21    51   887     1      67  =
 38224    51   291    23    51   887     1     111  position
 38225    51   291    31    51   887     1      59  (
 38226    51   291    32    51   887     1      60  )
 38227    51   291    33    51   887     1     102  ;
 38228    51   292    13    51   887     1      36  int
 38229    51   292    17    51   887     1     111  lim
 38230    51   292    21    51   887     1      67  =
 38231    51   292    23    51   887     1     111  limit
 38232    51   292    28    51   887     1      59  (
 38233    51   292    29    51   887     1      60  )
 38234    51   292    30    51   887     1     102  ;
 38235    51   293    13    51   887     0     111  assert
 38236    51   293    20    51   887     0      59  (
 38237    51   293    21    51   887     0     111  pos
 38238    51   293    25    51   887     0      92  <=
 38239    51   293    28    51   887     0     111  lim
 38240    51   293    31    51   887     0      60  )
 38241    51   293    32    51   887     0     102  ;
 38242    51   294    13    51   887     0      36  int
 38243    51   294    17    51   887     0     111  rem
 38244    51   294    21    51   887     0      67  =
 38245    51   294    23    51   887     0      59  (
 38246    51   294    24    51   887     0     111  pos
 38247    51   294    28    51   887     0      92  <=
 38248    51   294    31    51   887     0     111  lim
 38249    51   294    35    51   887     0      58  ?
 38250    51   294    37    51   887     0     111  lim
 38251    51   294    41    51   887     0      77  -
 38252    51   294    43    51   887     0     111  pos
 38253    51   294    47    51   887     0      65  :
 38254    51   294    49    51   887     0     112  0
 38255    51   294    50    51   887     0      60  )
 38256    51   294    51    51   887     0     102  ;
 38257    51   296    13    51   887     0      31  if
 38258    51   296    16    51   887     0      59  (
 38259    51   296    17    51   887     0     111  srem
 38260    51   296    22    51   887     0      89  >
 38261    51   296    24    51   887     0     111  rem
 38262    51   296    27    51   887     0      60  )
 38263    51   297    17    51   887     0      20  throw
 38264    51   297    23    51   887     0      15  new
 38265    51   297    27    51   887     0     111  BufferOverflowException
 38266    51   297    50    51   887     0      59  (
 38267    51   297    51    51   887     0      60  )
 38268    51   297    52    51   887     0     102  ;
 38269    51   298    13    51   887     0     111  unsafe.copyMemory
 38270    51   298    30    51   887     0      59  (
 38271    51   298    31    51   887     0     111  sb.ix
 38272    51   298    36    51   887     0      59  (
 38273    51   298    37    51   887     0     111  spos
 38274    51   298    41    51   887     0      60  )
 38275    51   298    42    51   887     0      66  ,
 38276    51   298    44    51   887     0     111  ix
 38277    51   298    46    51   887     0      59  (
 38278    51   298    47    51   887     0     111  pos
 38279    51   298    50    51   887     0      60  )
 38280    51   298    51    51   887     0      66  ,
 38281    51   298    53    51   887     0     111  srem
 38282    51   298    58    51   887     0      90  <<
 38283    51   298    61    51   887     0     112  3
 38284    51   298    62    51   887     0      60  )
 38285    51   298    63    51   887     0     102  ;
 38286    51   299    13    51   887     1     111  sb.position
 38287    51   299    24    51   887     1      59  (
 38288    51   299    25    51   887     1     111  spos
 38289    51   299    30    51   887     1      74  +
 38290    51   299    32    51   887     1     111  srem
 38291    51   299    36    51   887     1      60  )
 38292    51   299    37    51   887     1     102  ;
 38293    51   300    13    51   887     1     111  position
 38294    51   300    21    51   887     1      59  (
 38295    51   300    22    51   887     1     111  pos
 38296    51   300    26    51   887     1      74  +
 38297    51   300    28    51   887     1     111  srem
 38298    51   300    32    51   887     1      60  )
 38299    51   300    33    51   887     1     102  ;
 38300    51   301     9    51   887     0      64  }
 38301    51   301    11    51   887     0      48  else
 38302    51   301    16    51   887     0      31  if
 38303    51   301    19    51   887     0      59  (
 38304    51   301    20    51   887     0     111  src.hb
 38305    51   301    27    51   887     0      71  !=
 38306    51   301    30    51   887     0      21  null
 38307    51   301    34    51   887     0      60  )
 38308    51   301    36    51   887     0      63  {
 38309    51   303    13    51   887     1      36  int
 38310    51   303    17    51   887     1     111  spos
 38311    51   303    22    51   887     1      67  =
 38312    51   303    24    51   887     1     111  src.position
 38313    51   303    36    51   887     1      59  (
 38314    51   303    37    51   887     1      60  )
 38315    51   303    38    51   887     1     102  ;
 38316    51   304    13    51   887     1      36  int
 38317    51   304    17    51   887     1     111  slim
 38318    51   304    22    51   887     1      67  =
 38319    51   304    24    51   887     1     111  src.limit
 38320    51   304    33    51   887     1      59  (
 38321    51   304    34    51   887     1      60  )
 38322    51   304    35    51   887     1     102  ;
 38323    51   305    13    51   887     0     111  assert
 38324    51   305    20    51   887     0      59  (
 38325    51   305    21    51   887     0     111  spos
 38326    51   305    26    51   887     0      92  <=
 38327    51   305    29    51   887     0     111  slim
 38328    51   305    33    51   887     0      60  )
 38329    51   305    34    51   887     0     102  ;
 38330    51   306    13    51   887     0      36  int
 38331    51   306    17    51   887     0     111  srem
 38332    51   306    22    51   887     0      67  =
 38333    51   306    24    51   887     0      59  (
 38334    51   306    25    51   887     0     111  spos
 38335    51   306    30    51   887     0      92  <=
 38336    51   306    33    51   887     0     111  slim
 38337    51   306    38    51   887     0      58  ?
 38338    51   306    40    51   887     0     111  slim
 38339    51   306    45    51   887     0      77  -
 38340    51   306    47    51   887     0     111  spos
 38341    51   306    52    51   887     0      65  :
 38342    51   306    54    51   887     0     112  0
 38343    51   306    55    51   887     0      60  )
 38344    51   306    56    51   887     0     102  ;
 38345    51   308    13    51   887     0     111  put
 38346    51   308    16    51   887     0      59  (
 38347    51   308    17    51   887     0     111  src.hb
 38348    51   308    23    51   887     0      66  ,
 38349    51   308    25    51   887     0     111  src.offset
 38350    51   308    36    51   887     0      74  +
 38351    51   308    38    51   887     0     111  spos
 38352    51   308    42    51   887     0      66  ,
 38353    51   308    44    51   887     0     111  srem
 38354    51   308    48    51   887     0      60  )
 38355    51   308    49    51   887     0     102  ;
 38356    51   309    13    51   887     0     111  src.position
 38357    51   309    25    51   887     0      59  (
 38358    51   309    26    51   887     0     111  spos
 38359    51   309    31    51   887     0      74  +
 38360    51   309    33    51   887     0     111  srem
 38361    51   309    37    51   887     0      60  )
 38362    51   309    38    51   887     0     102  ;
 38363    51   311     9    51   887     0      64  }
 38364    51   311    11    51   887     0      48  else
 38365    51   311    16    51   887     0      63  {
 38366    51   312    13    51   887     0     111  super.put
 38367    51   312    22    51   887     0      59  (
 38368    51   312    23    51   887     0     111  src
 38369    51   312    26    51   887     0      60  )
 38370    51   312    27    51   887     0     102  ;
 38371    51   313     9    51   887     0      64  }
 38372    51   314     9    51   887     0      19  return
 38373    51   314    16    51   887     0      44  this
 38374    51   314    20    51   887     0     102  ;
 38375    51   318     5    51   887     0      64  }
 38376    51   318     5    51   887     0    2102  ENDMETHOD
 38377    51   318     5    51   888     0    2103  STARTMETHOD
 38378    51   320     5    51   888     0      10  public
 38379    51   320    12    51   888     0     111  LongBuffer
 38380    51   320    23    51   888     0     111  put
 38381    51   320    26    51   888     0      59  (
 38382    51   320    27    51   888     0      53  long
 38383    51   320    31    51   888     0      61  [
 38384    51   320    32    51   888     0      62  ]
 38385    51   320    34    51   888     0     111  src
 38386    51   320    37    51   888     0      66  ,
 38387    51   320    39    51   888     0      36  int
 38388    51   320    43    51   888     0     111  offset
 38389    51   320    49    51   888     0      66  ,
 38390    51   320    51    51   888     0      36  int
 38391    51   320    55    51   888     0     111  length
 38392    51   320    61    51   888     0      60  )
 38393    51   320    63    51   888     0      63  {
 38394    51   322     9    51   888     0      31  if
 38395    51   322    12    51   888     0      59  (
 38396    51   322    13    51   888     0      59  (
 38397    51   322    14    51   888     0     111  length
 38398    51   322    21    51   888     0      90  <<
 38399    51   322    24    51   888     0     112  3
 38400    51   322    25    51   888     0      60  )
 38401    51   322    27    51   888     0      89  >
 38402    51   322    29    51   888     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 38403    51   322    63    51   888     0      60  )
 38404    51   322    65    51   888     0      63  {
 38405    51   323    13    51   888     0     111  checkBounds
 38406    51   323    24    51   888     0      59  (
 38407    51   323    25    51   888     0     111  offset
 38408    51   323    31    51   888     0      66  ,
 38409    51   323    33    51   888     0     111  length
 38410    51   323    39    51   888     0      66  ,
 38411    51   323    41    51   888     0     111  src.length
 38412    51   323    51    51   888     0      60  )
 38413    51   323    52    51   888     0     102  ;
 38414    51   324    13    51   888     1      36  int
 38415    51   324    17    51   888     1     111  pos
 38416    51   324    21    51   888     1      67  =
 38417    51   324    23    51   888     1     111  position
 38418    51   324    31    51   888     1      59  (
 38419    51   324    32    51   888     1      60  )
 38420    51   324    33    51   888     1     102  ;
 38421    51   325    13    51   888     1      36  int
 38422    51   325    17    51   888     1     111  lim
 38423    51   325    21    51   888     1      67  =
 38424    51   325    23    51   888     1     111  limit
 38425    51   325    28    51   888     1      59  (
 38426    51   325    29    51   888     1      60  )
 38427    51   325    30    51   888     1     102  ;
 38428    51   326    13    51   888     0     111  assert
 38429    51   326    20    51   888     0      59  (
 38430    51   326    21    51   888     0     111  pos
 38431    51   326    25    51   888     0      92  <=
 38432    51   326    28    51   888     0     111  lim
 38433    51   326    31    51   888     0      60  )
 38434    51   326    32    51   888     0     102  ;
 38435    51   327    13    51   888     0      36  int
 38436    51   327    17    51   888     0     111  rem
 38437    51   327    21    51   888     0      67  =
 38438    51   327    23    51   888     0      59  (
 38439    51   327    24    51   888     0     111  pos
 38440    51   327    28    51   888     0      92  <=
 38441    51   327    31    51   888     0     111  lim
 38442    51   327    35    51   888     0      58  ?
 38443    51   327    37    51   888     0     111  lim
 38444    51   327    41    51   888     0      77  -
 38445    51   327    43    51   888     0     111  pos
 38446    51   327    47    51   888     0      65  :
 38447    51   327    49    51   888     0     112  0
 38448    51   327    50    51   888     0      60  )
 38449    51   327    51    51   888     0     102  ;
 38450    51   328    13    51   888     0      31  if
 38451    51   328    16    51   888     0      59  (
 38452    51   328    17    51   888     0     111  length
 38453    51   328    24    51   888     0      89  >
 38454    51   328    26    51   888     0     111  rem
 38455    51   328    29    51   888     0      60  )
 38456    51   329    17    51   888     0      20  throw
 38457    51   329    23    51   888     0      15  new
 38458    51   329    27    51   888     0     111  BufferOverflowException
 38459    51   329    50    51   888     0      59  (
 38460    51   329    51    51   888     0      60  )
 38461    51   329    52    51   888     0     102  ;
 38462    51   331    13    51   888     0      31  if
 38463    51   331    16    51   888     0      59  (
 38464    51   331    17    51   888     0     111  order
 38465    51   331    22    51   888     0      59  (
 38466    51   331    23    51   888     0      60  )
 38467    51   331    25    51   888     0      71  !=
 38468    51   331    28    51   888     0     111  ByteOrder.nativeOrder
 38469    51   331    49    51   888     0      59  (
 38470    51   331    50    51   888     0      60  )
 38471    51   331    51    51   888     0      60  )
 38472    51   332    17    51   888     0     111  Bits.copyFromLongArray
 38473    51   332    39    51   888     0      59  (
 38474    51   332    40    51   888     0     111  src
 38475    51   332    43    51   888     0      66  ,
 38476    51   332    45    51   888     0     111  offset
 38477    51   332    52    51   888     0      90  <<
 38478    51   332    55    51   888     0     112  3
 38479    51   332    56    51   888     0      66  ,
 38480    51   333    45    51   888     0     111  ix
 38481    51   333    47    51   888     0      59  (
 38482    51   333    48    51   888     0     111  pos
 38483    51   333    51    51   888     0      60  )
 38484    51   333    52    51   888     0      66  ,
 38485    51   333    54    51   888     0     111  length
 38486    51   333    61    51   888     0      90  <<
 38487    51   333    64    51   888     0     112  3
 38488    51   333    65    51   888     0      60  )
 38489    51   333    66    51   888     0     102  ;
 38490    51   334    13    51   888     0      48  else
 38491    51   335    17    51   888     0     111  Bits.copyFromByteArray
 38492    51   335    39    51   888     0      59  (
 38493    51   335    40    51   888     0     111  src
 38494    51   335    43    51   888     0      66  ,
 38495    51   335    45    51   888     0     111  offset
 38496    51   335    52    51   888     0      90  <<
 38497    51   335    55    51   888     0     112  3
 38498    51   335    56    51   888     0      66  ,
 38499    51   336    40    51   888     0     111  ix
 38500    51   336    42    51   888     0      59  (
 38501    51   336    43    51   888     0     111  pos
 38502    51   336    46    51   888     0      60  )
 38503    51   336    47    51   888     0      66  ,
 38504    51   336    49    51   888     0     111  length
 38505    51   336    56    51   888     0      90  <<
 38506    51   336    59    51   888     0     112  3
 38507    51   336    60    51   888     0      60  )
 38508    51   336    61    51   888     0     102  ;
 38509    51   337    13    51   888     0     111  position
 38510    51   337    21    51   888     0      59  (
 38511    51   337    22    51   888     0     111  pos
 38512    51   337    26    51   888     0      74  +
 38513    51   337    28    51   888     0     111  length
 38514    51   337    34    51   888     0      60  )
 38515    51   337    35    51   888     0     102  ;
 38516    51   338     9    51   888     0      64  }
 38517    51   338    11    51   888     0      48  else
 38518    51   338    16    51   888     0      63  {
 38519    51   339    13    51   888     0     111  super.put
 38520    51   339    22    51   888     0      59  (
 38521    51   339    23    51   888     0     111  src
 38522    51   339    26    51   888     0      66  ,
 38523    51   339    28    51   888     0     111  offset
 38524    51   339    34    51   888     0      66  ,
 38525    51   339    36    51   888     0     111  length
 38526    51   339    42    51   888     0      60  )
 38527    51   339    43    51   888     0     102  ;
 38528    51   340     9    51   888     0      64  }
 38529    51   341     9    51   888     0      19  return
 38530    51   341    16    51   888     0      44  this
 38531    51   341    20    51   888     0     102  ;
 38532    51   345     5    51   888     0      64  }
 38533    51   345     5    51   888     0    2104  ENDMETHOD
 38534    51   345     5    51   889     0    2105  STARTMETHOD
 38535    51   347     5    51   889     0      10  public
 38536    51   347    12    51   889     0     111  LongBuffer
 38537    51   347    23    51   889     0     111  compact
 38538    51   347    30    51   889     0      59  (
 38539    51   347    31    51   889     0      60  )
 38540    51   347    33    51   889     0      63  {
 38541    51   349     9    51   889     1      36  int
 38542    51   349    13    51   889     1     111  pos
 38543    51   349    17    51   889     1      67  =
 38544    51   349    19    51   889     1     111  position
 38545    51   349    27    51   889     1      59  (
 38546    51   349    28    51   889     1      60  )
 38547    51   349    29    51   889     1     102  ;
 38548    51   350     9    51   889     1      36  int
 38549    51   350    13    51   889     1     111  lim
 38550    51   350    17    51   889     1      67  =
 38551    51   350    19    51   889     1     111  limit
 38552    51   350    24    51   889     1      59  (
 38553    51   350    25    51   889     1      60  )
 38554    51   350    26    51   889     1     102  ;
 38555    51   351     9    51   889     0     111  assert
 38556    51   351    16    51   889     0      59  (
 38557    51   351    17    51   889     0     111  pos
 38558    51   351    21    51   889     0      92  <=
 38559    51   351    24    51   889     0     111  lim
 38560    51   351    27    51   889     0      60  )
 38561    51   351    28    51   889     0     102  ;
 38562    51   352     9    51   889     0      36  int
 38563    51   352    13    51   889     0     111  rem
 38564    51   352    17    51   889     0      67  =
 38565    51   352    19    51   889     0      59  (
 38566    51   352    20    51   889     0     111  pos
 38567    51   352    24    51   889     0      92  <=
 38568    51   352    27    51   889     0     111  lim
 38569    51   352    31    51   889     0      58  ?
 38570    51   352    33    51   889     0     111  lim
 38571    51   352    37    51   889     0      77  -
 38572    51   352    39    51   889     0     111  pos
 38573    51   352    43    51   889     0      65  :
 38574    51   352    45    51   889     0     112  0
 38575    51   352    46    51   889     0      60  )
 38576    51   352    47    51   889     0     102  ;
 38577    51   354     9    51   889     0     111  unsafe.copyMemory
 38578    51   354    26    51   889     0      59  (
 38579    51   354    27    51   889     0     111  ix
 38580    51   354    29    51   889     0      59  (
 38581    51   354    30    51   889     0     111  pos
 38582    51   354    33    51   889     0      60  )
 38583    51   354    34    51   889     0      66  ,
 38584    51   354    36    51   889     0     111  ix
 38585    51   354    38    51   889     0      59  (
 38586    51   354    39    51   889     0     112  0
 38587    51   354    40    51   889     0      60  )
 38588    51   354    41    51   889     0      66  ,
 38589    51   354    43    51   889     0     111  rem
 38590    51   354    47    51   889     0      90  <<
 38591    51   354    50    51   889     0     112  3
 38592    51   354    51    51   889     0      60  )
 38593    51   354    52    51   889     0     102  ;
 38594    51   355     9    51   889     0     111  position
 38595    51   355    17    51   889     0      59  (
 38596    51   355    18    51   889     0     111  rem
 38597    51   355    21    51   889     0      60  )
 38598    51   355    22    51   889     0     102  ;
 38599    51   356     9    51   889     0     111  limit
 38600    51   356    14    51   889     0      59  (
 38601    51   356    15    51   889     0     111  capacity
 38602    51   356    23    51   889     0      59  (
 38603    51   356    24    51   889     0      60  )
 38604    51   356    25    51   889     0      60  )
 38605    51   356    26    51   889     0     102  ;
 38606    51   357     9    51   889     0     111  clearMark
 38607    51   357    18    51   889     0      59  (
 38608    51   357    19    51   889     0      60  )
 38609    51   357    20    51   889     0     102  ;
 38610    51   358     9    51   889     0      19  return
 38611    51   358    16    51   889     0      44  this
 38612    51   358    20    51   889     1     102  ;
 38613    51   362     5    51   889     1      64  }
 38614    51   362     5    51   889     0    2106  ENDMETHOD
 38615    51   362     5    51   890     0    2107  STARTMETHOD
 38616    51   364     5    51   890     0      10  public
 38617    51   364    12    51   890     0      39  boolean
 38618    51   364    20    51   890     0     111  isDirect
 38619    51   364    28    51   890     0      59  (
 38620    51   364    29    51   890     0      60  )
 38621    51   364    31    51   890     0      63  {
 38622    51   365     9    51   890     0      19  return
 38623    51   365    16    51   890     0      52  true
 38624    51   365    20    51   890     1     102  ;
 38625    51   366     5    51   890     1      64  }
 38626    51   366     5    51   890     0    2108  ENDMETHOD
 38627    51   366     5    51   891     0    2109  STARTMETHOD
 38628    51   368     5    51   891     0      10  public
 38629    51   368    12    51   891     0      39  boolean
 38630    51   368    20    51   891     0     111  isReadOnly
 38631    51   368    30    51   891     0      59  (
 38632    51   368    31    51   891     0      60  )
 38633    51   368    33    51   891     0      63  {
 38634    51   369     9    51   891     0      19  return
 38635    51   369    16    51   891     0      43  false
 38636    51   369    21    51   891     1     102  ;
 38637    51   370     5    51   891     1      64  }
 38638    51   370     5    51   891     0    2110  ENDMETHOD
 38639    51   370     5    51   892     0    2111  STARTMETHOD
 38640    51   416     5    51   892     0      10  public
 38641    51   416    12    51   892     0     111  ByteOrder
 38642    51   416    22    51   892     0     111  order
 38643    51   416    27    51   892     0      59  (
 38644    51   416    28    51   892     0      60  )
 38645    51   416    30    51   892     0      63  {
 38646    51   418     9    51   892     0      19  return
 38647    51   418    16    51   892     0      59  (
 38648    51   418    17    51   892     0      59  (
 38649    51   418    18    51   892     0     111  ByteOrder.nativeOrder
 38650    51   418    39    51   892     0      59  (
 38651    51   418    40    51   892     0      60  )
 38652    51   418    42    51   892     0      68  ==
 38653    51   418    45    51   892     0     111  ByteOrder.BIG_ENDIAN
 38654    51   418    65    51   892     0      60  )
 38655    51   419    17    51   892     0      58  ?
 38656    51   419    19    51   892     0     111  ByteOrder.LITTLE_ENDIAN
 38657    51   419    43    51   892     0      65  :
 38658    51   419    45    51   892     0     111  ByteOrder.BIG_ENDIAN
 38659    51   419    65    51   892     0      60  )
 38660    51   419    66    51   892     0     102  ;
 38661    51   425     5    51   892     0      64  }
 38662    51   425     5    51   892     0    2112  ENDMETHOD
 38663    51   452     1    51    -1     0      64  }
 38664    51   452     1    51    -1     1    2113  ENDCLASS
 38665    51   452     1    -1    -1     1    2114  ENDFILE C:\javasrc\java\nio\DirectLongBufferS.java
 38666    52     1     1    -1    -1     1    2115  STARTFILE C:\javasrc\java\nio\DirectLongBufferU.java
 38667    52    28     1    -1    -1     0       5  package
 38668    52    28     9    -1    -1     0     111  java.nio
 38669    52    28    17    -1    -1     0     102  ;
 38670    52    30     1    -1    -1     1      49  import
 38671    52    30     8    -1    -1     1     111  sun.misc.Cleaner
 38672    52    30    24    -1    -1     1     102  ;
 38673    52    31     1    -1    -1     1      49  import
 38674    52    31     8    -1    -1     1     111  sun.misc.Unsafe
 38675    52    31    23    -1    -1     1     102  ;
 38676    52    32     1    -1    -1     1      49  import
 38677    52    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 38678    52    32    31    -1    -1     1     102  ;
 38679    52    33     1    -1    -1     1      49  import
 38680    52    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 38681    52    33    34    -1    -1     1     102  ;
 38682    52    36     1    52    -1     0    2116  STARTCLASS
 38683    52    36     1    52    -1     0      24  class
 38684    52    36     7    52    -1     0     111  DirectLongBufferU
 38685    52    38     5    52    -1     0      38  extends
 38686    52    38    13    52    -1     0     111  LongBuffer
 38687    52    42     5    52    -1     0      17  implements
 38688    52    42    16    52    -1     0     111  DirectBuffer
 38689    52    43     1    52    -1     0      63  {
 38690    52    48     5    52    -1     0      23  protected
 38691    52    48    15    52    -1     0      45  static
 38692    52    48    22    52    -1     0       6  final
 38693    52    48    28    52    -1     0     111  Unsafe
 38694    52    48    35    52    -1     0     111  unsafe
 38695    52    48    42    52    -1     0      67  =
 38696    52    48    44    52    -1     0     111  Bits.unsafe
 38697    52    48    55    52    -1     0      59  (
 38698    52    48    56    52    -1     0      60  )
 38699    52    48    57    52    -1     0     102  ;
 38700    52    51     5    52    -1     0      23  protected
 38701    52    51    15    52    -1     0      45  static
 38702    52    51    22    52    -1     0       6  final
 38703    52    51    28    52    -1     0      39  boolean
 38704    52    51    36    52    -1     0     111  unaligned
 38705    52    51    46    52    -1     0      67  =
 38706    52    51    48    52    -1     0     111  Bits.unaligned
 38707    52    51    62    52    -1     0      59  (
 38708    52    51    63    52    -1     0      60  )
 38709    52    51    64    52    -1     0     102  ;
 38710    52    59     5    52    -1     0      23  protected
 38711    52    59    15    52    -1     0     111  Object
 38712    52    59    22    52    -1     0     111  viewedBuffer
 38713    52    59    35    52    -1     0      67  =
 38714    52    59    37    52    -1     0      21  null
 38715    52    59    41    52    -1     0     102  ;
 38716    52    59    41    52   893     0    2117  STARTMETHOD
 38717    52    61     5    52   893     0      10  public
 38718    52    61    12    52   893     0     111  Object
 38719    52    61    19    52   893     0     111  viewedBuffer
 38720    52    61    31    52   893     0      59  (
 38721    52    61    32    52   893     0      60  )
 38722    52    61    34    52   893     0      63  {
 38723    52    62     9    52   893     0      19  return
 38724    52    62    16    52   893     0     111  viewedBuffer
 38725    52    62    28    52   893     0     102  ;
 38726    52    63     5    52   893     0      64  }
 38727    52    63     5    52   893     0    2118  ENDMETHOD
 38728    52    63     5    52   894     0    2119  STARTMETHOD
 38729    52   100     5    52   894     0      10  public
 38730    52   100    12    52   894     0     111  Cleaner
 38731    52   100    20    52   894     0     111  cleaner
 38732    52   100    27    52   894     0      59  (
 38733    52   100    28    52   894     0      60  )
 38734    52   100    30    52   894     0      63  {
 38735    52   100    32    52   894     0      19  return
 38736    52   100    39    52   894     0      21  null
 38737    52   100    43    52   894     0     102  ;
 38738    52   100    45    52   894     0      64  }
 38739    52   100    45    52   894     0    2120  ENDMETHOD
 38740    52   100    45    52   895     0    2121  STARTMETHOD
 38741    52   164     5    52   895     0     111  DirectLongBufferU
 38742    52   164    22    52   895     0      59  (
 38743    52   164    23    52   895     0     111  DirectBuffer
 38744    52   164    36    52   895     0     111  db
 38745    52   164    38    52   895     0      66  ,
 38746    52   165    32    52   895     0      36  int
 38747    52   165    36    52   895     0     111  mark
 38748    52   165    40    52   895     0      66  ,
 38749    52   165    42    52   895     0      36  int
 38750    52   165    46    52   895     0     111  pos
 38751    52   165    49    52   895     0      66  ,
 38752    52   165    51    52   895     0      36  int
 38753    52   165    55    52   895     0     111  lim
 38754    52   165    58    52   895     0      66  ,
 38755    52   165    60    52   895     0      36  int
 38756    52   165    64    52   895     0     111  cap
 38757    52   165    67    52   895     0      66  ,
 38758    52   166    32    52   895     0      36  int
 38759    52   166    36    52   895     0     111  off
 38760    52   166    39    52   895     0      60  )
 38761    52   167     5    52   895     0      63  {
 38762    52   169     9    52   895     0      27  super
 38763    52   169    14    52   895     0      59  (
 38764    52   169    15    52   895     0     111  mark
 38765    52   169    19    52   895     0      66  ,
 38766    52   169    21    52   895     0     111  pos
 38767    52   169    24    52   895     0      66  ,
 38768    52   169    26    52   895     0     111  lim
 38769    52   169    29    52   895     0      66  ,
 38770    52   169    31    52   895     0     111  cap
 38771    52   169    34    52   895     0      60  )
 38772    52   169    35    52   895     0     102  ;
 38773    52   170     9    52   895     0     111  address
 38774    52   170    17    52   895     0      67  =
 38775    52   170    19    52   895     0     111  db.address
 38776    52   170    29    52   895     0      59  (
 38777    52   170    30    52   895     0      60  )
 38778    52   170    32    52   895     0      74  +
 38779    52   170    34    52   895     0     111  off
 38780    52   170    37    52   895     0     102  ;
 38781    52   171     9    52   895     0     111  viewedBuffer
 38782    52   171    22    52   895     0      67  =
 38783    52   171    24    52   895     0     111  db
 38784    52   171    26    52   895     0     102  ;
 38785    52   178     5    52   895     0      64  }
 38786    52   178     5    52   895     0    2122  ENDMETHOD
 38787    52   178     5    52   896     0    2123  STARTMETHOD
 38788    52   180     5    52   896     0      10  public
 38789    52   180    12    52   896     0     111  LongBuffer
 38790    52   180    23    52   896     0     111  slice
 38791    52   180    28    52   896     0      59  (
 38792    52   180    29    52   896     0      60  )
 38793    52   180    31    52   896     0      63  {
 38794    52   181     9    52   896     1      36  int
 38795    52   181    13    52   896     1     111  pos
 38796    52   181    17    52   896     1      67  =
 38797    52   181    19    52   896     1     111  this.position
 38798    52   181    32    52   896     1      59  (
 38799    52   181    33    52   896     1      60  )
 38800    52   181    34    52   896     1     102  ;
 38801    52   182     9    52   896     1      36  int
 38802    52   182    13    52   896     1     111  lim
 38803    52   182    17    52   896     1      67  =
 38804    52   182    19    52   896     1     111  this.limit
 38805    52   182    29    52   896     1      59  (
 38806    52   182    30    52   896     1      60  )
 38807    52   182    31    52   896     1     102  ;
 38808    52   183     9    52   896     0     111  assert
 38809    52   183    16    52   896     0      59  (
 38810    52   183    17    52   896     0     111  pos
 38811    52   183    21    52   896     0      92  <=
 38812    52   183    24    52   896     0     111  lim
 38813    52   183    27    52   896     0      60  )
 38814    52   183    28    52   896     0     102  ;
 38815    52   184     9    52   896     0      36  int
 38816    52   184    13    52   896     0     111  rem
 38817    52   184    17    52   896     0      67  =
 38818    52   184    19    52   896     0      59  (
 38819    52   184    20    52   896     0     111  pos
 38820    52   184    24    52   896     0      92  <=
 38821    52   184    27    52   896     0     111  lim
 38822    52   184    31    52   896     0      58  ?
 38823    52   184    33    52   896     0     111  lim
 38824    52   184    37    52   896     0      77  -
 38825    52   184    39    52   896     0     111  pos
 38826    52   184    43    52   896     0      65  :
 38827    52   184    45    52   896     0     112  0
 38828    52   184    46    52   896     0      60  )
 38829    52   184    47    52   896     0     102  ;
 38830    52   185     9    52   896     0      36  int
 38831    52   185    13    52   896     0     111  off
 38832    52   185    17    52   896     0      67  =
 38833    52   185    19    52   896     0      59  (
 38834    52   185    20    52   896     0     111  pos
 38835    52   185    24    52   896     0      90  <<
 38836    52   185    27    52   896     0     112  3
 38837    52   185    28    52   896     0      60  )
 38838    52   185    29    52   896     0     102  ;
 38839    52   186     9    52   896     0     111  assert
 38840    52   186    16    52   896     0      59  (
 38841    52   186    17    52   896     0     111  off
 38842    52   186    21    52   896     0      88  >=
 38843    52   186    24    52   896     0     112  0
 38844    52   186    25    52   896     0      60  )
 38845    52   186    26    52   896     0     102  ;
 38846    52   187     9    52   896     0      19  return
 38847    52   187    16    52   896     0      15  new
 38848    52   187    20    52   896     0     111  DirectLongBufferU
 38849    52   187    37    52   896     0      59  (
 38850    52   187    38    52   896     0      44  this
 38851    52   187    42    52   896     0      66  ,
 38852    52   187    44    52   896     0      77  -
 38853    52   187    45    52   896     0     112  1
 38854    52   187    46    52   896     0      66  ,
 38855    52   187    48    52   896     0     112  0
 38856    52   187    49    52   896     0      66  ,
 38857    52   187    51    52   896     0     111  rem
 38858    52   187    54    52   896     0      66  ,
 38859    52   187    56    52   896     0     111  rem
 38860    52   187    59    52   896     0      66  ,
 38861    52   187    61    52   896     0     111  off
 38862    52   187    64    52   896     1      60  )
 38863    52   187    65    52   896     1     102  ;
 38864    52   188     5    52   896     1      64  }
 38865    52   188     5    52   896     0    2124  ENDMETHOD
 38866    52   188     5    52   897     0    2125  STARTMETHOD
 38867    52   190     5    52   897     0      10  public
 38868    52   190    12    52   897     0     111  LongBuffer
 38869    52   190    23    52   897     0     111  duplicate
 38870    52   190    32    52   897     0      59  (
 38871    52   190    33    52   897     0      60  )
 38872    52   190    35    52   897     0      63  {
 38873    52   191     9    52   897     0      19  return
 38874    52   191    16    52   897     0      15  new
 38875    52   191    20    52   897     0     111  DirectLongBufferU
 38876    52   191    37    52   897     0      59  (
 38877    52   191    38    52   897     0      44  this
 38878    52   191    42    52   897     0      66  ,
 38879    52   192    47    52   897     1     111  this.markValue
 38880    52   192    61    52   897     1      59  (
 38881    52   192    62    52   897     1      60  )
 38882    52   192    63    52   897     1      66  ,
 38883    52   193    47    52   897     1     111  this.position
 38884    52   193    60    52   897     1      59  (
 38885    52   193    61    52   897     1      60  )
 38886    52   193    62    52   897     1      66  ,
 38887    52   194    47    52   897     1     111  this.limit
 38888    52   194    57    52   897     1      59  (
 38889    52   194    58    52   897     1      60  )
 38890    52   194    59    52   897     1      66  ,
 38891    52   195    47    52   897     1     111  this.capacity
 38892    52   195    60    52   897     1      59  (
 38893    52   195    61    52   897     1      60  )
 38894    52   195    62    52   897     1      66  ,
 38895    52   196    47    52   897     0     112  0
 38896    52   196    48    52   897     1      60  )
 38897    52   196    49    52   897     1     102  ;
 38898    52   197     5    52   897     1      64  }
 38899    52   197     5    52   897     0    2126  ENDMETHOD
 38900    52   197     5    52   898     0    2127  STARTMETHOD
 38901    52   199     5    52   898     0      10  public
 38902    52   199    12    52   898     0     111  LongBuffer
 38903    52   199    23    52   898     0     111  asReadOnlyBuffer
 38904    52   199    39    52   898     0      59  (
 38905    52   199    40    52   898     0      60  )
 38906    52   199    42    52   898     0      63  {
 38907    52   201     9    52   898     0      19  return
 38908    52   201    16    52   898     0      15  new
 38909    52   201    20    52   898     0     111  DirectLongBufferRU
 38910    52   201    38    52   898     0      59  (
 38911    52   201    39    52   898     0      44  this
 38912    52   201    43    52   898     0      66  ,
 38913    52   202    44    52   898     1     111  this.markValue
 38914    52   202    58    52   898     1      59  (
 38915    52   202    59    52   898     1      60  )
 38916    52   202    60    52   898     1      66  ,
 38917    52   203    44    52   898     1     111  this.position
 38918    52   203    57    52   898     1      59  (
 38919    52   203    58    52   898     1      60  )
 38920    52   203    59    52   898     1      66  ,
 38921    52   204    44    52   898     1     111  this.limit
 38922    52   204    54    52   898     1      59  (
 38923    52   204    55    52   898     1      60  )
 38924    52   204    56    52   898     1      66  ,
 38925    52   205    44    52   898     1     111  this.capacity
 38926    52   205    57    52   898     1      59  (
 38927    52   205    58    52   898     1      60  )
 38928    52   205    59    52   898     1      66  ,
 38929    52   206    44    52   898     0     112  0
 38930    52   206    45    52   898     1      60  )
 38931    52   206    46    52   898     1     102  ;
 38932    52   210     5    52   898     1      64  }
 38933    52   210     5    52   898     0    2128  ENDMETHOD
 38934    52   210     5    52   899     0    2129  STARTMETHOD
 38935    52   214     5    52   899     0      10  public
 38936    52   214    12    52   899     0      53  long
 38937    52   214    17    52   899     0     111  address
 38938    52   214    24    52   899     0      59  (
 38939    52   214    25    52   899     0      60  )
 38940    52   214    27    52   899     0      63  {
 38941    52   215     9    52   899     0      19  return
 38942    52   215    16    52   899     0     111  address
 38943    52   215    23    52   899     0     102  ;
 38944    52   216     5    52   899     0      64  }
 38945    52   216     5    52   899     0    2130  ENDMETHOD
 38946    52   216     5    52   900     0    2131  STARTMETHOD
 38947    52   218     5    52   900     0      41  private
 38948    52   218    13    52   900     0      53  long
 38949    52   218    18    52   900     0     111  ix
 38950    52   218    20    52   900     0      59  (
 38951    52   218    21    52   900     0      36  int
 38952    52   218    25    52   900     0     111  i
 38953    52   218    26    52   900     0      60  )
 38954    52   218    28    52   900     0      63  {
 38955    52   219     9    52   900     0      19  return
 38956    52   219    16    52   900     0     111  address
 38957    52   219    24    52   900     0      74  +
 38958    52   219    26    52   900     0      59  (
 38959    52   219    27    52   900     0     111  i
 38960    52   219    29    52   900     0      90  <<
 38961    52   219    32    52   900     0     112  3
 38962    52   219    33    52   900     0      60  )
 38963    52   219    34    52   900     0     102  ;
 38964    52   220     5    52   900     0      64  }
 38965    52   220     5    52   900     0    2132  ENDMETHOD
 38966    52   220     5    52   901     0    2133  STARTMETHOD
 38967    52   222     5    52   901     0      10  public
 38968    52   222    12    52   901     0      53  long
 38969    52   222    17    52   901     0     111  get
 38970    52   222    20    52   901     0      59  (
 38971    52   222    21    52   901     0      60  )
 38972    52   222    23    52   901     0      63  {
 38973    52   223     9    52   901     0      19  return
 38974    52   223    16    52   901     0      59  (
 38975    52   223    17    52   901     0      59  (
 38976    52   223    18    52   901     0     111  unsafe.getLong
 38977    52   223    32    52   901     0      59  (
 38978    52   223    33    52   901     0     111  ix
 38979    52   223    35    52   901     0      59  (
 38980    52   223    36    52   901     0     111  nextGetIndex
 38981    52   223    48    52   901     0      59  (
 38982    52   223    49    52   901     0      60  )
 38983    52   223    50    52   901     0      60  )
 38984    52   223    51    52   901     0      60  )
 38985    52   223    52    52   901     0      60  )
 38986    52   223    53    52   901     0      60  )
 38987    52   223    54    52   901     0     102  ;
 38988    52   224     5    52   901     0      64  }
 38989    52   224     5    52   901     0    2134  ENDMETHOD
 38990    52   224     5    52   902     0    2135  STARTMETHOD
 38991    52   226     5    52   902     0      10  public
 38992    52   226    12    52   902     0      53  long
 38993    52   226    17    52   902     0     111  get
 38994    52   226    20    52   902     0      59  (
 38995    52   226    21    52   902     0      36  int
 38996    52   226    25    52   902     0     111  i
 38997    52   226    26    52   902     0      60  )
 38998    52   226    28    52   902     0      63  {
 38999    52   227     9    52   902     0      19  return
 39000    52   227    16    52   902     0      59  (
 39001    52   227    17    52   902     0      59  (
 39002    52   227    18    52   902     0     111  unsafe.getLong
 39003    52   227    32    52   902     0      59  (
 39004    52   227    33    52   902     0     111  ix
 39005    52   227    35    52   902     0      59  (
 39006    52   227    36    52   902     0     111  checkIndex
 39007    52   227    46    52   902     0      59  (
 39008    52   227    47    52   902     0     111  i
 39009    52   227    48    52   902     0      60  )
 39010    52   227    49    52   902     0      60  )
 39011    52   227    50    52   902     0      60  )
 39012    52   227    51    52   902     0      60  )
 39013    52   227    52    52   902     0      60  )
 39014    52   227    53    52   902     0     102  ;
 39015    52   228     5    52   902     0      64  }
 39016    52   228     5    52   902     0    2136  ENDMETHOD
 39017    52   228     5    52   903     0    2137  STARTMETHOD
 39018    52   230     5    52   903     0      10  public
 39019    52   230    12    52   903     0     111  LongBuffer
 39020    52   230    23    52   903     0     111  get
 39021    52   230    26    52   903     0      59  (
 39022    52   230    27    52   903     0      53  long
 39023    52   230    31    52   903     0      61  [
 39024    52   230    32    52   903     0      62  ]
 39025    52   230    34    52   903     0     111  dst
 39026    52   230    37    52   903     0      66  ,
 39027    52   230    39    52   903     0      36  int
 39028    52   230    43    52   903     0     111  offset
 39029    52   230    49    52   903     0      66  ,
 39030    52   230    51    52   903     0      36  int
 39031    52   230    55    52   903     0     111  length
 39032    52   230    61    52   903     0      60  )
 39033    52   230    63    52   903     0      63  {
 39034    52   232     9    52   903     0      31  if
 39035    52   232    12    52   903     0      59  (
 39036    52   232    13    52   903     0      59  (
 39037    52   232    14    52   903     0     111  length
 39038    52   232    21    52   903     0      90  <<
 39039    52   232    24    52   903     0     112  3
 39040    52   232    25    52   903     0      60  )
 39041    52   232    27    52   903     0      89  >
 39042    52   232    29    52   903     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 39043    52   232    61    52   903     0      60  )
 39044    52   232    63    52   903     0      63  {
 39045    52   233    13    52   903     0     111  checkBounds
 39046    52   233    24    52   903     0      59  (
 39047    52   233    25    52   903     0     111  offset
 39048    52   233    31    52   903     0      66  ,
 39049    52   233    33    52   903     0     111  length
 39050    52   233    39    52   903     0      66  ,
 39051    52   233    41    52   903     0     111  dst.length
 39052    52   233    51    52   903     0      60  )
 39053    52   233    52    52   903     0     102  ;
 39054    52   234    13    52   903     1      36  int
 39055    52   234    17    52   903     1     111  pos
 39056    52   234    21    52   903     1      67  =
 39057    52   234    23    52   903     1     111  position
 39058    52   234    31    52   903     1      59  (
 39059    52   234    32    52   903     1      60  )
 39060    52   234    33    52   903     1     102  ;
 39061    52   235    13    52   903     1      36  int
 39062    52   235    17    52   903     1     111  lim
 39063    52   235    21    52   903     1      67  =
 39064    52   235    23    52   903     1     111  limit
 39065    52   235    28    52   903     1      59  (
 39066    52   235    29    52   903     1      60  )
 39067    52   235    30    52   903     1     102  ;
 39068    52   236    13    52   903     0     111  assert
 39069    52   236    20    52   903     0      59  (
 39070    52   236    21    52   903     0     111  pos
 39071    52   236    25    52   903     0      92  <=
 39072    52   236    28    52   903     0     111  lim
 39073    52   236    31    52   903     0      60  )
 39074    52   236    32    52   903     0     102  ;
 39075    52   237    13    52   903     0      36  int
 39076    52   237    17    52   903     0     111  rem
 39077    52   237    21    52   903     0      67  =
 39078    52   237    23    52   903     0      59  (
 39079    52   237    24    52   903     0     111  pos
 39080    52   237    28    52   903     0      92  <=
 39081    52   237    31    52   903     0     111  lim
 39082    52   237    35    52   903     0      58  ?
 39083    52   237    37    52   903     0     111  lim
 39084    52   237    41    52   903     0      77  -
 39085    52   237    43    52   903     0     111  pos
 39086    52   237    47    52   903     0      65  :
 39087    52   237    49    52   903     0     112  0
 39088    52   237    50    52   903     0      60  )
 39089    52   237    51    52   903     0     102  ;
 39090    52   238    13    52   903     0      31  if
 39091    52   238    16    52   903     0      59  (
 39092    52   238    17    52   903     0     111  length
 39093    52   238    24    52   903     0      89  >
 39094    52   238    26    52   903     0     111  rem
 39095    52   238    29    52   903     0      60  )
 39096    52   239    17    52   903     0      20  throw
 39097    52   239    23    52   903     0      15  new
 39098    52   239    27    52   903     0     111  BufferUnderflowException
 39099    52   239    51    52   903     0      59  (
 39100    52   239    52    52   903     0      60  )
 39101    52   239    53    52   903     0     102  ;
 39102    52   241    13    52   903     0      31  if
 39103    52   241    16    52   903     0      59  (
 39104    52   241    17    52   903     0     111  order
 39105    52   241    22    52   903     0      59  (
 39106    52   241    23    52   903     0      60  )
 39107    52   241    25    52   903     0      71  !=
 39108    52   241    28    52   903     0     111  ByteOrder.nativeOrder
 39109    52   241    49    52   903     0      59  (
 39110    52   241    50    52   903     0      60  )
 39111    52   241    51    52   903     0      60  )
 39112    52   242    17    52   903     0     111  Bits.copyToLongArray
 39113    52   242    37    52   903     0      59  (
 39114    52   242    38    52   903     0     111  ix
 39115    52   242    40    52   903     0      59  (
 39116    52   242    41    52   903     0     111  pos
 39117    52   242    44    52   903     0      60  )
 39118    52   242    45    52   903     0      66  ,
 39119    52   242    47    52   903     0     111  dst
 39120    52   242    50    52   903     0      66  ,
 39121    52   243    43    52   903     0     111  offset
 39122    52   243    50    52   903     0      90  <<
 39123    52   243    53    52   903     0     112  3
 39124    52   243    54    52   903     0      66  ,
 39125    52   244    43    52   903     0     111  length
 39126    52   244    50    52   903     0      90  <<
 39127    52   244    53    52   903     0     112  3
 39128    52   244    54    52   903     0      60  )
 39129    52   244    55    52   903     0     102  ;
 39130    52   245    13    52   903     0      48  else
 39131    52   246    17    52   903     0     111  Bits.copyToByteArray
 39132    52   246    37    52   903     0      59  (
 39133    52   246    38    52   903     0     111  ix
 39134    52   246    40    52   903     0      59  (
 39135    52   246    41    52   903     0     111  pos
 39136    52   246    44    52   903     0      60  )
 39137    52   246    45    52   903     0      66  ,
 39138    52   246    47    52   903     0     111  dst
 39139    52   246    50    52   903     0      66  ,
 39140    52   247    38    52   903     0     111  offset
 39141    52   247    45    52   903     0      90  <<
 39142    52   247    48    52   903     0     112  3
 39143    52   247    49    52   903     0      66  ,
 39144    52   248    38    52   903     0     111  length
 39145    52   248    45    52   903     0      90  <<
 39146    52   248    48    52   903     0     112  3
 39147    52   248    49    52   903     0      60  )
 39148    52   248    50    52   903     0     102  ;
 39149    52   249    13    52   903     0     111  position
 39150    52   249    21    52   903     0      59  (
 39151    52   249    22    52   903     0     111  pos
 39152    52   249    26    52   903     0      74  +
 39153    52   249    28    52   903     0     111  length
 39154    52   249    34    52   903     0      60  )
 39155    52   249    35    52   903     0     102  ;
 39156    52   250     9    52   903     0      64  }
 39157    52   250    11    52   903     0      48  else
 39158    52   250    16    52   903     0      63  {
 39159    52   251    13    52   903     0     111  super.get
 39160    52   251    22    52   903     0      59  (
 39161    52   251    23    52   903     0     111  dst
 39162    52   251    26    52   903     0      66  ,
 39163    52   251    28    52   903     0     111  offset
 39164    52   251    34    52   903     0      66  ,
 39165    52   251    36    52   903     0     111  length
 39166    52   251    42    52   903     0      60  )
 39167    52   251    43    52   903     0     102  ;
 39168    52   252     9    52   903     0      64  }
 39169    52   253     9    52   903     0      19  return
 39170    52   253    16    52   903     0      44  this
 39171    52   253    20    52   903     0     102  ;
 39172    52   257     5    52   903     0      64  }
 39173    52   257     5    52   903     0    2138  ENDMETHOD
 39174    52   257     5    52   904     0    2139  STARTMETHOD
 39175    52   261     5    52   904     0      10  public
 39176    52   261    12    52   904     0     111  LongBuffer
 39177    52   261    23    52   904     0     111  put
 39178    52   261    26    52   904     0      59  (
 39179    52   261    27    52   904     0      53  long
 39180    52   261    32    52   904     0     111  x
 39181    52   261    33    52   904     0      60  )
 39182    52   261    35    52   904     0      63  {
 39183    52   263     9    52   904     0     111  unsafe.putLong
 39184    52   263    23    52   904     0      59  (
 39185    52   263    24    52   904     0     111  ix
 39186    52   263    26    52   904     0      59  (
 39187    52   263    27    52   904     0     111  nextPutIndex
 39188    52   263    39    52   904     0      59  (
 39189    52   263    40    52   904     0      60  )
 39190    52   263    41    52   904     0      60  )
 39191    52   263    42    52   904     0      66  ,
 39192    52   263    44    52   904     0      59  (
 39193    52   263    45    52   904     0      59  (
 39194    52   263    46    52   904     0     111  x
 39195    52   263    47    52   904     0      60  )
 39196    52   263    48    52   904     0      60  )
 39197    52   263    49    52   904     0      60  )
 39198    52   263    50    52   904     0     102  ;
 39199    52   264     9    52   904     0      19  return
 39200    52   264    16    52   904     0      44  this
 39201    52   264    20    52   904     0     102  ;
 39202    52   268     5    52   904     0      64  }
 39203    52   268     5    52   904     0    2140  ENDMETHOD
 39204    52   268     5    52   905     0    2141  STARTMETHOD
 39205    52   270     5    52   905     0      10  public
 39206    52   270    12    52   905     0     111  LongBuffer
 39207    52   270    23    52   905     0     111  put
 39208    52   270    26    52   905     0      59  (
 39209    52   270    27    52   905     0      36  int
 39210    52   270    31    52   905     0     111  i
 39211    52   270    32    52   905     0      66  ,
 39212    52   270    34    52   905     0      53  long
 39213    52   270    39    52   905     0     111  x
 39214    52   270    40    52   905     0      60  )
 39215    52   270    42    52   905     0      63  {
 39216    52   272     9    52   905     0     111  unsafe.putLong
 39217    52   272    23    52   905     0      59  (
 39218    52   272    24    52   905     0     111  ix
 39219    52   272    26    52   905     0      59  (
 39220    52   272    27    52   905     0     111  checkIndex
 39221    52   272    37    52   905     0      59  (
 39222    52   272    38    52   905     0     111  i
 39223    52   272    39    52   905     0      60  )
 39224    52   272    40    52   905     0      60  )
 39225    52   272    41    52   905     0      66  ,
 39226    52   272    43    52   905     0      59  (
 39227    52   272    44    52   905     0      59  (
 39228    52   272    45    52   905     0     111  x
 39229    52   272    46    52   905     0      60  )
 39230    52   272    47    52   905     0      60  )
 39231    52   272    48    52   905     0      60  )
 39232    52   272    49    52   905     0     102  ;
 39233    52   273     9    52   905     0      19  return
 39234    52   273    16    52   905     0      44  this
 39235    52   273    20    52   905     0     102  ;
 39236    52   277     5    52   905     0      64  }
 39237    52   277     5    52   905     0    2142  ENDMETHOD
 39238    52   277     5    52   906     0    2143  STARTMETHOD
 39239    52   279     5    52   906     0      10  public
 39240    52   279    12    52   906     0     111  LongBuffer
 39241    52   279    23    52   906     0     111  put
 39242    52   279    26    52   906     0      59  (
 39243    52   279    27    52   906     0     111  LongBuffer
 39244    52   279    38    52   906     0     111  src
 39245    52   279    41    52   906     0      60  )
 39246    52   279    43    52   906     0      63  {
 39247    52   281     9    52   906     0      31  if
 39248    52   281    12    52   906     0      59  (
 39249    52   281    13    52   906     0     111  src
 39250    52   281    17    52   906     0      16  instanceof
 39251    52   281    28    52   906     0     111  DirectLongBufferU
 39252    52   281    45    52   906     0      60  )
 39253    52   281    47    52   906     0      63  {
 39254    52   282    13    52   906     0      31  if
 39255    52   282    16    52   906     0      59  (
 39256    52   282    17    52   906     0     111  src
 39257    52   282    21    52   906     0      68  ==
 39258    52   282    24    52   906     0      44  this
 39259    52   282    28    52   906     0      60  )
 39260    52   283    17    52   906     0      20  throw
 39261    52   283    23    52   906     0      15  new
 39262    52   283    27    52   906     0     111  IllegalArgumentException
 39263    52   283    51    52   906     0      59  (
 39264    52   283    52    52   906     0      60  )
 39265    52   283    53    52   906     0     102  ;
 39266    52   284    13    52   906     0     111  DirectLongBufferU
 39267    52   284    31    52   906     0     111  sb
 39268    52   284    34    52   906     0      67  =
 39269    52   284    36    52   906     0      59  (
 39270    52   284    37    52   906     0     111  DirectLongBufferU
 39271    52   284    54    52   906     0      60  )
 39272    52   284    55    52   906     0     111  src
 39273    52   284    58    52   906     0     102  ;
 39274    52   286    13    52   906     1      36  int
 39275    52   286    17    52   906     1     111  spos
 39276    52   286    22    52   906     1      67  =
 39277    52   286    24    52   906     1     111  sb.position
 39278    52   286    35    52   906     1      59  (
 39279    52   286    36    52   906     1      60  )
 39280    52   286    37    52   906     1     102  ;
 39281    52   287    13    52   906     1      36  int
 39282    52   287    17    52   906     1     111  slim
 39283    52   287    22    52   906     1      67  =
 39284    52   287    24    52   906     1     111  sb.limit
 39285    52   287    32    52   906     1      59  (
 39286    52   287    33    52   906     1      60  )
 39287    52   287    34    52   906     1     102  ;
 39288    52   288    13    52   906     0     111  assert
 39289    52   288    20    52   906     0      59  (
 39290    52   288    21    52   906     0     111  spos
 39291    52   288    26    52   906     0      92  <=
 39292    52   288    29    52   906     0     111  slim
 39293    52   288    33    52   906     0      60  )
 39294    52   288    34    52   906     0     102  ;
 39295    52   289    13    52   906     0      36  int
 39296    52   289    17    52   906     0     111  srem
 39297    52   289    22    52   906     0      67  =
 39298    52   289    24    52   906     0      59  (
 39299    52   289    25    52   906     0     111  spos
 39300    52   289    30    52   906     0      92  <=
 39301    52   289    33    52   906     0     111  slim
 39302    52   289    38    52   906     0      58  ?
 39303    52   289    40    52   906     0     111  slim
 39304    52   289    45    52   906     0      77  -
 39305    52   289    47    52   906     0     111  spos
 39306    52   289    52    52   906     0      65  :
 39307    52   289    54    52   906     0     112  0
 39308    52   289    55    52   906     0      60  )
 39309    52   289    56    52   906     0     102  ;
 39310    52   291    13    52   906     1      36  int
 39311    52   291    17    52   906     1     111  pos
 39312    52   291    21    52   906     1      67  =
 39313    52   291    23    52   906     1     111  position
 39314    52   291    31    52   906     1      59  (
 39315    52   291    32    52   906     1      60  )
 39316    52   291    33    52   906     1     102  ;
 39317    52   292    13    52   906     1      36  int
 39318    52   292    17    52   906     1     111  lim
 39319    52   292    21    52   906     1      67  =
 39320    52   292    23    52   906     1     111  limit
 39321    52   292    28    52   906     1      59  (
 39322    52   292    29    52   906     1      60  )
 39323    52   292    30    52   906     1     102  ;
 39324    52   293    13    52   906     0     111  assert
 39325    52   293    20    52   906     0      59  (
 39326    52   293    21    52   906     0     111  pos
 39327    52   293    25    52   906     0      92  <=
 39328    52   293    28    52   906     0     111  lim
 39329    52   293    31    52   906     0      60  )
 39330    52   293    32    52   906     0     102  ;
 39331    52   294    13    52   906     0      36  int
 39332    52   294    17    52   906     0     111  rem
 39333    52   294    21    52   906     0      67  =
 39334    52   294    23    52   906     0      59  (
 39335    52   294    24    52   906     0     111  pos
 39336    52   294    28    52   906     0      92  <=
 39337    52   294    31    52   906     0     111  lim
 39338    52   294    35    52   906     0      58  ?
 39339    52   294    37    52   906     0     111  lim
 39340    52   294    41    52   906     0      77  -
 39341    52   294    43    52   906     0     111  pos
 39342    52   294    47    52   906     0      65  :
 39343    52   294    49    52   906     0     112  0
 39344    52   294    50    52   906     0      60  )
 39345    52   294    51    52   906     0     102  ;
 39346    52   296    13    52   906     0      31  if
 39347    52   296    16    52   906     0      59  (
 39348    52   296    17    52   906     0     111  srem
 39349    52   296    22    52   906     0      89  >
 39350    52   296    24    52   906     0     111  rem
 39351    52   296    27    52   906     0      60  )
 39352    52   297    17    52   906     0      20  throw
 39353    52   297    23    52   906     0      15  new
 39354    52   297    27    52   906     0     111  BufferOverflowException
 39355    52   297    50    52   906     0      59  (
 39356    52   297    51    52   906     0      60  )
 39357    52   297    52    52   906     0     102  ;
 39358    52   298    13    52   906     0     111  unsafe.copyMemory
 39359    52   298    30    52   906     0      59  (
 39360    52   298    31    52   906     0     111  sb.ix
 39361    52   298    36    52   906     0      59  (
 39362    52   298    37    52   906     0     111  spos
 39363    52   298    41    52   906     0      60  )
 39364    52   298    42    52   906     0      66  ,
 39365    52   298    44    52   906     0     111  ix
 39366    52   298    46    52   906     0      59  (
 39367    52   298    47    52   906     0     111  pos
 39368    52   298    50    52   906     0      60  )
 39369    52   298    51    52   906     0      66  ,
 39370    52   298    53    52   906     0     111  srem
 39371    52   298    58    52   906     0      90  <<
 39372    52   298    61    52   906     0     112  3
 39373    52   298    62    52   906     0      60  )
 39374    52   298    63    52   906     0     102  ;
 39375    52   299    13    52   906     1     111  sb.position
 39376    52   299    24    52   906     1      59  (
 39377    52   299    25    52   906     1     111  spos
 39378    52   299    30    52   906     1      74  +
 39379    52   299    32    52   906     1     111  srem
 39380    52   299    36    52   906     1      60  )
 39381    52   299    37    52   906     1     102  ;
 39382    52   300    13    52   906     1     111  position
 39383    52   300    21    52   906     1      59  (
 39384    52   300    22    52   906     1     111  pos
 39385    52   300    26    52   906     1      74  +
 39386    52   300    28    52   906     1     111  srem
 39387    52   300    32    52   906     1      60  )
 39388    52   300    33    52   906     1     102  ;
 39389    52   301     9    52   906     0      64  }
 39390    52   301    11    52   906     0      48  else
 39391    52   301    16    52   906     0      31  if
 39392    52   301    19    52   906     0      59  (
 39393    52   301    20    52   906     0     111  src.hb
 39394    52   301    27    52   906     0      71  !=
 39395    52   301    30    52   906     0      21  null
 39396    52   301    34    52   906     0      60  )
 39397    52   301    36    52   906     0      63  {
 39398    52   303    13    52   906     1      36  int
 39399    52   303    17    52   906     1     111  spos
 39400    52   303    22    52   906     1      67  =
 39401    52   303    24    52   906     1     111  src.position
 39402    52   303    36    52   906     1      59  (
 39403    52   303    37    52   906     1      60  )
 39404    52   303    38    52   906     1     102  ;
 39405    52   304    13    52   906     1      36  int
 39406    52   304    17    52   906     1     111  slim
 39407    52   304    22    52   906     1      67  =
 39408    52   304    24    52   906     1     111  src.limit
 39409    52   304    33    52   906     1      59  (
 39410    52   304    34    52   906     1      60  )
 39411    52   304    35    52   906     1     102  ;
 39412    52   305    13    52   906     0     111  assert
 39413    52   305    20    52   906     0      59  (
 39414    52   305    21    52   906     0     111  spos
 39415    52   305    26    52   906     0      92  <=
 39416    52   305    29    52   906     0     111  slim
 39417    52   305    33    52   906     0      60  )
 39418    52   305    34    52   906     0     102  ;
 39419    52   306    13    52   906     0      36  int
 39420    52   306    17    52   906     0     111  srem
 39421    52   306    22    52   906     0      67  =
 39422    52   306    24    52   906     0      59  (
 39423    52   306    25    52   906     0     111  spos
 39424    52   306    30    52   906     0      92  <=
 39425    52   306    33    52   906     0     111  slim
 39426    52   306    38    52   906     0      58  ?
 39427    52   306    40    52   906     0     111  slim
 39428    52   306    45    52   906     0      77  -
 39429    52   306    47    52   906     0     111  spos
 39430    52   306    52    52   906     0      65  :
 39431    52   306    54    52   906     0     112  0
 39432    52   306    55    52   906     0      60  )
 39433    52   306    56    52   906     0     102  ;
 39434    52   308    13    52   906     0     111  put
 39435    52   308    16    52   906     0      59  (
 39436    52   308    17    52   906     0     111  src.hb
 39437    52   308    23    52   906     0      66  ,
 39438    52   308    25    52   906     0     111  src.offset
 39439    52   308    36    52   906     0      74  +
 39440    52   308    38    52   906     0     111  spos
 39441    52   308    42    52   906     0      66  ,
 39442    52   308    44    52   906     0     111  srem
 39443    52   308    48    52   906     0      60  )
 39444    52   308    49    52   906     0     102  ;
 39445    52   309    13    52   906     0     111  src.position
 39446    52   309    25    52   906     0      59  (
 39447    52   309    26    52   906     0     111  spos
 39448    52   309    31    52   906     0      74  +
 39449    52   309    33    52   906     0     111  srem
 39450    52   309    37    52   906     0      60  )
 39451    52   309    38    52   906     0     102  ;
 39452    52   311     9    52   906     0      64  }
 39453    52   311    11    52   906     0      48  else
 39454    52   311    16    52   906     0      63  {
 39455    52   312    13    52   906     0     111  super.put
 39456    52   312    22    52   906     0      59  (
 39457    52   312    23    52   906     0     111  src
 39458    52   312    26    52   906     0      60  )
 39459    52   312    27    52   906     0     102  ;
 39460    52   313     9    52   906     0      64  }
 39461    52   314     9    52   906     0      19  return
 39462    52   314    16    52   906     0      44  this
 39463    52   314    20    52   906     0     102  ;
 39464    52   318     5    52   906     0      64  }
 39465    52   318     5    52   906     0    2144  ENDMETHOD
 39466    52   318     5    52   907     0    2145  STARTMETHOD
 39467    52   320     5    52   907     0      10  public
 39468    52   320    12    52   907     0     111  LongBuffer
 39469    52   320    23    52   907     0     111  put
 39470    52   320    26    52   907     0      59  (
 39471    52   320    27    52   907     0      53  long
 39472    52   320    31    52   907     0      61  [
 39473    52   320    32    52   907     0      62  ]
 39474    52   320    34    52   907     0     111  src
 39475    52   320    37    52   907     0      66  ,
 39476    52   320    39    52   907     0      36  int
 39477    52   320    43    52   907     0     111  offset
 39478    52   320    49    52   907     0      66  ,
 39479    52   320    51    52   907     0      36  int
 39480    52   320    55    52   907     0     111  length
 39481    52   320    61    52   907     0      60  )
 39482    52   320    63    52   907     0      63  {
 39483    52   322     9    52   907     0      31  if
 39484    52   322    12    52   907     0      59  (
 39485    52   322    13    52   907     0      59  (
 39486    52   322    14    52   907     0     111  length
 39487    52   322    21    52   907     0      90  <<
 39488    52   322    24    52   907     0     112  3
 39489    52   322    25    52   907     0      60  )
 39490    52   322    27    52   907     0      89  >
 39491    52   322    29    52   907     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 39492    52   322    63    52   907     0      60  )
 39493    52   322    65    52   907     0      63  {
 39494    52   323    13    52   907     0     111  checkBounds
 39495    52   323    24    52   907     0      59  (
 39496    52   323    25    52   907     0     111  offset
 39497    52   323    31    52   907     0      66  ,
 39498    52   323    33    52   907     0     111  length
 39499    52   323    39    52   907     0      66  ,
 39500    52   323    41    52   907     0     111  src.length
 39501    52   323    51    52   907     0      60  )
 39502    52   323    52    52   907     0     102  ;
 39503    52   324    13    52   907     1      36  int
 39504    52   324    17    52   907     1     111  pos
 39505    52   324    21    52   907     1      67  =
 39506    52   324    23    52   907     1     111  position
 39507    52   324    31    52   907     1      59  (
 39508    52   324    32    52   907     1      60  )
 39509    52   324    33    52   907     1     102  ;
 39510    52   325    13    52   907     1      36  int
 39511    52   325    17    52   907     1     111  lim
 39512    52   325    21    52   907     1      67  =
 39513    52   325    23    52   907     1     111  limit
 39514    52   325    28    52   907     1      59  (
 39515    52   325    29    52   907     1      60  )
 39516    52   325    30    52   907     1     102  ;
 39517    52   326    13    52   907     0     111  assert
 39518    52   326    20    52   907     0      59  (
 39519    52   326    21    52   907     0     111  pos
 39520    52   326    25    52   907     0      92  <=
 39521    52   326    28    52   907     0     111  lim
 39522    52   326    31    52   907     0      60  )
 39523    52   326    32    52   907     0     102  ;
 39524    52   327    13    52   907     0      36  int
 39525    52   327    17    52   907     0     111  rem
 39526    52   327    21    52   907     0      67  =
 39527    52   327    23    52   907     0      59  (
 39528    52   327    24    52   907     0     111  pos
 39529    52   327    28    52   907     0      92  <=
 39530    52   327    31    52   907     0     111  lim
 39531    52   327    35    52   907     0      58  ?
 39532    52   327    37    52   907     0     111  lim
 39533    52   327    41    52   907     0      77  -
 39534    52   327    43    52   907     0     111  pos
 39535    52   327    47    52   907     0      65  :
 39536    52   327    49    52   907     0     112  0
 39537    52   327    50    52   907     0      60  )
 39538    52   327    51    52   907     0     102  ;
 39539    52   328    13    52   907     0      31  if
 39540    52   328    16    52   907     0      59  (
 39541    52   328    17    52   907     0     111  length
 39542    52   328    24    52   907     0      89  >
 39543    52   328    26    52   907     0     111  rem
 39544    52   328    29    52   907     0      60  )
 39545    52   329    17    52   907     0      20  throw
 39546    52   329    23    52   907     0      15  new
 39547    52   329    27    52   907     0     111  BufferOverflowException
 39548    52   329    50    52   907     0      59  (
 39549    52   329    51    52   907     0      60  )
 39550    52   329    52    52   907     0     102  ;
 39551    52   331    13    52   907     0      31  if
 39552    52   331    16    52   907     0      59  (
 39553    52   331    17    52   907     0     111  order
 39554    52   331    22    52   907     0      59  (
 39555    52   331    23    52   907     0      60  )
 39556    52   331    25    52   907     0      71  !=
 39557    52   331    28    52   907     0     111  ByteOrder.nativeOrder
 39558    52   331    49    52   907     0      59  (
 39559    52   331    50    52   907     0      60  )
 39560    52   331    51    52   907     0      60  )
 39561    52   332    17    52   907     0     111  Bits.copyFromLongArray
 39562    52   332    39    52   907     0      59  (
 39563    52   332    40    52   907     0     111  src
 39564    52   332    43    52   907     0      66  ,
 39565    52   332    45    52   907     0     111  offset
 39566    52   332    52    52   907     0      90  <<
 39567    52   332    55    52   907     0     112  3
 39568    52   332    56    52   907     0      66  ,
 39569    52   333    45    52   907     0     111  ix
 39570    52   333    47    52   907     0      59  (
 39571    52   333    48    52   907     0     111  pos
 39572    52   333    51    52   907     0      60  )
 39573    52   333    52    52   907     0      66  ,
 39574    52   333    54    52   907     0     111  length
 39575    52   333    61    52   907     0      90  <<
 39576    52   333    64    52   907     0     112  3
 39577    52   333    65    52   907     0      60  )
 39578    52   333    66    52   907     0     102  ;
 39579    52   334    13    52   907     0      48  else
 39580    52   335    17    52   907     0     111  Bits.copyFromByteArray
 39581    52   335    39    52   907     0      59  (
 39582    52   335    40    52   907     0     111  src
 39583    52   335    43    52   907     0      66  ,
 39584    52   335    45    52   907     0     111  offset
 39585    52   335    52    52   907     0      90  <<
 39586    52   335    55    52   907     0     112  3
 39587    52   335    56    52   907     0      66  ,
 39588    52   336    40    52   907     0     111  ix
 39589    52   336    42    52   907     0      59  (
 39590    52   336    43    52   907     0     111  pos
 39591    52   336    46    52   907     0      60  )
 39592    52   336    47    52   907     0      66  ,
 39593    52   336    49    52   907     0     111  length
 39594    52   336    56    52   907     0      90  <<
 39595    52   336    59    52   907     0     112  3
 39596    52   336    60    52   907     0      60  )
 39597    52   336    61    52   907     0     102  ;
 39598    52   337    13    52   907     0     111  position
 39599    52   337    21    52   907     0      59  (
 39600    52   337    22    52   907     0     111  pos
 39601    52   337    26    52   907     0      74  +
 39602    52   337    28    52   907     0     111  length
 39603    52   337    34    52   907     0      60  )
 39604    52   337    35    52   907     0     102  ;
 39605    52   338     9    52   907     0      64  }
 39606    52   338    11    52   907     0      48  else
 39607    52   338    16    52   907     0      63  {
 39608    52   339    13    52   907     0     111  super.put
 39609    52   339    22    52   907     0      59  (
 39610    52   339    23    52   907     0     111  src
 39611    52   339    26    52   907     0      66  ,
 39612    52   339    28    52   907     0     111  offset
 39613    52   339    34    52   907     0      66  ,
 39614    52   339    36    52   907     0     111  length
 39615    52   339    42    52   907     0      60  )
 39616    52   339    43    52   907     0     102  ;
 39617    52   340     9    52   907     0      64  }
 39618    52   341     9    52   907     0      19  return
 39619    52   341    16    52   907     0      44  this
 39620    52   341    20    52   907     0     102  ;
 39621    52   345     5    52   907     0      64  }
 39622    52   345     5    52   907     0    2146  ENDMETHOD
 39623    52   345     5    52   908     0    2147  STARTMETHOD
 39624    52   347     5    52   908     0      10  public
 39625    52   347    12    52   908     0     111  LongBuffer
 39626    52   347    23    52   908     0     111  compact
 39627    52   347    30    52   908     0      59  (
 39628    52   347    31    52   908     0      60  )
 39629    52   347    33    52   908     0      63  {
 39630    52   349     9    52   908     1      36  int
 39631    52   349    13    52   908     1     111  pos
 39632    52   349    17    52   908     1      67  =
 39633    52   349    19    52   908     1     111  position
 39634    52   349    27    52   908     1      59  (
 39635    52   349    28    52   908     1      60  )
 39636    52   349    29    52   908     1     102  ;
 39637    52   350     9    52   908     1      36  int
 39638    52   350    13    52   908     1     111  lim
 39639    52   350    17    52   908     1      67  =
 39640    52   350    19    52   908     1     111  limit
 39641    52   350    24    52   908     1      59  (
 39642    52   350    25    52   908     1      60  )
 39643    52   350    26    52   908     1     102  ;
 39644    52   351     9    52   908     0     111  assert
 39645    52   351    16    52   908     0      59  (
 39646    52   351    17    52   908     0     111  pos
 39647    52   351    21    52   908     0      92  <=
 39648    52   351    24    52   908     0     111  lim
 39649    52   351    27    52   908     0      60  )
 39650    52   351    28    52   908     0     102  ;
 39651    52   352     9    52   908     0      36  int
 39652    52   352    13    52   908     0     111  rem
 39653    52   352    17    52   908     0      67  =
 39654    52   352    19    52   908     0      59  (
 39655    52   352    20    52   908     0     111  pos
 39656    52   352    24    52   908     0      92  <=
 39657    52   352    27    52   908     0     111  lim
 39658    52   352    31    52   908     0      58  ?
 39659    52   352    33    52   908     0     111  lim
 39660    52   352    37    52   908     0      77  -
 39661    52   352    39    52   908     0     111  pos
 39662    52   352    43    52   908     0      65  :
 39663    52   352    45    52   908     0     112  0
 39664    52   352    46    52   908     0      60  )
 39665    52   352    47    52   908     0     102  ;
 39666    52   354     9    52   908     0     111  unsafe.copyMemory
 39667    52   354    26    52   908     0      59  (
 39668    52   354    27    52   908     0     111  ix
 39669    52   354    29    52   908     0      59  (
 39670    52   354    30    52   908     0     111  pos
 39671    52   354    33    52   908     0      60  )
 39672    52   354    34    52   908     0      66  ,
 39673    52   354    36    52   908     0     111  ix
 39674    52   354    38    52   908     0      59  (
 39675    52   354    39    52   908     0     112  0
 39676    52   354    40    52   908     0      60  )
 39677    52   354    41    52   908     0      66  ,
 39678    52   354    43    52   908     0     111  rem
 39679    52   354    47    52   908     0      90  <<
 39680    52   354    50    52   908     0     112  3
 39681    52   354    51    52   908     0      60  )
 39682    52   354    52    52   908     0     102  ;
 39683    52   355     9    52   908     0     111  position
 39684    52   355    17    52   908     0      59  (
 39685    52   355    18    52   908     0     111  rem
 39686    52   355    21    52   908     0      60  )
 39687    52   355    22    52   908     0     102  ;
 39688    52   356     9    52   908     0     111  limit
 39689    52   356    14    52   908     0      59  (
 39690    52   356    15    52   908     0     111  capacity
 39691    52   356    23    52   908     0      59  (
 39692    52   356    24    52   908     0      60  )
 39693    52   356    25    52   908     0      60  )
 39694    52   356    26    52   908     0     102  ;
 39695    52   357     9    52   908     0     111  clearMark
 39696    52   357    18    52   908     0      59  (
 39697    52   357    19    52   908     0      60  )
 39698    52   357    20    52   908     0     102  ;
 39699    52   358     9    52   908     0      19  return
 39700    52   358    16    52   908     0      44  this
 39701    52   358    20    52   908     1     102  ;
 39702    52   362     5    52   908     1      64  }
 39703    52   362     5    52   908     0    2148  ENDMETHOD
 39704    52   362     5    52   909     0    2149  STARTMETHOD
 39705    52   364     5    52   909     0      10  public
 39706    52   364    12    52   909     0      39  boolean
 39707    52   364    20    52   909     0     111  isDirect
 39708    52   364    28    52   909     0      59  (
 39709    52   364    29    52   909     0      60  )
 39710    52   364    31    52   909     0      63  {
 39711    52   365     9    52   909     0      19  return
 39712    52   365    16    52   909     0      52  true
 39713    52   365    20    52   909     1     102  ;
 39714    52   366     5    52   909     1      64  }
 39715    52   366     5    52   909     0    2150  ENDMETHOD
 39716    52   366     5    52   910     0    2151  STARTMETHOD
 39717    52   368     5    52   910     0      10  public
 39718    52   368    12    52   910     0      39  boolean
 39719    52   368    20    52   910     0     111  isReadOnly
 39720    52   368    30    52   910     0      59  (
 39721    52   368    31    52   910     0      60  )
 39722    52   368    33    52   910     0      63  {
 39723    52   369     9    52   910     0      19  return
 39724    52   369    16    52   910     0      43  false
 39725    52   369    21    52   910     1     102  ;
 39726    52   370     5    52   910     1      64  }
 39727    52   370     5    52   910     0    2152  ENDMETHOD
 39728    52   370     5    52   911     0    2153  STARTMETHOD
 39729    52   416     5    52   911     0      10  public
 39730    52   416    12    52   911     0     111  ByteOrder
 39731    52   416    22    52   911     0     111  order
 39732    52   416    27    52   911     0      59  (
 39733    52   416    28    52   911     0      60  )
 39734    52   416    30    52   911     0      63  {
 39735    52   422     9    52   911     0      19  return
 39736    52   422    16    52   911     0      59  (
 39737    52   422    17    52   911     0      59  (
 39738    52   422    18    52   911     0     111  ByteOrder.nativeOrder
 39739    52   422    39    52   911     0      59  (
 39740    52   422    40    52   911     0      60  )
 39741    52   422    42    52   911     0      71  !=
 39742    52   422    45    52   911     0     111  ByteOrder.BIG_ENDIAN
 39743    52   422    65    52   911     0      60  )
 39744    52   423    17    52   911     0      58  ?
 39745    52   423    19    52   911     0     111  ByteOrder.LITTLE_ENDIAN
 39746    52   423    43    52   911     0      65  :
 39747    52   423    45    52   911     0     111  ByteOrder.BIG_ENDIAN
 39748    52   423    65    52   911     0      60  )
 39749    52   423    66    52   911     0     102  ;
 39750    52   425     5    52   911     0      64  }
 39751    52   425     5    52   911     0    2154  ENDMETHOD
 39752    52   452     1    52    -1     0      64  }
 39753    52   452     1    52    -1     1    2155  ENDCLASS
 39754    52   452     1    -1    -1     1    2156  ENDFILE C:\javasrc\java\nio\DirectLongBufferU.java
 39755    53     1     1    -1    -1     1    2157  STARTFILE C:\javasrc\java\nio\DirectShortBufferRS.java
 39756    53    28     1    -1    -1     0       5  package
 39757    53    28     9    -1    -1     0     111  java.nio
 39758    53    28    17    -1    -1     0     102  ;
 39759    53    30     1    -1    -1     1      49  import
 39760    53    30     8    -1    -1     1     111  sun.misc.Cleaner
 39761    53    30    24    -1    -1     1     102  ;
 39762    53    31     1    -1    -1     1      49  import
 39763    53    31     8    -1    -1     1     111  sun.misc.Unsafe
 39764    53    31    23    -1    -1     1     102  ;
 39765    53    32     1    -1    -1     1      49  import
 39766    53    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 39767    53    32    31    -1    -1     1     102  ;
 39768    53    33     1    -1    -1     1      49  import
 39769    53    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 39770    53    33    34    -1    -1     1     102  ;
 39771    53    36     1    53    -1     0    2158  STARTCLASS
 39772    53    36     1    53    -1     0      24  class
 39773    53    36     7    53    -1     0     111  DirectShortBufferRS
 39774    53    40     5    53    -1     0      38  extends
 39775    53    40    13    53    -1     0     111  DirectShortBufferS
 39776    53    42     5    53    -1     0      17  implements
 39777    53    42    16    53    -1     0     111  DirectBuffer
 39778    53    43     1    53    -1     0      63  {
 39779    53    43     1    53   912     0    2159  STARTMETHOD
 39780    53   164     5    53   912     0     111  DirectShortBufferRS
 39781    53   164    24    53   912     0      59  (
 39782    53   164    25    53   912     0     111  DirectBuffer
 39783    53   164    38    53   912     0     111  db
 39784    53   164    40    53   912     0      66  ,
 39785    53   165    32    53   912     0      36  int
 39786    53   165    36    53   912     0     111  mark
 39787    53   165    40    53   912     0      66  ,
 39788    53   165    42    53   912     0      36  int
 39789    53   165    46    53   912     0     111  pos
 39790    53   165    49    53   912     0      66  ,
 39791    53   165    51    53   912     0      36  int
 39792    53   165    55    53   912     0     111  lim
 39793    53   165    58    53   912     0      66  ,
 39794    53   165    60    53   912     0      36  int
 39795    53   165    64    53   912     0     111  cap
 39796    53   165    67    53   912     0      66  ,
 39797    53   166    32    53   912     0      36  int
 39798    53   166    36    53   912     0     111  off
 39799    53   166    39    53   912     0      60  )
 39800    53   167     5    53   912     0      63  {
 39801    53   176     9    53   912     0      27  super
 39802    53   176    14    53   912     0      59  (
 39803    53   176    15    53   912     0     111  db
 39804    53   176    17    53   912     0      66  ,
 39805    53   176    19    53   912     0     111  mark
 39806    53   176    23    53   912     0      66  ,
 39807    53   176    25    53   912     0     111  pos
 39808    53   176    28    53   912     0      66  ,
 39809    53   176    30    53   912     0     111  lim
 39810    53   176    33    53   912     0      66  ,
 39811    53   176    35    53   912     0     111  cap
 39812    53   176    38    53   912     0      66  ,
 39813    53   176    40    53   912     0     111  off
 39814    53   176    43    53   912     0      60  )
 39815    53   176    44    53   912     0     102  ;
 39816    53   178     5    53   912     0      64  }
 39817    53   178     5    53   912     0    2160  ENDMETHOD
 39818    53   178     5    53   913     0    2161  STARTMETHOD
 39819    53   180     5    53   913     0      10  public
 39820    53   180    12    53   913     0     111  ShortBuffer
 39821    53   180    24    53   913     0     111  slice
 39822    53   180    29    53   913     0      59  (
 39823    53   180    30    53   913     0      60  )
 39824    53   180    32    53   913     0      63  {
 39825    53   181     9    53   913     1      36  int
 39826    53   181    13    53   913     1     111  pos
 39827    53   181    17    53   913     1      67  =
 39828    53   181    19    53   913     1     111  this.position
 39829    53   181    32    53   913     1      59  (
 39830    53   181    33    53   913     1      60  )
 39831    53   181    34    53   913     1     102  ;
 39832    53   182     9    53   913     1      36  int
 39833    53   182    13    53   913     1     111  lim
 39834    53   182    17    53   913     1      67  =
 39835    53   182    19    53   913     1     111  this.limit
 39836    53   182    29    53   913     1      59  (
 39837    53   182    30    53   913     1      60  )
 39838    53   182    31    53   913     1     102  ;
 39839    53   183     9    53   913     0     111  assert
 39840    53   183    16    53   913     0      59  (
 39841    53   183    17    53   913     0     111  pos
 39842    53   183    21    53   913     0      92  <=
 39843    53   183    24    53   913     0     111  lim
 39844    53   183    27    53   913     0      60  )
 39845    53   183    28    53   913     0     102  ;
 39846    53   184     9    53   913     0      36  int
 39847    53   184    13    53   913     0     111  rem
 39848    53   184    17    53   913     0      67  =
 39849    53   184    19    53   913     0      59  (
 39850    53   184    20    53   913     0     111  pos
 39851    53   184    24    53   913     0      92  <=
 39852    53   184    27    53   913     0     111  lim
 39853    53   184    31    53   913     0      58  ?
 39854    53   184    33    53   913     0     111  lim
 39855    53   184    37    53   913     0      77  -
 39856    53   184    39    53   913     0     111  pos
 39857    53   184    43    53   913     0      65  :
 39858    53   184    45    53   913     0     112  0
 39859    53   184    46    53   913     0      60  )
 39860    53   184    47    53   913     0     102  ;
 39861    53   185     9    53   913     0      36  int
 39862    53   185    13    53   913     0     111  off
 39863    53   185    17    53   913     0      67  =
 39864    53   185    19    53   913     0      59  (
 39865    53   185    20    53   913     0     111  pos
 39866    53   185    24    53   913     0      90  <<
 39867    53   185    27    53   913     0     112  1
 39868    53   185    28    53   913     0      60  )
 39869    53   185    29    53   913     0     102  ;
 39870    53   186     9    53   913     0     111  assert
 39871    53   186    16    53   913     0      59  (
 39872    53   186    17    53   913     0     111  off
 39873    53   186    21    53   913     0      88  >=
 39874    53   186    24    53   913     0     112  0
 39875    53   186    25    53   913     0      60  )
 39876    53   186    26    53   913     0     102  ;
 39877    53   187     9    53   913     0      19  return
 39878    53   187    16    53   913     0      15  new
 39879    53   187    20    53   913     0     111  DirectShortBufferRS
 39880    53   187    39    53   913     0      59  (
 39881    53   187    40    53   913     0      44  this
 39882    53   187    44    53   913     0      66  ,
 39883    53   187    46    53   913     0      77  -
 39884    53   187    47    53   913     0     112  1
 39885    53   187    48    53   913     0      66  ,
 39886    53   187    50    53   913     0     112  0
 39887    53   187    51    53   913     0      66  ,
 39888    53   187    53    53   913     0     111  rem
 39889    53   187    56    53   913     0      66  ,
 39890    53   187    58    53   913     0     111  rem
 39891    53   187    61    53   913     0      66  ,
 39892    53   187    63    53   913     0     111  off
 39893    53   187    66    53   913     0      60  )
 39894    53   187    67    53   913     0     102  ;
 39895    53   188     5    53   913     0      64  }
 39896    53   188     5    53   913     0    2162  ENDMETHOD
 39897    53   188     5    53   914     0    2163  STARTMETHOD
 39898    53   190     5    53   914     0      10  public
 39899    53   190    12    53   914     0     111  ShortBuffer
 39900    53   190    24    53   914     0     111  duplicate
 39901    53   190    33    53   914     0      59  (
 39902    53   190    34    53   914     0      60  )
 39903    53   190    36    53   914     0      63  {
 39904    53   191     9    53   914     0      19  return
 39905    53   191    16    53   914     0      15  new
 39906    53   191    20    53   914     0     111  DirectShortBufferRS
 39907    53   191    39    53   914     0      59  (
 39908    53   191    40    53   914     0      44  this
 39909    53   191    44    53   914     0      66  ,
 39910    53   192    47    53   914     1     111  this.markValue
 39911    53   192    61    53   914     1      59  (
 39912    53   192    62    53   914     1      60  )
 39913    53   192    63    53   914     1      66  ,
 39914    53   193    47    53   914     1     111  this.position
 39915    53   193    60    53   914     1      59  (
 39916    53   193    61    53   914     1      60  )
 39917    53   193    62    53   914     1      66  ,
 39918    53   194    47    53   914     1     111  this.limit
 39919    53   194    57    53   914     1      59  (
 39920    53   194    58    53   914     1      60  )
 39921    53   194    59    53   914     1      66  ,
 39922    53   195    47    53   914     1     111  this.capacity
 39923    53   195    60    53   914     1      59  (
 39924    53   195    61    53   914     1      60  )
 39925    53   195    62    53   914     1      66  ,
 39926    53   196    47    53   914     0     112  0
 39927    53   196    48    53   914     0      60  )
 39928    53   196    49    53   914     0     102  ;
 39929    53   197     5    53   914     0      64  }
 39930    53   197     5    53   914     0    2164  ENDMETHOD
 39931    53   197     5    53   915     0    2165  STARTMETHOD
 39932    53   199     5    53   915     0      10  public
 39933    53   199    12    53   915     0     111  ShortBuffer
 39934    53   199    24    53   915     0     111  asReadOnlyBuffer
 39935    53   199    40    53   915     0      59  (
 39936    53   199    41    53   915     0      60  )
 39937    53   199    43    53   915     0      63  {
 39938    53   208     9    53   915     0      19  return
 39939    53   208    16    53   915     0     111  duplicate
 39940    53   208    25    53   915     0      59  (
 39941    53   208    26    53   915     0      60  )
 39942    53   208    27    53   915     0     102  ;
 39943    53   210     5    53   915     0      64  }
 39944    53   210     5    53   915     0    2166  ENDMETHOD
 39945    53   210     5    53   916     0    2167  STARTMETHOD
 39946    53   261     5    53   916     0      10  public
 39947    53   261    12    53   916     0     111  ShortBuffer
 39948    53   261    24    53   916     0     111  put
 39949    53   261    27    53   916     0      59  (
 39950    53   261    28    53   916     0      12  short
 39951    53   261    34    53   916     0     111  x
 39952    53   261    35    53   916     0      60  )
 39953    53   261    37    53   916     0      63  {
 39954    53   266     9    53   916     0      20  throw
 39955    53   266    15    53   916     0      15  new
 39956    53   266    19    53   916     0     111  ReadOnlyBufferException
 39957    53   266    42    53   916     0      59  (
 39958    53   266    43    53   916     0      60  )
 39959    53   266    44    53   916     0     102  ;
 39960    53   268     5    53   916     0      64  }
 39961    53   268     5    53   916     0    2168  ENDMETHOD
 39962    53   268     5    53   917     0    2169  STARTMETHOD
 39963    53   270     5    53   917     0      10  public
 39964    53   270    12    53   917     0     111  ShortBuffer
 39965    53   270    24    53   917     0     111  put
 39966    53   270    27    53   917     0      59  (
 39967    53   270    28    53   917     0      36  int
 39968    53   270    32    53   917     0     111  i
 39969    53   270    33    53   917     0      66  ,
 39970    53   270    35    53   917     0      12  short
 39971    53   270    41    53   917     0     111  x
 39972    53   270    42    53   917     0      60  )
 39973    53   270    44    53   917     0      63  {
 39974    53   275     9    53   917     0      20  throw
 39975    53   275    15    53   917     0      15  new
 39976    53   275    19    53   917     0     111  ReadOnlyBufferException
 39977    53   275    42    53   917     0      59  (
 39978    53   275    43    53   917     0      60  )
 39979    53   275    44    53   917     0     102  ;
 39980    53   277     5    53   917     0      64  }
 39981    53   277     5    53   917     0    2170  ENDMETHOD
 39982    53   277     5    53   918     0    2171  STARTMETHOD
 39983    53   279     5    53   918     0      10  public
 39984    53   279    12    53   918     0     111  ShortBuffer
 39985    53   279    24    53   918     0     111  put
 39986    53   279    27    53   918     0      59  (
 39987    53   279    28    53   918     0     111  ShortBuffer
 39988    53   279    40    53   918     0     111  src
 39989    53   279    43    53   918     0      60  )
 39990    53   279    45    53   918     0      63  {
 39991    53   316     9    53   918     0      20  throw
 39992    53   316    15    53   918     0      15  new
 39993    53   316    19    53   918     0     111  ReadOnlyBufferException
 39994    53   316    42    53   918     0      59  (
 39995    53   316    43    53   918     0      60  )
 39996    53   316    44    53   918     0     102  ;
 39997    53   318     5    53   918     0      64  }
 39998    53   318     5    53   918     0    2172  ENDMETHOD
 39999    53   318     5    53   919     0    2173  STARTMETHOD
 40000    53   320     5    53   919     0      10  public
 40001    53   320    12    53   919     0     111  ShortBuffer
 40002    53   320    24    53   919     0     111  put
 40003    53   320    27    53   919     0      59  (
 40004    53   320    28    53   919     0      12  short
 40005    53   320    33    53   919     0      61  [
 40006    53   320    34    53   919     0      62  ]
 40007    53   320    36    53   919     0     111  src
 40008    53   320    39    53   919     0      66  ,
 40009    53   320    41    53   919     0      36  int
 40010    53   320    45    53   919     0     111  offset
 40011    53   320    51    53   919     0      66  ,
 40012    53   320    53    53   919     0      36  int
 40013    53   320    57    53   919     0     111  length
 40014    53   320    63    53   919     0      60  )
 40015    53   320    65    53   919     0      63  {
 40016    53   343     9    53   919     0      20  throw
 40017    53   343    15    53   919     0      15  new
 40018    53   343    19    53   919     0     111  ReadOnlyBufferException
 40019    53   343    42    53   919     0      59  (
 40020    53   343    43    53   919     0      60  )
 40021    53   343    44    53   919     0     102  ;
 40022    53   345     5    53   919     0      64  }
 40023    53   345     5    53   919     0    2174  ENDMETHOD
 40024    53   345     5    53   920     0    2175  STARTMETHOD
 40025    53   347     5    53   920     0      10  public
 40026    53   347    12    53   920     0     111  ShortBuffer
 40027    53   347    24    53   920     0     111  compact
 40028    53   347    31    53   920     0      59  (
 40029    53   347    32    53   920     0      60  )
 40030    53   347    34    53   920     0      63  {
 40031    53   360     9    53   920     0      20  throw
 40032    53   360    15    53   920     0      15  new
 40033    53   360    19    53   920     0     111  ReadOnlyBufferException
 40034    53   360    42    53   920     0      59  (
 40035    53   360    43    53   920     0      60  )
 40036    53   360    44    53   920     1     102  ;
 40037    53   362     5    53   920     1      64  }
 40038    53   362     5    53   920     0    2176  ENDMETHOD
 40039    53   362     5    53   921     0    2177  STARTMETHOD
 40040    53   364     5    53   921     0      10  public
 40041    53   364    12    53   921     0      39  boolean
 40042    53   364    20    53   921     0     111  isDirect
 40043    53   364    28    53   921     0      59  (
 40044    53   364    29    53   921     0      60  )
 40045    53   364    31    53   921     0      63  {
 40046    53   365     9    53   921     0      19  return
 40047    53   365    16    53   921     0      52  true
 40048    53   365    20    53   921     1     102  ;
 40049    53   366     5    53   921     1      64  }
 40050    53   366     5    53   921     0    2178  ENDMETHOD
 40051    53   366     5    53   922     0    2179  STARTMETHOD
 40052    53   368     5    53   922     0      10  public
 40053    53   368    12    53   922     0      39  boolean
 40054    53   368    20    53   922     0     111  isReadOnly
 40055    53   368    30    53   922     0      59  (
 40056    53   368    31    53   922     0      60  )
 40057    53   368    33    53   922     0      63  {
 40058    53   369     9    53   922     0      19  return
 40059    53   369    16    53   922     0      52  true
 40060    53   369    20    53   922     1     102  ;
 40061    53   370     5    53   922     1      64  }
 40062    53   370     5    53   922     0    2180  ENDMETHOD
 40063    53   370     5    53   923     0    2181  STARTMETHOD
 40064    53   416     5    53   923     0      10  public
 40065    53   416    12    53   923     0     111  ByteOrder
 40066    53   416    22    53   923     0     111  order
 40067    53   416    27    53   923     0      59  (
 40068    53   416    28    53   923     0      60  )
 40069    53   416    30    53   923     0      63  {
 40070    53   418     9    53   923     0      19  return
 40071    53   418    16    53   923     0      59  (
 40072    53   418    17    53   923     0      59  (
 40073    53   418    18    53   923     0     111  ByteOrder.nativeOrder
 40074    53   418    39    53   923     0      59  (
 40075    53   418    40    53   923     0      60  )
 40076    53   418    42    53   923     0      68  ==
 40077    53   418    45    53   923     0     111  ByteOrder.BIG_ENDIAN
 40078    53   418    65    53   923     0      60  )
 40079    53   419    17    53   923     0      58  ?
 40080    53   419    19    53   923     0     111  ByteOrder.LITTLE_ENDIAN
 40081    53   419    43    53   923     0      65  :
 40082    53   419    45    53   923     0     111  ByteOrder.BIG_ENDIAN
 40083    53   419    65    53   923     0      60  )
 40084    53   419    66    53   923     0     102  ;
 40085    53   425     5    53   923     0      64  }
 40086    53   425     5    53   923     0    2182  ENDMETHOD
 40087    53   452     1    53    -1     0      64  }
 40088    53   452     1    53    -1     1    2183  ENDCLASS
 40089    53   452     1    -1    -1     1    2184  ENDFILE C:\javasrc\java\nio\DirectShortBufferRS.java
 40090    54     1     1    -1    -1     1    2185  STARTFILE C:\javasrc\java\nio\DirectShortBufferRU.java
 40091    54    28     1    -1    -1     0       5  package
 40092    54    28     9    -1    -1     0     111  java.nio
 40093    54    28    17    -1    -1     0     102  ;
 40094    54    30     1    -1    -1     1      49  import
 40095    54    30     8    -1    -1     1     111  sun.misc.Cleaner
 40096    54    30    24    -1    -1     1     102  ;
 40097    54    31     1    -1    -1     1      49  import
 40098    54    31     8    -1    -1     1     111  sun.misc.Unsafe
 40099    54    31    23    -1    -1     1     102  ;
 40100    54    32     1    -1    -1     1      49  import
 40101    54    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 40102    54    32    31    -1    -1     1     102  ;
 40103    54    33     1    -1    -1     1      49  import
 40104    54    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 40105    54    33    34    -1    -1     1     102  ;
 40106    54    36     1    54    -1     0    2186  STARTCLASS
 40107    54    36     1    54    -1     0      24  class
 40108    54    36     7    54    -1     0     111  DirectShortBufferRU
 40109    54    40     5    54    -1     0      38  extends
 40110    54    40    13    54    -1     0     111  DirectShortBufferU
 40111    54    42     5    54    -1     0      17  implements
 40112    54    42    16    54    -1     0     111  DirectBuffer
 40113    54    43     1    54    -1     0      63  {
 40114    54    43     1    54   924     0    2187  STARTMETHOD
 40115    54   164     5    54   924     0     111  DirectShortBufferRU
 40116    54   164    24    54   924     0      59  (
 40117    54   164    25    54   924     0     111  DirectBuffer
 40118    54   164    38    54   924     0     111  db
 40119    54   164    40    54   924     0      66  ,
 40120    54   165    32    54   924     0      36  int
 40121    54   165    36    54   924     0     111  mark
 40122    54   165    40    54   924     0      66  ,
 40123    54   165    42    54   924     0      36  int
 40124    54   165    46    54   924     0     111  pos
 40125    54   165    49    54   924     0      66  ,
 40126    54   165    51    54   924     0      36  int
 40127    54   165    55    54   924     0     111  lim
 40128    54   165    58    54   924     0      66  ,
 40129    54   165    60    54   924     0      36  int
 40130    54   165    64    54   924     0     111  cap
 40131    54   165    67    54   924     0      66  ,
 40132    54   166    32    54   924     0      36  int
 40133    54   166    36    54   924     0     111  off
 40134    54   166    39    54   924     0      60  )
 40135    54   167     5    54   924     0      63  {
 40136    54   176     9    54   924     0      27  super
 40137    54   176    14    54   924     0      59  (
 40138    54   176    15    54   924     0     111  db
 40139    54   176    17    54   924     0      66  ,
 40140    54   176    19    54   924     0     111  mark
 40141    54   176    23    54   924     0      66  ,
 40142    54   176    25    54   924     0     111  pos
 40143    54   176    28    54   924     0      66  ,
 40144    54   176    30    54   924     0     111  lim
 40145    54   176    33    54   924     0      66  ,
 40146    54   176    35    54   924     0     111  cap
 40147    54   176    38    54   924     0      66  ,
 40148    54   176    40    54   924     0     111  off
 40149    54   176    43    54   924     0      60  )
 40150    54   176    44    54   924     0     102  ;
 40151    54   178     5    54   924     0      64  }
 40152    54   178     5    54   924     0    2188  ENDMETHOD
 40153    54   178     5    54   925     0    2189  STARTMETHOD
 40154    54   180     5    54   925     0      10  public
 40155    54   180    12    54   925     0     111  ShortBuffer
 40156    54   180    24    54   925     0     111  slice
 40157    54   180    29    54   925     0      59  (
 40158    54   180    30    54   925     0      60  )
 40159    54   180    32    54   925     0      63  {
 40160    54   181     9    54   925     1      36  int
 40161    54   181    13    54   925     1     111  pos
 40162    54   181    17    54   925     1      67  =
 40163    54   181    19    54   925     1     111  this.position
 40164    54   181    32    54   925     1      59  (
 40165    54   181    33    54   925     1      60  )
 40166    54   181    34    54   925     1     102  ;
 40167    54   182     9    54   925     1      36  int
 40168    54   182    13    54   925     1     111  lim
 40169    54   182    17    54   925     1      67  =
 40170    54   182    19    54   925     1     111  this.limit
 40171    54   182    29    54   925     1      59  (
 40172    54   182    30    54   925     1      60  )
 40173    54   182    31    54   925     1     102  ;
 40174    54   183     9    54   925     0     111  assert
 40175    54   183    16    54   925     0      59  (
 40176    54   183    17    54   925     0     111  pos
 40177    54   183    21    54   925     0      92  <=
 40178    54   183    24    54   925     0     111  lim
 40179    54   183    27    54   925     0      60  )
 40180    54   183    28    54   925     0     102  ;
 40181    54   184     9    54   925     0      36  int
 40182    54   184    13    54   925     0     111  rem
 40183    54   184    17    54   925     0      67  =
 40184    54   184    19    54   925     0      59  (
 40185    54   184    20    54   925     0     111  pos
 40186    54   184    24    54   925     0      92  <=
 40187    54   184    27    54   925     0     111  lim
 40188    54   184    31    54   925     0      58  ?
 40189    54   184    33    54   925     0     111  lim
 40190    54   184    37    54   925     0      77  -
 40191    54   184    39    54   925     0     111  pos
 40192    54   184    43    54   925     0      65  :
 40193    54   184    45    54   925     0     112  0
 40194    54   184    46    54   925     0      60  )
 40195    54   184    47    54   925     0     102  ;
 40196    54   185     9    54   925     0      36  int
 40197    54   185    13    54   925     0     111  off
 40198    54   185    17    54   925     0      67  =
 40199    54   185    19    54   925     0      59  (
 40200    54   185    20    54   925     0     111  pos
 40201    54   185    24    54   925     0      90  <<
 40202    54   185    27    54   925     0     112  1
 40203    54   185    28    54   925     0      60  )
 40204    54   185    29    54   925     0     102  ;
 40205    54   186     9    54   925     0     111  assert
 40206    54   186    16    54   925     0      59  (
 40207    54   186    17    54   925     0     111  off
 40208    54   186    21    54   925     0      88  >=
 40209    54   186    24    54   925     0     112  0
 40210    54   186    25    54   925     0      60  )
 40211    54   186    26    54   925     0     102  ;
 40212    54   187     9    54   925     0      19  return
 40213    54   187    16    54   925     0      15  new
 40214    54   187    20    54   925     0     111  DirectShortBufferRU
 40215    54   187    39    54   925     0      59  (
 40216    54   187    40    54   925     0      44  this
 40217    54   187    44    54   925     0      66  ,
 40218    54   187    46    54   925     0      77  -
 40219    54   187    47    54   925     0     112  1
 40220    54   187    48    54   925     0      66  ,
 40221    54   187    50    54   925     0     112  0
 40222    54   187    51    54   925     0      66  ,
 40223    54   187    53    54   925     0     111  rem
 40224    54   187    56    54   925     0      66  ,
 40225    54   187    58    54   925     0     111  rem
 40226    54   187    61    54   925     0      66  ,
 40227    54   187    63    54   925     0     111  off
 40228    54   187    66    54   925     0      60  )
 40229    54   187    67    54   925     0     102  ;
 40230    54   188     5    54   925     0      64  }
 40231    54   188     5    54   925     0    2190  ENDMETHOD
 40232    54   188     5    54   926     0    2191  STARTMETHOD
 40233    54   190     5    54   926     0      10  public
 40234    54   190    12    54   926     0     111  ShortBuffer
 40235    54   190    24    54   926     0     111  duplicate
 40236    54   190    33    54   926     0      59  (
 40237    54   190    34    54   926     0      60  )
 40238    54   190    36    54   926     0      63  {
 40239    54   191     9    54   926     0      19  return
 40240    54   191    16    54   926     0      15  new
 40241    54   191    20    54   926     0     111  DirectShortBufferRU
 40242    54   191    39    54   926     0      59  (
 40243    54   191    40    54   926     0      44  this
 40244    54   191    44    54   926     0      66  ,
 40245    54   192    47    54   926     1     111  this.markValue
 40246    54   192    61    54   926     1      59  (
 40247    54   192    62    54   926     1      60  )
 40248    54   192    63    54   926     1      66  ,
 40249    54   193    47    54   926     1     111  this.position
 40250    54   193    60    54   926     1      59  (
 40251    54   193    61    54   926     1      60  )
 40252    54   193    62    54   926     1      66  ,
 40253    54   194    47    54   926     1     111  this.limit
 40254    54   194    57    54   926     1      59  (
 40255    54   194    58    54   926     1      60  )
 40256    54   194    59    54   926     1      66  ,
 40257    54   195    47    54   926     1     111  this.capacity
 40258    54   195    60    54   926     1      59  (
 40259    54   195    61    54   926     1      60  )
 40260    54   195    62    54   926     1      66  ,
 40261    54   196    47    54   926     0     112  0
 40262    54   196    48    54   926     0      60  )
 40263    54   196    49    54   926     0     102  ;
 40264    54   197     5    54   926     0      64  }
 40265    54   197     5    54   926     0    2192  ENDMETHOD
 40266    54   197     5    54   927     0    2193  STARTMETHOD
 40267    54   199     5    54   927     0      10  public
 40268    54   199    12    54   927     0     111  ShortBuffer
 40269    54   199    24    54   927     0     111  asReadOnlyBuffer
 40270    54   199    40    54   927     0      59  (
 40271    54   199    41    54   927     0      60  )
 40272    54   199    43    54   927     0      63  {
 40273    54   208     9    54   927     0      19  return
 40274    54   208    16    54   927     0     111  duplicate
 40275    54   208    25    54   927     0      59  (
 40276    54   208    26    54   927     0      60  )
 40277    54   208    27    54   927     0     102  ;
 40278    54   210     5    54   927     0      64  }
 40279    54   210     5    54   927     0    2194  ENDMETHOD
 40280    54   210     5    54   928     0    2195  STARTMETHOD
 40281    54   261     5    54   928     0      10  public
 40282    54   261    12    54   928     0     111  ShortBuffer
 40283    54   261    24    54   928     0     111  put
 40284    54   261    27    54   928     0      59  (
 40285    54   261    28    54   928     0      12  short
 40286    54   261    34    54   928     0     111  x
 40287    54   261    35    54   928     0      60  )
 40288    54   261    37    54   928     0      63  {
 40289    54   266     9    54   928     0      20  throw
 40290    54   266    15    54   928     0      15  new
 40291    54   266    19    54   928     0     111  ReadOnlyBufferException
 40292    54   266    42    54   928     0      59  (
 40293    54   266    43    54   928     0      60  )
 40294    54   266    44    54   928     0     102  ;
 40295    54   268     5    54   928     0      64  }
 40296    54   268     5    54   928     0    2196  ENDMETHOD
 40297    54   268     5    54   929     0    2197  STARTMETHOD
 40298    54   270     5    54   929     0      10  public
 40299    54   270    12    54   929     0     111  ShortBuffer
 40300    54   270    24    54   929     0     111  put
 40301    54   270    27    54   929     0      59  (
 40302    54   270    28    54   929     0      36  int
 40303    54   270    32    54   929     0     111  i
 40304    54   270    33    54   929     0      66  ,
 40305    54   270    35    54   929     0      12  short
 40306    54   270    41    54   929     0     111  x
 40307    54   270    42    54   929     0      60  )
 40308    54   270    44    54   929     0      63  {
 40309    54   275     9    54   929     0      20  throw
 40310    54   275    15    54   929     0      15  new
 40311    54   275    19    54   929     0     111  ReadOnlyBufferException
 40312    54   275    42    54   929     0      59  (
 40313    54   275    43    54   929     0      60  )
 40314    54   275    44    54   929     0     102  ;
 40315    54   277     5    54   929     0      64  }
 40316    54   277     5    54   929     0    2198  ENDMETHOD
 40317    54   277     5    54   930     0    2199  STARTMETHOD
 40318    54   279     5    54   930     0      10  public
 40319    54   279    12    54   930     0     111  ShortBuffer
 40320    54   279    24    54   930     0     111  put
 40321    54   279    27    54   930     0      59  (
 40322    54   279    28    54   930     0     111  ShortBuffer
 40323    54   279    40    54   930     0     111  src
 40324    54   279    43    54   930     0      60  )
 40325    54   279    45    54   930     0      63  {
 40326    54   316     9    54   930     0      20  throw
 40327    54   316    15    54   930     0      15  new
 40328    54   316    19    54   930     0     111  ReadOnlyBufferException
 40329    54   316    42    54   930     0      59  (
 40330    54   316    43    54   930     0      60  )
 40331    54   316    44    54   930     0     102  ;
 40332    54   318     5    54   930     0      64  }
 40333    54   318     5    54   930     0    2200  ENDMETHOD
 40334    54   318     5    54   931     0    2201  STARTMETHOD
 40335    54   320     5    54   931     0      10  public
 40336    54   320    12    54   931     0     111  ShortBuffer
 40337    54   320    24    54   931     0     111  put
 40338    54   320    27    54   931     0      59  (
 40339    54   320    28    54   931     0      12  short
 40340    54   320    33    54   931     0      61  [
 40341    54   320    34    54   931     0      62  ]
 40342    54   320    36    54   931     0     111  src
 40343    54   320    39    54   931     0      66  ,
 40344    54   320    41    54   931     0      36  int
 40345    54   320    45    54   931     0     111  offset
 40346    54   320    51    54   931     0      66  ,
 40347    54   320    53    54   931     0      36  int
 40348    54   320    57    54   931     0     111  length
 40349    54   320    63    54   931     0      60  )
 40350    54   320    65    54   931     0      63  {
 40351    54   343     9    54   931     0      20  throw
 40352    54   343    15    54   931     0      15  new
 40353    54   343    19    54   931     0     111  ReadOnlyBufferException
 40354    54   343    42    54   931     0      59  (
 40355    54   343    43    54   931     0      60  )
 40356    54   343    44    54   931     0     102  ;
 40357    54   345     5    54   931     0      64  }
 40358    54   345     5    54   931     0    2202  ENDMETHOD
 40359    54   345     5    54   932     0    2203  STARTMETHOD
 40360    54   347     5    54   932     0      10  public
 40361    54   347    12    54   932     0     111  ShortBuffer
 40362    54   347    24    54   932     0     111  compact
 40363    54   347    31    54   932     0      59  (
 40364    54   347    32    54   932     0      60  )
 40365    54   347    34    54   932     0      63  {
 40366    54   360     9    54   932     0      20  throw
 40367    54   360    15    54   932     0      15  new
 40368    54   360    19    54   932     0     111  ReadOnlyBufferException
 40369    54   360    42    54   932     0      59  (
 40370    54   360    43    54   932     0      60  )
 40371    54   360    44    54   932     1     102  ;
 40372    54   362     5    54   932     1      64  }
 40373    54   362     5    54   932     0    2204  ENDMETHOD
 40374    54   362     5    54   933     0    2205  STARTMETHOD
 40375    54   364     5    54   933     0      10  public
 40376    54   364    12    54   933     0      39  boolean
 40377    54   364    20    54   933     0     111  isDirect
 40378    54   364    28    54   933     0      59  (
 40379    54   364    29    54   933     0      60  )
 40380    54   364    31    54   933     0      63  {
 40381    54   365     9    54   933     0      19  return
 40382    54   365    16    54   933     0      52  true
 40383    54   365    20    54   933     1     102  ;
 40384    54   366     5    54   933     1      64  }
 40385    54   366     5    54   933     0    2206  ENDMETHOD
 40386    54   366     5    54   934     0    2207  STARTMETHOD
 40387    54   368     5    54   934     0      10  public
 40388    54   368    12    54   934     0      39  boolean
 40389    54   368    20    54   934     0     111  isReadOnly
 40390    54   368    30    54   934     0      59  (
 40391    54   368    31    54   934     0      60  )
 40392    54   368    33    54   934     0      63  {
 40393    54   369     9    54   934     0      19  return
 40394    54   369    16    54   934     0      52  true
 40395    54   369    20    54   934     1     102  ;
 40396    54   370     5    54   934     1      64  }
 40397    54   370     5    54   934     0    2208  ENDMETHOD
 40398    54   370     5    54   935     0    2209  STARTMETHOD
 40399    54   416     5    54   935     0      10  public
 40400    54   416    12    54   935     0     111  ByteOrder
 40401    54   416    22    54   935     0     111  order
 40402    54   416    27    54   935     0      59  (
 40403    54   416    28    54   935     0      60  )
 40404    54   416    30    54   935     0      63  {
 40405    54   422     9    54   935     0      19  return
 40406    54   422    16    54   935     0      59  (
 40407    54   422    17    54   935     0      59  (
 40408    54   422    18    54   935     0     111  ByteOrder.nativeOrder
 40409    54   422    39    54   935     0      59  (
 40410    54   422    40    54   935     0      60  )
 40411    54   422    42    54   935     0      71  !=
 40412    54   422    45    54   935     0     111  ByteOrder.BIG_ENDIAN
 40413    54   422    65    54   935     0      60  )
 40414    54   423    17    54   935     0      58  ?
 40415    54   423    19    54   935     0     111  ByteOrder.LITTLE_ENDIAN
 40416    54   423    43    54   935     0      65  :
 40417    54   423    45    54   935     0     111  ByteOrder.BIG_ENDIAN
 40418    54   423    65    54   935     0      60  )
 40419    54   423    66    54   935     0     102  ;
 40420    54   425     5    54   935     0      64  }
 40421    54   425     5    54   935     0    2210  ENDMETHOD
 40422    54   452     1    54    -1     0      64  }
 40423    54   452     1    54    -1     1    2211  ENDCLASS
 40424    54   452     1    -1    -1     1    2212  ENDFILE C:\javasrc\java\nio\DirectShortBufferRU.java
 40425    55     1     1    -1    -1     1    2213  STARTFILE C:\javasrc\java\nio\DirectShortBufferS.java
 40426    55    28     1    -1    -1     0       5  package
 40427    55    28     9    -1    -1     0     111  java.nio
 40428    55    28    17    -1    -1     0     102  ;
 40429    55    30     1    -1    -1     1      49  import
 40430    55    30     8    -1    -1     1     111  sun.misc.Cleaner
 40431    55    30    24    -1    -1     1     102  ;
 40432    55    31     1    -1    -1     1      49  import
 40433    55    31     8    -1    -1     1     111  sun.misc.Unsafe
 40434    55    31    23    -1    -1     1     102  ;
 40435    55    32     1    -1    -1     1      49  import
 40436    55    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 40437    55    32    31    -1    -1     1     102  ;
 40438    55    33     1    -1    -1     1      49  import
 40439    55    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 40440    55    33    34    -1    -1     1     102  ;
 40441    55    36     1    55    -1     0    2214  STARTCLASS
 40442    55    36     1    55    -1     0      24  class
 40443    55    36     7    55    -1     0     111  DirectShortBufferS
 40444    55    38     5    55    -1     0      38  extends
 40445    55    38    13    55    -1     0     111  ShortBuffer
 40446    55    42     5    55    -1     0      17  implements
 40447    55    42    16    55    -1     0     111  DirectBuffer
 40448    55    43     1    55    -1     0      63  {
 40449    55    48     5    55    -1     0      23  protected
 40450    55    48    15    55    -1     0      45  static
 40451    55    48    22    55    -1     0       6  final
 40452    55    48    28    55    -1     0     111  Unsafe
 40453    55    48    35    55    -1     0     111  unsafe
 40454    55    48    42    55    -1     0      67  =
 40455    55    48    44    55    -1     0     111  Bits.unsafe
 40456    55    48    55    55    -1     0      59  (
 40457    55    48    56    55    -1     0      60  )
 40458    55    48    57    55    -1     0     102  ;
 40459    55    51     5    55    -1     0      23  protected
 40460    55    51    15    55    -1     0      45  static
 40461    55    51    22    55    -1     0       6  final
 40462    55    51    28    55    -1     0      39  boolean
 40463    55    51    36    55    -1     0     111  unaligned
 40464    55    51    46    55    -1     0      67  =
 40465    55    51    48    55    -1     0     111  Bits.unaligned
 40466    55    51    62    55    -1     0      59  (
 40467    55    51    63    55    -1     0      60  )
 40468    55    51    64    55    -1     0     102  ;
 40469    55    59     5    55    -1     0      23  protected
 40470    55    59    15    55    -1     0     111  Object
 40471    55    59    22    55    -1     0     111  viewedBuffer
 40472    55    59    35    55    -1     0      67  =
 40473    55    59    37    55    -1     0      21  null
 40474    55    59    41    55    -1     0     102  ;
 40475    55    59    41    55   936     0    2215  STARTMETHOD
 40476    55    61     5    55   936     0      10  public
 40477    55    61    12    55   936     0     111  Object
 40478    55    61    19    55   936     0     111  viewedBuffer
 40479    55    61    31    55   936     0      59  (
 40480    55    61    32    55   936     0      60  )
 40481    55    61    34    55   936     0      63  {
 40482    55    62     9    55   936     0      19  return
 40483    55    62    16    55   936     0     111  viewedBuffer
 40484    55    62    28    55   936     0     102  ;
 40485    55    63     5    55   936     0      64  }
 40486    55    63     5    55   936     0    2216  ENDMETHOD
 40487    55    63     5    55   937     0    2217  STARTMETHOD
 40488    55   100     5    55   937     0      10  public
 40489    55   100    12    55   937     0     111  Cleaner
 40490    55   100    20    55   937     0     111  cleaner
 40491    55   100    27    55   937     0      59  (
 40492    55   100    28    55   937     0      60  )
 40493    55   100    30    55   937     0      63  {
 40494    55   100    32    55   937     0      19  return
 40495    55   100    39    55   937     0      21  null
 40496    55   100    43    55   937     0     102  ;
 40497    55   100    45    55   937     0      64  }
 40498    55   100    45    55   937     0    2218  ENDMETHOD
 40499    55   100    45    55   938     0    2219  STARTMETHOD
 40500    55   164     5    55   938     0     111  DirectShortBufferS
 40501    55   164    23    55   938     0      59  (
 40502    55   164    24    55   938     0     111  DirectBuffer
 40503    55   164    37    55   938     0     111  db
 40504    55   164    39    55   938     0      66  ,
 40505    55   165    32    55   938     0      36  int
 40506    55   165    36    55   938     0     111  mark
 40507    55   165    40    55   938     0      66  ,
 40508    55   165    42    55   938     0      36  int
 40509    55   165    46    55   938     0     111  pos
 40510    55   165    49    55   938     0      66  ,
 40511    55   165    51    55   938     0      36  int
 40512    55   165    55    55   938     0     111  lim
 40513    55   165    58    55   938     0      66  ,
 40514    55   165    60    55   938     0      36  int
 40515    55   165    64    55   938     0     111  cap
 40516    55   165    67    55   938     0      66  ,
 40517    55   166    32    55   938     0      36  int
 40518    55   166    36    55   938     0     111  off
 40519    55   166    39    55   938     0      60  )
 40520    55   167     5    55   938     0      63  {
 40521    55   169     9    55   938     0      27  super
 40522    55   169    14    55   938     0      59  (
 40523    55   169    15    55   938     0     111  mark
 40524    55   169    19    55   938     0      66  ,
 40525    55   169    21    55   938     0     111  pos
 40526    55   169    24    55   938     0      66  ,
 40527    55   169    26    55   938     0     111  lim
 40528    55   169    29    55   938     0      66  ,
 40529    55   169    31    55   938     0     111  cap
 40530    55   169    34    55   938     0      60  )
 40531    55   169    35    55   938     0     102  ;
 40532    55   170     9    55   938     0     111  address
 40533    55   170    17    55   938     0      67  =
 40534    55   170    19    55   938     0     111  db.address
 40535    55   170    29    55   938     0      59  (
 40536    55   170    30    55   938     0      60  )
 40537    55   170    32    55   938     0      74  +
 40538    55   170    34    55   938     0     111  off
 40539    55   170    37    55   938     0     102  ;
 40540    55   171     9    55   938     0     111  viewedBuffer
 40541    55   171    22    55   938     0      67  =
 40542    55   171    24    55   938     0     111  db
 40543    55   171    26    55   938     0     102  ;
 40544    55   178     5    55   938     0      64  }
 40545    55   178     5    55   938     0    2220  ENDMETHOD
 40546    55   178     5    55   939     0    2221  STARTMETHOD
 40547    55   180     5    55   939     0      10  public
 40548    55   180    12    55   939     0     111  ShortBuffer
 40549    55   180    24    55   939     0     111  slice
 40550    55   180    29    55   939     0      59  (
 40551    55   180    30    55   939     0      60  )
 40552    55   180    32    55   939     0      63  {
 40553    55   181     9    55   939     1      36  int
 40554    55   181    13    55   939     1     111  pos
 40555    55   181    17    55   939     1      67  =
 40556    55   181    19    55   939     1     111  this.position
 40557    55   181    32    55   939     1      59  (
 40558    55   181    33    55   939     1      60  )
 40559    55   181    34    55   939     1     102  ;
 40560    55   182     9    55   939     1      36  int
 40561    55   182    13    55   939     1     111  lim
 40562    55   182    17    55   939     1      67  =
 40563    55   182    19    55   939     1     111  this.limit
 40564    55   182    29    55   939     1      59  (
 40565    55   182    30    55   939     1      60  )
 40566    55   182    31    55   939     1     102  ;
 40567    55   183     9    55   939     0     111  assert
 40568    55   183    16    55   939     0      59  (
 40569    55   183    17    55   939     0     111  pos
 40570    55   183    21    55   939     0      92  <=
 40571    55   183    24    55   939     0     111  lim
 40572    55   183    27    55   939     0      60  )
 40573    55   183    28    55   939     0     102  ;
 40574    55   184     9    55   939     0      36  int
 40575    55   184    13    55   939     0     111  rem
 40576    55   184    17    55   939     0      67  =
 40577    55   184    19    55   939     0      59  (
 40578    55   184    20    55   939     0     111  pos
 40579    55   184    24    55   939     0      92  <=
 40580    55   184    27    55   939     0     111  lim
 40581    55   184    31    55   939     0      58  ?
 40582    55   184    33    55   939     0     111  lim
 40583    55   184    37    55   939     0      77  -
 40584    55   184    39    55   939     0     111  pos
 40585    55   184    43    55   939     0      65  :
 40586    55   184    45    55   939     0     112  0
 40587    55   184    46    55   939     0      60  )
 40588    55   184    47    55   939     0     102  ;
 40589    55   185     9    55   939     0      36  int
 40590    55   185    13    55   939     0     111  off
 40591    55   185    17    55   939     0      67  =
 40592    55   185    19    55   939     0      59  (
 40593    55   185    20    55   939     0     111  pos
 40594    55   185    24    55   939     0      90  <<
 40595    55   185    27    55   939     0     112  1
 40596    55   185    28    55   939     0      60  )
 40597    55   185    29    55   939     0     102  ;
 40598    55   186     9    55   939     0     111  assert
 40599    55   186    16    55   939     0      59  (
 40600    55   186    17    55   939     0     111  off
 40601    55   186    21    55   939     0      88  >=
 40602    55   186    24    55   939     0     112  0
 40603    55   186    25    55   939     0      60  )
 40604    55   186    26    55   939     0     102  ;
 40605    55   187     9    55   939     0      19  return
 40606    55   187    16    55   939     0      15  new
 40607    55   187    20    55   939     0     111  DirectShortBufferS
 40608    55   187    38    55   939     0      59  (
 40609    55   187    39    55   939     0      44  this
 40610    55   187    43    55   939     0      66  ,
 40611    55   187    45    55   939     0      77  -
 40612    55   187    46    55   939     0     112  1
 40613    55   187    47    55   939     0      66  ,
 40614    55   187    49    55   939     0     112  0
 40615    55   187    50    55   939     0      66  ,
 40616    55   187    52    55   939     0     111  rem
 40617    55   187    55    55   939     0      66  ,
 40618    55   187    57    55   939     0     111  rem
 40619    55   187    60    55   939     0      66  ,
 40620    55   187    62    55   939     0     111  off
 40621    55   187    65    55   939     1      60  )
 40622    55   187    66    55   939     1     102  ;
 40623    55   188     5    55   939     1      64  }
 40624    55   188     5    55   939     0    2222  ENDMETHOD
 40625    55   188     5    55   940     0    2223  STARTMETHOD
 40626    55   190     5    55   940     0      10  public
 40627    55   190    12    55   940     0     111  ShortBuffer
 40628    55   190    24    55   940     0     111  duplicate
 40629    55   190    33    55   940     0      59  (
 40630    55   190    34    55   940     0      60  )
 40631    55   190    36    55   940     0      63  {
 40632    55   191     9    55   940     0      19  return
 40633    55   191    16    55   940     0      15  new
 40634    55   191    20    55   940     0     111  DirectShortBufferS
 40635    55   191    38    55   940     0      59  (
 40636    55   191    39    55   940     0      44  this
 40637    55   191    43    55   940     0      66  ,
 40638    55   192    47    55   940     1     111  this.markValue
 40639    55   192    61    55   940     1      59  (
 40640    55   192    62    55   940     1      60  )
 40641    55   192    63    55   940     1      66  ,
 40642    55   193    47    55   940     1     111  this.position
 40643    55   193    60    55   940     1      59  (
 40644    55   193    61    55   940     1      60  )
 40645    55   193    62    55   940     1      66  ,
 40646    55   194    47    55   940     1     111  this.limit
 40647    55   194    57    55   940     1      59  (
 40648    55   194    58    55   940     1      60  )
 40649    55   194    59    55   940     1      66  ,
 40650    55   195    47    55   940     1     111  this.capacity
 40651    55   195    60    55   940     1      59  (
 40652    55   195    61    55   940     1      60  )
 40653    55   195    62    55   940     1      66  ,
 40654    55   196    47    55   940     0     112  0
 40655    55   196    48    55   940     1      60  )
 40656    55   196    49    55   940     1     102  ;
 40657    55   197     5    55   940     1      64  }
 40658    55   197     5    55   940     0    2224  ENDMETHOD
 40659    55   197     5    55   941     0    2225  STARTMETHOD
 40660    55   199     5    55   941     0      10  public
 40661    55   199    12    55   941     0     111  ShortBuffer
 40662    55   199    24    55   941     0     111  asReadOnlyBuffer
 40663    55   199    40    55   941     0      59  (
 40664    55   199    41    55   941     0      60  )
 40665    55   199    43    55   941     0      63  {
 40666    55   201     9    55   941     0      19  return
 40667    55   201    16    55   941     0      15  new
 40668    55   201    20    55   941     0     111  DirectShortBufferRS
 40669    55   201    39    55   941     0      59  (
 40670    55   201    40    55   941     0      44  this
 40671    55   201    44    55   941     0      66  ,
 40672    55   202    44    55   941     1     111  this.markValue
 40673    55   202    58    55   941     1      59  (
 40674    55   202    59    55   941     1      60  )
 40675    55   202    60    55   941     1      66  ,
 40676    55   203    44    55   941     1     111  this.position
 40677    55   203    57    55   941     1      59  (
 40678    55   203    58    55   941     1      60  )
 40679    55   203    59    55   941     1      66  ,
 40680    55   204    44    55   941     1     111  this.limit
 40681    55   204    54    55   941     1      59  (
 40682    55   204    55    55   941     1      60  )
 40683    55   204    56    55   941     1      66  ,
 40684    55   205    44    55   941     1     111  this.capacity
 40685    55   205    57    55   941     1      59  (
 40686    55   205    58    55   941     1      60  )
 40687    55   205    59    55   941     1      66  ,
 40688    55   206    44    55   941     0     112  0
 40689    55   206    45    55   941     1      60  )
 40690    55   206    46    55   941     1     102  ;
 40691    55   210     5    55   941     1      64  }
 40692    55   210     5    55   941     0    2226  ENDMETHOD
 40693    55   210     5    55   942     0    2227  STARTMETHOD
 40694    55   214     5    55   942     0      10  public
 40695    55   214    12    55   942     0      53  long
 40696    55   214    17    55   942     0     111  address
 40697    55   214    24    55   942     0      59  (
 40698    55   214    25    55   942     0      60  )
 40699    55   214    27    55   942     0      63  {
 40700    55   215     9    55   942     0      19  return
 40701    55   215    16    55   942     0     111  address
 40702    55   215    23    55   942     0     102  ;
 40703    55   216     5    55   942     0      64  }
 40704    55   216     5    55   942     0    2228  ENDMETHOD
 40705    55   216     5    55   943     0    2229  STARTMETHOD
 40706    55   218     5    55   943     0      41  private
 40707    55   218    13    55   943     0      53  long
 40708    55   218    18    55   943     0     111  ix
 40709    55   218    20    55   943     0      59  (
 40710    55   218    21    55   943     0      36  int
 40711    55   218    25    55   943     0     111  i
 40712    55   218    26    55   943     0      60  )
 40713    55   218    28    55   943     0      63  {
 40714    55   219     9    55   943     0      19  return
 40715    55   219    16    55   943     0     111  address
 40716    55   219    24    55   943     0      74  +
 40717    55   219    26    55   943     0      59  (
 40718    55   219    27    55   943     0     111  i
 40719    55   219    29    55   943     0      90  <<
 40720    55   219    32    55   943     0     112  1
 40721    55   219    33    55   943     0      60  )
 40722    55   219    34    55   943     0     102  ;
 40723    55   220     5    55   943     0      64  }
 40724    55   220     5    55   943     0    2230  ENDMETHOD
 40725    55   220     5    55   944     0    2231  STARTMETHOD
 40726    55   222     5    55   944     0      10  public
 40727    55   222    12    55   944     0      12  short
 40728    55   222    18    55   944     0     111  get
 40729    55   222    21    55   944     0      59  (
 40730    55   222    22    55   944     0      60  )
 40731    55   222    24    55   944     0      63  {
 40732    55   223     9    55   944     0      19  return
 40733    55   223    16    55   944     0      59  (
 40734    55   223    17    55   944     0     111  Bits.swap
 40735    55   223    26    55   944     0      59  (
 40736    55   223    27    55   944     0     111  unsafe.getShort
 40737    55   223    42    55   944     0      59  (
 40738    55   223    43    55   944     0     111  ix
 40739    55   223    45    55   944     0      59  (
 40740    55   223    46    55   944     0     111  nextGetIndex
 40741    55   223    58    55   944     0      59  (
 40742    55   223    59    55   944     0      60  )
 40743    55   223    60    55   944     0      60  )
 40744    55   223    61    55   944     0      60  )
 40745    55   223    62    55   944     0      60  )
 40746    55   223    63    55   944     0      60  )
 40747    55   223    64    55   944     0     102  ;
 40748    55   224     5    55   944     0      64  }
 40749    55   224     5    55   944     0    2232  ENDMETHOD
 40750    55   224     5    55   945     0    2233  STARTMETHOD
 40751    55   226     5    55   945     0      10  public
 40752    55   226    12    55   945     0      12  short
 40753    55   226    18    55   945     0     111  get
 40754    55   226    21    55   945     0      59  (
 40755    55   226    22    55   945     0      36  int
 40756    55   226    26    55   945     0     111  i
 40757    55   226    27    55   945     0      60  )
 40758    55   226    29    55   945     0      63  {
 40759    55   227     9    55   945     0      19  return
 40760    55   227    16    55   945     0      59  (
 40761    55   227    17    55   945     0     111  Bits.swap
 40762    55   227    26    55   945     0      59  (
 40763    55   227    27    55   945     0     111  unsafe.getShort
 40764    55   227    42    55   945     0      59  (
 40765    55   227    43    55   945     0     111  ix
 40766    55   227    45    55   945     0      59  (
 40767    55   227    46    55   945     0     111  checkIndex
 40768    55   227    56    55   945     0      59  (
 40769    55   227    57    55   945     0     111  i
 40770    55   227    58    55   945     0      60  )
 40771    55   227    59    55   945     0      60  )
 40772    55   227    60    55   945     0      60  )
 40773    55   227    61    55   945     0      60  )
 40774    55   227    62    55   945     0      60  )
 40775    55   227    63    55   945     0     102  ;
 40776    55   228     5    55   945     0      64  }
 40777    55   228     5    55   945     0    2234  ENDMETHOD
 40778    55   228     5    55   946     0    2235  STARTMETHOD
 40779    55   230     5    55   946     0      10  public
 40780    55   230    12    55   946     0     111  ShortBuffer
 40781    55   230    24    55   946     0     111  get
 40782    55   230    27    55   946     0      59  (
 40783    55   230    28    55   946     0      12  short
 40784    55   230    33    55   946     0      61  [
 40785    55   230    34    55   946     0      62  ]
 40786    55   230    36    55   946     0     111  dst
 40787    55   230    39    55   946     0      66  ,
 40788    55   230    41    55   946     0      36  int
 40789    55   230    45    55   946     0     111  offset
 40790    55   230    51    55   946     0      66  ,
 40791    55   230    53    55   946     0      36  int
 40792    55   230    57    55   946     0     111  length
 40793    55   230    63    55   946     0      60  )
 40794    55   230    65    55   946     0      63  {
 40795    55   232     9    55   946     0      31  if
 40796    55   232    12    55   946     0      59  (
 40797    55   232    13    55   946     0      59  (
 40798    55   232    14    55   946     0     111  length
 40799    55   232    21    55   946     0      90  <<
 40800    55   232    24    55   946     0     112  1
 40801    55   232    25    55   946     0      60  )
 40802    55   232    27    55   946     0      89  >
 40803    55   232    29    55   946     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 40804    55   232    61    55   946     0      60  )
 40805    55   232    63    55   946     0      63  {
 40806    55   233    13    55   946     0     111  checkBounds
 40807    55   233    24    55   946     0      59  (
 40808    55   233    25    55   946     0     111  offset
 40809    55   233    31    55   946     0      66  ,
 40810    55   233    33    55   946     0     111  length
 40811    55   233    39    55   946     0      66  ,
 40812    55   233    41    55   946     0     111  dst.length
 40813    55   233    51    55   946     0      60  )
 40814    55   233    52    55   946     0     102  ;
 40815    55   234    13    55   946     1      36  int
 40816    55   234    17    55   946     1     111  pos
 40817    55   234    21    55   946     1      67  =
 40818    55   234    23    55   946     1     111  position
 40819    55   234    31    55   946     1      59  (
 40820    55   234    32    55   946     1      60  )
 40821    55   234    33    55   946     1     102  ;
 40822    55   235    13    55   946     1      36  int
 40823    55   235    17    55   946     1     111  lim
 40824    55   235    21    55   946     1      67  =
 40825    55   235    23    55   946     1     111  limit
 40826    55   235    28    55   946     1      59  (
 40827    55   235    29    55   946     1      60  )
 40828    55   235    30    55   946     1     102  ;
 40829    55   236    13    55   946     0     111  assert
 40830    55   236    20    55   946     0      59  (
 40831    55   236    21    55   946     0     111  pos
 40832    55   236    25    55   946     0      92  <=
 40833    55   236    28    55   946     0     111  lim
 40834    55   236    31    55   946     0      60  )
 40835    55   236    32    55   946     0     102  ;
 40836    55   237    13    55   946     0      36  int
 40837    55   237    17    55   946     0     111  rem
 40838    55   237    21    55   946     0      67  =
 40839    55   237    23    55   946     0      59  (
 40840    55   237    24    55   946     0     111  pos
 40841    55   237    28    55   946     0      92  <=
 40842    55   237    31    55   946     0     111  lim
 40843    55   237    35    55   946     0      58  ?
 40844    55   237    37    55   946     0     111  lim
 40845    55   237    41    55   946     0      77  -
 40846    55   237    43    55   946     0     111  pos
 40847    55   237    47    55   946     0      65  :
 40848    55   237    49    55   946     0     112  0
 40849    55   237    50    55   946     0      60  )
 40850    55   237    51    55   946     0     102  ;
 40851    55   238    13    55   946     0      31  if
 40852    55   238    16    55   946     0      59  (
 40853    55   238    17    55   946     0     111  length
 40854    55   238    24    55   946     0      89  >
 40855    55   238    26    55   946     0     111  rem
 40856    55   238    29    55   946     0      60  )
 40857    55   239    17    55   946     0      20  throw
 40858    55   239    23    55   946     0      15  new
 40859    55   239    27    55   946     0     111  BufferUnderflowException
 40860    55   239    51    55   946     0      59  (
 40861    55   239    52    55   946     0      60  )
 40862    55   239    53    55   946     0     102  ;
 40863    55   241    13    55   946     0      31  if
 40864    55   241    16    55   946     0      59  (
 40865    55   241    17    55   946     0     111  order
 40866    55   241    22    55   946     0      59  (
 40867    55   241    23    55   946     0      60  )
 40868    55   241    25    55   946     0      71  !=
 40869    55   241    28    55   946     0     111  ByteOrder.nativeOrder
 40870    55   241    49    55   946     0      59  (
 40871    55   241    50    55   946     0      60  )
 40872    55   241    51    55   946     0      60  )
 40873    55   242    17    55   946     0     111  Bits.copyToShortArray
 40874    55   242    38    55   946     0      59  (
 40875    55   242    39    55   946     0     111  ix
 40876    55   242    41    55   946     0      59  (
 40877    55   242    42    55   946     0     111  pos
 40878    55   242    45    55   946     0      60  )
 40879    55   242    46    55   946     0      66  ,
 40880    55   242    48    55   946     0     111  dst
 40881    55   242    51    55   946     0      66  ,
 40882    55   243    43    55   946     0     111  offset
 40883    55   243    50    55   946     0      90  <<
 40884    55   243    53    55   946     0     112  1
 40885    55   243    54    55   946     0      66  ,
 40886    55   244    43    55   946     0     111  length
 40887    55   244    50    55   946     0      90  <<
 40888    55   244    53    55   946     0     112  1
 40889    55   244    54    55   946     0      60  )
 40890    55   244    55    55   946     0     102  ;
 40891    55   245    13    55   946     0      48  else
 40892    55   246    17    55   946     0     111  Bits.copyToByteArray
 40893    55   246    37    55   946     0      59  (
 40894    55   246    38    55   946     0     111  ix
 40895    55   246    40    55   946     0      59  (
 40896    55   246    41    55   946     0     111  pos
 40897    55   246    44    55   946     0      60  )
 40898    55   246    45    55   946     0      66  ,
 40899    55   246    47    55   946     0     111  dst
 40900    55   246    50    55   946     0      66  ,
 40901    55   247    38    55   946     0     111  offset
 40902    55   247    45    55   946     0      90  <<
 40903    55   247    48    55   946     0     112  1
 40904    55   247    49    55   946     0      66  ,
 40905    55   248    38    55   946     0     111  length
 40906    55   248    45    55   946     0      90  <<
 40907    55   248    48    55   946     0     112  1
 40908    55   248    49    55   946     0      60  )
 40909    55   248    50    55   946     0     102  ;
 40910    55   249    13    55   946     0     111  position
 40911    55   249    21    55   946     0      59  (
 40912    55   249    22    55   946     0     111  pos
 40913    55   249    26    55   946     0      74  +
 40914    55   249    28    55   946     0     111  length
 40915    55   249    34    55   946     0      60  )
 40916    55   249    35    55   946     0     102  ;
 40917    55   250     9    55   946     0      64  }
 40918    55   250    11    55   946     0      48  else
 40919    55   250    16    55   946     0      63  {
 40920    55   251    13    55   946     0     111  super.get
 40921    55   251    22    55   946     0      59  (
 40922    55   251    23    55   946     0     111  dst
 40923    55   251    26    55   946     0      66  ,
 40924    55   251    28    55   946     0     111  offset
 40925    55   251    34    55   946     0      66  ,
 40926    55   251    36    55   946     0     111  length
 40927    55   251    42    55   946     0      60  )
 40928    55   251    43    55   946     0     102  ;
 40929    55   252     9    55   946     0      64  }
 40930    55   253     9    55   946     0      19  return
 40931    55   253    16    55   946     0      44  this
 40932    55   253    20    55   946     0     102  ;
 40933    55   257     5    55   946     0      64  }
 40934    55   257     5    55   946     0    2236  ENDMETHOD
 40935    55   257     5    55   947     0    2237  STARTMETHOD
 40936    55   261     5    55   947     0      10  public
 40937    55   261    12    55   947     0     111  ShortBuffer
 40938    55   261    24    55   947     0     111  put
 40939    55   261    27    55   947     0      59  (
 40940    55   261    28    55   947     0      12  short
 40941    55   261    34    55   947     0     111  x
 40942    55   261    35    55   947     0      60  )
 40943    55   261    37    55   947     0      63  {
 40944    55   263     9    55   947     0     111  unsafe.putShort
 40945    55   263    24    55   947     0      59  (
 40946    55   263    25    55   947     0     111  ix
 40947    55   263    27    55   947     0      59  (
 40948    55   263    28    55   947     0     111  nextPutIndex
 40949    55   263    40    55   947     0      59  (
 40950    55   263    41    55   947     0      60  )
 40951    55   263    42    55   947     0      60  )
 40952    55   263    43    55   947     0      66  ,
 40953    55   263    45    55   947     0     111  Bits.swap
 40954    55   263    54    55   947     0      59  (
 40955    55   263    55    55   947     0      59  (
 40956    55   263    56    55   947     0     111  x
 40957    55   263    57    55   947     0      60  )
 40958    55   263    58    55   947     0      60  )
 40959    55   263    59    55   947     0      60  )
 40960    55   263    60    55   947     0     102  ;
 40961    55   264     9    55   947     0      19  return
 40962    55   264    16    55   947     0      44  this
 40963    55   264    20    55   947     0     102  ;
 40964    55   268     5    55   947     0      64  }
 40965    55   268     5    55   947     0    2238  ENDMETHOD
 40966    55   268     5    55   948     0    2239  STARTMETHOD
 40967    55   270     5    55   948     0      10  public
 40968    55   270    12    55   948     0     111  ShortBuffer
 40969    55   270    24    55   948     0     111  put
 40970    55   270    27    55   948     0      59  (
 40971    55   270    28    55   948     0      36  int
 40972    55   270    32    55   948     0     111  i
 40973    55   270    33    55   948     0      66  ,
 40974    55   270    35    55   948     0      12  short
 40975    55   270    41    55   948     0     111  x
 40976    55   270    42    55   948     0      60  )
 40977    55   270    44    55   948     0      63  {
 40978    55   272     9    55   948     0     111  unsafe.putShort
 40979    55   272    24    55   948     0      59  (
 40980    55   272    25    55   948     0     111  ix
 40981    55   272    27    55   948     0      59  (
 40982    55   272    28    55   948     0     111  checkIndex
 40983    55   272    38    55   948     0      59  (
 40984    55   272    39    55   948     0     111  i
 40985    55   272    40    55   948     0      60  )
 40986    55   272    41    55   948     0      60  )
 40987    55   272    42    55   948     0      66  ,
 40988    55   272    44    55   948     0     111  Bits.swap
 40989    55   272    53    55   948     0      59  (
 40990    55   272    54    55   948     0      59  (
 40991    55   272    55    55   948     0     111  x
 40992    55   272    56    55   948     0      60  )
 40993    55   272    57    55   948     0      60  )
 40994    55   272    58    55   948     0      60  )
 40995    55   272    59    55   948     0     102  ;
 40996    55   273     9    55   948     0      19  return
 40997    55   273    16    55   948     0      44  this
 40998    55   273    20    55   948     0     102  ;
 40999    55   277     5    55   948     0      64  }
 41000    55   277     5    55   948     0    2240  ENDMETHOD
 41001    55   277     5    55   949     0    2241  STARTMETHOD
 41002    55   279     5    55   949     0      10  public
 41003    55   279    12    55   949     0     111  ShortBuffer
 41004    55   279    24    55   949     0     111  put
 41005    55   279    27    55   949     0      59  (
 41006    55   279    28    55   949     0     111  ShortBuffer
 41007    55   279    40    55   949     0     111  src
 41008    55   279    43    55   949     0      60  )
 41009    55   279    45    55   949     0      63  {
 41010    55   281     9    55   949     0      31  if
 41011    55   281    12    55   949     0      59  (
 41012    55   281    13    55   949     0     111  src
 41013    55   281    17    55   949     0      16  instanceof
 41014    55   281    28    55   949     0     111  DirectShortBufferS
 41015    55   281    46    55   949     0      60  )
 41016    55   281    48    55   949     0      63  {
 41017    55   282    13    55   949     0      31  if
 41018    55   282    16    55   949     0      59  (
 41019    55   282    17    55   949     0     111  src
 41020    55   282    21    55   949     0      68  ==
 41021    55   282    24    55   949     0      44  this
 41022    55   282    28    55   949     0      60  )
 41023    55   283    17    55   949     0      20  throw
 41024    55   283    23    55   949     0      15  new
 41025    55   283    27    55   949     0     111  IllegalArgumentException
 41026    55   283    51    55   949     0      59  (
 41027    55   283    52    55   949     0      60  )
 41028    55   283    53    55   949     0     102  ;
 41029    55   284    13    55   949     0     111  DirectShortBufferS
 41030    55   284    32    55   949     0     111  sb
 41031    55   284    35    55   949     0      67  =
 41032    55   284    37    55   949     0      59  (
 41033    55   284    38    55   949     0     111  DirectShortBufferS
 41034    55   284    56    55   949     0      60  )
 41035    55   284    57    55   949     0     111  src
 41036    55   284    60    55   949     0     102  ;
 41037    55   286    13    55   949     1      36  int
 41038    55   286    17    55   949     1     111  spos
 41039    55   286    22    55   949     1      67  =
 41040    55   286    24    55   949     1     111  sb.position
 41041    55   286    35    55   949     1      59  (
 41042    55   286    36    55   949     1      60  )
 41043    55   286    37    55   949     1     102  ;
 41044    55   287    13    55   949     1      36  int
 41045    55   287    17    55   949     1     111  slim
 41046    55   287    22    55   949     1      67  =
 41047    55   287    24    55   949     1     111  sb.limit
 41048    55   287    32    55   949     1      59  (
 41049    55   287    33    55   949     1      60  )
 41050    55   287    34    55   949     1     102  ;
 41051    55   288    13    55   949     0     111  assert
 41052    55   288    20    55   949     0      59  (
 41053    55   288    21    55   949     0     111  spos
 41054    55   288    26    55   949     0      92  <=
 41055    55   288    29    55   949     0     111  slim
 41056    55   288    33    55   949     0      60  )
 41057    55   288    34    55   949     0     102  ;
 41058    55   289    13    55   949     0      36  int
 41059    55   289    17    55   949     0     111  srem
 41060    55   289    22    55   949     0      67  =
 41061    55   289    24    55   949     0      59  (
 41062    55   289    25    55   949     0     111  spos
 41063    55   289    30    55   949     0      92  <=
 41064    55   289    33    55   949     0     111  slim
 41065    55   289    38    55   949     0      58  ?
 41066    55   289    40    55   949     0     111  slim
 41067    55   289    45    55   949     0      77  -
 41068    55   289    47    55   949     0     111  spos
 41069    55   289    52    55   949     0      65  :
 41070    55   289    54    55   949     0     112  0
 41071    55   289    55    55   949     0      60  )
 41072    55   289    56    55   949     0     102  ;
 41073    55   291    13    55   949     1      36  int
 41074    55   291    17    55   949     1     111  pos
 41075    55   291    21    55   949     1      67  =
 41076    55   291    23    55   949     1     111  position
 41077    55   291    31    55   949     1      59  (
 41078    55   291    32    55   949     1      60  )
 41079    55   291    33    55   949     1     102  ;
 41080    55   292    13    55   949     1      36  int
 41081    55   292    17    55   949     1     111  lim
 41082    55   292    21    55   949     1      67  =
 41083    55   292    23    55   949     1     111  limit
 41084    55   292    28    55   949     1      59  (
 41085    55   292    29    55   949     1      60  )
 41086    55   292    30    55   949     1     102  ;
 41087    55   293    13    55   949     0     111  assert
 41088    55   293    20    55   949     0      59  (
 41089    55   293    21    55   949     0     111  pos
 41090    55   293    25    55   949     0      92  <=
 41091    55   293    28    55   949     0     111  lim
 41092    55   293    31    55   949     0      60  )
 41093    55   293    32    55   949     0     102  ;
 41094    55   294    13    55   949     0      36  int
 41095    55   294    17    55   949     0     111  rem
 41096    55   294    21    55   949     0      67  =
 41097    55   294    23    55   949     0      59  (
 41098    55   294    24    55   949     0     111  pos
 41099    55   294    28    55   949     0      92  <=
 41100    55   294    31    55   949     0     111  lim
 41101    55   294    35    55   949     0      58  ?
 41102    55   294    37    55   949     0     111  lim
 41103    55   294    41    55   949     0      77  -
 41104    55   294    43    55   949     0     111  pos
 41105    55   294    47    55   949     0      65  :
 41106    55   294    49    55   949     0     112  0
 41107    55   294    50    55   949     0      60  )
 41108    55   294    51    55   949     0     102  ;
 41109    55   296    13    55   949     0      31  if
 41110    55   296    16    55   949     0      59  (
 41111    55   296    17    55   949     0     111  srem
 41112    55   296    22    55   949     0      89  >
 41113    55   296    24    55   949     0     111  rem
 41114    55   296    27    55   949     0      60  )
 41115    55   297    17    55   949     0      20  throw
 41116    55   297    23    55   949     0      15  new
 41117    55   297    27    55   949     0     111  BufferOverflowException
 41118    55   297    50    55   949     0      59  (
 41119    55   297    51    55   949     0      60  )
 41120    55   297    52    55   949     0     102  ;
 41121    55   298    13    55   949     0     111  unsafe.copyMemory
 41122    55   298    30    55   949     0      59  (
 41123    55   298    31    55   949     0     111  sb.ix
 41124    55   298    36    55   949     0      59  (
 41125    55   298    37    55   949     0     111  spos
 41126    55   298    41    55   949     0      60  )
 41127    55   298    42    55   949     0      66  ,
 41128    55   298    44    55   949     0     111  ix
 41129    55   298    46    55   949     0      59  (
 41130    55   298    47    55   949     0     111  pos
 41131    55   298    50    55   949     0      60  )
 41132    55   298    51    55   949     0      66  ,
 41133    55   298    53    55   949     0     111  srem
 41134    55   298    58    55   949     0      90  <<
 41135    55   298    61    55   949     0     112  1
 41136    55   298    62    55   949     0      60  )
 41137    55   298    63    55   949     0     102  ;
 41138    55   299    13    55   949     1     111  sb.position
 41139    55   299    24    55   949     1      59  (
 41140    55   299    25    55   949     1     111  spos
 41141    55   299    30    55   949     1      74  +
 41142    55   299    32    55   949     1     111  srem
 41143    55   299    36    55   949     1      60  )
 41144    55   299    37    55   949     1     102  ;
 41145    55   300    13    55   949     1     111  position
 41146    55   300    21    55   949     1      59  (
 41147    55   300    22    55   949     1     111  pos
 41148    55   300    26    55   949     1      74  +
 41149    55   300    28    55   949     1     111  srem
 41150    55   300    32    55   949     1      60  )
 41151    55   300    33    55   949     1     102  ;
 41152    55   301     9    55   949     0      64  }
 41153    55   301    11    55   949     0      48  else
 41154    55   301    16    55   949     0      31  if
 41155    55   301    19    55   949     0      59  (
 41156    55   301    20    55   949     0     111  src.hb
 41157    55   301    27    55   949     0      71  !=
 41158    55   301    30    55   949     0      21  null
 41159    55   301    34    55   949     0      60  )
 41160    55   301    36    55   949     0      63  {
 41161    55   303    13    55   949     1      36  int
 41162    55   303    17    55   949     1     111  spos
 41163    55   303    22    55   949     1      67  =
 41164    55   303    24    55   949     1     111  src.position
 41165    55   303    36    55   949     1      59  (
 41166    55   303    37    55   949     1      60  )
 41167    55   303    38    55   949     1     102  ;
 41168    55   304    13    55   949     1      36  int
 41169    55   304    17    55   949     1     111  slim
 41170    55   304    22    55   949     1      67  =
 41171    55   304    24    55   949     1     111  src.limit
 41172    55   304    33    55   949     1      59  (
 41173    55   304    34    55   949     1      60  )
 41174    55   304    35    55   949     1     102  ;
 41175    55   305    13    55   949     0     111  assert
 41176    55   305    20    55   949     0      59  (
 41177    55   305    21    55   949     0     111  spos
 41178    55   305    26    55   949     0      92  <=
 41179    55   305    29    55   949     0     111  slim
 41180    55   305    33    55   949     0      60  )
 41181    55   305    34    55   949     0     102  ;
 41182    55   306    13    55   949     0      36  int
 41183    55   306    17    55   949     0     111  srem
 41184    55   306    22    55   949     0      67  =
 41185    55   306    24    55   949     0      59  (
 41186    55   306    25    55   949     0     111  spos
 41187    55   306    30    55   949     0      92  <=
 41188    55   306    33    55   949     0     111  slim
 41189    55   306    38    55   949     0      58  ?
 41190    55   306    40    55   949     0     111  slim
 41191    55   306    45    55   949     0      77  -
 41192    55   306    47    55   949     0     111  spos
 41193    55   306    52    55   949     0      65  :
 41194    55   306    54    55   949     0     112  0
 41195    55   306    55    55   949     0      60  )
 41196    55   306    56    55   949     0     102  ;
 41197    55   308    13    55   949     0     111  put
 41198    55   308    16    55   949     0      59  (
 41199    55   308    17    55   949     0     111  src.hb
 41200    55   308    23    55   949     0      66  ,
 41201    55   308    25    55   949     0     111  src.offset
 41202    55   308    36    55   949     0      74  +
 41203    55   308    38    55   949     0     111  spos
 41204    55   308    42    55   949     0      66  ,
 41205    55   308    44    55   949     0     111  srem
 41206    55   308    48    55   949     0      60  )
 41207    55   308    49    55   949     0     102  ;
 41208    55   309    13    55   949     0     111  src.position
 41209    55   309    25    55   949     0      59  (
 41210    55   309    26    55   949     0     111  spos
 41211    55   309    31    55   949     0      74  +
 41212    55   309    33    55   949     0     111  srem
 41213    55   309    37    55   949     0      60  )
 41214    55   309    38    55   949     0     102  ;
 41215    55   311     9    55   949     0      64  }
 41216    55   311    11    55   949     0      48  else
 41217    55   311    16    55   949     0      63  {
 41218    55   312    13    55   949     0     111  super.put
 41219    55   312    22    55   949     0      59  (
 41220    55   312    23    55   949     0     111  src
 41221    55   312    26    55   949     0      60  )
 41222    55   312    27    55   949     0     102  ;
 41223    55   313     9    55   949     0      64  }
 41224    55   314     9    55   949     0      19  return
 41225    55   314    16    55   949     0      44  this
 41226    55   314    20    55   949     0     102  ;
 41227    55   318     5    55   949     0      64  }
 41228    55   318     5    55   949     0    2242  ENDMETHOD
 41229    55   318     5    55   950     0    2243  STARTMETHOD
 41230    55   320     5    55   950     0      10  public
 41231    55   320    12    55   950     0     111  ShortBuffer
 41232    55   320    24    55   950     0     111  put
 41233    55   320    27    55   950     0      59  (
 41234    55   320    28    55   950     0      12  short
 41235    55   320    33    55   950     0      61  [
 41236    55   320    34    55   950     0      62  ]
 41237    55   320    36    55   950     0     111  src
 41238    55   320    39    55   950     0      66  ,
 41239    55   320    41    55   950     0      36  int
 41240    55   320    45    55   950     0     111  offset
 41241    55   320    51    55   950     0      66  ,
 41242    55   320    53    55   950     0      36  int
 41243    55   320    57    55   950     0     111  length
 41244    55   320    63    55   950     0      60  )
 41245    55   320    65    55   950     0      63  {
 41246    55   322     9    55   950     0      31  if
 41247    55   322    12    55   950     0      59  (
 41248    55   322    13    55   950     0      59  (
 41249    55   322    14    55   950     0     111  length
 41250    55   322    21    55   950     0      90  <<
 41251    55   322    24    55   950     0     112  1
 41252    55   322    25    55   950     0      60  )
 41253    55   322    27    55   950     0      89  >
 41254    55   322    29    55   950     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 41255    55   322    63    55   950     0      60  )
 41256    55   322    65    55   950     0      63  {
 41257    55   323    13    55   950     0     111  checkBounds
 41258    55   323    24    55   950     0      59  (
 41259    55   323    25    55   950     0     111  offset
 41260    55   323    31    55   950     0      66  ,
 41261    55   323    33    55   950     0     111  length
 41262    55   323    39    55   950     0      66  ,
 41263    55   323    41    55   950     0     111  src.length
 41264    55   323    51    55   950     0      60  )
 41265    55   323    52    55   950     0     102  ;
 41266    55   324    13    55   950     1      36  int
 41267    55   324    17    55   950     1     111  pos
 41268    55   324    21    55   950     1      67  =
 41269    55   324    23    55   950     1     111  position
 41270    55   324    31    55   950     1      59  (
 41271    55   324    32    55   950     1      60  )
 41272    55   324    33    55   950     1     102  ;
 41273    55   325    13    55   950     1      36  int
 41274    55   325    17    55   950     1     111  lim
 41275    55   325    21    55   950     1      67  =
 41276    55   325    23    55   950     1     111  limit
 41277    55   325    28    55   950     1      59  (
 41278    55   325    29    55   950     1      60  )
 41279    55   325    30    55   950     1     102  ;
 41280    55   326    13    55   950     0     111  assert
 41281    55   326    20    55   950     0      59  (
 41282    55   326    21    55   950     0     111  pos
 41283    55   326    25    55   950     0      92  <=
 41284    55   326    28    55   950     0     111  lim
 41285    55   326    31    55   950     0      60  )
 41286    55   326    32    55   950     0     102  ;
 41287    55   327    13    55   950     0      36  int
 41288    55   327    17    55   950     0     111  rem
 41289    55   327    21    55   950     0      67  =
 41290    55   327    23    55   950     0      59  (
 41291    55   327    24    55   950     0     111  pos
 41292    55   327    28    55   950     0      92  <=
 41293    55   327    31    55   950     0     111  lim
 41294    55   327    35    55   950     0      58  ?
 41295    55   327    37    55   950     0     111  lim
 41296    55   327    41    55   950     0      77  -
 41297    55   327    43    55   950     0     111  pos
 41298    55   327    47    55   950     0      65  :
 41299    55   327    49    55   950     0     112  0
 41300    55   327    50    55   950     0      60  )
 41301    55   327    51    55   950     0     102  ;
 41302    55   328    13    55   950     0      31  if
 41303    55   328    16    55   950     0      59  (
 41304    55   328    17    55   950     0     111  length
 41305    55   328    24    55   950     0      89  >
 41306    55   328    26    55   950     0     111  rem
 41307    55   328    29    55   950     0      60  )
 41308    55   329    17    55   950     0      20  throw
 41309    55   329    23    55   950     0      15  new
 41310    55   329    27    55   950     0     111  BufferOverflowException
 41311    55   329    50    55   950     0      59  (
 41312    55   329    51    55   950     0      60  )
 41313    55   329    52    55   950     0     102  ;
 41314    55   331    13    55   950     0      31  if
 41315    55   331    16    55   950     0      59  (
 41316    55   331    17    55   950     0     111  order
 41317    55   331    22    55   950     0      59  (
 41318    55   331    23    55   950     0      60  )
 41319    55   331    25    55   950     0      71  !=
 41320    55   331    28    55   950     0     111  ByteOrder.nativeOrder
 41321    55   331    49    55   950     0      59  (
 41322    55   331    50    55   950     0      60  )
 41323    55   331    51    55   950     0      60  )
 41324    55   332    17    55   950     0     111  Bits.copyFromShortArray
 41325    55   332    40    55   950     0      59  (
 41326    55   332    41    55   950     0     111  src
 41327    55   332    44    55   950     0      66  ,
 41328    55   332    46    55   950     0     111  offset
 41329    55   332    53    55   950     0      90  <<
 41330    55   332    56    55   950     0     112  1
 41331    55   332    57    55   950     0      66  ,
 41332    55   333    45    55   950     0     111  ix
 41333    55   333    47    55   950     0      59  (
 41334    55   333    48    55   950     0     111  pos
 41335    55   333    51    55   950     0      60  )
 41336    55   333    52    55   950     0      66  ,
 41337    55   333    54    55   950     0     111  length
 41338    55   333    61    55   950     0      90  <<
 41339    55   333    64    55   950     0     112  1
 41340    55   333    65    55   950     0      60  )
 41341    55   333    66    55   950     0     102  ;
 41342    55   334    13    55   950     0      48  else
 41343    55   335    17    55   950     0     111  Bits.copyFromByteArray
 41344    55   335    39    55   950     0      59  (
 41345    55   335    40    55   950     0     111  src
 41346    55   335    43    55   950     0      66  ,
 41347    55   335    45    55   950     0     111  offset
 41348    55   335    52    55   950     0      90  <<
 41349    55   335    55    55   950     0     112  1
 41350    55   335    56    55   950     0      66  ,
 41351    55   336    40    55   950     0     111  ix
 41352    55   336    42    55   950     0      59  (
 41353    55   336    43    55   950     0     111  pos
 41354    55   336    46    55   950     0      60  )
 41355    55   336    47    55   950     0      66  ,
 41356    55   336    49    55   950     0     111  length
 41357    55   336    56    55   950     0      90  <<
 41358    55   336    59    55   950     0     112  1
 41359    55   336    60    55   950     0      60  )
 41360    55   336    61    55   950     0     102  ;
 41361    55   337    13    55   950     0     111  position
 41362    55   337    21    55   950     0      59  (
 41363    55   337    22    55   950     0     111  pos
 41364    55   337    26    55   950     0      74  +
 41365    55   337    28    55   950     0     111  length
 41366    55   337    34    55   950     0      60  )
 41367    55   337    35    55   950     0     102  ;
 41368    55   338     9    55   950     0      64  }
 41369    55   338    11    55   950     0      48  else
 41370    55   338    16    55   950     0      63  {
 41371    55   339    13    55   950     0     111  super.put
 41372    55   339    22    55   950     0      59  (
 41373    55   339    23    55   950     0     111  src
 41374    55   339    26    55   950     0      66  ,
 41375    55   339    28    55   950     0     111  offset
 41376    55   339    34    55   950     0      66  ,
 41377    55   339    36    55   950     0     111  length
 41378    55   339    42    55   950     0      60  )
 41379    55   339    43    55   950     0     102  ;
 41380    55   340     9    55   950     0      64  }
 41381    55   341     9    55   950     0      19  return
 41382    55   341    16    55   950     0      44  this
 41383    55   341    20    55   950     0     102  ;
 41384    55   345     5    55   950     0      64  }
 41385    55   345     5    55   950     0    2244  ENDMETHOD
 41386    55   345     5    55   951     0    2245  STARTMETHOD
 41387    55   347     5    55   951     0      10  public
 41388    55   347    12    55   951     0     111  ShortBuffer
 41389    55   347    24    55   951     0     111  compact
 41390    55   347    31    55   951     0      59  (
 41391    55   347    32    55   951     0      60  )
 41392    55   347    34    55   951     0      63  {
 41393    55   349     9    55   951     1      36  int
 41394    55   349    13    55   951     1     111  pos
 41395    55   349    17    55   951     1      67  =
 41396    55   349    19    55   951     1     111  position
 41397    55   349    27    55   951     1      59  (
 41398    55   349    28    55   951     1      60  )
 41399    55   349    29    55   951     1     102  ;
 41400    55   350     9    55   951     1      36  int
 41401    55   350    13    55   951     1     111  lim
 41402    55   350    17    55   951     1      67  =
 41403    55   350    19    55   951     1     111  limit
 41404    55   350    24    55   951     1      59  (
 41405    55   350    25    55   951     1      60  )
 41406    55   350    26    55   951     1     102  ;
 41407    55   351     9    55   951     0     111  assert
 41408    55   351    16    55   951     0      59  (
 41409    55   351    17    55   951     0     111  pos
 41410    55   351    21    55   951     0      92  <=
 41411    55   351    24    55   951     0     111  lim
 41412    55   351    27    55   951     0      60  )
 41413    55   351    28    55   951     0     102  ;
 41414    55   352     9    55   951     0      36  int
 41415    55   352    13    55   951     0     111  rem
 41416    55   352    17    55   951     0      67  =
 41417    55   352    19    55   951     0      59  (
 41418    55   352    20    55   951     0     111  pos
 41419    55   352    24    55   951     0      92  <=
 41420    55   352    27    55   951     0     111  lim
 41421    55   352    31    55   951     0      58  ?
 41422    55   352    33    55   951     0     111  lim
 41423    55   352    37    55   951     0      77  -
 41424    55   352    39    55   951     0     111  pos
 41425    55   352    43    55   951     0      65  :
 41426    55   352    45    55   951     0     112  0
 41427    55   352    46    55   951     0      60  )
 41428    55   352    47    55   951     0     102  ;
 41429    55   354     9    55   951     0     111  unsafe.copyMemory
 41430    55   354    26    55   951     0      59  (
 41431    55   354    27    55   951     0     111  ix
 41432    55   354    29    55   951     0      59  (
 41433    55   354    30    55   951     0     111  pos
 41434    55   354    33    55   951     0      60  )
 41435    55   354    34    55   951     0      66  ,
 41436    55   354    36    55   951     0     111  ix
 41437    55   354    38    55   951     0      59  (
 41438    55   354    39    55   951     0     112  0
 41439    55   354    40    55   951     0      60  )
 41440    55   354    41    55   951     0      66  ,
 41441    55   354    43    55   951     0     111  rem
 41442    55   354    47    55   951     0      90  <<
 41443    55   354    50    55   951     0     112  1
 41444    55   354    51    55   951     0      60  )
 41445    55   354    52    55   951     0     102  ;
 41446    55   355     9    55   951     0     111  position
 41447    55   355    17    55   951     0      59  (
 41448    55   355    18    55   951     0     111  rem
 41449    55   355    21    55   951     0      60  )
 41450    55   355    22    55   951     0     102  ;
 41451    55   356     9    55   951     0     111  limit
 41452    55   356    14    55   951     0      59  (
 41453    55   356    15    55   951     0     111  capacity
 41454    55   356    23    55   951     0      59  (
 41455    55   356    24    55   951     0      60  )
 41456    55   356    25    55   951     0      60  )
 41457    55   356    26    55   951     0     102  ;
 41458    55   357     9    55   951     0     111  clearMark
 41459    55   357    18    55   951     0      59  (
 41460    55   357    19    55   951     0      60  )
 41461    55   357    20    55   951     0     102  ;
 41462    55   358     9    55   951     0      19  return
 41463    55   358    16    55   951     0      44  this
 41464    55   358    20    55   951     1     102  ;
 41465    55   362     5    55   951     1      64  }
 41466    55   362     5    55   951     0    2246  ENDMETHOD
 41467    55   362     5    55   952     0    2247  STARTMETHOD
 41468    55   364     5    55   952     0      10  public
 41469    55   364    12    55   952     0      39  boolean
 41470    55   364    20    55   952     0     111  isDirect
 41471    55   364    28    55   952     0      59  (
 41472    55   364    29    55   952     0      60  )
 41473    55   364    31    55   952     0      63  {
 41474    55   365     9    55   952     0      19  return
 41475    55   365    16    55   952     0      52  true
 41476    55   365    20    55   952     1     102  ;
 41477    55   366     5    55   952     1      64  }
 41478    55   366     5    55   952     0    2248  ENDMETHOD
 41479    55   366     5    55   953     0    2249  STARTMETHOD
 41480    55   368     5    55   953     0      10  public
 41481    55   368    12    55   953     0      39  boolean
 41482    55   368    20    55   953     0     111  isReadOnly
 41483    55   368    30    55   953     0      59  (
 41484    55   368    31    55   953     0      60  )
 41485    55   368    33    55   953     0      63  {
 41486    55   369     9    55   953     0      19  return
 41487    55   369    16    55   953     0      43  false
 41488    55   369    21    55   953     1     102  ;
 41489    55   370     5    55   953     1      64  }
 41490    55   370     5    55   953     0    2250  ENDMETHOD
 41491    55   370     5    55   954     0    2251  STARTMETHOD
 41492    55   416     5    55   954     0      10  public
 41493    55   416    12    55   954     0     111  ByteOrder
 41494    55   416    22    55   954     0     111  order
 41495    55   416    27    55   954     0      59  (
 41496    55   416    28    55   954     0      60  )
 41497    55   416    30    55   954     0      63  {
 41498    55   418     9    55   954     0      19  return
 41499    55   418    16    55   954     0      59  (
 41500    55   418    17    55   954     0      59  (
 41501    55   418    18    55   954     0     111  ByteOrder.nativeOrder
 41502    55   418    39    55   954     0      59  (
 41503    55   418    40    55   954     0      60  )
 41504    55   418    42    55   954     0      68  ==
 41505    55   418    45    55   954     0     111  ByteOrder.BIG_ENDIAN
 41506    55   418    65    55   954     0      60  )
 41507    55   419    17    55   954     0      58  ?
 41508    55   419    19    55   954     0     111  ByteOrder.LITTLE_ENDIAN
 41509    55   419    43    55   954     0      65  :
 41510    55   419    45    55   954     0     111  ByteOrder.BIG_ENDIAN
 41511    55   419    65    55   954     0      60  )
 41512    55   419    66    55   954     0     102  ;
 41513    55   425     5    55   954     0      64  }
 41514    55   425     5    55   954     0    2252  ENDMETHOD
 41515    55   452     1    55    -1     0      64  }
 41516    55   452     1    55    -1     1    2253  ENDCLASS
 41517    55   452     1    -1    -1     1    2254  ENDFILE C:\javasrc\java\nio\DirectShortBufferS.java
 41518    56     1     1    -1    -1     1    2255  STARTFILE C:\javasrc\java\nio\DirectShortBufferU.java
 41519    56    28     1    -1    -1     0       5  package
 41520    56    28     9    -1    -1     0     111  java.nio
 41521    56    28    17    -1    -1     0     102  ;
 41522    56    30     1    -1    -1     1      49  import
 41523    56    30     8    -1    -1     1     111  sun.misc.Cleaner
 41524    56    30    24    -1    -1     1     102  ;
 41525    56    31     1    -1    -1     1      49  import
 41526    56    31     8    -1    -1     1     111  sun.misc.Unsafe
 41527    56    31    23    -1    -1     1     102  ;
 41528    56    32     1    -1    -1     1      49  import
 41529    56    32     8    -1    -1     1     111  sun.nio.ch.DirectBuffer
 41530    56    32    31    -1    -1     1     102  ;
 41531    56    33     1    -1    -1     1      49  import
 41532    56    33     8    -1    -1     1     111  sun.nio.ch.FileChannelImpl
 41533    56    33    34    -1    -1     1     102  ;
 41534    56    36     1    56    -1     0    2256  STARTCLASS
 41535    56    36     1    56    -1     0      24  class
 41536    56    36     7    56    -1     0     111  DirectShortBufferU
 41537    56    38     5    56    -1     0      38  extends
 41538    56    38    13    56    -1     0     111  ShortBuffer
 41539    56    42     5    56    -1     0      17  implements
 41540    56    42    16    56    -1     0     111  DirectBuffer
 41541    56    43     1    56    -1     0      63  {
 41542    56    48     5    56    -1     0      23  protected
 41543    56    48    15    56    -1     0      45  static
 41544    56    48    22    56    -1     0       6  final
 41545    56    48    28    56    -1     0     111  Unsafe
 41546    56    48    35    56    -1     0     111  unsafe
 41547    56    48    42    56    -1     0      67  =
 41548    56    48    44    56    -1     0     111  Bits.unsafe
 41549    56    48    55    56    -1     0      59  (
 41550    56    48    56    56    -1     0      60  )
 41551    56    48    57    56    -1     0     102  ;
 41552    56    51     5    56    -1     0      23  protected
 41553    56    51    15    56    -1     0      45  static
 41554    56    51    22    56    -1     0       6  final
 41555    56    51    28    56    -1     0      39  boolean
 41556    56    51    36    56    -1     0     111  unaligned
 41557    56    51    46    56    -1     0      67  =
 41558    56    51    48    56    -1     0     111  Bits.unaligned
 41559    56    51    62    56    -1     0      59  (
 41560    56    51    63    56    -1     0      60  )
 41561    56    51    64    56    -1     0     102  ;
 41562    56    59     5    56    -1     0      23  protected
 41563    56    59    15    56    -1     0     111  Object
 41564    56    59    22    56    -1     0     111  viewedBuffer
 41565    56    59    35    56    -1     0      67  =
 41566    56    59    37    56    -1     0      21  null
 41567    56    59    41    56    -1     0     102  ;
 41568    56    59    41    56   955     0    2257  STARTMETHOD
 41569    56    61     5    56   955     0      10  public
 41570    56    61    12    56   955     0     111  Object
 41571    56    61    19    56   955     0     111  viewedBuffer
 41572    56    61    31    56   955     0      59  (
 41573    56    61    32    56   955     0      60  )
 41574    56    61    34    56   955     0      63  {
 41575    56    62     9    56   955     0      19  return
 41576    56    62    16    56   955     0     111  viewedBuffer
 41577    56    62    28    56   955     0     102  ;
 41578    56    63     5    56   955     0      64  }
 41579    56    63     5    56   955     0    2258  ENDMETHOD
 41580    56    63     5    56   956     0    2259  STARTMETHOD
 41581    56   100     5    56   956     0      10  public
 41582    56   100    12    56   956     0     111  Cleaner
 41583    56   100    20    56   956     0     111  cleaner
 41584    56   100    27    56   956     0      59  (
 41585    56   100    28    56   956     0      60  )
 41586    56   100    30    56   956     0      63  {
 41587    56   100    32    56   956     0      19  return
 41588    56   100    39    56   956     0      21  null
 41589    56   100    43    56   956     0     102  ;
 41590    56   100    45    56   956     0      64  }
 41591    56   100    45    56   956     0    2260  ENDMETHOD
 41592    56   100    45    56   957     0    2261  STARTMETHOD
 41593    56   164     5    56   957     0     111  DirectShortBufferU
 41594    56   164    23    56   957     0      59  (
 41595    56   164    24    56   957     0     111  DirectBuffer
 41596    56   164    37    56   957     0     111  db
 41597    56   164    39    56   957     0      66  ,
 41598    56   165    32    56   957     0      36  int
 41599    56   165    36    56   957     0     111  mark
 41600    56   165    40    56   957     0      66  ,
 41601    56   165    42    56   957     0      36  int
 41602    56   165    46    56   957     0     111  pos
 41603    56   165    49    56   957     0      66  ,
 41604    56   165    51    56   957     0      36  int
 41605    56   165    55    56   957     0     111  lim
 41606    56   165    58    56   957     0      66  ,
 41607    56   165    60    56   957     0      36  int
 41608    56   165    64    56   957     0     111  cap
 41609    56   165    67    56   957     0      66  ,
 41610    56   166    32    56   957     0      36  int
 41611    56   166    36    56   957     0     111  off
 41612    56   166    39    56   957     0      60  )
 41613    56   167     5    56   957     0      63  {
 41614    56   169     9    56   957     0      27  super
 41615    56   169    14    56   957     0      59  (
 41616    56   169    15    56   957     0     111  mark
 41617    56   169    19    56   957     0      66  ,
 41618    56   169    21    56   957     0     111  pos
 41619    56   169    24    56   957     0      66  ,
 41620    56   169    26    56   957     0     111  lim
 41621    56   169    29    56   957     0      66  ,
 41622    56   169    31    56   957     0     111  cap
 41623    56   169    34    56   957     0      60  )
 41624    56   169    35    56   957     0     102  ;
 41625    56   170     9    56   957     0     111  address
 41626    56   170    17    56   957     0      67  =
 41627    56   170    19    56   957     0     111  db.address
 41628    56   170    29    56   957     0      59  (
 41629    56   170    30    56   957     0      60  )
 41630    56   170    32    56   957     0      74  +
 41631    56   170    34    56   957     0     111  off
 41632    56   170    37    56   957     0     102  ;
 41633    56   171     9    56   957     0     111  viewedBuffer
 41634    56   171    22    56   957     0      67  =
 41635    56   171    24    56   957     0     111  db
 41636    56   171    26    56   957     0     102  ;
 41637    56   178     5    56   957     0      64  }
 41638    56   178     5    56   957     0    2262  ENDMETHOD
 41639    56   178     5    56   958     0    2263  STARTMETHOD
 41640    56   180     5    56   958     0      10  public
 41641    56   180    12    56   958     0     111  ShortBuffer
 41642    56   180    24    56   958     0     111  slice
 41643    56   180    29    56   958     0      59  (
 41644    56   180    30    56   958     0      60  )
 41645    56   180    32    56   958     0      63  {
 41646    56   181     9    56   958     1      36  int
 41647    56   181    13    56   958     1     111  pos
 41648    56   181    17    56   958     1      67  =
 41649    56   181    19    56   958     1     111  this.position
 41650    56   181    32    56   958     1      59  (
 41651    56   181    33    56   958     1      60  )
 41652    56   181    34    56   958     1     102  ;
 41653    56   182     9    56   958     1      36  int
 41654    56   182    13    56   958     1     111  lim
 41655    56   182    17    56   958     1      67  =
 41656    56   182    19    56   958     1     111  this.limit
 41657    56   182    29    56   958     1      59  (
 41658    56   182    30    56   958     1      60  )
 41659    56   182    31    56   958     1     102  ;
 41660    56   183     9    56   958     0     111  assert
 41661    56   183    16    56   958     0      59  (
 41662    56   183    17    56   958     0     111  pos
 41663    56   183    21    56   958     0      92  <=
 41664    56   183    24    56   958     0     111  lim
 41665    56   183    27    56   958     0      60  )
 41666    56   183    28    56   958     0     102  ;
 41667    56   184     9    56   958     0      36  int
 41668    56   184    13    56   958     0     111  rem
 41669    56   184    17    56   958     0      67  =
 41670    56   184    19    56   958     0      59  (
 41671    56   184    20    56   958     0     111  pos
 41672    56   184    24    56   958     0      92  <=
 41673    56   184    27    56   958     0     111  lim
 41674    56   184    31    56   958     0      58  ?
 41675    56   184    33    56   958     0     111  lim
 41676    56   184    37    56   958     0      77  -
 41677    56   184    39    56   958     0     111  pos
 41678    56   184    43    56   958     0      65  :
 41679    56   184    45    56   958     0     112  0
 41680    56   184    46    56   958     0      60  )
 41681    56   184    47    56   958     0     102  ;
 41682    56   185     9    56   958     0      36  int
 41683    56   185    13    56   958     0     111  off
 41684    56   185    17    56   958     0      67  =
 41685    56   185    19    56   958     0      59  (
 41686    56   185    20    56   958     0     111  pos
 41687    56   185    24    56   958     0      90  <<
 41688    56   185    27    56   958     0     112  1
 41689    56   185    28    56   958     0      60  )
 41690    56   185    29    56   958     0     102  ;
 41691    56   186     9    56   958     0     111  assert
 41692    56   186    16    56   958     0      59  (
 41693    56   186    17    56   958     0     111  off
 41694    56   186    21    56   958     0      88  >=
 41695    56   186    24    56   958     0     112  0
 41696    56   186    25    56   958     0      60  )
 41697    56   186    26    56   958     0     102  ;
 41698    56   187     9    56   958     0      19  return
 41699    56   187    16    56   958     0      15  new
 41700    56   187    20    56   958     0     111  DirectShortBufferU
 41701    56   187    38    56   958     0      59  (
 41702    56   187    39    56   958     0      44  this
 41703    56   187    43    56   958     0      66  ,
 41704    56   187    45    56   958     0      77  -
 41705    56   187    46    56   958     0     112  1
 41706    56   187    47    56   958     0      66  ,
 41707    56   187    49    56   958     0     112  0
 41708    56   187    50    56   958     0      66  ,
 41709    56   187    52    56   958     0     111  rem
 41710    56   187    55    56   958     0      66  ,
 41711    56   187    57    56   958     0     111  rem
 41712    56   187    60    56   958     0      66  ,
 41713    56   187    62    56   958     0     111  off
 41714    56   187    65    56   958     1      60  )
 41715    56   187    66    56   958     1     102  ;
 41716    56   188     5    56   958     1      64  }
 41717    56   188     5    56   958     0    2264  ENDMETHOD
 41718    56   188     5    56   959     0    2265  STARTMETHOD
 41719    56   190     5    56   959     0      10  public
 41720    56   190    12    56   959     0     111  ShortBuffer
 41721    56   190    24    56   959     0     111  duplicate
 41722    56   190    33    56   959     0      59  (
 41723    56   190    34    56   959     0      60  )
 41724    56   190    36    56   959     0      63  {
 41725    56   191     9    56   959     0      19  return
 41726    56   191    16    56   959     0      15  new
 41727    56   191    20    56   959     0     111  DirectShortBufferU
 41728    56   191    38    56   959     0      59  (
 41729    56   191    39    56   959     0      44  this
 41730    56   191    43    56   959     0      66  ,
 41731    56   192    47    56   959     1     111  this.markValue
 41732    56   192    61    56   959     1      59  (
 41733    56   192    62    56   959     1      60  )
 41734    56   192    63    56   959     1      66  ,
 41735    56   193    47    56   959     1     111  this.position
 41736    56   193    60    56   959     1      59  (
 41737    56   193    61    56   959     1      60  )
 41738    56   193    62    56   959     1      66  ,
 41739    56   194    47    56   959     1     111  this.limit
 41740    56   194    57    56   959     1      59  (
 41741    56   194    58    56   959     1      60  )
 41742    56   194    59    56   959     1      66  ,
 41743    56   195    47    56   959     1     111  this.capacity
 41744    56   195    60    56   959     1      59  (
 41745    56   195    61    56   959     1      60  )
 41746    56   195    62    56   959     1      66  ,
 41747    56   196    47    56   959     0     112  0
 41748    56   196    48    56   959     1      60  )
 41749    56   196    49    56   959     1     102  ;
 41750    56   197     5    56   959     1      64  }
 41751    56   197     5    56   959     0    2266  ENDMETHOD
 41752    56   197     5    56   960     0    2267  STARTMETHOD
 41753    56   199     5    56   960     0      10  public
 41754    56   199    12    56   960     0     111  ShortBuffer
 41755    56   199    24    56   960     0     111  asReadOnlyBuffer
 41756    56   199    40    56   960     0      59  (
 41757    56   199    41    56   960     0      60  )
 41758    56   199    43    56   960     0      63  {
 41759    56   201     9    56   960     0      19  return
 41760    56   201    16    56   960     0      15  new
 41761    56   201    20    56   960     0     111  DirectShortBufferRU
 41762    56   201    39    56   960     0      59  (
 41763    56   201    40    56   960     0      44  this
 41764    56   201    44    56   960     0      66  ,
 41765    56   202    44    56   960     1     111  this.markValue
 41766    56   202    58    56   960     1      59  (
 41767    56   202    59    56   960     1      60  )
 41768    56   202    60    56   960     1      66  ,
 41769    56   203    44    56   960     1     111  this.position
 41770    56   203    57    56   960     1      59  (
 41771    56   203    58    56   960     1      60  )
 41772    56   203    59    56   960     1      66  ,
 41773    56   204    44    56   960     1     111  this.limit
 41774    56   204    54    56   960     1      59  (
 41775    56   204    55    56   960     1      60  )
 41776    56   204    56    56   960     1      66  ,
 41777    56   205    44    56   960     1     111  this.capacity
 41778    56   205    57    56   960     1      59  (
 41779    56   205    58    56   960     1      60  )
 41780    56   205    59    56   960     1      66  ,
 41781    56   206    44    56   960     0     112  0
 41782    56   206    45    56   960     1      60  )
 41783    56   206    46    56   960     1     102  ;
 41784    56   210     5    56   960     1      64  }
 41785    56   210     5    56   960     0    2268  ENDMETHOD
 41786    56   210     5    56   961     0    2269  STARTMETHOD
 41787    56   214     5    56   961     0      10  public
 41788    56   214    12    56   961     0      53  long
 41789    56   214    17    56   961     0     111  address
 41790    56   214    24    56   961     0      59  (
 41791    56   214    25    56   961     0      60  )
 41792    56   214    27    56   961     0      63  {
 41793    56   215     9    56   961     0      19  return
 41794    56   215    16    56   961     0     111  address
 41795    56   215    23    56   961     0     102  ;
 41796    56   216     5    56   961     0      64  }
 41797    56   216     5    56   961     0    2270  ENDMETHOD
 41798    56   216     5    56   962     0    2271  STARTMETHOD
 41799    56   218     5    56   962     0      41  private
 41800    56   218    13    56   962     0      53  long
 41801    56   218    18    56   962     0     111  ix
 41802    56   218    20    56   962     0      59  (
 41803    56   218    21    56   962     0      36  int
 41804    56   218    25    56   962     0     111  i
 41805    56   218    26    56   962     0      60  )
 41806    56   218    28    56   962     0      63  {
 41807    56   219     9    56   962     0      19  return
 41808    56   219    16    56   962     0     111  address
 41809    56   219    24    56   962     0      74  +
 41810    56   219    26    56   962     0      59  (
 41811    56   219    27    56   962     0     111  i
 41812    56   219    29    56   962     0      90  <<
 41813    56   219    32    56   962     0     112  1
 41814    56   219    33    56   962     0      60  )
 41815    56   219    34    56   962     0     102  ;
 41816    56   220     5    56   962     0      64  }
 41817    56   220     5    56   962     0    2272  ENDMETHOD
 41818    56   220     5    56   963     0    2273  STARTMETHOD
 41819    56   222     5    56   963     0      10  public
 41820    56   222    12    56   963     0      12  short
 41821    56   222    18    56   963     0     111  get
 41822    56   222    21    56   963     0      59  (
 41823    56   222    22    56   963     0      60  )
 41824    56   222    24    56   963     0      63  {
 41825    56   223     9    56   963     0      19  return
 41826    56   223    16    56   963     0      59  (
 41827    56   223    17    56   963     0      59  (
 41828    56   223    18    56   963     0     111  unsafe.getShort
 41829    56   223    33    56   963     0      59  (
 41830    56   223    34    56   963     0     111  ix
 41831    56   223    36    56   963     0      59  (
 41832    56   223    37    56   963     0     111  nextGetIndex
 41833    56   223    49    56   963     0      59  (
 41834    56   223    50    56   963     0      60  )
 41835    56   223    51    56   963     0      60  )
 41836    56   223    52    56   963     0      60  )
 41837    56   223    53    56   963     0      60  )
 41838    56   223    54    56   963     0      60  )
 41839    56   223    55    56   963     0     102  ;
 41840    56   224     5    56   963     0      64  }
 41841    56   224     5    56   963     0    2274  ENDMETHOD
 41842    56   224     5    56   964     0    2275  STARTMETHOD
 41843    56   226     5    56   964     0      10  public
 41844    56   226    12    56   964     0      12  short
 41845    56   226    18    56   964     0     111  get
 41846    56   226    21    56   964     0      59  (
 41847    56   226    22    56   964     0      36  int
 41848    56   226    26    56   964     0     111  i
 41849    56   226    27    56   964     0      60  )
 41850    56   226    29    56   964     0      63  {
 41851    56   227     9    56   964     0      19  return
 41852    56   227    16    56   964     0      59  (
 41853    56   227    17    56   964     0      59  (
 41854    56   227    18    56   964     0     111  unsafe.getShort
 41855    56   227    33    56   964     0      59  (
 41856    56   227    34    56   964     0     111  ix
 41857    56   227    36    56   964     0      59  (
 41858    56   227    37    56   964     0     111  checkIndex
 41859    56   227    47    56   964     0      59  (
 41860    56   227    48    56   964     0     111  i
 41861    56   227    49    56   964     0      60  )
 41862    56   227    50    56   964     0      60  )
 41863    56   227    51    56   964     0      60  )
 41864    56   227    52    56   964     0      60  )
 41865    56   227    53    56   964     0      60  )
 41866    56   227    54    56   964     0     102  ;
 41867    56   228     5    56   964     0      64  }
 41868    56   228     5    56   964     0    2276  ENDMETHOD
 41869    56   228     5    56   965     0    2277  STARTMETHOD
 41870    56   230     5    56   965     0      10  public
 41871    56   230    12    56   965     0     111  ShortBuffer
 41872    56   230    24    56   965     0     111  get
 41873    56   230    27    56   965     0      59  (
 41874    56   230    28    56   965     0      12  short
 41875    56   230    33    56   965     0      61  [
 41876    56   230    34    56   965     0      62  ]
 41877    56   230    36    56   965     0     111  dst
 41878    56   230    39    56   965     0      66  ,
 41879    56   230    41    56   965     0      36  int
 41880    56   230    45    56   965     0     111  offset
 41881    56   230    51    56   965     0      66  ,
 41882    56   230    53    56   965     0      36  int
 41883    56   230    57    56   965     0     111  length
 41884    56   230    63    56   965     0      60  )
 41885    56   230    65    56   965     0      63  {
 41886    56   232     9    56   965     0      31  if
 41887    56   232    12    56   965     0      59  (
 41888    56   232    13    56   965     0      59  (
 41889    56   232    14    56   965     0     111  length
 41890    56   232    21    56   965     0      90  <<
 41891    56   232    24    56   965     0     112  1
 41892    56   232    25    56   965     0      60  )
 41893    56   232    27    56   965     0      89  >
 41894    56   232    29    56   965     0     111  Bits.JNI_COPY_TO_ARRAY_THRESHOLD
 41895    56   232    61    56   965     0      60  )
 41896    56   232    63    56   965     0      63  {
 41897    56   233    13    56   965     0     111  checkBounds
 41898    56   233    24    56   965     0      59  (
 41899    56   233    25    56   965     0     111  offset
 41900    56   233    31    56   965     0      66  ,
 41901    56   233    33    56   965     0     111  length
 41902    56   233    39    56   965     0      66  ,
 41903    56   233    41    56   965     0     111  dst.length
 41904    56   233    51    56   965     0      60  )
 41905    56   233    52    56   965     0     102  ;
 41906    56   234    13    56   965     1      36  int
 41907    56   234    17    56   965     1     111  pos
 41908    56   234    21    56   965     1      67  =
 41909    56   234    23    56   965     1     111  position
 41910    56   234    31    56   965     1      59  (
 41911    56   234    32    56   965     1      60  )
 41912    56   234    33    56   965     1     102  ;
 41913    56   235    13    56   965     1      36  int
 41914    56   235    17    56   965     1     111  lim
 41915    56   235    21    56   965     1      67  =
 41916    56   235    23    56   965     1     111  limit
 41917    56   235    28    56   965     1      59  (
 41918    56   235    29    56   965     1      60  )
 41919    56   235    30    56   965     1     102  ;
 41920    56   236    13    56   965     0     111  assert
 41921    56   236    20    56   965     0      59  (
 41922    56   236    21    56   965     0     111  pos
 41923    56   236    25    56   965     0      92  <=
 41924    56   236    28    56   965     0     111  lim
 41925    56   236    31    56   965     0      60  )
 41926    56   236    32    56   965     0     102  ;
 41927    56   237    13    56   965     0      36  int
 41928    56   237    17    56   965     0     111  rem
 41929    56   237    21    56   965     0      67  =
 41930    56   237    23    56   965     0      59  (
 41931    56   237    24    56   965     0     111  pos
 41932    56   237    28    56   965     0      92  <=
 41933    56   237    31    56   965     0     111  lim
 41934    56   237    35    56   965     0      58  ?
 41935    56   237    37    56   965     0     111  lim
 41936    56   237    41    56   965     0      77  -
 41937    56   237    43    56   965     0     111  pos
 41938    56   237    47    56   965     0      65  :
 41939    56   237    49    56   965     0     112  0
 41940    56   237    50    56   965     0      60  )
 41941    56   237    51    56   965     0     102  ;
 41942    56   238    13    56   965     0      31  if
 41943    56   238    16    56   965     0      59  (
 41944    56   238    17    56   965     0     111  length
 41945    56   238    24    56   965     0      89  >
 41946    56   238    26    56   965     0     111  rem
 41947    56   238    29    56   965     0      60  )
 41948    56   239    17    56   965     0      20  throw
 41949    56   239    23    56   965     0      15  new
 41950    56   239    27    56   965     0     111  BufferUnderflowException
 41951    56   239    51    56   965     0      59  (
 41952    56   239    52    56   965     0      60  )
 41953    56   239    53    56   965     0     102  ;
 41954    56   241    13    56   965     0      31  if
 41955    56   241    16    56   965     0      59  (
 41956    56   241    17    56   965     0     111  order
 41957    56   241    22    56   965     0      59  (
 41958    56   241    23    56   965     0      60  )
 41959    56   241    25    56   965     0      71  !=
 41960    56   241    28    56   965     0     111  ByteOrder.nativeOrder
 41961    56   241    49    56   965     0      59  (
 41962    56   241    50    56   965     0      60  )
 41963    56   241    51    56   965     0      60  )
 41964    56   242    17    56   965     0     111  Bits.copyToShortArray
 41965    56   242    38    56   965     0      59  (
 41966    56   242    39    56   965     0     111  ix
 41967    56   242    41    56   965     0      59  (
 41968    56   242    42    56   965     0     111  pos
 41969    56   242    45    56   965     0      60  )
 41970    56   242    46    56   965     0      66  ,
 41971    56   242    48    56   965     0     111  dst
 41972    56   242    51    56   965     0      66  ,
 41973    56   243    43    56   965     0     111  offset
 41974    56   243    50    56   965     0      90  <<
 41975    56   243    53    56   965     0     112  1
 41976    56   243    54    56   965     0      66  ,
 41977    56   244    43    56   965     0     111  length
 41978    56   244    50    56   965     0      90  <<
 41979    56   244    53    56   965     0     112  1
 41980    56   244    54    56   965     0      60  )
 41981    56   244    55    56   965     0     102  ;
 41982    56   245    13    56   965     0      48  else
 41983    56   246    17    56   965     0     111  Bits.copyToByteArray
 41984    56   246    37    56   965     0      59  (
 41985    56   246    38    56   965     0     111  ix
 41986    56   246    40    56   965     0      59  (
 41987    56   246    41    56   965     0     111  pos
 41988    56   246    44    56   965     0      60  )
 41989    56   246    45    56   965     0      66  ,
 41990    56   246    47    56   965     0     111  dst
 41991    56   246    50    56   965     0      66  ,
 41992    56   247    38    56   965     0     111  offset
 41993    56   247    45    56   965     0      90  <<
 41994    56   247    48    56   965     0     112  1
 41995    56   247    49    56   965     0      66  ,
 41996    56   248    38    56   965     0     111  length
 41997    56   248    45    56   965     0      90  <<
 41998    56   248    48    56   965     0     112  1
 41999    56   248    49    56   965     0      60  )
 42000    56   248    50    56   965     0     102  ;
 42001    56   249    13    56   965     0     111  position
 42002    56   249    21    56   965     0      59  (
 42003    56   249    22    56   965     0     111  pos
 42004    56   249    26    56   965     0      74  +
 42005    56   249    28    56   965     0     111  length
 42006    56   249    34    56   965     0      60  )
 42007    56   249    35    56   965     0     102  ;
 42008    56   250     9    56   965     0      64  }
 42009    56   250    11    56   965     0      48  else
 42010    56   250    16    56   965     0      63  {
 42011    56   251    13    56   965     0     111  super.get
 42012    56   251    22    56   965     0      59  (
 42013    56   251    23    56   965     0     111  dst
 42014    56   251    26    56   965     0      66  ,
 42015    56   251    28    56   965     0     111  offset
 42016    56   251    34    56   965     0      66  ,
 42017    56   251    36    56   965     0     111  length
 42018    56   251    42    56   965     0      60  )
 42019    56   251    43    56   965     0     102  ;
 42020    56   252     9    56   965     0      64  }
 42021    56   253     9    56   965     0      19  return
 42022    56   253    16    56   965     0      44  this
 42023    56   253    20    56   965     0     102  ;
 42024    56   257     5    56   965     0      64  }
 42025    56   257     5    56   965     0    2278  ENDMETHOD
 42026    56   257     5    56   966     0    2279  STARTMETHOD
 42027    56   261     5    56   966     0      10  public
 42028    56   261    12    56   966     0     111  ShortBuffer
 42029    56   261    24    56   966     0     111  put
 42030    56   261    27    56   966     0      59  (
 42031    56   261    28    56   966     0      12  short
 42032    56   261    34    56   966     0     111  x
 42033    56   261    35    56   966     0      60  )
 42034    56   261    37    56   966     0      63  {
 42035    56   263     9    56   966     0     111  unsafe.putShort
 42036    56   263    24    56   966     0      59  (
 42037    56   263    25    56   966     0     111  ix
 42038    56   263    27    56   966     0      59  (
 42039    56   263    28    56   966     0     111  nextPutIndex
 42040    56   263    40    56   966     0      59  (
 42041    56   263    41    56   966     0      60  )
 42042    56   263    42    56   966     0      60  )
 42043    56   263    43    56   966     0      66  ,
 42044    56   263    45    56   966     0      59  (
 42045    56   263    46    56   966     0      59  (
 42046    56   263    47    56   966     0     111  x
 42047    56   263    48    56   966     0      60  )
 42048    56   263    49    56   966     0      60  )
 42049    56   263    50    56   966     0      60  )
 42050    56   263    51    56   966     0     102  ;
 42051    56   264     9    56   966     0      19  return
 42052    56   264    16    56   966     0      44  this
 42053    56   264    20    56   966     0     102  ;
 42054    56   268     5    56   966     0      64  }
 42055    56   268     5    56   966     0    2280  ENDMETHOD
 42056    56   268     5    56   967     0    2281  STARTMETHOD
 42057    56   270     5    56   967     0      10  public
 42058    56   270    12    56   967     0     111  ShortBuffer
 42059    56   270    24    56   967     0     111  put
 42060    56   270    27    56   967     0      59  (
 42061    56   270    28    56   967     0      36  int
 42062    56   270    32    56   967     0     111  i
 42063    56   270    33    56   967     0      66  ,
 42064    56   270    35    56   967     0      12  short
 42065    56   270    41    56   967     0     111  x
 42066    56   270    42    56   967     0      60  )
 42067    56   270    44    56   967     0      63  {
 42068    56   272     9    56   967     0     111  unsafe.putShort
 42069    56   272    24    56   967     0      59  (
 42070    56   272    25    56   967     0     111  ix
 42071    56   272    27    56   967     0      59  (
 42072    56   272    28    56   967     0     111  checkIndex
 42073    56   272    38    56   967     0      59  (
 42074    56   272    39    56   967     0     111  i
 42075    56   272    40    56   967     0      60  )
 42076    56   272    41    56   967     0      60  )
 42077    56   272    42    56   967     0      66  ,
 42078    56   272    44    56   967     0      59  (
 42079    56   272    45    56   967     0      59  (
 42080    56   272    46    56   967     0     111  x
 42081    56   272    47    56   967     0      60  )
 42082    56   272    48    56   967     0      60  )
 42083    56   272    49    56   967     0      60  )
 42084    56   272    50    56   967     0     102  ;
 42085    56   273     9    56   967     0      19  return
 42086    56   273    16    56   967     0      44  this
 42087    56   273    20    56   967     0     102  ;
 42088    56   277     5    56   967     0      64  }
 42089    56   277     5    56   967     0    2282  ENDMETHOD
 42090    56   277     5    56   968     0    2283  STARTMETHOD
 42091    56   279     5    56   968     0      10  public
 42092    56   279    12    56   968     0     111  ShortBuffer
 42093    56   279    24    56   968     0     111  put
 42094    56   279    27    56   968     0      59  (
 42095    56   279    28    56   968     0     111  ShortBuffer
 42096    56   279    40    56   968     0     111  src
 42097    56   279    43    56   968     0      60  )
 42098    56   279    45    56   968     0      63  {
 42099    56   281     9    56   968     0      31  if
 42100    56   281    12    56   968     0      59  (
 42101    56   281    13    56   968     0     111  src
 42102    56   281    17    56   968     0      16  instanceof
 42103    56   281    28    56   968     0     111  DirectShortBufferU
 42104    56   281    46    56   968     0      60  )
 42105    56   281    48    56   968     0      63  {
 42106    56   282    13    56   968     0      31  if
 42107    56   282    16    56   968     0      59  (
 42108    56   282    17    56   968     0     111  src
 42109    56   282    21    56   968     0      68  ==
 42110    56   282    24    56   968     0      44  this
 42111    56   282    28    56   968     0      60  )
 42112    56   283    17    56   968     0      20  throw
 42113    56   283    23    56   968     0      15  new
 42114    56   283    27    56   968     0     111  IllegalArgumentException
 42115    56   283    51    56   968     0      59  (
 42116    56   283    52    56   968     0      60  )
 42117    56   283    53    56   968     0     102  ;
 42118    56   284    13    56   968     0     111  DirectShortBufferU
 42119    56   284    32    56   968     0     111  sb
 42120    56   284    35    56   968     0      67  =
 42121    56   284    37    56   968     0      59  (
 42122    56   284    38    56   968     0     111  DirectShortBufferU
 42123    56   284    56    56   968     0      60  )
 42124    56   284    57    56   968     0     111  src
 42125    56   284    60    56   968     0     102  ;
 42126    56   286    13    56   968     1      36  int
 42127    56   286    17    56   968     1     111  spos
 42128    56   286    22    56   968     1      67  =
 42129    56   286    24    56   968     1     111  sb.position
 42130    56   286    35    56   968     1      59  (
 42131    56   286    36    56   968     1      60  )
 42132    56   286    37    56   968     1     102  ;
 42133    56   287    13    56   968     1      36  int
 42134    56   287    17    56   968     1     111  slim
 42135    56   287    22    56   968     1      67  =
 42136    56   287    24    56   968     1     111  sb.limit
 42137    56   287    32    56   968     1      59  (
 42138    56   287    33    56   968     1      60  )
 42139    56   287    34    56   968     1     102  ;
 42140    56   288    13    56   968     0     111  assert
 42141    56   288    20    56   968     0      59  (
 42142    56   288    21    56   968     0     111  spos
 42143    56   288    26    56   968     0      92  <=
 42144    56   288    29    56   968     0     111  slim
 42145    56   288    33    56   968     0      60  )
 42146    56   288    34    56   968     0     102  ;
 42147    56   289    13    56   968     0      36  int
 42148    56   289    17    56   968     0     111  srem
 42149    56   289    22    56   968     0      67  =
 42150    56   289    24    56   968     0      59  (
 42151    56   289    25    56   968     0     111  spos
 42152    56   289    30    56   968     0      92  <=
 42153    56   289    33    56   968     0     111  slim
 42154    56   289    38    56   968     0      58  ?
 42155    56   289    40    56   968     0     111  slim
 42156    56   289    45    56   968     0      77  -
 42157    56   289    47    56   968     0     111  spos
 42158    56   289    52    56   968     0      65  :
 42159    56   289    54    56   968     0     112  0
 42160    56   289    55    56   968     0      60  )
 42161    56   289    56    56   968     0     102  ;
 42162    56   291    13    56   968     1      36  int
 42163    56   291    17    56   968     1     111  pos
 42164    56   291    21    56   968     1      67  =
 42165    56   291    23    56   968     1     111  position
 42166    56   291    31    56   968     1      59  (
 42167    56   291    32    56   968     1      60  )
 42168    56   291    33    56   968     1     102  ;
 42169    56   292    13    56   968     1      36  int
 42170    56   292    17    56   968     1     111  lim
 42171    56   292    21    56   968     1      67  =
 42172    56   292    23    56   968     1     111  limit
 42173    56   292    28    56   968     1      59  (
 42174    56   292    29    56   968     1      60  )
 42175    56   292    30    56   968     1     102  ;
 42176    56   293    13    56   968     0     111  assert
 42177    56   293    20    56   968     0      59  (
 42178    56   293    21    56   968     0     111  pos
 42179    56   293    25    56   968     0      92  <=
 42180    56   293    28    56   968     0     111  lim
 42181    56   293    31    56   968     0      60  )
 42182    56   293    32    56   968     0     102  ;
 42183    56   294    13    56   968     0      36  int
 42184    56   294    17    56   968     0     111  rem
 42185    56   294    21    56   968     0      67  =
 42186    56   294    23    56   968     0      59  (
 42187    56   294    24    56   968     0     111  pos
 42188    56   294    28    56   968     0      92  <=
 42189    56   294    31    56   968     0     111  lim
 42190    56   294    35    56   968     0      58  ?
 42191    56   294    37    56   968     0     111  lim
 42192    56   294    41    56   968     0      77  -
 42193    56   294    43    56   968     0     111  pos
 42194    56   294    47    56   968     0      65  :
 42195    56   294    49    56   968     0     112  0
 42196    56   294    50    56   968     0      60  )
 42197    56   294    51    56   968     0     102  ;
 42198    56   296    13    56   968     0      31  if
 42199    56   296    16    56   968     0      59  (
 42200    56   296    17    56   968     0     111  srem
 42201    56   296    22    56   968     0      89  >
 42202    56   296    24    56   968     0     111  rem
 42203    56   296    27    56   968     0      60  )
 42204    56   297    17    56   968     0      20  throw
 42205    56   297    23    56   968     0      15  new
 42206    56   297    27    56   968     0     111  BufferOverflowException
 42207    56   297    50    56   968     0      59  (
 42208    56   297    51    56   968     0      60  )
 42209    56   297    52    56   968     0     102  ;
 42210    56   298    13    56   968     0     111  unsafe.copyMemory
 42211    56   298    30    56   968     0      59  (
 42212    56   298    31    56   968     0     111  sb.ix
 42213    56   298    36    56   968     0      59  (
 42214    56   298    37    56   968     0     111  spos
 42215    56   298    41    56   968     0      60  )
 42216    56   298    42    56   968     0      66  ,
 42217    56   298    44    56   968     0     111  ix
 42218    56   298    46    56   968     0      59  (
 42219    56   298    47    56   968     0     111  pos
 42220    56   298    50    56   968     0      60  )
 42221    56   298    51    56   968     0      66  ,
 42222    56   298    53    56   968     0     111  srem
 42223    56   298    58    56   968     0      90  <<
 42224    56   298    61    56   968     0     112  1
 42225    56   298    62    56   968     0      60  )
 42226    56   298    63    56   968     0     102  ;
 42227    56   299    13    56   968     1     111  sb.position
 42228    56   299    24    56   968     1      59  (
 42229    56   299    25    56   968     1     111  spos
 42230    56   299    30    56   968     1      74  +
 42231    56   299    32    56   968     1     111  srem
 42232    56   299    36    56   968     1      60  )
 42233    56   299    37    56   968     1     102  ;
 42234    56   300    13    56   968     1     111  position
 42235    56   300    21    56   968     1      59  (
 42236    56   300    22    56   968     1     111  pos
 42237    56   300    26    56   968     1      74  +
 42238    56   300    28    56   968     1     111  srem
 42239    56   300    32    56   968     1      60  )
 42240    56   300    33    56   968     1     102  ;
 42241    56   301     9    56   968     0      64  }
 42242    56   301    11    56   968     0      48  else
 42243    56   301    16    56   968     0      31  if
 42244    56   301    19    56   968     0      59  (
 42245    56   301    20    56   968     0     111  src.hb
 42246    56   301    27    56   968     0      71  !=
 42247    56   301    30    56   968     0      21  null
 42248    56   301    34    56   968     0      60  )
 42249    56   301    36    56   968     0      63  {
 42250    56   303    13    56   968     1      36  int
 42251    56   303    17    56   968     1     111  spos
 42252    56   303    22    56   968     1      67  =
 42253    56   303    24    56   968     1     111  src.position
 42254    56   303    36    56   968     1      59  (
 42255    56   303    37    56   968     1      60  )
 42256    56   303    38    56   968     1     102  ;
 42257    56   304    13    56   968     1      36  int
 42258    56   304    17    56   968     1     111  slim
 42259    56   304    22    56   968     1      67  =
 42260    56   304    24    56   968     1     111  src.limit
 42261    56   304    33    56   968     1      59  (
 42262    56   304    34    56   968     1      60  )
 42263    56   304    35    56   968     1     102  ;
 42264    56   305    13    56   968     0     111  assert
 42265    56   305    20    56   968     0      59  (
 42266    56   305    21    56   968     0     111  spos
 42267    56   305    26    56   968     0      92  <=
 42268    56   305    29    56   968     0     111  slim
 42269    56   305    33    56   968     0      60  )
 42270    56   305    34    56   968     0     102  ;
 42271    56   306    13    56   968     0      36  int
 42272    56   306    17    56   968     0     111  srem
 42273    56   306    22    56   968     0      67  =
 42274    56   306    24    56   968     0      59  (
 42275    56   306    25    56   968     0     111  spos
 42276    56   306    30    56   968     0      92  <=
 42277    56   306    33    56   968     0     111  slim
 42278    56   306    38    56   968     0      58  ?
 42279    56   306    40    56   968     0     111  slim
 42280    56   306    45    56   968     0      77  -
 42281    56   306    47    56   968     0     111  spos
 42282    56   306    52    56   968     0      65  :
 42283    56   306    54    56   968     0     112  0
 42284    56   306    55    56   968     0      60  )
 42285    56   306    56    56   968     0     102  ;
 42286    56   308    13    56   968     0     111  put
 42287    56   308    16    56   968     0      59  (
 42288    56   308    17    56   968     0     111  src.hb
 42289    56   308    23    56   968     0      66  ,
 42290    56   308    25    56   968     0     111  src.offset
 42291    56   308    36    56   968     0      74  +
 42292    56   308    38    56   968     0     111  spos
 42293    56   308    42    56   968     0      66  ,
 42294    56   308    44    56   968     0     111  srem
 42295    56   308    48    56   968     0      60  )
 42296    56   308    49    56   968     0     102  ;
 42297    56   309    13    56   968     0     111  src.position
 42298    56   309    25    56   968     0      59  (
 42299    56   309    26    56   968     0     111  spos
 42300    56   309    31    56   968     0      74  +
 42301    56   309    33    56   968     0     111  srem
 42302    56   309    37    56   968     0      60  )
 42303    56   309    38    56   968     0     102  ;
 42304    56   311     9    56   968     0      64  }
 42305    56   311    11    56   968     0      48  else
 42306    56   311    16    56   968     0      63  {
 42307    56   312    13    56   968     0     111  super.put
 42308    56   312    22    56   968     0      59  (
 42309    56   312    23    56   968     0     111  src
 42310    56   312    26    56   968     0      60  )
 42311    56   312    27    56   968     0     102  ;
 42312    56   313     9    56   968     0      64  }
 42313    56   314     9    56   968     0      19  return
 42314    56   314    16    56   968     0      44  this
 42315    56   314    20    56   968     0     102  ;
 42316    56   318     5    56   968     0      64  }
 42317    56   318     5    56   968     0    2284  ENDMETHOD
 42318    56   318     5    56   969     0    2285  STARTMETHOD
 42319    56   320     5    56   969     0      10  public
 42320    56   320    12    56   969     0     111  ShortBuffer
 42321    56   320    24    56   969     0     111  put
 42322    56   320    27    56   969     0      59  (
 42323    56   320    28    56   969     0      12  short
 42324    56   320    33    56   969     0      61  [
 42325    56   320    34    56   969     0      62  ]
 42326    56   320    36    56   969     0     111  src
 42327    56   320    39    56   969     0      66  ,
 42328    56   320    41    56   969     0      36  int
 42329    56   320    45    56   969     0     111  offset
 42330    56   320    51    56   969     0      66  ,
 42331    56   320    53    56   969     0      36  int
 42332    56   320    57    56   969     0     111  length
 42333    56   320    63    56   969     0      60  )
 42334    56   320    65    56   969     0      63  {
 42335    56   322     9    56   969     0      31  if
 42336    56   322    12    56   969     0      59  (
 42337    56   322    13    56   969     0      59  (
 42338    56   322    14    56   969     0     111  length
 42339    56   322    21    56   969     0      90  <<
 42340    56   322    24    56   969     0     112  1
 42341    56   322    25    56   969     0      60  )
 42342    56   322    27    56   969     0      89  >
 42343    56   322    29    56   969     0     111  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD
 42344    56   322    63    56   969     0      60  )
 42345    56   322    65    56   969     0      63  {
 42346    56   323    13    56   969     0     111  checkBounds
 42347    56   323    24    56   969     0      59  (
 42348    56   323    25    56   969     0     111  offset
 42349    56   323    31    56   969     0      66  ,
 42350    56   323    33    56   969     0     111  length
 42351    56   323    39    56   969     0      66  ,
 42352    56   323    41    56   969     0     111  src.length
 42353    56   323    51    56   969     0      60  )
 42354    56   323    52    56   969     0     102  ;
 42355    56   324    13    56   969     1      36  int
 42356    56   324    17    56   969     1     111  pos
 42357    56   324    21    56   969     1      67  =
 42358    56   324    23    56   969     1     111  position
 42359    56   324    31    56   969     1      59  (
 42360    56   324    32    56   969     1      60  )
 42361    56   324    33    56   969     1     102  ;
 42362    56   325    13    56   969     1      36  int
 42363    56   325    17    56   969     1     111  lim
 42364    56   325    21    56   969     1      67  =
 42365    56   325    23    56   969     1     111  limit
 42366    56   325    28    56   969     1      59  (
 42367    56   325    29    56   969     1      60  )
 42368    56   325    30    56   969     1     102  ;
 42369    56   326    13    56   969     0     111  assert
 42370    56   326    20    56   969     0      59  (
 42371    56   326    21    56   969     0     111  pos
 42372    56   326    25    56   969     0      92  <=
 42373    56   326    28    56   969     0     111  lim
 42374    56   326    31    56   969     0      60  )
 42375    56   326    32    56   969     0     102  ;
 42376    56   327    13    56   969     0      36  int
 42377    56   327    17    56   969     0     111  rem
 42378    56   327    21    56   969     0      67  =
 42379    56   327    23    56   969     0      59  (
 42380    56   327    24    56   969     0     111  pos
 42381    56   327    28    56   969     0      92  <=
 42382    56   327    31    56   969     0     111  lim
 42383    56   327    35    56   969     0      58  ?
 42384    56   327    37    56   969     0     111  lim
 42385    56   327    41    56   969     0      77  -
 42386    56   327    43    56   969     0     111  pos
 42387    56   327    47    56   969     0      65  :
 42388    56   327    49    56   969     0     112  0
 42389    56   327    50    56   969     0      60  )
 42390    56   327    51    56   969     0     102  ;
 42391    56   328    13    56   969     0      31  if
 42392    56   328    16    56   969     0      59  (
 42393    56   328    17    56   969     0     111  length
 42394    56   328    24    56   969     0      89  >
 42395    56   328    26    56   969     0     111  rem
 42396    56   328    29    56   969     0      60  )
 42397    56   329    17    56   969     0      20  throw
 42398    56   329    23    56   969     0      15  new
 42399    56   329    27    56   969     0     111  BufferOverflowException
 42400    56   329    50    56   969     0      59  (
 42401    56   329    51    56   969     0      60  )
 42402    56   329    52    56   969     0     102  ;
 42403    56   331    13    56   969     0      31  if
 42404    56   331    16    56   969     0      59  (
 42405    56   331    17    56   969     0     111  order
 42406    56   331    22    56   969     0      59  (
 42407    56   331    23    56   969     0      60  )
 42408    56   331    25    56   969     0      71  !=
 42409    56   331    28    56   969     0     111  ByteOrder.nativeOrder
 42410    56   331    49    56   969     0      59  (
 42411    56   331    50    56   969     0      60  )
 42412    56   331    51    56   969     0      60  )
 42413    56   332    17    56   969     0     111  Bits.copyFromShortArray
 42414    56   332    40    56   969     0      59  (
 42415    56   332    41    56   969     0     111  src
 42416    56   332    44    56   969     0      66  ,
 42417    56   332    46    56   969     0     111  offset
 42418    56   332    53    56   969     0      90  <<
 42419    56   332    56    56   969     0     112  1
 42420    56   332    57    56   969     0      66  ,
 42421    56   333    45    56   969     0     111  ix
 42422    56   333    47    56   969     0      59  (
 42423    56   333    48    56   969     0     111  pos
 42424    56   333    51    56   969     0      60  )
 42425    56   333    52    56   969     0      66  ,
 42426    56   333    54    56   969     0     111  length
 42427    56   333    61    56   969     0      90  <<
 42428    56   333    64    56   969     0     112  1
 42429    56   333    65    56   969     0      60  )
 42430    56   333    66    56   969     0     102  ;
 42431    56   334    13    56   969     0      48  else
 42432    56   335    17    56   969     0     111  Bits.copyFromByteArray
 42433    56   335    39    56   969     0      59  (
 42434    56   335    40    56   969     0     111  src
 42435    56   335    43    56   969     0      66  ,
 42436    56   335    45    56   969     0     111  offset
 42437    56   335    52    56   969     0      90  <<
 42438    56   335    55    56   969     0     112  1
 42439    56   335    56    56   969     0      66  ,
 42440    56   336    40    56   969     0     111  ix
 42441    56   336    42    56   969     0      59  (
 42442    56   336    43    56   969     0     111  pos
 42443    56   336    46    56   969     0      60  )
 42444    56   336    47    56   969     0      66  ,
 42445    56   336    49    56   969     0     111  length
 42446    56   336    56    56   969     0      90  <<
 42447    56   336    59    56   969     0     112  1
 42448    56   336    60    56   969     0      60  )
 42449    56   336    61    56   969     0     102  ;
 42450    56   337    13    56   969     0     111  position
 42451    56   337    21    56   969     0      59  (
 42452    56   337    22    56   969     0     111  pos
 42453    56   337    26    56   969     0      74  +
 42454    56   337    28    56   969     0     111  length
 42455    56   337    34    56   969     0      60  )
 42456    56   337    35    56   969     0     102  ;
 42457    56   338     9    56   969     0      64  }
 42458    56   338    11    56   969     0      48  else
 42459    56   338    16    56   969     0      63  {
 42460    56   339    13    56   969     0     111  super.put
 42461    56   339    22    56   969     0      59  (
 42462    56   339    23    56   969     0     111  src
 42463    56   339    26    56   969     0      66  ,
 42464    56   339    28    56   969     0     111  offset
 42465    56   339    34    56   969     0      66  ,
 42466    56   339    36    56   969     0     111  length
 42467    56   339    42    56   969     0      60  )
 42468    56   339    43    56   969     0     102  ;
 42469    56   340     9    56   969     0      64  }
 42470    56   341     9    56   969     0      19  return
 42471    56   341    16    56   969     0      44  this
 42472    56   341    20    56   969     0     102  ;
 42473    56   345     5    56   969     0      64  }
 42474    56   345     5    56   969     0    2286  ENDMETHOD
 42475    56   345     5    56   970     0    2287  STARTMETHOD
 42476    56   347     5    56   970     0      10  public
 42477    56   347    12    56   970     0     111  ShortBuffer
 42478    56   347    24    56   970     0     111  compact
 42479    56   347    31    56   970     0      59  (
 42480    56   347    32    56   970     0      60  )
 42481    56   347    34    56   970     0      63  {
 42482    56   349     9    56   970     1      36  int
 42483    56   349    13    56   970     1     111  pos
 42484    56   349    17    56   970     1      67  =
 42485    56   349    19    56   970     1     111  position
 42486    56   349    27    56   970     1      59  (
 42487    56   349    28    56   970     1      60  )
 42488    56   349    29    56   970     1     102  ;
 42489    56   350     9    56   970     1      36  int
 42490    56   350    13    56   970     1     111  lim
 42491    56   350    17    56   970     1      67  =
 42492    56   350    19    56   970     1     111  limit
 42493    56   350    24    56   970     1      59  (
 42494    56   350    25    56   970     1      60  )
 42495    56   350    26    56   970     1     102  ;
 42496    56   351     9    56   970     0     111  assert
 42497    56   351    16    56   970     0      59  (
 42498    56   351    17    56   970     0     111  pos
 42499    56   351    21    56   970     0      92  <=
 42500    56   351    24    56   970     0     111  lim
 42501    56   351    27    56   970     0      60  )
 42502    56   351    28    56   970     0     102  ;
 42503    56   352     9    56   970     0      36  int
 42504    56   352    13    56   970     0     111  rem
 42505    56   352    17    56   970     0      67  =
 42506    56   352    19    56   970     0      59  (
 42507    56   352    20    56   970     0     111  pos
 42508    56   352    24    56   970     0      92  <=
 42509    56   352    27    56   970     0     111  lim
 42510    56   352    31    56   970     0      58  ?
 42511    56   352    33    56   970     0     111  lim
 42512    56   352    37    56   970     0      77  -
 42513    56   352    39    56   970     0     111  pos
 42514    56   352    43    56   970     0      65  :
 42515    56   352    45    56   970     0     112  0
 42516    56   352    46    56   970     0      60  )
 42517    56   352    47    56   970     0     102  ;
 42518    56   354     9    56   970     0     111  unsafe.copyMemory
 42519    56   354    26    56   970     0      59  (
 42520    56   354    27    56   970     0     111  ix
 42521    56   354    29    56   970     0      59  (
 42522    56   354    30    56   970     0     111  pos
 42523    56   354    33    56   970     0      60  )
 42524    56   354    34    56   970     0      66  ,
 42525    56   354    36    56   970     0     111  ix
 42526    56   354    38    56   970     0      59  (
 42527    56   354    39    56   970     0     112  0
 42528    56   354    40    56   970     0      60  )
 42529    56   354    41    56   970     0      66  ,
 42530    56   354    43    56   970     0     111  rem
 42531    56   354    47    56   970     0      90  <<
 42532    56   354    50    56   970     0     112  1
 42533    56   354    51    56   970     0      60  )
 42534    56   354    52    56   970     0     102  ;
 42535    56   355     9    56   970     0     111  position
 42536    56   355    17    56   970     0      59  (
 42537    56   355    18    56   970     0     111  rem
 42538    56   355    21    56   970     0      60  )
 42539    56   355    22    56   970     0     102  ;
 42540    56   356     9    56   970     0     111  limit
 42541    56   356    14    56   970     0      59  (
 42542    56   356    15    56   970     0     111  capacity
 42543    56   356    23    56   970     0      59  (
 42544    56   356    24    56   970     0      60  )
 42545    56   356    25    56   970     0      60  )
 42546    56   356    26    56   970     0     102  ;
 42547    56   357     9    56   970     0     111  clearMark
 42548    56   357    18    56   970     0      59  (
 42549    56   357    19    56   970     0      60  )
 42550    56   357    20    56   970     0     102  ;
 42551    56   358     9    56   970     0      19  return
 42552    56   358    16    56   970     0      44  this
 42553    56   358    20    56   970     1     102  ;
 42554    56   362     5    56   970     1      64  }
 42555    56   362     5    56   970     0    2288  ENDMETHOD
 42556    56   362     5    56   971     0    2289  STARTMETHOD
 42557    56   364     5    56   971     0      10  public
 42558    56   364    12    56   971     0      39  boolean
 42559    56   364    20    56   971     0     111  isDirect
 42560    56   364    28    56   971     0      59  (
 42561    56   364    29    56   971     0      60  )
 42562    56   364    31    56   971     0      63  {
 42563    56   365     9    56   971     0      19  return
 42564    56   365    16    56   971     0      52  true
 42565    56   365    20    56   971     1     102  ;
 42566    56   366     5    56   971     1      64  }
 42567    56   366     5    56   971     0    2290  ENDMETHOD
 42568    56   366     5    56   972     0    2291  STARTMETHOD
 42569    56   368     5    56   972     0      10  public
 42570    56   368    12    56   972     0      39  boolean
 42571    56   368    20    56   972     0     111  isReadOnly
 42572    56   368    30    56   972     0      59  (
 42573    56   368    31    56   972     0      60  )
 42574    56   368    33    56   972     0      63  {
 42575    56   369     9    56   972     0      19  return
 42576    56   369    16    56   972     0      43  false
 42577    56   369    21    56   972     1     102  ;
 42578    56   370     5    56   972     1      64  }
 42579    56   370     5    56   972     0    2292  ENDMETHOD
 42580    56   370     5    56   973     0    2293  STARTMETHOD
 42581    56   416     5    56   973     0      10  public
 42582    56   416    12    56   973     0     111  ByteOrder
 42583    56   416    22    56   973     0     111  order
 42584    56   416    27    56   973     0      59  (
 42585    56   416    28    56   973     0      60  )
 42586    56   416    30    56   973     0      63  {
 42587    56   422     9    56   973     0      19  return
 42588    56   422    16    56   973     0      59  (
 42589    56   422    17    56   973     0      59  (
 42590    56   422    18    56   973     0     111  ByteOrder.nativeOrder
 42591    56   422    39    56   973     0      59  (
 42592    56   422    40    56   973     0      60  )
 42593    56   422    42    56   973     0      71  !=
 42594    56   422    45    56   973     0     111  ByteOrder.BIG_ENDIAN
 42595    56   422    65    56   973     0      60  )
 42596    56   423    17    56   973     0      58  ?
 42597    56   423    19    56   973     0     111  ByteOrder.LITTLE_ENDIAN
 42598    56   423    43    56   973     0      65  :
 42599    56   423    45    56   973     0     111  ByteOrder.BIG_ENDIAN
 42600    56   423    65    56   973     0      60  )
 42601    56   423    66    56   973     0     102  ;
 42602    56   425     5    56   973     0      64  }
 42603    56   425     5    56   973     0    2294  ENDMETHOD
 42604    56   452     1    56    -1     0      64  }
 42605    56   452     1    56    -1     1    2295  ENDCLASS
 42606    56   452     1    -1    -1     1    2296  ENDFILE C:\javasrc\java\nio\DirectShortBufferU.java
 42607    57     1     1    -1    -1     1    2297  STARTFILE C:\javasrc\java\nio\DoubleBuffer.java
 42608    57    28     1    -1    -1     0       5  package
 42609    57    28     9    -1    -1     0     111  java.nio
 42610    57    28    17    -1    -1     0     102  ;
 42611    57   257     1    -1    -1     0      10  public
 42612    57   257     8    -1    -1     0       7  abstract
 42613    57   257    17    57    -1     0    2298  STARTCLASS
 42614    57   257    17    57    -1     0      24  class
 42615    57   257    23    57    -1     0     111  DoubleBuffer
 42616    57   258     5    57    -1     0      38  extends
 42617    57   258    13    57    -1     0     111  Buffer
 42618    57   259     5    57    -1     0      17  implements
 42619    57   259    16    57    -1     0     111  Comparable
 42620    57   259    26    57    -1     0      93  <
 42621    57   259    27    57    -1     0     111  DoubleBuffer
 42622    57   259    39    57    -1     0      89  >
 42623    57   260     1    57    -1     0      63  {
 42624    57   266     5    57    -1     0       6  final
 42625    57   266    11    57    -1     0      32  double
 42626    57   266    17    57    -1     0      61  [
 42627    57   266    18    57    -1     0      62  ]
 42628    57   266    20    57    -1     0     111  hb
 42629    57   266    22    57    -1     0     102  ;
 42630    57   267     5    57    -1     0       6  final
 42631    57   267    11    57    -1     0      36  int
 42632    57   267    15    57    -1     0     111  offset
 42633    57   267    21    57    -1     0     102  ;
 42634    57   268     5    57    -1     0      39  boolean
 42635    57   268    13    57    -1     0     111  isReadOnly
 42636    57   268    23    57    -1     0     102  ;
 42637    57   268    23    57   974     0    2299  STARTMETHOD
 42638    57   273     5    57   974     0     111  DoubleBuffer
 42639    57   273    17    57   974     0      59  (
 42640    57   273    18    57   974     0      36  int
 42641    57   273    22    57   974     0     111  mark
 42642    57   273    26    57   974     0      66  ,
 42643    57   273    28    57   974     0      36  int
 42644    57   273    32    57   974     0     111  pos
 42645    57   273    35    57   974     0      66  ,
 42646    57   273    37    57   974     0      36  int
 42647    57   273    41    57   974     0     111  lim
 42648    57   273    44    57   974     0      66  ,
 42649    57   273    46    57   974     0      36  int
 42650    57   273    50    57   974     0     111  cap
 42651    57   273    53    57   974     0      66  ,
 42652    57   274    18    57   974     0      32  double
 42653    57   274    24    57   974     0      61  [
 42654    57   274    25    57   974     0      62  ]
 42655    57   274    27    57   974     0     111  hb
 42656    57   274    29    57   974     0      66  ,
 42657    57   274    31    57   974     0      36  int
 42658    57   274    35    57   974     0     111  offset
 42659    57   274    41    57   974     0      60  )
 42660    57   275     5    57   974     0      63  {
 42661    57   276     9    57   974     0      27  super
 42662    57   276    14    57   974     0      59  (
 42663    57   276    15    57   974     0     111  mark
 42664    57   276    19    57   974     0      66  ,
 42665    57   276    21    57   974     0     111  pos
 42666    57   276    24    57   974     0      66  ,
 42667    57   276    26    57   974     0     111  lim
 42668    57   276    29    57   974     0      66  ,
 42669    57   276    31    57   974     0     111  cap
 42670    57   276    34    57   974     0      60  )
 42671    57   276    35    57   974     0     102  ;
 42672    57   277     9    57   974     1     111  this.hb
 42673    57   277    17    57   974     1      67  =
 42674    57   277    19    57   974     1     111  hb
 42675    57   277    21    57   974     1     102  ;
 42676    57   278     9    57   974     1     111  this.offset
 42677    57   278    21    57   974     1      67  =
 42678    57   278    23    57   974     1     111  offset
 42679    57   278    29    57   974     1     102  ;
 42680    57   279     5    57   974     1      64  }
 42681    57   279     5    57   974     0    2300  ENDMETHOD
 42682    57   279     5    57   975     0    2301  STARTMETHOD
 42683    57   283     5    57   975     0     111  DoubleBuffer
 42684    57   283    17    57   975     0      59  (
 42685    57   283    18    57   975     0      36  int
 42686    57   283    22    57   975     0     111  mark
 42687    57   283    26    57   975     0      66  ,
 42688    57   283    28    57   975     0      36  int
 42689    57   283    32    57   975     0     111  pos
 42690    57   283    35    57   975     0      66  ,
 42691    57   283    37    57   975     0      36  int
 42692    57   283    41    57   975     0     111  lim
 42693    57   283    44    57   975     0      66  ,
 42694    57   283    46    57   975     0      36  int
 42695    57   283    50    57   975     0     111  cap
 42696    57   283    53    57   975     0      60  )
 42697    57   283    55    57   975     0      63  {
 42698    57   284     9    57   975     0      44  this
 42699    57   284    13    57   975     0      59  (
 42700    57   284    14    57   975     0     111  mark
 42701    57   284    18    57   975     0      66  ,
 42702    57   284    20    57   975     0     111  pos
 42703    57   284    23    57   975     0      66  ,
 42704    57   284    25    57   975     0     111  lim
 42705    57   284    28    57   975     0      66  ,
 42706    57   284    30    57   975     0     111  cap
 42707    57   284    33    57   975     0      66  ,
 42708    57   284    35    57   975     0      21  null
 42709    57   284    39    57   975     0      66  ,
 42710    57   284    41    57   975     0     112  0
 42711    57   284    42    57   975     0      60  )
 42712    57   284    43    57   975     1     102  ;
 42713    57   285     5    57   975     1      64  }
 42714    57   285     5    57   975     0    2302  ENDMETHOD
 42715    57   285     5    57   976     0    2303  STARTMETHOD
 42716    57   326     5    57   976     0      10  public
 42717    57   326    12    57   976     0      45  static
 42718    57   326    19    57   976     0     111  DoubleBuffer
 42719    57   326    32    57   976     0     111  allocate
 42720    57   326    40    57   976     0      59  (
 42721    57   326    41    57   976     0      36  int
 42722    57   326    45    57   976     0     111  capacity
 42723    57   326    53    57   976     0      60  )
 42724    57   326    55    57   976     0      63  {
 42725    57   327     9    57   976     0      31  if
 42726    57   327    12    57   976     0      59  (
 42727    57   327    13    57   976     0     111  capacity
 42728    57   327    22    57   976     0      93  <
 42729    57   327    24    57   976     0     112  0
 42730    57   327    25    57   976     0      60  )
 42731    57   328    13    57   976     0      20  throw
 42732    57   328    19    57   976     0      15  new
 42733    57   328    23    57   976     0     111  IllegalArgumentException
 42734    57   328    47    57   976     0      59  (
 42735    57   328    48    57   976     0      60  )
 42736    57   328    49    57   976     0     102  ;
 42737    57   329     9    57   976     0      19  return
 42738    57   329    16    57   976     0      15  new
 42739    57   329    20    57   976     0     111  HeapDoubleBuffer
 42740    57   329    36    57   976     0      59  (
 42741    57   329    37    57   976     0     111  capacity
 42742    57   329    45    57   976     0      66  ,
 42743    57   329    47    57   976     0     111  capacity
 42744    57   329    55    57   976     0      60  )
 42745    57   329    56    57   976     1     102  ;
 42746    57   330     5    57   976     1      64  }
 42747    57   330     5    57   976     0    2304  ENDMETHOD
 42748    57   330     5    57   977     0    2305  STARTMETHOD
 42749    57   363     5    57   977     0      10  public
 42750    57   363    12    57   977     0      45  static
 42751    57   363    19    57   977     0     111  DoubleBuffer
 42752    57   363    32    57   977     0     111  wrap
 42753    57   363    36    57   977     0      59  (
 42754    57   363    37    57   977     0      32  double
 42755    57   363    43    57   977     0      61  [
 42756    57   363    44    57   977     0      62  ]
 42757    57   363    46    57   977     0     111  array
 42758    57   363    51    57   977     0      66  ,
 42759    57   364    37    57   977     0      36  int
 42760    57   364    41    57   977     0     111  offset
 42761    57   364    47    57   977     0      66  ,
 42762    57   364    49    57   977     0      36  int
 42763    57   364    53    57   977     0     111  length
 42764    57   364    59    57   977     0      60  )
 42765    57   365     5    57   977     0      63  {
 42766    57   366     9    57   977     0      35  try
 42767    57   366    13    57   977     0      63  {
 42768    57   367    13    57   977     0      19  return
 42769    57   367    20    57   977     0      15  new
 42770    57   367    24    57   977     0     111  HeapDoubleBuffer
 42771    57   367    40    57   977     0      59  (
 42772    57   367    41    57   977     0     111  array
 42773    57   367    46    57   977     0      66  ,
 42774    57   367    48    57   977     0     111  offset
 42775    57   367    54    57   977     0      66  ,
 42776    57   367    56    57   977     0     111  length
 42777    57   367    62    57   977     0      60  )
 42778    57   367    63    57   977     0     102  ;
 42779    57   368     9    57   977     0      64  }
 42780    57   368    11    57   977     0      34  catch
 42781    57   368    17    57   977     0      59  (
 42782    57   368    18    57   977     0     111  IllegalArgumentException
 42783    57   368    43    57   977     0     111  x
 42784    57   368    44    57   977     0      60  )
 42785    57   368    46    57   977     0      63  {
 42786    57   369    13    57   977     0      20  throw
 42787    57   369    19    57   977     0      15  new
 42788    57   369    23    57   977     0     111  IndexOutOfBoundsException
 42789    57   369    48    57   977     0      59  (
 42790    57   369    49    57   977     0      60  )
 42791    57   369    50    57   977     0     102  ;
 42792    57   370     9    57   977     0      64  }
 42793    57   371     5    57   977     0      64  }
 42794    57   371     5    57   977     0    2306  ENDMETHOD
 42795    57   371     5    57   978     0    2307  STARTMETHOD
 42796    57   389     5    57   978     0      10  public
 42797    57   389    12    57   978     0      45  static
 42798    57   389    19    57   978     0     111  DoubleBuffer
 42799    57   389    32    57   978     0     111  wrap
 42800    57   389    36    57   978     0      59  (
 42801    57   389    37    57   978     0      32  double
 42802    57   389    43    57   978     0      61  [
 42803    57   389    44    57   978     0      62  ]
 42804    57   389    46    57   978     0     111  array
 42805    57   389    51    57   978     0      60  )
 42806    57   389    53    57   978     0      63  {
 42807    57   390     9    57   978     0      19  return
 42808    57   390    16    57   978     0     111  wrap
 42809    57   390    20    57   978     0      59  (
 42810    57   390    21    57   978     0     111  array
 42811    57   390    26    57   978     0      66  ,
 42812    57   390    28    57   978     0     112  0
 42813    57   390    29    57   978     0      66  ,
 42814    57   390    31    57   978     0     111  array.length
 42815    57   390    43    57   978     0      60  )
 42816    57   390    44    57   978     0     102  ;
 42817    57   391     5    57   978     0      64  }
 42818    57   391     5    57   978     0    2308  ENDMETHOD
 42819    57   503     5    57    -1     1      10  public
 42820    57   503    12    57    -1     1       7  abstract
 42821    57   503    21    57    -1     1     111  DoubleBuffer
 42822    57   503    34    57    -1     1     111  slice
 42823    57   503    39    57    -1     1      59  (
 42824    57   503    40    57    -1     1      60  )
 42825    57   503    41    57    -1     1     102  ;
 42826    57   520     5    57    -1     1      10  public
 42827    57   520    12    57    -1     1       7  abstract
 42828    57   520    21    57    -1     1     111  DoubleBuffer
 42829    57   520    34    57    -1     1     111  duplicate
 42830    57   520    43    57    -1     1      59  (
 42831    57   520    44    57    -1     1      60  )
 42832    57   520    45    57    -1     1     102  ;
 42833    57   540     5    57    -1     1      10  public
 42834    57   540    12    57    -1     1       7  abstract
 42835    57   540    21    57    -1     1     111  DoubleBuffer
 42836    57   540    34    57    -1     1     111  asReadOnlyBuffer
 42837    57   540    50    57    -1     1      59  (
 42838    57   540    51    57    -1     1      60  )
 42839    57   540    52    57    -1     1     102  ;
 42840    57   554     5    57    -1     0      10  public
 42841    57   554    12    57    -1     0       7  abstract
 42842    57   554    21    57    -1     0      32  double
 42843    57   554    28    57    -1     0     111  get
 42844    57   554    31    57    -1     0      59  (
 42845    57   554    32    57    -1     0      60  )
 42846    57   554    33    57    -1     0     102  ;
 42847    57   573     5    57    -1     0      10  public
 42848    57   573    12    57    -1     0       7  abstract
 42849    57   573    21    57    -1     0     111  DoubleBuffer
 42850    57   573    34    57    -1     0     111  put
 42851    57   573    37    57    -1     0      59  (
 42852    57   573    38    57    -1     0      32  double
 42853    57   573    45    57    -1     0     111  d
 42854    57   573    46    57    -1     0      60  )
 42855    57   573    47    57    -1     0     102  ;
 42856    57   588     5    57    -1     0      10  public
 42857    57   588    12    57    -1     0       7  abstract
 42858    57   588    21    57    -1     0      32  double
 42859    57   588    28    57    -1     0     111  get
 42860    57   588    31    57    -1     0      59  (
 42861    57   588    32    57    -1     0      36  int
 42862    57   588    36    57    -1     0     111  index
 42863    57   588    41    57    -1     0      60  )
 42864    57   588    42    57    -1     0     102  ;
 42865    57   611     5    57    -1     0      10  public
 42866    57   611    12    57    -1     0       7  abstract
 42867    57   611    21    57    -1     0     111  DoubleBuffer
 42868    57   611    34    57    -1     0     111  put
 42869    57   611    37    57    -1     0      59  (
 42870    57   611    38    57    -1     0      36  int
 42871    57   611    42    57    -1     0     111  index
 42872    57   611    47    57    -1     0      66  ,
 42873    57   611    49    57    -1     0      32  double
 42874    57   611    56    57    -1     0     111  d
 42875    57   611    57    57    -1     0      60  )
 42876    57   611    58    57    -1     0     102  ;
 42877    57   611    58    57   979     0    2309  STARTMETHOD
 42878    57   665     5    57   979     0      10  public
 42879    57   665    12    57   979     0     111  DoubleBuffer
 42880    57   665    25    57   979     0     111  get
 42881    57   665    28    57   979     0      59  (
 42882    57   665    29    57   979     0      32  double
 42883    57   665    35    57   979     0      61  [
 42884    57   665    36    57   979     0      62  ]
 42885    57   665    38    57   979     0     111  dst
 42886    57   665    41    57   979     0      66  ,
 42887    57   665    43    57   979     0      36  int
 42888    57   665    47    57   979     0     111  offset
 42889    57   665    53    57   979     0      66  ,
 42890    57   665    55    57   979     0      36  int
 42891    57   665    59    57   979     0     111  length
 42892    57   665    65    57   979     0      60  )
 42893    57   665    67    57   979     0      63  {
 42894    57   666     9    57   979     0     111  checkBounds
 42895    57   666    20    57   979     0      59  (
 42896    57   666    21    57   979     0     111  offset
 42897    57   666    27    57   979     0      66  ,
 42898    57   666    29    57   979     0     111  length
 42899    57   666    35    57   979     0      66  ,
 42900    57   666    37    57   979     0     111  dst.length
 42901    57   666    47    57   979     0      60  )
 42902    57   666    48    57   979     0     102  ;
 42903    57   667     9    57   979     0      31  if
 42904    57   667    12    57   979     0      59  (
 42905    57   667    13    57   979     0     111  length
 42906    57   667    20    57   979     0      89  >
 42907    57   667    22    57   979     0     111  remaining
 42908    57   667    31    57   979     0      59  (
 42909    57   667    32    57   979     0      60  )
 42910    57   667    33    57   979     0      60  )
 42911    57   668    13    57   979     0      20  throw
 42912    57   668    19    57   979     0      15  new
 42913    57   668    23    57   979     0     111  BufferUnderflowException
 42914    57   668    47    57   979     0      59  (
 42915    57   668    48    57   979     0      60  )
 42916    57   668    49    57   979     0     102  ;
 42917    57   669     9    57   979     0      36  int
 42918    57   669    13    57   979     0     111  end
 42919    57   669    17    57   979     0      67  =
 42920    57   669    19    57   979     0     111  offset
 42921    57   669    26    57   979     0      74  +
 42922    57   669    28    57   979     0     111  length
 42923    57   669    34    57   979     0     102  ;
 42924    57   670     9    57   979     0      37  for
 42925    57   670    13    57   979     0      59  (
 42926    57   670    14    57   979     0      36  int
 42927    57   670    18    57   979     0     111  i
 42928    57   670    20    57   979     0      67  =
 42929    57   670    22    57   979     0     111  offset
 42930    57   670    28    57   979     0     102  ;
 42931    57   670    30    57   979     0     111  i
 42932    57   670    32    57   979     0      93  <
 42933    57   670    34    57   979     0     111  end
 42934    57   670    37    57   979     0     102  ;
 42935    57   670    39    57   979     0     111  i
 42936    57   670    40    57   979     0      76  ++
 42937    57   670    42    57   979     0      60  )
 42938    57   671    13    57   979     0     111  dst
 42939    57   671    16    57   979     0      61  [
 42940    57   671    17    57   979     0     111  i
 42941    57   671    18    57   979     0      62  ]
 42942    57   671    20    57   979     0      67  =
 42943    57   671    22    57   979     0     111  get
 42944    57   671    25    57   979     0      59  (
 42945    57   671    26    57   979     0      60  )
 42946    57   671    27    57   979     0     102  ;
 42947    57   672     9    57   979     0      19  return
 42948    57   672    16    57   979     0      44  this
 42949    57   672    20    57   979     0     102  ;
 42950    57   673     5    57   979     0      64  }
 42951    57   673     5    57   979     0    2310  ENDMETHOD
 42952    57   673     5    57   980     0    2311  STARTMETHOD
 42953    57   691     5    57   980     0      10  public
 42954    57   691    12    57   980     0     111  DoubleBuffer
 42955    57   691    25    57   980     0     111  get
 42956    57   691    28    57   980     0      59  (
 42957    57   691    29    57   980     0      32  double
 42958    57   691    35    57   980     0      61  [
 42959    57   691    36    57   980     0      62  ]
 42960    57   691    38    57   980     0     111  dst
 42961    57   691    41    57   980     0      60  )
 42962    57   691    43    57   980     0      63  {
 42963    57   692     9    57   980     0      19  return
 42964    57   692    16    57   980     0     111  get
 42965    57   692    19    57   980     0      59  (
 42966    57   692    20    57   980     0     111  dst
 42967    57   692    23    57   980     0      66  ,
 42968    57   692    25    57   980     0     112  0
 42969    57   692    26    57   980     0      66  ,
 42970    57   692    28    57   980     0     111  dst.length
 42971    57   692    38    57   980     0      60  )
 42972    57   692    39    57   980     0     102  ;
 42973    57   693     5    57   980     0      64  }
 42974    57   693     5    57   980     0    2312  ENDMETHOD
 42975    57   693     5    57   981     0    2313  STARTMETHOD
 42976    57   739     5    57   981     0      10  public
 42977    57   739    12    57   981     0     111  DoubleBuffer
 42978    57   739    25    57   981     0     111  put
 42979    57   739    28    57   981     0      59  (
 42980    57   739    29    57   981     0     111  DoubleBuffer
 42981    57   739    42    57   981     0     111  src
 42982    57   739    45    57   981     0      60  )
 42983    57   739    47    57   981     0      63  {
 42984    57   740     9    57   981     0      31  if
 42985    57   740    12    57   981     0      59  (
 42986    57   740    13    57   981     0     111  src
 42987    57   740    17    57   981     0      68  ==
 42988    57   740    20    57   981     0      44  this
 42989    57   740    24    57   981     0      60  )
 42990    57   741    13    57   981     0      20  throw
 42991    57   741    19    57   981     0      15  new
 42992    57   741    23    57   981     0     111  IllegalArgumentException
 42993    57   741    47    57   981     0      59  (
 42994    57   741    48    57   981     0      60  )
 42995    57   741    49    57   981     0     102  ;
 42996    57   742     9    57   981     0      36  int
 42997    57   742    13    57   981     0     111  n
 42998    57   742    15    57   981     0      67  =
 42999    57   742    17    57   981     0     111  src.remaining
 43000    57   742    30    57   981     0      59  (
 43001    57   742    31    57   981     0      60  )
 43002    57   742    32    57   981     0     102  ;
 43003    57   743     9    57   981     0      31  if
 43004    57   743    12    57   981     0      59  (
 43005    57   743    13    57   981     0     111  n
 43006    57   743    15    57   981     0      89  >
 43007    57   743    17    57   981     0     111  remaining
 43008    57   743    26    57   981     0      59  (
 43009    57   743    27    57   981     0      60  )
 43010    57   743    28    57   981     0      60  )
 43011    57   744    13    57   981     0      20  throw
 43012    57   744    19    57   981     0      15  new
 43013    57   744    23    57   981     0     111  BufferOverflowException
 43014    57   744    46    57   981     0      59  (
 43015    57   744    47    57   981     0      60  )
 43016    57   744    48    57   981     0     102  ;
 43017    57   745     9    57   981     0      37  for
 43018    57   745    13    57   981     0      59  (
 43019    57   745    14    57   981     0      36  int
 43020    57   745    18    57   981     0     111  i
 43021    57   745    20    57   981     0      67  =
 43022    57   745    22    57   981     0     112  0
 43023    57   745    23    57   981     0     102  ;
 43024    57   745    25    57   981     0     111  i
 43025    57   745    27    57   981     0      93  <
 43026    57   745    29    57   981     0     111  n
 43027    57   745    30    57   981     0     102  ;
 43028    57   745    32    57   981     0     111  i
 43029    57   745    33    57   981     0      76  ++
 43030    57   745    35    57   981     0      60  )
 43031    57   746    13    57   981     0     111  put
 43032    57   746    16    57   981     0      59  (
 43033    57   746    17    57   981     0     111  src.get
 43034    57   746    24    57   981     0      59  (
 43035    57   746    25    57   981     0      60  )
 43036    57   746    26    57   981     0      60  )
 43037    57   746    27    57   981     0     102  ;
 43038    57   747     9    57   981     0      19  return
 43039    57   747    16    57   981     0      44  this
 43040    57   747    20    57   981     0     102  ;
 43041    57   748     5    57   981     0      64  }
 43042    57   748     5    57   981     0    2314  ENDMETHOD
 43043    57   748     5    57   982     0    2315  STARTMETHOD
 43044    57   800     5    57   982     0      10  public
 43045    57   800    12    57   982     0     111  DoubleBuffer
 43046    57   800    25    57   982     0     111  put
 43047    57   800    28    57   982     0      59  (
 43048    57   800    29    57   982     0      32  double
 43049    57   800    35    57   982     0      61  [
 43050    57   800    36    57   982     0      62  ]
 43051    57   800    38    57   982     0     111  src
 43052    57   800    41    57   982     0      66  ,
 43053    57   800    43    57   982     0      36  int
 43054    57   800    47    57   982     0     111  offset
 43055    57   800    53    57   982     0      66  ,
 43056    57   800    55    57   982     0      36  int
 43057    57   800    59    57   982     0     111  length
 43058    57   800    65    57   982     0      60  )
 43059    57   800    67    57   982     0      63  {
 43060    57   801     9    57   982     0     111  checkBounds
 43061    57   801    20    57   982     0      59  (
 43062    57   801    21    57   982     0     111  offset
 43063    57   801    27    57   982     0      66  ,
 43064    57   801    29    57   982     0     111  length
 43065    57   801    35    57   982     0      66  ,
 43066    57   801    37    57   982     0     111  src.length
 43067    57   801    47    57   982     0      60  )
 43068    57   801    48    57   982     0     102  ;
 43069    57   802     9    57   982     0      31  if
 43070    57   802    12    57   982     0      59  (
 43071    57   802    13    57   982     0     111  length
 43072    57   802    20    57   982     0      89  >
 43073    57   802    22    57   982     0     111  remaining
 43074    57   802    31    57   982     0      59  (
 43075    57   802    32    57   982     0      60  )
 43076    57   802    33    57   982     0      60  )
 43077    57   803    13    57   982     0      20  throw
 43078    57   803    19    57   982     0      15  new
 43079    57   803    23    57   982     0     111  BufferOverflowException
 43080    57   803    46    57   982     0      59  (
 43081    57   803    47    57   982     0      60  )
 43082    57   803    48    57   982     0     102  ;
 43083    57   804     9    57   982     0      36  int
 43084    57   804    13    57   982     0     111  end
 43085    57   804    17    57   982     0      67  =
 43086    57   804    19    57   982     0     111  offset
 43087    57   804    26    57   982     0      74  +
 43088    57   804    28    57   982     0     111  length
 43089    57   804    34    57   982     0     102  ;
 43090    57   805     9    57   982     0      37  for
 43091    57   805    13    57   982     0      59  (
 43092    57   805    14    57   982     0      36  int
 43093    57   805    18    57   982     0     111  i
 43094    57   805    20    57   982     0      67  =
 43095    57   805    22    57   982     0     111  offset
 43096    57   805    28    57   982     0     102  ;
 43097    57   805    30    57   982     0     111  i
 43098    57   805    32    57   982     0      93  <
 43099    57   805    34    57   982     0     111  end
 43100    57   805    37    57   982     0     102  ;
 43101    57   805    39    57   982     0     111  i
 43102    57   805    40    57   982     0      76  ++
 43103    57   805    42    57   982     0      60  )
 43104    57   806    13    57   982     0     111  this.put
 43105    57   806    21    57   982     0      59  (
 43106    57   806    22    57   982     0     111  src
 43107    57   806    25    57   982     0      61  [
 43108    57   806    26    57   982     0     111  i
 43109    57   806    27    57   982     0      62  ]
 43110    57   806    28    57   982     0      60  )
 43111    57   806    29    57   982     0     102  ;
 43112    57   807     9    57   982     0      19  return
 43113    57   807    16    57   982     0      44  this
 43114    57   807    20    57   982     0     102  ;
 43115    57   808     5    57   982     0      64  }
 43116    57   808     5    57   982     0    2316  ENDMETHOD
 43117    57   808     5    57   983     0    2317  STARTMETHOD
 43118    57   829     5    57   983     0      10  public
 43119    57   829    12    57   983     0       6  final
 43120    57   829    18    57   983     0     111  DoubleBuffer
 43121    57   829    31    57   983     0     111  put
 43122    57   829    34    57   983     0      59  (
 43123    57   829    35    57   983     0      32  double
 43124    57   829    41    57   983     0      61  [
 43125    57   829    42    57   983     0      62  ]
 43126    57   829    44    57   983     0     111  src
 43127    57   829    47    57   983     0      60  )
 43128    57   829    49    57   983     0      63  {
 43129    57   830     9    57   983     0      19  return
 43130    57   830    16    57   983     0     111  put
 43131    57   830    19    57   983     0      59  (
 43132    57   830    20    57   983     0     111  src
 43133    57   830    23    57   983     0      66  ,
 43134    57   830    25    57   983     0     112  0
 43135    57   830    26    57   983     0      66  ,
 43136    57   830    28    57   983     0     111  src.length
 43137    57   830    38    57   983     0      60  )
 43138    57   830    39    57   983     0     102  ;
 43139    57   831     5    57   983     0      64  }
 43140    57   831     5    57   983     0    2318  ENDMETHOD
 43141    57   831     5    57   984     0    2319  STARTMETHOD
 43142    57   932     5    57   984     0      10  public
 43143    57   932    12    57   984     0       6  final
 43144    57   932    18    57   984     0      39  boolean
 43145    57   932    26    57   984     0     111  hasArray
 43146    57   932    34    57   984     0      59  (
 43147    57   932    35    57   984     0      60  )
 43148    57   932    37    57   984     0      63  {
 43149    57   933     9    57   984     0      19  return
 43150    57   933    16    57   984     0      59  (
 43151    57   933    17    57   984     0     111  hb
 43152    57   933    20    57   984     0      71  !=
 43153    57   933    23    57   984     0      21  null
 43154    57   933    27    57   984     0      60  )
 43155    57   933    29    57   984     0     101  &&
 43156    57   933    32    57   984     0      69  !
 43157    57   933    33    57   984     0     111  isReadOnly
 43158    57   933    43    57   984     0     102  ;
 43159    57   934     5    57   984     0      64  }
 43160    57   934     5    57   984     0    2320  ENDMETHOD
 43161    57   934     5    57   985     0    2321  STARTMETHOD
 43162    57   955     5    57   985     0      10  public
 43163    57   955    12    57   985     0       6  final
 43164    57   955    18    57   985     0      32  double
 43165    57   955    24    57   985     0      61  [
 43166    57   955    25    57   985     0      62  ]
 43167    57   955    27    57   985     0     111  array
 43168    57   955    32    57   985     0      59  (
 43169    57   955    33    57   985     0      60  )
 43170    57   955    35    57   985     0      63  {
 43171    57   956     9    57   985     0      31  if
 43172    57   956    12    57   985     0      59  (
 43173    57   956    13    57   985     0     111  hb
 43174    57   956    16    57   985     0      68  ==
 43175    57   956    19    57   985     0      21  null
 43176    57   956    23    57   985     0      60  )
 43177    57   957    13    57   985     0      20  throw
 43178    57   957    19    57   985     0      15  new
 43179    57   957    23    57   985     0     111  UnsupportedOperationException
 43180    57   957    52    57   985     0      59  (
 43181    57   957    53    57   985     0      60  )
 43182    57   957    54    57   985     0     102  ;
 43183    57   958     9    57   985     0      31  if
 43184    57   958    12    57   985     0      59  (
 43185    57   958    13    57   985     0     111  isReadOnly
 43186    57   958    23    57   985     0      60  )
 43187    57   959    13    57   985     0      20  throw
 43188    57   959    19    57   985     0      15  new
 43189    57   959    23    57   985     0     111  ReadOnlyBufferException
 43190    57   959    46    57   985     0      59  (
 43191    57   959    47    57   985     0      60  )
 43192    57   959    48    57   985     0     102  ;
 43193    57   960     9    57   985     0      19  return
 43194    57   960    16    57   985     0     111  hb
 43195    57   960    18    57   985     0     102  ;
 43196    57   961     5    57   985     0      64  }
 43197    57   961     5    57   985     0    2322  ENDMETHOD
 43198    57   961     5    57   986     0    2323  STARTMETHOD
 43199    57   983     5    57   986     0      10  public
 43200    57   983    12    57   986     0       6  final
 43201    57   983    18    57   986     0      36  int
 43202    57   983    22    57   986     0     111  arrayOffset
 43203    57   983    33    57   986     0      59  (
 43204    57   983    34    57   986     0      60  )
 43205    57   983    36    57   986     0      63  {
 43206    57   984     9    57   986     0      31  if
 43207    57   984    12    57   986     0      59  (
 43208    57   984    13    57   986     0     111  hb
 43209    57   984    16    57   986     0      68  ==
 43210    57   984    19    57   986     0      21  null
 43211    57   984    23    57   986     0      60  )
 43212    57   985    13    57   986     0      20  throw
 43213    57   985    19    57   986     0      15  new
 43214    57   985    23    57   986     0     111  UnsupportedOperationException
 43215    57   985    52    57   986     0      59  (
 43216    57   985    53    57   986     0      60  )
 43217    57   985    54    57   986     0     102  ;
 43218    57   986     9    57   986     0      31  if
 43219    57   986    12    57   986     0      59  (
 43220    57   986    13    57   986     0     111  isReadOnly
 43221    57   986    23    57   986     0      60  )
 43222    57   987    13    57   986     0      20  throw
 43223    57   987    19    57   986     0      15  new
 43224    57   987    23    57   986     0     111  ReadOnlyBufferException
 43225    57   987    46    57   986     0      59  (
 43226    57   987    47    57   986     0      60  )
 43227    57   987    48    57   986     0     102  ;
 43228    57   988     9    57   986     0      19  return
 43229    57   988    16    57   986     0     111  offset
 43230    57   988    22    57   986     0     102  ;
 43231    57   989     5    57   986     0      64  }
 43232    57   989     5    57   986     0    2324  ENDMETHOD
 43233    57  1030     5    57    -1     0      10  public
 43234    57  1030    12    57    -1     0       7  abstract
 43235    57  1030    21    57    -1     0     111  DoubleBuffer
 43236    57  1030    34    57    -1     0     111  compact
 43237    57  1030    41    57    -1     0      59  (
 43238    57  1030    42    57    -1     0      60  )
 43239    57  1030    43    57    -1     0     102  ;
 43240    57  1037     5    57    -1     0      10  public
 43241    57  1037    12    57    -1     0       7  abstract
 43242    57  1037    21    57    -1     0      39  boolean
 43243    57  1037    29    57    -1     0     111  isDirect
 43244    57  1037    37    57    -1     0      59  (
 43245    57  1037    38    57    -1     0      60  )
 43246    57  1037    39    57    -1     0     102  ;
 43247    57  1037    39    57   987     0    2325  STARTMETHOD
 43248    57  1046     5    57   987     0      10  public
 43249    57  1046    12    57   987     0     111  String
 43250    57  1046    19    57   987     0     111  toString
 43251    57  1046    27    57   987     0      59  (
 43252    57  1046    28    57   987     0      60  )
 43253    57  1046    30    57   987     0      63  {
 43254    57  1047     9    57   987     0     111  StringBuffer
 43255    57  1047    22    57   987     0     111  sb
 43256    57  1047    25    57   987     0      67  =
 43257    57  1047    27    57   987     0      15  new
 43258    57  1047    31    57   987     0     111  StringBuffer
 43259    57  1047    43    57   987     0      59  (
 43260    57  1047    44    57   987     0      60  )
 43261    57  1047    45    57   987     0     102  ;
 43262    57  1048     9    57   987     0     111  sb.append
 43263    57  1048    18    57   987     0      59  (
 43264    57  1048    19    57   987     0     111  getClass
 43265    57  1048    27    57   987     0      59  (
 43266    57  1048    28    57   987     0      60  )
 43267    57  1048    29    57   987     0      54  .
 43268    57  1048    30    57   987     0     111  getName
 43269    57  1048    37    57   987     0      59  (
 43270    57  1048    38    57   987     0      60  )
 43271    57  1048    39    57   987     0      60  )
 43272    57  1048    40    57   987     0     102  ;
 43273    57  1049     9    57   987     0     111  sb.append
 43274    57  1049    18    57   987     0      59  (
 43275    57  1049    19    57   987     0     107  "[pos="
 43276    57  1049    26    57   987     0      60  )
 43277    57  1049    27    57   987     0     102  ;
 43278    57  1050     9    57   987     0     111  sb.append
 43279    57  1050    18    57   987     0      59  (
 43280    57  1050    19    57   987     0     111  position
 43281    57  1050    27    57   987     0      59  (
 43282    57  1050    28    57   987     0      60  )
 43283    57  1050    29    57   987     0      60  )
 43284    57  1050    30    57   987     0     102  ;
 43285    57  1051     9    57   987     0     111  sb.append
 43286    57  1051    18    57   987     0      59  (
 43287    57  1051    19    57   987     0     107  " lim="
 43288    57  1051    26    57   987     0      60  )
 43289    57  1051    27    57   987     0     102  ;
 43290    57  1052     9    57   987     0     111  sb.append
 43291    57  1052    18    57   987     0      59  (
 43292    57  1052    19    57   987     0     111  limit
 43293    57  1052    24    57   987     0      59  (
 43294    57  1052    25    57   987     0      60  )
 43295    57  1052    26    57   987     0      60  )
 43296    57  1052    27    57   987     0     102  ;
 43297    57  1053     9    57   987     0     111  sb.append
 43298    57  1053    18    57   987     0      59  (
 43299    57  1053    19    57   987     0     107  " cap="
 43300    57  1053    26    57   987     0      60  )
 43301    57  1053    27    57   987     0     102  ;
 43302    57  1054     9    57   987     0     111  sb.append
 43303    57  1054    18    57   987     0      59  (
 43304    57  1054    19    57   987     0     111  capacity
 43305    57  1054    27    57   987     0      59  (
 43306    57  1054    28    57   987     0      60  )
 43307    57  1054    29    57   987     0      60  )
 43308    57  1054    30    57   987     0     102  ;
 43309    57  1055     9    57   987     0     111  sb.append
 43310    57  1055    18    57   987     0      59  (
 43311    57  1055    19    57   987     0     107  "]"
 43312    57  1055    22    57   987     0      60  )
 43313    57  1055    23    57   987     0     102  ;
 43314    57  1056     9    57   987     0      19  return
 43315    57  1056    16    57   987     0     111  sb.toString
 43316    57  1056    27    57   987     0      59  (
 43317    57  1056    28    57   987     0      60  )
 43318    57  1056    29    57   987     0     102  ;
 43319    57  1057     5    57   987     0      64  }
 43320    57  1057     5    57   987     0    2326  ENDMETHOD
 43321    57  1057     5    57   988     0    2327  STARTMETHOD
 43322    57  1077     5    57   988     0      10  public
 43323    57  1077    12    57   988     0      36  int
 43324    57  1077    16    57   988     0     111  hashCode
 43325    57  1077    24    57   988     0      59  (
 43326    57  1077    25    57   988     0      60  )
 43327    57  1077    27    57   988     0      63  {
 43328    57  1078     9    57   988     0      36  int
 43329    57  1078    13    57   988     0     111  h
 43330    57  1078    15    57   988     0      67  =
 43331    57  1078    17    57   988     0     112  1
 43332    57  1078    18    57   988     0     102  ;
 43333    57  1079     9    57   988     0      36  int
 43334    57  1079    13    57   988     0     111  p
 43335    57  1079    15    57   988     0      67  =
 43336    57  1079    17    57   988     0     111  position
 43337    57  1079    25    57   988     0      59  (
 43338    57  1079    26    57   988     0      60  )
 43339    57  1079    27    57   988     0     102  ;
 43340    57  1080     9    57   988     0      37  for
 43341    57  1080    13    57   988     0      59  (
 43342    57  1080    14    57   988     0      36  int
 43343    57  1080    18    57   988     0     111  i
 43344    57  1080    20    57   988     0      67  =
 43345    57  1080    22    57   988     0     111  limit
 43346    57  1080    27    57   988     0      59  (
 43347    57  1080    28    57   988     0      60  )
 43348    57  1080    30    57   988     0      77  -
 43349    57  1080    32    57   988     0     112  1
 43350    57  1080    33    57   988     0     102  ;
 43351    57  1080    35    57   988     0     111  i
 43352    57  1080    37    57   988     0      88  >=
 43353    57  1080    40    57   988     0     111  p
 43354    57  1080    41    57   988     0     102  ;
 43355    57  1080    43    57   988     0     111  i
 43356    57  1080    44    57   988     0      79  --
 43357    57  1080    46    57   988     0      60  )
 43358    57  1081    13    57   988     0     111  h
 43359    57  1081    15    57   988     0      67  =
 43360    57  1081    17    57   988     0     112  31
 43361    57  1081    20    57   988     0      80  *
 43362    57  1081    22    57   988     0     111  h
 43363    57  1081    24    57   988     0      74  +
 43364    57  1081    26    57   988     0      59  (
 43365    57  1081    27    57   988     0      36  int
 43366    57  1081    30    57   988     0      60  )
 43367    57  1081    31    57   988     0     111  get
 43368    57  1081    34    57   988     0      59  (
 43369    57  1081    35    57   988     0     111  i
 43370    57  1081    36    57   988     0      60  )
 43371    57  1081    37    57   988     0     102  ;
 43372    57  1082     9    57   988     0      19  return
 43373    57  1082    16    57   988     0     111  h
 43374    57  1082    17    57   988     0     102  ;
 43375    57  1083     5    57   988     0      64  }
 43376    57  1083     5    57   988     0    2328  ENDMETHOD
 43377    57  1083     5    57   989     0    2329  STARTMETHOD
 43378    57  1110     5    57   989     0      10  public
 43379    57  1110    12    57   989     0      39  boolean
 43380    57  1110    20    57   989     0     111  equals
 43381    57  1110    26    57   989     0      59  (
 43382    57  1110    27    57   989     0     111  Object
 43383    57  1110    34    57   989     0     111  ob
 43384    57  1110    36    57   989     0      60  )
 43385    57  1110    38    57   989     0      63  {
 43386    57  1111     9    57   989     0      31  if
 43387    57  1111    12    57   989     0      59  (
 43388    57  1111    13    57   989     0      44  this
 43389    57  1111    18    57   989     0      68  ==
 43390    57  1111    21    57   989     0     111  ob
 43391    57  1111    23    57   989     0      60  )
 43392    57  1112    13    57   989     0      19  return
 43393    57  1112    20    57   989     0      52  true
 43394    57  1112    24    57   989     0     102  ;
 43395    57  1113     9    57   989     0      31  if
 43396    57  1113    12    57   989     0      59  (
 43397    57  1113    13    57   989     0      69  !
 43398    57  1113    14    57   989     0      59  (
 43399    57  1113    15    57   989     0     111  ob
 43400    57  1113    18    57   989     0      16  instanceof
 43401    57  1113    29    57   989     0     111  DoubleBuffer
 43402    57  1113    41    57   989     0      60  )
 43403    57  1113    42    57   989     0      60  )
 43404    57  1114    13    57   989     0      19  return
 43405    57  1114    20    57   989     0      43  false
 43406    57  1114    25    57   989     0     102  ;
 43407    57  1115     9    57   989     0     111  DoubleBuffer
 43408    57  1115    22    57   989     0     111  that
 43409    57  1115    27    57   989     0      67  =
 43410    57  1115    29    57   989     0      59  (
 43411    57  1115    30    57   989     0     111  DoubleBuffer
 43412    57  1115    42    57   989     0      60  )
 43413    57  1115    43    57   989     0     111  ob
 43414    57  1115    45    57   989     0     102  ;
 43415    57  1116     9    57   989     0      31  if
 43416    57  1116    12    57   989     0      59  (
 43417    57  1116    13    57   989     0     111  this.remaining
 43418    57  1116    27    57   989     0      59  (
 43419    57  1116    28    57   989     0      60  )
 43420    57  1116    30    57   989     0      71  !=
 43421    57  1116    33    57   989     0     111  that.remaining
 43422    57  1116    47    57   989     0      59  (
 43423    57  1116    48    57   989     0      60  )
 43424    57  1116    49    57   989     0      60  )
 43425    57  1117    13    57   989     0      19  return
 43426    57  1117    20    57   989     0      43  false
 43427    57  1117    25    57   989     0     102  ;
 43428    57  1118     9    57   989     0      36  int
 43429    57  1118    13    57   989     0     111  p
 43430    57  1118    15    57   989     0      67  =
 43431    57  1118    17    57   989     0     111  this.position
 43432    57  1118    30    57   989     0      59  (
 43433    57  1118    31    57   989     0      60  )
 43434    57  1118    32    57   989     0     102  ;
 43435    57  1119     9    57   989     0      37  for
 43436    57  1119    13    57   989     0      59  (
 43437    57  1119    14    57   989     0      36  int
 43438    57  1119    18    57   989     0     111  i
 43439    57  1119    20    57   989     0      67  =
 43440    57  1119    22    57   989     0     111  this.limit
 43441    57  1119    32    57   989     0      59  (
 43442    57  1119    33    57   989     0      60  )
 43443    57  1119    35    57   989     0      77  -
 43444    57  1119    37    57   989     0     112  1
 43445    57  1119    38    57   989     0      66  ,
 43446    57  1119    40    57   989     0     111  j
 43447    57  1119    42    57   989     0      67  =
 43448    57  1119    44    57   989     0     111  that.limit
 43449    57  1119    54    57   989     0      59  (
 43450    57  1119    55    57   989     0      60  )
 43451    57  1119    57    57   989     0      77  -
 43452    57  1119    59    57   989     0     112  1
 43453    57  1119    60    57   989     0     102  ;
 43454    57  1119    62    57   989     0     111  i
 43455    57  1119    64    57   989     0      88  >=
 43456    57  1119    67    57   989     0     111  p
 43457    57  1119    68    57   989     0     102  ;
 43458    57  1119    70    57   989     0     111  i
 43459    57  1119    71    57   989     0      79  --
 43460    57  1119    73    57   989     0      66  ,
 43461    57  1119    75    57   989     0     111  j
 43462    57  1119    76    57   989     0      79  --
 43463    57  1119    78    57   989     0      60  )
 43464    57  1119    80    57   989     0      63  {
 43465    57  1120    13    57   989     1      32  double
 43466    57  1120    20    57   989     1     111  v1
 43467    57  1120    23    57   989     1      67  =
 43468    57  1120    25    57   989     1     111  this.get
 43469    57  1120    33    57   989     1      59  (
 43470    57  1120    34    57   989     1     111  i
 43471    57  1120    35    57   989     1      60  )
 43472    57  1120    36    57   989     1     102  ;
 43473    57  1121    13    57   989     1      32  double
 43474    57  1121    20    57   989     1     111  v2
 43475    57  1121    23    57   989     1      67  =
 43476    57  1121    25    57   989     1     111  that.get
 43477    57  1121    33    57   989     1      59  (
 43478    57  1121    34    57   989     1     111  j
 43479    57  1121    35    57   989     1      60  )
 43480    57  1121    36    57   989     1     102  ;
 43481    57  1122    13    57   989     0      31  if
 43482    57  1122    16    57   989     0      59  (
 43483    57  1122    17    57   989     0     111  v1
 43484    57  1122    20    57   989     0      71  !=
 43485    57  1122    23    57   989     0     111  v2
 43486    57  1122    25    57   989     0      60  )
 43487    57  1122    27    57   989     0      63  {
 43488    57  1123    17    57   989     0      31  if
 43489    57  1123    20    57   989     0      59  (
 43490    57  1123    21    57   989     0      59  (
 43491    57  1123    22    57   989     0     111  v1
 43492    57  1123    25    57   989     0      71  !=
 43493    57  1123    28    57   989     0     111  v1
 43494    57  1123    30    57   989     0      60  )
 43495    57  1123    32    57   989     0     101  &&
 43496    57  1123    35    57   989     0      59  (
 43497    57  1123    36    57   989     0     111  v2
 43498    57  1123    39    57   989     0      71  !=
 43499    57  1123    42    57   989     0     111  v2
 43500    57  1123    44    57   989     0      60  )
 43501    57  1123    45    57   989     0      60  )
 43502    57  1124    21    57   989     0      46  continue
 43503    57  1124    29    57   989     0     102  ;
 43504    57  1125    17    57   989     0      19  return
 43505    57  1125    24    57   989     0      43  false
 43506    57  1125    29    57   989     0     102  ;
 43507    57  1126    13    57   989     1      64  }
 43508    57  1127     9    57   989     1      64  }
 43509    57  1128     9    57   989     0      19  return
 43510    57  1128    16    57   989     0      52  true
 43511    57  1128    20    57   989     0     102  ;
 43512    57  1129     5    57   989     0      64  }
 43513    57  1129     5    57   989     0    2330  ENDMETHOD
 43514    57  1129     5    57   990     0    2331  STARTMETHOD
 43515    57  1143     5    57   990     0      10  public
 43516    57  1143    12    57   990     0      36  int
 43517    57  1143    16    57   990     0     111  compareTo
 43518    57  1143    25    57   990     0      59  (
 43519    57  1143    26    57   990     0     111  DoubleBuffer
 43520    57  1143    39    57   990     0     111  that
 43521    57  1143    43    57   990     0      60  )
 43522    57  1143    45    57   990     0      63  {
 43523    57  1144     9    57   990     0      36  int
 43524    57  1144    13    57   990     0     111  n
 43525    57  1144    15    57   990     0      67  =
 43526    57  1144    17    57   990     0     111  this.position
 43527    57  1144    30    57   990     0      59  (
 43528    57  1144    31    57   990     0      60  )
 43529    57  1144    33    57   990     0      74  +
 43530    57  1144    35    57   990     0     111  Math.min
 43531    57  1144    43    57   990     0      59  (
 43532    57  1144    44    57   990     0     111  this.remaining
 43533    57  1144    58    57   990     0      59  (
 43534    57  1144    59    57   990     0      60  )
 43535    57  1144    60    57   990     0      66  ,
 43536    57  1144    62    57   990     0     111  that.remaining
 43537    57  1144    76    57   990     0      59  (
 43538    57  1144    77    57   990     0      60  )
 43539    57  1144    78    57   990     0      60  )
 43540    57  1144    79    57   990     0     102  ;
 43541    57  1145     9    57   990     0      37  for
 43542    57  1145    13    57   990     0      59  (
 43543    57  1145    14    57   990     0      36  int
 43544    57  1145    18    57   990     0     111  i
 43545    57  1145    20    57   990     0      67  =
 43546    57  1145    22    57   990     0     111  this.position
 43547    57  1145    35    57   990     0      59  (
 43548    57  1145    36    57   990     0      60  )
 43549    57  1145    37    57   990     0      66  ,
 43550    57  1145    39    57   990     0     111  j
 43551    57  1145    41    57   990     0      67  =
 43552    57  1145    43    57   990     0     111  that.position
 43553    57  1145    56    57   990     0      59  (
 43554    57  1145    57    57   990     0      60  )
 43555    57  1145    58    57   990     0     102  ;
 43556    57  1145    60    57   990     0     111  i
 43557    57  1145    62    57   990     0      93  <
 43558    57  1145    64    57   990     0     111  n
 43559    57  1145    65    57   990     0     102  ;
 43560    57  1145    67    57   990     0     111  i
 43561    57  1145    68    57   990     0      76  ++
 43562    57  1145    70    57   990     0      66  ,
 43563    57  1145    72    57   990     0     111  j
 43564    57  1145    73    57   990     0      76  ++
 43565    57  1145    75    57   990     0      60  )
 43566    57  1145    77    57   990     0      63  {
 43567    57  1146    13    57   990     1      32  double
 43568    57  1146    20    57   990     1     111  v1
 43569    57  1146    23    57   990     1      67  =
 43570    57  1146    25    57   990     1     111  this.get
 43571    57  1146    33    57   990     1      59  (
 43572    57  1146    34    57   990     1     111  i
 43573    57  1146    35    57   990     1      60  )
 43574    57  1146    36    57   990     1     102  ;
 43575    57  1147    13    57   990     1      32  double
 43576    57  1147    20    57   990     1     111  v2
 43577    57  1147    23    57   990     1      67  =
 43578    57  1147    25    57   990     1     111  that.get
 43579    57  1147    33    57   990     1      59  (
 43580    57  1147    34    57   990     1     111  j
 43581    57  1147    35    57   990     1      60  )
 43582    57  1147    36    57   990     1     102  ;
 43583    57  1148    13    57   990     0      31  if
 43584    57  1148    16    57   990     0      59  (
 43585    57  1148    17    57   990     0     111  v1
 43586    57  1148    20    57   990     0      68  ==
 43587    57  1148    23    57   990     0     111  v2
 43588    57  1148    25    57   990     0      60  )
 43589    57  1149    17    57   990     0      46  continue
 43590    57  1149    25    57   990     0     102  ;
 43591    57  1150    13    57   990     0      31  if
 43592    57  1150    16    57   990     0      59  (
 43593    57  1150    17    57   990     0      59  (
 43594    57  1150    18    57   990     0     111  v1
 43595    57  1150    21    57   990     0      71  !=
 43596    57  1150    24    57   990     0     111  v1
 43597    57  1150    26    57   990     0      60  )
 43598    57  1150    28    57   990     0     101  &&
 43599    57  1150    31    57   990     0      59  (
 43600    57  1150    32    57   990     0     111  v2
 43601    57  1150    35    57   990     0      71  !=
 43602    57  1150    38    57   990     0     111  v2
 43603    57  1150    40    57   990     0      60  )
 43604    57  1150    41    57   990     0      60  )
 43605    57  1151    17    57   990     0      46  continue
 43606    57  1151    25    57   990     0     102  ;
 43607    57  1152    13    57   990     0      31  if
 43608    57  1152    16    57   990     0      59  (
 43609    57  1152    17    57   990     0     111  v1
 43610    57  1152    20    57   990     0      93  <
 43611    57  1152    22    57   990     0     111  v2
 43612    57  1152    24    57   990     0      60  )
 43613    57  1153    17    57   990     0      19  return
 43614    57  1153    24    57   990     0      77  -
 43615    57  1153    25    57   990     0     112  1
 43616    57  1153    26    57   990     0     102  ;
 43617    57  1154    13    57   990     0      19  return
 43618    57  1154    20    57   990     0      74  +
 43619    57  1154    21    57   990     0     112  1
 43620    57  1154    22    57   990     0     102  ;
 43621    57  1155     9    57   990     0      64  }
 43622    57  1156     9    57   990     0      19  return
 43623    57  1156    16    57   990     0     111  this.remaining
 43624    57  1156    30    57   990     0      59  (
 43625    57  1156    31    57   990     0      60  )
 43626    57  1156    33    57   990     0      77  -
 43627    57  1156    35    57   990     0     111  that.remaining
 43628    57  1156    49    57   990     0      59  (
 43629    57  1156    50    57   990     0      60  )
 43630    57  1156    51    57   990     0     102  ;
 43631    57  1157     5    57   990     0      64  }
 43632    57  1157     5    57   990     0    2332  ENDMETHOD
 43633    57  1372     5    57    -1     0      10  public
 43634    57  1372    12    57    -1     0       7  abstract
 43635    57  1372    21    57    -1     0     111  ByteOrder
 43636    57  1372    31    57    -1     0     111  order
 43637    57  1372    36    57    -1     0      59  (
 43638    57  1372    37    57    -1     0      60  )
 43639    57  1372    38    57    -1     0     102  ;
 43640    57  1426     1    57    -1     0      64  }
 43641    57  1426     1    57    -1     1    2333  ENDCLASS
 43642    57  1426     1    -1    -1     1    2334  ENDFILE C:\javasrc\java\nio\DoubleBuffer.java
 43643    58     1     1    -1    -1     1    2335  STARTFILE C:\javasrc\java\nio\FloatBuffer.java
 43644    58    28     1    -1    -1     0       5  package
 43645    58    28     9    -1    -1     0     111  java.nio
 43646    58    28    17    -1    -1     0     102  ;
 43647    58   257     1    -1    -1     0      10  public
 43648    58   257     8    -1    -1     0       7  abstract
 43649    58   257    17    58    -1     0    2336  STARTCLASS
 43650    58   257    17    58    -1     0      24  class
 43651    58   257    23    58    -1     0     111  FloatBuffer
 43652    58   258     5    58    -1     0      38  extends
 43653    58   258    13    58    -1     0     111  Buffer
 43654    58   259     5    58    -1     0      17  implements
 43655    58   259    16    58    -1     0     111  Comparable
 43656    58   259    26    58    -1     0      93  <
 43657    58   259    27    58    -1     0     111  FloatBuffer
 43658    58   259    38    58    -1     0      89  >
 43659    58   260     1    58    -1     0      63  {
 43660    58   266     5    58    -1     0       6  final
 43661    58   266    11    58    -1     0       4  float
 43662    58   266    16    58    -1     0      61  [
 43663    58   266    17    58    -1     0      62  ]
 43664    58   266    19    58    -1     0     111  hb
 43665    58   266    21    58    -1     0     102  ;
 43666    58   267     5    58    -1     0       6  final
 43667    58   267    11    58    -1     0      36  int
 43668    58   267    15    58    -1     0     111  offset
 43669    58   267    21    58    -1     0     102  ;
 43670    58   268     5    58    -1     0      39  boolean
 43671    58   268    13    58    -1     0     111  isReadOnly
 43672    58   268    23    58    -1     0     102  ;
 43673    58   268    23    58   991     0    2337  STARTMETHOD
 43674    58   273     5    58   991     0     111  FloatBuffer
 43675    58   273    16    58   991     0      59  (
 43676    58   273    17    58   991     0      36  int
 43677    58   273    21    58   991     0     111  mark
 43678    58   273    25    58   991     0      66  ,
 43679    58   273    27    58   991     0      36  int
 43680    58   273    31    58   991     0     111  pos
 43681    58   273    34    58   991     0      66  ,
 43682    58   273    36    58   991     0      36  int
 43683    58   273    40    58   991     0     111  lim
 43684    58   273    43    58   991     0      66  ,
 43685    58   273    45    58   991     0      36  int
 43686    58   273    49    58   991     0     111  cap
 43687    58   273    52    58   991     0      66  ,
 43688    58   274    18    58   991     0       4  float
 43689    58   274    23    58   991     0      61  [
 43690    58   274    24    58   991     0      62  ]
 43691    58   274    26    58   991     0     111  hb
 43692    58   274    28    58   991     0      66  ,
 43693    58   274    30    58   991     0      36  int
 43694    58   274    34    58   991     0     111  offset
 43695    58   274    40    58   991     0      60  )
 43696    58   275     5    58   991     0      63  {
 43697    58   276     9    58   991     0      27  super
 43698    58   276    14    58   991     0      59  (
 43699    58   276    15    58   991     0     111  mark
 43700    58   276    19    58   991     0      66  ,
 43701    58   276    21    58   991     0     111  pos
 43702    58   276    24    58   991     0      66  ,
 43703    58   276    26    58   991     0     111  lim
 43704    58   276    29    58   991     0      66  ,
 43705    58   276    31    58   991     0     111  cap
 43706    58   276    34    58   991     0      60  )
 43707    58   276    35    58   991     0     102  ;
 43708    58   277     9    58   991     1     111  this.hb
 43709    58   277    17    58   991     1      67  =
 43710    58   277    19    58   991     1     111  hb
 43711    58   277    21    58   991     1     102  ;
 43712    58   278     9    58   991     1     111  this.offset
 43713    58   278    21    58   991     1      67  =
 43714    58   278    23    58   991     1     111  offset
 43715    58   278    29    58   991     1     102  ;
 43716    58   279     5    58   991     1      64  }
 43717    58   279     5    58   991     0    2338  ENDMETHOD
 43718    58   279     5    58   992     0    2339  STARTMETHOD
 43719    58   283     5    58   992     0     111  FloatBuffer
 43720    58   283    16    58   992     0      59  (
 43721    58   283    17    58   992     0      36  int
 43722    58   283    21    58   992     0     111  mark
 43723    58   283    25    58   992     0      66  ,
 43724    58   283    27    58   992     0      36  int
 43725    58   283    31    58   992     0     111  pos
 43726    58   283    34    58   992     0      66  ,
 43727    58   283    36    58   992     0      36  int
 43728    58   283    40    58   992     0     111  lim
 43729    58   283    43    58   992     0      66  ,
 43730    58   283    45    58   992     0      36  int
 43731    58   283    49    58   992     0     111  cap
 43732    58   283    52    58   992     0      60  )
 43733    58   283    54    58   992     0      63  {
 43734    58   284     9    58   992     0      44  this
 43735    58   284    13    58   992     0      59  (
 43736    58   284    14    58   992     0     111  mark
 43737    58   284    18    58   992     0      66  ,
 43738    58   284    20    58   992     0     111  pos
 43739    58   284    23    58   992     0      66  ,
 43740    58   284    25    58   992     0     111  lim
 43741    58   284    28    58   992     0      66  ,
 43742    58   284    30    58   992     0     111  cap
 43743    58   284    33    58   992     0      66  ,
 43744    58   284    35    58   992     0      21  null
 43745    58   284    39    58   992     0      66  ,
 43746    58   284    41    58   992     0     112  0
 43747    58   284    42    58   992     0      60  )
 43748    58   284    43    58   992     1     102  ;
 43749    58   285     5    58   992     1      64  }
 43750    58   285     5    58   992     0    2340  ENDMETHOD
 43751    58   285     5    58   993     0    2341  STARTMETHOD
 43752    58   326     5    58   993     0      10  public
 43753    58   326    12    58   993     0      45  static
 43754    58   326    19    58   993     0     111  FloatBuffer
 43755    58   326    31    58   993     0     111  allocate
 43756    58   326    39    58   993     0      59  (
 43757    58   326    40    58   993     0      36  int
 43758    58   326    44    58   993     0     111  capacity
 43759    58   326    52    58   993     0      60  )
 43760    58   326    54    58   993     0      63  {
 43761    58   327     9    58   993     0      31  if
 43762    58   327    12    58   993     0      59  (
 43763    58   327    13    58   993     0     111  capacity
 43764    58   327    22    58   993     0      93  <
 43765    58   327    24    58   993     0     112  0
 43766    58   327    25    58   993     0      60  )
 43767    58   328    13    58   993     0      20  throw
 43768    58   328    19    58   993     0      15  new
 43769    58   328    23    58   993     0     111  IllegalArgumentException
 43770    58   328    47    58   993     0      59  (
 43771    58   328    48    58   993     0      60  )
 43772    58   328    49    58   993     0     102  ;
 43773    58   329     9    58   993     0      19  return
 43774    58   329    16    58   993     0      15  new
 43775    58   329    20    58   993     0     111  HeapFloatBuffer
 43776    58   329    35    58   993     0      59  (
 43777    58   329    36    58   993     0     111  capacity
 43778    58   329    44    58   993     0      66  ,
 43779    58   329    46    58   993     0     111  capacity
 43780    58   329    54    58   993     0      60  )
 43781    58   329    55    58   993     1     102  ;
 43782    58   330     5    58   993     1      64  }
 43783    58   330     5    58   993     0    2342  ENDMETHOD
 43784    58   330     5    58   994     0    2343  STARTMETHOD
 43785    58   363     5    58   994     0      10  public
 43786    58   363    12    58   994     0      45  static
 43787    58   363    19    58   994     0     111  FloatBuffer
 43788    58   363    31    58   994     0     111  wrap
 43789    58   363    35    58   994     0      59  (
 43790    58   363    36    58   994     0       4  float
 43791    58   363    41    58   994     0      61  [
 43792    58   363    42    58   994     0      62  ]
 43793    58   363    44    58   994     0     111  array
 43794    58   363    49    58   994     0      66  ,
 43795    58   364    37    58   994     0      36  int
 43796    58   364    41    58   994     0     111  offset
 43797    58   364    47    58   994     0      66  ,
 43798    58   364    49    58   994     0      36  int
 43799    58   364    53    58   994     0     111  length
 43800    58   364    59    58   994     0      60  )
 43801    58   365     5    58   994     0      63  {
 43802    58   366     9    58   994     0      35  try
 43803    58   366    13    58   994     0      63  {
 43804    58   367    13    58   994     0      19  return
 43805    58   367    20    58   994     0      15  new
 43806    58   367    24    58   994     0     111  HeapFloatBuffer
 43807    58   367    39    58   994     0      59  (
 43808    58   367    40    58   994     0     111  array
 43809    58   367    45    58   994     0      66  ,
 43810    58   367    47    58   994     0     111  offset
 43811    58   367    53    58   994     0      66  ,
 43812    58   367    55    58   994     0     111  length
 43813    58   367    61    58   994     0      60  )
 43814    58   367    62    58   994     0     102  ;
 43815    58   368     9    58   994     0      64  }
 43816    58   368    11    58   994     0      34  catch
 43817    58   368    17    58   994     0      59  (
 43818    58   368    18    58   994     0     111  IllegalArgumentException
 43819    58   368    43    58   994     0     111  x
 43820    58   368    44    58   994     0      60  )
 43821    58   368    46    58   994     0      63  {
 43822    58   369    13    58   994     0      20  throw
 43823    58   369    19    58   994     0      15  new
 43824    58   369    23    58   994     0     111  IndexOutOfBoundsException
 43825    58   369    48    58   994     0      59  (
 43826    58   369    49    58   994     0      60  )
 43827    58   369    50    58   994     0     102  ;
 43828    58   370     9    58   994     0      64  }
 43829    58   371     5    58   994     0      64  }
 43830    58   371     5    58   994     0    2344  ENDMETHOD
 43831    58   371     5    58   995     0    2345  STARTMETHOD
 43832    58   389     5    58   995     0      10  public
 43833    58   389    12    58   995     0      45  static
 43834    58   389    19    58   995     0     111  FloatBuffer
 43835    58   389    31    58   995     0     111  wrap
 43836    58   389    35    58   995     0      59  (
 43837    58   389    36    58   995     0       4  float
 43838    58   389    41    58   995     0      61  [
 43839    58   389    42    58   995     0      62  ]
 43840    58   389    44    58   995     0     111  array
 43841    58   389    49    58   995     0      60  )
 43842    58   389    51    58   995     0      63  {
 43843    58   390     9    58   995     0      19  return
 43844    58   390    16    58   995     0     111  wrap
 43845    58   390    20    58   995     0      59  (
 43846    58   390    21    58   995     0     111  array
 43847    58   390    26    58   995     0      66  ,
 43848    58   390    28    58   995     0     112  0
 43849    58   390    29    58   995     0      66  ,
 43850    58   390    31    58   995     0     111  array.length
 43851    58   390    43    58   995     0      60  )
 43852    58   390    44    58   995     0     102  ;
 43853    58   391     5    58   995     0      64  }
 43854    58   391     5    58   995     0    2346  ENDMETHOD
 43855    58   503     5    58    -1     1      10  public
 43856    58   503    12    58    -1     1       7  abstract
 43857    58   503    21    58    -1     1     111  FloatBuffer
 43858    58   503    33    58    -1     1     111  slice
 43859    58   503    38    58    -1     1      59  (
 43860    58   503    39    58    -1     1      60  )
 43861    58   503    40    58    -1     1     102  ;
 43862    58   520     5    58    -1     1      10  public
 43863    58   520    12    58    -1     1       7  abstract
 43864    58   520    21    58    -1     1     111  FloatBuffer
 43865    58   520    33    58    -1     1     111  duplicate
 43866    58   520    42    58    -1     1      59  (
 43867    58   520    43    58    -1     1      60  )
 43868    58   520    44    58    -1     1     102  ;
 43869    58   540     5    58    -1     1      10  public
 43870    58   540    12    58    -1     1       7  abstract
 43871    58   540    21    58    -1     1     111  FloatBuffer
 43872    58   540    33    58    -1     1     111  asReadOnlyBuffer
 43873    58   540    49    58    -1     1      59  (
 43874    58   540    50    58    -1     1      60  )
 43875    58   540    51    58    -1     1     102  ;
 43876    58   554     5    58    -1     0      10  public
 43877    58   554    12    58    -1     0       7  abstract
 43878    58   554    21    58    -1     0       4  float
 43879    58   554    27    58    -1     0     111  get
 43880    58   554    30    58    -1     0      59  (
 43881    58   554    31    58    -1     0      60  )
 43882    58   554    32    58    -1     0     102  ;
 43883    58   573     5    58    -1     0      10  public
 43884    58   573    12    58    -1     0       7  abstract
 43885    58   573    21    58    -1     0     111  FloatBuffer
 43886    58   573    33    58    -1     0     111  put
 43887    58   573    36    58    -1     0      59  (
 43888    58   573    37    58    -1     0       4  float
 43889    58   573    43    58    -1     0     111  f
 43890    58   573    44    58    -1     0      60  )
 43891    58   573    45    58    -1     0     102  ;
 43892    58   588     5    58    -1     0      10  public
 43893    58   588    12    58    -1     0       7  abstract
 43894    58   588    21    58    -1     0       4  float
 43895    58   588    27    58    -1     0     111  get
 43896    58   588    30    58    -1     0      59  (
 43897    58   588    31    58    -1     0      36  int
 43898    58   588    35    58    -1     0     111  index
 43899    58   588    40    58    -1     0      60  )
 43900    58   588    41    58    -1     0     102  ;
 43901    58   611     5    58    -1     0      10  public
 43902    58   611    12    58    -1     0       7  abstract
 43903    58   611    21    58    -1     0     111  FloatBuffer
 43904    58   611    33    58    -1     0     111  put
 43905    58   611    36    58    -1     0      59  (
 43906    58   611    37    58    -1     0      36  int
 43907    58   611    41    58    -1     0     111  index
 43908    58   611    46    58    -1     0      66  ,
 43909    58   611    48    58    -1     0       4  float
 43910    58   611    54    58    -1     0     111  f
 43911    58   611    55    58    -1     0      60  )
 43912    58   611    56    58    -1     0     102  ;
 43913    58   611    56    58   996     0    2347  STARTMETHOD
 43914    58   665     5    58   996     0      10  public
 43915    58   665    12    58   996     0     111  FloatBuffer
 43916    58   665    24    58   996     0     111  get
 43917    58   665    27    58   996     0      59  (
 43918    58   665    28    58   996     0       4  float
 43919    58   665    33    58   996     0      61  [
 43920    58   665    34    58   996     0      62  ]
 43921    58   665    36    58   996     0     111  dst
 43922    58   665    39    58   996     0      66  ,
 43923    58   665    41    58   996     0      36  int
 43924    58   665    45    58   996     0     111  offset
 43925    58   665    51    58   996     0      66  ,
 43926    58   665    53    58   996     0      36  int
 43927    58   665    57    58   996     0     111  length
 43928    58   665    63    58   996     0      60  )
 43929    58   665    65    58   996     0      63  {
 43930    58   666     9    58   996     0     111  checkBounds
 43931    58   666    20    58   996     0      59  (
 43932    58   666    21    58   996     0     111  offset
 43933    58   666    27    58   996     0      66  ,
 43934    58   666    29    58   996     0     111  length
 43935    58   666    35    58   996     0      66  ,
 43936    58   666    37    58   996     0     111  dst.length
 43937    58   666    47    58   996     0      60  )
 43938    58   666    48    58   996     0     102  ;
 43939    58   667     9    58   996     0      31  if
 43940    58   667    12    58   996     0      59  (
 43941    58   667    13    58   996     0     111  length
 43942    58   667    20    58   996     0      89  >
 43943    58   667    22    58   996     0     111  remaining
 43944    58   667    31    58   996     0      59  (
 43945    58   667    32    58   996     0      60  )
 43946    58   667    33    58   996     0      60  )
 43947    58   668    13    58   996     0      20  throw
 43948    58   668    19    58   996     0      15  new
 43949    58   668    23    58   996     0     111  BufferUnderflowException
 43950    58   668    47    58   996     0      59  (
 43951    58   668    48    58   996     0      60  )
 43952    58   668    49    58   996     0     102  ;
 43953    58   669     9    58   996     0      36  int
 43954    58   669    13    58   996     0     111  end
 43955    58   669    17    58   996     0      67  =
 43956    58   669    19    58   996     0     111  offset
 43957    58   669    26    58   996     0      74  +
 43958    58   669    28    58   996     0     111  length
 43959    58   669    34    58   996     0     102  ;
 43960    58   670     9    58   996     0      37  for
 43961    58   670    13    58   996     0      59  (
 43962    58   670    14    58   996     0      36  int
 43963    58   670    18    58   996     0     111  i
 43964    58   670    20    58   996     0      67  =
 43965    58   670    22    58   996     0     111  offset
 43966    58   670    28    58   996     0     102  ;
 43967    58   670    30    58   996     0     111  i
 43968    58   670    32    58   996     0      93  <
 43969    58   670    34    58   996     0     111  end
 43970    58   670    37    58   996     0     102  ;
 43971    58   670    39    58   996     0     111  i
 43972    58   670    40    58   996     0      76  ++
 43973    58   670    42    58   996     0      60  )
 43974    58   671    13    58   996     0     111  dst
 43975    58   671    16    58   996     0      61  [
 43976    58   671    17    58   996     0     111  i
 43977    58   671    18    58   996     0      62  ]
 43978    58   671    20    58   996     0      67  =
 43979    58   671    22    58   996     0     111  get
 43980    58   671    25    58   996     0      59  (
 43981    58   671    26    58   996     0      60  )
 43982    58   671    27    58   996     0     102  ;
 43983    58   672     9    58   996     0      19  return
 43984    58   672    16    58   996     0      44  this
 43985    58   672    20    58   996     0     102  ;
 43986    58   673     5    58   996     0      64  }
 43987    58   673     5    58   996     0    2348  ENDMETHOD
 43988    58   673     5    58   997     0    2349  STARTMETHOD
 43989    58   691     5    58   997     0      10  public
 43990    58   691    12    58   997     0     111  FloatBuffer
 43991    58   691    24    58   997     0     111  get
 43992    58   691    27    58   997     0      59  (
 43993    58   691    28    58   997     0       4  float
 43994    58   691    33    58   997     0      61  [
 43995    58   691    34    58   997     0      62  ]
 43996    58   691    36    58   997     0     111  dst
 43997    58   691    39    58   997     0      60  )
 43998    58   691    41    58   997     0      63  {
 43999    58   692     9    58   997     0      19  return
 44000    58   692    16    58   997     0     111  get
 44001    58   692    19    58   997     0      59  (
 44002    58   692    20    58   997     0     111  dst
 44003    58   692    23    58   997     0      66  ,
 44004    58   692    25    58   997     0     112  0
 44005    58   692    26    58   997     0      66  ,
 44006    58   692    28    58   997     0     111  dst.length
 44007    58   692    38    58   997     0      60  )
 44008    58   692    39    58   997     0     102  ;
 44009    58   693     5    58   997     0      64  }
 44010    58   693     5    58   997     0    2350  ENDMETHOD
 44011    58   693     5    58   998     0    2351  STARTMETHOD
 44012    58   739     5    58   998     0      10  public
 44013    58   739    12    58   998     0     111  FloatBuffer
 44014    58   739    24    58   998     0     111  put
 44015    58   739    27    58   998     0      59  (
 44016    58   739    28    58   998     0     111  FloatBuffer
 44017    58   739    40    58   998     0     111  src
 44018    58   739    43    58   998     0      60  )
 44019    58   739    45    58   998     0      63  {
 44020    58   740     9    58   998     0      31  if
 44021    58   740    12    58   998     0      59  (
 44022    58   740    13    58   998     0     111  src
 44023    58   740    17    58   998     0      68  ==
 44024    58   740    20    58   998     0      44  this
 44025    58   740    24    58   998     0      60  )
 44026    58   741    13    58   998     0      20  throw
 44027    58   741    19    58   998     0      15  new
 44028    58   741    23    58   998     0     111  IllegalArgumentException
 44029    58   741    47    58   998     0      59  (
 44030    58   741    48    58   998     0      60  )
 44031    58   741    49    58   998     0     102  ;
 44032    58   742     9    58   998     0      36  int
 44033    58   742    13    58   998     0     111  n
 44034    58   742    15    58   998     0      67  =
 44035    58   742    17    58   998     0     111  src.remaining
 44036    58   742    30    58   998     0      59  (
 44037    58   742    31    58   998     0      60  )
 44038    58   742    32    58   998     0     102  ;
 44039    58   743     9    58   998     0      31  if
 44040    58   743    12    58   998     0      59  (
 44041    58   743    13    58   998     0     111  n
 44042    58   743    15    58   998     0      89  >
 44043    58   743    17    58   998     0     111  remaining
 44044    58   743    26    58   998     0      59  (
 44045    58   743    27    58   998     0      60  )
 44046    58   743    28    58   998     0      60  )
 44047    58   744    13    58   998     0      20  throw
 44048    58   744    19    58   998     0      15  new
 44049    58   744    23    58   998     0     111  BufferOverflowException
 44050    58   744    46    58   998     0      59  (
 44051    58   744    47    58   998     0      60  )
 44052    58   744    48    58   998     0     102  ;
 44053    58   745     9    58   998     0      37  for
 44054    58   745    13    58   998     0      59  (
 44055    58   745    14    58   998     0      36  int
 44056    58   745    18    58   998     0     111  i
 44057    58   745    20    58   998     0      67  =
 44058    58   745    22    58   998     0     112  0
 44059    58   745    23    58   998     0     102  ;
 44060    58   745    25    58   998     0     111  i
 44061    58   745    27    58   998     0      93  <
 44062    58   745    29    58   998     0     111  n
 44063    58   745    30    58   998     0     102  ;
 44064    58   745    32    58   998     0     111  i
 44065    58   745    33    58   998     0      76  ++
 44066    58   745    35    58   998     0      60  )
 44067    58   746    13    58   998     0     111  put
 44068    58   746    16    58   998     0      59  (
 44069    58   746    17    58   998     0     111  src.get
 44070    58   746    24    58   998     0      59  (
 44071    58   746    25    58   998     0      60  )
 44072    58   746    26    58   998     0      60  )
 44073    58   746    27    58   998     0     102  ;
 44074    58   747     9    58   998     0      19  return
 44075    58   747    16    58   998     0      44  this
 44076    58   747    20    58   998     0     102  ;
 44077    58   748     5    58   998     0      64  }
 44078    58   748     5    58   998     0    2352  ENDMETHOD
 44079    58   748     5    58   999     0    2353  STARTMETHOD
 44080    58   800     5    58   999     0      10  public
 44081    58   800    12    58   999     0     111  FloatBuffer
 44082    58   800    24    58   999     0     111  put
 44083    58   800    27    58   999     0      59  (
 44084    58   800    28    58   999     0       4  float
 44085    58   800    33    58   999     0      61  [
 44086    58   800    34    58   999     0      62  ]
 44087    58   800    36    58   999     0     111  src
 44088    58   800    39    58   999     0      66  ,
 44089    58   800    41    58   999     0      36  int
 44090    58   800    45    58   999     0     111  offset
 44091    58   800    51    58   999     0      66  ,
 44092    58   800    53    58   999     0      36  int
 44093    58   800    57    58   999     0     111  length
 44094    58   800    63    58   999     0      60  )
 44095    58   800    65    58   999     0      63  {
 44096    58   801     9    58   999     0     111  checkBounds
 44097    58   801    20    58   999     0      59  (
 44098    58   801    21    58   999     0     111  offset
 44099    58   801    27    58   999     0      66  ,
 44100    58   801    29    58   999     0     111  length
 44101    58   801    35    58   999     0      66  ,
 44102    58   801    37    58   999     0     111  src.length
 44103    58   801    47    58   999     0      60  )
 44104    58   801    48    58   999     0     102  ;
 44105    58   802     9    58   999     0      31  if
 44106    58   802    12    58   999     0      59  (
 44107    58   802    13    58   999     0     111  length
 44108    58   802    20    58   999     0      89  >
 44109    58   802    22    58   999     0     111  remaining
 44110    58   802    31    58   999     0      59  (
 44111    58   802    32    58   999     0      60  )
 44112    58   802    33    58   999     0      60  )
 44113    58   803    13    58   999     0      20  throw
 44114    58   803    19    58   999     0      15  new
 44115    58   803    23    58   999     0     111  BufferOverflowException
 44116    58   803    46    58   999     0      59  (
 44117    58   803    47    58   999     0      60  )
 44118    58   803    48    58   999     0     102  ;
 44119    58   804     9    58   999     0      36  int
 44120    58   804    13    58   999     0     111  end
 44121    58   804    17    58   999     0      67  =
 44122    58   804    19    58   999     0     111  offset
 44123    58   804    26    58   999     0      74  +
 44124    58   804    28    58   999     0     111  length
 44125    58   804    34    58   999     0     102  ;
 44126    58   805     9    58   999     0      37  for
 44127    58   805    13    58   999     0      59  (
 44128    58   805    14    58   999     0      36  int
 44129    58   805    18    58   999     0     111  i
 44130    58   805    20    58   999     0      67  =
 44131    58   805    22    58   999     0     111  offset
 44132    58   805    28    58   999     0     102  ;
 44133    58   805    30    58   999     0     111  i
 44134    58   805    32    58   999     0      93  <
 44135    58   805    34    58   999     0     111  end
 44136    58   805    37    58   999     0     102  ;
 44137    58   805    39    58   999     0     111  i
 44138    58   805    40    58   999     0      76  ++
 44139    58   805    42    58   999     0      60  )
 44140    58   806    13    58   999     0     111  this.put
 44141    58   806    21    58   999     0      59  (
 44142    58   806    22    58   999     0     111  src
 44143    58   806    25    58   999     0      61  [
 44144    58   806    26    58   999     0     111  i
 44145    58   806    27    58   999     0      62  ]
 44146    58   806    28    58   999     0      60  )
 44147    58   806    29    58   999     0     102  ;
 44148    58   807     9    58   999     0      19  return
 44149    58   807    16    58   999     0      44  this
 44150    58   807    20    58   999     0     102  ;
 44151    58   808     5    58   999     0      64  }
 44152    58   808     5    58   999     0    2354  ENDMETHOD
 44153    58   808     5    58  1000     0    2355  STARTMETHOD
 44154    58   829     5    58  1000     0      10  public
 44155    58   829    12    58  1000     0       6  final
 44156    58   829    18    58  1000     0     111  FloatBuffer
 44157    58   829    30    58  1000     0     111  put
 44158    58   829    33    58  1000     0      59  (
 44159    58   829    34    58  1000     0       4  float
 44160    58   829    39    58  1000     0      61  [
 44161    58   829    40    58  1000     0      62  ]
 44162    58   829    42    58  1000     0     111  src
 44163    58   829    45    58  1000     0      60  )
 44164    58   829    47    58  1000     0      63  {
 44165    58   830     9    58  1000     0      19  return
 44166    58   830    16    58  1000     0     111  put
 44167    58   830    19    58  1000     0      59  (
 44168    58   830    20    58  1000     0     111  src
 44169    58   830    23    58  1000     0      66  ,
 44170    58   830    25    58  1000     0     112  0
 44171    58   830    26    58  1000     0      66  ,
 44172    58   830    28    58  1000     0     111  src.length
 44173    58   830    38    58  1000     0      60  )
 44174    58   830    39    58  1000     0     102  ;
 44175    58   831     5    58  1000     0      64  }
 44176    58   831     5    58  1000     0    2356  ENDMETHOD
 44177    58   831     5    58  1001     0    2357  STARTMETHOD
 44178    58   932     5    58  1001     0      10  public
 44179    58   932    12    58  1001     0       6  final
 44180    58   932    18    58  1001     0      39  boolean
 44181    58   932    26    58  1001     0     111  hasArray
 44182    58   932    34    58  1001     0      59  (
 44183    58   932    35    58  1001     0      60  )
 44184    58   932    37    58  1001     0      63  {
 44185    58   933     9    58  1001     0      19  return
 44186    58   933    16    58  1001     0      59  (
 44187    58   933    17    58  1001     0     111  hb
 44188    58   933    20    58  1001     0      71  !=
 44189    58   933    23    58  1001     0      21  null
 44190    58   933    27    58  1001     0      60  )
 44191    58   933    29    58  1001     0     101  &&
 44192    58   933    32    58  1001     0      69  !
 44193    58   933    33    58  1001     0     111  isReadOnly
 44194    58   933    43    58  1001     0     102  ;
 44195    58   934     5    58  1001     0      64  }
 44196    58   934     5    58  1001     0    2358  ENDMETHOD
 44197    58   934     5    58  1002     0    2359  STARTMETHOD
 44198    58   955     5    58  1002     0      10  public
 44199    58   955    12    58  1002     0       6  final
 44200    58   955    18    58  1002     0       4  float
 44201    58   955    23    58  1002     0      61  [
 44202    58   955    24    58  1002     0      62  ]
 44203    58   955    26    58  1002     0     111  array
 44204    58   955    31    58  1002     0      59  (
 44205    58   955    32    58  1002     0      60  )
 44206    58   955    34    58  1002     0      63  {
 44207    58   956     9    58  1002     0      31  if
 44208    58   956    12    58  1002     0      59  (
 44209    58   956    13    58  1002     0     111  hb
 44210    58   956    16    58  1002     0      68  ==
 44211    58   956    19    58  1002     0      21  null
 44212    58   956    23    58  1002     0      60  )
 44213    58   957    13    58  1002     0      20  throw
 44214    58   957    19    58  1002     0      15  new
 44215    58   957    23    58  1002     0     111  UnsupportedOperationException
 44216    58   957    52    58  1002     0      59  (
 44217    58   957    53    58  1002     0      60  )
 44218    58   957    54    58  1002     0     102  ;
 44219    58   958     9    58  1002     0      31  if
 44220    58   958    12    58  1002     0      59  (
 44221    58   958    13    58  1002     0     111  isReadOnly
 44222    58   958    23    58  1002     0      60  )
 44223    58   959    13    58  1002     0      20  throw
 44224    58   959    19    58  1002     0      15  new
 44225    58   959    23    58  1002     0     111  ReadOnlyBufferException
 44226    58   959    46    58  1002     0      59  (
 44227    58   959    47    58  1002     0      60  )
 44228    58   959    48    58  1002     0     102  ;
 44229    58   960     9    58  1002     0      19  return
 44230    58   960    16    58  1002     0     111  hb
 44231    58   960    18    58  1002     0     102  ;
 44232    58   961     5    58  1002     0      64  }
 44233    58   961     5    58  1002     0    2360  ENDMETHOD
 44234    58   961     5    58  1003     0    2361  STARTMETHOD
 44235    58   983     5    58  1003     0      10  public
 44236    58   983    12    58  1003     0       6  final
 44237    58   983    18    58  1003     0      36  int
 44238    58   983    22    58  1003     0     111  arrayOffset
 44239    58   983    33    58  1003     0      59  (
 44240    58   983    34    58  1003     0      60  )
 44241    58   983    36    58  1003     0      63  {
 44242    58   984     9    58  1003     0      31  if
 44243    58   984    12    58  1003     0      59  (
 44244    58   984    13    58  1003     0     111  hb
 44245    58   984    16    58  1003     0      68  ==
 44246    58   984    19    58  1003     0      21  null
 44247    58   984    23    58  1003     0      60  )
 44248    58   985    13    58  1003     0      20  throw
 44249    58   985    19    58  1003     0      15  new
 44250    58   985    23    58  1003     0     111  UnsupportedOperationException
 44251    58   985    52    58  1003     0      59  (
 44252    58   985    53    58  1003     0      60  )
 44253    58   985    54    58  1003     0     102  ;
 44254    58   986     9    58  1003     0      31  if
 44255    58   986    12    58  1003     0      59  (
 44256    58   986    13    58  1003     0     111  isReadOnly
 44257    58   986    23    58  1003     0      60  )
 44258    58   987    13    58  1003     0      20  throw
 44259    58   987    19    58  1003     0      15  new
 44260    58   987    23    58  1003     0     111  ReadOnlyBufferException
 44261    58   987    46    58  1003     0      59  (
 44262    58   987    47    58  1003     0      60  )
 44263    58   987    48    58  1003     0     102  ;
 44264    58   988     9    58  1003     0      19  return
 44265    58   988    16    58  1003     0     111  offset
 44266    58   988    22    58  1003     0     102  ;
 44267    58   989     5    58  1003     0      64  }
 44268    58   989     5    58  1003     0    2362  ENDMETHOD
 44269    58  1030     5    58    -1     0      10  public
 44270    58  1030    12    58    -1     0       7  abstract
 44271    58  1030    21    58    -1     0     111  FloatBuffer
 44272    58  1030    33    58    -1     0     111  compact
 44273    58  1030    40    58    -1     0      59  (
 44274    58  1030    41    58    -1     0      60  )
 44275    58  1030    42    58    -1     0     102  ;
 44276    58  1037     5    58    -1     0      10  public
 44277    58  1037    12    58    -1     0       7  abstract
 44278    58  1037    21    58    -1     0      39  boolean
 44279    58  1037    29    58    -1     0     111  isDirect
 44280    58  1037    37    58    -1     0      59  (
 44281    58  1037    38    58    -1     0      60  )
 44282    58  1037    39    58    -1     0     102  ;
 44283    58  1037    39    58  1004     0    2363  STARTMETHOD
 44284    58  1046     5    58  1004     0      10  public
 44285    58  1046    12    58  1004     0     111  String
 44286    58  1046    19    58  1004     0     111  toString
 44287    58  1046    27    58  1004     0      59  (
 44288    58  1046    28    58  1004     0      60  )
 44289    58  1046    30    58  1004     0      63  {
 44290    58  1047     9    58  1004     0     111  StringBuffer
 44291    58  1047    22    58  1004     0     111  sb
 44292    58  1047    25    58  1004     0      67  =
 44293    58  1047    27    58  1004     0      15  new
 44294    58  1047    31    58  1004     0     111  StringBuffer
 44295    58  1047    43    58  1004     0      59  (
 44296    58  1047    44    58  1004     0      60  )
 44297    58  1047    45    58  1004     0     102  ;
 44298    58  1048     9    58  1004     0     111  sb.append
 44299    58  1048    18    58  1004     0      59  (
 44300    58  1048    19    58  1004     0     111  getClass
 44301    58  1048    27    58  1004     0      59  (
 44302    58  1048    28    58  1004     0      60  )
 44303    58  1048    29    58  1004     0      54  .
 44304    58  1048    30    58  1004     0     111  getName
 44305    58  1048    37    58  1004     0      59  (
 44306    58  1048    38    58  1004     0      60  )
 44307    58  1048    39    58  1004     0      60  )
 44308    58  1048    40    58  1004     0     102  ;
 44309    58  1049     9    58  1004     0     111  sb.append
 44310    58  1049    18    58  1004     0      59  (
 44311    58  1049    19    58  1004     0     107  "[pos="
 44312    58  1049    26    58  1004     0      60  )
 44313    58  1049    27    58  1004     0     102  ;
 44314    58  1050     9    58  1004     0     111  sb.append
 44315    58  1050    18    58  1004     0      59  (
 44316    58  1050    19    58  1004     0     111  position
 44317    58  1050    27    58  1004     0      59  (
 44318    58  1050    28    58  1004     0      60  )
 44319    58  1050    29    58  1004     0      60  )
 44320    58  1050    30    58  1004     0     102  ;
 44321    58  1051     9    58  1004     0     111  sb.append
 44322    58  1051    18    58  1004     0      59  (
 44323    58  1051    19    58  1004     0     107  " lim="
 44324    58  1051    26    58  1004     0      60  )
 44325    58  1051    27    58  1004     0     102  ;
 44326    58  1052     9    58  1004     0     111  sb.append
 44327    58  1052    18    58  1004     0      59  (
 44328    58  1052    19    58  1004     0     111  limit
 44329    58  1052    24    58  1004     0      59  (
 44330    58  1052    25    58  1004     0      60  )
 44331    58  1052    26    58  1004     0      60  )
 44332    58  1052    27    58  1004     0     102  ;
 44333    58  1053     9    58  1004     0     111  sb.append
 44334    58  1053    18    58  1004     0      59  (
 44335    58  1053    19    58  1004     0     107  " cap="
 44336    58  1053    26    58  1004     0      60  )
 44337    58  1053    27    58  1004     0     102  ;
 44338    58  1054     9    58  1004     0     111  sb.append
 44339    58  1054    18    58  1004     0      59  (
 44340    58  1054    19    58  1004     0     111  capacity
 44341    58  1054    27    58  1004     0      59  (
 44342    58  1054    28    58  1004     0      60  )
 44343    58  1054    29    58  1004     0      60  )
 44344    58  1054    30    58  1004     0     102  ;
 44345    58  1055     9    58  1004     0     111  sb.append
 44346    58  1055    18    58  1004     0      59  (
 44347    58  1055    19    58  1004     0     107  "]"
 44348    58  1055    22    58  1004     0      60  )
 44349    58  1055    23    58  1004     0     102  ;
 44350    58  1056     9    58  1004     0      19  return
 44351    58  1056    16    58  1004     0     111  sb.toString
 44352    58  1056    27    58  1004     0      59  (
 44353    58  1056    28    58  1004     0      60  )
 44354    58  1056    29    58  1004     0     102  ;
 44355    58  1057     5    58  1004     0      64  }
 44356    58  1057     5    58  1004     0    2364  ENDMETHOD
 44357    58  1057     5    58  1005     0    2365  STARTMETHOD
 44358    58  1077     5    58  1005     0      10  public
 44359    58  1077    12    58  1005     0      36  int
 44360    58  1077    16    58  1005     0     111  hashCode
 44361    58  1077    24    58  1005     0      59  (
 44362    58  1077    25    58  1005     0      60  )
 44363    58  1077    27    58  1005     0      63  {
 44364    58  1078     9    58  1005     0      36  int
 44365    58  1078    13    58  1005     0     111  h
 44366    58  1078    15    58  1005     0      67  =
 44367    58  1078    17    58  1005     0     112  1
 44368    58  1078    18    58  1005     0     102  ;
 44369    58  1079     9    58  1005     0      36  int
 44370    58  1079    13    58  1005     0     111  p
 44371    58  1079    15    58  1005     0      67  =
 44372    58  1079    17    58  1005     0     111  position
 44373    58  1079    25    58  1005     0      59  (
 44374    58  1079    26    58  1005     0      60  )
 44375    58  1079    27    58  1005     0     102  ;
 44376    58  1080     9    58  1005     0      37  for
 44377    58  1080    13    58  1005     0      59  (
 44378    58  1080    14    58  1005     0      36  int
 44379    58  1080    18    58  1005     0     111  i
 44380    58  1080    20    58  1005     0      67  =
 44381    58  1080    22    58  1005     0     111  limit
 44382    58  1080    27    58  1005     0      59  (
 44383    58  1080    28    58  1005     0      60  )
 44384    58  1080    30    58  1005     0      77  -
 44385    58  1080    32    58  1005     0     112  1
 44386    58  1080    33    58  1005     0     102  ;
 44387    58  1080    35    58  1005     0     111  i
 44388    58  1080    37    58  1005     0      88  >=
 44389    58  1080    40    58  1005     0     111  p
 44390    58  1080    41    58  1005     0     102  ;
 44391    58  1080    43    58  1005     0     111  i
 44392    58  1080    44    58  1005     0      79  --
 44393    58  1080    46    58  1005     0      60  )
 44394    58  1081    13    58  1005     0     111  h
 44395    58  1081    15    58  1005     0      67  =
 44396    58  1081    17    58  1005     0     112  31
 44397    58  1081    20    58  1005     0      80  *
 44398    58  1081    22    58  1005     0     111  h
 44399    58  1081    24    58  1005     0      74  +
 44400    58  1081    26    58  1005     0      59  (
 44401    58  1081    27    58  1005     0      36  int
 44402    58  1081    30    58  1005     0      60  )
 44403    58  1081    31    58  1005     0     111  get
 44404    58  1081    34    58  1005     0      59  (
 44405    58  1081    35    58  1005     0     111  i
 44406    58  1081    36    58  1005     0      60  )
 44407    58  1081    37    58  1005     0     102  ;
 44408    58  1082     9    58  1005     0      19  return
 44409    58  1082    16    58  1005     0     111  h
 44410    58  1082    17    58  1005     0     102  ;
 44411    58  1083     5    58  1005     0      64  }
 44412    58  1083     5    58  1005     0    2366  ENDMETHOD
 44413    58  1083     5    58  1006     0    2367  STARTMETHOD
 44414    58  1110     5    58  1006     0      10  public
 44415    58  1110    12    58  1006     0      39  boolean
 44416    58  1110    20    58  1006     0     111  equals
 44417    58  1110    26    58  1006     0      59  (
 44418    58  1110    27    58  1006     0     111  Object
 44419    58  1110    34    58  1006     0     111  ob
 44420    58  1110    36    58  1006     0      60  )
 44421    58  1110    38    58  1006     0      63  {
 44422    58  1111     9    58  1006     0      31  if
 44423    58  1111    12    58  1006     0      59  (
 44424    58  1111    13    58  1006     0      44  this
 44425    58  1111    18    58  1006     0      68  ==
 44426    58  1111    21    58  1006     0     111  ob
 44427    58  1111    23    58  1006     0      60  )
 44428    58  1112    13    58  1006     0      19  return
 44429    58  1112    20    58  1006     0      52  true
 44430    58  1112    24    58  1006     0     102  ;
 44431    58  1113     9    58  1006     0      31  if
 44432    58  1113    12    58  1006     0      59  (
 44433    58  1113    13    58  1006     0      69  !
 44434    58  1113    14    58  1006     0      59  (
 44435    58  1113    15    58  1006     0     111  ob
 44436    58  1113    18    58  1006     0      16  instanceof
 44437    58  1113    29    58  1006     0     111  FloatBuffer
 44438    58  1113    40    58  1006     0      60  )
 44439    58  1113    41    58  1006     0      60  )
 44440    58  1114    13    58  1006     0      19  return
 44441    58  1114    20    58  1006     0      43  false
 44442    58  1114    25    58  1006     0     102  ;
 44443    58  1115     9    58  1006     0     111  FloatBuffer
 44444    58  1115    21    58  1006     0     111  that
 44445    58  1115    26    58  1006     0      67  =
 44446    58  1115    28    58  1006     0      59  (
 44447    58  1115    29    58  1006     0     111  FloatBuffer
 44448    58  1115    40    58  1006     0      60  )
 44449    58  1115    41    58  1006     0     111  ob
 44450    58  1115    43    58  1006     0     102  ;
 44451    58  1116     9    58  1006     0      31  if
 44452    58  1116    12    58  1006     0      59  (
 44453    58  1116    13    58  1006     0     111  this.remaining
 44454    58  1116    27    58  1006     0      59  (
 44455    58  1116    28    58  1006     0      60  )
 44456    58  1116    30    58  1006     0      71  !=
 44457    58  1116    33    58  1006     0     111  that.remaining
 44458    58  1116    47    58  1006     0      59  (
 44459    58  1116    48    58  1006     0      60  )
 44460    58  1116    49    58  1006     0      60  )
 44461    58  1117    13    58  1006     0      19  return
 44462    58  1117    20    58  1006     0      43  false
 44463    58  1117    25    58  1006     0     102  ;
 44464    58  1118     9    58  1006     0      36  int
 44465    58  1118    13    58  1006     0     111  p
 44466    58  1118    15    58  1006     0      67  =
 44467    58  1118    17    58  1006     0     111  this.position
 44468    58  1118    30    58  1006     0      59  (
 44469    58  1118    31    58  1006     0      60  )
 44470    58  1118    32    58  1006     0     102  ;
 44471    58  1119     9    58  1006     0      37  for
 44472    58  1119    13    58  1006     0      59  (
 44473    58  1119    14    58  1006     0      36  int
 44474    58  1119    18    58  1006     0     111  i
 44475    58  1119    20    58  1006     0      67  =
 44476    58  1119    22    58  1006     0     111  this.limit
 44477    58  1119    32    58  1006     0      59  (
 44478    58  1119    33    58  1006     0      60  )
 44479    58  1119    35    58  1006     0      77  -
 44480    58  1119    37    58  1006     0     112  1
 44481    58  1119    38    58  1006     0      66  ,
 44482    58  1119    40    58  1006     0     111  j
 44483    58  1119    42    58  1006     0      67  =
 44484    58  1119    44    58  1006     0     111  that.limit
 44485    58  1119    54    58  1006     0      59  (
 44486    58  1119    55    58  1006     0      60  )
 44487    58  1119    57    58  1006     0      77  -
 44488    58  1119    59    58  1006     0     112  1
 44489    58  1119    60    58  1006     0     102  ;
 44490    58  1119    62    58  1006     0     111  i
 44491    58  1119    64    58  1006     0      88  >=
 44492    58  1119    67    58  1006     0     111  p
 44493    58  1119    68    58  1006     0     102  ;
 44494    58  1119    70    58  1006     0     111  i
 44495    58  1119    71    58  1006     0      79  --
 44496    58  1119    73    58  1006     0      66  ,
 44497    58  1119    75    58  1006     0     111  j
 44498    58  1119    76    58  1006     0      79  --
 44499    58  1119    78    58  1006     0      60  )
 44500    58  1119    80    58  1006     0      63  {
 44501    58  1120    13    58  1006     1       4  float
 44502    58  1120    19    58  1006     1     111  v1
 44503    58  1120    22    58  1006     1      67  =
 44504    58  1120    24    58  1006     1     111  this.get
 44505    58  1120    32    58  1006     1      59  (
 44506    58  1120    33    58  1006     1     111  i
 44507    58  1120    34    58  1006     1      60  )
 44508    58  1120    35    58  1006     1     102  ;
 44509    58  1121    13    58  1006     1       4  float
 44510    58  1121    19    58  1006     1     111  v2
 44511    58  1121    22    58  1006     1      67  =
 44512    58  1121    24    58  1006     1     111  that.get
 44513    58  1121    32    58  1006     1      59  (
 44514    58  1121    33    58  1006     1     111  j
 44515    58  1121    34    58  1006     1      60  )
 44516    58  1121    35    58  1006     1     102  ;
 44517    58  1122    13    58  1006     0      31  if
 44518    58  1122    16    58  1006     0      59  (
 44519    58  1122    17    58  1006     0     111  v1
 44520    58  1122    20    58  1006     0      71  !=
 44521    58  1122    23    58  1006     0     111  v2
 44522    58  1122    25    58  1006     0      60  )
 44523    58  1122    27    58  1006     0      63  {
 44524    58  1123    17    58  1006     0      31  if
 44525    58  1123    20    58  1006     0      59  (
 44526    58  1123    21    58  1006     0      59  (
 44527    58  1123    22    58  1006     0     111  v1
 44528    58  1123    25    58  1006     0      71  !=
 44529    58  1123    28    58  1006     0     111  v1
 44530    58  1123    30    58  1006     0      60  )
 44531    58  1123    32    58  1006     0     101  &&
 44532    58  1123    35    58  1006     0      59  (
 44533    58  1123    36    58  1006     0     111  v2
 44534    58  1123    39    58  1006     0      71  !=
 44535    58  1123    42    58  1006     0     111  v2
 44536    58  1123    44    58  1006     0      60  )
 44537    58  1123    45    58  1006     0      60  )
 44538    58  1124    21    58  1006     0      46  continue
 44539    58  1124    29    58  1006     0     102  ;
 44540    58  1125    17    58  1006     0      19  return
 44541    58  1125    24    58  1006     0      43  false
 44542    58  1125    29    58  1006     0     102  ;
 44543    58  1126    13    58  1006     1      64  }
 44544    58  1127     9    58  1006     1      64  }
 44545    58  1128     9    58  1006     0      19  return
 44546    58  1128    16    58  1006     0      52  true
 44547    58  1128    20    58  1006     0     102  ;
 44548    58  1129     5    58  1006     0      64  }
 44549    58  1129     5    58  1006     0    2368  ENDMETHOD
 44550    58  1129     5    58  1007     0    2369  STARTMETHOD
 44551    58  1143     5    58  1007     0      10  public
 44552    58  1143    12    58  1007     0      36  int
 44553    58  1143    16    58  1007     0     111  compareTo
 44554    58  1143    25    58  1007     0      59  (
 44555    58  1143    26    58  1007     0     111  FloatBuffer
 44556    58  1143    38    58  1007     0     111  that
 44557    58  1143    42    58  1007     0      60  )
 44558    58  1143    44    58  1007     0      63  {
 44559    58  1144     9    58  1007     0      36  int
 44560    58  1144    13    58  1007     0     111  n
 44561    58  1144    15    58  1007     0      67  =
 44562    58  1144    17    58  1007     0     111  this.position
 44563    58  1144    30    58  1007     0      59  (
 44564    58  1144    31    58  1007     0      60  )
 44565    58  1144    33    58  1007     0      74  +
 44566    58  1144    35    58  1007     0     111  Math.min
 44567    58  1144    43    58  1007     0      59  (
 44568    58  1144    44    58  1007     0     111  this.remaining
 44569    58  1144    58    58  1007     0      59  (
 44570    58  1144    59    58  1007     0      60  )
 44571    58  1144    60    58  1007     0      66  ,
 44572    58  1144    62    58  1007     0     111  that.remaining
 44573    58  1144    76    58  1007     0      59  (
 44574    58  1144    77    58  1007     0      60  )
 44575    58  1144    78    58  1007     0      60  )
 44576    58  1144    79    58  1007     0     102  ;
 44577    58  1145     9    58  1007     0      37  for
 44578    58  1145    13    58  1007     0      59  (
 44579    58  1145    14    58  1007     0      36  int
 44580    58  1145    18    58  1007     0     111  i
 44581    58  1145    20    58  1007     0      67  =
 44582    58  1145    22    58  1007     0     111  this.position
 44583    58  1145    35    58  1007     0      59  (
 44584    58  1145    36    58  1007     0      60  )
 44585    58  1145    37    58  1007     0      66  ,
 44586    58  1145    39    58  1007     0     111  j
 44587    58  1145    41    58  1007     0      67  =
 44588    58  1145    43    58  1007     0     111  that.position
 44589    58  1145    56    58  1007     0      59  (
 44590    58  1145    57    58  1007     0      60  )
 44591    58  1145    58    58  1007     0     102  ;
 44592    58  1145    60    58  1007     0     111  i
 44593    58  1145    62    58  1007     0      93  <
 44594    58  1145    64    58  1007     0     111  n
 44595    58  1145    65    58  1007     0     102  ;
 44596    58  1145    67    58  1007     0     111  i
 44597    58  1145    68    58  1007     0      76  ++
 44598    58  1145    70    58  1007     0      66  ,
 44599    58  1145    72    58  1007     0     111  j
 44600    58  1145    73    58  1007     0      76  ++
 44601    58  1145    75    58  1007     0      60  )
 44602    58  1145    77    58  1007     0      63  {
 44603    58  1146    13    58  1007     1       4  float
 44604    58  1146    19    58  1007     1     111  v1
 44605    58  1146    22    58  1007     1      67  =
 44606    58  1146    24    58  1007     1     111  this.get
 44607    58  1146    32    58  1007     1      59  (
 44608    58  1146    33    58  1007     1     111  i
 44609    58  1146    34    58  1007     1      60  )
 44610    58  1146    35    58  1007     1     102  ;
 44611    58  1147    13    58  1007     1       4  float
 44612    58  1147    19    58  1007     1     111  v2
 44613    58  1147    22    58  1007     1      67  =
 44614    58  1147    24    58  1007     1     111  that.get
 44615    58  1147    32    58  1007     1      59  (
 44616    58  1147    33    58  1007     1     111  j
 44617    58  1147    34    58  1007     1      60  )
 44618    58  1147    35    58  1007     1     102  ;
 44619    58  1148    13    58  1007     0      31  if
 44620    58  1148    16    58  1007     0      59  (
 44621    58  1148    17    58  1007     0     111  v1
 44622    58  1148    20    58  1007     0      68  ==
 44623    58  1148    23    58  1007     0     111  v2
 44624    58  1148    25    58  1007     0      60  )
 44625    58  1149    17    58  1007     0      46  continue
 44626    58  1149    25    58  1007     0     102  ;
 44627    58  1150    13    58  1007     0      31  if
 44628    58  1150    16    58  1007     0      59  (
 44629    58  1150    17    58  1007     0      59  (
 44630    58  1150    18    58  1007     0     111  v1
 44631    58  1150    21    58  1007     0      71  !=
 44632    58  1150    24    58  1007     0     111  v1
 44633    58  1150    26    58  1007     0      60  )
 44634    58  1150    28    58  1007     0     101  &&
 44635    58  1150    31    58  1007     0      59  (
 44636    58  1150    32    58  1007     0     111  v2
 44637    58  1150    35    58  1007     0      71  !=
 44638    58  1150    38    58  1007     0     111  v2
 44639    58  1150    40    58  1007     0      60  )
 44640    58  1150    41    58  1007     0      60  )
 44641    58  1151    17    58  1007     0      46  continue
 44642    58  1151    25    58  1007     0     102  ;
 44643    58  1152    13    58  1007     0      31  if
 44644    58  1152    16    58  1007     0      59  (
 44645    58  1152    17    58  1007     0     111  v1
 44646    58  1152    20    58  1007     0      93  <
 44647    58  1152    22    58  1007     0     111  v2
 44648    58  1152    24    58  1007     0      60  )
 44649    58  1153    17    58  1007     0      19  return
 44650    58  1153    24    58  1007     0      77  -
 44651    58  1153    25    58  1007     0     112  1
 44652    58  1153    26    58  1007     0     102  ;
 44653    58  1154    13    58  1007     0      19  return
 44654    58  1154    20    58  1007     0      74  +
 44655    58  1154    21    58  1007     0     112  1
 44656    58  1154    22    58  1007     0     102  ;
 44657    58  1155     9    58  1007     0      64  }
 44658    58  1156     9    58  1007     0      19  return
 44659    58  1156    16    58  1007     0     111  this.remaining
 44660    58  1156    30    58  1007     0      59  (
 44661    58  1156    31    58  1007     0      60  )
 44662    58  1156    33    58  1007     0      77  -
 44663    58  1156    35    58  1007     0     111  that.remaining
 44664    58  1156    49    58  1007     0      59  (
 44665    58  1156    50    58  1007     0      60  )
 44666    58  1156    51    58  1007     0     102  ;
 44667    58  1157     5    58  1007     0      64  }
 44668    58  1157     5    58  1007     0    2370  ENDMETHOD
 44669    58  1372     5    58    -1     0      10  public
 44670    58  1372    12    58    -1     0       7  abstract
 44671    58  1372    21    58    -1     0     111  ByteOrder
 44672    58  1372    31    58    -1     0     111  order
 44673    58  1372    36    58    -1     0      59  (
 44674    58  1372    37    58    -1     0      60  )
 44675    58  1372    38    58    -1     0     102  ;
 44676    58  1426     1    58    -1     0      64  }
 44677    58  1426     1    58    -1     1    2371  ENDCLASS
 44678    58  1426     1    -1    -1     1    2372  ENDFILE C:\javasrc\java\nio\FloatBuffer.java
 44679    59     1     1    -1    -1     1    2373  STARTFILE C:\javasrc\java\nio\HeapByteBuffer.java
 44680    59    28     1    -1    -1     0       5  package
 44681    59    28     9    -1    -1     0     111  java.nio
 44682    59    28    17    -1    -1     0     102  ;
 44683    59    42     1    59    -1     0    2374  STARTCLASS
 44684    59    42     1    59    -1     0      24  class
 44685    59    42     7    59    -1     0     111  HeapByteBuffer
 44686    59    43     5    59    -1     0      38  extends
 44687    59    43    13    59    -1     0     111  ByteBuffer
 44688    59    44     1    59    -1     0      63  {
 44689    59    44     1    59  1008     0    2375  STARTMETHOD
 44690    59    55     5    59  1008     0     111  HeapByteBuffer
 44691    59    55    19    59  1008     0      59  (
 44692    59    55    20    59  1008     0      36  int
 44693    59    55    24    59  1008     0     111  cap
 44694    59    55    27    59  1008     0      66  ,
 44695    59    55    29    59  1008     0      36  int
 44696    59    55    33    59  1008     0     111  lim
 44697    59    55    36    59  1008     0      60  )
 44698    59    55    38    59  1008     0      63  {
 44699    59    57     9    59  1008     0      27  super
 44700    59    57    14    59  1008     0      59  (
 44701    59    57    15    59  1008     0      77  -
 44702    59    57    16    59  1008     0     112  1
 44703    59    57    17    59  1008     0      66  ,
 44704    59    57    19    59  1008     0     112  0
 44705    59    57    20    59  1008     0      66  ,
 44706    59    57    22    59  1008     0     111  lim
 44707    59    57    25    59  1008     0      66  ,
 44708    59    57    27    59  1008     0     111  cap
 44709    59    57    30    59  1008     0      66  ,
 44710    59    57    32    59  1008     0      15  new
 44711    59    57    36    59  1008     0       9  byte
 44712    59    57    40    59  1008     0      61  [
 44713    59    57    41    59  1008     0     111  cap
 44714    59    57    44    59  1008     0      62  ]
 44715    59    57    45    59  1008     0      66  ,
 44716    59    57    47    59  1008     0     112  0
 44717    59    57    48    59  1008     0      60  )
 44718    59    57    49    59  1008     0     102  ;
 44719    59    66     5    59  1008     0      64  }
 44720    59    66     5    59  1008     0    2376  ENDMETHOD
 44721    59    66     5    59  1009     0    2377  STARTMETHOD
 44722    59    68     5    59  1009     0     111  HeapByteBuffer
 44723    59    68    19    59  1009     0      59  (
 44724    59    68    20    59  1009     0       9  byte
 44725    59    68    24    59  1009     0      61  [
 44726    59    68    25    59  1009     0      62  ]
 44727    59    68    27    59  1009     0     111  buf
 44728    59    68    30    59  1009     0      66  ,
 44729    59    68    32    59  1009     0      36  int
 44730    59    68    36    59  1009     0     111  off
 44731    59    68    39    59  1009     0      66  ,
 44732    59    68    41    59  1009     0      36  int
 44733    59    68    45    59  1009     0     111  len
 44734    59    68    48    59  1009     0      60  )
 44735    59    68    50    59  1009     0      63  {
 44736    59    70     9    59  1009     0      27  super
 44737    59    70    14    59  1009     0      59  (
 44738    59    70    15    59  1009     0      77  -
 44739    59    70    16    59  1009     0     112  1
 44740    59    70    17    59  1009     0      66  ,
 44741    59    70    19    59  1009     0     111  off
 44742    59    70    22    59  1009     0      66  ,
 44743    59    70    24    59  1009     0     111  off
 44744    59    70    28    59  1009     0      74  +
 44745    59    70    30    59  1009     0     111  len
 44746    59    70    33    59  1009     0      66  ,
 44747    59    70    35    59  1009     0     111  buf.length
 44748    59    70    45    59  1009     0      66  ,
 44749    59    70    47    59  1009     0     111  buf
 44750    59    70    50    59  1009     0      66  ,
 44751    59    70    52    59  1009     0     112  0
 44752    59    70    53    59  1009     0      60  )
 44753    59    70    54    59  1009     0     102  ;
 44754    59    79     5    59  1009     0      64  }
 44755    59    79     5    59  1009     0    2378  ENDMETHOD
 44756    59    79     5    59  1010     0    2379  STARTMETHOD
 44757    59    81     5    59  1010     0      23  protected
 44758    59    81    15    59  1010     0     111  HeapByteBuffer
 44759    59    81    29    59  1010     0      59  (
 44760    59    81    30    59  1010     0       9  byte
 44761    59    81    34    59  1010     0      61  [
 44762    59    81    35    59  1010     0      62  ]
 44763    59    81    37    59  1010     0     111  buf
 44764    59    81    40    59  1010     0      66  ,
 44765    59    82    36    59  1010     0      36  int
 44766    59    82    40    59  1010     0     111  mark
 44767    59    82    44    59  1010     0      66  ,
 44768    59    82    46    59  1010     0      36  int
 44769    59    82    50    59  1010     0     111  pos
 44770    59    82    53    59  1010     0      66  ,
 44771    59    82    55    59  1010     0      36  int
 44772    59    82    59    59  1010     0     111  lim
 44773    59    82    62    59  1010     0      66  ,
 44774    59    82    64    59  1010     0      36  int
 44775    59    82    68    59  1010     0     111  cap
 44776    59    82    71    59  1010     0      66  ,
 44777    59    83    36    59  1010     0      36  int
 44778    59    83    40    59  1010     0     111  off
 44779    59    83    43    59  1010     0      60  )
 44780    59    84     5    59  1010     0      63  {
 44781    59    86     9    59  1010     0      27  super
 44782    59    86    14    59  1010     0      59  (
 44783    59    86    15    59  1010     0     111  mark
 44784    59    86    19    59  1010     0      66  ,
 44785    59    86    21    59  1010     0     111  pos
 44786    59    86    24    59  1010     0      66  ,
 44787    59    86    26    59  1010     0     111  lim
 44788    59    86    29    59  1010     0      66  ,
 44789    59    86    31    59  1010     0     111  cap
 44790    59    86    34    59  1010     0      66  ,
 44791    59    86    36    59  1010     0     111  buf
 44792    59    86    39    59  1010     0      66  ,
 44793    59    86    41    59  1010     0     111  off
 44794    59    86    44    59  1010     0      60  )
 44795    59    86    45    59  1010     0     102  ;
 44796    59    95     5    59  1010     0      64  }
 44797    59    95     5    59  1010     0    2380  ENDMETHOD
 44798    59    95     5    59  1011     0    2381  STARTMETHOD
 44799    59    97     5    59  1011     0      10  public
 44800    59    97    12    59  1011     0     111  ByteBuffer
 44801    59    97    23    59  1011     0     111  slice
 44802    59    97    28    59  1011     0      59  (
 44803    59    97    29    59  1011     0      60  )
 44804    59    97    31    59  1011     0      63  {
 44805    59    98     9    59  1011     0      19  return
 44806    59    98    16    59  1011     0      15  new
 44807    59    98    20    59  1011     0     111  HeapByteBuffer
 44808    59    98    34    59  1011     0      59  (
 44809    59    98    35    59  1011     0     111  hb
 44810    59    98    37    59  1011     0      66  ,
 44811    59    99    41    59  1011     0      77  -
 44812    59    99    42    59  1011     0     112  1
 44813    59    99    43    59  1011     0      66  ,
 44814    59   100    41    59  1011     0     112  0
 44815    59   100    42    59  1011     0      66  ,
 44816    59   101    41    59  1011     1     111  this.remaining
 44817    59   101    55    59  1011     1      59  (
 44818    59   101    56    59  1011     1      60  )
 44819    59   101    57    59  1011     1      66  ,
 44820    59   102    41    59  1011     1     111  this.remaining
 44821    59   102    55    59  1011     1      59  (
 44822    59   102    56    59  1011     1      60  )
 44823    59   102    57    59  1011     1      66  ,
 44824    59   103    41    59  1011     0     111  this.position
 44825    59   103    54    59  1011     0      59  (
 44826    59   103    55    59  1011     0      60  )
 44827    59   103    57    59  1011     0      74  +
 44828    59   103    59    59  1011     1     111  offset
 44829    59   103    65    59  1011     1      60  )
 44830    59   103    66    59  1011     1     102  ;
 44831    59   104     5    59  1011     1      64  }
 44832    59   104     5    59  1011     0    2382  ENDMETHOD
 44833    59   104     5    59  1012     0    2383  STARTMETHOD
 44834    59   106     5    59  1012     0      10  public
 44835    59   106    12    59  1012     0     111  ByteBuffer
 44836    59   106    23    59  1012     0     111  duplicate
 44837    59   106    32    59  1012     0      59  (
 44838    59   106    33    59  1012     0      60  )
 44839    59   106    35    59  1012     0      63  {
 44840    59   107     9    59  1012     0      19  return
 44841    59   107    16    59  1012     0      15  new
 44842    59   107    20    59  1012     0     111  HeapByteBuffer
 44843    59   107    34    59  1012     0      59  (
 44844    59   107    35    59  1012     0     111  hb
 44845    59   107    37    59  1012     0      66  ,
 44846    59   108    41    59  1012     1     111  this.markValue
 44847    59   108    55    59  1012     1      59  (
 44848    59   108    56    59  1012     1      60  )
 44849    59   108    57    59  1012     1      66  ,
 44850    59   109    41    59  1012     1     111  this.position
 44851    59   109    54    59  1012     1      59  (
 44852    59   109    55    59  1012     1      60  )
 44853    59   109    56    59  1012     1      66  ,
 44854    59   110    41    59  1012     1     111  this.limit
 44855    59   110    51    59  1012     1      59  (
 44856    59   110    52    59  1012     1      60  )
 44857    59   110    53    59  1012     1      66  ,
 44858    59   111    41    59  1012     1     111  this.capacity
 44859    59   111    54    59  1012     1      59  (
 44860    59   111    55    59  1012     1      60  )
 44861    59   111    56    59  1012     1      66  ,
 44862    59   112    41    59  1012     1     111  offset
 44863    59   112    47    59  1012     1      60  )
 44864    59   112    48    59  1012     1     102  ;
 44865    59   113     5    59  1012     1      64  }
 44866    59   113     5    59  1012     0    2384  ENDMETHOD
 44867    59   113     5    59  1013     0    2385  STARTMETHOD
 44868    59   115     5    59  1013     0      10  public
 44869    59   115    12    59  1013     0     111  ByteBuffer
 44870    59   115    23    59  1013     0     111  asReadOnlyBuffer
 44871    59   115    39    59  1013     0      59  (
 44872    59   115    40    59  1013     0      60  )
 44873    59   115    42    59  1013     0      63  {
 44874    59   117     9    59  1013     0      19  return
 44875    59   117    16    59  1013     0      15  new
 44876    59   117    20    59  1013     0     111  HeapByteBufferR
 44877    59   117    35    59  1013     0      59  (
 44878    59   117    36    59  1013     0     111  hb
 44879    59   117    38    59  1013     0      66  ,
 44880    59   118    38    59  1013     1     111  this.markValue
 44881    59   118    52    59  1013     1      59  (
 44882    59   118    53    59  1013     1      60  )
 44883    59   118    54    59  1013     1      66  ,
 44884    59   119    38    59  1013     1     111  this.position
 44885    59   119    51    59  1013     1      59  (
 44886    59   119    52    59  1013     1      60  )
 44887    59   119    53    59  1013     1      66  ,
 44888    59   120    38    59  1013     1     111  this.limit
 44889    59   120    48    59  1013     1      59  (
 44890    59   120    49    59  1013     1      60  )
 44891    59   120    50    59  1013     1      66  ,
 44892    59   121    38    59  1013     1     111  this.capacity
 44893    59   121    51    59  1013     1      59  (
 44894    59   121    52    59  1013     1      60  )
 44895    59   121    53    59  1013     1      66  ,
 44896    59   122    38    59  1013     1     111  offset
 44897    59   122    44    59  1013     1      60  )
 44898    59   122    45    59  1013     1     102  ;
 44899    59   126     5    59  1013     1      64  }
 44900    59   126     5    59  1013     0    2386  ENDMETHOD
 44901    59   126     5    59  1014     0    2387  STARTMETHOD
 44902    59   130     5    59  1014     0      23  protected
 44903    59   130    15    59  1014     0      36  int
 44904    59   130    19    59  1014     0     111  ix
 44905    59   130    21    59  1014     0      59  (
 44906    59   130    22    59  1014     0      36  int
 44907    59   130    26    59  1014     0     111  i
 44908    59   130    27    59  1014     0      60  )
 44909    59   130    29    59  1014     0      63  {
 44910    59   131     9    59  1014     0      19  return
 44911    59   131    16    59  1014     0     111  i
 44912    59   131    18    59  1014     0      74  +
 44913    59   131    20    59  1014     0     111  offset
 44914    59   131    26    59  1014     0     102  ;
 44915    59   132     5    59  1014     0      64  }
 44916    59   132     5    59  1014     0    2388  ENDMETHOD
 44917    59   132     5    59  1015     0    2389  STARTMETHOD
 44918    59   134     5    59  1015     0      10  public
 44919    59   134    12    59  1015     0       9  byte
 44920    59   134    17    59  1015     0     111  get
 44921    59   134    20    59  1015     0      59  (
 44922    59   134    21    59  1015     0      60  )
 44923    59   134    23    59  1015     0      63  {
 44924    59   135     9    59  1015     0      19  return
 44925    59   135    16    59  1015     0     111  hb
 44926    59   135    18    59  1015     0      61  [
 44927    59   135    19    59  1015     0     111  ix
 44928    59   135    21    59  1015     0      59  (
 44929    59   135    22    59  1015     0     111  nextGetIndex
 44930    59   135    34    59  1015     0      59  (
 44931    59   135    35    59  1015     0      60  )
 44932    59   135    36    59  1015     0      60  )
 44933    59   135    37    59  1015     0      62  ]
 44934    59   135    38    59  1015     0     102  ;
 44935    59   136     5    59  1015     0      64  }
 44936    59   136     5    59  1015     0    2390  ENDMETHOD
 44937    59   136     5    59  1016     0    2391  STARTMETHOD
 44938    59   138     5    59  1016     0      10  public
 44939    59   138    12    59  1016     0       9  byte
 44940    59   138    17    59  1016     0     111  get
 44941    59   138    20    59  1016     0      59  (
 44942    59   138    21    59  1016     0      36  int
 44943    59   138    25    59  1016     0     111  i
 44944    59   138    26    59  1016     0      60  )
 44945    59   138    28    59  1016     0      63  {
 44946    59   139     9    59  1016     0      19  return
 44947    59   139    16    59  1016     0     111  hb
 44948    59   139    18    59  1016     0      61  [
 44949    59   139    19    59  1016     0     111  ix
 44950    59   139    21    59  1016     0      59  (
 44951    59   139    22    59  1016     0     111  checkIndex
 44952    59   139    32    59  1016     0      59  (
 44953    59   139    33    59  1016     0     111  i
 44954    59   139    34    59  1016     0      60  )
 44955    59   139    35    59  1016     0      60  )
 44956    59   139    36    59  1016     0      62  ]
 44957    59   139    37    59  1016     0     102  ;
 44958    59   140     5    59  1016     0      64  }
 44959    59   140     5    59  1016     0    2392  ENDMETHOD
 44960    59   140     5    59  1017     0    2393  STARTMETHOD
 44961    59   142     5    59  1017     0      10  public
 44962    59   142    12    59  1017     0     111  ByteBuffer
 44963    59   142    23    59  1017     0     111  get
 44964    59   142    26    59  1017     0      59  (
 44965    59   142    27    59  1017     0       9  byte
 44966    59   142    31    59  1017     0      61  [
 44967    59   142    32    59  1017     0      62  ]
 44968    59   142    34    59  1017     0     111  dst
 44969    59   142    37    59  1017     0      66  ,
 44970    59   142    39    59  1017     0      36  int
 44971    59   142    43    59  1017     0     111  offset
 44972    59   142    49    59  1017     0      66  ,
 44973    59   142    51    59  1017     0      36  int
 44974    59   142    55    59  1017     0     111  length
 44975    59   142    61    59  1017     0      60  )
 44976    59   142    63    59  1017     0      63  {
 44977    59   143     9    59  1017     0     111  checkBounds
 44978    59   143    20    59  1017     0      59  (
 44979    59   143    21    59  1017     0     111  offset
 44980    59   143    27    59  1017     0      66  ,
 44981    59   143    29    59  1017     0     111  length
 44982    59   143    35    59  1017     0      66  ,
 44983    59   143    37    59  1017     0     111  dst.length
 44984    59   143    47    59  1017     0      60  )
 44985    59   143    48    59  1017     0     102  ;
 44986    59   144     9    59  1017     0      31  if
 44987    59   144    12    59  1017     0      59  (
 44988    59   144    13    59  1017     0     111  length
 44989    59   144    20    59  1017     0      89  >
 44990    59   144    22    59  1017     0     111  remaining
 44991    59   144    31    59  1017     0      59  (
 44992    59   144    32    59  1017     0      60  )
 44993    59   144    33    59  1017     0      60  )
 44994    59   145    13    59  1017     0      20  throw
 44995    59   145    19    59  1017     0      15  new
 44996    59   145    23    59  1017     0     111  BufferUnderflowException
 44997    59   145    47    59  1017     0      59  (
 44998    59   145    48    59  1017     0      60  )
 44999    59   145    49    59  1017     0     102  ;
 45000    59   146     9    59  1017     0     111  System.arraycopy
 45001    59   146    25    59  1017     0      59  (
 45002    59   146    26    59  1017     0     111  hb
 45003    59   146    28    59  1017     0      66  ,
 45004    59   146    30    59  1017     0     111  ix
 45005    59   146    32    59  1017     0      59  (
 45006    59   146    33    59  1017     0     111  position
 45007    59   146    41    59  1017     0      59  (
 45008    59   146    42    59  1017     0      60  )
 45009    59   146    43    59  1017     0      60  )
 45010    59   146    44    59  1017     0      66  ,
 45011    59   146    46    59  1017     0     111  dst
 45012    59   146    49    59  1017     0      66  ,
 45013    59   146    51    59  1017     0     111  offset
 45014    59   146    57    59  1017     0      66  ,
 45015    59   146    59    59  1017     0     111  length
 45016    59   146    65    59  1017     0      60  )
 45017    59   146    66    59  1017     0     102  ;
 45018    59   147     9    59  1017     0     111  position
 45019    59   147    17    59  1017     0      59  (
 45020    59   147    18    59  1017     0     111  position
 45021    59   147    26    59  1017     0      59  (
 45022    59   147    27    59  1017     0      60  )
 45023    59   147    29    59  1017     0      74  +
 45024    59   147    31    59  1017     0     111  length
 45025    59   147    37    59  1017     0      60  )
 45026    59   147    38    59  1017     0     102  ;
 45027    59   148     9    59  1017     0      19  return
 45028    59   148    16    59  1017     0      44  this
 45029    59   148    20    59  1017     1     102  ;
 45030    59   149     5    59  1017     1      64  }
 45031    59   149     5    59  1017     0    2394  ENDMETHOD
 45032    59   149     5    59  1018     0    2395  STARTMETHOD
 45033    59   151     5    59  1018     0      10  public
 45034    59   151    12    59  1018     0      39  boolean
 45035    59   151    20    59  1018     0     111  isDirect
 45036    59   151    28    59  1018     0      59  (
 45037    59   151    29    59  1018     0      60  )
 45038    59   151    31    59  1018     0      63  {
 45039    59   152     9    59  1018     0      19  return
 45040    59   152    16    59  1018     0      43  false
 45041    59   152    21    59  1018     1     102  ;
 45042    59   153     5    59  1018     1      64  }
 45043    59   153     5    59  1018     0    2396  ENDMETHOD
 45044    59   153     5    59  1019     0    2397  STARTMETHOD
 45045    59   157     5    59  1019     0      10  public
 45046    59   157    12    59  1019     0      39  boolean
 45047    59   157    20    59  1019     0     111  isReadOnly
 45048    59   157    30    59  1019     0      59  (
 45049    59   157    31    59  1019     0      60  )
 45050    59   157    33    59  1019     0      63  {
 45051    59   158     9    59  1019     0      19  return
 45052    59   158    16    59  1019     0      43  false
 45053    59   158    21    59  1019     1     102  ;
 45054    59   159     5    59  1019     1      64  }
 45055    59   159     5    59  1019     0    2398  ENDMETHOD
 45056    59   159     5    59  1020     0    2399  STARTMETHOD
 45057    59   161     5    59  1020     0      10  public
 45058    59   161    12    59  1020     0     111  ByteBuffer
 45059    59   161    23    59  1020     0     111  put
 45060    59   161    26    59  1020     0      59  (
 45061    59   161    27    59  1020     0       9  byte
 45062    59   161    32    59  1020     0     111  x
 45063    59   161    33    59  1020     0      60  )
 45064    59   161    35    59  1020     0      63  {
 45065    59   163     9    59  1020     0     111  hb
 45066    59   163    11    59  1020     0      61  [
 45067    59   163    12    59  1020     0     111  ix
 45068    59   163    14    59  1020     0      59  (
 45069    59   163    15    59  1020     0     111  nextPutIndex
 45070    59   163    27    59  1020     0      59  (
 45071    59   163    28    59  1020     0      60  )
 45072    59   163    29    59  1020     0      60  )
 45073    59   163    30    59  1020     0      62  ]
 45074    59   163    32    59  1020     0      67  =
 45075    59   163    34    59  1020     0     111  x
 45076    59   163    35    59  1020     0     102  ;
 45077    59   164     9    59  1020     0      19  return
 45078    59   164    16    59  1020     0      44  this
 45079    59   164    20    59  1020     0     102  ;
 45080    59   168     5    59  1020     0      64  }
 45081    59   168     5    59  1020     0    2400  ENDMETHOD
 45082    59   168     5    59  1021     0    2401  STARTMETHOD
 45083    59   170     5    59  1021     0      10  public
 45084    59   170    12    59  1021     0     111  ByteBuffer
 45085    59   170    23    59  1021     0     111  put
 45086    59   170    26    59  1021     0      59  (
 45087    59   170    27    59  1021     0      36  int
 45088    59   170    31    59  1021     0     111  i
 45089    59   170    32    59  1021     0      66  ,
 45090    59   170    34    59  1021     0       9  byte
 45091    59   170    39    59  1021     0     111  x
 45092    59   170    40    59  1021     0      60  )
 45093    59   170    42    59  1021     0      63  {
 45094    59   172     9    59  1021     0     111  hb
 45095    59   172    11    59  1021     0      61  [
 45096    59   172    12    59  1021     0     111  ix
 45097    59   172    14    59  1021     0      59  (
 45098    59   172    15    59  1021     0     111  checkIndex
 45099    59   172    25    59  1021     0      59  (
 45100    59   172    26    59  1021     0     111  i
 45101    59   172    27    59  1021     0      60  )
 45102    59   172    28    59  1021     0      60  )
 45103    59   172    29    59  1021     0      62  ]
 45104    59   172    31    59  1021     0      67  =
 45105    59   172    33    59  1021     0     111  x
 45106    59   172    34    59  1021     0     102  ;
 45107    59   173     9    59  1021     0      19  return
 45108    59   173    16    59  1021     0      44  this
 45109    59   173    20    59  1021     0     102  ;
 45110    59   177     5    59  1021     0      64  }
 45111    59   177     5    59  1021     0    2402  ENDMETHOD
 45112    59   177     5    59  1022     0    2403  STARTMETHOD
 45113    59   179     5    59  1022     0      10  public
 45114    59   179    12    59  1022     0     111  ByteBuffer
 45115    59   179    23    59  1022     0     111  put
 45116    59   179    26    59  1022     0      59  (
 45117    59   179    27    59  1022     0       9  byte
 45118    59   179    31    59  1022     0      61  [
 45119    59   179    32    59  1022     0      62  ]
 45120    59   179    34    59  1022     0     111  src
 45121    59   179    37    59  1022     0      66  ,
 45122    59   179    39    59  1022     0      36  int
 45123    59   179    43    59  1022     0     111  offset
 45124    59   179    49    59  1022     0      66  ,
 45125    59   179    51    59  1022     0      36  int
 45126    59   179    55    59  1022     0     111  length
 45127    59   179    61    59  1022     0      60  )
 45128    59   179    63    59  1022     0      63  {
 45129    59   181     9    59  1022     0     111  checkBounds
 45130    59   181    20    59  1022     0      59  (
 45131    59   181    21    59  1022     0     111  offset
 45132    59   181    27    59  1022     0      66  ,
 45133    59   181    29    59  1022     0     111  length
 45134    59   181    35    59  1022     0      66  ,
 45135    59   181    37    59  1022     0     111  src.length
 45136    59   181    47    59  1022     0      60  )
 45137    59   181    48    59  1022     0     102  ;
 45138    59   182     9    59  1022     0      31  if
 45139    59   182    12    59  1022     0      59  (
 45140    59   182    13    59  1022     0     111  length
 45141    59   182    20    59  1022     0      89  >
 45142    59   182    22    59  1022     0     111  remaining
 45143    59   182    31    59  1022     0      59  (
 45144    59   182    32    59  1022     0      60  )
 45145    59   182    33    59  1022     0      60  )
 45146    59   183    13    59  1022     0      20  throw
 45147    59   183    19    59  1022     0      15  new
 45148    59   183    23    59  1022     0     111  BufferOverflowException
 45149    59   183    46    59  1022     0      59  (
 45150    59   183    47    59  1022     0      60  )
 45151    59   183    48    59  1022     0     102  ;
 45152    59   184     9    59  1022     0     111  System.arraycopy
 45153    59   184    25    59  1022     0      59  (
 45154    59   184    26    59  1022     0     111  src
 45155    59   184    29    59  1022     0      66  ,
 45156    59   184    31    59  1022     0     111  offset
 45157    59   184    37    59  1022     0      66  ,
 45158    59   184    39    59  1022     0     111  hb
 45159    59   184    41    59  1022     0      66  ,
 45160    59   184    43    59  1022     0     111  ix
 45161    59   184    45    59  1022     0      59  (
 45162    59   184    46    59  1022     0     111  position
 45163    59   184    54    59  1022     0      59  (
 45164    59   184    55    59  1022     0      60  )
 45165    59   184    56    59  1022     0      60  )
 45166    59   184    57    59  1022     0      66  ,
 45167    59   184    59    59  1022     0     111  length
 45168    59   184    65    59  1022     0      60  )
 45169    59   184    66    59  1022     0     102  ;
 45170    59   185     9    59  1022     0     111  position
 45171    59   185    17    59  1022     0      59  (
 45172    59   185    18    59  1022     0     111  position
 45173    59   185    26    59  1022     0      59  (
 45174    59   185    27    59  1022     0      60  )
 45175    59   185    29    59  1022     0      74  +
 45176    59   185    31    59  1022     0     111  length
 45177    59   185    37    59  1022     0      60  )
 45178    59   185    38    59  1022     0     102  ;
 45179    59   186     9    59  1022     0      19  return
 45180    59   186    16    59  1022     0      44  this
 45181    59   186    20    59  1022     0     102  ;
 45182    59   190     5    59  1022     0      64  }
 45183    59   190     5    59  1022     0    2404  ENDMETHOD
 45184    59   190     5    59  1023     0    2405  STARTMETHOD
 45185    59   192     5    59  1023     0      10  public
 45186    59   192    12    59  1023     0     111  ByteBuffer
 45187    59   192    23    59  1023     0     111  put
 45188    59   192    26    59  1023     0      59  (
 45189    59   192    27    59  1023     0     111  ByteBuffer
 45190    59   192    38    59  1023     0     111  src
 45191    59   192    41    59  1023     0      60  )
 45192    59   192    43    59  1023     0      63  {
 45193    59   194     9    59  1023     0      31  if
 45194    59   194    12    59  1023     0      59  (
 45195    59   194    13    59  1023     0     111  src
 45196    59   194    17    59  1023     0      16  instanceof
 45197    59   194    28    59  1023     0     111  HeapByteBuffer
 45198    59   194    42    59  1023     0      60  )
 45199    59   194    44    59  1023     0      63  {
 45200    59   195    13    59  1023     0      31  if
 45201    59   195    16    59  1023     0      59  (
 45202    59   195    17    59  1023     0     111  src
 45203    59   195    21    59  1023     0      68  ==
 45204    59   195    24    59  1023     0      44  this
 45205    59   195    28    59  1023     0      60  )
 45206    59   196    17    59  1023     0      20  throw
 45207    59   196    23    59  1023     0      15  new
 45208    59   196    27    59  1023     0     111  IllegalArgumentException
 45209    59   196    51    59  1023     0      59  (
 45210    59   196    52    59  1023     0      60  )
 45211    59   196    53    59  1023     0     102  ;
 45212    59   197    13    59  1023     0     111  HeapByteBuffer
 45213    59   197    28    59  1023     0     111  sb
 45214    59   197    31    59  1023     0      67  =
 45215    59   197    33    59  1023     0      59  (
 45216    59   197    34    59  1023     0     111  HeapByteBuffer
 45217    59   197    48    59  1023     0      60  )
 45218    59   197    49    59  1023     0     111  src
 45219    59   197    52    59  1023     0     102  ;
 45220    59   198    13    59  1023     0      36  int
 45221    59   198    17    59  1023     0     111  n
 45222    59   198    19    59  1023     0      67  =
 45223    59   198    21    59  1023     0     111  sb.remaining
 45224    59   198    33    59  1023     0      59  (
 45225    59   198    34    59  1023     0      60  )
 45226    59   198    35    59  1023     0     102  ;
 45227    59   199    13    59  1023     0      31  if
 45228    59   199    16    59  1023     0      59  (
 45229    59   199    17    59  1023     0     111  n
 45230    59   199    19    59  1023     0      89  >
 45231    59   199    21    59  1023     0     111  remaining
 45232    59   199    30    59  1023     0      59  (
 45233    59   199    31    59  1023     0      60  )
 45234    59   199    32    59  1023     0      60  )
 45235    59   200    17    59  1023     0      20  throw
 45236    59   200    23    59  1023     0      15  new
 45237    59   200    27    59  1023     0     111  BufferOverflowException
 45238    59   200    50    59  1023     0      59  (
 45239    59   200    51    59  1023     0      60  )
 45240    59   200    52    59  1023     0     102  ;
 45241    59   201    13    59  1023     0     111  System.arraycopy
 45242    59   201    29    59  1023     0      59  (
 45243    59   201    30    59  1023     0     111  sb.hb
 45244    59   201    35    59  1023     0      66  ,
 45245    59   201    37    59  1023     0     111  sb.ix
 45246    59   201    42    59  1023     0      59  (
 45247    59   201    43    59  1023     0     111  sb.position
 45248    59   201    54    59  1023     0      59  (
 45249    59   201    55    59  1023     0      60  )
 45250    59   201    56    59  1023     0      60  )
 45251    59   201    57    59  1023     0      66  ,
 45252    59   202    30    59  1023     0     111  hb
 45253    59   202    32    59  1023     0      66  ,
 45254    59   202    34    59  1023     0     111  ix
 45255    59   202    36    59  1023     0      59  (
 45256    59   202    37    59  1023     0     111  position
 45257    59   202    45    59  1023     0      59  (
 45258    59   202    46    59  1023     0      60  )
 45259    59   202    47    59  1023     0      60  )
 45260    59   202    48    59  1023     0      66  ,
 45261    59   202    50    59  1023     0     111  n
 45262    59   202    51    59  1023     0      60  )
 45263    59   202    52    59  1023     0     102  ;
 45264    59   203    13    59  1023     1     111  sb.position
 45265    59   203    24    59  1023     1      59  (
 45266    59   203    25    59  1023     1     111  sb.position
 45267    59   203    36    59  1023     1      59  (
 45268    59   203    37    59  1023     1      60  )
 45269    59   203    39    59  1023     1      74  +
 45270    59   203    41    59  1023     1     111  n
 45271    59   203    42    59  1023     1      60  )
 45272    59   203    43    59  1023     1     102  ;
 45273    59   204    13    59  1023     1     111  position
 45274    59   204    21    59  1023     1      59  (
 45275    59   204    22    59  1023     1     111  position
 45276    59   204    30    59  1023     1      59  (
 45277    59   204    31    59  1023     1      60  )
 45278    59   204    33    59  1023     1      74  +
 45279    59   204    35    59  1023     1     111  n
 45280    59   204    36    59  1023     1      60  )
 45281    59   204    37    59  1023     1     102  ;
 45282    59   205     9    59  1023     0      64  }
 45283    59   205    11    59  1023     0      48  else
 45284    59   205    16    59  1023     0      31  if
 45285    59   205    19    59  1023     0      59  (
 45286    59   205    20    59  1023     0     111  src.isDirect
 45287    59   205    32    59  1023     0      59  (
 45288    59   205    33    59  1023     0      60  )
 45289    59   205    34    59  1023     0      60  )
 45290    59   205    36    59  1023     0      63  {
 45291    59   206    13    59  1023     0      36  int
 45292    59   206    17    59  1023     0     111  n
 45293    59   206    19    59  1023     0      67  =
 45294    59   206    21    59  1023     0     111  src.remaining
 45295    59   206    34    59  1023     0      59  (
 45296    59   206    35    59  1023     0      60  )
 45297    59   206    36    59  1023     0     102  ;
 45298    59   207    13    59  1023     0      31  if
 45299    59   207    16    59  1023     0      59  (
 45300    59   207    17    59  1023     0     111  n
 45301    59   207    19    59  1023     0      89  >
 45302    59   207    21    59  1023     0     111  remaining
 45303    59   207    30    59  1023     0      59  (
 45304    59   207    31    59  1023     0      60  )
 45305    59   207    32    59  1023     0      60  )
 45306    59   208    17    59  1023     0      20  throw
 45307    59   208    23    59  1023     0      15  new
 45308    59   208    27    59  1023     0     111  BufferOverflowException
 45309    59   208    50    59  1023     0      59  (
 45310    59   208    51    59  1023     0      60  )
 45311    59   208    52    59  1023     0     102  ;
 45312    59   209    13    59  1023     0     111  src.get
 45313    59   209    20    59  1023     0      59  (
 45314    59   209    21    59  1023     0     111  hb
 45315    59   209    23    59  1023     0      66  ,
 45316    59   209    25    59  1023     0     111  ix
 45317    59   209    27    59  1023     0      59  (
 45318    59   209    28    59  1023     0     111  position
 45319    59   209    36    59  1023     0      59  (
 45320    59   209    37    59  1023     0      60  )
 45321    59   209    38    59  1023     0      60  )
 45322    59   209    39    59  1023     0      66  ,
 45323    59   209    41    59  1023     0     111  n
 45324    59   209    42    59  1023     0      60  )
 45325    59   209    43    59  1023     0     102  ;
 45326    59   210    13    59  1023     0     111  position
 45327    59   210    21    59  1023     0      59  (
 45328    59   210    22    59  1023     0     111  position
 45329    59   210    30    59  1023     0      59  (
 45330    59   210    31    59  1023     0      60  )
 45331    59   210    33    59  1023     0      74  +
 45332    59   210    35    59  1023     0     111  n
 45333    59   210    36    59  1023     0      60  )
 45334    59   210    37    59  1023     0     102  ;
 45335    59   211     9    59  1023     0      64  }
 45336    59   211    11    59  1023     0      48  else
 45337    59   211    16    59  1023     0      63  {
 45338    59   212    13    59  1023     0     111  super.put
 45339    59   212    22    59  1023     0      59  (
 45340    59   212    23    59  1023     0     111  src
 45341    59   212    26    59  1023     0      60  )
 45342    59   212    27    59  1023     0     102  ;
 45343    59   213     9    59  1023     0      64  }
 45344    59   214     9    59  1023     0      19  return
 45345    59   214    16    59  1023     0      44  this
 45346    59   214    20    59  1023     0     102  ;
 45347    59   218     5    59  1023     0      64  }
 45348    59   218     5    59  1023     0    2406  ENDMETHOD
 45349    59   218     5    59  1024     0    2407  STARTMETHOD
 45350    59   220     5    59  1024     0      10  public
 45351    59   220    12    59  1024     0     111  ByteBuffer
 45352    59   220    23    59  1024     0     111  compact
 45353    59   220    30    59  1024     0      59  (
 45354    59   220    31    59  1024     0      60  )
 45355    59   220    33    59  1024     0      63  {
 45356    59   222     9    59  1024     0     111  System.arraycopy
 45357    59   222    25    59  1024     0      59  (
 45358    59   222    26    59  1024     0     111  hb
 45359    59   222    28    59  1024     0      66  ,
 45360    59   222    30    59  1024     0     111  ix
 45361    59   222    32    59  1024     0      59  (
 45362    59   222    33    59  1024     0     111  position
 45363    59   222    41    59  1024     0      59  (
 45364    59   222    42    59  1024     0      60  )
 45365    59   222    43    59  1024     0      60  )
 45366    59   222    44    59  1024     0      66  ,
 45367    59   222    46    59  1024     0     111  hb
 45368    59   222    48    59  1024     0      66  ,
 45369    59   222    50    59  1024     0     111  ix
 45370    59   222    52    59  1024     0      59  (
 45371    59   222    53    59  1024     0     112  0
 45372    59   222    54    59  1024     0      60  )
 45373    59   222    55    59  1024     0      66  ,
 45374    59   222    57    59  1024     0     111  remaining
 45375    59   222    66    59  1024     0      59  (
 45376    59   222    67    59  1024     0      60  )
 45377    59   222    68    59  1024     0      60  )
 45378    59   222    69    59  1024     0     102  ;
 45379    59   223     9    59  1024     1     111  position
 45380    59   223    17    59  1024     1      59  (
 45381    59   223    18    59  1024     1     111  remaining
 45382    59   223    27    59  1024     1      59  (
 45383    59   223    28    59  1024     1      60  )
 45384    59   223    29    59  1024     1      60  )
 45385    59   223    30    59  1024     1     102  ;
 45386    59   224     9    59  1024     1     111  limit
 45387    59   224    14    59  1024     1      59  (
 45388    59   224    15    59  1024     1     111  capacity
 45389    59   224    23    59  1024     1      59  (
 45390    59   224    24    59  1024     1      60  )
 45391    59   224    25    59  1024     1      60  )
 45392    59   224    26    59  1024     1     102  ;
 45393    59   225     9    59  1024     0     111  clearMark
 45394    59   225    18    59  1024     0      59  (
 45395    59   225    19    59  1024     0      60  )
 45396    59   225    20    59  1024     0     102  ;
 45397    59   226     9    59  1024     0      19  return
 45398    59   226    16    59  1024     0      44  this
 45399    59   226    20    59  1024     0     102  ;
 45400    59   230     5    59  1024     0      64  }
 45401    59   230     5    59  1024     0    2408  ENDMETHOD
 45402    59   230     5    59  1025     0    2409  STARTMETHOD
 45403    59   236     5    59  1025     0       9  byte
 45404    59   236    10    59  1025     0     111  _get
 45405    59   236    14    59  1025     0      59  (
 45406    59   236    15    59  1025     0      36  int
 45407    59   236    19    59  1025     0     111  i
 45408    59   236    20    59  1025     0      60  )
 45409    59   236    22    59  1025     0      63  {
 45410    59   237     9    59  1025     0      19  return
 45411    59   237    16    59  1025     0     111  hb
 45412    59   237    18    59  1025     0      61  [
 45413    59   237    19    59  1025     0     111  i
 45414    59   237    20    59  1025     0      62  ]
 45415    59   237    21    59  1025     0     102  ;
 45416    59   238     5    59  1025     0      64  }
 45417    59   238     5    59  1025     0    2410  ENDMETHOD
 45418    59   238     5    59  1026     0    2411  STARTMETHOD
 45419    59   240     5    59  1026     0      50  void
 45420    59   240    10    59  1026     0     111  _put
 45421    59   240    14    59  1026     0      59  (
 45422    59   240    15    59  1026     0      36  int
 45423    59   240    19    59  1026     0     111  i
 45424    59   240    20    59  1026     0      66  ,
 45425    59   240    22    59  1026     0       9  byte
 45426    59   240    27    59  1026     0     111  b
 45427    59   240    28    59  1026     0      60  )
 45428    59   240    30    59  1026     0      63  {
 45429    59   242     9    59  1026     0     111  hb
 45430    59   242    11    59  1026     0      61  [
 45431    59   242    12    59  1026     0     111  i
 45432    59   242    13    59  1026     0      62  ]
 45433    59   242    15    59  1026     0      67  =
 45434    59   242    17    59  1026     0     111  b
 45435    59   242    18    59  1026     0     102  ;
 45436    59   246     5    59  1026     0      64  }
 45437    59   246     5    59  1026     0    2412  ENDMETHOD
 45438    59   246     5    59  1027     0    2413  STARTMETHOD
 45439    59   252     5    59  1027     0      10  public
 45440    59   252    12    59  1027     0      40  char
 45441    59   252    17    59  1027     0     111  getChar
 45442    59   252    24    59  1027     0      59  (
 45443    59   252    25    59  1027     0      60  )
 45444    59   252    27    59  1027     0      63  {
 45445    59   253     9    59  1027     0      19  return
 45446    59   253    16    59  1027     0     111  Bits.getChar
 45447    59   253    28    59  1027     0      59  (
 45448    59   253    29    59  1027     0      44  this
 45449    59   253    33    59  1027     0      66  ,
 45450    59   253    35    59  1027     0     111  ix
 45451    59   253    37    59  1027     0      59  (
 45452    59   253    38    59  1027     0     111  nextGetIndex
 45453    59   253    50    59  1027     0      59  (
 45454    59   253    51    59  1027     0     112  2
 45455    59   253    52    59  1027     0      60  )
 45456    59   253    53    59  1027     0      60  )
 45457    59   253    54    59  1027     0      66  ,
 45458    59   253    56    59  1027     0     111  bigEndian
 45459    59   253    65    59  1027     0      60  )
 45460    59   253    66    59  1027     0     102  ;
 45461    59   254     5    59  1027     0      64  }
 45462    59   254     5    59  1027     0    2414  ENDMETHOD
 45463    59   254     5    59  1028     0    2415  STARTMETHOD
 45464    59   256     5    59  1028     0      10  public
 45465    59   256    12    59  1028     0      40  char
 45466    59   256    17    59  1028     0     111  getChar
 45467    59   256    24    59  1028     0      59  (
 45468    59   256    25    59  1028     0      36  int
 45469    59   256    29    59  1028     0     111  i
 45470    59   256    30    59  1028     0      60  )
 45471    59   256    32    59  1028     0      63  {
 45472    59   257     9    59  1028     0      19  return
 45473    59   257    16    59  1028     0     111  Bits.getChar
 45474    59   257    28    59  1028     0      59  (
 45475    59   257    29    59  1028     0      44  this
 45476    59   257    33    59  1028     0      66  ,
 45477    59   257    35    59  1028     0     111  ix
 45478    59   257    37    59  1028     0      59  (
 45479    59   257    38    59  1028     0     111  checkIndex
 45480    59   257    48    59  1028     0      59  (
 45481    59   257    49    59  1028     0     111  i
 45482    59   257    50    59  1028     0      66  ,
 45483    59   257    52    59  1028     0     112  2
 45484    59   257    53    59  1028     0      60  )
 45485    59   257    54    59  1028     0      60  )
 45486    59   257    55    59  1028     0      66  ,
 45487    59   257    57    59  1028     0     111  bigEndian
 45488    59   257    66    59  1028     0      60  )
 45489    59   257    67    59  1028     0     102  ;
 45490    59   258     5    59  1028     0      64  }
 45491    59   258     5    59  1028     0    2416  ENDMETHOD
 45492    59   258     5    59  1029     0    2417  STARTMETHOD
 45493    59   262     5    59  1029     0      10  public
 45494    59   262    12    59  1029     0     111  ByteBuffer
 45495    59   262    23    59  1029     0     111  putChar
 45496    59   262    30    59  1029     0      59  (
 45497    59   262    31    59  1029     0      40  char
 45498    59   262    36    59  1029     0     111  x
 45499    59   262    37    59  1029     0      60  )
 45500    59   262    39    59  1029     0      63  {
 45501    59   264     9    59  1029     0     111  Bits.putChar
 45502    59   264    21    59  1029     0      59  (
 45503    59   264    22    59  1029     0      44  this
 45504    59   264    26    59  1029     0      66  ,
 45505    59   264    28    59  1029     0     111  ix
 45506    59   264    30    59  1029     0      59  (
 45507    59   264    31    59  1029     0     111  nextPutIndex
 45508    59   264    43    59  1029     0      59  (
 45509    59   264    44    59  1029     0     112  2
 45510    59   264    45    59  1029     0      60  )
 45511    59   264    46    59  1029     0      60  )
 45512    59   264    47    59  1029     0      66  ,
 45513    59   264    49    59  1029     0     111  x
 45514    59   264    50    59  1029     0      66  ,
 45515    59   264    52    59  1029     0     111  bigEndian
 45516    59   264    61    59  1029     0      60  )
 45517    59   264    62    59  1029     0     102  ;
 45518    59   265     9    59  1029     0      19  return
 45519    59   265    16    59  1029     0      44  this
 45520    59   265    20    59  1029     0     102  ;
 45521    59   269     5    59  1029     0      64  }
 45522    59   269     5    59  1029     0    2418  ENDMETHOD
 45523    59   269     5    59  1030     0    2419  STARTMETHOD
 45524    59   271     5    59  1030     0      10  public
 45525    59   271    12    59  1030     0     111  ByteBuffer
 45526    59   271    23    59  1030     0     111  putChar
 45527    59   271    30    59  1030     0      59  (
 45528    59   271    31    59  1030     0      36  int
 45529    59   271    35    59  1030     0     111  i
 45530    59   271    36    59  1030     0      66  ,
 45531    59   271    38    59  1030     0      40  char
 45532    59   271    43    59  1030     0     111  x
 45533    59   271    44    59  1030     0      60  )
 45534    59   271    46    59  1030     0      63  {
 45535    59   273     9    59  1030     0     111  Bits.putChar
 45536    59   273    21    59  1030     0      59  (
 45537    59   273    22    59  1030     0      44  this
 45538    59   273    26    59  1030     0      66  ,
 45539    59   273    28    59  1030     0     111  ix
 45540    59   273    30    59  1030     0      59  (
 45541    59   273    31    59  1030     0     111  checkIndex
 45542    59   273    41    59  1030     0      59  (
 45543    59   273    42    59  1030     0     111  i
 45544    59   273    43    59  1030     0      66  ,
 45545    59   273    45    59  1030     0     112  2
 45546    59   273    46    59  1030     0      60  )
 45547    59   273    47    59  1030     0      60  )
 45548    59   273    48    59  1030     0      66  ,
 45549    59   273    50    59  1030     0     111  x
 45550    59   273    51    59  1030     0      66  ,
 45551    59   273    53    59  1030     0     111  bigEndian
 45552    59   273    62    59  1030     0      60  )
 45553    59   273    63    59  1030     0     102  ;
 45554    59   274     9    59  1030     0      19  return
 45555    59   274    16    59  1030     0      44  this
 45556    59   274    20    59  1030     0     102  ;
 45557    59   278     5    59  1030     0      64  }
 45558    59   278     5    59  1030     0    2420  ENDMETHOD
 45559    59   278     5    59  1031     0    2421  STARTMETHOD
 45560    59   280     5    59  1031     0      10  public
 45561    59   280    12    59  1031     0     111  CharBuffer
 45562    59   280    23    59  1031     0     111  asCharBuffer
 45563    59   280    35    59  1031     0      59  (
 45564    59   280    36    59  1031     0      60  )
 45565    59   280    38    59  1031     0      63  {
 45566    59   281     9    59  1031     0      36  int
 45567    59   281    13    59  1031     0     111  size
 45568    59   281    18    59  1031     0      67  =
 45569    59   281    20    59  1031     0     111  this.remaining
 45570    59   281    34    59  1031     0      59  (
 45571    59   281    35    59  1031     0      60  )
 45572    59   281    37    59  1031     0      84  >>
 45573    59   281    40    59  1031     0     112  1
 45574    59   281    41    59  1031     0     102  ;
 45575    59   282     9    59  1031     0      36  int
 45576    59   282    13    59  1031     0     111  off
 45577    59   282    17    59  1031     0      67  =
 45578    59   282    19    59  1031     0     111  offset
 45579    59   282    26    59  1031     0      74  +
 45580    59   282    28    59  1031     0     111  position
 45581    59   282    36    59  1031     0      59  (
 45582    59   282    37    59  1031     0      60  )
 45583    59   282    38    59  1031     0     102  ;
 45584    59   283     9    59  1031     0      19  return
 45585    59   283    16    59  1031     0      59  (
 45586    59   283    17    59  1031     0     111  bigEndian
 45587    59   284    17    59  1031     0      58  ?
 45588    59   284    19    59  1031     0      59  (
 45589    59   284    20    59  1031     0     111  CharBuffer
 45590    59   284    30    59  1031     0      60  )
 45591    59   284    31    59  1031     0      59  (
 45592    59   284    32    59  1031     0      15  new
 45593    59   284    36    59  1031     0     111  ByteBufferAsCharBufferB
 45594    59   284    59    59  1031     0      59  (
 45595    59   284    60    59  1031     0      44  this
 45596    59   284    64    59  1031     0      66  ,
 45597    59   285    64    59  1031     0      77  -
 45598    59   285    65    59  1031     0     112  1
 45599    59   285    66    59  1031     0      66  ,
 45600    59   286    64    59  1031     0     112  0
 45601    59   286    65    59  1031     0      66  ,
 45602    59   287    64    59  1031     1     111  size
 45603    59   287    68    59  1031     1      66  ,
 45604    59   288    64    59  1031     1     111  size
 45605    59   288    68    59  1031     1      66  ,
 45606    59   289    64    59  1031     0     111  off
 45607    59   289    67    59  1031     0      60  )
 45608    59   289    68    59  1031     0      60  )
 45609    59   290    17    59  1031     0      65  :
 45610    59   290    19    59  1031     0      59  (
 45611    59   290    20    59  1031     0     111  CharBuffer
 45612    59   290    30    59  1031     0      60  )
 45613    59   290    31    59  1031     0      59  (
 45614    59   290    32    59  1031     0      15  new
 45615    59   290    36    59  1031     0     111  ByteBufferAsCharBufferL
 45616    59   290    59    59  1031     0      59  (
 45617    59   290    60    59  1031     0      44  this
 45618    59   290    64    59  1031     0      66  ,
 45619    59   291    64    59  1031     0      77  -
 45620    59   291    65    59  1031     0     112  1
 45621    59   291    66    59  1031     0      66  ,
 45622    59   292    64    59  1031     0     112  0
 45623    59   292    65    59  1031     0      66  ,
 45624    59   293    64    59  1031     1     111  size
 45625    59   293    68    59  1031     1      66  ,
 45626    59   294    64    59  1031     1     111  size
 45627    59   294    68    59  1031     1      66  ,
 45628    59   295    64    59  1031     0     111  off
 45629    59   295    67    59  1031     0      60  )
 45630    59   295    68    59  1031     0      60  )
 45631    59   295    69    59  1031     0      60  )
 45632    59   295    70    59  1031     0     102  ;
 45633    59   296     5    59  1031     0      64  }
 45634    59   296     5    59  1031     0    2422  ENDMETHOD
 45635    59   296     5    59  1032     0    2423  STARTMETHOD
 45636    59   303     5    59  1032     0      10  public
 45637    59   303    12    59  1032     0      12  short
 45638    59   303    18    59  1032     0     111  getShort
 45639    59   303    26    59  1032     0      59  (
 45640    59   303    27    59  1032     0      60  )
 45641    59   303    29    59  1032     0      63  {
 45642    59   304     9    59  1032     0      19  return
 45643    59   304    16    59  1032     0     111  Bits.getShort
 45644    59   304    29    59  1032     0      59  (
 45645    59   304    30    59  1032     0      44  this
 45646    59   304    34    59  1032     0      66  ,
 45647    59   304    36    59  1032     0     111  ix
 45648    59   304    38    59  1032     0      59  (
 45649    59   304    39    59  1032     0     111  nextGetIndex
 45650    59   304    51    59  1032     0      59  (
 45651    59   304    52    59  1032     0     112  2
 45652    59   304    53    59  1032     0      60  )
 45653    59   304    54    59  1032     0      60  )
 45654    59   304    55    59  1032     0      66  ,
 45655    59   304    57    59  1032     0     111  bigEndian
 45656    59   304    66    59  1032     0      60  )
 45657    59   304    67    59  1032     0     102  ;
 45658    59   305     5    59  1032     0      64  }
 45659    59   305     5    59  1032     0    2424  ENDMETHOD
 45660    59   305     5    59  1033     0    2425  STARTMETHOD
 45661    59   307     5    59  1033     0      10  public
 45662    59   307    12    59  1033     0      12  short
 45663    59   307    18    59  1033     0     111  getShort
 45664    59   307    26    59  1033     0      59  (
 45665    59   307    27    59  1033     0      36  int
 45666    59   307    31    59  1033     0     111  i
 45667    59   307    32    59  1033     0      60  )
 45668    59   307    34    59  1033     0      63  {
 45669    59   308     9    59  1033     0      19  return
 45670    59   308    16    59  1033     0     111  Bits.getShort
 45671    59   308    29    59  1033     0      59  (
 45672    59   308    30    59  1033     0      44  this
 45673    59   308    34    59  1033     0      66  ,
 45674    59   308    36    59  1033     0     111  ix
 45675    59   308    38    59  1033     0      59  (
 45676    59   308    39    59  1033     0     111  checkIndex
 45677    59   308    49    59  1033     0      59  (
 45678    59   308    50    59  1033     0     111  i
 45679    59   308    51    59  1033     0      66  ,
 45680    59   308    53    59  1033     0     112  2
 45681    59   308    54    59  1033     0      60  )
 45682    59   308    55    59  1033     0      60  )
 45683    59   308    56    59  1033     0      66  ,
 45684    59   308    58    59  1033     0     111  bigEndian
 45685    59   308    67    59  1033     0      60  )
 45686    59   308    68    59  1033     0     102  ;
 45687    59   309     5    59  1033     0      64  }
 45688    59   309     5    59  1033     0    2426  ENDMETHOD
 45689    59   309     5    59  1034     0    2427  STARTMETHOD
 45690    59   313     5    59  1034     0      10  public
 45691    59   313    12    59  1034     0     111  ByteBuffer
 45692    59   313    23    59  1034     0     111  putShort
 45693    59   313    31    59  1034     0      59  (
 45694    59   313    32    59  1034     0      12  short
 45695    59   313    38    59  1034     0     111  x
 45696    59   313    39    59  1034     0      60  )
 45697    59   313    41    59  1034     0      63  {
 45698    59   315     9    59  1034     0     111  Bits.putShort
 45699    59   315    22    59  1034     0      59  (
 45700    59   315    23    59  1034     0      44  this
 45701    59   315    27    59  1034     0      66  ,
 45702    59   315    29    59  1034     0     111  ix
 45703    59   315    31    59  1034     0      59  (
 45704    59   315    32    59  1034     0     111  nextPutIndex
 45705    59   315    44    59  1034     0      59  (
 45706    59   315    45    59  1034     0     112  2
 45707    59   315    46    59  1034     0      60  )
 45708    59   315    47    59  1034     0      60  )
 45709    59   315    48    59  1034     0      66  ,
 45710    59   315    50    59  1034     0     111  x
 45711    59   315    51    59  1034     0      66  ,
 45712    59   315    53    59  1034     0     111  bigEndian
 45713    59   315    62    59  1034     0      60  )
 45714    59   315    63    59  1034     0     102  ;
 45715    59   316     9    59  1034     0      19  return
 45716    59   316    16    59  1034     0      44  this
 45717    59   316    20    59  1034     0     102  ;
 45718    59   320     5    59  1034     0      64  }
 45719    59   320     5    59  1034     0    2428  ENDMETHOD
 45720    59   320     5    59  1035     0    2429  STARTMETHOD
 45721    59   322     5    59  1035     0      10  public
 45722    59   322    12    59  1035     0     111  ByteBuffer
 45723    59   322    23    59  1035     0     111  putShort
 45724    59   322    31    59  1035     0      59  (
 45725    59   322    32    59  1035     0      36  int
 45726    59   322    36    59  1035     0     111  i
 45727    59   322    37    59  1035     0      66  ,
 45728    59   322    39    59  1035     0      12  short
 45729    59   322    45    59  1035     0     111  x
 45730    59   322    46    59  1035     0      60  )
 45731    59   322    48    59  1035     0      63  {
 45732    59   324     9    59  1035     0     111  Bits.putShort
 45733    59   324    22    59  1035     0      59  (
 45734    59   324    23    59  1035     0      44  this
 45735    59   324    27    59  1035     0      66  ,
 45736    59   324    29    59  1035     0     111  ix
 45737    59   324    31    59  1035     0      59  (
 45738    59   324    32    59  1035     0     111  checkIndex
 45739    59   324    42    59  1035     0      59  (
 45740    59   324    43    59  1035     0     111  i
 45741    59   324    44    59  1035     0      66  ,
 45742    59   324    46    59  1035     0     112  2
 45743    59   324    47    59  1035     0      60  )
 45744    59   324    48    59  1035     0      60  )
 45745    59   324    49    59  1035     0      66  ,
 45746    59   324    51    59  1035     0     111  x
 45747    59   324    52    59  1035     0      66  ,
 45748    59   324    54    59  1035     0     111  bigEndian
 45749    59   324    63    59  1035     0      60  )
 45750    59   324    64    59  1035     0     102  ;
 45751    59   325     9    59  1035     0      19  return
 45752    59   325    16    59  1035     0      44  this
 45753    59   325    20    59  1035     0     102  ;
 45754    59   329     5    59  1035     0      64  }
 45755    59   329     5    59  1035     0    2430  ENDMETHOD
 45756    59   329     5    59  1036     0    2431  STARTMETHOD
 45757    59   331     5    59  1036     0      10  public
 45758    59   331    12    59  1036     0     111  ShortBuffer
 45759    59   331    24    59  1036     0     111  asShortBuffer
 45760    59   331    37    59  1036     0      59  (
 45761    59   331    38    59  1036     0      60  )
 45762    59   331    40    59  1036     0      63  {
 45763    59   332     9    59  1036     0      36  int
 45764    59   332    13    59  1036     0     111  size
 45765    59   332    18    59  1036     0      67  =
 45766    59   332    20    59  1036     0     111  this.remaining
 45767    59   332    34    59  1036     0      59  (
 45768    59   332    35    59  1036     0      60  )
 45769    59   332    37    59  1036     0      84  >>
 45770    59   332    40    59  1036     0     112  1
 45771    59   332    41    59  1036     0     102  ;
 45772    59   333     9    59  1036     0      36  int
 45773    59   333    13    59  1036     0     111  off
 45774    59   333    17    59  1036     0      67  =
 45775    59   333    19    59  1036     0     111  offset
 45776    59   333    26    59  1036     0      74  +
 45777    59   333    28    59  1036     0     111  position
 45778    59   333    36    59  1036     0      59  (
 45779    59   333    37    59  1036     0      60  )
 45780    59   333    38    59  1036     0     102  ;
 45781    59   334     9    59  1036     0      19  return
 45782    59   334    16    59  1036     0      59  (
 45783    59   334    17    59  1036     0     111  bigEndian
 45784    59   335    17    59  1036     0      58  ?
 45785    59   335    19    59  1036     0      59  (
 45786    59   335    20    59  1036     0     111  ShortBuffer
 45787    59   335    31    59  1036     0      60  )
 45788    59   335    32    59  1036     0      59  (
 45789    59   335    33    59  1036     0      15  new
 45790    59   335    37    59  1036     0     111  ByteBufferAsShortBufferB
 45791    59   335    61    59  1036     0      59  (
 45792    59   335    62    59  1036     0      44  this
 45793    59   335    66    59  1036     0      66  ,
 45794    59   336    66    59  1036     0      77  -
 45795    59   336    67    59  1036     0     112  1
 45796    59   336    68    59  1036     0      66  ,
 45797    59   337    66    59  1036     0     112  0
 45798    59   337    67    59  1036     0      66  ,
 45799    59   338    66    59  1036     1     111  size
 45800    59   338    70    59  1036     1      66  ,
 45801    59   339    66    59  1036     1     111  size
 45802    59   339    70    59  1036     1      66  ,
 45803    59   340    66    59  1036     0     111  off
 45804    59   340    69    59  1036     0      60  )
 45805    59   340    70    59  1036     0      60  )
 45806    59   341    17    59  1036     0      65  :
 45807    59   341    19    59  1036     0      59  (
 45808    59   341    20    59  1036     0     111  ShortBuffer
 45809    59   341    31    59  1036     0      60  )
 45810    59   341    32    59  1036     0      59  (
 45811    59   341    33    59  1036     0      15  new
 45812    59   341    37    59  1036     0     111  ByteBufferAsShortBufferL
 45813    59   341    61    59  1036     0      59  (
 45814    59   341    62    59  1036     0      44  this
 45815    59   341    66    59  1036     0      66  ,
 45816    59   342    66    59  1036     0      77  -
 45817    59   342    67    59  1036     0     112  1
 45818    59   342    68    59  1036     0      66  ,
 45819    59   343    66    59  1036     0     112  0
 45820    59   343    67    59  1036     0      66  ,
 45821    59   344    66    59  1036     1     111  size
 45822    59   344    70    59  1036     1      66  ,
 45823    59   345    66    59  1036     1     111  size
 45824    59   345    70    59  1036     1      66  ,
 45825    59   346    66    59  1036     0     111  off
 45826    59   346    69    59  1036     0      60  )
 45827    59   346    70    59  1036     0      60  )
 45828    59   346    71    59  1036     0      60  )
 45829    59   346    72    59  1036     0     102  ;
 45830    59   347     5    59  1036     0      64  }
 45831    59   347     5    59  1036     0    2432  ENDMETHOD
 45832    59   347     5    59  1037     0    2433  STARTMETHOD
 45833    59   354     5    59  1037     0      10  public
 45834    59   354    12    59  1037     0      36  int
 45835    59   354    16    59  1037     0     111  getInt
 45836    59   354    22    59  1037     0      59  (
 45837    59   354    23    59  1037     0      60  )
 45838    59   354    25    59  1037     0      63  {
 45839    59   355     9    59  1037     0      19  return
 45840    59   355    16    59  1037     0     111  Bits.getInt
 45841    59   355    27    59  1037     0      59  (
 45842    59   355    28    59  1037     0      44  this
 45843    59   355    32    59  1037     0      66  ,
 45844    59   355    34    59  1037     0     111  ix
 45845    59   355    36    59  1037     0      59  (
 45846    59   355    37    59  1037     0     111  nextGetIndex
 45847    59   355    49    59  1037     0      59  (
 45848    59   355    50    59  1037     0     112  4
 45849    59   355    51    59  1037     0      60  )
 45850    59   355    52    59  1037     0      60  )
 45851    59   355    53    59  1037     0      66  ,
 45852    59   355    55    59  1037     0     111  bigEndian
 45853    59   355    64    59  1037     0      60  )
 45854    59   355    65    59  1037     0     102  ;
 45855    59   356     5    59  1037     0      64  }
 45856    59   356     5    59  1037     0    2434  ENDMETHOD
 45857    59   356     5    59  1038     0    2435  STARTMETHOD
 45858    59   358     5    59  1038     0      10  public
 45859    59   358    12    59  1038     0      36  int
 45860    59   358    16    59  1038     0     111  getInt
 45861    59   358    22    59  1038     0      59  (
 45862    59   358    23    59  1038     0      36  int
 45863    59   358    27    59  1038     0     111  i
 45864    59   358    28    59  1038     0      60  )
 45865    59   358    30    59  1038     0      63  {
 45866    59   359     9    59  1038     0      19  return
 45867    59   359    16    59  1038     0     111  Bits.getInt
 45868    59   359    27    59  1038     0      59  (
 45869    59   359    28    59  1038     0      44  this
 45870    59   359    32    59  1038     0      66  ,
 45871    59   359    34    59  1038     0     111  ix
 45872    59   359    36    59  1038     0      59  (
 45873    59   359    37    59  1038     0     111  checkIndex
 45874    59   359    47    59  1038     0      59  (
 45875    59   359    48    59  1038     0     111  i
 45876    59   359    49    59  1038     0      66  ,
 45877    59   359    51    59  1038     0     112  4
 45878    59   359    52    59  1038     0      60  )
 45879    59   359    53    59  1038     0      60  )
 45880    59   359    54    59  1038     0      66  ,
 45881    59   359    56    59  1038     0     111  bigEndian
 45882    59   359    65    59  1038     0      60  )
 45883    59   359    66    59  1038     0     102  ;
 45884    59   360     5    59  1038     0      64  }
 45885    59   360     5    59  1038     0    2436  ENDMETHOD
 45886    59   360     5    59  1039     0    2437  STARTMETHOD
 45887    59   364     5    59  1039     0      10  public
 45888    59   364    12    59  1039     0     111  ByteBuffer
 45889    59   364    23    59  1039     0     111  putInt
 45890    59   364    29    59  1039     0      59  (
 45891    59   364    30    59  1039     0      36  int
 45892    59   364    34    59  1039     0     111  x
 45893    59   364    35    59  1039     0      60  )
 45894    59   364    37    59  1039     0      63  {
 45895    59   366     9    59  1039     0     111  Bits.putInt
 45896    59   366    20    59  1039     0      59  (
 45897    59   366    21    59  1039     0      44  this
 45898    59   366    25    59  1039     0      66  ,
 45899    59   366    27    59  1039     0     111  ix
 45900    59   366    29    59  1039     0      59  (
 45901    59   366    30    59  1039     0     111  nextPutIndex
 45902    59   366    42    59  1039     0      59  (
 45903    59   366    43    59  1039     0     112  4
 45904    59   366    44    59  1039     0      60  )
 45905    59   366    45    59  1039     0      60  )
 45906    59   366    46    59  1039     0      66  ,
 45907    59   366    48    59  1039     0     111  x
 45908    59   366    49    59  1039     0      66  ,
 45909    59   366    51    59  1039     0     111  bigEndian
 45910    59   366    60    59  1039     0      60  )
 45911    59   366    61    59  1039     0     102  ;
 45912    59   367     9    59  1039     0      19  return
 45913    59   367    16    59  1039     0      44  this
 45914    59   367    20    59  1039     0     102  ;
 45915    59   371     5    59  1039     0      64  }
 45916    59   371     5    59  1039     0    2438  ENDMETHOD
 45917    59   371     5    59  1040     0    2439  STARTMETHOD
 45918    59   373     5    59  1040     0      10  public
 45919    59   373    12    59  1040     0     111  ByteBuffer
 45920    59   373    23    59  1040     0     111  putInt
 45921    59   373    29    59  1040     0      59  (
 45922    59   373    30    59  1040     0      36  int
 45923    59   373    34    59  1040     0     111  i
 45924    59   373    35    59  1040     0      66  ,
 45925    59   373    37    59  1040     0      36  int
 45926    59   373    41    59  1040     0     111  x
 45927    59   373    42    59  1040     0      60  )
 45928    59   373    44    59  1040     0      63  {
 45929    59   375     9    59  1040     0     111  Bits.putInt
 45930    59   375    20    59  1040     0      59  (
 45931    59   375    21    59  1040     0      44  this
 45932    59   375    25    59  1040     0      66  ,
 45933    59   375    27    59  1040     0     111  ix
 45934    59   375    29    59  1040     0      59  (
 45935    59   375    30    59  1040     0     111  checkIndex
 45936    59   375    40    59  1040     0      59  (
 45937    59   375    41    59  1040     0     111  i
 45938    59   375    42    59  1040     0      66  ,
 45939    59   375    44    59  1040     0     112  4
 45940    59   375    45    59  1040     0      60  )
 45941    59   375    46    59  1040     0      60  )
 45942    59   375    47    59  1040     0      66  ,
 45943    59   375    49    59  1040     0     111  x
 45944    59   375    50    59  1040     0      66  ,
 45945    59   375    52    59  1040     0     111  bigEndian
 45946    59   375    61    59  1040     0      60  )
 45947    59   375    62    59  1040     0     102  ;
 45948    59   376     9    59  1040     0      19  return
 45949    59   376    16    59  1040     0      44  this
 45950    59   376    20    59  1040     0     102  ;
 45951    59   380     5    59  1040     0      64  }
 45952    59   380     5    59  1040     0    2440  ENDMETHOD
 45953    59   380     5    59  1041     0    2441  STARTMETHOD
 45954    59   382     5    59  1041     0      10  public
 45955    59   382    12    59  1041     0     111  IntBuffer
 45956    59   382    22    59  1041     0     111  asIntBuffer
 45957    59   382    33    59  1041     0      59  (
 45958    59   382    34    59  1041     0      60  )
 45959    59   382    36    59  1041     0      63  {
 45960    59   383     9    59  1041     0      36  int
 45961    59   383    13    59  1041     0     111  size
 45962    59   383    18    59  1041     0      67  =
 45963    59   383    20    59  1041     0     111  this.remaining
 45964    59   383    34    59  1041     0      59  (
 45965    59   383    35    59  1041     0      60  )
 45966    59   383    37    59  1041     0      84  >>
 45967    59   383    40    59  1041     0     112  2
 45968    59   383    41    59  1041     0     102  ;
 45969    59   384     9    59  1041     0      36  int
 45970    59   384    13    59  1041     0     111  off
 45971    59   384    17    59  1041     0      67  =
 45972    59   384    19    59  1041     0     111  offset
 45973    59   384    26    59  1041     0      74  +
 45974    59   384    28    59  1041     0     111  position
 45975    59   384    36    59  1041     0      59  (
 45976    59   384    37    59  1041     0      60  )
 45977    59   384    38    59  1041     0     102  ;
 45978    59   385     9    59  1041     0      19  return
 45979    59   385    16    59  1041     0      59  (
 45980    59   385    17    59  1041     0     111  bigEndian
 45981    59   386    17    59  1041     0      58  ?
 45982    59   386    19    59  1041     0      59  (
 45983    59   386    20    59  1041     0     111  IntBuffer
 45984    59   386    29    59  1041     0      60  )
 45985    59   386    30    59  1041     0      59  (
 45986    59   386    31    59  1041     0      15  new
 45987    59   386    35    59  1041     0     111  ByteBufferAsIntBufferB
 45988    59   386    57    59  1041     0      59  (
 45989    59   386    58    59  1041     0      44  this
 45990    59   386    62    59  1041     0      66  ,
 45991    59   387    62    59  1041     0      77  -
 45992    59   387    63    59  1041     0     112  1
 45993    59   387    64    59  1041     0      66  ,
 45994    59   388    62    59  1041     0     112  0
 45995    59   388    63    59  1041     0      66  ,
 45996    59   389    62    59  1041     1     111  size
 45997    59   389    66    59  1041     1      66  ,
 45998    59   390    62    59  1041     1     111  size
 45999    59   390    66    59  1041     1      66  ,
 46000    59   391    62    59  1041     0     111  off
 46001    59   391    65    59  1041     0      60  )
 46002    59   391    66    59  1041     0      60  )
 46003    59   392    17    59  1041     0      65  :
 46004    59   392    19    59  1041     0      59  (
 46005    59   392    20    59  1041     0     111  IntBuffer
 46006    59   392    29    59  1041     0      60  )
 46007    59   392    30    59  1041     0      59  (
 46008    59   392    31    59  1041     0      15  new
 46009    59   392    35    59  1041     0     111  ByteBufferAsIntBufferL
 46010    59   392    57    59  1041     0      59  (
 46011    59   392    58    59  1041     0      44  this
 46012    59   392    62    59  1041     0      66  ,
 46013    59   393    62    59  1041     0      77  -
 46014    59   393    63    59  1041     0     112  1
 46015    59   393    64    59  1041     0      66  ,
 46016    59   394    62    59  1041     0     112  0
 46017    59   394    63    59  1041     0      66  ,
 46018    59   395    62    59  1041     1     111  size
 46019    59   395    66    59  1041     1      66  ,
 46020    59   396    62    59  1041     1     111  size
 46021    59   396    66    59  1041     1      66  ,
 46022    59   397    62    59  1041     0     111  off
 46023    59   397    65    59  1041     0      60  )
 46024    59   397    66    59  1041     0      60  )
 46025    59   397    67    59  1041     0      60  )
 46026    59   397    68    59  1041     0     102  ;
 46027    59   398     5    59  1041     0      64  }
 46028    59   398     5    59  1041     0    2442  ENDMETHOD
 46029    59   398     5    59  1042     0    2443  STARTMETHOD
 46030    59   405     5    59  1042     0      10  public
 46031    59   405    12    59  1042     0      53  long
 46032    59   405    17    59  1042     0     111  getLong
 46033    59   405    24    59  1042     0      59  (
 46034    59   405    25    59  1042     0      60  )
 46035    59   405    27    59  1042     0      63  {
 46036    59   406     9    59  1042     0      19  return
 46037    59   406    16    59  1042     0     111  Bits.getLong
 46038    59   406    28    59  1042     0      59  (
 46039    59   406    29    59  1042     0      44  this
 46040    59   406    33    59  1042     0      66  ,
 46041    59   406    35    59  1042     0     111  ix
 46042    59   406    37    59  1042     0      59  (
 46043    59   406    38    59  1042     0     111  nextGetIndex
 46044    59   406    50    59  1042     0      59  (
 46045    59   406    51    59  1042     0     112  8
 46046    59   406    52    59  1042     0      60  )
 46047    59   406    53    59  1042     0      60  )
 46048    59   406    54    59  1042     0      66  ,
 46049    59   406    56    59  1042     0     111  bigEndian
 46050    59   406    65    59  1042     0      60  )
 46051    59   406    66    59  1042     0     102  ;
 46052    59   407     5    59  1042     0      64  }
 46053    59   407     5    59  1042     0    2444  ENDMETHOD
 46054    59   407     5    59  1043     0    2445  STARTMETHOD
 46055    59   409     5    59  1043     0      10  public
 46056    59   409    12    59  1043     0      53  long
 46057    59   409    17    59  1043     0     111  getLong
 46058    59   409    24    59  1043     0      59  (
 46059    59   409    25    59  1043     0      36  int
 46060    59   409    29    59  1043     0     111  i
 46061    59   409    30    59  1043     0      60  )
 46062    59   409    32    59  1043     0      63  {
 46063    59   410     9    59  1043     0      19  return
 46064    59   410    16    59  1043     0     111  Bits.getLong
 46065    59   410    28    59  1043     0      59  (
 46066    59   410    29    59  1043     0      44  this
 46067    59   410    33    59  1043     0      66  ,
 46068    59   410    35    59  1043     0     111  ix
 46069    59   410    37    59  1043     0      59  (
 46070    59   410    38    59  1043     0     111  checkIndex
 46071    59   410    48    59  1043     0      59  (
 46072    59   410    49    59  1043     0     111  i
 46073    59   410    50    59  1043     0      66  ,
 46074    59   410    52    59  1043     0     112  8
 46075    59   410    53    59  1043     0      60  )
 46076    59   410    54    59  1043     0      60  )
 46077    59   410    55    59  1043     0      66  ,
 46078    59   410    57    59  1043     0     111  bigEndian
 46079    59   410    66    59  1043     0      60  )
 46080    59   410    67    59  1043     0     102  ;
 46081    59   411     5    59  1043     0      64  }
 46082    59   411     5    59  1043     0    2446  ENDMETHOD
 46083    59   411     5    59  1044     0    2447  STARTMETHOD
 46084    59   415     5    59  1044     0      10  public
 46085    59   415    12    59  1044     0     111  ByteBuffer
 46086    59   415    23    59  1044     0     111  putLong
 46087    59   415    30    59  1044     0      59  (
 46088    59   415    31    59  1044     0      53  long
 46089    59   415    36    59  1044     0     111  x
 46090    59   415    37    59  1044     0      60  )
 46091    59   415    39    59  1044     0      63  {
 46092    59   417     9    59  1044     0     111  Bits.putLong
 46093    59   417    21    59  1044     0      59  (
 46094    59   417    22    59  1044     0      44  this
 46095    59   417    26    59  1044     0      66  ,
 46096    59   417    28    59  1044     0     111  ix
 46097    59   417    30    59  1044     0      59  (
 46098    59   417    31    59  1044     0     111  nextPutIndex
 46099    59   417    43    59  1044     0      59  (
 46100    59   417    44    59  1044     0     112  8
 46101    59   417    45    59  1044     0      60  )
 46102    59   417    46    59  1044     0      60  )
 46103    59   417    47    59  1044     0      66  ,
 46104    59   417    49    59  1044     0     111  x
 46105    59   417    50    59  1044     0      66  ,
 46106    59   417    52    59  1044     0     111  bigEndian
 46107    59   417    61    59  1044     0      60  )
 46108    59   417    62    59  1044     0     102  ;
 46109    59   418     9    59  1044     0      19  return
 46110    59   418    16    59  1044     0      44  this
 46111    59   418    20    59  1044     0     102  ;
 46112    59   422     5    59  1044     0      64  }
 46113    59   422     5    59  1044     0    2448  ENDMETHOD
 46114    59   422     5    59  1045     0    2449  STARTMETHOD
 46115    59   424     5    59  1045     0      10  public
 46116    59   424    12    59  1045     0     111  ByteBuffer
 46117    59   424    23    59  1045     0     111  putLong
 46118    59   424    30    59  1045     0      59  (
 46119    59   424    31    59  1045     0      36  int
 46120    59   424    35    59  1045     0     111  i
 46121    59   424    36    59  1045     0      66  ,
 46122    59   424    38    59  1045     0      53  long
 46123    59   424    43    59  1045     0     111  x
 46124    59   424    44    59  1045     0      60  )
 46125    59   424    46    59  1045     0      63  {
 46126    59   426     9    59  1045     0     111  Bits.putLong
 46127    59   426    21    59  1045     0      59  (
 46128    59   426    22    59  1045     0      44  this
 46129    59   426    26    59  1045     0      66  ,
 46130    59   426    28    59  1045     0     111  ix
 46131    59   426    30    59  1045     0      59  (
 46132    59   426    31    59  1045     0     111  checkIndex
 46133    59   426    41    59  1045     0      59  (
 46134    59   426    42    59  1045     0     111  i
 46135    59   426    43    59  1045     0      66  ,
 46136    59   426    45    59  1045     0     112  8
 46137    59   426    46    59  1045     0      60  )
 46138    59   426    47    59  1045     0      60  )
 46139    59   426    48    59  1045     0      66  ,
 46140    59   426    50    59  1045     0     111  x
 46141    59   426    51    59  1045     0      66  ,
 46142    59   426    53    59  1045     0     111  bigEndian
 46143    59   426    62    59  1045     0      60  )
 46144    59   426    63    59  1045     0     102  ;
 46145    59   427     9    59  1045     0      19  return
 46146    59   427    16    59  1045     0      44  this
 46147    59   427    20    59  1045     0     102  ;
 46148    59   431     5    59  1045     0      64  }
 46149    59   431     5    59  1045     0    2450  ENDMETHOD
 46150    59   431     5    59  1046     0    2451  STARTMETHOD
 46151    59   433     5    59  1046     0      10  public
 46152    59   433    12    59  1046     0     111  LongBuffer
 46153    59   433    23    59  1046     0     111  asLongBuffer
 46154    59   433    35    59  1046     0      59  (
 46155    59   433    36    59  1046     0      60  )
 46156    59   433    38    59  1046     0      63  {
 46157    59   434     9    59  1046     0      36  int
 46158    59   434    13    59  1046     0     111  size
 46159    59   434    18    59  1046     0      67  =
 46160    59   434    20    59  1046     0     111  this.remaining
 46161    59   434    34    59  1046     0      59  (
 46162    59   434    35    59  1046     0      60  )
 46163    59   434    37    59  1046     0      84  >>
 46164    59   434    40    59  1046     0     112  3
 46165    59   434    41    59  1046     0     102  ;
 46166    59   435     9    59  1046     0      36  int
 46167    59   435    13    59  1046     0     111  off
 46168    59   435    17    59  1046     0      67  =
 46169    59   435    19    59  1046     0     111  offset
 46170    59   435    26    59  1046     0      74  +
 46171    59   435    28    59  1046     0     111  position
 46172    59   435    36    59  1046     0      59  (
 46173    59   435    37    59  1046     0      60  )
 46174    59   435    38    59  1046     0     102  ;
 46175    59   436     9    59  1046     0      19  return
 46176    59   436    16    59  1046     0      59  (
 46177    59   436    17    59  1046     0     111  bigEndian
 46178    59   437    17    59  1046     0      58  ?
 46179    59   437    19    59  1046     0      59  (
 46180    59   437    20    59  1046     0     111  LongBuffer
 46181    59   437    30    59  1046     0      60  )
 46182    59   437    31    59  1046     0      59  (
 46183    59   437    32    59  1046     0      15  new
 46184    59   437    36    59  1046     0     111  ByteBufferAsLongBufferB
 46185    59   437    59    59  1046     0      59  (
 46186    59   437    60    59  1046     0      44  this
 46187    59   437    64    59  1046     0      66  ,
 46188    59   438    64    59  1046     0      77  -
 46189    59   438    65    59  1046     0     112  1
 46190    59   438    66    59  1046     0      66  ,
 46191    59   439    64    59  1046     0     112  0
 46192    59   439    65    59  1046     0      66  ,
 46193    59   440    64    59  1046     1     111  size
 46194    59   440    68    59  1046     1      66  ,
 46195    59   441    64    59  1046     1     111  size
 46196    59   441    68    59  1046     1      66  ,
 46197    59   442    64    59  1046     0     111  off
 46198    59   442    67    59  1046     0      60  )
 46199    59   442    68    59  1046     0      60  )
 46200    59   443    17    59  1046     0      65  :
 46201    59   443    19    59  1046     0      59  (
 46202    59   443    20    59  1046     0     111  LongBuffer
 46203    59   443    30    59  1046     0      60  )
 46204    59   443    31    59  1046     0      59  (
 46205    59   443    32    59  1046     0      15  new
 46206    59   443    36    59  1046     0     111  ByteBufferAsLongBufferL
 46207    59   443    59    59  1046     0      59  (
 46208    59   443    60    59  1046     0      44  this
 46209    59   443    64    59  1046     0      66  ,
 46210    59   444    64    59  1046     0      77  -
 46211    59   444    65    59  1046     0     112  1
 46212    59   444    66    59  1046     0      66  ,
 46213    59   445    64    59  1046     0     112  0
 46214    59   445    65    59  1046     0      66  ,
 46215    59   446    64    59  1046     1     111  size
 46216    59   446    68    59  1046     1      66  ,
 46217    59   447    64    59  1046     1     111  size
 46218    59   447    68    59  1046     1      66  ,
 46219    59   448    64    59  1046     0     111  off
 46220    59   448    67    59  1046     0      60  )
 46221    59   448    68    59  1046     0      60  )
 46222    59   448    69    59  1046     0      60  )
 46223    59   448    70    59  1046     0     102  ;
 46224    59   449     5    59  1046     0      64  }
 46225    59   449     5    59  1046     0    2452  ENDMETHOD
 46226    59   449     5    59  1047     0    2453  STARTMETHOD
 46227    59   456     5    59  1047     0      10  public
 46228    59   456    12    59  1047     0       4  float
 46229    59   456    18    59  1047     0     111  getFloat
 46230    59   456    26    59  1047     0      59  (
 46231    59   456    27    59  1047     0      60  )
 46232    59   456    29    59  1047     0      63  {
 46233    59   457     9    59  1047     0      19  return
 46234    59   457    16    59  1047     0     111  Bits.getFloat
 46235    59   457    29    59  1047     0      59  (
 46236    59   457    30    59  1047     0      44  this
 46237    59   457    34    59  1047     0      66  ,
 46238    59   457    36    59  1047     0     111  ix
 46239    59   457    38    59  1047     0      59  (
 46240    59   457    39    59  1047     0     111  nextGetIndex
 46241    59   457    51    59  1047     0      59  (
 46242    59   457    52    59  1047     0     112  4
 46243    59   457    53    59  1047     0      60  )
 46244    59   457    54    59  1047     0      60  )
 46245    59   457    55    59  1047     0      66  ,
 46246    59   457    57    59  1047     0     111  bigEndian
 46247    59   457    66    59  1047     0      60  )
 46248    59   457    67    59  1047     0     102  ;
 46249    59   458     5    59  1047     0      64  }
 46250    59   458     5    59  1047     0    2454  ENDMETHOD
 46251    59   458     5    59  1048     0    2455  STARTMETHOD
 46252    59   460     5    59  1048     0      10  public
 46253    59   460    12    59  1048     0       4  float
 46254    59   460    18    59  1048     0     111  getFloat
 46255    59   460    26    59  1048     0      59  (
 46256    59   460    27    59  1048     0      36  int
 46257    59   460    31    59  1048     0     111  i
 46258    59   460    32    59  1048     0      60  )
 46259    59   460    34    59  1048     0      63  {
 46260    59   461     9    59  1048     0      19  return
 46261    59   461    16    59  1048     0     111  Bits.getFloat
 46262    59   461    29    59  1048     0      59  (
 46263    59   461    30    59  1048     0      44  this
 46264    59   461    34    59  1048     0      66  ,
 46265    59   461    36    59  1048     0     111  ix
 46266    59   461    38    59  1048     0      59  (
 46267    59   461    39    59  1048     0     111  checkIndex
 46268    59   461    49    59  1048     0      59  (
 46269    59   461    50    59  1048     0     111  i
 46270    59   461    51    59  1048     0      66  ,
 46271    59   461    53    59  1048     0     112  4
 46272    59   461    54    59  1048     0      60  )
 46273    59   461    55    59  1048     0      60  )
 46274    59   461    56    59  1048     0      66  ,
 46275    59   461    58    59  1048     0     111  bigEndian
 46276    59   461    67    59  1048     0      60  )
 46277    59   461    68    59  1048     0     102  ;
 46278    59   462     5    59  1048     0      64  }
 46279    59   462     5    59  1048     0    2456  ENDMETHOD
 46280    59   462     5    59  1049     0    2457  STARTMETHOD
 46281    59   466     5    59  1049     0      10  public
 46282    59   466    12    59  1049     0     111  ByteBuffer
 46283    59   466    23    59  1049     0     111  putFloat
 46284    59   466    31    59  1049     0      59  (
 46285    59   466    32    59  1049     0       4  float
 46286    59   466    38    59  1049     0     111  x
 46287    59   466    39    59  1049     0      60  )
 46288    59   466    41    59  1049     0      63  {
 46289    59   468     9    59  1049     0     111  Bits.putFloat
 46290    59   468    22    59  1049     0      59  (
 46291    59   468    23    59  1049     0      44  this
 46292    59   468    27    59  1049     0      66  ,
 46293    59   468    29    59  1049     0     111  ix
 46294    59   468    31    59  1049     0      59  (
 46295    59   468    32    59  1049     0     111  nextPutIndex
 46296    59   468    44    59  1049     0      59  (
 46297    59   468    45    59  1049     0     112  4
 46298    59   468    46    59  1049     0      60  )
 46299    59   468    47    59  1049     0      60  )
 46300    59   468    48    59  1049     0      66  ,
 46301    59   468    50    59  1049     0     111  x
 46302    59   468    51    59  1049     0      66  ,
 46303    59   468    53    59  1049     0     111  bigEndian
 46304    59   468    62    59  1049     0      60  )
 46305    59   468    63    59  1049     0     102  ;
 46306    59   469     9    59  1049     0      19  return
 46307    59   469    16    59  1049     0      44  this
 46308    59   469    20    59  1049     0     102  ;
 46309    59   473     5    59  1049     0      64  }
 46310    59   473     5    59  1049     0    2458  ENDMETHOD
 46311    59   473     5    59  1050     0    2459  STARTMETHOD
 46312    59   475     5    59  1050     0      10  public
 46313    59   475    12    59  1050     0     111  ByteBuffer
 46314    59   475    23    59  1050     0     111  putFloat
 46315    59   475    31    59  1050     0      59  (
 46316    59   475    32    59  1050     0      36  int
 46317    59   475    36    59  1050     0     111  i
 46318    59   475    37    59  1050     0      66  ,
 46319    59   475    39    59  1050     0       4  float
 46320    59   475    45    59  1050     0     111  x
 46321    59   475    46    59  1050     0      60  )
 46322    59   475    48    59  1050     0      63  {
 46323    59   477     9    59  1050     0     111  Bits.putFloat
 46324    59   477    22    59  1050     0      59  (
 46325    59   477    23    59  1050     0      44  this
 46326    59   477    27    59  1050     0      66  ,
 46327    59   477    29    59  1050     0     111  ix
 46328    59   477    31    59  1050     0      59  (
 46329    59   477    32    59  1050     0     111  checkIndex
 46330    59   477    42    59  1050     0      59  (
 46331    59   477    43    59  1050     0     111  i
 46332    59   477    44    59  1050     0      66  ,
 46333    59   477    46    59  1050     0     112  4
 46334    59   477    47    59  1050     0      60  )
 46335    59   477    48    59  1050     0      60  )
 46336    59   477    49    59  1050     0      66  ,
 46337    59   477    51    59  1050     0     111  x
 46338    59   477    52    59  1050     0      66  ,
 46339    59   477    54    59  1050     0     111  bigEndian
 46340    59   477    63    59  1050     0      60  )
 46341    59   477    64    59  1050     0     102  ;
 46342    59   478     9    59  1050     0      19  return
 46343    59   478    16    59  1050     0      44  this
 46344    59   478    20    59  1050     0     102  ;
 46345    59   482     5    59  1050     0      64  }
 46346    59   482     5    59  1050     0    2460  ENDMETHOD
 46347    59   482     5    59  1051     0    2461  STARTMETHOD
 46348    59   484     5    59  1051     0      10  public
 46349    59   484    12    59  1051     0     111  FloatBuffer
 46350    59   484    24    59  1051     0     111  asFloatBuffer
 46351    59   484    37    59  1051     0      59  (
 46352    59   484    38    59  1051     0      60  )
 46353    59   484    40    59  1051     0      63  {
 46354    59   485     9    59  1051     0      36  int
 46355    59   485    13    59  1051     0     111  size
 46356    59   485    18    59  1051     0      67  =
 46357    59   485    20    59  1051     0     111  this.remaining
 46358    59   485    34    59  1051     0      59  (
 46359    59   485    35    59  1051     0      60  )
 46360    59   485    37    59  1051     0      84  >>
 46361    59   485    40    59  1051     0     112  2
 46362    59   485    41    59  1051     0     102  ;
 46363    59   486     9    59  1051     0      36  int
 46364    59   486    13    59  1051     0     111  off
 46365    59   486    17    59  1051     0      67  =
 46366    59   486    19    59  1051     0     111  offset
 46367    59   486    26    59  1051     0      74  +
 46368    59   486    28    59  1051     0     111  position
 46369    59   486    36    59  1051     0      59  (
 46370    59   486    37    59  1051     0      60  )
 46371    59   486    38    59  1051     0     102  ;
 46372    59   487     9    59  1051     0      19  return
 46373    59   487    16    59  1051     0      59  (
 46374    59   487    17    59  1051     0     111  bigEndian
 46375    59   488    17    59  1051     0      58  ?
 46376    59   488    19    59  1051     0      59  (
 46377    59   488    20    59  1051     0     111  FloatBuffer
 46378    59   488    31    59  1051     0      60  )
 46379    59   488    32    59  1051     0      59  (
 46380    59   488    33    59  1051     0      15  new
 46381    59   488    37    59  1051     0     111  ByteBufferAsFloatBufferB
 46382    59   488    61    59  1051     0      59  (
 46383    59   488    62    59  1051     0      44  this
 46384    59   488    66    59  1051     0      66  ,
 46385    59   489    66    59  1051     0      77  -
 46386    59   489    67    59  1051     0     112  1
 46387    59   489    68    59  1051     0      66  ,
 46388    59   490    66    59  1051     0     112  0
 46389    59   490    67    59  1051     0      66  ,
 46390    59   491    66    59  1051     1     111  size
 46391    59   491    70    59  1051     1      66  ,
 46392    59   492    66    59  1051     1     111  size
 46393    59   492    70    59  1051     1      66  ,
 46394    59   493    66    59  1051     0     111  off
 46395    59   493    69    59  1051     0      60  )
 46396    59   493    70    59  1051     0      60  )
 46397    59   494    17    59  1051     0      65  :
 46398    59   494    19    59  1051     0      59  (
 46399    59   494    20    59  1051     0     111  FloatBuffer
 46400    59   494    31    59  1051     0      60  )
 46401    59   494    32    59  1051     0      59  (
 46402    59   494    33    59  1051     0      15  new
 46403    59   494    37    59  1051     0     111  ByteBufferAsFloatBufferL
 46404    59   494    61    59  1051     0      59  (
 46405    59   494    62    59  1051     0      44  this
 46406    59   494    66    59  1051     0      66  ,
 46407    59   495    66    59  1051     0      77  -
 46408    59   495    67    59  1051     0     112  1
 46409    59   495    68    59  1051     0      66  ,
 46410    59   496    66    59  1051     0     112  0
 46411    59   496    67    59  1051     0      66  ,
 46412    59   497    66    59  1051     1     111  size
 46413    59   497    70    59  1051     1      66  ,
 46414    59   498    66    59  1051     1     111  size
 46415    59   498    70    59  1051     1      66  ,
 46416    59   499    66    59  1051     0     111  off
 46417    59   499    69    59  1051     0      60  )
 46418    59   499    70    59  1051     0      60  )
 46419    59   499    71    59  1051     0      60  )
 46420    59   499    72    59  1051     0     102  ;
 46421    59   500     5    59  1051     0      64  }
 46422    59   500     5    59  1051     0    2462  ENDMETHOD
 46423    59   500     5    59  1052     0    2463  STARTMETHOD
 46424    59   507     5    59  1052     0      10  public
 46425    59   507    12    59  1052     0      32  double
 46426    59   507    19    59  1052     0     111  getDouble
 46427    59   507    28    59  1052     0      59  (
 46428    59   507    29    59  1052     0      60  )
 46429    59   507    31    59  1052     0      63  {
 46430    59   508     9    59  1052     0      19  return
 46431    59   508    16    59  1052     0     111  Bits.getDouble
 46432    59   508    30    59  1052     0      59  (
 46433    59   508    31    59  1052     0      44  this
 46434    59   508    35    59  1052     0      66  ,
 46435    59   508    37    59  1052     0     111  ix
 46436    59   508    39    59  1052     0      59  (
 46437    59   508    40    59  1052     0     111  nextGetIndex
 46438    59   508    52    59  1052     0      59  (
 46439    59   508    53    59  1052     0     112  8
 46440    59   508    54    59  1052     0      60  )
 46441    59   508    55    59  1052     0      60  )
 46442    59   508    56    59  1052     0      66  ,
 46443    59   508    58    59  1052     0     111  bigEndian
 46444    59   508    67    59  1052     0      60  )
 46445    59   508    68    59  1052     0     102  ;
 46446    59   509     5    59  1052     0      64  }
 46447    59   509     5    59  1052     0    2464  ENDMETHOD
 46448    59   509     5    59  1053     0    2465  STARTMETHOD
 46449    59   511     5    59  1053     0      10  public
 46450    59   511    12    59  1053     0      32  double
 46451    59   511    19    59  1053     0     111  getDouble
 46452    59   511    28    59  1053     0      59  (
 46453    59   511    29    59  1053     0      36  int
 46454    59   511    33    59  1053     0     111  i
 46455    59   511    34    59  1053     0      60  )
 46456    59   511    36    59  1053     0      63  {
 46457    59   512     9    59  1053     0      19  return
 46458    59   512    16    59  1053     0     111  Bits.getDouble
 46459    59   512    30    59  1053     0      59  (
 46460    59   512    31    59  1053     0      44  this
 46461    59   512    35    59  1053     0      66  ,
 46462    59   512    37    59  1053     0     111  ix
 46463    59   512    39    59  1053     0      59  (
 46464    59   512    40    59  1053     0     111  checkIndex
 46465    59   512    50    59  1053     0      59  (
 46466    59   512    51    59  1053     0     111  i
 46467    59   512    52    59  1053     0      66  ,
 46468    59   512    54    59  1053     0     112  8
 46469    59   512    55    59  1053     0      60  )
 46470    59   512    56    59  1053     0      60  )
 46471    59   512    57    59  1053     0      66  ,
 46472    59   512    59    59  1053     0     111  bigEndian
 46473    59   512    68    59  1053     0      60  )
 46474    59   512    69    59  1053     0     102  ;
 46475    59   513     5    59  1053     0      64  }
 46476    59   513     5    59  1053     0    2466  ENDMETHOD
 46477    59   513     5    59  1054     0    2467  STARTMETHOD
 46478    59   517     5    59  1054     0      10  public
 46479    59   517    12    59  1054     0     111  ByteBuffer
 46480    59   517    23    59  1054     0     111  putDouble
 46481    59   517    32    59  1054     0      59  (
 46482    59   517    33    59  1054     0      32  double
 46483    59   517    40    59  1054     0     111  x
 46484    59   517    41    59  1054     0      60  )
 46485    59   517    43    59  1054     0      63  {
 46486    59   519     9    59  1054     0     111  Bits.putDouble
 46487    59   519    23    59  1054     0      59  (
 46488    59   519    24    59  1054     0      44  this
 46489    59   519    28    59  1054     0      66  ,
 46490    59   519    30    59  1054     0     111  ix
 46491    59   519    32    59  1054     0      59  (
 46492    59   519    33    59  1054     0     111  nextPutIndex
 46493    59   519    45    59  1054     0      59  (
 46494    59   519    46    59  1054     0     112  8
 46495    59   519    47    59  1054     0      60  )
 46496    59   519    48    59  1054     0      60  )
 46497    59   519    49    59  1054     0      66  ,
 46498    59   519    51    59  1054     0     111  x
 46499    59   519    52    59  1054     0      66  ,
 46500    59   519    54    59  1054     0     111  bigEndian
 46501    59   519    63    59  1054     0      60  )
 46502    59   519    64    59  1054     0     102  ;
 46503    59   520     9    59  1054     0      19  return
 46504    59   520    16    59  1054     0      44  this
 46505    59   520    20    59  1054     0     102  ;
 46506    59   524     5    59  1054     0      64  }
 46507    59   524     5    59  1054     0    2468  ENDMETHOD
 46508    59   524     5    59  1055     0    2469  STARTMETHOD
 46509    59   526     5    59  1055     0      10  public
 46510    59   526    12    59  1055     0     111  ByteBuffer
 46511    59   526    23    59  1055     0     111  putDouble
 46512    59   526    32    59  1055     0      59  (
 46513    59   526    33    59  1055     0      36  int
 46514    59   526    37    59  1055     0     111  i
 46515    59   526    38    59  1055     0      66  ,
 46516    59   526    40    59  1055     0      32  double
 46517    59   526    47    59  1055     0     111  x
 46518    59   526    48    59  1055     0      60  )
 46519    59   526    50    59  1055     0      63  {
 46520    59   528     9    59  1055     0     111  Bits.putDouble
 46521    59   528    23    59  1055     0      59  (
 46522    59   528    24    59  1055     0      44  this
 46523    59   528    28    59  1055     0      66  ,
 46524    59   528    30    59  1055     0     111  ix
 46525    59   528    32    59  1055     0      59  (
 46526    59   528    33    59  1055     0     111  checkIndex
 46527    59   528    43    59  1055     0      59  (
 46528    59   528    44    59  1055     0     111  i
 46529    59   528    45    59  1055     0      66  ,
 46530    59   528    47    59  1055     0     112  8
 46531    59   528    48    59  1055     0      60  )
 46532    59   528    49    59  1055     0      60  )
 46533    59   528    50    59  1055     0      66  ,
 46534    59   528    52    59  1055     0     111  x
 46535    59   528    53    59  1055     0      66  ,
 46536    59   528    55    59  1055     0     111  bigEndian
 46537    59   528    64    59  1055     0      60  )
 46538    59   528    65    59  1055     0     102  ;
 46539    59   529     9    59  1055     0      19  return
 46540    59   529    16    59  1055     0      44  this
 46541    59   529    20    59  1055     0     102  ;
 46542    59   533     5    59  1055     0      64  }
 46543    59   533     5    59  1055     0    2470  ENDMETHOD
 46544    59   533     5    59  1056     0    2471  STARTMETHOD
 46545    59   535     5    59  1056     0      10  public
 46546    59   535    12    59  1056     0     111  DoubleBuffer
 46547    59   535    25    59  1056     0     111  asDoubleBuffer
 46548    59   535    39    59  1056     0      59  (
 46549    59   535    40    59  1056     0      60  )
 46550    59   535    42    59  1056     0      63  {
 46551    59   536     9    59  1056     0      36  int
 46552    59   536    13    59  1056     0     111  size
 46553    59   536    18    59  1056     0      67  =
 46554    59   536    20    59  1056     0     111  this.remaining
 46555    59   536    34    59  1056     0      59  (
 46556    59   536    35    59  1056     0      60  )
 46557    59   536    37    59  1056     0      84  >>
 46558    59   536    40    59  1056     0     112  3
 46559    59   536    41    59  1056     0     102  ;
 46560    59   537     9    59  1056     0      36  int
 46561    59   537    13    59  1056     0     111  off
 46562    59   537    17    59  1056     0      67  =
 46563    59   537    19    59  1056     0     111  offset
 46564    59   537    26    59  1056     0      74  +
 46565    59   537    28    59  1056     0     111  position
 46566    59   537    36    59  1056     0      59  (
 46567    59   537    37    59  1056     0      60  )
 46568    59   537    38    59  1056     0     102  ;
 46569    59   538     9    59  1056     0      19  return
 46570    59   538    16    59  1056     0      59  (
 46571    59   538    17    59  1056     0     111  bigEndian
 46572    59   539    17    59  1056     0      58  ?
 46573    59   539    19    59  1056     0      59  (
 46574    59   539    20    59  1056     0     111  DoubleBuffer
 46575    59   539    32    59  1056     0      60  )
 46576    59   539    33    59  1056     0      59  (
 46577    59   539    34    59  1056     0      15  new
 46578    59   539    38    59  1056     0     111  ByteBufferAsDoubleBufferB
 46579    59   539    63    59  1056     0      59  (
 46580    59   539    64    59  1056     0      44  this
 46581    59   539    68    59  1056     0      66  ,
 46582    59   540    68    59  1056     0      77  -
 46583    59   540    69    59  1056     0     112  1
 46584    59   540    70    59  1056     0      66  ,
 46585    59   541    68    59  1056     0     112  0
 46586    59   541    69    59  1056     0      66  ,
 46587    59   542    68    59  1056     1     111  size
 46588    59   542    72    59  1056     1      66  ,
 46589    59   543    68    59  1056     1     111  size
 46590    59   543    72    59  1056     1      66  ,
 46591    59   544    68    59  1056     0     111  off
 46592    59   544    71    59  1056     0      60  )
 46593    59   544    72    59  1056     0      60  )
 46594    59   545    17    59  1056     0      65  :
 46595    59   545    19    59  1056     0      59  (
 46596    59   545    20    59  1056     0     111  DoubleBuffer
 46597    59   545    32    59  1056     0      60  )
 46598    59   545    33    59  1056     0      59  (
 46599    59   545    34    59  1056     0      15  new
 46600    59   545    38    59  1056     0     111  ByteBufferAsDoubleBufferL
 46601    59   545    63    59  1056     0      59  (
 46602    59   545    64    59  1056     0      44  this
 46603    59   545    68    59  1056     0      66  ,
 46604    59   546    68    59  1056     0      77  -
 46605    59   546    69    59  1056     0     112  1
 46606    59   546    70    59  1056     0      66  ,
 46607    59   547    68    59  1056     0     112  0
 46608    59   547    69    59  1056     0      66  ,
 46609    59   548    68    59  1056     1     111  size
 46610    59   548    72    59  1056     1      66  ,
 46611    59   549    68    59  1056     1     111  size
 46612    59   549    72    59  1056     1      66  ,
 46613    59   550    68    59  1056     0     111  off
 46614    59   550    71    59  1056     0      60  )
 46615    59   550    72    59  1056     0      60  )
 46616    59   550    73    59  1056     0      60  )
 46617    59   550    74    59  1056     0     102  ;
 46618    59   551     5    59  1056     0      64  }
 46619    59   551     5    59  1056     0    2472  ENDMETHOD
 46620    59   592     1    59    -1     0      64  }
 46621    59   592     1    59    -1     1    2473  ENDCLASS
 46622    59   592     1    -1    -1     1    2474  ENDFILE C:\javasrc\java\nio\HeapByteBuffer.java
 46623    60     1     1    -1    -1     1    2475  STARTFILE C:\javasrc\java\nio\HeapByteBufferR.java
 46624    60    28     1    -1    -1     0       5  package
 46625    60    28     9    -1    -1     0     111  java.nio
 46626    60    28    17    -1    -1     0     102  ;
 46627    60    42     1    60    -1     0    2476  STARTCLASS
 46628    60    42     1    60    -1     0      24  class
 46629    60    42     7    60    -1     0     111  HeapByteBufferR
 46630    60    43     5    60    -1     0      38  extends
 46631    60    43    13    60    -1     0     111  HeapByteBuffer
 46632    60    44     1    60    -1     0      63  {
 46633    60    44     1    60  1057     0    2477  STARTMETHOD
 46634    60    55     5    60  1057     0     111  HeapByteBufferR
 46635    60    55    20    60  1057     0      59  (
 46636    60    55    21    60  1057     0      36  int
 46637    60    55    25    60  1057     0     111  cap
 46638    60    55    28    60  1057     0      66  ,
 46639    60    55    30    60  1057     0      36  int
 46640    60    55    34    60  1057     0     111  lim
 46641    60    55    37    60  1057     0      60  )
 46642    60    55    39    60  1057     0      63  {
 46643    60    63     9    60  1057     0      27  super
 46644    60    63    14    60  1057     0      59  (
 46645    60    63    15    60  1057     0     111  cap
 46646    60    63    18    60  1057     0      66  ,
 46647    60    63    20    60  1057     0     111  lim
 46648    60    63    23    60  1057     0      60  )
 46649    60    63    24    60  1057     0     102  ;
 46650    60    64     9    60  1057     0     111  this.isReadOnly
 46651    60    64    25    60  1057     0      67  =
 46652    60    64    27    60  1057     0      52  true
 46653    60    64    31    60  1057     0     102  ;
 46654    60    66     5    60  1057     0      64  }
 46655    60    66     5    60  1057     0    2478  ENDMETHOD
 46656    60    66     5    60  1058     0    2479  STARTMETHOD
 46657    60    68     5    60  1058     0     111  HeapByteBufferR
 46658    60    68    20    60  1058     0      59  (
 46659    60    68    21    60  1058     0       9  byte
 46660    60    68    25    60  1058     0      61  [
 46661    60    68    26    60  1058     0      62  ]
 46662    60    68    28    60  1058     0     111  buf
 46663    60    68    31    60  1058     0      66  ,
 46664    60    68    33    60  1058     0      36  int
 46665    60    68    37    60  1058     0     111  off
 46666    60    68    40    60  1058     0      66  ,
 46667    60    68    42    60  1058     0      36  int
 46668    60    68    46    60  1058     0     111  len
 46669    60    68    49    60  1058     0      60  )
 46670    60    68    51    60  1058     0      63  {
 46671    60    76     9    60  1058     0      27  super
 46672    60    76    14    60  1058     0      59  (
 46673    60    76    15    60  1058     0     111  buf
 46674    60    76    18    60  1058     0      66  ,
 46675    60    76    20    60  1058     0     111  off
 46676    60    76    23    60  1058     0      66  ,
 46677    60    76    25    60  1058     0     111  len
 46678    60    76    28    60  1058     0      60  )
 46679    60    76    29    60  1058     0     102  ;
 46680    60    77     9    60  1058     0     111  this.isReadOnly
 46681    60    77    25    60  1058     0      67  =
 46682    60    77    27    60  1058     0      52  true
 46683    60    77    31    60  1058     0     102  ;
 46684    60    79     5    60  1058     0      64  }
 46685    60    79     5    60  1058     0    2480  ENDMETHOD
 46686    60    79     5    60  1059     0    2481  STARTMETHOD
 46687    60    81     5    60  1059     0      23  protected
 46688    60    81    15    60  1059     0     111  HeapByteBufferR
 46689    60    81    30    60  1059     0      59  (
 46690    60    81    31    60  1059     0       9  byte
 46691    60    81    35    60  1059     0      61  [
 46692    60    81    36    60  1059     0      62  ]
 46693    60    81    38    60  1059     0     111  buf
 46694    60    81    41    60  1059     0      66  ,
 46695    60    82    36    60  1059     0      36  int
 46696    60    82    40    60  1059     0     111  mark
 46697    60    82    44    60  1059     0      66  ,
 46698    60    82    46    60  1059     0      36  int
 46699    60    82    50    60  1059     0     111  pos
 46700    60    82    53    60  1059     0      66  ,
 46701    60    82    55    60  1059     0      36  int
 46702    60    82    59    60  1059     0     111  lim
 46703    60    82    62    60  1059     0      66  ,
 46704    60    82    64    60  1059     0      36  int
 46705    60    82    68    60  1059     0     111  cap
 46706    60    82    71    60  1059     0      66  ,
 46707    60    83    36    60  1059     0      36  int
 46708    60    83    40    60  1059     0     111  off
 46709    60    83    43    60  1059     0      60  )
 46710    60    84     5    60  1059     0      63  {
 46711    60    92     9    60  1059     0      27  super
 46712    60    92    14    60  1059     0      59  (
 46713    60    92    15    60  1059     0     111  buf
 46714    60    92    18    60  1059     0      66  ,
 46715    60    92    20    60  1059     0     111  mark
 46716    60    92    24    60  1059     0      66  ,
 46717    60    92    26    60  1059     0     111  pos
 46718    60    92    29    60  1059     0      66  ,
 46719    60    92    31    60  1059     0     111  lim
 46720    60    92    34    60  1059     0      66  ,
 46721    60    92    36    60  1059     0     111  cap
 46722    60    92    39    60  1059     0      66  ,
 46723    60    92    41    60  1059     0     111  off
 46724    60    92    44    60  1059     0      60  )
 46725    60    92    45    60  1059     0     102  ;
 46726    60    93     9    60  1059     0     111  this.isReadOnly
 46727    60    93    25    60  1059     0      67  =
 46728    60    93    27    60  1059     0      52  true
 46729    60    93    31    60  1059     0     102  ;
 46730    60    95     5    60  1059     0      64  }
 46731    60    95     5    60  1059     0    2482  ENDMETHOD
 46732    60    95     5    60  1060     0    2483  STARTMETHOD
 46733    60    97     5    60  1060     0      10  public
 46734    60    97    12    60  1060     0     111  ByteBuffer
 46735    60    97    23    60  1060     0     111  slice
 46736    60    97    28    60  1060     0      59  (
 46737    60    97    29    60  1060     0      60  )
 46738    60    97    31    60  1060     0      63  {
 46739    60    98     9    60  1060     0      19  return
 46740    60    98    16    60  1060     0      15  new
 46741    60    98    20    60  1060     0     111  HeapByteBufferR
 46742    60    98    35    60  1060     0      59  (
 46743    60    98    36    60  1060     0     111  hb
 46744    60    98    38    60  1060     0      66  ,
 46745    60    99    41    60  1060     0      77  -
 46746    60    99    42    60  1060     0     112  1
 46747    60    99    43    60  1060     0      66  ,
 46748    60   100    41    60  1060     0     112  0
 46749    60   100    42    60  1060     0      66  ,
 46750    60   101    41    60  1060     1     111  this.remaining
 46751    60   101    55    60  1060     1      59  (
 46752    60   101    56    60  1060     1      60  )
 46753    60   101    57    60  1060     1      66  ,
 46754    60   102    41    60  1060     1     111  this.remaining
 46755    60   102    55    60  1060     1      59  (
 46756    60   102    56    60  1060     1      60  )
 46757    60   102    57    60  1060     1      66  ,
 46758    60   103    41    60  1060     0     111  this.position
 46759    60   103    54    60  1060     0      59  (
 46760    60   103    55    60  1060     0      60  )
 46761    60   103    57    60  1060     0      74  +
 46762    60   103    59    60  1060     0     111  offset
 46763    60   103    65    60  1060     0      60  )
 46764    60   103    66    60  1060     0     102  ;
 46765    60   104     5    60  1060     0      64  }
 46766    60   104     5    60  1060     0    2484  ENDMETHOD
 46767    60   104     5    60  1061     0    2485  STARTMETHOD
 46768    60   106     5    60  1061     0      10  public
 46769    60   106    12    60  1061     0     111  ByteBuffer
 46770    60   106    23    60  1061     0     111  duplicate
 46771    60   106    32    60  1061     0      59  (
 46772    60   106    33    60  1061     0      60  )
 46773    60   106    35    60  1061     0      63  {
 46774    60   107     9    60  1061     0      19  return
 46775    60   107    16    60  1061     0      15  new
 46776    60   107    20    60  1061     0     111  HeapByteBufferR
 46777    60   107    35    60  1061     0      59  (
 46778    60   107    36    60  1061     0     111  hb
 46779    60   107    38    60  1061     0      66  ,
 46780    60   108    41    60  1061     1     111  this.markValue
 46781    60   108    55    60  1061     1      59  (
 46782    60   108    56    60  1061     1      60  )
 46783    60   108    57    60  1061     1      66  ,
 46784    60   109    41    60  1061     1     111  this.position
 46785    60   109    54    60  1061     1      59  (
 46786    60   109    55    60  1061     1      60  )
 46787    60   109    56    60  1061     1      66  ,
 46788    60   110    41    60  1061     1     111  this.limit
 46789    60   110    51    60  1061     1      59  (
 46790    60   110    52    60  1061     1      60  )
 46791    60   110    53    60  1061     1      66  ,
 46792    60   111    41    60  1061     1     111  this.capacity
 46793    60   111    54    60  1061     1      59  (
 46794    60   111    55    60  1061     1      60  )
 46795    60   111    56    60  1061     1      66  ,
 46796    60   112    41    60  1061     0     111  offset
 46797    60   112    47    60  1061     0      60  )
 46798    60   112    48    60  1061     0     102  ;
 46799    60   113     5    60  1061     0      64  }
 46800    60   113     5    60  1061     0    2486  ENDMETHOD
 46801    60   113     5    60  1062     0    2487  STARTMETHOD
 46802    60   115     5    60  1062     0      10  public
 46803    60   115    12    60  1062     0     111  ByteBuffer
 46804    60   115    23    60  1062     0     111  asReadOnlyBuffer
 46805    60   115    39    60  1062     0      59  (
 46806    60   115    40    60  1062     0      60  )
 46807    60   115    42    60  1062     0      63  {
 46808    60   124     9    60  1062     0      19  return
 46809    60   124    16    60  1062     0     111  duplicate
 46810    60   124    25    60  1062     0      59  (
 46811    60   124    26    60  1062     0      60  )
 46812    60   124    27    60  1062     0     102  ;
 46813    60   126     5    60  1062     0      64  }
 46814    60   126     5    60  1062     0    2488  ENDMETHOD
 46815    60   126     5    60  1063     0    2489  STARTMETHOD
 46816    60   157     5    60  1063     0      10  public
 46817    60   157    12    60  1063     0      39  boolean
 46818    60   157    20    60  1063     0     111  isReadOnly
 46819    60   157    30    60  1063     0      59  (
 46820    60   157    31    60  1063     0      60  )
 46821    60   157    33    60  1063     0      63  {
 46822    60   158     9    60  1063     0      19  return
 46823    60   158    16    60  1063     0      52  true
 46824    60   158    20    60  1063     0     102  ;
 46825    60   159     5    60  1063     0      64  }
 46826    60   159     5    60  1063     0    2490  ENDMETHOD
 46827    60   159     5    60  1064     0    2491  STARTMETHOD
 46828    60   161     5    60  1064     0      10  public
 46829    60   161    12    60  1064     0     111  ByteBuffer
 46830    60   161    23    60  1064     0     111  put
 46831    60   161    26    60  1064     0      59  (
 46832    60   161    27    60  1064     0       9  byte
 46833    60   161    32    60  1064     0     111  x
 46834    60   161    33    60  1064     0      60  )
 46835    60   161    35    60  1064     0      63  {
 46836    60   166     9    60  1064     0      20  throw
 46837    60   166    15    60  1064     0      15  new
 46838    60   166    19    60  1064     0     111  ReadOnlyBufferException
 46839    60   166    42    60  1064     0      59  (
 46840    60   166    43    60  1064     0      60  )
 46841    60   166    44    60  1064     0     102  ;
 46842    60   168     5    60  1064     0      64  }
 46843    60   168     5    60  1064     0    2492  ENDMETHOD
 46844    60   168     5    60  1065     0    2493  STARTMETHOD
 46845    60   170     5    60  1065     0      10  public
 46846    60   170    12    60  1065     0     111  ByteBuffer
 46847    60   170    23    60  1065     0     111  put
 46848    60   170    26    60  1065     0      59  (
 46849    60   170    27    60  1065     0      36  int
 46850    60   170    31    60  1065     0     111  i
 46851    60   170    32    60  1065     0      66  ,
 46852    60   170    34    60  1065     0       9  byte
 46853    60   170    39    60  1065     0     111  x
 46854    60   170    40    60  1065     0      60  )
 46855    60   170    42    60  1065     0      63  {
 46856    60   175     9    60  1065     0      20  throw
 46857    60   175    15    60  1065     0      15  new
 46858    60   175    19    60  1065     0     111  ReadOnlyBufferException
 46859    60   175    42    60  1065     0      59  (
 46860    60   175    43    60  1065     0      60  )
 46861    60   175    44    60  1065     0     102  ;
 46862    60   177     5    60  1065     0      64  }
 46863    60   177     5    60  1065     0    2494  ENDMETHOD
 46864    60   177     5    60  1066     0    2495  STARTMETHOD
 46865    60   179     5    60  1066     0      10  public
 46866    60   179    12    60  1066     0     111  ByteBuffer
 46867    60   179    23    60  1066     0     111  put
 46868    60   179    26    60  1066     0      59  (
 46869    60   179    27    60  1066     0       9  byte
 46870    60   179    31    60  1066     0      61  [
 46871    60   179    32    60  1066     0      62  ]
 46872    60   179    34    60  1066     0     111  src
 46873    60   179    37    60  1066     0      66  ,
 46874    60   179    39    60  1066     0      36  int
 46875    60   179    43    60  1066     0     111  offset
 46876    60   179    49    60  1066     0      66  ,
 46877    60   179    51    60  1066     0      36  int
 46878    60   179    55    60  1066     0     111  length
 46879    60   179    61    60  1066     0      60  )
 46880    60   179    63    60  1066     0      63  {
 46881    60   188     9    60  1066     0      20  throw
 46882    60   188    15    60  1066     0      15  new
 46883    60   188    19    60  1066     0     111  ReadOnlyBufferException
 46884    60   188    42    60  1066     0      59  (
 46885    60   188    43    60  1066     0      60  )
 46886    60   188    44    60  1066     0     102  ;
 46887    60   190     5    60  1066     0      64  }
 46888    60   190     5    60  1066     0    2496  ENDMETHOD
 46889    60   190     5    60  1067     0    2497  STARTMETHOD
 46890    60   192     5    60  1067     0      10  public
 46891    60   192    12    60  1067     0     111  ByteBuffer
 46892    60   192    23    60  1067     0     111  put
 46893    60   192    26    60  1067     0      59  (
 46894    60   192    27    60  1067     0     111  ByteBuffer
 46895    60   192    38    60  1067     0     111  src
 46896    60   192    41    60  1067     0      60  )
 46897    60   192    43    60  1067     0      63  {
 46898    60   216     9    60  1067     0      20  throw
 46899    60   216    15    60  1067     0      15  new
 46900    60   216    19    60  1067     0     111  ReadOnlyBufferException
 46901    60   216    42    60  1067     0      59  (
 46902    60   216    43    60  1067     0      60  )
 46903    60   216    44    60  1067     0     102  ;
 46904    60   218     5    60  1067     0      64  }
 46905    60   218     5    60  1067     0    2498  ENDMETHOD
 46906    60   218     5    60  1068     0    2499  STARTMETHOD
 46907    60   220     5    60  1068     0      10  public
 46908    60   220    12    60  1068     0     111  ByteBuffer
 46909    60   220    23    60  1068     0     111  compact
 46910    60   220    30    60  1068     0      59  (
 46911    60   220    31    60  1068     0      60  )
 46912    60   220    33    60  1068     0      63  {
 46913    60   228     9    60  1068     0      20  throw
 46914    60   228    15    60  1068     0      15  new
 46915    60   228    19    60  1068     0     111  ReadOnlyBufferException
 46916    60   228    42    60  1068     0      59  (
 46917    60   228    43    60  1068     0      60  )
 46918    60   228    44    60  1068     0     102  ;
 46919    60   230     5    60  1068     0      64  }
 46920    60   230     5    60  1068     0    2500  ENDMETHOD
 46921    60   230     5    60  1069     0    2501  STARTMETHOD
 46922    60   236     5    60  1069     0       9  byte
 46923    60   236    10    60  1069     0     111  _get
 46924    60   236    14    60  1069     0      59  (
 46925    60   236    15    60  1069     0      36  int
 46926    60   236    19    60  1069     0     111  i
 46927    60   236    20    60  1069     0      60  )
 46928    60   236    22    60  1069     0      63  {
 46929    60   237     9    60  1069     0      19  return
 46930    60   237    16    60  1069     0     111  hb
 46931    60   237    18    60  1069     0      61  [
 46932    60   237    19    60  1069     0     111  i
 46933    60   237    20    60  1069     0      62  ]
 46934    60   237    21    60  1069     0     102  ;
 46935    60   238     5    60  1069     0      64  }
 46936    60   238     5    60  1069     0    2502  ENDMETHOD
 46937    60   238     5    60  1070     0    2503  STARTMETHOD
 46938    60   240     5    60  1070     0      50  void
 46939    60   240    10    60  1070     0     111  _put
 46940    60   240    14    60  1070     0      59  (
 46941    60   240    15    60  1070     0      36  int
 46942    60   240    19    60  1070     0     111  i
 46943    60   240    20    60  1070     0      66  ,
 46944    60   240    22    60  1070     0       9  byte
 46945    60   240    27    60  1070     0     111  b
 46946    60   240    28    60  1070     0      60  )
 46947    60   240    30    60  1070     0      63  {
 46948    60   244     9    60  1070     0      20  throw
 46949    60   244    15    60  1070     0      15  new
 46950    60   244    19    60  1070     0     111  ReadOnlyBufferException
 46951    60   244    42    60  1070     0      59  (
 46952    60   244    43    60  1070     0      60  )
 46953    60   244    44    60  1070     0     102  ;
 46954    60   246     5    60  1070     0      64  }
 46955    60   246     5    60  1070     0    2504  ENDMETHOD
 46956    60   246     5    60  1071     0    2505  STARTMETHOD
 46957    60   262     5    60  1071     0      10  public
 46958    60   262    12    60  1071     0     111  ByteBuffer
 46959    60   262    23    60  1071     0     111  putChar
 46960    60   262    30    60  1071     0      59  (
 46961    60   262    31    60  1071     0      40  char
 46962    60   262    36    60  1071     0     111  x
 46963    60   262    37    60  1071     0      60  )
 46964    60   262    39    60  1071     0      63  {
 46965    60   267     9    60  1071     0      20  throw
 46966    60   267    15    60  1071     0      15  new
 46967    60   267    19    60  1071     0     111  ReadOnlyBufferException
 46968    60   267    42    60  1071     0      59  (
 46969    60   267    43    60  1071     0      60  )
 46970    60   267    44    60  1071     0     102  ;
 46971    60   269     5    60  1071     0      64  }
 46972    60   269     5    60  1071     0    2506  ENDMETHOD
 46973    60   269     5    60  1072     0    2507  STARTMETHOD
 46974    60   271     5    60  1072     0      10  public
 46975    60   271    12    60  1072     0     111  ByteBuffer
 46976    60   271    23    60  1072     0     111  putChar
 46977    60   271    30    60  1072     0      59  (
 46978    60   271    31    60  1072     0      36  int
 46979    60   271    35    60  1072     0     111  i
 46980    60   271    36    60  1072     0      66  ,
 46981    60   271    38    60  1072     0      40  char
 46982    60   271    43    60  1072     0     111  x
 46983    60   271    44    60  1072     0      60  )
 46984    60   271    46    60  1072     0      63  {
 46985    60   276     9    60  1072     0      20  throw
 46986    60   276    15    60  1072     0      15  new
 46987    60   276    19    60  1072     0     111  ReadOnlyBufferException
 46988    60   276    42    60  1072     0      59  (
 46989    60   276    43    60  1072     0      60  )
 46990    60   276    44    60  1072     0     102  ;
 46991    60   278     5    60  1072     0      64  }
 46992    60   278     5    60  1072     0    2508  ENDMETHOD
 46993    60   278     5    60  1073     0    2509  STARTMETHOD
 46994    60   280     5    60  1073     0      10  public
 46995    60   280    12    60  1073     0     111  CharBuffer
 46996    60   280    23    60  1073     0     111  asCharBuffer
 46997    60   280    35    60  1073     0      59  (
 46998    60   280    36    60  1073     0      60  )
 46999    60   280    38    60  1073     0      63  {
 47000    60   281     9    60  1073     0      36  int
 47001    60   281    13    60  1073     0     111  size
 47002    60   281    18    60  1073     0      67  =
 47003    60   281    20    60  1073     0     111  this.remaining
 47004    60   281    34    60  1073     0      59  (
 47005    60   281    35    60  1073     0      60  )
 47006    60   281    37    60  1073     0      84  >>
 47007    60   281    40    60  1073     0     112  1
 47008    60   281    41    60  1073     0     102  ;
 47009    60   282     9    60  1073     0      36  int
 47010    60   282    13    60  1073     0     111  off
 47011    60   282    17    60  1073     0      67  =
 47012    60   282    19    60  1073     0     111  offset
 47013    60   282    26    60  1073     0      74  +
 47014    60   282    28    60  1073     0     111  position
 47015    60   282    36    60  1073     0      59  (
 47016    60   282    37    60  1073     0      60  )
 47017    60   282    38    60  1073     0     102  ;
 47018    60   283     9    60  1073     0      19  return
 47019    60   283    16    60  1073     0      59  (
 47020    60   283    17    60  1073     0     111  bigEndian
 47021    60   284    17    60  1073     0      58  ?
 47022    60   284    19    60  1073     0      59  (
 47023    60   284    20    60  1073     0     111  CharBuffer
 47024    60   284    30    60  1073     0      60  )
 47025    60   284    31    60  1073     0      59  (
 47026    60   284    32    60  1073     0      15  new
 47027    60   284    36    60  1073     0     111  ByteBufferAsCharBufferRB
 47028    60   284    60    60  1073     0      59  (
 47029    60   284    61    60  1073     0      44  this
 47030    60   284    65    60  1073     0      66  ,
 47031    60   285    64    60  1073     0      77  -
 47032    60   285    65    60  1073     0     112  1
 47033    60   285    66    60  1073     0      66  ,
 47034    60   286    64    60  1073     0     112  0
 47035    60   286    65    60  1073     0      66  ,
 47036    60   287    64    60  1073     1     111  size
 47037    60   287    68    60  1073     1      66  ,
 47038    60   288    64    60  1073     1     111  size
 47039    60   288    68    60  1073     1      66  ,
 47040    60   289    64    60  1073     0     111  off
 47041    60   289    67    60  1073     0      60  )
 47042    60   289    68    60  1073     0      60  )
 47043    60   290    17    60  1073     0      65  :
 47044    60   290    19    60  1073     0      59  (
 47045    60   290    20    60  1073     0     111  CharBuffer
 47046    60   290    30    60  1073     0      60  )
 47047    60   290    31    60  1073     0      59  (
 47048    60   290    32    60  1073     0      15  new
 47049    60   290    36    60  1073     0     111  ByteBufferAsCharBufferRL
 47050    60   290    60    60  1073     0      59  (
 47051    60   290    61    60  1073     0      44  this
 47052    60   290    65    60  1073     0      66  ,
 47053    60   291    64    60  1073     0      77  -
 47054    60   291    65    60  1073     0     112  1
 47055    60   291    66    60  1073     0      66  ,
 47056    60   292    64    60  1073     0     112  0
 47057    60   292    65    60  1073     0      66  ,
 47058    60   293    64    60  1073     1     111  size
 47059    60   293    68    60  1073     1      66  ,
 47060    60   294    64    60  1073     1     111  size
 47061    60   294    68    60  1073     1      66  ,
 47062    60   295    64    60  1073     0     111  off
 47063    60   295    67    60  1073     0      60  )
 47064    60   295    68    60  1073     0      60  )
 47065    60   295    69    60  1073     0      60  )
 47066    60   295    70    60  1073     0     102  ;
 47067    60   296     5    60  1073     0      64  }
 47068    60   296     5    60  1073     0    2510  ENDMETHOD
 47069    60   296     5    60  1074     0    2511  STARTMETHOD
 47070    60   313     5    60  1074     0      10  public
 47071    60   313    12    60  1074     0     111  ByteBuffer
 47072    60   313    23    60  1074     0     111  putShort
 47073    60   313    31    60  1074     0      59  (
 47074    60   313    32    60  1074     0      12  short
 47075    60   313    38    60  1074     0     111  x
 47076    60   313    39    60  1074     0      60  )
 47077    60   313    41    60  1074     0      63  {
 47078    60   318     9    60  1074     0      20  throw
 47079    60   318    15    60  1074     0      15  new
 47080    60   318    19    60  1074     0     111  ReadOnlyBufferException
 47081    60   318    42    60  1074     0      59  (
 47082    60   318    43    60  1074     0      60  )
 47083    60   318    44    60  1074     0     102  ;
 47084    60   320     5    60  1074     0      64  }
 47085    60   320     5    60  1074     0    2512  ENDMETHOD
 47086    60   320     5    60  1075     0    2513  STARTMETHOD
 47087    60   322     5    60  1075     0      10  public
 47088    60   322    12    60  1075     0     111  ByteBuffer
 47089    60   322    23    60  1075     0     111  putShort
 47090    60   322    31    60  1075     0      59  (
 47091    60   322    32    60  1075     0      36  int
 47092    60   322    36    60  1075     0     111  i
 47093    60   322    37    60  1075     0      66  ,
 47094    60   322    39    60  1075     0      12  short
 47095    60   322    45    60  1075     0     111  x
 47096    60   322    46    60  1075     0      60  )
 47097    60   322    48    60  1075     0      63  {
 47098    60   327     9    60  1075     0      20  throw
 47099    60   327    15    60  1075     0      15  new
 47100    60   327    19    60  1075     0     111  ReadOnlyBufferException
 47101    60   327    42    60  1075     0      59  (
 47102    60   327    43    60  1075     0      60  )
 47103    60   327    44    60  1075     0     102  ;
 47104    60   329     5    60  1075     0      64  }
 47105    60   329     5    60  1075     0    2514  ENDMETHOD
 47106    60   329     5    60  1076     0    2515  STARTMETHOD
 47107    60   331     5    60  1076     0      10  public
 47108    60   331    12    60  1076     0     111  ShortBuffer
 47109    60   331    24    60  1076     0     111  asShortBuffer
 47110    60   331    37    60  1076     0      59  (
 47111    60   331    38    60  1076     0      60  )
 47112    60   331    40    60  1076     0      63  {
 47113    60   332     9    60  1076     0      36  int
 47114    60   332    13    60  1076     0     111  size
 47115    60   332    18    60  1076     0      67  =
 47116    60   332    20    60  1076     0     111  this.remaining
 47117    60   332    34    60  1076     0      59  (
 47118    60   332    35    60  1076     0      60  )
 47119    60   332    37    60  1076     0      84  >>
 47120    60   332    40    60  1076     0     112  1
 47121    60   332    41    60  1076     0     102  ;
 47122    60   333     9    60  1076     0      36  int
 47123    60   333    13    60  1076     0     111  off
 47124    60   333    17    60  1076     0      67  =
 47125    60   333    19    60  1076     0     111  offset
 47126    60   333    26    60  1076     0      74  +
 47127    60   333    28    60  1076     0     111  position
 47128    60   333    36    60  1076     0      59  (
 47129    60   333    37    60  1076     0      60  )
 47130    60   333    38    60  1076     0     102  ;
 47131    60   334     9    60  1076     0      19  return
 47132    60   334    16    60  1076     0      59  (
 47133    60   334    17    60  1076     0     111  bigEndian
 47134    60   335    17    60  1076     0      58  ?
 47135    60   335    19    60  1076     0      59  (
 47136    60   335    20    60  1076     0     111  ShortBuffer
 47137    60   335    31    60  1076     0      60  )
 47138    60   335    32    60  1076     0      59  (
 47139    60   335    33    60  1076     0      15  new
 47140    60   335    37    60  1076     0     111  ByteBufferAsShortBufferRB
 47141    60   335    62    60  1076     0      59  (
 47142    60   335    63    60  1076     0      44  this
 47143    60   335    67    60  1076     0      66  ,
 47144    60   336    66    60  1076     0      77  -
 47145    60   336    67    60  1076     0     112  1
 47146    60   336    68    60  1076     0      66  ,
 47147    60   337    66    60  1076     0     112  0
 47148    60   337    67    60  1076     0      66  ,
 47149    60   338    66    60  1076     1     111  size
 47150    60   338    70    60  1076     1      66  ,
 47151    60   339    66    60  1076     1     111  size
 47152    60   339    70    60  1076     1      66  ,
 47153    60   340    66    60  1076     0     111  off
 47154    60   340    69    60  1076     0      60  )
 47155    60   340    70    60  1076     0      60  )
 47156    60   341    17    60  1076     0      65  :
 47157    60   341    19    60  1076     0      59  (
 47158    60   341    20    60  1076     0     111  ShortBuffer
 47159    60   341    31    60  1076     0      60  )
 47160    60   341    32    60  1076     0      59  (
 47161    60   341    33    60  1076     0      15  new
 47162    60   341    37    60  1076     0     111  ByteBufferAsShortBufferRL
 47163    60   341    62    60  1076     0      59  (
 47164    60   341    63    60  1076     0      44  this
 47165    60   341    67    60  1076     0      66  ,
 47166    60   342    66    60  1076     0      77  -
 47167    60   342    67    60  1076     0     112  1
 47168    60   342    68    60  1076     0      66  ,
 47169    60   343    66    60  1076     0     112  0
 47170    60   343    67    60  1076     0      66  ,
 47171    60   344    66    60  1076     1     111  size
 47172    60   344    70    60  1076     1      66  ,
 47173    60   345    66    60  1076     1     111  size
 47174    60   345    70    60  1076     1      66  ,
 47175    60   346    66    60  1076     0     111  off
 47176    60   346    69    60  1076     0      60  )
 47177    60   346    70    60  1076     0      60  )
 47178    60   346    71    60  1076     0      60  )
 47179    60   346    72    60  1076     0     102  ;
 47180    60   347     5    60  1076     0      64  }
 47181    60   347     5    60  1076     0    2516  ENDMETHOD
 47182    60   347     5    60  1077     0    2517  STARTMETHOD
 47183    60   364     5    60  1077     0      10  public
 47184    60   364    12    60  1077     0     111  ByteBuffer
 47185    60   364    23    60  1077     0     111  putInt
 47186    60   364    29    60  1077     0      59  (
 47187    60   364    30    60  1077     0      36  int
 47188    60   364    34    60  1077     0     111  x
 47189    60   364    35    60  1077     0      60  )
 47190    60   364    37    60  1077     0      63  {
 47191    60   369     9    60  1077     0      20  throw
 47192    60   369    15    60  1077     0      15  new
 47193    60   369    19    60  1077     0     111  ReadOnlyBufferException
 47194    60   369    42    60  1077     0      59  (
 47195    60   369    43    60  1077     0      60  )
 47196    60   369    44    60  1077     0     102  ;
 47197    60   371     5    60  1077     0      64  }
 47198    60   371     5    60  1077     0    2518  ENDMETHOD
 47199    60   371     5    60  1078     0    2519  STARTMETHOD
 47200    60   373     5    60  1078     0      10  public
 47201    60   373    12    60  1078     0     111  ByteBuffer
 47202    60   373    23    60  1078     0     111  putInt
 47203    60   373    29    60  1078     0      59  (
 47204    60   373    30    60  1078     0      36  int
 47205    60   373    34    60  1078     0     111  i
 47206    60   373    35    60  1078     0      66  ,
 47207    60   373    37    60  1078     0      36  int
 47208    60   373    41    60  1078     0     111  x
 47209    60   373    42    60  1078     0      60  )
 47210    60   373    44    60  1078     0      63  {
 47211    60   378     9    60  1078     0      20  throw
 47212    60   378    15    60  1078     0      15  new
 47213    60   378    19    60  1078     0     111  ReadOnlyBufferException
 47214    60   378    42    60  1078     0      59  (
 47215    60   378    43    60  1078     0      60  )
 47216    60   378    44    60  1078     0     102  ;
 47217    60   380     5    60  1078     0      64  }
 47218    60   380     5    60  1078     0    2520  ENDMETHOD
 47219    60   380     5    60  1079     0    2521  STARTMETHOD
 47220    60   382     5    60  1079     0      10  public
 47221    60   382    12    60  1079     0     111  IntBuffer
 47222    60   382    22    60  1079     0     111  asIntBuffer
 47223    60   382    33    60  1079     0      59  (
 47224    60   382    34    60  1079     0      60  )
 47225    60   382    36    60  1079     0      63  {
 47226    60   383     9    60  1079     0      36  int
 47227    60   383    13    60  1079     0     111  size
 47228    60   383    18    60  1079     0      67  =
 47229    60   383    20    60  1079     0     111  this.remaining
 47230    60   383    34    60  1079     0      59  (
 47231    60   383    35    60  1079     0      60  )
 47232    60   383    37    60  1079     0      84  >>
 47233    60   383    40    60  1079     0     112  2
 47234    60   383    41    60  1079     0     102  ;
 47235    60   384     9    60  1079     0      36  int
 47236    60   384    13    60  1079     0     111  off
 47237    60   384    17    60  1079     0      67  =
 47238    60   384    19    60  1079     0     111  offset
 47239    60   384    26    60  1079     0      74  +
 47240    60   384    28    60  1079     0     111  position
 47241    60   384    36    60  1079     0      59  (
 47242    60   384    37    60  1079     0      60  )
 47243    60   384    38    60  1079     0     102  ;
 47244    60   385     9    60  1079     0      19  return
 47245    60   385    16    60  1079     0      59  (
 47246    60   385    17    60  1079     0     111  bigEndian
 47247    60   386    17    60  1079     0      58  ?
 47248    60   386    19    60  1079     0      59  (
 47249    60   386    20    60  1079     0     111  IntBuffer
 47250    60   386    29    60  1079     0      60  )
 47251    60   386    30    60  1079     0      59  (
 47252    60   386    31    60  1079     0      15  new
 47253    60   386    35    60  1079     0     111  ByteBufferAsIntBufferRB
 47254    60   386    58    60  1079     0      59  (
 47255    60   386    59    60  1079     0      44  this
 47256    60   386    63    60  1079     0      66  ,
 47257    60   387    62    60  1079     0      77  -
 47258    60   387    63    60  1079     0     112  1
 47259    60   387    64    60  1079     0      66  ,
 47260    60   388    62    60  1079     0     112  0
 47261    60   388    63    60  1079     0      66  ,
 47262    60   389    62    60  1079     1     111  size
 47263    60   389    66    60  1079     1      66  ,
 47264    60   390    62    60  1079     1     111  size
 47265    60   390    66    60  1079     1      66  ,
 47266    60   391    62    60  1079     0     111  off
 47267    60   391    65    60  1079     0      60  )
 47268    60   391    66    60  1079     0      60  )
 47269    60   392    17    60  1079     0      65  :
 47270    60   392    19    60  1079     0      59  (
 47271    60   392    20    60  1079     0     111  IntBuffer
 47272    60   392    29    60  1079     0      60  )
 47273    60   392    30    60  1079     0      59  (
 47274    60   392    31    60  1079     0      15  new
 47275    60   392    35    60  1079     0     111  ByteBufferAsIntBufferRL
 47276    60   392    58    60  1079     0      59  (
 47277    60   392    59    60  1079     0      44  this
 47278    60   392    63    60  1079     0      66  ,
 47279    60   393    62    60  1079     0      77  -
 47280    60   393    63    60  1079     0     112  1
 47281    60   393    64    60  1079     0      66  ,
 47282    60   394    62    60  1079     0     112  0
 47283    60   394    63    60  1079     0      66  ,
 47284    60   395    62    60  1079     1     111  size
 47285    60   395    66    60  1079     1      66  ,
 47286    60   396    62    60  1079     1     111  size
 47287    60   396    66    60  1079     1      66  ,
 47288    60   397    62    60  1079     0     111  off
 47289    60   397    65    60  1079     0      60  )
 47290    60   397    66    60  1079     0      60  )
 47291    60   397    67    60  1079     0      60  )
 47292    60   397    68    60  1079     0     102  ;
 47293    60   398     5    60  1079     0      64  }
 47294    60   398     5    60  1079     0    2522  ENDMETHOD
 47295    60   398     5    60  1080     0    2523  STARTMETHOD
 47296    60   415     5    60  1080     0      10  public
 47297    60   415    12    60  1080     0     111  ByteBuffer
 47298    60   415    23    60  1080     0     111  putLong
 47299    60   415    30    60  1080     0      59  (
 47300    60   415    31    60  1080     0      53  long
 47301    60   415    36    60  1080     0     111  x
 47302    60   415    37    60  1080     0      60  )
 47303    60   415    39    60  1080     0      63  {
 47304    60   420     9    60  1080     0      20  throw
 47305    60   420    15    60  1080     0      15  new
 47306    60   420    19    60  1080     0     111  ReadOnlyBufferException
 47307    60   420    42    60  1080     0      59  (
 47308    60   420    43    60  1080     0      60  )
 47309    60   420    44    60  1080     0     102  ;
 47310    60   422     5    60  1080     0      64  }
 47311    60   422     5    60  1080     0    2524  ENDMETHOD
 47312    60   422     5    60  1081     0    2525  STARTMETHOD
 47313    60   424     5    60  1081     0      10  public
 47314    60   424    12    60  1081     0     111  ByteBuffer
 47315    60   424    23    60  1081     0     111  putLong
 47316    60   424    30    60  1081     0      59  (
 47317    60   424    31    60  1081     0      36  int
 47318    60   424    35    60  1081     0     111  i
 47319    60   424    36    60  1081     0      66  ,
 47320    60   424    38    60  1081     0      53  long
 47321    60   424    43    60  1081     0     111  x
 47322    60   424    44    60  1081     0      60  )
 47323    60   424    46    60  1081     0      63  {
 47324    60   429     9    60  1081     0      20  throw
 47325    60   429    15    60  1081     0      15  new
 47326    60   429    19    60  1081     0     111  ReadOnlyBufferException
 47327    60   429    42    60  1081     0      59  (
 47328    60   429    43    60  1081     0      60  )
 47329    60   429    44    60  1081     0     102  ;
 47330    60   431     5    60  1081     0      64  }
 47331    60   431     5    60  1081     0    2526  ENDMETHOD
 47332    60   431     5    60  1082     0    2527  STARTMETHOD
 47333    60   433     5    60  1082     0      10  public
 47334    60   433    12    60  1082     0     111  LongBuffer
 47335    60   433    23    60  1082     0     111  asLongBuffer
 47336    60   433    35    60  1082     0      59  (
 47337    60   433    36    60  1082     0      60  )
 47338    60   433    38    60  1082     0      63  {
 47339    60   434     9    60  1082     0      36  int
 47340    60   434    13    60  1082     0     111  size
 47341    60   434    18    60  1082     0      67  =
 47342    60   434    20    60  1082     0     111  this.remaining
 47343    60   434    34    60  1082     0      59  (
 47344    60   434    35    60  1082     0      60  )
 47345    60   434    37    60  1082     0      84  >>
 47346    60   434    40    60  1082     0     112  3
 47347    60   434    41    60  1082     0     102  ;
 47348    60   435     9    60  1082     0      36  int
 47349    60   435    13    60  1082     0     111  off
 47350    60   435    17    60  1082     0      67  =
 47351    60   435    19    60  1082     0     111  offset
 47352    60   435    26    60  1082     0      74  +
 47353    60   435    28    60  1082     0     111  position
 47354    60   435    36    60  1082     0      59  (
 47355    60   435    37    60  1082     0      60  )
 47356    60   435    38    60  1082     0     102  ;
 47357    60   436     9    60  1082     0      19  return
 47358    60   436    16    60  1082     0      59  (
 47359    60   436    17    60  1082     0     111  bigEndian
 47360    60   437    17    60  1082     0      58  ?
 47361    60   437    19    60  1082     0      59  (
 47362    60   437    20    60  1082     0     111  LongBuffer
 47363    60   437    30    60  1082     0      60  )
 47364    60   437    31    60  1082     0      59  (
 47365    60   437    32    60  1082     0      15  new
 47366    60   437    36    60  1082     0     111  ByteBufferAsLongBufferRB
 47367    60   437    60    60  1082     0      59  (
 47368    60   437    61    60  1082     0      44  this
 47369    60   437    65    60  1082     0      66  ,
 47370    60   438    64    60  1082     0      77  -
 47371    60   438    65    60  1082     0     112  1
 47372    60   438    66    60  1082     0      66  ,
 47373    60   439    64    60  1082     0     112  0
 47374    60   439    65    60  1082     0      66  ,
 47375    60   440    64    60  1082     1     111  size
 47376    60   440    68    60  1082     1      66  ,
 47377    60   441    64    60  1082     1     111  size
 47378    60   441    68    60  1082     1      66  ,
 47379    60   442    64    60  1082     0     111  off
 47380    60   442    67    60  1082     0      60  )
 47381    60   442    68    60  1082     0      60  )
 47382    60   443    17    60  1082     0      65  :
 47383    60   443    19    60  1082     0      59  (
 47384    60   443    20    60  1082     0     111  LongBuffer
 47385    60   443    30    60  1082     0      60  )
 47386    60   443    31    60  1082     0      59  (
 47387    60   443    32    60  1082     0      15  new
 47388    60   443    36    60  1082     0     111  ByteBufferAsLongBufferRL
 47389    60   443    60    60  1082     0      59  (
 47390    60   443    61    60  1082     0      44  this
 47391    60   443    65    60  1082     0      66  ,
 47392    60   444    64    60  1082     0      77  -
 47393    60   444    65    60  1082     0     112  1
 47394    60   444    66    60  1082     0      66  ,
 47395    60   445    64    60  1082     0     112  0
 47396    60   445    65    60  1082     0      66  ,
 47397    60   446    64    60  1082     1     111  size
 47398    60   446    68    60  1082     1      66  ,
 47399    60   447    64    60  1082     1     111  size
 47400    60   447    68    60  1082     1      66  ,
 47401    60   448    64    60  1082     0     111  off
 47402    60   448    67    60  1082     0      60  )
 47403    60   448    68    60  1082     0      60  )
 47404    60   448    69    60  1082     0      60  )
 47405    60   448    70    60  1082     0     102  ;
 47406    60   449     5    60  1082     0      64  }
 47407    60   449     5    60  1082     0    2528  ENDMETHOD
 47408    60   449     5    60  1083     0    2529  STARTMETHOD
 47409    60   466     5    60  1083     0      10  public
 47410    60   466    12    60  1083     0     111  ByteBuffer
 47411    60   466    23    60  1083     0     111  putFloat
 47412    60   466    31    60  1083     0      59  (
 47413    60   466    32    60  1083     0       4  float
 47414    60   466    38    60  1083     0     111  x
 47415    60   466    39    60  1083     0      60  )
 47416    60   466    41    60  1083     0      63  {
 47417    60   471     9    60  1083     0      20  throw
 47418    60   471    15    60  1083     0      15  new
 47419    60   471    19    60  1083     0     111  ReadOnlyBufferException
 47420    60   471    42    60  1083     0      59  (
 47421    60   471    43    60  1083     0      60  )
 47422    60   471    44    60  1083     0     102  ;
 47423    60   473     5    60  1083     0      64  }
 47424    60   473     5    60  1083     0    2530  ENDMETHOD
 47425    60   473     5    60  1084     0    2531  STARTMETHOD
 47426    60   475     5    60  1084     0      10  public
 47427    60   475    12    60  1084     0     111  ByteBuffer
 47428    60   475    23    60  1084     0     111  putFloat
 47429    60   475    31    60  1084     0      59  (
 47430    60   475    32    60  1084     0      36  int
 47431    60   475    36    60  1084     0     111  i
 47432    60   475    37    60  1084     0      66  ,
 47433    60   475    39    60  1084     0       4  float
 47434    60   475    45    60  1084     0     111  x
 47435    60   475    46    60  1084     0      60  )
 47436    60   475    48    60  1084     0      63  {
 47437    60   480     9    60  1084     0      20  throw
 47438    60   480    15    60  1084     0      15  new
 47439    60   480    19    60  1084     0     111  ReadOnlyBufferException
 47440    60   480    42    60  1084     0      59  (
 47441    60   480    43    60  1084     0      60  )
 47442    60   480    44    60  1084     0     102  ;
 47443    60   482     5    60  1084     0      64  }
 47444    60   482     5    60  1084     0    2532  ENDMETHOD
 47445    60   482     5    60  1085     0    2533  STARTMETHOD
 47446    60   484     5    60  1085     0      10  public
 47447    60   484    12    60  1085     0     111  FloatBuffer
 47448    60   484    24    60  1085     0     111  asFloatBuffer
 47449    60   484    37    60  1085     0      59  (
 47450    60   484    38    60  1085     0      60  )
 47451    60   484    40    60  1085     0      63  {
 47452    60   485     9    60  1085     0      36  int
 47453    60   485    13    60  1085     0     111  size
 47454    60   485    18    60  1085     0      67  =
 47455    60   485    20    60  1085     0     111  this.remaining
 47456    60   485    34    60  1085     0      59  (
 47457    60   485    35    60  1085     0      60  )
 47458    60   485    37    60  1085     0      84  >>
 47459    60   485    40    60  1085     0     112  2
 47460    60   485    41    60  1085     0     102  ;
 47461    60   486     9    60  1085     0      36  int
 47462    60   486    13    60  1085     0     111  off
 47463    60   486    17    60  1085     0      67  =
 47464    60   486    19    60  1085     0     111  offset
 47465    60   486    26    60  1085     0      74  +
 47466    60   486    28    60  1085     0     111  position
 47467    60   486    36    60  1085     0      59  (
 47468    60   486    37    60  1085     0      60  )
 47469    60   486    38    60  1085     0     102  ;
 47470    60   487     9    60  1085     0      19  return
 47471    60   487    16    60  1085     0      59  (
 47472    60   487    17    60  1085     0     111  bigEndian
 47473    60   488    17    60  1085     0      58  ?
 47474    60   488    19    60  1085     0      59  (
 47475    60   488    20    60  1085     0     111  FloatBuffer
 47476    60   488    31    60  1085     0      60  )
 47477    60   488    32    60  1085     0      59  (
 47478    60   488    33    60  1085     0      15  new
 47479    60   488    37    60  1085     0     111  ByteBufferAsFloatBufferRB
 47480    60   488    62    60  1085     0      59  (
 47481    60   488    63    60  1085     0      44  this
 47482    60   488    67    60  1085     0      66  ,
 47483    60   489    66    60  1085     0      77  -
 47484    60   489    67    60  1085     0     112  1
 47485    60   489    68    60  1085     0      66  ,
 47486    60   490    66    60  1085     0     112  0
 47487    60   490    67    60  1085     0      66  ,
 47488    60   491    66    60  1085     1     111  size
 47489    60   491    70    60  1085     1      66  ,
 47490    60   492    66    60  1085     1     111  size
 47491    60   492    70    60  1085     1      66  ,
 47492    60   493    66    60  1085     0     111  off
 47493    60   493    69    60  1085     0      60  )
 47494    60   493    70    60  1085     0      60  )
 47495    60   494    17    60  1085     0      65  :
 47496    60   494    19    60  1085     0      59  (
 47497    60   494    20    60  1085     0     111  FloatBuffer
 47498    60   494    31    60  1085     0      60  )
 47499    60   494    32    60  1085     0      59  (
 47500    60   494    33    60  1085     0      15  new
 47501    60   494    37    60  1085     0     111  ByteBufferAsFloatBufferRL
 47502    60   494    62    60  1085     0      59  (
 47503    60   494    63    60  1085     0      44  this
 47504    60   494    67    60  1085     0      66  ,
 47505    60   495    66    60  1085     0      77  -
 47506    60   495    67    60  1085     0     112  1
 47507    60   495    68    60  1085     0      66  ,
 47508    60   496    66    60  1085     0     112  0
 47509    60   496    67    60  1085     0      66  ,
 47510    60   497    66    60  1085     1     111  size
 47511    60   497    70    60  1085     1      66  ,
 47512    60   498    66    60  1085     1     111  size
 47513    60   498    70    60  1085     1      66  ,
 47514    60   499    66    60  1085     0     111  off
 47515    60   499    69    60  1085     0      60  )
 47516    60   499    70    60  1085     0      60  )
 47517    60   499    71    60  1085     0      60  )
 47518    60   499    72    60  1085     0     102  ;
 47519    60   500     5    60  1085     0      64  }
 47520    60   500     5    60  1085     0    2534  ENDMETHOD
 47521    60   500     5    60  1086     0    2535  STARTMETHOD
 47522    60   517     5    60  1086     0      10  public
 47523    60   517    12    60  1086     0     111  ByteBuffer
 47524    60   517    23    60  1086     0     111  putDouble
 47525    60   517    32    60  1086     0      59  (
 47526    60   517    33    60  1086     0      32  double
 47527    60   517    40    60  1086     0     111  x
 47528    60   517    41    60  1086     0      60  )
 47529    60   517    43    60  1086     0      63  {
 47530    60   522     9    60  1086     0      20  throw
 47531    60   522    15    60  1086     0      15  new
 47532    60   522    19    60  1086     0     111  ReadOnlyBufferException
 47533    60   522    42    60  1086     0      59  (
 47534    60   522    43    60  1086     0      60  )
 47535    60   522    44    60  1086     0     102  ;
 47536    60   524     5    60  1086     0      64  }
 47537    60   524     5    60  1086     0    2536  ENDMETHOD
 47538    60   524     5    60  1087     0    2537  STARTMETHOD
 47539    60   526     5    60  1087     0      10  public
 47540    60   526    12    60  1087     0     111  ByteBuffer
 47541    60   526    23    60  1087     0     111  putDouble
 47542    60   526    32    60  1087     0      59  (
 47543    60   526    33    60  1087     0      36  int
 47544    60   526    37    60  1087     0     111  i
 47545    60   526    38    60  1087     0      66  ,
 47546    60   526    40    60  1087     0      32  double
 47547    60   526    47    60  1087     0     111  x
 47548    60   526    48    60  1087     0      60  )
 47549    60   526    50    60  1087     0      63  {
 47550    60   531     9    60  1087     0      20  throw
 47551    60   531    15    60  1087     0      15  new
 47552    60   531    19    60  1087     0     111  ReadOnlyBufferException
 47553    60   531    42    60  1087     0      59  (
 47554    60   531    43    60  1087     0      60  )
 47555    60   531    44    60  1087     0     102  ;
 47556    60   533     5    60  1087     0      64  }
 47557    60   533     5    60  1087     0    2538  ENDMETHOD
 47558    60   533     5    60  1088     0    2539  STARTMETHOD
 47559    60   535     5    60  1088     0      10  public
 47560    60   535    12    60  1088     0     111  DoubleBuffer
 47561    60   535    25    60  1088     0     111  asDoubleBuffer
 47562    60   535    39    60  1088     0      59  (
 47563    60   535    40    60  1088     0      60  )
 47564    60   535    42    60  1088     0      63  {
 47565    60   536     9    60  1088     0      36  int
 47566    60   536    13    60  1088     0     111  size
 47567    60   536    18    60  1088     0      67  =
 47568    60   536    20    60  1088     0     111  this.remaining
 47569    60   536    34    60  1088     0      59  (
 47570    60   536    35    60  1088     0      60  )
 47571    60   536    37    60  1088     0      84  >>
 47572    60   536    40    60  1088     0     112  3
 47573    60   536    41    60  1088     0     102  ;
 47574    60   537     9    60  1088     0      36  int
 47575    60   537    13    60  1088     0     111  off
 47576    60   537    17    60  1088     0      67  =
 47577    60   537    19    60  1088     0     111  offset
 47578    60   537    26    60  1088     0      74  +
 47579    60   537    28    60  1088     0     111  position
 47580    60   537    36    60  1088     0      59  (
 47581    60   537    37    60  1088     0      60  )
 47582    60   537    38    60  1088     0     102  ;
 47583    60   538     9    60  1088     0      19  return
 47584    60   538    16    60  1088     0      59  (
 47585    60   538    17    60  1088     0     111  bigEndian
 47586    60   539    17    60  1088     0      58  ?
 47587    60   539    19    60  1088     0      59  (
 47588    60   539    20    60  1088     0     111  DoubleBuffer
 47589    60   539    32    60  1088     0      60  )
 47590    60   539    33    60  1088     0      59  (
 47591    60   539    34    60  1088     0      15  new
 47592    60   539    38    60  1088     0     111  ByteBufferAsDoubleBufferRB
 47593    60   539    64    60  1088     0      59  (
 47594    60   539    65    60  1088     0      44  this
 47595    60   539    69    60  1088     0      66  ,
 47596    60   540    68    60  1088     0      77  -
 47597    60   540    69    60  1088     0     112  1
 47598    60   540    70    60  1088     0      66  ,
 47599    60   541    68    60  1088     0     112  0
 47600    60   541    69    60  1088     0      66  ,
 47601    60   542    68    60  1088     1     111  size
 47602    60   542    72    60  1088     1      66  ,
 47603    60   543    68    60  1088     1     111  size
 47604    60   543    72    60  1088     1      66  ,
 47605    60   544    68    60  1088     0     111  off
 47606    60   544    71    60  1088     0      60  )
 47607    60   544    72    60  1088     0      60  )
 47608    60   545    17    60  1088     0      65  :
 47609    60   545    19    60  1088     0      59  (
 47610    60   545    20    60  1088     0     111  DoubleBuffer
 47611    60   545    32    60  1088     0      60  )
 47612    60   545    33    60  1088     0      59  (
 47613    60   545    34    60  1088     0      15  new
 47614    60   545    38    60  1088     0     111  ByteBufferAsDoubleBufferRL
 47615    60   545    64    60  1088     0      59  (
 47616    60   545    65    60  1088     0      44  this
 47617    60   545    69    60  1088     0      66  ,
 47618    60   546    68    60  1088     0      77  -
 47619    60   546    69    60  1088     0     112  1
 47620    60   546    70    60  1088     0      66  ,
 47621    60   547    68    60  1088     0     112  0
 47622    60   547    69    60  1088     0      66  ,
 47623    60   548    68    60  1088     1     111  size
 47624    60   548    72    60  1088     1      66  ,
 47625    60   549    68    60  1088     1     111  size
 47626    60   549    72    60  1088     1      66  ,
 47627    60   550    68    60  1088     0     111  off
 47628    60   550    71    60  1088     0      60  )
 47629    60   550    72    60  1088     0      60  )
 47630    60   550    73    60  1088     0      60  )
 47631    60   550    74    60  1088     0     102  ;
 47632    60   551     5    60  1088     0      64  }
 47633    60   551     5    60  1088     0    2540  ENDMETHOD
 47634    60   592     1    60    -1     0      64  }
 47635    60   592     1    60    -1     1    2541  ENDCLASS
 47636    60   592     1    -1    -1     1    2542  ENDFILE C:\javasrc\java\nio\HeapByteBufferR.java
 47637    61     1     1    -1    -1     1    2543  STARTFILE C:\javasrc\java\nio\HeapCharBuffer.java
 47638    61    28     1    -1    -1     0       5  package
 47639    61    28     9    -1    -1     0     111  java.nio
 47640    61    28    17    -1    -1     0     102  ;
 47641    61    42     1    61    -1     0    2544  STARTCLASS
 47642    61    42     1    61    -1     0      24  class
 47643    61    42     7    61    -1     0     111  HeapCharBuffer
 47644    61    43     5    61    -1     0      38  extends
 47645    61    43    13    61    -1     0     111  CharBuffer
 47646    61    44     1    61    -1     0      63  {
 47647    61    44     1    61  1089     0    2545  STARTMETHOD
 47648    61    55     5    61  1089     0     111  HeapCharBuffer
 47649    61    55    19    61  1089     0      59  (
 47650    61    55    20    61  1089     0      36  int
 47651    61    55    24    61  1089     0     111  cap
 47652    61    55    27    61  1089     0      66  ,
 47653    61    55    29    61  1089     0      36  int
 47654    61    55    33    61  1089     0     111  lim
 47655    61    55    36    61  1089     0      60  )
 47656    61    55    38    61  1089     0      63  {
 47657    61    57     9    61  1089     0      27  super
 47658    61    57    14    61  1089     0      59  (
 47659    61    57    15    61  1089     0      77  -
 47660    61    57    16    61  1089     0     112  1
 47661    61    57    17    61  1089     0      66  ,
 47662    61    57    19    61  1089     0     112  0
 47663    61    57    20    61  1089     0      66  ,
 47664    61    57    22    61  1089     0     111  lim
 47665    61    57    25    61  1089     0      66  ,
 47666    61    57    27    61  1089     0     111  cap
 47667    61    57    30    61  1089     0      66  ,
 47668    61    57    32    61  1089     0      15  new
 47669    61    57    36    61  1089     0      40  char
 47670    61    57    40    61  1089     0      61  [
 47671    61    57    41    61  1089     0     111  cap
 47672    61    57    44    61  1089     0      62  ]
 47673    61    57    45    61  1089     0      66  ,
 47674    61    57    47    61  1089     0     112  0
 47675    61    57    48    61  1089     0      60  )
 47676    61    57    49    61  1089     0     102  ;
 47677    61    66     5    61  1089     0      64  }
 47678    61    66     5    61  1089     0    2546  ENDMETHOD
 47679    61    66     5    61  1090     0    2547  STARTMETHOD
 47680    61    68     5    61  1090     0     111  HeapCharBuffer
 47681    61    68    19    61  1090     0      59  (
 47682    61    68    20    61  1090     0      40  char
 47683    61    68    24    61  1090     0      61  [
 47684    61    68    25    61  1090     0      62  ]
 47685    61    68    27    61  1090     0     111  buf
 47686    61    68    30    61  1090     0      66  ,
 47687    61    68    32    61  1090     0      36  int
 47688    61    68    36    61  1090     0     111  off
 47689    61    68    39    61  1090     0      66  ,
 47690    61    68    41    61  1090     0      36  int
 47691    61    68    45    61  1090     0     111  len
 47692    61    68    48    61  1090     0      60  )
 47693    61    68    50    61  1090     0      63  {
 47694    61    70     9    61  1090     0      27  super
 47695    61    70    14    61  1090     0      59  (
 47696    61    70    15    61  1090     0      77  -
 47697    61    70    16    61  1090     0     112  1
 47698    61    70    17    61  1090     0      66  ,
 47699    61    70    19    61  1090     0     111  off
 47700    61    70    22    61  1090     0      66  ,
 47701    61    70    24    61  1090     0     111  off
 47702    61    70    28    61  1090     0      74  +
 47703    61    70    30    61  1090     0     111  len
 47704    61    70    33    61  1090     0      66  ,
 47705    61    70    35    61  1090     0     111  buf.length
 47706    61    70    45    61  1090     0      66  ,
 47707    61    70    47    61  1090     0     111  buf
 47708    61    70    50    61  1090     0      66  ,
 47709    61    70    52    61  1090     0     112  0
 47710    61    70    53    61  1090     0      60  )
 47711    61    70    54    61  1090     0     102  ;
 47712    61    79     5    61  1090     0      64  }
 47713    61    79     5    61  1090     0    2548  ENDMETHOD
 47714    61    79     5    61  1091     0    2549  STARTMETHOD
 47715    61    81     5    61  1091     0      23  protected
 47716    61    81    15    61  1091     0     111  HeapCharBuffer
 47717    61    81    29    61  1091     0      59  (
 47718    61    81    30    61  1091     0      40  char
 47719    61    81    34    61  1091     0      61  [
 47720    61    81    35    61  1091     0      62  ]
 47721    61    81    37    61  1091     0     111  buf
 47722    61    81    40    61  1091     0      66  ,
 47723    61    82    36    61  1091     0      36  int
 47724    61    82    40    61  1091     0     111  mark
 47725    61    82    44    61  1091     0      66  ,
 47726    61    82    46    61  1091     0      36  int
 47727    61    82    50    61  1091     0     111  pos
 47728    61    82    53    61  1091     0      66  ,
 47729    61    82    55    61  1091     0      36  int
 47730    61    82    59    61  1091     0     111  lim
 47731    61    82    62    61  1091     0      66  ,
 47732    61    82    64    61  1091     0      36  int
 47733    61    82    68    61  1091     0     111  cap
 47734    61    82    71    61  1091     0      66  ,
 47735    61    83    36    61  1091     0      36  int
 47736    61    83    40    61  1091     0     111  off
 47737    61    83    43    61  1091     0      60  )
 47738    61    84     5    61  1091     0      63  {
 47739    61    86     9    61  1091     0      27  super
 47740    61    86    14    61  1091     0      59  (
 47741    61    86    15    61  1091     0     111  mark
 47742    61    86    19    61  1091     0      66  ,
 47743    61    86    21    61  1091     0     111  pos
 47744    61    86    24    61  1091     0      66  ,
 47745    61    86    26    61  1091     0     111  lim
 47746    61    86    29    61  1091     0      66  ,
 47747    61    86    31    61  1091     0     111  cap
 47748    61    86    34    61  1091     0      66  ,
 47749    61    86    36    61  1091     0     111  buf
 47750    61    86    39    61  1091     0      66  ,
 47751    61    86    41    61  1091     0     111  off
 47752    61    86    44    61  1091     0      60  )
 47753    61    86    45    61  1091     0     102  ;
 47754    61    95     5    61  1091     0      64  }
 47755    61    95     5    61  1091     0    2550  ENDMETHOD
 47756    61    95     5    61  1092     0    2551  STARTMETHOD
 47757    61    97     5    61  1092     0      10  public
 47758    61    97    12    61  1092     0     111  CharBuffer
 47759    61    97    23    61  1092     0     111  slice
 47760    61    97    28    61  1092     0      59  (
 47761    61    97    29    61  1092     0      60  )
 47762    61    97    31    61  1092     0      63  {
 47763    61    98     9    61  1092     0      19  return
 47764    61    98    16    61  1092     0      15  new
 47765    61    98    20    61  1092     0     111  HeapCharBuffer
 47766    61    98    34    61  1092     0      59  (
 47767    61    98    35    61  1092     0     111  hb
 47768    61    98    37    61  1092     0      66  ,
 47769    61    99    41    61  1092     0      77  -
 47770    61    99    42    61  1092     0     112  1
 47771    61    99    43    61  1092     0      66  ,
 47772    61   100    41    61  1092     0     112  0
 47773    61   100    42    61  1092     0      66  ,
 47774    61   101    41    61  1092     1     111  this.remaining
 47775    61   101    55    61  1092     1      59  (
 47776    61   101    56    61  1092     1      60  )
 47777    61   101    57    61  1092     1      66  ,
 47778    61   102    41    61  1092     1     111  this.remaining
 47779    61   102    55    61  1092     1      59  (
 47780    61   102    56    61  1092     1      60  )
 47781    61   102    57    61  1092     1      66  ,
 47782    61   103    41    61  1092     0     111  this.position
 47783    61   103    54    61  1092     0      59  (
 47784    61   103    55    61  1092     0      60  )
 47785    61   103    57    61  1092     0      74  +
 47786    61   103    59    61  1092     1     111  offset
 47787    61   103    65    61  1092     1      60  )
 47788    61   103    66    61  1092     1     102  ;
 47789    61   104     5    61  1092     1      64  }
 47790    61   104     5    61  1092     0    2552  ENDMETHOD
 47791    61   104     5    61  1093     0    2553  STARTMETHOD
 47792    61   106     5    61  1093     0      10  public
 47793    61   106    12    61  1093     0     111  CharBuffer
 47794    61   106    23    61  1093     0     111  duplicate
 47795    61   106    32    61  1093     0      59  (
 47796    61   106    33    61  1093     0      60  )
 47797    61   106    35    61  1093     0      63  {
 47798    61   107     9    61  1093     0      19  return
 47799    61   107    16    61  1093     0      15  new
 47800    61   107    20    61  1093     0     111  HeapCharBuffer
 47801    61   107    34    61  1093     0      59  (
 47802    61   107    35    61  1093     0     111  hb
 47803    61   107    37    61  1093     0      66  ,
 47804    61   108    41    61  1093     1     111  this.markValue
 47805    61   108    55    61  1093     1      59  (
 47806    61   108    56    61  1093     1      60  )
 47807    61   108    57    61  1093     1      66  ,
 47808    61   109    41    61  1093     1     111  this.position
 47809    61   109    54    61  1093     1      59  (
 47810    61   109    55    61  1093     1      60  )
 47811    61   109    56    61  1093     1      66  ,
 47812    61   110    41    61  1093     1     111  this.limit
 47813    61   110    51    61  1093     1      59  (
 47814    61   110    52    61  1093     1      60  )
 47815    61   110    53    61  1093     1      66  ,
 47816    61   111    41    61  1093     1     111  this.capacity
 47817    61   111    54    61  1093     1      59  (
 47818    61   111    55    61  1093     1      60  )
 47819    61   111    56    61  1093     1      66  ,
 47820    61   112    41    61  1093     1     111  offset
 47821    61   112    47    61  1093     1      60  )
 47822    61   112    48    61  1093     1     102  ;
 47823    61   113     5    61  1093     1      64  }
 47824    61   113     5    61  1093     0    2554  ENDMETHOD
 47825    61   113     5    61  1094     0    2555  STARTMETHOD
 47826    61   115     5    61  1094     0      10  public
 47827    61   115    12    61  1094     0     111  CharBuffer
 47828    61   115    23    61  1094     0     111  asReadOnlyBuffer
 47829    61   115    39    61  1094     0      59  (
 47830    61   115    40    61  1094     0      60  )
 47831    61   115    42    61  1094     0      63  {
 47832    61   117     9    61  1094     0      19  return
 47833    61   117    16    61  1094     0      15  new
 47834    61   117    20    61  1094     0     111  HeapCharBufferR
 47835    61   117    35    61  1094     0      59  (
 47836    61   117    36    61  1094     0     111  hb
 47837    61   117    38    61  1094     0      66  ,
 47838    61   118    38    61  1094     1     111  this.markValue
 47839    61   118    52    61  1094     1      59  (
 47840    61   118    53    61  1094     1      60  )
 47841    61   118    54    61  1094     1      66  ,
 47842    61   119    38    61  1094     1     111  this.position
 47843    61   119    51    61  1094     1      59  (
 47844    61   119    52    61  1094     1      60  )
 47845    61   119    53    61  1094     1      66  ,
 47846    61   120    38    61  1094     1     111  this.limit
 47847    61   120    48    61  1094     1      59  (
 47848    61   120    49    61  1094     1      60  )
 47849    61   120    50    61  1094     1      66  ,
 47850    61   121    38    61  1094     1     111  this.capacity
 47851    61   121    51    61  1094     1      59  (
 47852    61   121    52    61  1094     1      60  )
 47853    61   121    53    61  1094     1      66  ,
 47854    61   122    38    61  1094     1     111  offset
 47855    61   122    44    61  1094     1      60  )
 47856    61   122    45    61  1094     1     102  ;
 47857    61   126     5    61  1094     1      64  }
 47858    61   126     5    61  1094     0    2556  ENDMETHOD
 47859    61   126     5    61  1095     0    2557  STARTMETHOD
 47860    61   130     5    61  1095     0      23  protected
 47861    61   130    15    61  1095     0      36  int
 47862    61   130    19    61  1095     0     111  ix
 47863    61   130    21    61  1095     0      59  (
 47864    61   130    22    61  1095     0      36  int
 47865    61   130    26    61  1095     0     111  i
 47866    61   130    27    61  1095     0      60  )
 47867    61   130    29    61  1095     0      63  {
 47868    61   131     9    61  1095     0      19  return
 47869    61   131    16    61  1095     0     111  i
 47870    61   131    18    61  1095     0      74  +
 47871    61   131    20    61  1095     0     111  offset
 47872    61   131    26    61  1095     0     102  ;
 47873    61   132     5    61  1095     0      64  }
 47874    61   132     5    61  1095     0    2558  ENDMETHOD
 47875    61   132     5    61  1096     0    2559  STARTMETHOD
 47876    61   134     5    61  1096     0      10  public
 47877    61   134    12    61  1096     0      40  char
 47878    61   134    17    61  1096     0     111  get
 47879    61   134    20    61  1096     0      59  (
 47880    61   134    21    61  1096     0      60  )
 47881    61   134    23    61  1096     0      63  {
 47882    61   135     9    61  1096     0      19  return
 47883    61   135    16    61  1096     0     111  hb
 47884    61   135    18    61  1096     0      61  [
 47885    61   135    19    61  1096     0     111  ix
 47886    61   135    21    61  1096     0      59  (
 47887    61   135    22    61  1096     0     111  nextGetIndex
 47888    61   135    34    61  1096     0      59  (
 47889    61   135    35    61  1096     0      60  )
 47890    61   135    36    61  1096     0      60  )
 47891    61   135    37    61  1096     0      62  ]
 47892    61   135    38    61  1096     0     102  ;
 47893    61   136     5    61  1096     0      64  }
 47894    61   136     5    61  1096     0    2560  ENDMETHOD
 47895    61   136     5    61  1097     0    2561  STARTMETHOD
 47896    61   138     5    61  1097     0      10  public
 47897    61   138    12    61  1097     0      40  char
 47898    61   138    17    61  1097     0     111  get
 47899    61   138    20    61  1097     0      59  (
 47900    61   138    21    61  1097     0      36  int
 47901    61   138    25    61  1097     0     111  i
 47902    61   138    26    61  1097     0      60  )
 47903    61   138    28    61  1097     0      63  {
 47904    61   139     9    61  1097     0      19  return
 47905    61   139    16    61  1097     0     111  hb
 47906    61   139    18    61  1097     0      61  [
 47907    61   139    19    61  1097     0     111  ix
 47908    61   139    21    61  1097     0      59  (
 47909    61   139    22    61  1097     0     111  checkIndex
 47910    61   139    32    61  1097     0      59  (
 47911    61   139    33    61  1097     0     111  i
 47912    61   139    34    61  1097     0      60  )
 47913    61   139    35    61  1097     0      60  )
 47914    61   139    36    61  1097     0      62  ]
 47915    61   139    37    61  1097     0     102  ;
 47916    61   140     5    61  1097     0      64  }
 47917    61   140     5    61  1097     0    2562  ENDMETHOD
 47918    61   140     5    61  1098     0    2563  STARTMETHOD
 47919    61   142     5    61  1098     0      10  public
 47920    61   142    12    61  1098     0     111  CharBuffer
 47921    61   142    23    61  1098     0     111  get
 47922    61   142    26    61  1098     0      59  (
 47923    61   142    27    61  1098     0      40  char
 47924    61   142    31    61  1098     0      61  [
 47925    61   142    32    61  1098     0      62  ]
 47926    61   142    34    61  1098     0     111  dst
 47927    61   142    37    61  1098     0      66  ,
 47928    61   142    39    61  1098     0      36  int
 47929    61   142    43    61  1098     0     111  offset
 47930    61   142    49    61  1098     0      66  ,
 47931    61   142    51    61  1098     0      36  int
 47932    61   142    55    61  1098     0     111  length
 47933    61   142    61    61  1098     0      60  )
 47934    61   142    63    61  1098     0      63  {
 47935    61   143     9    61  1098     0     111  checkBounds
 47936    61   143    20    61  1098     0      59  (
 47937    61   143    21    61  1098     0     111  offset
 47938    61   143    27    61  1098     0      66  ,
 47939    61   143    29    61  1098     0     111  length
 47940    61   143    35    61  1098     0      66  ,
 47941    61   143    37    61  1098     0     111  dst.length
 47942    61   143    47    61  1098     0      60  )
 47943    61   143    48    61  1098     0     102  ;
 47944    61   144     9    61  1098     0      31  if
 47945    61   144    12    61  1098     0      59  (
 47946    61   144    13    61  1098     0     111  length
 47947    61   144    20    61  1098     0      89  >
 47948    61   144    22    61  1098     0     111  remaining
 47949    61   144    31    61  1098     0      59  (
 47950    61   144    32    61  1098     0      60  )
 47951    61   144    33    61  1098     0      60  )
 47952    61   145    13    61  1098     0      20  throw
 47953    61   145    19    61  1098     0      15  new
 47954    61   145    23    61  1098     0     111  BufferUnderflowException
 47955    61   145    47    61  1098     0      59  (
 47956    61   145    48    61  1098     0      60  )
 47957    61   145    49    61  1098     0     102  ;
 47958    61   146     9    61  1098     0     111  System.arraycopy
 47959    61   146    25    61  1098     0      59  (
 47960    61   146    26    61  1098     0     111  hb
 47961    61   146    28    61  1098     0      66  ,
 47962    61   146    30    61  1098     0     111  ix
 47963    61   146    32    61  1098     0      59  (
 47964    61   146    33    61  1098     0     111  position
 47965    61   146    41    61  1098     0      59  (
 47966    61   146    42    61  1098     0      60  )
 47967    61   146    43    61  1098     0      60  )
 47968    61   146    44    61  1098     0      66  ,
 47969    61   146    46    61  1098     0     111  dst
 47970    61   146    49    61  1098     0      66  ,
 47971    61   146    51    61  1098     0     111  offset
 47972    61   146    57    61  1098     0      66  ,
 47973    61   146    59    61  1098     0     111  length
 47974    61   146    65    61  1098     0      60  )
 47975    61   146    66    61  1098     0     102  ;
 47976    61   147     9    61  1098     0     111  position
 47977    61   147    17    61  1098     0      59  (
 47978    61   147    18    61  1098     0     111  position
 47979    61   147    26    61  1098     0      59  (
 47980    61   147    27    61  1098     0      60  )
 47981    61   147    29    61  1098     0      74  +
 47982    61   147    31    61  1098     0     111  length
 47983    61   147    37    61  1098     0      60  )
 47984    61   147    38    61  1098     0     102  ;
 47985    61   148     9    61  1098     0      19  return
 47986    61   148    16    61  1098     0      44  this
 47987    61   148    20    61  1098     1     102  ;
 47988    61   149     5    61  1098     1      64  }
 47989    61   149     5    61  1098     0    2564  ENDMETHOD
 47990    61   149     5    61  1099     0    2565  STARTMETHOD
 47991    61   151     5    61  1099     0      10  public
 47992    61   151    12    61  1099     0      39  boolean
 47993    61   151    20    61  1099     0     111  isDirect
 47994    61   151    28    61  1099     0      59  (
 47995    61   151    29    61  1099     0      60  )
 47996    61   151    31    61  1099     0      63  {
 47997    61   152     9    61  1099     0      19  return
 47998    61   152    16    61  1099     0      43  false
 47999    61   152    21    61  1099     1     102  ;
 48000    61   153     5    61  1099     1      64  }
 48001    61   153     5    61  1099     0    2566  ENDMETHOD
 48002    61   153     5    61  1100     0    2567  STARTMETHOD
 48003    61   157     5    61  1100     0      10  public
 48004    61   157    12    61  1100     0      39  boolean
 48005    61   157    20    61  1100     0     111  isReadOnly
 48006    61   157    30    61  1100     0      59  (
 48007    61   157    31    61  1100     0      60  )
 48008    61   157    33    61  1100     0      63  {
 48009    61   158     9    61  1100     0      19  return
 48010    61   158    16    61  1100     0      43  false
 48011    61   158    21    61  1100     1     102  ;
 48012    61   159     5    61  1100     1      64  }
 48013    61   159     5    61  1100     0    2568  ENDMETHOD
 48014    61   159     5    61  1101     0    2569  STARTMETHOD
 48015    61   161     5    61  1101     0      10  public
 48016    61   161    12    61  1101     0     111  CharBuffer
 48017    61   161    23    61  1101     0     111  put
 48018    61   161    26    61  1101     0      59  (
 48019    61   161    27    61  1101     0      40  char
 48020    61   161    32    61  1101     0     111  x
 48021    61   161    33    61  1101     0      60  )
 48022    61   161    35    61  1101     0      63  {
 48023    61   163     9    61  1101     0     111  hb
 48024    61   163    11    61  1101     0      61  [
 48025    61   163    12    61  1101     0     111  ix
 48026    61   163    14    61  1101     0      59  (
 48027    61   163    15    61  1101     0     111  nextPutIndex
 48028    61   163    27    61  1101     0      59  (
 48029    61   163    28    61  1101     0      60  )
 48030    61   163    29    61  1101     0      60  )
 48031    61   163    30    61  1101     0      62  ]
 48032    61   163    32    61  1101     0      67  =
 48033    61   163    34    61  1101     0     111  x
 48034    61   163    35    61  1101     0     102  ;
 48035    61   164     9    61  1101     0      19  return
 48036    61   164    16    61  1101     0      44  this
 48037    61   164    20    61  1101     0     102  ;
 48038    61   168     5    61  1101     0      64  }
 48039    61   168     5    61  1101     0    2570  ENDMETHOD
 48040    61   168     5    61  1102     0    2571  STARTMETHOD
 48041    61   170     5    61  1102     0      10  public
 48042    61   170    12    61  1102     0     111  CharBuffer
 48043    61   170    23    61  1102     0     111  put
 48044    61   170    26    61  1102     0      59  (
 48045    61   170    27    61  1102     0      36  int
 48046    61   170    31    61  1102     0     111  i
 48047    61   170    32    61  1102     0      66  ,
 48048    61   170    34    61  1102     0      40  char
 48049    61   170    39    61  1102     0     111  x
 48050    61   170    40    61  1102     0      60  )
 48051    61   170    42    61  1102     0      63  {
 48052    61   172     9    61  1102     0     111  hb
 48053    61   172    11    61  1102     0      61  [
 48054    61   172    12    61  1102     0     111  ix
 48055    61   172    14    61  1102     0      59  (
 48056    61   172    15    61  1102     0     111  checkIndex
 48057    61   172    25    61  1102     0      59  (
 48058    61   172    26    61  1102     0     111  i
 48059    61   172    27    61  1102     0      60  )
 48060    61   172    28    61  1102     0      60  )
 48061    61   172    29    61  1102     0      62  ]
 48062    61   172    31    61  1102     0      67  =
 48063    61   172    33    61  1102     0     111  x
 48064    61   172    34    61  1102     0     102  ;
 48065    61   173     9    61  1102     0      19  return
 48066    61   173    16    61  1102     0      44  this
 48067    61   173    20    61  1102     0     102  ;
 48068    61   177     5    61  1102     0      64  }
 48069    61   177     5    61  1102     0    2572  ENDMETHOD
 48070    61   177     5    61  1103     0    2573  STARTMETHOD
 48071    61   179     5    61  1103     0      10  public
 48072    61   179    12    61  1103     0     111  CharBuffer
 48073    61   179    23    61  1103     0     111  put
 48074    61   179    26    61  1103     0      59  (
 48075    61   179    27    61  1103     0      40  char
 48076    61   179    31    61  1103     0      61  [
 48077    61   179    32    61  1103     0      62  ]
 48078    61   179    34    61  1103     0     111  src
 48079    61   179    37    61  1103     0      66  ,
 48080    61   179    39    61  1103     0      36  int
 48081    61   179    43    61  1103     0     111  offset
 48082    61   179    49    61  1103     0      66  ,
 48083    61   179    51    61  1103     0      36  int
 48084    61   179    55    61  1103     0     111  length
 48085    61   179    61    61  1103     0      60  )
 48086    61   179    63    61  1103     0      63  {
 48087    61   181     9    61  1103     0     111  checkBounds
 48088    61   181    20    61  1103     0      59  (
 48089    61   181    21    61  1103     0     111  offset
 48090    61   181    27    61  1103     0      66  ,
 48091    61   181    29    61  1103     0     111  length
 48092    61   181    35    61  1103     0      66  ,
 48093    61   181    37    61  1103     0     111  src.length
 48094    61   181    47    61  1103     0      60  )
 48095    61   181    48    61  1103     0     102  ;
 48096    61   182     9    61  1103     0      31  if
 48097    61   182    12    61  1103     0      59  (
 48098    61   182    13    61  1103     0     111  length
 48099    61   182    20    61  1103     0      89  >
 48100    61   182    22    61  1103     0     111  remaining
 48101    61   182    31    61  1103     0      59  (
 48102    61   182    32    61  1103     0      60  )
 48103    61   182    33    61  1103     0      60  )
 48104    61   183    13    61  1103     0      20  throw
 48105    61   183    19    61  1103     0      15  new
 48106    61   183    23    61  1103     0     111  BufferOverflowException
 48107    61   183    46    61  1103     0      59  (
 48108    61   183    47    61  1103     0      60  )
 48109    61   183    48    61  1103     0     102  ;
 48110    61   184     9    61  1103     0     111  System.arraycopy
 48111    61   184    25    61  1103     0      59  (
 48112    61   184    26    61  1103     0     111  src
 48113    61   184    29    61  1103     0      66  ,
 48114    61   184    31    61  1103     0     111  offset
 48115    61   184    37    61  1103     0      66  ,
 48116    61   184    39    61  1103     0     111  hb
 48117    61   184    41    61  1103     0      66  ,
 48118    61   184    43    61  1103     0     111  ix
 48119    61   184    45    61  1103     0      59  (
 48120    61   184    46    61  1103     0     111  position
 48121    61   184    54    61  1103     0      59  (
 48122    61   184    55    61  1103     0      60  )
 48123    61   184    56    61  1103     0      60  )
 48124    61   184    57    61  1103     0      66  ,
 48125    61   184    59    61  1103     0     111  length
 48126    61   184    65    61  1103     0      60  )
 48127    61   184    66    61  1103     0     102  ;
 48128    61   185     9    61  1103     0     111  position
 48129    61   185    17    61  1103     0      59  (
 48130    61   185    18    61  1103     0     111  position
 48131    61   185    26    61  1103     0      59  (
 48132    61   185    27    61  1103     0      60  )
 48133    61   185    29    61  1103     0      74  +
 48134    61   185    31    61  1103     0     111  length
 48135    61   185    37    61  1103     0      60  )
 48136    61   185    38    61  1103     0     102  ;
 48137    61   186     9    61  1103     0      19  return
 48138    61   186    16    61  1103     0      44  this
 48139    61   186    20    61  1103     0     102  ;
 48140    61   190     5    61  1103     0      64  }
 48141    61   190     5    61  1103     0    2574  ENDMETHOD
 48142    61   190     5    61  1104     0    2575  STARTMETHOD
 48143    61   192     5    61  1104     0      10  public
 48144    61   192    12    61  1104     0     111  CharBuffer
 48145    61   192    23    61  1104     0     111  put
 48146    61   192    26    61  1104     0      59  (
 48147    61   192    27    61  1104     0     111  CharBuffer
 48148    61   192    38    61  1104     0     111  src
 48149    61   192    41    61  1104     0      60  )
 48150    61   192    43    61  1104     0      63  {
 48151    61   194     9    61  1104     0      31  if
 48152    61   194    12    61  1104     0      59  (
 48153    61   194    13    61  1104     0     111  src
 48154    61   194    17    61  1104     0      16  instanceof
 48155    61   194    28    61  1104     0     111  HeapCharBuffer
 48156    61   194    42    61  1104     0      60  )
 48157    61   194    44    61  1104     0      63  {
 48158    61   195    13    61  1104     0      31  if
 48159    61   195    16    61  1104     0      59  (
 48160    61   195    17    61  1104     0     111  src
 48161    61   195    21    61  1104     0      68  ==
 48162    61   195    24    61  1104     0      44  this
 48163    61   195    28    61  1104     0      60  )
 48164    61   196    17    61  1104     0      20  throw
 48165    61   196    23    61  1104     0      15  new
 48166    61   196    27    61  1104     0     111  IllegalArgumentException
 48167    61   196    51    61  1104     0      59  (
 48168    61   196    52    61  1104     0      60  )
 48169    61   196    53    61  1104     0     102  ;
 48170    61   197    13    61  1104     0     111  HeapCharBuffer
 48171    61   197    28    61  1104     0     111  sb
 48172    61   197    31    61  1104     0      67  =
 48173    61   197    33    61  1104     0      59  (
 48174    61   197    34    61  1104     0     111  HeapCharBuffer
 48175    61   197    48    61  1104     0      60  )
 48176    61   197    49    61  1104     0     111  src
 48177    61   197    52    61  1104     0     102  ;
 48178    61   198    13    61  1104     0      36  int
 48179    61   198    17    61  1104     0     111  n
 48180    61   198    19    61  1104     0      67  =
 48181    61   198    21    61  1104     0     111  sb.remaining
 48182    61   198    33    61  1104     0      59  (
 48183    61   198    34    61  1104     0      60  )
 48184    61   198    35    61  1104     0     102  ;
 48185    61   199    13    61  1104     0      31  if
 48186    61   199    16    61  1104     0      59  (
 48187    61   199    17    61  1104     0     111  n
 48188    61   199    19    61  1104     0      89  >
 48189    61   199    21    61  1104     0     111  remaining
 48190    61   199    30    61  1104     0      59  (
 48191    61   199    31    61  1104     0      60  )
 48192    61   199    32    61  1104     0      60  )
 48193    61   200    17    61  1104     0      20  throw
 48194    61   200    23    61  1104     0      15  new
 48195    61   200    27    61  1104     0     111  BufferOverflowException
 48196    61   200    50    61  1104     0      59  (
 48197    61   200    51    61  1104     0      60  )
 48198    61   200    52    61  1104     0     102  ;
 48199    61   201    13    61  1104     0     111  System.arraycopy
 48200    61   201    29    61  1104     0      59  (
 48201    61   201    30    61  1104     0     111  sb.hb
 48202    61   201    35    61  1104     0      66  ,
 48203    61   201    37    61  1104     0     111  sb.ix
 48204    61   201    42    61  1104     0      59  (
 48205    61   201    43    61  1104     0     111  sb.position
 48206    61   201    54    61  1104     0      59  (
 48207    61   201    55    61  1104     0      60  )
 48208    61   201    56    61  1104     0      60  )
 48209    61   201    57    61  1104     0      66  ,
 48210    61   202    30    61  1104     0     111  hb
 48211    61   202    32    61  1104     0      66  ,
 48212    61   202    34    61  1104     0     111  ix
 48213    61   202    36    61  1104     0      59  (
 48214    61   202    37    61  1104     0     111  position
 48215    61   202    45    61  1104     0      59  (
 48216    61   202    46    61  1104     0      60  )
 48217    61   202    47    61  1104     0      60  )
 48218    61   202    48    61  1104     0      66  ,
 48219    61   202    50    61  1104     0     111  n
 48220    61   202    51    61  1104     0      60  )
 48221    61   202    52    61  1104     0     102  ;
 48222    61   203    13    61  1104     1     111  sb.position
 48223    61   203    24    61  1104     1      59  (
 48224    61   203    25    61  1104     1     111  sb.position
 48225    61   203    36    61  1104     1      59  (
 48226    61   203    37    61  1104     1      60  )
 48227    61   203    39    61  1104     1      74  +
 48228    61   203    41    61  1104     1     111  n
 48229    61   203    42    61  1104     1      60  )
 48230    61   203    43    61  1104     1     102  ;
 48231    61   204    13    61  1104     1     111  position
 48232    61   204    21    61  1104     1      59  (
 48233    61   204    22    61  1104     1     111  position
 48234    61   204    30    61  1104     1      59  (
 48235    61   204    31    61  1104     1      60  )
 48236    61   204    33    61  1104     1      74  +
 48237    61   204    35    61  1104     1     111  n
 48238    61   204    36    61  1104     1      60  )
 48239    61   204    37    61  1104     1     102  ;
 48240    61   205     9    61  1104     0      64  }
 48241    61   205    11    61  1104     0      48  else
 48242    61   205    16    61  1104     0      31  if
 48243    61   205    19    61  1104     0      59  (
 48244    61   205    20    61  1104     0     111  src.isDirect
 48245    61   205    32    61  1104     0      59  (
 48246    61   205    33    61  1104     0      60  )
 48247    61   205    34    61  1104     0      60  )
 48248    61   205    36    61  1104     0      63  {
 48249    61   206    13    61  1104     0      36  int
 48250    61   206    17    61  1104     0     111  n
 48251    61   206    19    61  1104     0      67  =
 48252    61   206    21    61  1104     0     111  src.remaining
 48253    61   206    34    61  1104     0      59  (
 48254    61   206    35    61  1104     0      60  )
 48255    61   206    36    61  1104     0     102  ;
 48256    61   207    13    61  1104     0      31  if
 48257    61   207    16    61  1104     0      59  (
 48258    61   207    17    61  1104     0     111  n
 48259    61   207    19    61  1104     0      89  >
 48260    61   207    21    61  1104     0     111  remaining
 48261    61   207    30    61  1104     0      59  (
 48262    61   207    31    61  1104     0      60  )
 48263    61   207    32    61  1104     0      60  )
 48264    61   208    17    61  1104     0      20  throw
 48265    61   208    23    61  1104     0      15  new
 48266    61   208    27    61  1104     0     111  BufferOverflowException
 48267    61   208    50    61  1104     0      59  (
 48268    61   208    51    61  1104     0      60  )
 48269    61   208    52    61  1104     0     102  ;
 48270    61   209    13    61  1104     0     111  src.get
 48271    61   209    20    61  1104     0      59  (
 48272    61   209    21    61  1104     0     111  hb
 48273    61   209    23    61  1104     0      66  ,
 48274    61   209    25    61  1104     0     111  ix
 48275    61   209    27    61  1104     0      59  (
 48276    61   209    28    61  1104     0     111  position
 48277    61   209    36    61  1104     0      59  (
 48278    61   209    37    61  1104     0      60  )
 48279    61   209    38    61  1104     0      60  )
 48280    61   209    39    61  1104     0      66  ,
 48281    61   209    41    61  1104     0     111  n
 48282    61   209    42    61  1104     0      60  )
 48283    61   209    43    61  1104     0     102  ;
 48284    61   210    13    61  1104     0     111  position
 48285    61   210    21    61  1104     0      59  (
 48286    61   210    22    61  1104     0     111  position
 48287    61   210    30    61  1104     0      59  (
 48288    61   210    31    61  1104     0      60  )
 48289    61   210    33    61  1104     0      74  +
 48290    61   210    35    61  1104     0     111  n
 48291    61   210    36    61  1104     0      60  )
 48292    61   210    37    61  1104     0     102  ;
 48293    61   211     9    61  1104     0      64  }
 48294    61   211    11    61  1104     0      48  else
 48295    61   211    16    61  1104     0      63  {
 48296    61   212    13    61  1104     0     111  super.put
 48297    61   212    22    61  1104     0      59  (
 48298    61   212    23    61  1104     0     111  src
 48299    61   212    26    61  1104     0      60  )
 48300    61   212    27    61  1104     0     102  ;
 48301    61   213     9    61  1104     0      64  }
 48302    61   214     9    61  1104     0      19  return
 48303    61   214    16    61  1104     0      44  this
 48304    61   214    20    61  1104     0     102  ;
 48305    61   218     5    61  1104     0      64  }
 48306    61   218     5    61  1104     0    2576  ENDMETHOD
 48307    61   218     5    61  1105     0    2577  STARTMETHOD
 48308    61   220     5    61  1105     0      10  public
 48309    61   220    12    61  1105     0     111  CharBuffer
 48310    61   220    23    61  1105     0     111  compact
 48311    61   220    30    61  1105     0      59  (
 48312    61   220    31    61  1105     0      60  )
 48313    61   220    33    61  1105     0      63  {
 48314    61   222     9    61  1105     0     111  System.arraycopy
 48315    61   222    25    61  1105     0      59  (
 48316    61   222    26    61  1105     0     111  hb
 48317    61   222    28    61  1105     0      66  ,
 48318    61   222    30    61  1105     0     111  ix
 48319    61   222    32    61  1105     0      59  (
 48320    61   222    33    61  1105     0     111  position
 48321    61   222    41    61  1105     0      59  (
 48322    61   222    42    61  1105     0      60  )
 48323    61   222    43    61  1105     0      60  )
 48324    61   222    44    61  1105     0      66  ,
 48325    61   222    46    61  1105     0     111  hb
 48326    61   222    48    61  1105     0      66  ,
 48327    61   222    50    61  1105     0     111  ix
 48328    61   222    52    61  1105     0      59  (
 48329    61   222    53    61  1105     0     112  0
 48330    61   222    54    61  1105     0      60  )
 48331    61   222    55    61  1105     0      66  ,
 48332    61   222    57    61  1105     0     111  remaining
 48333    61   222    66    61  1105     0      59  (
 48334    61   222    67    61  1105     0      60  )
 48335    61   222    68    61  1105     0      60  )
 48336    61   222    69    61  1105     0     102  ;
 48337    61   223     9    61  1105     1     111  position
 48338    61   223    17    61  1105     1      59  (
 48339    61   223    18    61  1105     1     111  remaining
 48340    61   223    27    61  1105     1      59  (
 48341    61   223    28    61  1105     1      60  )
 48342    61   223    29    61  1105     1      60  )
 48343    61   223    30    61  1105     1     102  ;
 48344    61   224     9    61  1105     1     111  limit
 48345    61   224    14    61  1105     1      59  (
 48346    61   224    15    61  1105     1     111  capacity
 48347    61   224    23    61  1105     1      59  (
 48348    61   224    24    61  1105     1      60  )
 48349    61   224    25    61  1105     1      60  )
 48350    61   224    26    61  1105     1     102  ;
 48351    61   225     9    61  1105     0     111  clearMark
 48352    61   225    18    61  1105     0      59  (
 48353    61   225    19    61  1105     0      60  )
 48354    61   225    20    61  1105     0     102  ;
 48355    61   226     9    61  1105     0      19  return
 48356    61   226    16    61  1105     0      44  this
 48357    61   226    20    61  1105     0     102  ;
 48358    61   230     5    61  1105     0      64  }
 48359    61   230     5    61  1105     0    2578  ENDMETHOD
 48360    61   230     5    61  1106     0    2579  STARTMETHOD
 48361    61   559     5    61  1106     0     111  String
 48362    61   559    12    61  1106     0     111  toString
 48363    61   559    20    61  1106     0      59  (
 48364    61   559    21    61  1106     0      36  int
 48365    61   559    25    61  1106     0     111  start
 48366    61   559    30    61  1106     0      66  ,
 48367    61   559    32    61  1106     0      36  int
 48368    61   559    36    61  1106     0     111  end
 48369    61   559    39    61  1106     0      60  )
 48370    61   559    41    61  1106     0      63  {
 48371    61   560     9    61  1106     0      35  try
 48372    61   560    13    61  1106     0      63  {
 48373    61   561    13    61  1106     0      19  return
 48374    61   561    20    61  1106     0      15  new
 48375    61   561    24    61  1106     0     111  String
 48376    61   561    30    61  1106     0      59  (
 48377    61   561    31    61  1106     0     111  hb
 48378    61   561    33    61  1106     0      66  ,
 48379    61   561    35    61  1106     0     111  start
 48380    61   561    41    61  1106     0      74  +
 48381    61   561    43    61  1106     0     111  offset
 48382    61   561    49    61  1106     0      66  ,
 48383    61   561    51    61  1106     0     111  end
 48384    61   561    55    61  1106     0      77  -
 48385    61   561    57    61  1106     0     111  start
 48386    61   561    62    61  1106     0      60  )
 48387    61   561    63    61  1106     0     102  ;
 48388    61   562     9    61  1106     0      64  }
 48389    61   562    11    61  1106     0      34  catch
 48390    61   562    17    61  1106     0      59  (
 48391    61   562    18    61  1106     0     111  StringIndexOutOfBoundsException
 48392    61   562    50    61  1106     0     111  x
 48393    61   562    51    61  1106     0      60  )
 48394    61   562    53    61  1106     0      63  {
 48395    61   563    13    61  1106     0      20  throw
 48396    61   563    19    61  1106     0      15  new
 48397    61   563    23    61  1106     0     111  IndexOutOfBoundsException
 48398    61   563    48    61  1106     0      59  (
 48399    61   563    49    61  1106     0      60  )
 48400    61   563    50    61  1106     0     102  ;
 48401    61   564     9    61  1106     0      64  }
 48402    61   565     5    61  1106     0      64  }
 48403    61   565     5    61  1106     0    2580  ENDMETHOD
 48404    61   565     5    61  1107     0    2581  STARTMETHOD
 48405    61   570     5    61  1107     0      10  public
 48406    61   570    12    61  1107     0     111  CharSequence
 48407    61   570    25    61  1107     0     111  subSequence
 48408    61   570    36    61  1107     0      59  (
 48409    61   570    37    61  1107     0      36  int
 48410    61   570    41    61  1107     0     111  start
 48411    61   570    46    61  1107     0      66  ,
 48412    61   570    48    61  1107     0      36  int
 48413    61   570    52    61  1107     0     111  end
 48414    61   570    55    61  1107     0      60  )
 48415    61   570    57    61  1107     0      63  {
 48416    61   571     9    61  1107     0      31  if
 48417    61   571    12    61  1107     0      59  (
 48418    61   571    13    61  1107     0      59  (
 48419    61   571    14    61  1107     0     111  start
 48420    61   571    20    61  1107     0      93  <
 48421    61   571    22    61  1107     0     112  0
 48422    61   571    23    61  1107     0      60  )
 48423    61   572    13    61  1107     0      98  ||
 48424    61   572    16    61  1107     0      59  (
 48425    61   572    17    61  1107     0     111  end
 48426    61   572    21    61  1107     0      89  >
 48427    61   572    23    61  1107     0     111  length
 48428    61   572    29    61  1107     0      59  (
 48429    61   572    30    61  1107     0      60  )
 48430    61   572    31    61  1107     0      60  )
 48431    61   573    13    61  1107     0      98  ||
 48432    61   573    16    61  1107     0      59  (
 48433    61   573    17    61  1107     0     111  start
 48434    61   573    23    61  1107     0      89  >
 48435    61   573    25    61  1107     0     111  end
 48436    61   573    28    61  1107     0      60  )
 48437    61   573    29    61  1107     0      60  )
 48438    61   574    13    61  1107     0      20  throw
 48439    61   574    19    61  1107     0      15  new
 48440    61   574    23    61  1107     0     111  IndexOutOfBoundsException
 48441    61   574    48    61  1107     0      59  (
 48442    61   574    49    61  1107     0      60  )
 48443    61   574    50    61  1107     0     102  ;
 48444    61   575     9    61  1107     0      36  int
 48445    61   575    13    61  1107     0     111  len
 48446    61   575    17    61  1107     0      67  =
 48447    61   575    19    61  1107     0     111  end
 48448    61   575    23    61  1107     0      77  -
 48449    61   575    25    61  1107     0     111  start
 48450    61   575    30    61  1107     0     102  ;
 48451    61   576     9    61  1107     0      19  return
 48452    61   576    16    61  1107     0      15  new
 48453    61   576    20    61  1107     0     111  HeapCharBuffer
 48454    61   576    34    61  1107     0      59  (
 48455    61   576    35    61  1107     0     111  hb
 48456    61   576    37    61  1107     0      66  ,
 48457    61   577    39    61  1107     0      77  -
 48458    61   577    40    61  1107     0     112  1
 48459    61   577    41    61  1107     0      66  ,
 48460    61   577    43    61  1107     0     112  0
 48461    61   577    44    61  1107     0      66  ,
 48462    61   577    46    61  1107     0     111  len
 48463    61   577    49    61  1107     0      66  ,
 48464    61   577    51    61  1107     0     111  len
 48465    61   577    54    61  1107     0      66  ,
 48466    61   578    39    61  1107     0     111  offset
 48467    61   578    46    61  1107     0      74  +
 48468    61   578    48    61  1107     0     111  position
 48469    61   578    56    61  1107     0      59  (
 48470    61   578    57    61  1107     0      60  )
 48471    61   578    59    61  1107     0      74  +
 48472    61   578    61    61  1107     0     111  start
 48473    61   578    66    61  1107     0      60  )
 48474    61   578    67    61  1107     0     102  ;
 48475    61   579     5    61  1107     0      64  }
 48476    61   579     5    61  1107     0    2582  ENDMETHOD
 48477    61   579     5    61  1108     0    2583  STARTMETHOD
 48478    61   586     5    61  1108     0      10  public
 48479    61   586    12    61  1108     0     111  ByteOrder
 48480    61   586    22    61  1108     0     111  order
 48481    61   586    27    61  1108     0      59  (
 48482    61   586    28    61  1108     0      60  )
 48483    61   586    30    61  1108     0      63  {
 48484    61   587     9    61  1108     0      19  return
 48485    61   587    16    61  1108     0     111  ByteOrder.nativeOrder
 48486    61   587    37    61  1108     0      59  (
 48487    61   587    38    61  1108     0      60  )
 48488    61   587    39    61  1108     0     102  ;
 48489    61   588     5    61  1108     0      64  }
 48490    61   588     5    61  1108     0    2584  ENDMETHOD
 48491    61   592     1    61    -1     0      64  }
 48492    61   592     1    61    -1     1    2585  ENDCLASS
 48493    61   592     1    -1    -1     1    2586  ENDFILE C:\javasrc\java\nio\HeapCharBuffer.java
 48494    62     1     1    -1    -1     1    2587  STARTFILE C:\javasrc\java\nio\HeapCharBufferR.java
 48495    62    28     1    -1    -1     0       5  package
 48496    62    28     9    -1    -1     0     111  java.nio
 48497    62    28    17    -1    -1     0     102  ;
 48498    62    42     1    62    -1     0    2588  STARTCLASS
 48499    62    42     1    62    -1     0      24  class
 48500    62    42     7    62    -1     0     111  HeapCharBufferR
 48501    62    43     5    62    -1     0      38  extends
 48502    62    43    13    62    -1     0     111  HeapCharBuffer
 48503    62    44     1    62    -1     0      63  {
 48504    62    44     1    62  1109     0    2589  STARTMETHOD
 48505    62    55     5    62  1109     0     111  HeapCharBufferR
 48506    62    55    20    62  1109     0      59  (
 48507    62    55    21    62  1109     0      36  int
 48508    62    55    25    62  1109     0     111  cap
 48509    62    55    28    62  1109     0      66  ,
 48510    62    55    30    62  1109     0      36  int
 48511    62    55    34    62  1109     0     111  lim
 48512    62    55    37    62  1109     0      60  )
 48513    62    55    39    62  1109     0      63  {
 48514    62    63     9    62  1109     0      27  super
 48515    62    63    14    62  1109     0      59  (
 48516    62    63    15    62  1109     0     111  cap
 48517    62    63    18    62  1109     0      66  ,
 48518    62    63    20    62  1109     0     111  lim
 48519    62    63    23    62  1109     0      60  )
 48520    62    63    24    62  1109     0     102  ;
 48521    62    64     9    62  1109     0     111  this.isReadOnly
 48522    62    64    25    62  1109     0      67  =
 48523    62    64    27    62  1109     0      52  true
 48524    62    64    31    62  1109     0     102  ;
 48525    62    66     5    62  1109     0      64  }
 48526    62    66     5    62  1109     0    2590  ENDMETHOD
 48527    62    66     5    62  1110     0    2591  STARTMETHOD
 48528    62    68     5    62  1110     0     111  HeapCharBufferR
 48529    62    68    20    62  1110     0      59  (
 48530    62    68    21    62  1110     0      40  char
 48531    62    68    25    62  1110     0      61  [
 48532    62    68    26    62  1110     0      62  ]
 48533    62    68    28    62  1110     0     111  buf
 48534    62    68    31    62  1110     0      66  ,
 48535    62    68    33    62  1110     0      36  int
 48536    62    68    37    62  1110     0     111  off
 48537    62    68    40    62  1110     0      66  ,
 48538    62    68    42    62  1110     0      36  int
 48539    62    68    46    62  1110     0     111  len
 48540    62    68    49    62  1110     0      60  )
 48541    62    68    51    62  1110     0      63  {
 48542    62    76     9    62  1110     0      27  super
 48543    62    76    14    62  1110     0      59  (
 48544    62    76    15    62  1110     0     111  buf
 48545    62    76    18    62  1110     0      66  ,
 48546    62    76    20    62  1110     0     111  off
 48547    62    76    23    62  1110     0      66  ,
 48548    62    76    25    62  1110     0     111  len
 48549    62    76    28    62  1110     0      60  )
 48550    62    76    29    62  1110     0     102  ;
 48551    62    77     9    62  1110     0     111  this.isReadOnly
 48552    62    77    25    62  1110     0      67  =
 48553    62    77    27    62  1110     0      52  true
 48554    62    77    31    62  1110     0     102  ;
 48555    62    79     5    62  1110     0      64  }
 48556    62    79     5    62  1110     0    2592  ENDMETHOD
 48557    62    79     5    62  1111     0    2593  STARTMETHOD
 48558    62    81     5    62  1111     0      23  protected
 48559    62    81    15    62  1111     0     111  HeapCharBufferR
 48560    62    81    30    62  1111     0      59  (
 48561    62    81    31    62  1111     0      40  char
 48562    62    81    35    62  1111     0      61  [
 48563    62    81    36    62  1111     0      62  ]
 48564    62    81    38    62  1111     0     111  buf
 48565    62    81    41    62  1111     0      66  ,
 48566    62    82    36    62  1111     0      36  int
 48567    62    82    40    62  1111     0     111  mark
 48568    62    82    44    62  1111     0      66  ,
 48569    62    82    46    62  1111     0      36  int
 48570    62    82    50    62  1111     0     111  pos
 48571    62    82    53    62  1111     0      66  ,
 48572    62    82    55    62  1111     0      36  int
 48573    62    82    59    62  1111     0     111  lim
 48574    62    82    62    62  1111     0      66  ,
 48575    62    82    64    62  1111     0      36  int
 48576    62    82    68    62  1111     0     111  cap
 48577    62    82    71    62  1111     0      66  ,
 48578    62    83    36    62  1111     0      36  int
 48579    62    83    40    62  1111     0     111  off
 48580    62    83    43    62  1111     0      60  )
 48581    62    84     5    62  1111     0      63  {
 48582    62    92     9    62  1111     0      27  super
 48583    62    92    14    62  1111     0      59  (
 48584    62    92    15    62  1111     0     111  buf
 48585    62    92    18    62  1111     0      66  ,
 48586    62    92    20    62  1111     0     111  mark
 48587    62    92    24    62  1111     0      66  ,
 48588    62    92    26    62  1111     0     111  pos
 48589    62    92    29    62  1111     0      66  ,
 48590    62    92    31    62  1111     0     111  lim
 48591    62    92    34    62  1111     0      66  ,
 48592    62    92    36    62  1111     0     111  cap
 48593    62    92    39    62  1111     0      66  ,
 48594    62    92    41    62  1111     0     111  off
 48595    62    92    44    62  1111     0      60  )
 48596    62    92    45    62  1111     0     102  ;
 48597    62    93     9    62  1111     0     111  this.isReadOnly
 48598    62    93    25    62  1111     0      67  =
 48599    62    93    27    62  1111     0      52  true
 48600    62    93    31    62  1111     0     102  ;
 48601    62    95     5    62  1111     0      64  }
 48602    62    95     5    62  1111     0    2594  ENDMETHOD
 48603    62    95     5    62  1112     0    2595  STARTMETHOD
 48604    62    97     5    62  1112     0      10  public
 48605    62    97    12    62  1112     0     111  CharBuffer
 48606    62    97    23    62  1112     0     111  slice
 48607    62    97    28    62  1112     0      59  (
 48608    62    97    29    62  1112     0      60  )
 48609    62    97    31    62  1112     0      63  {
 48610    62    98     9    62  1112     0      19  return
 48611    62    98    16    62  1112     0      15  new
 48612    62    98    20    62  1112     0     111  HeapCharBufferR
 48613    62    98    35    62  1112     0      59  (
 48614    62    98    36    62  1112     0     111  hb
 48615    62    98    38    62  1112     0      66  ,
 48616    62    99    41    62  1112     0      77  -
 48617    62    99    42    62  1112     0     112  1
 48618    62    99    43    62  1112     0      66  ,
 48619    62   100    41    62  1112     0     112  0
 48620    62   100    42    62  1112     0      66  ,
 48621    62   101    41    62  1112     1     111  this.remaining
 48622    62   101    55    62  1112     1      59  (
 48623    62   101    56    62  1112     1      60  )
 48624    62   101    57    62  1112     1      66  ,
 48625    62   102    41    62  1112     1     111  this.remaining
 48626    62   102    55    62  1112     1      59  (
 48627    62   102    56    62  1112     1      60  )
 48628    62   102    57    62  1112     1      66  ,
 48629    62   103    41    62  1112     0     111  this.position
 48630    62   103    54    62  1112     0      59  (
 48631    62   103    55    62  1112     0      60  )
 48632    62   103    57    62  1112     0      74  +
 48633    62   103    59    62  1112     0     111  offset
 48634    62   103    65    62  1112     0      60  )
 48635    62   103    66    62  1112     0     102  ;
 48636    62   104     5    62  1112     0      64  }
 48637    62   104     5    62  1112     0    2596  ENDMETHOD
 48638    62   104     5    62  1113     0    2597  STARTMETHOD
 48639    62   106     5    62  1113     0      10  public
 48640    62   106    12    62  1113     0     111  CharBuffer
 48641    62   106    23    62  1113     0     111  duplicate
 48642    62   106    32    62  1113     0      59  (
 48643    62   106    33    62  1113     0      60  )
 48644    62   106    35    62  1113     0      63  {
 48645    62   107     9    62  1113     0      19  return
 48646    62   107    16    62  1113     0      15  new
 48647    62   107    20    62  1113     0     111  HeapCharBufferR
 48648    62   107    35    62  1113     0      59  (
 48649    62   107    36    62  1113     0     111  hb
 48650    62   107    38    62  1113     0      66  ,
 48651    62   108    41    62  1113     1     111  this.markValue
 48652    62   108    55    62  1113     1      59  (
 48653    62   108    56    62  1113     1      60  )
 48654    62   108    57    62  1113     1      66  ,
 48655    62   109    41    62  1113     1     111  this.position
 48656    62   109    54    62  1113     1      59  (
 48657    62   109    55    62  1113     1      60  )
 48658    62   109    56    62  1113     1      66  ,
 48659    62   110    41    62  1113     1     111  this.limit
 48660    62   110    51    62  1113     1      59  (
 48661    62   110    52    62  1113     1      60  )
 48662    62   110    53    62  1113     1      66  ,
 48663    62   111    41    62  1113     1     111  this.capacity
 48664    62   111    54    62  1113     1      59  (
 48665    62   111    55    62  1113     1      60  )
 48666    62   111    56    62  1113     1      66  ,
 48667    62   112    41    62  1113     0     111  offset
 48668    62   112    47    62  1113     0      60  )
 48669    62   112    48    62  1113     0     102  ;
 48670    62   113     5    62  1113     0      64  }
 48671    62   113     5    62  1113     0    2598  ENDMETHOD
 48672    62   113     5    62  1114     0    2599  STARTMETHOD
 48673    62   115     5    62  1114     0      10  public
 48674    62   115    12    62  1114     0     111  CharBuffer
 48675    62   115    23    62  1114     0     111  asReadOnlyBuffer
 48676    62   115    39    62  1114     0      59  (
 48677    62   115    40    62  1114     0      60  )
 48678    62   115    42    62  1114     0      63  {
 48679    62   124     9    62  1114     0      19  return
 48680    62   124    16    62  1114     0     111  duplicate
 48681    62   124    25    62  1114     0      59  (
 48682    62   124    26    62  1114     0      60  )
 48683    62   124    27    62  1114     0     102  ;
 48684    62   126     5    62  1114     0      64  }
 48685    62   126     5    62  1114     0    2600  ENDMETHOD
 48686    62   126     5    62  1115     0    2601  STARTMETHOD
 48687    62   157     5    62  1115     0      10  public
 48688    62   157    12    62  1115     0      39  boolean
 48689    62   157    20    62  1115     0     111  isReadOnly
 48690    62   157    30    62  1115     0      59  (
 48691    62   157    31    62  1115     0      60  )
 48692    62   157    33    62  1115     0      63  {
 48693    62   158     9    62  1115     0      19  return
 48694    62   158    16    62  1115     0      52  true
 48695    62   158    20    62  1115     0     102  ;
 48696    62   159     5    62  1115     0      64  }
 48697    62   159     5    62  1115     0    2602  ENDMETHOD
 48698    62   159     5    62  1116     0    2603  STARTMETHOD
 48699    62   161     5    62  1116     0      10  public
 48700    62   161    12    62  1116     0     111  CharBuffer
 48701    62   161    23    62  1116     0     111  put
 48702    62   161    26    62  1116     0      59  (
 48703    62   161    27    62  1116     0      40  char
 48704    62   161    32    62  1116     0     111  x
 48705    62   161    33    62  1116     0      60  )
 48706    62   161    35    62  1116     0      63  {
 48707    62   166     9    62  1116     0      20  throw
 48708    62   166    15    62  1116     0      15  new
 48709    62   166    19    62  1116     0     111  ReadOnlyBufferException
 48710    62   166    42    62  1116     0      59  (
 48711    62   166    43    62  1116     0      60  )
 48712    62   166    44    62  1116     0     102  ;
 48713    62   168     5    62  1116     0      64  }
 48714    62   168     5    62  1116     0    2604  ENDMETHOD
 48715    62   168     5    62  1117     0    2605  STARTMETHOD
 48716    62   170     5    62  1117     0      10  public
 48717    62   170    12    62  1117     0     111  CharBuffer
 48718    62   170    23    62  1117     0     111  put
 48719    62   170    26    62  1117     0      59  (
 48720    62   170    27    62  1117     0      36  int
 48721    62   170    31    62  1117     0     111  i
 48722    62   170    32    62  1117     0      66  ,
 48723    62   170    34    62  1117     0      40  char
 48724    62   170    39    62  1117     0     111  x
 48725    62   170    40    62  1117     0      60  )
 48726    62   170    42    62  1117     0      63  {
 48727    62   175     9    62  1117     0      20  throw
 48728    62   175    15    62  1117     0      15  new
 48729    62   175    19    62  1117     0     111  ReadOnlyBufferException
 48730    62   175    42    62  1117     0      59  (
 48731    62   175    43    62  1117     0      60  )
 48732    62   175    44    62  1117     0     102  ;
 48733    62   177     5    62  1117     0      64  }
 48734    62   177     5    62  1117     0    2606  ENDMETHOD
 48735    62   177     5    62  1118     0    2607  STARTMETHOD
 48736    62   179     5    62  1118     0      10  public
 48737    62   179    12    62  1118     0     111  CharBuffer
 48738    62   179    23    62  1118     0     111  put
 48739    62   179    26    62  1118     0      59  (
 48740    62   179    27    62  1118     0      40  char
 48741    62   179    31    62  1118     0      61  [
 48742    62   179    32    62  1118     0      62  ]
 48743    62   179    34    62  1118     0     111  src
 48744    62   179    37    62  1118     0      66  ,
 48745    62   179    39    62  1118     0      36  int
 48746    62   179    43    62  1118     0     111  offset
 48747    62   179    49    62  1118     0      66  ,
 48748    62   179    51    62  1118     0      36  int
 48749    62   179    55    62  1118     0     111  length
 48750    62   179    61    62  1118     0      60  )
 48751    62   179    63    62  1118     0      63  {
 48752    62   188     9    62  1118     0      20  throw
 48753    62   188    15    62  1118     0      15  new
 48754    62   188    19    62  1118     0     111  ReadOnlyBufferException
 48755    62   188    42    62  1118     0      59  (
 48756    62   188    43    62  1118     0      60  )
 48757    62   188    44    62  1118     0     102  ;
 48758    62   190     5    62  1118     0      64  }
 48759    62   190     5    62  1118     0    2608  ENDMETHOD
 48760    62   190     5    62  1119     0    2609  STARTMETHOD
 48761    62   192     5    62  1119     0      10  public
 48762    62   192    12    62  1119     0     111  CharBuffer
 48763    62   192    23    62  1119     0     111  put
 48764    62   192    26    62  1119     0      59  (
 48765    62   192    27    62  1119     0     111  CharBuffer
 48766    62   192    38    62  1119     0     111  src
 48767    62   192    41    62  1119     0      60  )
 48768    62   192    43    62  1119     0      63  {
 48769    62   216     9    62  1119     0      20  throw
 48770    62   216    15    62  1119     0      15  new
 48771    62   216    19    62  1119     0     111  ReadOnlyBufferException
 48772    62   216    42    62  1119     0      59  (
 48773    62   216    43    62  1119     0      60  )
 48774    62   216    44    62  1119     0     102  ;
 48775    62   218     5    62  1119     0      64  }
 48776    62   218     5    62  1119     0    2610  ENDMETHOD
 48777    62   218     5    62  1120     0    2611  STARTMETHOD
 48778    62   220     5    62  1120     0      10  public
 48779    62   220    12    62  1120     0     111  CharBuffer
 48780    62   220    23    62  1120     0     111  compact
 48781    62   220    30    62  1120     0      59  (
 48782    62   220    31    62  1120     0      60  )
 48783    62   220    33    62  1120     0      63  {
 48784    62   228     9    62  1120     0      20  throw
 48785    62   228    15    62  1120     0      15  new
 48786    62   228    19    62  1120     0     111  ReadOnlyBufferException
 48787    62   228    42    62  1120     0      59  (
 48788    62   228    43    62  1120     0      60  )
 48789    62   228    44    62  1120     0     102  ;
 48790    62   230     5    62  1120     0      64  }
 48791    62   230     5    62  1120     0    2612  ENDMETHOD
 48792    62   230     5    62  1121     0    2613  STARTMETHOD
 48793    62   559     5    62  1121     0     111  String
 48794    62   559    12    62  1121     0     111  toString
 48795    62   559    20    62  1121     0      59  (
 48796    62   559    21    62  1121     0      36  int
 48797    62   559    25    62  1121     0     111  start
 48798    62   559    30    62  1121     0      66  ,
 48799    62   559    32    62  1121     0      36  int
 48800    62   559    36    62  1121     0     111  end
 48801    62   559    39    62  1121     0      60  )
 48802    62   559    41    62  1121     0      63  {
 48803    62   560     9    62  1121     0      35  try
 48804    62   560    13    62  1121     0      63  {
 48805    62   561    13    62  1121     0      19  return
 48806    62   561    20    62  1121     0      15  new
 48807    62   561    24    62  1121     0     111  String
 48808    62   561    30    62  1121     0      59  (
 48809    62   561    31    62  1121     0     111  hb
 48810    62   561    33    62  1121     0      66  ,
 48811    62   561    35    62  1121     0     111  start
 48812    62   561    41    62  1121     0      74  +
 48813    62   561    43    62  1121     0     111  offset
 48814    62   561    49    62  1121     0      66  ,
 48815    62   561    51    62  1121     0     111  end
 48816    62   561    55    62  1121     0      77  -
 48817    62   561    57    62  1121     0     111  start
 48818    62   561    62    62  1121     0      60  )
 48819    62   561    63    62  1121     0     102  ;
 48820    62   562     9    62  1121     0      64  }
 48821    62   562    11    62  1121     0      34  catch
 48822    62   562    17    62  1121     0      59  (
 48823    62   562    18    62  1121     0     111  StringIndexOutOfBoundsException
 48824    62   562    50    62  1121     0     111  x
 48825    62   562    51    62  1121     0      60  )
 48826    62   562    53    62  1121     0      63  {
 48827    62   563    13    62  1121     0      20  throw
 48828    62   563    19    62  1121     0      15  new
 48829    62   563    23    62  1121     0     111  IndexOutOfBoundsException
 48830    62   563    48    62  1121     0      59  (
 48831    62   563    49    62  1121     0      60  )
 48832    62   563    50    62  1121     0     102  ;
 48833    62   564     9    62  1121     0      64  }
 48834    62   565     5    62  1121     0      64  }
 48835    62   565     5    62  1121     0    2614  ENDMETHOD
 48836    62   565     5    62  1122     0    2615  STARTMETHOD
 48837    62   570     5    62  1122     0      10  public
 48838    62   570    12    62  1122     0     111  CharSequence
 48839    62   570    25    62  1122     0     111  subSequence
 48840    62   570    36    62  1122     0      59  (
 48841    62   570    37    62  1122     0      36  int
 48842    62   570    41    62  1122     0     111  start
 48843    62   570    46    62  1122     0      66  ,
 48844    62   570    48    62  1122     0      36  int
 48845    62   570    52    62  1122     0     111  end
 48846    62   570    55    62  1122     0      60  )
 48847    62   570    57    62  1122     0      63  {
 48848    62   571     9    62  1122     0      31  if
 48849    62   571    12    62  1122     0      59  (
 48850    62   571    13    62  1122     0      59  (
 48851    62   571    14    62  1122     0     111  start
 48852    62   571    20    62  1122     0      93  <
 48853    62   571    22    62  1122     0     112  0
 48854    62   571    23    62  1122     0      60  )
 48855    62   572    13    62  1122     0      98  ||
 48856    62   572    16    62  1122     0      59  (
 48857    62   572    17    62  1122     0     111  end
 48858    62   572    21    62  1122     0      89  >
 48859    62   572    23    62  1122     0     111  length
 48860    62   572    29    62  1122     0      59  (
 48861    62   572    30    62  1122     0      60  )
 48862    62   572    31    62  1122     0      60  )
 48863    62   573    13    62  1122     0      98  ||
 48864    62   573    16    62  1122     0      59  (
 48865    62   573    17    62  1122     0     111  start
 48866    62   573    23    62  1122     0      89  >
 48867    62   573    25    62  1122     0     111  end
 48868    62   573    28    62  1122     0      60  )
 48869    62   573    29    62  1122     0      60  )
 48870    62   574    13    62  1122     0      20  throw
 48871    62   574    19    62  1122     0      15  new
 48872    62   574    23    62  1122     0     111  IndexOutOfBoundsException
 48873    62   574    48    62  1122     0      59  (
 48874    62   574    49    62  1122     0      60  )
 48875    62   574    50    62  1122     0     102  ;
 48876    62   575     9    62  1122     0      36  int
 48877    62   575    13    62  1122     0     111  len
 48878    62   575    17    62  1122     0      67  =
 48879    62   575    19    62  1122     0     111  end
 48880    62   575    23    62  1122     0      77  -
 48881    62   575    25    62  1122     0     111  start
 48882    62   575    30    62  1122     0     102  ;
 48883    62   576     9    62  1122     0      19  return
 48884    62   576    16    62  1122     0      15  new
 48885    62   576    20    62  1122     0     111  HeapCharBufferR
 48886    62   576    35    62  1122     0      59  (
 48887    62   576    36    62  1122     0     111  hb
 48888    62   576    38    62  1122     0      66  ,
 48889    62   577    39    62  1122     0      77  -
 48890    62   577    40    62  1122     0     112  1
 48891    62   577    41    62  1122     0      66  ,
 48892    62   577    43    62  1122     0     112  0
 48893    62   577    44    62  1122     0      66  ,
 48894    62   577    46    62  1122     0     111  len
 48895    62   577    49    62  1122     0      66  ,
 48896    62   577    51    62  1122     0     111  len
 48897    62   577    54    62  1122     0      66  ,
 48898    62   578    39    62  1122     0     111  offset
 48899    62   578    46    62  1122     0      74  +
 48900    62   578    48    62  1122     0     111  position
 48901    62   578    56    62  1122     0      59  (
 48902    62   578    57    62  1122     0      60  )
 48903    62   578    59    62  1122     0      74  +
 48904    62   578    61    62  1122     0     111  start
 48905    62   578    66    62  1122     0      60  )
 48906    62   578    67    62  1122     0     102  ;
 48907    62   579     5    62  1122     0      64  }
 48908    62   579     5    62  1122     0    2616  ENDMETHOD
 48909    62   579     5    62  1123     0    2617  STARTMETHOD
 48910    62   586     5    62  1123     0      10  public
 48911    62   586    12    62  1123     0     111  ByteOrder
 48912    62   586    22    62  1123     0     111  order
 48913    62   586    27    62  1123     0      59  (
 48914    62   586    28    62  1123     0      60  )
 48915    62   586    30    62  1123     0      63  {
 48916    62   587     9    62  1123     0      19  return
 48917    62   587    16    62  1123     0     111  ByteOrder.nativeOrder
 48918    62   587    37    62  1123     0      59  (
 48919    62   587    38    62  1123     0      60  )
 48920    62   587    39    62  1123     0     102  ;
 48921    62   588     5    62  1123     0      64  }
 48922    62   588     5    62  1123     0    2618  ENDMETHOD
 48923    62   592     1    62    -1     0      64  }
 48924    62   592     1    62    -1     1    2619  ENDCLASS
 48925    62   592     1    -1    -1     1    2620  ENDFILE C:\javasrc\java\nio\HeapCharBufferR.java
 48926    63     1     1    -1    -1     1    2621  STARTFILE C:\javasrc\java\nio\HeapDoubleBuffer.java
 48927    63    28     1    -1    -1     0       5  package
 48928    63    28     9    -1    -1     0     111  java.nio
 48929    63    28    17    -1    -1     0     102  ;
 48930    63    42     1    63    -1     0    2622  STARTCLASS
 48931    63    42     1    63    -1     0      24  class
 48932    63    42     7    63    -1     0     111  HeapDoubleBuffer
 48933    63    43     5    63    -1     0      38  extends
 48934    63    43    13    63    -1     0     111  DoubleBuffer
 48935    63    44     1    63    -1     0      63  {
 48936    63    44     1    63  1124     0    2623  STARTMETHOD
 48937    63    55     5    63  1124     0     111  HeapDoubleBuffer
 48938    63    55    21    63  1124     0      59  (
 48939    63    55    22    63  1124     0      36  int
 48940    63    55    26    63  1124     0     111  cap
 48941    63    55    29    63  1124     0      66  ,
 48942    63    55    31    63  1124     0      36  int
 48943    63    55    35    63  1124     0     111  lim
 48944    63    55    38    63  1124     0      60  )
 48945    63    55    40    63  1124     0      63  {
 48946    63    57     9    63  1124     0      27  super
 48947    63    57    14    63  1124     0      59  (
 48948    63    57    15    63  1124     0      77  -
 48949    63    57    16    63  1124     0     112  1
 48950    63    57    17    63  1124     0      66  ,
 48951    63    57    19    63  1124     0     112  0
 48952    63    57    20    63  1124     0      66  ,
 48953    63    57    22    63  1124     0     111  lim
 48954    63    57    25    63  1124     0      66  ,
 48955    63    57    27    63  1124     0     111  cap
 48956    63    57    30    63  1124     0      66  ,
 48957    63    57    32    63  1124     0      15  new
 48958    63    57    36    63  1124     0      32  double
 48959    63    57    42    63  1124     0      61  [
 48960    63    57    43    63  1124     0     111  cap
 48961    63    57    46    63  1124     0      62  ]
 48962    63    57    47    63  1124     0      66  ,
 48963    63    57    49    63  1124     0     112  0
 48964    63    57    50    63  1124     0      60  )
 48965    63    57    51    63  1124     0     102  ;
 48966    63    66     5    63  1124     0      64  }
 48967    63    66     5    63  1124     0    2624  ENDMETHOD
 48968    63    66     5    63  1125     0    2625  STARTMETHOD
 48969    63    68     5    63  1125     0     111  HeapDoubleBuffer
 48970    63    68    21    63  1125     0      59  (
 48971    63    68    22    63  1125     0      32  double
 48972    63    68    28    63  1125     0      61  [
 48973    63    68    29    63  1125     0      62  ]
 48974    63    68    31    63  1125     0     111  buf
 48975    63    68    34    63  1125     0      66  ,
 48976    63    68    36    63  1125     0      36  int
 48977    63    68    40    63  1125     0     111  off
 48978    63    68    43    63  1125     0      66  ,
 48979    63    68    45    63  1125     0      36  int
 48980    63    68    49    63  1125     0     111  len
 48981    63    68    52    63  1125     0      60  )
 48982    63    68    54    63  1125     0      63  {
 48983    63    70     9    63  1125     0      27  super
 48984    63    70    14    63  1125     0      59  (
 48985    63    70    15    63  1125     0      77  -
 48986    63    70    16    63  1125     0     112  1
 48987    63    70    17    63  1125     0      66  ,
 48988    63    70    19    63  1125     0     111  off
 48989    63    70    22    63  1125     0      66  ,
 48990    63    70    24    63  1125     0     111  off
 48991    63    70    28    63  1125     0      74  +
 48992    63    70    30    63  1125     0     111  len
 48993    63    70    33    63  1125     0      66  ,
 48994    63    70    35    63  1125     0     111  buf.length
 48995    63    70    45    63  1125     0      66  ,
 48996    63    70    47    63  1125     0     111  buf
 48997    63    70    50    63  1125     0      66  ,
 48998    63    70    52    63  1125     0     112  0
 48999    63    70    53    63  1125     0      60  )
 49000    63    70    54    63  1125     0     102  ;
 49001    63    79     5    63  1125     0      64  }
 49002    63    79     5    63  1125     0    2626  ENDMETHOD
 49003    63    79     5    63  1126     0    2627  STARTMETHOD
 49004    63    81     5    63  1126     0      23  protected
 49005    63    81    15    63  1126     0     111  HeapDoubleBuffer
 49006    63    81    31    63  1126     0      59  (
 49007    63    81    32    63  1126     0      32  double
 49008    63    81    38    63  1126     0      61  [
 49009    63    81    39    63  1126     0      62  ]
 49010    63    81    41    63  1126     0     111  buf
 49011    63    81    44    63  1126     0      66  ,
 49012    63    82    36    63  1126     0      36  int
 49013    63    82    40    63  1126     0     111  mark
 49014    63    82    44    63  1126     0      66  ,
 49015    63    82    46    63  1126     0      36  int
 49016    63    82    50    63  1126     0     111  pos
 49017    63    82    53    63  1126     0      66  ,
 49018    63    82    55    63  1126     0      36  int
 49019    63    82    59    63  1126     0     111  lim
 49020    63    82    62    63  1126     0      66  ,
 49021    63    82    64    63  1126     0      36  int
 49022    63    82    68    63  1126     0     111  cap
 49023    63    82    71    63  1126     0      66  ,
 49024    63    83    36    63  1126     0      36  int
 49025    63    83    40    63  1126     0     111  off
 49026    63    83    43    63  1126     0      60  )
 49027    63    84     5    63  1126     0      63  {
 49028    63    86     9    63  1126     0      27  super
 49029    63    86    14    63  1126     0      59  (
 49030    63    86    15    63  1126     0     111  mark
 49031    63    86    19    63  1126     0      66  ,
 49032    63    86    21    63  1126     0     111  pos
 49033    63    86    24    63  1126     0      66  ,
 49034    63    86    26    63  1126     0     111  lim
 49035    63    86    29    63  1126     0      66  ,
 49036    63    86    31    63  1126     0     111  cap
 49037    63    86    34    63  1126     0      66  ,
 49038    63    86    36    63  1126     0     111  buf
 49039    63    86    39    63  1126     0      66  ,
 49040    63    86    41    63  1126     0     111  off
 49041    63    86    44    63  1126     0      60  )
 49042    63    86    45    63  1126     0     102  ;
 49043    63    95     5    63  1126     0      64  }
 49044    63    95     5    63  1126     0    2628  ENDMETHOD
 49045    63    95     5    63  1127     0    2629  STARTMETHOD
 49046    63    97     5    63  1127     0      10  public
 49047    63    97    12    63  1127     0     111  DoubleBuffer
 49048    63    97    25    63  1127     0     111  slice
 49049    63    97    30    63  1127     0      59  (
 49050    63    97    31    63  1127     0      60  )
 49051    63    97    33    63  1127     0      63  {
 49052    63    98     9    63  1127     0      19  return
 49053    63    98    16    63  1127     0      15  new
 49054    63    98    20    63  1127     0     111  HeapDoubleBuffer
 49055    63    98    36    63  1127     0      59  (
 49056    63    98    37    63  1127     0     111  hb
 49057    63    98    39    63  1127     0      66  ,
 49058    63    99    41    63  1127     0      77  -
 49059    63    99    42    63  1127     0     112  1
 49060    63    99    43    63  1127     0      66  ,
 49061    63   100    41    63  1127     0     112  0
 49062    63   100    42    63  1127     0      66  ,
 49063    63   101    41    63  1127     1     111  this.remaining
 49064    63   101    55    63  1127     1      59  (
 49065    63   101    56    63  1127     1      60  )
 49066    63   101    57    63  1127     1      66  ,
 49067    63   102    41    63  1127     1     111  this.remaining
 49068    63   102    55    63  1127     1      59  (
 49069    63   102    56    63  1127     1      60  )
 49070    63   102    57    63  1127     1      66  ,
 49071    63   103    41    63  1127     0     111  this.position
 49072    63   103    54    63  1127     0      59  (
 49073    63   103    55    63  1127     0      60  )
 49074    63   103    57    63  1127     0      74  +
 49075    63   103    59    63  1127     1     111  offset
 49076    63   103    65    63  1127     1      60  )
 49077    63   103    66    63  1127     1     102  ;
 49078    63   104     5    63  1127     1      64  }
 49079    63   104     5    63  1127     0    2630  ENDMETHOD
 49080    63   104     5    63  1128     0    2631  STARTMETHOD
 49081    63   106     5    63  1128     0      10  public
 49082    63   106    12    63  1128     0     111  DoubleBuffer
 49083    63   106    25    63  1128     0     111  duplicate
 49084    63   106    34    63  1128     0      59  (
 49085    63   106    35    63  1128     0      60  )
 49086    63   106    37    63  1128     0      63  {
 49087    63   107     9    63  1128     0      19  return
 49088    63   107    16    63  1128     0      15  new
 49089    63   107    20    63  1128     0     111  HeapDoubleBuffer
 49090    63   107    36    63  1128     0      59  (
 49091    63   107    37    63  1128     0     111  hb
 49092    63   107    39    63  1128     0      66  ,
 49093    63   108    41    63  1128     1     111  this.markValue
 49094    63   108    55    63  1128     1      59  (
 49095    63   108    56    63  1128     1      60  )
 49096    63   108    57    63  1128     1      66  ,
 49097    63   109    41    63  1128     1     111  this.position
 49098    63   109    54    63  1128     1      59  (
 49099    63   109    55    63  1128     1      60  )
 49100    63   109    56    63  1128     1      66  ,
 49101    63   110    41    63  1128     1     111  this.limit
 49102    63   110    51    63  1128     1      59  (
 49103    63   110    52    63  1128     1      60  )
 49104    63   110    53    63  1128     1      66  ,
 49105    63   111    41    63  1128     1     111  this.capacity
 49106    63   111    54    63  1128     1      59  (
 49107    63   111    55    63  1128     1      60  )
 49108    63   111    56    63  1128     1      66  ,
 49109    63   112    41    63  1128     1     111  offset
 49110    63   112    47    63  1128     1      60  )
 49111    63   112    48    63  1128     1     102  ;
 49112    63   113     5    63  1128     1      64  }
 49113    63   113     5    63  1128     0    2632  ENDMETHOD
 49114    63   113     5    63  1129     0    2633  STARTMETHOD
 49115    63   115     5    63  1129     0      10  public
 49116    63   115    12    63  1129     0     111  DoubleBuffer
 49117    63   115    25    63  1129     0     111  asReadOnlyBuffer
 49118    63   115    41    63  1129     0      59  (
 49119    63   115    42    63  1129     0      60  )
 49120    63   115    44    63  1129     0      63  {
 49121    63   117     9    63  1129     0      19  return
 49122    63   117    16    63  1129     0      15  new
 49123    63   117    20    63  1129     0     111  HeapDoubleBufferR
 49124    63   117    37    63  1129     0      59  (
 49125    63   117    38    63  1129     0     111  hb
 49126    63   117    40    63  1129     0      66  ,
 49127    63   118    38    63  1129     1     111  this.markValue
 49128    63   118    52    63  1129     1      59  (
 49129    63   118    53    63  1129     1      60  )
 49130    63   118    54    63  1129     1      66  ,
 49131    63   119    38    63  1129     1     111  this.position
 49132    63   119    51    63  1129     1      59  (
 49133    63   119    52    63  1129     1      60  )
 49134    63   119    53    63  1129     1      66  ,
 49135    63   120    38    63  1129     1     111  this.limit
 49136    63   120    48    63  1129     1      59  (
 49137    63   120    49    63  1129     1      60  )
 49138    63   120    50    63  1129     1      66  ,
 49139    63   121    38    63  1129     1     111  this.capacity
 49140    63   121    51    63  1129     1      59  (
 49141    63   121    52    63  1129     1      60  )
 49142    63   121    53    63  1129     1      66  ,
 49143    63   122    38    63  1129     1     111  offset
 49144    63   122    44    63  1129     1      60  )
 49145    63   122    45    63  1129     1     102  ;
 49146    63   126     5    63  1129     1      64  }
 49147    63   126     5    63  1129     0    2634  ENDMETHOD
 49148    63   126     5    63  1130     0    2635  STARTMETHOD
 49149    63   130     5    63  1130     0      23  protected
 49150    63   130    15    63  1130     0      36  int
 49151    63   130    19    63  1130     0     111  ix
 49152    63   130    21    63  1130     0      59  (
 49153    63   130    22    63  1130     0      36  int
 49154    63   130    26    63  1130     0     111  i
 49155    63   130    27    63  1130     0      60  )
 49156    63   130    29    63  1130     0      63  {
 49157    63   131     9    63  1130     0      19  return
 49158    63   131    16    63  1130     0     111  i
 49159    63   131    18    63  1130     0      74  +
 49160    63   131    20    63  1130     0     111  offset
 49161    63   131    26    63  1130     0     102  ;
 49162    63   132     5    63  1130     0      64  }
 49163    63   132     5    63  1130     0    2636  ENDMETHOD
 49164    63   132     5    63  1131     0    2637  STARTMETHOD
 49165    63   134     5    63  1131     0      10  public
 49166    63   134    12    63  1131     0      32  double
 49167    63   134    19    63  1131     0     111  get
 49168    63   134    22    63  1131     0      59  (
 49169    63   134    23    63  1131     0      60  )
 49170    63   134    25    63  1131     0      63  {
 49171    63   135     9    63  1131     0      19  return
 49172    63   135    16    63  1131     0     111  hb
 49173    63   135    18    63  1131     0      61  [
 49174    63   135    19    63  1131     0     111  ix
 49175    63   135    21    63  1131     0      59  (
 49176    63   135    22    63  1131     0     111  nextGetIndex
 49177    63   135    34    63  1131     0      59  (
 49178    63   135    35    63  1131     0      60  )
 49179    63   135    36    63  1131     0      60  )
 49180    63   135    37    63  1131     0      62  ]
 49181    63   135    38    63  1131     0     102  ;
 49182    63   136     5    63  1131     0      64  }
 49183    63   136     5    63  1131     0    2638  ENDMETHOD
 49184    63   136     5    63  1132     0    2639  STARTMETHOD
 49185    63   138     5    63  1132     0      10  public
 49186    63   138    12    63  1132     0      32  double
 49187    63   138    19    63  1132     0     111  get
 49188    63   138    22    63  1132     0      59  (
 49189    63   138    23    63  1132     0      36  int
 49190    63   138    27    63  1132     0     111  i
 49191    63   138    28    63  1132     0      60  )
 49192    63   138    30    63  1132     0      63  {
 49193    63   139     9    63  1132     0      19  return
 49194    63   139    16    63  1132     0     111  hb
 49195    63   139    18    63  1132     0      61  [
 49196    63   139    19    63  1132     0     111  ix
 49197    63   139    21    63  1132     0      59  (
 49198    63   139    22    63  1132     0     111  checkIndex
 49199    63   139    32    63  1132     0      59  (
 49200    63   139    33    63  1132     0     111  i
 49201    63   139    34    63  1132     0      60  )
 49202    63   139    35    63  1132     0      60  )
 49203    63   139    36    63  1132     0      62  ]
 49204    63   139    37    63  1132     0     102  ;
 49205    63   140     5    63  1132     0      64  }
 49206    63   140     5    63  1132     0    2640  ENDMETHOD
 49207    63   140     5    63  1133     0    2641  STARTMETHOD
 49208    63   142     5    63  1133     0      10  public
 49209    63   142    12    63  1133     0     111  DoubleBuffer
 49210    63   142    25    63  1133     0     111  get
 49211    63   142    28    63  1133     0      59  (
 49212    63   142    29    63  1133     0      32  double
 49213    63   142    35    63  1133     0      61  [
 49214    63   142    36    63  1133     0      62  ]
 49215    63   142    38    63  1133     0     111  dst
 49216    63   142    41    63  1133     0      66  ,
 49217    63   142    43    63  1133     0      36  int
 49218    63   142    47    63  1133     0     111  offset
 49219    63   142    53    63  1133     0      66  ,
 49220    63   142    55    63  1133     0      36  int
 49221    63   142    59    63  1133     0     111  length
 49222    63   142    65    63  1133     0      60  )
 49223    63   142    67    63  1133     0      63  {
 49224    63   143     9    63  1133     0     111  checkBounds
 49225    63   143    20    63  1133     0      59  (
 49226    63   143    21    63  1133     0     111  offset
 49227    63   143    27    63  1133     0      66  ,
 49228    63   143    29    63  1133     0     111  length
 49229    63   143    35    63  1133     0      66  ,
 49230    63   143    37    63  1133     0     111  dst.length
 49231    63   143    47    63  1133     0      60  )
 49232    63   143    48    63  1133     0     102  ;
 49233    63   144     9    63  1133     0      31  if
 49234    63   144    12    63  1133     0      59  (
 49235    63   144    13    63  1133     0     111  length
 49236    63   144    20    63  1133     0      89  >
 49237    63   144    22    63  1133     0     111  remaining
 49238    63   144    31    63  1133     0      59  (
 49239    63   144    32    63  1133     0      60  )
 49240    63   144    33    63  1133     0      60  )
 49241    63   145    13    63  1133     0      20  throw
 49242    63   145    19    63  1133     0      15  new
 49243    63   145    23    63  1133     0     111  BufferUnderflowException
 49244    63   145    47    63  1133     0      59  (
 49245    63   145    48    63  1133     0      60  )
 49246    63   145    49    63  1133     0     102  ;
 49247    63   146     9    63  1133     0     111  System.arraycopy
 49248    63   146    25    63  1133     0      59  (
 49249    63   146    26    63  1133     0     111  hb
 49250    63   146    28    63  1133     0      66  ,
 49251    63   146    30    63  1133     0     111  ix
 49252    63   146    32    63  1133     0      59  (
 49253    63   146    33    63  1133     0     111  position
 49254    63   146    41    63  1133     0      59  (
 49255    63   146    42    63  1133     0      60  )
 49256    63   146    43    63  1133     0      60  )
 49257    63   146    44    63  1133     0      66  ,
 49258    63   146    46    63  1133     0     111  dst
 49259    63   146    49    63  1133     0      66  ,
 49260    63   146    51    63  1133     0     111  offset
 49261    63   146    57    63  1133     0      66  ,
 49262    63   146    59    63  1133     0     111  length
 49263    63   146    65    63  1133     0      60  )
 49264    63   146    66    63  1133     0     102  ;
 49265    63   147     9    63  1133     0     111  position
 49266    63   147    17    63  1133     0      59  (
 49267    63   147    18    63  1133     0     111  position
 49268    63   147    26    63  1133     0      59  (
 49269    63   147    27    63  1133     0      60  )
 49270    63   147    29    63  1133     0      74  +
 49271    63   147    31    63  1133     0     111  length
 49272    63   147    37    63  1133     0      60  )
 49273    63   147    38    63  1133     0     102  ;
 49274    63   148     9    63  1133     0      19  return
 49275    63   148    16    63  1133     0      44  this
 49276    63   148    20    63  1133     1     102  ;
 49277    63   149     5    63  1133     1      64  }
 49278    63   149     5    63  1133     0    2642  ENDMETHOD
 49279    63   149     5    63  1134     0    2643  STARTMETHOD
 49280    63   151     5    63  1134     0      10  public
 49281    63   151    12    63  1134     0      39  boolean
 49282    63   151    20    63  1134     0     111  isDirect
 49283    63   151    28    63  1134     0      59  (
 49284    63   151    29    63  1134     0      60  )
 49285    63   151    31    63  1134     0      63  {
 49286    63   152     9    63  1134     0      19  return
 49287    63   152    16    63  1134     0      43  false
 49288    63   152    21    63  1134     1     102  ;
 49289    63   153     5    63  1134     1      64  }
 49290    63   153     5    63  1134     0    2644  ENDMETHOD
 49291    63   153     5    63  1135     0    2645  STARTMETHOD
 49292    63   157     5    63  1135     0      10  public
 49293    63   157    12    63  1135     0      39  boolean
 49294    63   157    20    63  1135     0     111  isReadOnly
 49295    63   157    30    63  1135     0      59  (
 49296    63   157    31    63  1135     0      60  )
 49297    63   157    33    63  1135     0      63  {
 49298    63   158     9    63  1135     0      19  return
 49299    63   158    16    63  1135     0      43  false
 49300    63   158    21    63  1135     1     102  ;
 49301    63   159     5    63  1135     1      64  }
 49302    63   159     5    63  1135     0    2646  ENDMETHOD
 49303    63   159     5    63  1136     0    2647  STARTMETHOD
 49304    63   161     5    63  1136     0      10  public
 49305    63   161    12    63  1136     0     111  DoubleBuffer
 49306    63   161    25    63  1136     0     111  put
 49307    63   161    28    63  1136     0      59  (
 49308    63   161    29    63  1136     0      32  double
 49309    63   161    36    63  1136     0     111  x
 49310    63   161    37    63  1136     0      60  )
 49311    63   161    39    63  1136     0      63  {
 49312    63   163     9    63  1136     0     111  hb
 49313    63   163    11    63  1136     0      61  [
 49314    63   163    12    63  1136     0     111  ix
 49315    63   163    14    63  1136     0      59  (
 49316    63   163    15    63  1136     0     111  nextPutIndex
 49317    63   163    27    63  1136     0      59  (
 49318    63   163    28    63  1136     0      60  )
 49319    63   163    29    63  1136     0      60  )
 49320    63   163    30    63  1136     0      62  ]
 49321    63   163    32    63  1136     0      67  =
 49322    63   163    34    63  1136     0     111  x
 49323    63   163    35    63  1136     0     102  ;
 49324    63   164     9    63  1136     0      19  return
 49325    63   164    16    63  1136     0      44  this
 49326    63   164    20    63  1136     0     102  ;
 49327    63   168     5    63  1136     0      64  }
 49328    63   168     5    63  1136     0    2648  ENDMETHOD
 49329    63   168     5    63  1137     0    2649  STARTMETHOD
 49330    63   170     5    63  1137     0      10  public
 49331    63   170    12    63  1137     0     111  DoubleBuffer
 49332    63   170    25    63  1137     0     111  put
 49333    63   170    28    63  1137     0      59  (
 49334    63   170    29    63  1137     0      36  int
 49335    63   170    33    63  1137     0     111  i
 49336    63   170    34    63  1137     0      66  ,
 49337    63   170    36    63  1137     0      32  double
 49338    63   170    43    63  1137     0     111  x
 49339    63   170    44    63  1137     0      60  )
 49340    63   170    46    63  1137     0      63  {
 49341    63   172     9    63  1137     0     111  hb
 49342    63   172    11    63  1137     0      61  [
 49343    63   172    12    63  1137     0     111  ix
 49344    63   172    14    63  1137     0      59  (
 49345    63   172    15    63  1137     0     111  checkIndex
 49346    63   172    25    63  1137     0      59  (
 49347    63   172    26    63  1137     0     111  i
 49348    63   172    27    63  1137     0      60  )
 49349    63   172    28    63  1137     0      60  )
 49350    63   172    29    63  1137     0      62  ]
 49351    63   172    31    63  1137     0      67  =
 49352    63   172    33    63  1137     0     111  x
 49353    63   172    34    63  1137     0     102  ;
 49354    63   173     9    63  1137     0      19  return
 49355    63   173    16    63  1137     0      44  this
 49356    63   173    20    63  1137     0     102  ;
 49357    63   177     5    63  1137     0      64  }
 49358    63   177     5    63  1137     0    2650  ENDMETHOD
 49359    63   177     5    63  1138     0    2651  STARTMETHOD
 49360    63   179     5    63  1138     0      10  public
 49361    63   179    12    63  1138     0     111  DoubleBuffer
 49362    63   179    25    63  1138     0     111  put
 49363    63   179    28    63  1138     0      59  (
 49364    63   179    29    63  1138     0      32  double
 49365    63   179    35    63  1138     0      61  [
 49366    63   179    36    63  1138     0      62  ]
 49367    63   179    38    63  1138     0     111  src
 49368    63   179    41    63  1138     0      66  ,
 49369    63   179    43    63  1138     0      36  int
 49370    63   179    47    63  1138     0     111  offset
 49371    63   179    53    63  1138     0      66  ,
 49372    63   179    55    63  1138     0      36  int
 49373    63   179    59    63  1138     0     111  length
 49374    63   179    65    63  1138     0      60  )
 49375    63   179    67    63  1138     0      63  {
 49376    63   181     9    63  1138     0     111  checkBounds
 49377    63   181    20    63  1138     0      59  (
 49378    63   181    21    63  1138     0     111  offset
 49379    63   181    27    63  1138     0      66  ,
 49380    63   181    29    63  1138     0     111  length
 49381    63   181    35    63  1138     0      66  ,
 49382    63   181    37    63  1138     0     111  src.length
 49383    63   181    47    63  1138     0      60  )
 49384    63   181    48    63  1138     0     102  ;
 49385    63   182     9    63  1138     0      31  if
 49386    63   182    12    63  1138     0      59  (
 49387    63   182    13    63  1138     0     111  length
 49388    63   182    20    63  1138     0      89  >
 49389    63   182    22    63  1138     0     111  remaining
 49390    63   182    31    63  1138     0      59  (
 49391    63   182    32    63  1138     0      60  )
 49392    63   182    33    63  1138     0      60  )
 49393    63   183    13    63  1138     0      20  throw
 49394    63   183    19    63  1138     0      15  new
 49395    63   183    23    63  1138     0     111  BufferOverflowException
 49396    63   183    46    63  1138     0      59  (
 49397    63   183    47    63  1138     0      60  )
 49398    63   183    48    63  1138     0     102  ;
 49399    63   184     9    63  1138     0     111  System.arraycopy
 49400    63   184    25    63  1138     0      59  (
 49401    63   184    26    63  1138     0     111  src
 49402    63   184    29    63  1138     0      66  ,
 49403    63   184    31    63  1138     0     111  offset
 49404    63   184    37    63  1138     0      66  ,
 49405    63   184    39    63  1138     0     111  hb
 49406    63   184    41    63  1138     0      66  ,
 49407    63   184    43    63  1138     0     111  ix
 49408    63   184    45    63  1138     0      59  (
 49409    63   184    46    63  1138     0     111  position
 49410    63   184    54    63  1138     0      59  (
 49411    63   184    55    63  1138     0      60  )
 49412    63   184    56    63  1138     0      60  )
 49413    63   184    57    63  1138     0      66  ,
 49414    63   184    59    63  1138     0     111  length
 49415    63   184    65    63  1138     0      60  )
 49416    63   184    66    63  1138     0     102  ;
 49417    63   185     9    63  1138     0     111  position
 49418    63   185    17    63  1138     0      59  (
 49419    63   185    18    63  1138     0     111  position
 49420    63   185    26    63  1138     0      59  (
 49421    63   185    27    63  1138     0      60  )
 49422    63   185    29    63  1138     0      74  +
 49423    63   185    31    63  1138     0     111  length
 49424    63   185    37    63  1138     0      60  )
 49425    63   185    38    63  1138     0     102  ;
 49426    63   186     9    63  1138     0      19  return
 49427    63   186    16    63  1138     0      44  this
 49428    63   186    20    63  1138     0     102  ;
 49429    63   190     5    63  1138     0      64  }
 49430    63   190     5    63  1138     0    2652  ENDMETHOD
 49431    63   190     5    63  1139     0    2653  STARTMETHOD
 49432    63   192     5    63  1139     0      10  public
 49433    63   192    12    63  1139     0     111  DoubleBuffer
 49434    63   192    25    63  1139     0     111  put
 49435    63   192    28    63  1139     0      59  (
 49436    63   192    29    63  1139     0     111  DoubleBuffer
 49437    63   192    42    63  1139     0     111  src
 49438    63   192    45    63  1139     0      60  )
 49439    63   192    47    63  1139     0      63  {
 49440    63   194     9    63  1139     0      31  if
 49441    63   194    12    63  1139     0      59  (
 49442    63   194    13    63  1139     0     111  src
 49443    63   194    17    63  1139     0      16  instanceof
 49444    63   194    28    63  1139     0     111  HeapDoubleBuffer
 49445    63   194    44    63  1139     0      60  )
 49446    63   194    46    63  1139     0      63  {
 49447    63   195    13    63  1139     0      31  if
 49448    63   195    16    63  1139     0      59  (
 49449    63   195    17    63  1139     0     111  src
 49450    63   195    21    63  1139     0      68  ==
 49451    63   195    24    63  1139     0      44  this
 49452    63   195    28    63  1139     0      60  )
 49453    63   196    17    63  1139     0      20  throw
 49454    63   196    23    63  1139     0      15  new
 49455    63   196    27    63  1139     0     111  IllegalArgumentException
 49456    63   196    51    63  1139     0      59  (
 49457    63   196    52    63  1139     0      60  )
 49458    63   196    53    63  1139     0     102  ;
 49459    63   197    13    63  1139     0     111  HeapDoubleBuffer
 49460    63   197    30    63  1139     0     111  sb
 49461    63   197    33    63  1139     0      67  =
 49462    63   197    35    63  1139     0      59  (
 49463    63   197    36    63  1139     0     111  HeapDoubleBuffer
 49464    63   197    52    63  1139     0      60  )
 49465    63   197    53    63  1139     0     111  src
 49466    63   197    56    63  1139     0     102  ;
 49467    63   198    13    63  1139     0      36  int
 49468    63   198    17    63  1139     0     111  n
 49469    63   198    19    63  1139     0      67  =
 49470    63   198    21    63  1139     0     111  sb.remaining
 49471    63   198    33    63  1139     0      59  (
 49472    63   198    34    63  1139     0      60  )
 49473    63   198    35    63  1139     0     102  ;
 49474    63   199    13    63  1139     0      31  if
 49475    63   199    16    63  1139     0      59  (
 49476    63   199    17    63  1139     0     111  n
 49477    63   199    19    63  1139     0      89  >
 49478    63   199    21    63  1139     0     111  remaining
 49479    63   199    30    63  1139     0      59  (
 49480    63   199    31    63  1139     0      60  )
 49481    63   199    32    63  1139     0      60  )
 49482    63   200    17    63  1139     0      20  throw
 49483    63   200    23    63  1139     0      15  new
 49484    63   200    27    63  1139     0     111  BufferOverflowException
 49485    63   200    50    63  1139     0      59  (
 49486    63   200    51    63  1139     0      60  )
 49487    63   200    52    63  1139     0     102  ;
 49488    63   201    13    63  1139     0     111  System.arraycopy
 49489    63   201    29    63  1139     0      59  (
 49490    63   201    30    63  1139     0     111  sb.hb
 49491    63   201    35    63  1139     0      66  ,
 49492    63   201    37    63  1139     0     111  sb.ix
 49493    63   201    42    63  1139     0      59  (
 49494    63   201    43    63  1139     0     111  sb.position
 49495    63   201    54    63  1139     0      59  (
 49496    63   201    55    63  1139     0      60  )
 49497    63   201    56    63  1139     0      60  )
 49498    63   201    57    63  1139     0      66  ,
 49499    63   202    30    63  1139     0     111  hb
 49500    63   202    32    63  1139     0      66  ,
 49501    63   202    34    63  1139     0     111  ix
 49502    63   202    36    63  1139     0      59  (
 49503    63   202    37    63  1139     0     111  position
 49504    63   202    45    63  1139     0      59  (
 49505    63   202    46    63  1139     0      60  )
 49506    63   202    47    63  1139     0      60  )
 49507    63   202    48    63  1139     0      66  ,
 49508    63   202    50    63  1139     0     111  n
 49509    63   202    51    63  1139     0      60  )
 49510    63   202    52    63  1139     0     102  ;
 49511    63   203    13    63  1139     1     111  sb.position
 49512    63   203    24    63  1139     1      59  (
 49513    63   203    25    63  1139     1     111  sb.position
 49514    63   203    36    63  1139     1      59  (
 49515    63   203    37    63  1139     1      60  )
 49516    63   203    39    63  1139     1      74  +
 49517    63   203    41    63  1139     1     111  n
 49518    63   203    42    63  1139     1      60  )
 49519    63   203    43    63  1139     1     102  ;
 49520    63   204    13    63  1139     1     111  position
 49521    63   204    21    63  1139     1      59  (
 49522    63   204    22    63  1139     1     111  position
 49523    63   204    30    63  1139     1      59  (
 49524    63   204    31    63  1139     1      60  )
 49525    63   204    33    63  1139     1      74  +
 49526    63   204    35    63  1139     1     111  n
 49527    63   204    36    63  1139     1      60  )
 49528    63   204    37    63  1139     1     102  ;
 49529    63   205     9    63  1139     0      64  }
 49530    63   205    11    63  1139     0      48  else
 49531    63   205    16    63  1139     0      31  if
 49532    63   205    19    63  1139     0      59  (
 49533    63   205    20    63  1139     0     111  src.isDirect
 49534    63   205    32    63  1139     0      59  (
 49535    63   205    33    63  1139     0      60  )
 49536    63   205    34    63  1139     0      60  )
 49537    63   205    36    63  1139     0      63  {
 49538    63   206    13    63  1139     0      36  int
 49539    63   206    17    63  1139     0     111  n
 49540    63   206    19    63  1139     0      67  =
 49541    63   206    21    63  1139     0     111  src.remaining
 49542    63   206    34    63  1139     0      59  (
 49543    63   206    35    63  1139     0      60  )
 49544    63   206    36    63  1139     0     102  ;
 49545    63   207    13    63  1139     0      31  if
 49546    63   207    16    63  1139     0      59  (
 49547    63   207    17    63  1139     0     111  n
 49548    63   207    19    63  1139     0      89  >
 49549    63   207    21    63  1139     0     111  remaining
 49550    63   207    30    63  1139     0      59  (
 49551    63   207    31    63  1139     0      60  )
 49552    63   207    32    63  1139     0      60  )
 49553    63   208    17    63  1139     0      20  throw
 49554    63   208    23    63  1139     0      15  new
 49555    63   208    27    63  1139     0     111  BufferOverflowException
 49556    63   208    50    63  1139     0      59  (
 49557    63   208    51    63  1139     0      60  )
 49558    63   208    52    63  1139     0     102  ;
 49559    63   209    13    63  1139     0     111  src.get
 49560    63   209    20    63  1139     0      59  (
 49561    63   209    21    63  1139     0     111  hb
 49562    63   209    23    63  1139     0      66  ,
 49563    63   209    25    63  1139     0     111  ix
 49564    63   209    27    63  1139     0      59  (
 49565    63   209    28    63  1139     0     111  position
 49566    63   209    36    63  1139     0      59  (
 49567    63   209    37    63  1139     0      60  )
 49568    63   209    38    63  1139     0      60  )
 49569    63   209    39    63  1139     0      66  ,
 49570    63   209    41    63  1139     0     111  n
 49571    63   209    42    63  1139     0      60  )
 49572    63   209    43    63  1139     0     102  ;
 49573    63   210    13    63  1139     0     111  position
 49574    63   210    21    63  1139     0      59  (
 49575    63   210    22    63  1139     0     111  position
 49576    63   210    30    63  1139     0      59  (
 49577    63   210    31    63  1139     0      60  )
 49578    63   210    33    63  1139     0      74  +
 49579    63   210    35    63  1139     0     111  n
 49580    63   210    36    63  1139     0      60  )
 49581    63   210    37    63  1139     0     102  ;
 49582    63   211     9    63  1139     0      64  }
 49583    63   211    11    63  1139     0      48  else
 49584    63   211    16    63  1139     0      63  {
 49585    63   212    13    63  1139     0     111  super.put
 49586    63   212    22    63  1139     0      59  (
 49587    63   212    23    63  1139     0     111  src
 49588    63   212    26    63  1139     0      60  )
 49589    63   212    27    63  1139     0     102  ;
 49590    63   213     9    63  1139     0      64  }
 49591    63   214     9    63  1139     0      19  return
 49592    63   214    16    63  1139     0      44  this
 49593    63   214    20    63  1139     0     102  ;
 49594    63   218     5    63  1139     0      64  }
 49595    63   218     5    63  1139     0    2654  ENDMETHOD
 49596    63   218     5    63  1140     0    2655  STARTMETHOD
 49597    63   220     5    63  1140     0      10  public
 49598    63   220    12    63  1140     0     111  DoubleBuffer
 49599    63   220    25    63  1140     0     111  compact
 49600    63   220    32    63  1140     0      59  (
 49601    63   220    33    63  1140     0      60  )
 49602    63   220    35    63  1140     0      63  {
 49603    63   222     9    63  1140     0     111  System.arraycopy
 49604    63   222    25    63  1140     0      59  (
 49605    63   222    26    63  1140     0     111  hb
 49606    63   222    28    63  1140     0      66  ,
 49607    63   222    30    63  1140     0     111  ix
 49608    63   222    32    63  1140     0      59  (
 49609    63   222    33    63  1140     0     111  position
 49610    63   222    41    63  1140     0      59  (
 49611    63   222    42    63  1140     0      60  )
 49612    63   222    43    63  1140     0      60  )
 49613    63   222    44    63  1140     0      66  ,
 49614    63   222    46    63  1140     0     111  hb
 49615    63   222    48    63  1140     0      66  ,
 49616    63   222    50    63  1140     0     111  ix
 49617    63   222    52    63  1140     0      59  (
 49618    63   222    53    63  1140     0     112  0
 49619    63   222    54    63  1140     0      60  )
 49620    63   222    55    63  1140     0      66  ,
 49621    63   222    57    63  1140     0     111  remaining
 49622    63   222    66    63  1140     0      59  (
 49623    63   222    67    63  1140     0      60  )
 49624    63   222    68    63  1140     0      60  )
 49625    63   222    69    63  1140     0     102  ;
 49626    63   223     9    63  1140     1     111  position
 49627    63   223    17    63  1140     1      59  (
 49628    63   223    18    63  1140     1     111  remaining
 49629    63   223    27    63  1140     1      59  (
 49630    63   223    28    63  1140     1      60  )
 49631    63   223    29    63  1140     1      60  )
 49632    63   223    30    63  1140     1     102  ;
 49633    63   224     9    63  1140     1     111  limit
 49634    63   224    14    63  1140     1      59  (
 49635    63   224    15    63  1140     1     111  capacity
 49636    63   224    23    63  1140     1      59  (
 49637    63   224    24    63  1140     1      60  )
 49638    63   224    25    63  1140     1      60  )
 49639    63   224    26    63  1140     1     102  ;
 49640    63   225     9    63  1140     0     111  clearMark
 49641    63   225    18    63  1140     0      59  (
 49642    63   225    19    63  1140     0      60  )
 49643    63   225    20    63  1140     0     102  ;
 49644    63   226     9    63  1140     0      19  return
 49645    63   226    16    63  1140     0      44  this
 49646    63   226    20    63  1140     0     102  ;
 49647    63   230     5    63  1140     0      64  }
 49648    63   230     5    63  1140     0    2656  ENDMETHOD
 49649    63   230     5    63  1141     0    2657  STARTMETHOD
 49650    63   586     5    63  1141     0      10  public
 49651    63   586    12    63  1141     0     111  ByteOrder
 49652    63   586    22    63  1141     0     111  order
 49653    63   586    27    63  1141     0      59  (
 49654    63   586    28    63  1141     0      60  )
 49655    63   586    30    63  1141     0      63  {
 49656    63   587     9    63  1141     0      19  return
 49657    63   587    16    63  1141     0     111  ByteOrder.nativeOrder
 49658    63   587    37    63  1141     0      59  (
 49659    63   587    38    63  1141     0      60  )
 49660    63   587    39    63  1141     0     102  ;
 49661    63   588     5    63  1141     0      64  }
 49662    63   588     5    63  1141     0    2658  ENDMETHOD
 49663    63   592     1    63    -1     0      64  }
 49664    63   592     1    63    -1     1    2659  ENDCLASS
 49665    63   592     1    -1    -1     1    2660  ENDFILE C:\javasrc\java\nio\HeapDoubleBuffer.java
 49666    64     1     1    -1    -1     1    2661  STARTFILE C:\javasrc\java\nio\HeapDoubleBufferR.java
 49667    64    28     1    -1    -1     0       5  package
 49668    64    28     9    -1    -1     0     111  java.nio
 49669    64    28    17    -1    -1     0     102  ;
 49670    64    42     1    64    -1     0    2662  STARTCLASS
 49671    64    42     1    64    -1     0      24  class
 49672    64    42     7    64    -1     0     111  HeapDoubleBufferR
 49673    64    43     5    64    -1     0      38  extends
 49674    64    43    13    64    -1     0     111  HeapDoubleBuffer
 49675    64    44     1    64    -1     0      63  {
 49676    64    44     1    64  1142     0    2663  STARTMETHOD
 49677    64    55     5    64  1142     0     111  HeapDoubleBufferR
 49678    64    55    22    64  1142     0      59  (
 49679    64    55    23    64  1142     0      36  int
 49680    64    55    27    64  1142     0     111  cap
 49681    64    55    30    64  1142     0      66  ,
 49682    64    55    32    64  1142     0      36  int
 49683    64    55    36    64  1142     0     111  lim
 49684    64    55    39    64  1142     0      60  )
 49685    64    55    41    64  1142     0      63  {
 49686    64    63     9    64  1142     0      27  super
 49687    64    63    14    64  1142     0      59  (
 49688    64    63    15    64  1142     0     111  cap
 49689    64    63    18    64  1142     0      66  ,
 49690    64    63    20    64  1142     0     111  lim
 49691    64    63    23    64  1142     0      60  )
 49692    64    63    24    64  1142     0     102  ;
 49693    64    64     9    64  1142     0     111  this.isReadOnly
 49694    64    64    25    64  1142     0      67  =
 49695    64    64    27    64  1142     0      52  true
 49696    64    64    31    64  1142     0     102  ;
 49697    64    66     5    64  1142     0      64  }
 49698    64    66     5    64  1142     0    2664  ENDMETHOD
 49699    64    66     5    64  1143     0    2665  STARTMETHOD
 49700    64    68     5    64  1143     0     111  HeapDoubleBufferR
 49701    64    68    22    64  1143     0      59  (
 49702    64    68    23    64  1143     0      32  double
 49703    64    68    29    64  1143     0      61  [
 49704    64    68    30    64  1143     0      62  ]
 49705    64    68    32    64  1143     0     111  buf
 49706    64    68    35    64  1143     0      66  ,
 49707    64    68    37    64  1143     0      36  int
 49708    64    68    41    64  1143     0     111  off
 49709    64    68    44    64  1143     0      66  ,
 49710    64    68    46    64  1143     0      36  int
 49711    64    68    50    64  1143     0     111  len
 49712    64    68    53    64  1143     0      60  )
 49713    64    68    55    64  1143     0      63  {
 49714    64    76     9    64  1143     0      27  super
 49715    64    76    14    64  1143     0      59  (
 49716    64    76    15    64  1143     0     111  buf
 49717    64    76    18    64  1143     0      66  ,
 49718    64    76    20    64  1143     0     111  off
 49719    64    76    23    64  1143     0      66  ,
 49720    64    76    25    64  1143     0     111  len
 49721    64    76    28    64  1143     0      60  )
 49722    64    76    29    64  1143     0     102  ;
 49723    64    77     9    64  1143     0     111  this.isReadOnly
 49724    64    77    25    64  1143     0      67  =
 49725    64    77    27    64  1143     0      52  true
 49726    64    77    31    64  1143     0     102  ;
 49727    64    79     5    64  1143     0      64  }
 49728    64    79     5    64  1143     0    2666  ENDMETHOD
 49729    64    79     5    64  1144     0    2667  STARTMETHOD
 49730    64    81     5    64  1144     0      23  protected
 49731    64    81    15    64  1144     0     111  HeapDoubleBufferR
 49732    64    81    32    64  1144     0      59  (
 49733    64    81    33    64  1144     0      32  double
 49734    64    81    39    64  1144     0      61  [
 49735    64    81    40    64  1144     0      62  ]
 49736    64    81    42    64  1144     0     111  buf
 49737    64    81    45    64  1144     0      66  ,
 49738    64    82    36    64  1144     0      36  int
 49739    64    82    40    64  1144     0     111  mark
 49740    64    82    44    64  1144     0      66  ,
 49741    64    82    46    64  1144     0      36  int
 49742    64    82    50    64  1144     0     111  pos
 49743    64    82    53    64  1144     0      66  ,
 49744    64    82    55    64  1144     0      36  int
 49745    64    82    59    64  1144     0     111  lim
 49746    64    82    62    64  1144     0      66  ,
 49747    64    82    64    64  1144     0      36  int
 49748    64    82    68    64  1144     0     111  cap
 49749    64    82    71    64  1144     0      66  ,
 49750    64    83    36    64  1144     0      36  int
 49751    64    83    40    64  1144     0     111  off
 49752    64    83    43    64  1144     0      60  )
 49753    64    84     5    64  1144     0      63  {
 49754    64    92     9    64  1144     0      27  super
 49755    64    92    14    64  1144     0      59  (
 49756    64    92    15    64  1144     0     111  buf
 49757    64    92    18    64  1144     0      66  ,
 49758    64    92    20    64  1144     0     111  mark
 49759    64    92    24    64  1144     0      66  ,
 49760    64    92    26    64  1144     0     111  pos
 49761    64    92    29    64  1144     0      66  ,
 49762    64    92    31    64  1144     0     111  lim
 49763    64    92    34    64  1144     0      66  ,
 49764    64    92    36    64  1144     0     111  cap
 49765    64    92    39    64  1144     0      66  ,
 49766    64    92    41    64  1144     0     111  off
 49767    64    92    44    64  1144     0      60  )
 49768    64    92    45    64  1144     0     102  ;
 49769    64    93     9    64  1144     0     111  this.isReadOnly
 49770    64    93    25    64  1144     0      67  =
 49771    64    93    27    64  1144     0      52  true
 49772    64    93    31    64  1144     0     102  ;
 49773    64    95     5    64  1144     0      64  }
 49774    64    95     5    64  1144     0    2668  ENDMETHOD
 49775    64    95     5    64  1145     0    2669  STARTMETHOD
 49776    64    97     5    64  1145     0      10  public
 49777    64    97    12    64  1145     0     111  DoubleBuffer
 49778    64    97    25    64  1145     0     111  slice
 49779    64    97    30    64  1145     0      59  (
 49780    64    97    31    64  1145     0      60  )
 49781    64    97    33    64  1145     0      63  {
 49782    64    98     9    64  1145     0      19  return
 49783    64    98    16    64  1145     0      15  new
 49784    64    98    20    64  1145     0     111  HeapDoubleBufferR
 49785    64    98    37    64  1145     0      59  (
 49786    64    98    38    64  1145     0     111  hb
 49787    64    98    40    64  1145     0      66  ,
 49788    64    99    41    64  1145     0      77  -
 49789    64    99    42    64  1145     0     112  1
 49790    64    99    43    64  1145     0      66  ,
 49791    64   100    41    64  1145     0     112  0
 49792    64   100    42    64  1145     0      66  ,
 49793    64   101    41    64  1145     1     111  this.remaining
 49794    64   101    55    64  1145     1      59  (
 49795    64   101    56    64  1145     1      60  )
 49796    64   101    57    64  1145     1      66  ,
 49797    64   102    41    64  1145     1     111  this.remaining
 49798    64   102    55    64  1145     1      59  (
 49799    64   102    56    64  1145     1      60  )
 49800    64   102    57    64  1145     1      66  ,
 49801    64   103    41    64  1145     0     111  this.position
 49802    64   103    54    64  1145     0      59  (
 49803    64   103    55    64  1145     0      60  )
 49804    64   103    57    64  1145     0      74  +
 49805    64   103    59    64  1145     0     111  offset
 49806    64   103    65    64  1145     0      60  )
 49807    64   103    66    64  1145     0     102  ;
 49808    64   104     5    64  1145     0      64  }
 49809    64   104     5    64  1145     0    2670  ENDMETHOD
 49810    64   104     5    64  1146     0    2671  STARTMETHOD
 49811    64   106     5    64  1146     0      10  public
 49812    64   106    12    64  1146     0     111  DoubleBuffer
 49813    64   106    25    64  1146     0     111  duplicate
 49814    64   106    34    64  1146     0      59  (
 49815    64   106    35    64  1146     0      60  )
 49816    64   106    37    64  1146     0      63  {
 49817    64   107     9    64  1146     0      19  return
 49818    64   107    16    64  1146     0      15  new
 49819    64   107    20    64  1146     0     111  HeapDoubleBufferR
 49820    64   107    37    64  1146     0      59  (
 49821    64   107    38    64  1146     0     111  hb
 49822    64   107    40    64  1146     0      66  ,
 49823    64   108    41    64  1146     1     111  this.markValue
 49824    64   108    55    64  1146     1      59  (
 49825    64   108    56    64  1146     1      60  )
 49826    64   108    57    64  1146     1      66  ,
 49827    64   109    41    64  1146     1     111  this.position
 49828    64   109    54    64  1146     1      59  (
 49829    64   109    55    64  1146     1      60  )
 49830    64   109    56    64  1146     1      66  ,
 49831    64   110    41    64  1146     1     111  this.limit
 49832    64   110    51    64  1146     1      59  (
 49833    64   110    52    64  1146     1      60  )
 49834    64   110    53    64  1146     1      66  ,
 49835    64   111    41    64  1146     1     111  this.capacity
 49836    64   111    54    64  1146     1      59  (
 49837    64   111    55    64  1146     1      60  )
 49838    64   111    56    64  1146     1      66  ,
 49839    64   112    41    64  1146     0     111  offset
 49840    64   112    47    64  1146     0      60  )
 49841    64   112    48    64  1146     0     102  ;
 49842    64   113     5    64  1146     0      64  }
 49843    64   113     5    64  1146     0    2672  ENDMETHOD
 49844    64   113     5    64  1147     0    2673  STARTMETHOD
 49845    64   115     5    64  1147     0      10  public
 49846    64   115    12    64  1147     0     111  DoubleBuffer
 49847    64   115    25    64  1147     0     111  asReadOnlyBuffer
 49848    64   115    41    64  1147     0      59  (
 49849    64   115    42    64  1147     0      60  )
 49850    64   115    44    64  1147     0      63  {
 49851    64   124     9    64  1147     0      19  return
 49852    64   124    16    64  1147     0     111  duplicate
 49853    64   124    25    64  1147     0      59  (
 49854    64   124    26    64  1147     0      60  )
 49855    64   124    27    64  1147     0     102  ;
 49856    64   126     5    64  1147     0      64  }
 49857    64   126     5    64  1147     0    2674  ENDMETHOD
 49858    64   126     5    64  1148     0    2675  STARTMETHOD
 49859    64   157     5    64  1148     0      10  public
 49860    64   157    12    64  1148     0      39  boolean
 49861    64   157    20    64  1148     0     111  isReadOnly
 49862    64   157    30    64  1148     0      59  (
 49863    64   157    31    64  1148     0      60  )
 49864    64   157    33    64  1148     0      63  {
 49865    64   158     9    64  1148     0      19  return
 49866    64   158    16    64  1148     0      52  true
 49867    64   158    20    64  1148     0     102  ;
 49868    64   159     5    64  1148     0      64  }
 49869    64   159     5    64  1148     0    2676  ENDMETHOD
 49870    64   159     5    64  1149     0    2677  STARTMETHOD
 49871    64   161     5    64  1149     0      10  public
 49872    64   161    12    64  1149     0     111  DoubleBuffer
 49873    64   161    25    64  1149     0     111  put
 49874    64   161    28    64  1149     0      59  (
 49875    64   161    29    64  1149     0      32  double
 49876    64   161    36    64  1149     0     111  x
 49877    64   161    37    64  1149     0      60  )
 49878    64   161    39    64  1149     0      63  {
 49879    64   166     9    64  1149     0      20  throw
 49880    64   166    15    64  1149     0      15  new
 49881    64   166    19    64  1149     0     111  ReadOnlyBufferException
 49882    64   166    42    64  1149     0      59  (
 49883    64   166    43    64  1149     0      60  )
 49884    64   166    44    64  1149     0     102  ;
 49885    64   168     5    64  1149     0      64  }
 49886    64   168     5    64  1149     0    2678  ENDMETHOD
 49887    64   168     5    64  1150     0    2679  STARTMETHOD
 49888    64   170     5    64  1150     0      10  public
 49889    64   170    12    64  1150     0     111  DoubleBuffer
 49890    64   170    25    64  1150     0     111  put
 49891    64   170    28    64  1150     0      59  (
 49892    64   170    29    64  1150     0      36  int
 49893    64   170    33    64  1150     0     111  i
 49894    64   170    34    64  1150     0      66  ,
 49895    64   170    36    64  1150     0      32  double
 49896    64   170    43    64  1150     0     111  x
 49897    64   170    44    64  1150     0      60  )
 49898    64   170    46    64  1150     0      63  {
 49899    64   175     9    64  1150     0      20  throw
 49900    64   175    15    64  1150     0      15  new
 49901    64   175    19    64  1150     0     111  ReadOnlyBufferException
 49902    64   175    42    64  1150     0      59  (
 49903    64   175    43    64  1150     0      60  )
 49904    64   175    44    64  1150     0     102  ;
 49905    64   177     5    64  1150     0      64  }
 49906    64   177     5    64  1150     0    2680  ENDMETHOD
 49907    64   177     5    64  1151     0    2681  STARTMETHOD
 49908    64   179     5    64  1151     0      10  public
 49909    64   179    12    64  1151     0     111  DoubleBuffer
 49910    64   179    25    64  1151     0     111  put
 49911    64   179    28    64  1151     0      59  (
 49912    64   179    29    64  1151     0      32  double
 49913    64   179    35    64  1151     0      61  [
 49914    64   179    36    64  1151     0      62  ]
 49915    64   179    38    64  1151     0     111  src
 49916    64   179    41    64  1151     0      66  ,
 49917    64   179    43    64  1151     0      36  int
 49918    64   179    47    64  1151     0     111  offset
 49919    64   179    53    64  1151     0      66  ,
 49920    64   179    55    64  1151     0      36  int
 49921    64   179    59    64  1151     0     111  length
 49922    64   179    65    64  1151     0      60  )
 49923    64   179    67    64  1151     0      63  {
 49924    64   188     9    64  1151     0      20  throw
 49925    64   188    15    64  1151     0      15  new
 49926    64   188    19    64  1151     0     111  ReadOnlyBufferException
 49927    64   188    42    64  1151     0      59  (
 49928    64   188    43    64  1151     0      60  )
 49929    64   188    44    64  1151     0     102  ;
 49930    64   190     5    64  1151     0      64  }
 49931    64   190     5    64  1151     0    2682  ENDMETHOD
 49932    64   190     5    64  1152     0    2683  STARTMETHOD
 49933    64   192     5    64  1152     0      10  public
 49934    64   192    12    64  1152     0     111  DoubleBuffer
 49935    64   192    25    64  1152     0     111  put
 49936    64   192    28    64  1152     0      59  (
 49937    64   192    29    64  1152     0     111  DoubleBuffer
 49938    64   192    42    64  1152     0     111  src
 49939    64   192    45    64  1152     0      60  )
 49940    64   192    47    64  1152     0      63  {
 49941    64   216     9    64  1152     0      20  throw
 49942    64   216    15    64  1152     0      15  new
 49943    64   216    19    64  1152     0     111  ReadOnlyBufferException
 49944    64   216    42    64  1152     0      59  (
 49945    64   216    43    64  1152     0      60  )
 49946    64   216    44    64  1152     0     102  ;
 49947    64   218     5    64  1152     0      64  }
 49948    64   218     5    64  1152     0    2684  ENDMETHOD
 49949    64   218     5    64  1153     0    2685  STARTMETHOD
 49950    64   220     5    64  1153     0      10  public
 49951    64   220    12    64  1153     0     111  DoubleBuffer
 49952    64   220    25    64  1153     0     111  compact
 49953    64   220    32    64  1153     0      59  (
 49954    64   220    33    64  1153     0      60  )
 49955    64   220    35    64  1153     0      63  {
 49956    64   228     9    64  1153     0      20  throw
 49957    64   228    15    64  1153     0      15  new
 49958    64   228    19    64  1153     0     111  ReadOnlyBufferException
 49959    64   228    42    64  1153     0      59  (
 49960    64   228    43    64  1153     0      60  )
 49961    64   228    44    64  1153     0     102  ;
 49962    64   230     5    64  1153     0      64  }
 49963    64   230     5    64  1153     0    2686  ENDMETHOD
 49964    64   230     5    64  1154     0    2687  STARTMETHOD
 49965    64   586     5    64  1154     0      10  public
 49966    64   586    12    64  1154     0     111  ByteOrder
 49967    64   586    22    64  1154     0     111  order
 49968    64   586    27    64  1154     0      59  (
 49969    64   586    28    64  1154     0      60  )
 49970    64   586    30    64  1154     0      63  {
 49971    64   587     9    64  1154     0      19  return
 49972    64   587    16    64  1154     0     111  ByteOrder.nativeOrder
 49973    64   587    37    64  1154     0      59  (
 49974    64   587    38    64  1154     0      60  )
 49975    64   587    39    64  1154     0     102  ;
 49976    64   588     5    64  1154     0      64  }
 49977    64   588     5    64  1154     0    2688  ENDMETHOD
 49978    64   592     1    64    -1     0      64  }
 49979    64   592     1    64    -1     1    2689  ENDCLASS
 49980    64   592     1    -1    -1     1    2690  ENDFILE C:\javasrc\java\nio\HeapDoubleBufferR.java
 49981    65     1     1    -1    -1     1    2691  STARTFILE C:\javasrc\java\nio\HeapFloatBuffer.java
 49982    65    28     1    -1    -1     0       5  package
 49983    65    28     9    -1    -1     0     111  java.nio
 49984    65    28    17    -1    -1     0     102  ;
 49985    65    42     1    65    -1     0    2692  STARTCLASS
 49986    65    42     1    65    -1     0      24  class
 49987    65    42     7    65    -1     0     111  HeapFloatBuffer
 49988    65    43     5    65    -1     0      38  extends
 49989    65    43    13    65    -1     0     111  FloatBuffer
 49990    65    44     1    65    -1     0      63  {
 49991    65    44     1    65  1155     0    2693  STARTMETHOD
 49992    65    55     5    65  1155     0     111  HeapFloatBuffer
 49993    65    55    20    65  1155     0      59  (
 49994    65    55    21    65  1155     0      36  int
 49995    65    55    25    65  1155     0     111  cap
 49996    65    55    28    65  1155     0      66  ,
 49997    65    55    30    65  1155     0      36  int
 49998    65    55    34    65  1155     0     111  lim
 49999    65    55    37    65  1155     0      60  )
 50000    65    55    39    65  1155     0      63  {
 50001    65    57     9    65  1155     0      27  super
 50002    65    57    14    65  1155     0      59  (
 50003    65    57    15    65  1155     0      77  -
 50004    65    57    16    65  1155     0     112  1
 50005    65    57    17    65  1155     0      66  ,
 50006    65    57    19    65  1155     0     112  0
 50007    65    57    20    65  1155     0      66  ,
 50008    65    57    22    65  1155     0     111  lim
 50009    65    57    25    65  1155     0      66  ,
 50010    65    57    27    65  1155     0     111  cap
 50011    65    57    30    65  1155     0      66  ,
 50012    65    57    32    65  1155     0      15  new
 50013    65    57    36    65  1155     0       4  float
 50014    65    57    41    65  1155     0      61  [
 50015    65    57    42    65  1155     0     111  cap
 50016    65    57    45    65  1155     0      62  ]
 50017    65    57    46    65  1155     0      66  ,
 50018    65    57    48    65  1155     0     112  0
 50019    65    57    49    65  1155     0      60  )
 50020    65    57    50    65  1155     0     102  ;
 50021    65    66     5    65  1155     0      64  }
 50022    65    66     5    65  1155     0    2694  ENDMETHOD
 50023    65    66     5    65  1156     0    2695  STARTMETHOD
 50024    65    68     5    65  1156     0     111  HeapFloatBuffer
 50025    65    68    20    65  1156     0      59  (
 50026    65    68    21    65  1156     0       4  float
 50027    65    68    26    65  1156     0      61  [
 50028    65    68    27    65  1156     0      62  ]
 50029    65    68    29    65  1156     0     111  buf
 50030    65    68    32    65  1156     0      66  ,
 50031    65    68    34    65  1156     0      36  int
 50032    65    68    38    65  1156     0     111  off
 50033    65    68    41    65  1156     0      66  ,
 50034    65    68    43    65  1156     0      36  int
 50035    65    68    47    65  1156     0     111  len
 50036    65    68    50    65  1156     0      60  )
 50037    65    68    52    65  1156     0      63  {
 50038    65    70     9    65  1156     0      27  super
 50039    65    70    14    65  1156     0      59  (
 50040    65    70    15    65  1156     0      77  -
 50041    65    70    16    65  1156     0     112  1
 50042    65    70    17    65  1156     0      66  ,
 50043    65    70    19    65  1156     0     111  off
 50044    65    70    22    65  1156     0      66  ,
 50045    65    70    24    65  1156     0     111  off
 50046    65    70    28    65  1156     0      74  +
 50047    65    70    30    65  1156     0     111  len
 50048    65    70    33    65  1156     0      66  ,
 50049    65    70    35    65  1156     0     111  buf.length
 50050    65    70    45    65  1156     0      66  ,
 50051    65    70    47    65  1156     0     111  buf
 50052    65    70    50    65  1156     0      66  ,
 50053    65    70    52    65  1156     0     112  0
 50054    65    70    53    65  1156     0      60  )
 50055    65    70    54    65  1156     0     102  ;
 50056    65    79     5    65  1156     0      64  }
 50057    65    79     5    65  1156     0    2696  ENDMETHOD
 50058    65    79     5    65  1157     0    2697  STARTMETHOD
 50059    65    81     5    65  1157     0      23  protected
 50060    65    81    15    65  1157     0     111  HeapFloatBuffer
 50061    65    81    30    65  1157     0      59  (
 50062    65    81    31    65  1157     0       4  float
 50063    65    81    36    65  1157     0      61  [
 50064    65    81    37    65  1157     0      62  ]
 50065    65    81    39    65  1157     0     111  buf
 50066    65    81    42    65  1157     0      66  ,
 50067    65    82    36    65  1157     0      36  int
 50068    65    82    40    65  1157     0     111  mark
 50069    65    82    44    65  1157     0      66  ,
 50070    65    82    46    65  1157     0      36  int
 50071    65    82    50    65  1157     0     111  pos
 50072    65    82    53    65  1157     0      66  ,
 50073    65    82    55    65  1157     0      36  int
 50074    65    82    59    65  1157     0     111  lim
 50075    65    82    62    65  1157     0      66  ,
 50076    65    82    64    65  1157     0      36  int
 50077    65    82    68    65  1157     0     111  cap
 50078    65    82    71    65  1157     0      66  ,
 50079    65    83    36    65  1157     0      36  int
 50080    65    83    40    65  1157     0     111  off
 50081    65    83    43    65  1157     0      60  )
 50082    65    84     5    65  1157     0      63  {
 50083    65    86     9    65  1157     0      27  super
 50084    65    86    14    65  1157     0      59  (
 50085    65    86    15    65  1157     0     111  mark
 50086    65    86    19    65  1157     0      66  ,
 50087    65    86    21    65  1157     0     111  pos
 50088    65    86    24    65  1157     0      66  ,
 50089    65    86    26    65  1157     0     111  lim
 50090    65    86    29    65  1157     0      66  ,
 50091    65    86    31    65  1157     0     111  cap
 50092    65    86    34    65  1157     0      66  ,
 50093    65    86    36    65  1157     0     111  buf
 50094    65    86    39    65  1157     0      66  ,
 50095    65    86    41    65  1157     0     111  off
 50096    65    86    44    65  1157     0      60  )
 50097    65    86    45    65  1157     0     102  ;
 50098    65    95     5    65  1157     0      64  }
 50099    65    95     5    65  1157     0    2698  ENDMETHOD
 50100    65    95     5    65  1158     0    2699  STARTMETHOD
 50101    65    97     5    65  1158     0      10  public
 50102    65    97    12    65  1158     0     111  FloatBuffer
 50103    65    97    24    65  1158     0     111  slice
 50104    65    97    29    65  1158     0      59  (
 50105    65    97    30    65  1158     0      60  )
 50106    65    97    32    65  1158     0      63  {
 50107    65    98     9    65  1158     0      19  return
 50108    65    98    16    65  1158     0      15  new
 50109    65    98    20    65  1158     0     111  HeapFloatBuffer
 50110    65    98    35    65  1158     0      59  (
 50111    65    98    36    65  1158     0     111  hb
 50112    65    98    38    65  1158     0      66  ,
 50113    65    99    41    65  1158     0      77  -
 50114    65    99    42    65  1158     0     112  1
 50115    65    99    43    65  1158     0      66  ,
 50116    65   100    41    65  1158     0     112  0
 50117    65   100    42    65  1158     0      66  ,
 50118    65   101    41    65  1158     1     111  this.remaining
 50119    65   101    55    65  1158     1      59  (
 50120    65   101    56    65  1158     1      60  )
 50121    65   101    57    65  1158     1      66  ,
 50122    65   102    41    65  1158     1     111  this.remaining
 50123    65   102    55    65  1158     1      59  (
 50124    65   102    56    65  1158     1      60  )
 50125    65   102    57    65  1158     1      66  ,
 50126    65   103    41    65  1158     0     111  this.position
 50127    65   103    54    65  1158     0      59  (
 50128    65   103    55    65  1158     0      60  )
 50129    65   103    57    65  1158     0      74  +
 50130    65   103    59    65  1158     1     111  offset
 50131    65   103    65    65  1158     1      60  )
 50132    65   103    66    65  1158     1     102  ;
 50133    65   104     5    65  1158     1      64  }
 50134    65   104     5    65  1158     0    2700  ENDMETHOD
 50135    65   104     5    65  1159     0    2701  STARTMETHOD
 50136    65   106     5    65  1159     0      10  public
 50137    65   106    12    65  1159     0     111  FloatBuffer
 50138    65   106    24    65  1159     0     111  duplicate
 50139    65   106    33    65  1159     0      59  (
 50140    65   106    34    65  1159     0      60  )
 50141    65   106    36    65  1159     0      63  {
 50142    65   107     9    65  1159     0      19  return
 50143    65   107    16    65  1159     0      15  new
 50144    65   107    20    65  1159     0     111  HeapFloatBuffer
 50145    65   107    35    65  1159     0      59  (
 50146    65   107    36    65  1159     0     111  hb
 50147    65   107    38    65  1159     0      66  ,
 50148    65   108    41    65  1159     1     111  this.markValue
 50149    65   108    55    65  1159     1      59  (
 50150    65   108    56    65  1159     1      60  )
 50151    65   108    57    65  1159     1      66  ,
 50152    65   109    41    65  1159     1     111  this.position
 50153    65   109    54    65  1159     1      59  (
 50154    65   109    55    65  1159     1      60  )
 50155    65   109    56    65  1159     1      66  ,
 50156    65   110    41    65  1159     1     111  this.limit
 50157    65   110    51    65  1159     1      59  (
 50158    65   110    52    65  1159     1      60  )
 50159    65   110    53    65  1159     1      66  ,
 50160    65   111    41    65  1159     1     111  this.capacity
 50161    65   111    54    65  1159     1      59  (
 50162    65   111    55    65  1159     1      60  )
 50163    65   111    56    65  1159     1      66  ,
 50164    65   112    41    65  1159     1     111  offset
 50165    65   112    47    65  1159     1      60  )
 50166    65   112    48    65  1159     1     102  ;
 50167    65   113     5    65  1159     1      64  }
 50168    65   113     5    65  1159     0    2702  ENDMETHOD
 50169    65   113     5    65  1160     0    2703  STARTMETHOD
 50170    65   115     5    65  1160     0      10  public
 50171    65   115    12    65  1160     0     111  FloatBuffer
 50172    65   115    24    65  1160     0     111  asReadOnlyBuffer
 50173    65   115    40    65  1160     0      59  (
 50174    65   115    41    65  1160     0      60  )
 50175    65   115    43    65  1160     0      63  {
 50176    65   117     9    65  1160     0      19  return
 50177    65   117    16    65  1160     0      15  new
 50178    65   117    20    65  1160     0     111  HeapFloatBufferR
 50179    65   117    36    65  1160     0      59  (
 50180    65   117    37    65  1160     0     111  hb
 50181    65   117    39    65  1160     0      66  ,
 50182    65   118    38    65  1160     1     111  this.markValue
 50183    65   118    52    65  1160     1      59  (
 50184    65   118    53    65  1160     1      60  )
 50185    65   118    54    65  1160     1      66  ,
 50186    65   119    38    65  1160     1     111  this.position
 50187    65   119    51    65  1160     1      59  (
 50188    65   119    52    65  1160     1      60  )
 50189    65   119    53    65  1160     1      66  ,
 50190    65   120    38    65  1160     1     111  this.limit
 50191    65   120    48    65  1160     1      59  (
 50192    65   120    49    65  1160     1      60  )
 50193    65   120    50    65  1160     1      66  ,
 50194    65   121    38    65  1160     1     111  this.capacity
 50195    65   121    51    65  1160     1      59  (
 50196    65   121    52    65  1160     1      60  )
 50197    65   121    53    65  1160     1      66  ,
 50198    65   122    38    65  1160     1     111  offset
 50199    65   122    44    65  1160     1      60  )
 50200    65   122    45    65  1160     1     102  ;
 50201    65   126     5    65  1160     1      64  }
 50202    65   126     5    65  1160     0    2704  ENDMETHOD
 50203    65   126     5    65  1161     0    2705  STARTMETHOD
 50204    65   130     5    65  1161     0      23  protected
 50205    65   130    15    65  1161     0      36  int
 50206    65   130    19    65  1161     0     111  ix
 50207    65   130    21    65  1161     0      59  (
 50208    65   130    22    65  1161     0      36  int
 50209    65   130    26    65  1161     0     111  i
 50210    65   130    27    65  1161     0      60  )
 50211    65   130    29    65  1161     0      63  {
 50212    65   131     9    65  1161     0      19  return
 50213    65   131    16    65  1161     0     111  i
 50214    65   131    18    65  1161     0      74  +
 50215    65   131    20    65  1161     0     111  offset
 50216    65   131    26    65  1161     0     102  ;
 50217    65   132     5    65  1161     0      64  }
 50218    65   132     5    65  1161     0    2706  ENDMETHOD
 50219    65   132     5    65  1162     0    2707  STARTMETHOD
 50220    65   134     5    65  1162     0      10  public
 50221    65   134    12    65  1162     0       4  float
 50222    65   134    18    65  1162     0     111  get
 50223    65   134    21    65  1162     0      59  (
 50224    65   134    22    65  1162     0      60  )
 50225    65   134    24    65  1162     0      63  {
 50226    65   135     9    65  1162     0      19  return
 50227    65   135    16    65  1162     0     111  hb
 50228    65   135    18    65  1162     0      61  [
 50229    65   135    19    65  1162     0     111  ix
 50230    65   135    21    65  1162     0      59  (
 50231    65   135    22    65  1162     0     111  nextGetIndex
 50232    65   135    34    65  1162     0      59  (
 50233    65   135    35    65  1162     0      60  )
 50234    65   135    36    65  1162     0      60  )
 50235    65   135    37    65  1162     0      62  ]
 50236    65   135    38    65  1162     0     102  ;
 50237    65   136     5    65  1162     0      64  }
 50238    65   136     5    65  1162     0    2708  ENDMETHOD
 50239    65   136     5    65  1163     0    2709  STARTMETHOD
 50240    65   138     5    65  1163     0      10  public
 50241    65   138    12    65  1163     0       4  float
 50242    65   138    18    65  1163     0     111  get
 50243    65   138    21    65  1163     0      59  (
 50244    65   138    22    65  1163     0      36  int
 50245    65   138    26    65  1163     0     111  i
 50246    65   138    27    65  1163     0      60  )
 50247    65   138    29    65  1163     0      63  {
 50248    65   139     9    65  1163     0      19  return
 50249    65   139    16    65  1163     0     111  hb
 50250    65   139    18    65  1163     0      61  [
 50251    65   139    19    65  1163     0     111  ix
 50252    65   139    21    65  1163     0      59  (
 50253    65   139    22    65  1163     0     111  checkIndex
 50254    65   139    32    65  1163     0      59  (
 50255    65   139    33    65  1163     0     111  i
 50256    65   139    34    65  1163     0      60  )
 50257    65   139    35    65  1163     0      60  )
 50258    65   139    36    65  1163     0      62  ]
 50259    65   139    37    65  1163     0     102  ;
 50260    65   140     5    65  1163     0      64  }
 50261    65   140     5    65  1163     0    2710  ENDMETHOD
 50262    65   140     5    65  1164     0    2711  STARTMETHOD
 50263    65   142     5    65  1164     0      10  public
 50264    65   142    12    65  1164     0     111  FloatBuffer
 50265    65   142    24    65  1164     0     111  get
 50266    65   142    27    65  1164     0      59  (
 50267    65   142    28    65  1164     0       4  float
 50268    65   142    33    65  1164     0      61  [
 50269    65   142    34    65  1164     0      62  ]
 50270    65   142    36    65  1164     0     111  dst
 50271    65   142    39    65  1164     0      66  ,
 50272    65   142    41    65  1164     0      36  int
 50273    65   142    45    65  1164     0     111  offset
 50274    65   142    51    65  1164     0      66  ,
 50275    65   142    53    65  1164     0      36  int
 50276    65   142    57    65  1164     0     111  length
 50277    65   142    63    65  1164     0      60  )
 50278    65   142    65    65  1164     0      63  {
 50279    65   143     9    65  1164     0     111  checkBounds
 50280    65   143    20    65  1164     0      59  (
 50281    65   143    21    65  1164     0     111  offset
 50282    65   143    27    65  1164     0      66  ,
 50283    65   143    29    65  1164     0     111  length
 50284    65   143    35    65  1164     0      66  ,
 50285    65   143    37    65  1164     0     111  dst.length
 50286    65   143    47    65  1164     0      60  )
 50287    65   143    48    65  1164     0     102  ;
 50288    65   144     9    65  1164     0      31  if
 50289    65   144    12    65  1164     0      59  (
 50290    65   144    13    65  1164     0     111  length
 50291    65   144    20    65  1164     0      89  >
 50292    65   144    22    65  1164     0     111  remaining
 50293    65   144    31    65  1164     0      59  (
 50294    65   144    32    65  1164     0      60  )
 50295    65   144    33    65  1164     0      60  )
 50296    65   145    13    65  1164     0      20  throw
 50297    65   145    19    65  1164     0      15  new
 50298    65   145    23    65  1164     0     111  BufferUnderflowException
 50299    65   145    47    65  1164     0      59  (
 50300    65   145    48    65  1164     0      60  )
 50301    65   145    49    65  1164     0     102  ;
 50302    65   146     9    65  1164     0     111  System.arraycopy
 50303    65   146    25    65  1164     0      59  (
 50304    65   146    26    65  1164     0     111  hb
 50305    65   146    28    65  1164     0      66  ,
 50306    65   146    30    65  1164     0     111  ix
 50307    65   146    32    65  1164     0      59  (
 50308    65   146    33    65  1164     0     111  position
 50309    65   146    41    65  1164     0      59  (
 50310    65   146    42    65  1164     0      60  )
 50311    65   146    43    65  1164     0      60  )
 50312    65   146    44    65  1164     0      66  ,
 50313    65   146    46    65  1164     0     111  dst
 50314    65   146    49    65  1164     0      66  ,
 50315    65   146    51    65  1164     0     111  offset
 50316    65   146    57    65  1164     0      66  ,
 50317    65   146    59    65  1164     0     111  length
 50318    65   146    65    65  1164     0      60  )
 50319    65   146    66    65  1164     0     102  ;
 50320    65   147     9    65  1164     0     111  position
 50321    65   147    17    65  1164     0      59  (
 50322    65   147    18    65  1164     0     111  position
 50323    65   147    26    65  1164     0      59  (
 50324    65   147    27    65  1164     0      60  )
 50325    65   147    29    65  1164     0      74  +
 50326    65   147    31    65  1164     0     111  length
 50327    65   147    37    65  1164     0      60  )
 50328    65   147    38    65  1164     0     102  ;
 50329    65   148     9    65  1164     0      19  return
 50330    65   148    16    65  1164     0      44  this
 50331    65   148    20    65  1164     1     102  ;
 50332    65   149     5    65  1164     1      64  }
 50333    65   149     5    65  1164     0    2712  ENDMETHOD
 50334    65   149     5    65  1165     0    2713  STARTMETHOD
 50335    65   151     5    65  1165     0      10  public
 50336    65   151    12    65  1165     0      39  boolean
 50337    65   151    20    65  1165     0     111  isDirect
 50338    65   151    28    65  1165     0      59  (
 50339    65   151    29    65  1165     0      60  )
 50340    65   151    31    65  1165     0      63  {
 50341    65   152     9    65  1165     0      19  return
 50342    65   152    16    65  1165     0      43  false
 50343    65   152    21    65  1165     1     102  ;
 50344    65   153     5    65  1165     1      64  }
 50345    65   153     5    65  1165     0    2714  ENDMETHOD
 50346    65   153     5    65  1166     0    2715  STARTMETHOD
 50347    65   157     5    65  1166     0      10  public
 50348    65   157    12    65  1166     0      39  boolean
 50349    65   157    20    65  1166     0     111  isReadOnly
 50350    65   157    30    65  1166     0      59  (
 50351    65   157    31    65  1166     0      60  )
 50352    65   157    33    65  1166     0      63  {
 50353    65   158     9    65  1166     0      19  return
 50354    65   158    16    65  1166     0      43  false
 50355    65   158    21    65  1166     1     102  ;
 50356    65   159     5    65  1166     1      64  }
 50357    65   159     5    65  1166     0    2716  ENDMETHOD
 50358    65   159     5    65  1167     0    2717  STARTMETHOD
 50359    65   161     5    65  1167     0      10  public
 50360    65   161    12    65  1167     0     111  FloatBuffer
 50361    65   161    24    65  1167     0     111  put
 50362    65   161    27    65  1167     0      59  (
 50363    65   161    28    65  1167     0       4  float
 50364    65   161    34    65  1167     0     111  x
 50365    65   161    35    65  1167     0      60  )
 50366    65   161    37    65  1167     0      63  {
 50367    65   163     9    65  1167     0     111  hb
 50368    65   163    11    65  1167     0      61  [
 50369    65   163    12    65  1167     0     111  ix
 50370    65   163    14    65  1167     0      59  (
 50371    65   163    15    65  1167     0     111  nextPutIndex
 50372    65   163    27    65  1167     0      59  (
 50373    65   163    28    65  1167     0      60  )
 50374    65   163    29    65  1167     0      60  )
 50375    65   163    30    65  1167     0      62  ]
 50376    65   163    32    65  1167     0      67  =
 50377    65   163    34    65  1167     0     111  x
 50378    65   163    35    65  1167     0     102  ;
 50379    65   164     9    65  1167     0      19  return
 50380    65   164    16    65  1167     0      44  this
 50381    65   164    20    65  1167     0     102  ;
 50382    65   168     5    65  1167     0      64  }
 50383    65   168     5    65  1167     0    2718  ENDMETHOD
 50384    65   168     5    65  1168     0    2719  STARTMETHOD
 50385    65   170     5    65  1168     0      10  public
 50386    65   170    12    65  1168     0     111  FloatBuffer
 50387    65   170    24    65  1168     0     111  put
 50388    65   170    27    65  1168     0      59  (
 50389    65   170    28    65  1168     0      36  int
 50390    65   170    32    65  1168     0     111  i
 50391    65   170    33    65  1168     0      66  ,
 50392    65   170    35    65  1168     0       4  float
 50393    65   170    41    65  1168     0     111  x
 50394    65   170    42    65  1168     0      60  )
 50395    65   170    44    65  1168     0      63  {
 50396    65   172     9    65  1168     0     111  hb
 50397    65   172    11    65  1168     0      61  [
 50398    65   172    12    65  1168     0     111  ix
 50399    65   172    14    65  1168     0      59  (
 50400    65   172    15    65  1168     0     111  checkIndex
 50401    65   172    25    65  1168     0      59  (
 50402    65   172    26    65  1168     0     111  i
 50403    65   172    27    65  1168     0      60  )
 50404    65   172    28    65  1168     0      60  )
 50405    65   172    29    65  1168     0      62  ]
 50406    65   172    31    65  1168     0      67  =
 50407    65   172    33    65  1168     0     111  x
 50408    65   172    34    65  1168     0     102  ;
 50409    65   173     9    65  1168     0      19  return
 50410    65   173    16    65  1168     0      44  this
 50411    65   173    20    65  1168     0     102  ;
 50412    65   177     5    65  1168     0      64  }
 50413    65   177     5    65  1168     0    2720  ENDMETHOD
 50414    65   177     5    65  1169     0    2721  STARTMETHOD
 50415    65   179     5    65  1169     0      10  public
 50416    65   179    12    65  1169     0     111  FloatBuffer
 50417    65   179    24    65  1169     0     111  put
 50418    65   179    27    65  1169     0      59  (
 50419    65   179    28    65  1169     0       4  float
 50420    65   179    33    65  1169     0      61  [
 50421    65   179    34    65  1169     0      62  ]
 50422    65   179    36    65  1169     0     111  src
 50423    65   179    39    65  1169     0      66  ,
 50424    65   179    41    65  1169     0      36  int
 50425    65   179    45    65  1169     0     111  offset
 50426    65   179    51    65  1169     0      66  ,
 50427    65   179    53    65  1169     0      36  int
 50428    65   179    57    65  1169     0     111  length
 50429    65   179    63    65  1169     0      60  )
 50430    65   179    65    65  1169     0      63  {
 50431    65   181     9    65  1169     0     111  checkBounds
 50432    65   181    20    65  1169     0      59  (
 50433    65   181    21    65  1169     0     111  offset
 50434    65   181    27    65  1169     0      66  ,
 50435    65   181    29    65  1169     0     111  length
 50436    65   181    35    65  1169     0      66  ,
 50437    65   181    37    65  1169     0     111  src.length
 50438    65   181    47    65  1169     0      60  )
 50439    65   181    48    65  1169     0     102  ;
 50440    65   182     9    65  1169     0      31  if
 50441    65   182    12    65  1169     0      59  (
 50442    65   182    13    65  1169     0     111  length
 50443    65   182    20    65  1169     0      89  >
 50444    65   182    22    65  1169     0     111  remaining
 50445    65   182    31    65  1169     0      59  (
 50446    65   182    32    65  1169     0      60  )
 50447    65   182    33    65  1169     0      60  )
 50448    65   183    13    65  1169     0      20  throw
 50449    65   183    19    65  1169     0      15  new
 50450    65   183    23    65  1169     0     111  BufferOverflowException
 50451    65   183    46    65  1169     0      59  (
 50452    65   183    47    65  1169     0      60  )
 50453    65   183    48    65  1169     0     102  ;
 50454    65   184     9    65  1169     0     111  System.arraycopy
 50455    65   184    25    65  1169     0      59  (
 50456    65   184    26    65  1169     0     111  src
 50457    65   184    29    65  1169     0      66  ,
 50458    65   184    31    65  1169     0     111  offset
 50459    65   184    37    65  1169     0      66  ,
 50460    65   184    39    65  1169     0     111  hb
 50461    65   184    41    65  1169     0      66  ,
 50462    65   184    43    65  1169     0     111  ix
 50463    65   184    45    65  1169     0      59  (
 50464    65   184    46    65  1169     0     111  position
 50465    65   184    54    65  1169     0      59  (
 50466    65   184    55    65  1169     0      60  )
 50467    65   184    56    65  1169     0      60  )
 50468    65   184    57    65  1169     0      66  ,
 50469    65   184    59    65  1169     0     111  length
 50470    65   184    65    65  1169     0      60  )
 50471    65   184    66    65  1169     0     102  ;
 50472    65   185     9    65  1169     0     111  position
 50473    65   185    17    65  1169     0      59  (
 50474    65   185    18    65  1169     0     111  position
 50475    65   185    26    65  1169     0      59  (
 50476    65   185    27    65  1169     0      60  )
 50477    65   185    29    65  1169     0      74  +
 50478    65   185    31    65  1169     0     111  length
 50479    65   185    37    65  1169     0      60  )
 50480    65   185    38    65  1169     0     102  ;
 50481    65   186     9    65  1169     0      19  return
 50482    65   186    16    65  1169     0      44  this
 50483    65   186    20    65  1169     0     102  ;
 50484    65   190     5    65  1169     0      64  }
 50485    65   190     5    65  1169     0    2722  ENDMETHOD
 50486    65   190     5    65  1170     0    2723  STARTMETHOD
 50487    65   192     5    65  1170     0      10  public
 50488    65   192    12    65  1170     0     111  FloatBuffer
 50489    65   192    24    65  1170     0     111  put
 50490    65   192    27    65  1170     0      59  (
 50491    65   192    28    65  1170     0     111  FloatBuffer
 50492    65   192    40    65  1170     0     111  src
 50493    65   192    43    65  1170     0      60  )
 50494    65   192    45    65  1170     0      63  {
 50495    65   194     9    65  1170     0      31  if
 50496    65   194    12    65  1170     0      59  (
 50497    65   194    13    65  1170     0     111  src
 50498    65   194    17    65  1170     0      16  instanceof
 50499    65   194    28    65  1170     0     111  HeapFloatBuffer
 50500    65   194    43    65  1170     0      60  )
 50501    65   194    45    65  1170     0      63  {
 50502    65   195    13    65  1170     0      31  if
 50503    65   195    16    65  1170     0      59  (
 50504    65   195    17    65  1170     0     111  src
 50505    65   195    21    65  1170     0      68  ==
 50506    65   195    24    65  1170     0      44  this
 50507    65   195    28    65  1170     0      60  )
 50508    65   196    17    65  1170     0      20  throw
 50509    65   196    23    65  1170     0      15  new
 50510    65   196    27    65  1170     0     111  IllegalArgumentException
 50511    65   196    51    65  1170     0      59  (
 50512    65   196    52    65  1170     0      60  )
 50513    65   196    53    65  1170     0     102  ;
 50514    65   197    13    65  1170     0     111  HeapFloatBuffer
 50515    65   197    29    65  1170     0     111  sb
 50516    65   197    32    65  1170     0      67  =
 50517    65   197    34    65  1170     0      59  (
 50518    65   197    35    65  1170     0     111  HeapFloatBuffer
 50519    65   197    50    65  1170     0      60  )
 50520    65   197    51    65  1170     0     111  src
 50521    65   197    54    65  1170     0     102  ;
 50522    65   198    13    65  1170     0      36  int
 50523    65   198    17    65  1170     0     111  n
 50524    65   198    19    65  1170     0      67  =
 50525    65   198    21    65  1170     0     111  sb.remaining
 50526    65   198    33    65  1170     0      59  (
 50527    65   198    34    65  1170     0      60  )
 50528    65   198    35    65  1170     0     102  ;
 50529    65   199    13    65  1170     0      31  if
 50530    65   199    16    65  1170     0      59  (
 50531    65   199    17    65  1170     0     111  n
 50532    65   199    19    65  1170     0      89  >
 50533    65   199    21    65  1170     0     111  remaining
 50534    65   199    30    65  1170     0      59  (
 50535    65   199    31    65  1170     0      60  )
 50536    65   199    32    65  1170     0      60  )
 50537    65   200    17    65  1170     0      20  throw
 50538    65   200    23    65  1170     0      15  new
 50539    65   200    27    65  1170     0     111  BufferOverflowException
 50540    65   200    50    65  1170     0      59  (
 50541    65   200    51    65  1170     0      60  )
 50542    65   200    52    65  1170     0     102  ;
 50543    65   201    13    65  1170     0     111  System.arraycopy
 50544    65   201    29    65  1170     0      59  (
 50545    65   201    30    65  1170     0     111  sb.hb
 50546    65   201    35    65  1170     0      66  ,
 50547    65   201    37    65  1170     0     111  sb.ix
 50548    65   201    42    65  1170     0      59  (
 50549    65   201    43    65  1170     0     111  sb.position
 50550    65   201    54    65  1170     0      59  (
 50551    65   201    55    65  1170     0      60  )
 50552    65   201    56    65  1170     0      60  )
 50553    65   201    57    65  1170     0      66  ,
 50554    65   202    30    65  1170     0     111  hb
 50555    65   202    32    65  1170     0      66  ,
 50556    65   202    34    65  1170     0     111  ix
 50557    65   202    36    65  1170     0      59  (
 50558    65   202    37    65  1170     0     111  position
 50559    65   202    45    65  1170     0      59  (
 50560    65   202    46    65  1170     0      60  )
 50561    65   202    47    65  1170     0      60  )
 50562    65   202    48    65  1170     0      66  ,
 50563    65   202    50    65  1170     0     111  n
 50564    65   202    51    65  1170     0      60  )
 50565    65   202    52    65  1170     0     102  ;
 50566    65   203    13    65  1170     1     111  sb.position
 50567    65   203    24    65  1170     1      59  (
 50568    65   203    25    65  1170     1     111  sb.position
 50569    65   203    36    65  1170     1      59  (
 50570    65   203    37    65  1170     1      60  )
 50571    65   203    39    65  1170     1      74  +
 50572    65   203    41    65  1170     1     111  n
 50573    65   203    42    65  1170     1      60  )
 50574    65   203    43    65  1170     1     102  ;
 50575    65   204    13    65  1170     1     111  position
 50576    65   204    21    65  1170     1      59  (
 50577    65   204    22    65  1170     1     111  position
 50578    65   204    30    65  1170     1      59  (
 50579    65   204    31    65  1170     1      60  )
 50580    65   204    33    65  1170     1      74  +
 50581    65   204    35    65  1170     1     111  n
 50582    65   204    36    65  1170     1      60  )
 50583    65   204    37    65  1170     1     102  ;
 50584    65   205     9    65  1170     0      64  }
 50585    65   205    11    65  1170     0      48  else
 50586    65   205    16    65  1170     0      31  if
 50587    65   205    19    65  1170     0      59  (
 50588    65   205    20    65  1170     0     111  src.isDirect
 50589    65   205    32    65  1170     0      59  (
 50590    65   205    33    65  1170     0      60  )
 50591    65   205    34    65  1170     0      60  )
 50592    65   205    36    65  1170     0      63  {
 50593    65   206    13    65  1170     0      36  int
 50594    65   206    17    65  1170     0     111  n
 50595    65   206    19    65  1170     0      67  =
 50596    65   206    21    65  1170     0     111  src.remaining
 50597    65   206    34    65  1170     0      59  (
 50598    65   206    35    65  1170     0      60  )
 50599    65   206    36    65  1170     0     102  ;
 50600    65   207    13    65  1170     0      31  if
 50601    65   207    16    65  1170     0      59  (
 50602    65   207    17    65  1170     0     111  n
 50603    65   207    19    65  1170     0      89  >
 50604    65   207    21    65  1170     0     111  remaining
 50605    65   207    30    65  1170     0      59  (
 50606    65   207    31    65  1170     0      60  )
 50607    65   207    32    65  1170     0      60  )
 50608    65   208    17    65  1170     0      20  throw
 50609    65   208    23    65  1170     0      15  new
 50610    65   208    27    65  1170     0     111  BufferOverflowException
 50611    65   208    50    65  1170     0      59  (
 50612    65   208    51    65  1170     0      60  )
 50613    65   208    52    65  1170     0     102  ;
 50614    65   209    13    65  1170     0     111  src.get
 50615    65   209    20    65  1170     0      59  (
 50616    65   209    21    65  1170     0     111  hb
 50617    65   209    23    65  1170     0      66  ,
 50618    65   209    25    65  1170     0     111  ix
 50619    65   209    27    65  1170     0      59  (
 50620    65   209    28    65  1170     0     111  position
 50621    65   209    36    65  1170     0      59  (
 50622    65   209    37    65  1170     0      60  )
 50623    65   209    38    65  1170     0      60  )
 50624    65   209    39    65  1170     0      66  ,
 50625    65   209    41    65  1170     0     111  n
 50626    65   209    42    65  1170     0      60  )
 50627    65   209    43    65  1170     0     102  ;
 50628    65   210    13    65  1170     0     111  position
 50629    65   210    21    65  1170     0      59  (
 50630    65   210    22    65  1170     0     111  position
 50631    65   210    30    65  1170     0      59  (
 50632    65   210    31    65  1170     0      60  )
 50633    65   210    33    65  1170     0      74  +
 50634    65   210    35    65  1170     0     111  n
 50635    65   210    36    65  1170     0      60  )
 50636    65   210    37    65  1170     0     102  ;
 50637    65   211     9    65  1170     0      64  }
 50638    65   211    11    65  1170     0      48  else
 50639    65   211    16    65  1170     0      63  {
 50640    65   212    13    65  1170     0     111  super.put
 50641    65   212    22    65  1170     0      59  (
 50642    65   212    23    65  1170     0     111  src
 50643    65   212    26    65  1170     0      60  )
 50644    65   212    27    65  1170     0     102  ;
 50645    65   213     9    65  1170     0      64  }
 50646    65   214     9    65  1170     0      19  return
 50647    65   214    16    65  1170     0      44  this
 50648    65   214    20    65  1170     0     102  ;
 50649    65   218     5    65  1170     0      64  }
 50650    65   218     5    65  1170     0    2724  ENDMETHOD
 50651    65   218     5    65  1171     0    2725  STARTMETHOD
 50652    65   220     5    65  1171     0      10  public
 50653    65   220    12    65  1171     0     111  FloatBuffer
 50654    65   220    24    65  1171     0     111  compact
 50655    65   220    31    65  1171     0      59  (
 50656    65   220    32    65  1171     0      60  )
 50657    65   220    34    65  1171     0      63  {
 50658    65   222     9    65  1171     0     111  System.arraycopy
 50659    65   222    25    65  1171     0      59  (
 50660    65   222    26    65  1171     0     111  hb
 50661    65   222    28    65  1171     0      66  ,
 50662    65   222    30    65  1171     0     111  ix
 50663    65   222    32    65  1171     0      59  (
 50664    65   222    33    65  1171     0     111  position
 50665    65   222    41    65  1171     0      59  (
 50666    65   222    42    65  1171     0      60  )
 50667    65   222    43    65  1171     0      60  )
 50668    65   222    44    65  1171     0      66  ,
 50669    65   222    46    65  1171     0     111  hb
 50670    65   222    48    65  1171     0      66  ,
 50671    65   222    50    65  1171     0     111  ix
 50672    65   222    52    65  1171     0      59  (
 50673    65   222    53    65  1171     0     112  0
 50674    65   222    54    65  1171     0      60  )
 50675    65   222    55    65  1171     0      66  ,
 50676    65   222    57    65  1171     0     111  remaining
 50677    65   222    66    65  1171     0      59  (
 50678    65   222    67    65  1171     0      60  )
 50679    65   222    68    65  1171     0      60  )
 50680    65   222    69    65  1171     0     102  ;
 50681    65   223     9    65  1171     1     111  position
 50682    65   223    17    65  1171     1      59  (
 50683    65   223    18    65  1171     1     111  remaining
 50684    65   223    27    65  1171     1      59  (
 50685    65   223    28    65  1171     1      60  )
 50686    65   223    29    65  1171     1      60  )
 50687    65   223    30    65  1171     1     102  ;
 50688    65   224     9    65  1171     1     111  limit
 50689    65   224    14    65  1171     1      59  (
 50690    65   224    15    65  1171     1     111  capacity
 50691    65   224    23    65  1171     1      59  (
 50692    65   224    24    65  1171     1      60  )
 50693    65   224    25    65  1171     1      60  )
 50694    65   224    26    65  1171     1     102  ;
 50695    65   225     9    65  1171     0     111  clearMark
 50696    65   225    18    65  1171     0      59  (
 50697    65   225    19    65  1171     0      60  )
 50698    65   225    20    65  1171     0     102  ;
 50699    65   226     9    65  1171     0      19  return
 50700    65   226    16    65  1171     0      44  this
 50701    65   226    20    65  1171     0     102  ;
 50702    65   230     5    65  1171     0      64  }
 50703    65   230     5    65  1171     0    2726  ENDMETHOD
 50704    65   230     5    65  1172     0    2727  STARTMETHOD
 50705    65   586     5    65  1172     0      10  public
 50706    65   586    12    65  1172     0     111  ByteOrder
 50707    65   586    22    65  1172     0     111  order
 50708    65   586    27    65  1172     0      59  (
 50709    65   586    28    65  1172     0      60  )
 50710    65   586    30    65  1172     0      63  {
 50711    65   587     9    65  1172     0      19  return
 50712    65   587    16    65  1172     0     111  ByteOrder.nativeOrder
 50713    65   587    37    65  1172     0      59  (
 50714    65   587    38    65  1172     0      60  )
 50715    65   587    39    65  1172     0     102  ;
 50716    65   588     5    65  1172     0      64  }
 50717    65   588     5    65  1172     0    2728  ENDMETHOD
 50718    65   592     1    65    -1     0      64  }
 50719    65   592     1    65    -1     1    2729  ENDCLASS
 50720    65   592     1    -1    -1     1    2730  ENDFILE C:\javasrc\java\nio\HeapFloatBuffer.java
 50721    66     1     1    -1    -1     1    2731  STARTFILE C:\javasrc\java\nio\HeapFloatBufferR.java
 50722    66    28     1    -1    -1     0       5  package
 50723    66    28     9    -1    -1     0     111  java.nio
 50724    66    28    17    -1    -1     0     102  ;
 50725    66    42     1    66    -1     0    2732  STARTCLASS
 50726    66    42     1    66    -1     0      24  class
 50727    66    42     7    66    -1     0     111  HeapFloatBufferR
 50728    66    43     5    66    -1     0      38  extends
 50729    66    43    13    66    -1     0     111  HeapFloatBuffer
 50730    66    44     1    66    -1     0      63  {
 50731    66    44     1    66  1173     0    2733  STARTMETHOD
 50732    66    55     5    66  1173     0     111  HeapFloatBufferR
 50733    66    55    21    66  1173     0      59  (
 50734    66    55    22    66  1173     0      36  int
 50735    66    55    26    66  1173     0     111  cap
 50736    66    55    29    66  1173     0      66  ,
 50737    66    55    31    66  1173     0      36  int
 50738    66    55    35    66  1173     0     111  lim
 50739    66    55    38    66  1173     0      60  )
 50740    66    55    40    66  1173     0      63  {
 50741    66    63     9    66  1173     0      27  super
 50742    66    63    14    66  1173     0      59  (
 50743    66    63    15    66  1173     0     111  cap
 50744    66    63    18    66  1173     0      66  ,
 50745    66    63    20    66  1173     0     111  lim
 50746    66    63    23    66  1173     0      60  )
 50747    66    63    24    66  1173     0     102  ;
 50748    66    64     9    66  1173     0     111  this.isReadOnly
 50749    66    64    25    66  1173     0      67  =
 50750    66    64    27    66  1173     0      52  true
 50751    66    64    31    66  1173     0     102  ;
 50752    66    66     5    66  1173     0      64  }
 50753    66    66     5    66  1173     0    2734  ENDMETHOD
 50754    66    66     5    66  1174     0    2735  STARTMETHOD
 50755    66    68     5    66  1174     0     111  HeapFloatBufferR
 50756    66    68    21    66  1174     0      59  (
 50757    66    68    22    66  1174     0       4  float
 50758    66    68    27    66  1174     0      61  [
 50759    66    68    28    66  1174     0      62  ]
 50760    66    68    30    66  1174     0     111  buf
 50761    66    68    33    66  1174     0      66  ,
 50762    66    68    35    66  1174     0      36  int
 50763    66    68    39    66  1174     0     111  off
 50764    66    68    42    66  1174     0      66  ,
 50765    66    68    44    66  1174     0      36  int
 50766    66    68    48    66  1174     0     111  len
 50767    66    68    51    66  1174     0      60  )
 50768    66    68    53    66  1174     0      63  {
 50769    66    76     9    66  1174     0      27  super
 50770    66    76    14    66  1174     0      59  (
 50771    66    76    15    66  1174     0     111  buf
 50772    66    76    18    66  1174     0      66  ,
 50773    66    76    20    66  1174     0     111  off
 50774    66    76    23    66  1174     0      66  ,
 50775    66    76    25    66  1174     0     111  len
 50776    66    76    28    66  1174     0      60  )
 50777    66    76    29    66  1174     0     102  ;
 50778    66    77     9    66  1174     0     111  this.isReadOnly
 50779    66    77    25    66  1174     0      67  =
 50780    66    77    27    66  1174     0      52  true
 50781    66    77    31    66  1174     0     102  ;
 50782    66    79     5    66  1174     0      64  }
 50783    66    79     5    66  1174     0    2736  ENDMETHOD
 50784    66    79     5    66  1175     0    2737  STARTMETHOD
 50785    66    81     5    66  1175     0      23  protected
 50786    66    81    15    66  1175     0     111  HeapFloatBufferR
 50787    66    81    31    66  1175     0      59  (
 50788    66    81    32    66  1175     0       4  float
 50789    66    81    37    66  1175     0      61  [
 50790    66    81    38    66  1175     0      62  ]
 50791    66    81    40    66  1175     0     111  buf
 50792    66    81    43    66  1175     0      66  ,
 50793    66    82    36    66  1175     0      36  int
 50794    66    82    40    66  1175     0     111  mark
 50795    66    82    44    66  1175     0      66  ,
 50796    66    82    46    66  1175     0      36  int
 50797    66    82    50    66  1175     0     111  pos
 50798    66    82    53    66  1175     0      66  ,
 50799    66    82    55    66  1175     0      36  int
 50800    66    82    59    66  1175     0     111  lim
 50801    66    82    62    66  1175     0      66  ,
 50802    66    82    64    66  1175     0      36  int
 50803    66    82    68    66  1175     0     111  cap
 50804    66    82    71    66  1175     0      66  ,
 50805    66    83    36    66  1175     0      36  int
 50806    66    83    40    66  1175     0     111  off
 50807    66    83    43    66  1175     0      60  )
 50808    66    84     5    66  1175     0      63  {
 50809    66    92     9    66  1175     0      27  super
 50810    66    92    14    66  1175     0      59  (
 50811    66    92    15    66  1175     0     111  buf
 50812    66    92    18    66  1175     0      66  ,
 50813    66    92    20    66  1175     0     111  mark
 50814    66    92    24    66  1175     0      66  ,
 50815    66    92    26    66  1175     0     111  pos
 50816    66    92    29    66  1175     0      66  ,
 50817    66    92    31    66  1175     0     111  lim
 50818    66    92    34    66  1175     0      66  ,
 50819    66    92    36    66  1175     0     111  cap
 50820    66    92    39    66  1175     0      66  ,
 50821    66    92    41    66  1175     0     111  off
 50822    66    92    44    66  1175     0      60  )
 50823    66    92    45    66  1175     0     102  ;
 50824    66    93     9    66  1175     0     111  this.isReadOnly
 50825    66    93    25    66  1175     0      67  =
 50826    66    93    27    66  1175     0      52  true
 50827    66    93    31    66  1175     0     102  ;
 50828    66    95     5    66  1175     0      64  }
 50829    66    95     5    66  1175     0    2738  ENDMETHOD
 50830    66    95     5    66  1176     0    2739  STARTMETHOD
 50831    66    97     5    66  1176     0      10  public
 50832    66    97    12    66  1176     0     111  FloatBuffer
 50833    66    97    24    66  1176     0     111  slice
 50834    66    97    29    66  1176     0      59  (
 50835    66    97    30    66  1176     0      60  )
 50836    66    97    32    66  1176     0      63  {
 50837    66    98     9    66  1176     0      19  return
 50838    66    98    16    66  1176     0      15  new
 50839    66    98    20    66  1176     0     111  HeapFloatBufferR
 50840    66    98    36    66  1176     0      59  (
 50841    66    98    37    66  1176     0     111  hb
 50842    66    98    39    66  1176     0      66  ,
 50843    66    99    41    66  1176     0      77  -
 50844    66    99    42    66  1176     0     112  1
 50845    66    99    43    66  1176     0      66  ,
 50846    66   100    41    66  1176     0     112  0
 50847    66   100    42    66  1176     0      66  ,
 50848    66   101    41    66  1176     1     111  this.remaining
 50849    66   101    55    66  1176     1      59  (
 50850    66   101    56    66  1176     1      60  )
 50851    66   101    57    66  1176     1      66  ,
 50852    66   102    41    66  1176     1     111  this.remaining
 50853    66   102    55    66  1176     1      59  (
 50854    66   102    56    66  1176     1      60  )
 50855    66   102    57    66  1176     1      66  ,
 50856    66   103    41    66  1176     0     111  this.position
 50857    66   103    54    66  1176     0      59  (
 50858    66   103    55    66  1176     0      60  )
 50859    66   103    57    66  1176     0      74  +
 50860    66   103    59    66  1176     0     111  offset
 50861    66   103    65    66  1176     0      60  )
 50862    66   103    66    66  1176     0     102  ;
 50863    66   104     5    66  1176     0      64  }
 50864    66   104     5    66  1176     0    2740  ENDMETHOD
 50865    66   104     5    66  1177     0    2741  STARTMETHOD
 50866    66   106     5    66  1177     0      10  public
 50867    66   106    12    66  1177     0     111  FloatBuffer
 50868    66   106    24    66  1177     0     111  duplicate
 50869    66   106    33    66  1177     0      59  (
 50870    66   106    34    66  1177     0      60  )
 50871    66   106    36    66  1177     0      63  {
 50872    66   107     9    66  1177     0      19  return
 50873    66   107    16    66  1177     0      15  new
 50874    66   107    20    66  1177     0     111  HeapFloatBufferR
 50875    66   107    36    66  1177     0      59  (
 50876    66   107    37    66  1177     0     111  hb
 50877    66   107    39    66  1177     0      66  ,
 50878    66   108    41    66  1177     1     111  this.markValue
 50879    66   108    55    66  1177     1      59  (
 50880    66   108    56    66  1177     1      60  )
 50881    66   108    57    66  1177     1      66  ,
 50882    66   109    41    66  1177     1     111  this.position
 50883    66   109    54    66  1177     1      59  (
 50884    66   109    55    66  1177     1      60  )
 50885    66   109    56    66  1177     1      66  ,
 50886    66   110    41    66  1177     1     111  this.limit
 50887    66   110    51    66  1177     1      59  (
 50888    66   110    52    66  1177     1      60  )
 50889    66   110    53    66  1177     1      66  ,
 50890    66   111    41    66  1177     1     111  this.capacity
 50891    66   111    54    66  1177     1      59  (
 50892    66   111    55    66  1177     1      60  )
 50893    66   111    56    66  1177     1      66  ,
 50894    66   112    41    66  1177     0     111  offset
 50895    66   112    47    66  1177     0      60  )
 50896    66   112    48    66  1177     0     102  ;
 50897    66   113     5    66  1177     0      64  }
 50898    66   113     5    66  1177     0    2742  ENDMETHOD
 50899    66   113     5    66  1178     0    2743  STARTMETHOD
 50900    66   115     5    66  1178     0      10  public
 50901    66   115    12    66  1178     0     111  FloatBuffer
 50902    66   115    24    66  1178     0     111  asReadOnlyBuffer
 50903    66   115    40    66  1178     0      59  (
 50904    66   115    41    66  1178     0      60  )
 50905    66   115    43    66  1178     0      63  {
 50906    66   124     9    66  1178     0      19  return
 50907    66   124    16    66  1178     0     111  duplicate
 50908    66   124    25    66  1178     0      59  (
 50909    66   124    26    66  1178     0      60  )
 50910    66   124    27    66  1178     0     102  ;
 50911    66   126     5    66  1178     0      64  }
 50912    66   126     5    66  1178     0    2744  ENDMETHOD
 50913    66   126     5    66  1179     0    2745  STARTMETHOD
 50914    66   157     5    66  1179     0      10  public
 50915    66   157    12    66  1179     0      39  boolean
 50916    66   157    20    66  1179     0     111  isReadOnly
 50917    66   157    30    66  1179     0      59  (
 50918    66   157    31    66  1179     0      60  )
 50919    66   157    33    66  1179     0      63  {
 50920    66   158     9    66  1179     0      19  return
 50921    66   158    16    66  1179     0      52  true
 50922    66   158    20    66  1179     0     102  ;
 50923    66   159     5    66  1179     0      64  }
 50924    66   159     5    66  1179     0    2746  ENDMETHOD
 50925    66   159     5    66  1180     0    2747  STARTMETHOD
 50926    66   161     5    66  1180     0      10  public
 50927    66   161    12    66  1180     0     111  FloatBuffer
 50928    66   161    24    66  1180     0     111  put
 50929    66   161    27    66  1180     0      59  (
 50930    66   161    28    66  1180     0       4  float
 50931    66   161    34    66  1180     0     111  x
 50932    66   161    35    66  1180     0      60  )
 50933    66   161    37    66  1180     0      63  {
 50934    66   166     9    66  1180     0      20  throw
 50935    66   166    15    66  1180     0      15  new
 50936    66   166    19    66  1180     0     111  ReadOnlyBufferException
 50937    66   166    42    66  1180     0      59  (
 50938    66   166    43    66  1180     0      60  )
 50939    66   166    44    66  1180     0     102  ;
 50940    66   168     5    66  1180     0      64  }
 50941    66   168     5    66  1180     0    2748  ENDMETHOD
 50942    66   168     5    66  1181     0    2749  STARTMETHOD
 50943    66   170     5    66  1181     0      10  public
 50944    66   170    12    66  1181     0     111  FloatBuffer
 50945    66   170    24    66  1181     0     111  put
 50946    66   170    27    66  1181     0      59  (
 50947    66   170    28    66  1181     0      36  int
 50948    66   170    32    66  1181     0     111  i
 50949    66   170    33    66  1181     0      66  ,
 50950    66   170    35    66  1181     0       4  float
 50951    66   170    41    66  1181     0     111  x
 50952    66   170    42    66  1181     0      60  )
 50953    66   170    44    66  1181     0      63  {
 50954    66   175     9    66  1181     0      20  throw
 50955    66   175    15    66  1181     0      15  new
 50956    66   175    19    66  1181     0     111  ReadOnlyBufferException
 50957    66   175    42    66  1181     0      59  (
 50958    66   175    43    66  1181     0      60  )
 50959    66   175    44    66  1181     0     102  ;
 50960    66   177     5    66  1181     0      64  }
 50961    66   177     5    66  1181     0    2750  ENDMETHOD
 50962    66   177     5    66  1182     0    2751  STARTMETHOD
 50963    66   179     5    66  1182     0      10  public
 50964    66   179    12    66  1182     0     111  FloatBuffer
 50965    66   179    24    66  1182     0     111  put
 50966    66   179    27    66  1182     0      59  (
 50967    66   179    28    66  1182     0       4  float
 50968    66   179    33    66  1182     0      61  [
 50969    66   179    34    66  1182     0      62  ]
 50970    66   179    36    66  1182     0     111  src
 50971    66   179    39    66  1182     0      66  ,
 50972    66   179    41    66  1182     0      36  int
 50973    66   179    45    66  1182     0     111  offset
 50974    66   179    51    66  1182     0      66  ,
 50975    66   179    53    66  1182     0      36  int
 50976    66   179    57    66  1182     0     111  length
 50977    66   179    63    66  1182     0      60  )
 50978    66   179    65    66  1182     0      63  {
 50979    66   188     9    66  1182     0      20  throw
 50980    66   188    15    66  1182     0      15  new
 50981    66   188    19    66  1182     0     111  ReadOnlyBufferException
 50982    66   188    42    66  1182     0      59  (
 50983    66   188    43    66  1182     0      60  )
 50984    66   188    44    66  1182     0     102  ;
 50985    66   190     5    66  1182     0      64  }
 50986    66   190     5    66  1182     0    2752  ENDMETHOD
 50987    66   190     5    66  1183     0    2753  STARTMETHOD
 50988    66   192     5    66  1183     0      10  public
 50989    66   192    12    66  1183     0     111  FloatBuffer
 50990    66   192    24    66  1183     0     111  put
 50991    66   192    27    66  1183     0      59  (
 50992    66   192    28    66  1183     0     111  FloatBuffer
 50993    66   192    40    66  1183     0     111  src
 50994    66   192    43    66  1183     0      60  )
 50995    66   192    45    66  1183     0      63  {
 50996    66   216     9    66  1183     0      20  throw
 50997    66   216    15    66  1183     0      15  new
 50998    66   216    19    66  1183     0     111  ReadOnlyBufferException
 50999    66   216    42    66  1183     0      59  (
 51000    66   216    43    66  1183     0      60  )
 51001    66   216    44    66  1183     0     102  ;
 51002    66   218     5    66  1183     0      64  }
 51003    66   218     5    66  1183     0    2754  ENDMETHOD
 51004    66   218     5    66  1184     0    2755  STARTMETHOD
 51005    66   220     5    66  1184     0      10  public
 51006    66   220    12    66  1184     0     111  FloatBuffer
 51007    66   220    24    66  1184     0     111  compact
 51008    66   220    31    66  1184     0      59  (
 51009    66   220    32    66  1184     0      60  )
 51010    66   220    34    66  1184     0      63  {
 51011    66   228     9    66  1184     0      20  throw
 51012    66   228    15    66  1184     0      15  new
 51013    66   228    19    66  1184     0     111  ReadOnlyBufferException
 51014    66   228    42    66  1184     0      59  (
 51015    66   228    43    66  1184     0      60  )
 51016    66   228    44    66  1184     0     102  ;
 51017    66   230     5    66  1184     0      64  }
 51018    66   230     5    66  1184     0    2756  ENDMETHOD
 51019    66   230     5    66  1185     0    2757  STARTMETHOD
 51020    66   586     5    66  1185     0      10  public
 51021    66   586    12    66  1185     0     111  ByteOrder
 51022    66   586    22    66  1185     0     111  order
 51023    66   586    27    66  1185     0      59  (
 51024    66   586    28    66  1185     0      60  )
 51025    66   586    30    66  1185     0      63  {
 51026    66   587     9    66  1185     0      19  return
 51027    66   587    16    66  1185     0     111  ByteOrder.nativeOrder
 51028    66   587    37    66  1185     0      59  (
 51029    66   587    38    66  1185     0      60  )
 51030    66   587    39    66  1185     0     102  ;
 51031    66   588     5    66  1185     0      64  }
 51032    66   588     5    66  1185     0    2758  ENDMETHOD
 51033    66   592     1    66    -1     0      64  }
 51034    66   592     1    66    -1     1    2759  ENDCLASS
 51035    66   592     1    -1    -1     1    2760  ENDFILE C:\javasrc\java\nio\HeapFloatBufferR.java
 51036    67     1     1    -1    -1     1    2761  STARTFILE C:\javasrc\java\nio\HeapIntBuffer.java
 51037    67    28     1    -1    -1     0       5  package
 51038    67    28     9    -1    -1     0     111  java.nio
 51039    67    28    17    -1    -1     0     102  ;
 51040    67    42     1    67    -1     0    2762  STARTCLASS
 51041    67    42     1    67    -1     0      24  class
 51042    67    42     7    67    -1     0     111  HeapIntBuffer
 51043    67    43     5    67    -1     0      38  extends
 51044    67    43    13    67    -1     0     111  IntBuffer
 51045    67    44     1    67    -1     0      63  {
 51046    67    44     1    67  1186     0    2763  STARTMETHOD
 51047    67    55     5    67  1186     0     111  HeapIntBuffer
 51048    67    55    18    67  1186     0      59  (
 51049    67    55    19    67  1186     0      36  int
 51050    67    55    23    67  1186     0     111  cap
 51051    67    55    26    67  1186     0      66  ,
 51052    67    55    28    67  1186     0      36  int
 51053    67    55    32    67  1186     0     111  lim
 51054    67    55    35    67  1186     0      60  )
 51055    67    55    37    67  1186     0      63  {
 51056    67    57     9    67  1186     0      27  super
 51057    67    57    14    67  1186     0      59  (
 51058    67    57    15    67  1186     0      77  -
 51059    67    57    16    67  1186     0     112  1
 51060    67    57    17    67  1186     0      66  ,
 51061    67    57    19    67  1186     0     112  0
 51062    67    57    20    67  1186     0      66  ,
 51063    67    57    22    67  1186     0     111  lim
 51064    67    57    25    67  1186     0      66  ,
 51065    67    57    27    67  1186     0     111  cap
 51066    67    57    30    67  1186     0      66  ,
 51067    67    57    32    67  1186     0      15  new
 51068    67    57    36    67  1186     0      36  int
 51069    67    57    39    67  1186     0      61  [
 51070    67    57    40    67  1186     0     111  cap
 51071    67    57    43    67  1186     0      62  ]
 51072    67    57    44    67  1186     0      66  ,
 51073    67    57    46    67  1186     0     112  0
 51074    67    57    47    67  1186     0      60  )
 51075    67    57    48    67  1186     0     102  ;
 51076    67    66     5    67  1186     0      64  }
 51077    67    66     5    67  1186     0    2764  ENDMETHOD
 51078    67    66     5    67  1187     0    2765  STARTMETHOD
 51079    67    68     5    67  1187     0     111  HeapIntBuffer
 51080    67    68    18    67  1187     0      59  (
 51081    67    68    19    67  1187     0      36  int
 51082    67    68    22    67  1187     0      61  [
 51083    67    68    23    67  1187     0      62  ]
 51084    67    68    25    67  1187     0     111  buf
 51085    67    68    28    67  1187     0      66  ,
 51086    67    68    30    67  1187     0      36  int
 51087    67    68    34    67  1187     0     111  off
 51088    67    68    37    67  1187     0      66  ,
 51089    67    68    39    67  1187     0      36  int
 51090    67    68    43    67  1187     0     111  len
 51091    67    68    46    67  1187     0      60  )
 51092    67    68    48    67  1187     0      63  {
 51093    67    70     9    67  1187     0      27  super
 51094    67    70    14    67  1187     0      59  (
 51095    67    70    15    67  1187     0      77  -
 51096    67    70    16    67  1187     0     112  1
 51097    67    70    17    67  1187     0      66  ,
 51098    67    70    19    67  1187     0     111  off
 51099    67    70    22    67  1187     0      66  ,
 51100    67    70    24    67  1187     0     111  off
 51101    67    70    28    67  1187     0      74  +
 51102    67    70    30    67  1187     0     111  len
 51103    67    70    33    67  1187     0      66  ,
 51104    67    70    35    67  1187     0     111  buf.length
 51105    67    70    45    67  1187     0      66  ,
 51106    67    70    47    67  1187     0     111  buf
 51107    67    70    50    67  1187     0      66  ,
 51108    67    70    52    67  1187     0     112  0
 51109    67    70    53    67  1187     0      60  )
 51110    67    70    54    67  1187     0     102  ;
 51111    67    79     5    67  1187     0      64  }
 51112    67    79     5    67  1187     0    2766  ENDMETHOD
 51113    67    79     5    67  1188     0    2767  STARTMETHOD
 51114    67    81     5    67  1188     0      23  protected
 51115    67    81    15    67  1188     0     111  HeapIntBuffer
 51116    67    81    28    67  1188     0      59  (
 51117    67    81    29    67  1188     0      36  int
 51118    67    81    32    67  1188     0      61  [
 51119    67    81    33    67  1188     0      62  ]
 51120    67    81    35    67  1188     0     111  buf
 51121    67    81    38    67  1188     0      66  ,
 51122    67    82    36    67  1188     0      36  int
 51123    67    82    40    67  1188     0     111  mark
 51124    67    82    44    67  1188     0      66  ,
 51125    67    82    46    67  1188     0      36  int
 51126    67    82    50    67  1188     0     111  pos
 51127    67    82    53    67  1188     0      66  ,
 51128    67    82    55    67  1188     0      36  int
 51129    67    82    59    67  1188     0     111  lim
 51130    67    82    62    67  1188     0      66  ,
 51131    67    82    64    67  1188     0      36  int
 51132    67    82    68    67  1188     0     111  cap
 51133    67    82    71    67  1188     0      66  ,
 51134    67    83    36    67  1188     0      36  int
 51135    67    83    40    67  1188     0     111  off
 51136    67    83    43    67  1188     0      60  )
 51137    67    84     5    67  1188     0      63  {
 51138    67    86     9    67  1188     0      27  super
 51139    67    86    14    67  1188     0      59  (
 51140    67    86    15    67  1188     0     111  mark
 51141    67    86    19    67  1188     0      66  ,
 51142    67    86    21    67  1188     0     111  pos
 51143    67    86    24    67  1188     0      66  ,
 51144    67    86    26    67  1188     0     111  lim
 51145    67    86    29    67  1188     0      66  ,
 51146    67    86    31    67  1188     0     111  cap
 51147    67    86    34    67  1188     0      66  ,
 51148    67    86    36    67  1188     0     111  buf
 51149    67    86    39    67  1188     0      66  ,
 51150    67    86    41    67  1188     0     111  off
 51151    67    86    44    67  1188     0      60  )
 51152    67    86    45    67  1188     0     102  ;
 51153    67    95     5    67  1188     0      64  }
 51154    67    95     5    67  1188     0    2768  ENDMETHOD
 51155    67    95     5    67  1189     0    2769  STARTMETHOD
 51156    67    97     5    67  1189     0      10  public
 51157    67    97    12    67  1189     0     111  IntBuffer
 51158    67    97    22    67  1189     0     111  slice
 51159    67    97    27    67  1189     0      59  (
 51160    67    97    28    67  1189     0      60  )
 51161    67    97    30    67  1189     0      63  {
 51162    67    98     9    67  1189     0      19  return
 51163    67    98    16    67  1189     0      15  new
 51164    67    98    20    67  1189     0     111  HeapIntBuffer
 51165    67    98    33    67  1189     0      59  (
 51166    67    98    34    67  1189     0     111  hb
 51167    67    98    36    67  1189     0      66  ,
 51168    67    99    41    67  1189     0      77  -
 51169    67    99    42    67  1189     0     112  1
 51170    67    99    43    67  1189     0      66  ,
 51171    67   100    41    67  1189     0     112  0
 51172    67   100    42    67  1189     0      66  ,
 51173    67   101    41    67  1189     1     111  this.remaining
 51174    67   101    55    67  1189     1      59  (
 51175    67   101    56    67  1189     1      60  )
 51176    67   101    57    67  1189     1      66  ,
 51177    67   102    41    67  1189     1     111  this.remaining
 51178    67   102    55    67  1189     1      59  (
 51179    67   102    56    67  1189     1      60  )
 51180    67   102    57    67  1189     1      66  ,
 51181    67   103    41    67  1189     0     111  this.position
 51182    67   103    54    67  1189     0      59  (
 51183    67   103    55    67  1189     0      60  )
 51184    67   103    57    67  1189     0      74  +
 51185    67   103    59    67  1189     1     111  offset
 51186    67   103    65    67  1189     1      60  )
 51187    67   103    66    67  1189     1     102  ;
 51188    67   104     5    67  1189     1      64  }
 51189    67   104     5    67  1189     0    2770  ENDMETHOD
 51190    67   104     5    67  1190     0    2771  STARTMETHOD
 51191    67   106     5    67  1190     0      10  public
 51192    67   106    12    67  1190     0     111  IntBuffer
 51193    67   106    22    67  1190     0     111  duplicate
 51194    67   106    31    67  1190     0      59  (
 51195    67   106    32    67  1190     0      60  )
 51196    67   106    34    67  1190     0      63  {
 51197    67   107     9    67  1190     0      19  return
 51198    67   107    16    67  1190     0      15  new
 51199    67   107    20    67  1190     0     111  HeapIntBuffer
 51200    67   107    33    67  1190     0      59  (
 51201    67   107    34    67  1190     0     111  hb
 51202    67   107    36    67  1190     0      66  ,
 51203    67   108    41    67  1190     1     111  this.markValue
 51204    67   108    55    67  1190     1      59  (
 51205    67   108    56    67  1190     1      60  )
 51206    67   108    57    67  1190     1      66  ,
 51207    67   109    41    67  1190     1     111  this.position
 51208    67   109    54    67  1190     1      59  (
 51209    67   109    55    67  1190     1      60  )
 51210    67   109    56    67  1190     1      66  ,
 51211    67   110    41    67  1190     1     111  this.limit
 51212    67   110    51    67  1190     1      59  (
 51213    67   110    52    67  1190     1      60  )
 51214    67   110    53    67  1190     1      66  ,
 51215    67   111    41    67  1190     1     111  this.capacity
 51216    67   111    54    67  1190     1      59  (
 51217    67   111    55    67  1190     1      60  )
 51218    67   111    56    67  1190     1      66  ,
 51219    67   112    41    67  1190     1     111  offset
 51220    67   112    47    67  1190     1      60  )
 51221    67   112    48    67  1190     1     102  ;
 51222    67   113     5    67  1190     1      64  }
 51223    67   113     5    67  1190     0    2772  ENDMETHOD
 51224    67   113     5    67  1191     0    2773  STARTMETHOD
 51225    67   115     5    67  1191     0      10  public
 51226    67   115    12    67  1191     0     111  IntBuffer
 51227    67   115    22    67  1191     0     111  asReadOnlyBuffer
 51228    67   115    38    67  1191     0      59  (
 51229    67   115    39    67  1191     0      60  )
 51230    67   115    41    67  1191     0      63  {
 51231    67   117     9    67  1191     0      19  return
 51232    67   117    16    67  1191     0      15  new
 51233    67   117    20    67  1191     0     111  HeapIntBufferR
 51234    67   117    34    67  1191     0      59  (
 51235    67   117    35    67  1191     0     111  hb
 51236    67   117    37    67  1191     0      66  ,
 51237    67   118    38    67  1191     1     111  this.markValue
 51238    67   118    52    67  1191     1      59  (
 51239    67   118    53    67  1191     1      60  )
 51240    67   118    54    67  1191     1      66  ,
 51241    67   119    38    67  1191     1     111  this.position
 51242    67   119    51    67  1191     1      59  (
 51243    67   119    52    67  1191     1      60  )
 51244    67   119    53    67  1191     1      66  ,
 51245    67   120    38    67  1191     1     111  this.limit
 51246    67   120    48    67  1191     1      59  (
 51247    67   120    49    67  1191     1      60  )
 51248    67   120    50    67  1191     1      66  ,
 51249    67   121    38    67  1191     1     111  this.capacity
 51250    67   121    51    67  1191     1      59  (
 51251    67   121    52    67  1191     1      60  )
 51252    67   121    53    67  1191     1      66  ,
 51253    67   122    38    67  1191     1     111  offset
 51254    67   122    44    67  1191     1      60  )
 51255    67   122    45    67  1191     1     102  ;
 51256    67   126     5    67  1191     1      64  }
 51257    67   126     5    67  1191     0    2774  ENDMETHOD
 51258    67   126     5    67  1192     0    2775  STARTMETHOD
 51259    67   130     5    67  1192     0      23  protected
 51260    67   130    15    67  1192     0      36  int
 51261    67   130    19    67  1192     0     111  ix
 51262    67   130    21    67  1192     0      59  (
 51263    67   130    22    67  1192     0      36  int
 51264    67   130    26    67  1192     0     111  i
 51265    67   130    27    67  1192     0      60  )
 51266    67   130    29    67  1192     0      63  {
 51267    67   131     9    67  1192     0      19  return
 51268    67   131    16    67  1192     0     111  i
 51269    67   131    18    67  1192     0      74  +
 51270    67   131    20    67  1192     0     111  offset
 51271    67   131    26    67  1192     0     102  ;
 51272    67   132     5    67  1192     0      64  }
 51273    67   132     5    67  1192     0    2776  ENDMETHOD
 51274    67   132     5    67  1193     0    2777  STARTMETHOD
 51275    67   134     5    67  1193     0      10  public
 51276    67   134    12    67  1193     0      36  int
 51277    67   134    16    67  1193     0     111  get
 51278    67   134    19    67  1193     0      59  (
 51279    67   134    20    67  1193     0      60  )
 51280    67   134    22    67  1193     0      63  {
 51281    67   135     9    67  1193     0      19  return
 51282    67   135    16    67  1193     0     111  hb
 51283    67   135    18    67  1193     0      61  [
 51284    67   135    19    67  1193     0     111  ix
 51285    67   135    21    67  1193     0      59  (
 51286    67   135    22    67  1193     0     111  nextGetIndex
 51287    67   135    34    67  1193     0      59  (
 51288    67   135    35    67  1193     0      60  )
 51289    67   135    36    67  1193     0      60  )
 51290    67   135    37    67  1193     0      62  ]
 51291    67   135    38    67  1193     0     102  ;
 51292    67   136     5    67  1193     0      64  }
 51293    67   136     5    67  1193     0    2778  ENDMETHOD
 51294    67   136     5    67  1194     0    2779  STARTMETHOD
 51295    67   138     5    67  1194     0      10  public
 51296    67   138    12    67  1194     0      36  int
 51297    67   138    16    67  1194     0     111  get
 51298    67   138    19    67  1194     0      59  (
 51299    67   138    20    67  1194     0      36  int
 51300    67   138    24    67  1194     0     111  i
 51301    67   138    25    67  1194     0      60  )
 51302    67   138    27    67  1194     0      63  {
 51303    67   139     9    67  1194     0      19  return
 51304    67   139    16    67  1194     0     111  hb
 51305    67   139    18    67  1194     0      61  [
 51306    67   139    19    67  1194     0     111  ix
 51307    67   139    21    67  1194     0      59  (
 51308    67   139    22    67  1194     0     111  checkIndex
 51309    67   139    32    67  1194     0      59  (
 51310    67   139    33    67  1194     0     111  i
 51311    67   139    34    67  1194     0      60  )
 51312    67   139    35    67  1194     0      60  )
 51313    67   139    36    67  1194     0      62  ]
 51314    67   139    37    67  1194     0     102  ;
 51315    67   140     5    67  1194     0      64  }
 51316    67   140     5    67  1194     0    2780  ENDMETHOD
 51317    67   140     5    67  1195     0    2781  STARTMETHOD
 51318    67   142     5    67  1195     0      10  public
 51319    67   142    12    67  1195     0     111  IntBuffer
 51320    67   142    22    67  1195     0     111  get
 51321    67   142    25    67  1195     0      59  (
 51322    67   142    26    67  1195     0      36  int
 51323    67   142    29    67  1195     0      61  [
 51324    67   142    30    67  1195     0      62  ]
 51325    67   142    32    67  1195     0     111  dst
 51326    67   142    35    67  1195     0      66  ,
 51327    67   142    37    67  1195     0      36  int
 51328    67   142    41    67  1195     0     111  offset
 51329    67   142    47    67  1195     0      66  ,
 51330    67   142    49    67  1195     0      36  int
 51331    67   142    53    67  1195     0     111  length
 51332    67   142    59    67  1195     0      60  )
 51333    67   142    61    67  1195     0      63  {
 51334    67   143     9    67  1195     0     111  checkBounds
 51335    67   143    20    67  1195     0      59  (
 51336    67   143    21    67  1195     0     111  offset
 51337    67   143    27    67  1195     0      66  ,
 51338    67   143    29    67  1195     0     111  length
 51339    67   143    35    67  1195     0      66  ,
 51340    67   143    37    67  1195     0     111  dst.length
 51341    67   143    47    67  1195     0      60  )
 51342    67   143    48    67  1195     0     102  ;
 51343    67   144     9    67  1195     0      31  if
 51344    67   144    12    67  1195     0      59  (
 51345    67   144    13    67  1195     0     111  length
 51346    67   144    20    67  1195     0      89  >
 51347    67   144    22    67  1195     0     111  remaining
 51348    67   144    31    67  1195     0      59  (
 51349    67   144    32    67  1195     0      60  )
 51350    67   144    33    67  1195     0      60  )
 51351    67   145    13    67  1195     0      20  throw
 51352    67   145    19    67  1195     0      15  new
 51353    67   145    23    67  1195     0     111  BufferUnderflowException
 51354    67   145    47    67  1195     0      59  (
 51355    67   145    48    67  1195     0      60  )
 51356    67   145    49    67  1195     0     102  ;
 51357    67   146     9    67  1195     0     111  System.arraycopy
 51358    67   146    25    67  1195     0      59  (
 51359    67   146    26    67  1195     0     111  hb
 51360    67   146    28    67  1195     0      66  ,
 51361    67   146    30    67  1195     0     111  ix
 51362    67   146    32    67  1195     0      59  (
 51363    67   146    33    67  1195     0     111  position
 51364    67   146    41    67  1195     0      59  (
 51365    67   146    42    67  1195     0      60  )
 51366    67   146    43    67  1195     0      60  )
 51367    67   146    44    67  1195     0      66  ,
 51368    67   146    46    67  1195     0     111  dst
 51369    67   146    49    67  1195     0      66  ,
 51370    67   146    51    67  1195     0     111  offset
 51371    67   146    57    67  1195     0      66  ,
 51372    67   146    59    67  1195     0     111  length
 51373    67   146    65    67  1195     0      60  )
 51374    67   146    66    67  1195     0     102  ;
 51375    67   147     9    67  1195     0     111  position
 51376    67   147    17    67  1195     0      59  (
 51377    67   147    18    67  1195     0     111  position
 51378    67   147    26    67  1195     0      59  (
 51379    67   147    27    67  1195     0      60  )
 51380    67   147    29    67  1195     0      74  +
 51381    67   147    31    67  1195     0     111  length
 51382    67   147    37    67  1195     0      60  )
 51383    67   147    38    67  1195     0     102  ;
 51384    67   148     9    67  1195     0      19  return
 51385    67   148    16    67  1195     0      44  this
 51386    67   148    20    67  1195     1     102  ;
 51387    67   149     5    67  1195     1      64  }
 51388    67   149     5    67  1195     0    2782  ENDMETHOD
 51389    67   149     5    67  1196     0    2783  STARTMETHOD
 51390    67   151     5    67  1196     0      10  public
 51391    67   151    12    67  1196     0      39  boolean
 51392    67   151    20    67  1196     0     111  isDirect
 51393    67   151    28    67  1196     0      59  (
 51394    67   151    29    67  1196     0      60  )
 51395    67   151    31    67  1196     0      63  {
 51396    67   152     9    67  1196     0      19  return
 51397    67   152    16    67  1196     0      43  false
 51398    67   152    21    67  1196     1     102  ;
 51399    67   153     5    67  1196     1      64  }
 51400    67   153     5    67  1196     0    2784  ENDMETHOD
 51401    67   153     5    67  1197     0    2785  STARTMETHOD
 51402    67   157     5    67  1197     0      10  public
 51403    67   157    12    67  1197     0      39  boolean
 51404    67   157    20    67  1197     0     111  isReadOnly
 51405    67   157    30    67  1197     0      59  (
 51406    67   157    31    67  1197     0      60  )
 51407    67   157    33    67  1197     0      63  {
 51408    67   158     9    67  1197     0      19  return
 51409    67   158    16    67  1197     0      43  false
 51410    67   158    21    67  1197     1     102  ;
 51411    67   159     5    67  1197     1      64  }
 51412    67   159     5    67  1197     0    2786  ENDMETHOD
 51413    67   159     5    67  1198     0    2787  STARTMETHOD
 51414    67   161     5    67  1198     0      10  public
 51415    67   161    12    67  1198     0     111  IntBuffer
 51416    67   161    22    67  1198     0     111  put
 51417    67   161    25    67  1198     0      59  (
 51418    67   161    26    67  1198     0      36  int
 51419    67   161    30    67  1198     0     111  x
 51420    67   161    31    67  1198     0      60  )
 51421    67   161    33    67  1198     0      63  {
 51422    67   163     9    67  1198     0     111  hb
 51423    67   163    11    67  1198     0      61  [
 51424    67   163    12    67  1198     0     111  ix
 51425    67   163    14    67  1198     0      59  (
 51426    67   163    15    67  1198     0     111  nextPutIndex
 51427    67   163    27    67  1198     0      59  (
 51428    67   163    28    67  1198     0      60  )
 51429    67   163    29    67  1198     0      60  )
 51430    67   163    30    67  1198     0      62  ]
 51431    67   163    32    67  1198     0      67  =
 51432    67   163    34    67  1198     0     111  x
 51433    67   163    35    67  1198     0     102  ;
 51434    67   164     9    67  1198     0      19  return
 51435    67   164    16    67  1198     0      44  this
 51436    67   164    20    67  1198     0     102  ;
 51437    67   168     5    67  1198     0      64  }
 51438    67   168     5    67  1198     0    2788  ENDMETHOD
 51439    67   168     5    67  1199     0    2789  STARTMETHOD
 51440    67   170     5    67  1199     0      10  public
 51441    67   170    12    67  1199     0     111  IntBuffer
 51442    67   170    22    67  1199     0     111  put
 51443    67   170    25    67  1199     0      59  (
 51444    67   170    26    67  1199     0      36  int
 51445    67   170    30    67  1199     0     111  i
 51446    67   170    31    67  1199     0      66  ,
 51447    67   170    33    67  1199     0      36  int
 51448    67   170    37    67  1199     0     111  x
 51449    67   170    38    67  1199     0      60  )
 51450    67   170    40    67  1199     0      63  {
 51451    67   172     9    67  1199     0     111  hb
 51452    67   172    11    67  1199     0      61  [
 51453    67   172    12    67  1199     0     111  ix
 51454    67   172    14    67  1199     0      59  (
 51455    67   172    15    67  1199     0     111  checkIndex
 51456    67   172    25    67  1199     0      59  (
 51457    67   172    26    67  1199     0     111  i
 51458    67   172    27    67  1199     0      60  )
 51459    67   172    28    67  1199     0      60  )
 51460    67   172    29    67  1199     0      62  ]
 51461    67   172    31    67  1199     0      67  =
 51462    67   172    33    67  1199     0     111  x
 51463    67   172    34    67  1199     0     102  ;
 51464    67   173     9    67  1199     0      19  return
 51465    67   173    16    67  1199     0      44  this
 51466    67   173    20    67  1199     0     102  ;
 51467    67   177     5    67  1199     0      64  }
 51468    67   177     5    67  1199     0    2790  ENDMETHOD
 51469    67   177     5    67  1200     0    2791  STARTMETHOD
 51470    67   179     5    67  1200     0      10  public
 51471    67   179    12    67  1200     0     111  IntBuffer
 51472    67   179    22    67  1200     0     111  put
 51473    67   179    25    67  1200     0      59  (
 51474    67   179    26    67  1200     0      36  int
 51475    67   179    29    67  1200     0      61  [
 51476    67   179    30    67  1200     0      62  ]
 51477    67   179    32    67  1200     0     111  src
 51478    67   179    35    67  1200     0      66  ,
 51479    67   179    37    67  1200     0      36  int
 51480    67   179    41    67  1200     0     111  offset
 51481    67   179    47    67  1200     0      66  ,
 51482    67   179    49    67  1200     0      36  int
 51483    67   179    53    67  1200     0     111  length
 51484    67   179    59    67  1200     0      60  )
 51485    67   179    61    67  1200     0      63  {
 51486    67   181     9    67  1200     0     111  checkBounds
 51487    67   181    20    67  1200     0      59  (
 51488    67   181    21    67  1200     0     111  offset
 51489    67   181    27    67  1200     0      66  ,
 51490    67   181    29    67  1200     0     111  length
 51491    67   181    35    67  1200     0      66  ,
 51492    67   181    37    67  1200     0     111  src.length
 51493    67   181    47    67  1200     0      60  )
 51494    67   181    48    67  1200     0     102  ;
 51495    67   182     9    67  1200     0      31  if
 51496    67   182    12    67  1200     0      59  (
 51497    67   182    13    67  1200     0     111  length
 51498    67   182    20    67  1200     0      89  >
 51499    67   182    22    67  1200     0     111  remaining
 51500    67   182    31    67  1200     0      59  (
 51501    67   182    32    67  1200     0      60  )
 51502    67   182    33    67  1200     0      60  )
 51503    67   183    13    67  1200     0      20  throw
 51504    67   183    19    67  1200     0      15  new
 51505    67   183    23    67  1200     0     111  BufferOverflowException
 51506    67   183    46    67  1200     0      59  (
 51507    67   183    47    67  1200     0      60  )
 51508    67   183    48    67  1200     0     102  ;
 51509    67   184     9    67  1200     0     111  System.arraycopy
 51510    67   184    25    67  1200     0      59  (
 51511    67   184    26    67  1200     0     111  src
 51512    67   184    29    67  1200     0      66  ,
 51513    67   184    31    67  1200     0     111  offset
 51514    67   184    37    67  1200     0      66  ,
 51515    67   184    39    67  1200     0     111  hb
 51516    67   184    41    67  1200     0      66  ,
 51517    67   184    43    67  1200     0     111  ix
 51518    67   184    45    67  1200     0      59  (
 51519    67   184    46    67  1200     0     111  position
 51520    67   184    54    67  1200     0      59  (
 51521    67   184    55    67  1200     0      60  )
 51522    67   184    56    67  1200     0      60  )
 51523    67   184    57    67  1200     0      66  ,
 51524    67   184    59    67  1200     0     111  length
 51525    67   184    65    67  1200     0      60  )
 51526    67   184    66    67  1200     0     102  ;
 51527    67   185     9    67  1200     0     111  position
 51528    67   185    17    67  1200     0      59  (
 51529    67   185    18    67  1200     0     111  position
 51530    67   185    26    67  1200     0      59  (
 51531    67   185    27    67  1200     0      60  )
 51532    67   185    29    67  1200     0      74  +
 51533    67   185    31    67  1200     0     111  length
 51534    67   185    37    67  1200     0      60  )
 51535    67   185    38    67  1200     0     102  ;
 51536    67   186     9    67  1200     0      19  return
 51537    67   186    16    67  1200     0      44  this
 51538    67   186    20    67  1200     0     102  ;
 51539    67   190     5    67  1200     0      64  }
 51540    67   190     5    67  1200     0    2792  ENDMETHOD
 51541    67   190     5    67  1201     0    2793  STARTMETHOD
 51542    67   192     5    67  1201     0      10  public
 51543    67   192    12    67  1201     0     111  IntBuffer
 51544    67   192    22    67  1201     0     111  put
 51545    67   192    25    67  1201     0      59  (
 51546    67   192    26    67  1201     0     111  IntBuffer
 51547    67   192    36    67  1201     0     111  src
 51548    67   192    39    67  1201     0      60  )
 51549    67   192    41    67  1201     0      63  {
 51550    67   194     9    67  1201     0      31  if
 51551    67   194    12    67  1201     0      59  (
 51552    67   194    13    67  1201     0     111  src
 51553    67   194    17    67  1201     0      16  instanceof
 51554    67   194    28    67  1201     0     111  HeapIntBuffer
 51555    67   194    41    67  1201     0      60  )
 51556    67   194    43    67  1201     0      63  {
 51557    67   195    13    67  1201     0      31  if
 51558    67   195    16    67  1201     0      59  (
 51559    67   195    17    67  1201     0     111  src
 51560    67   195    21    67  1201     0      68  ==
 51561    67   195    24    67  1201     0      44  this
 51562    67   195    28    67  1201     0      60  )
 51563    67   196    17    67  1201     0      20  throw
 51564    67   196    23    67  1201     0      15  new
 51565    67   196    27    67  1201     0     111  IllegalArgumentException
 51566    67   196    51    67  1201     0      59  (
 51567    67   196    52    67  1201     0      60  )
 51568    67   196    53    67  1201     0     102  ;
 51569    67   197    13    67  1201     0     111  HeapIntBuffer
 51570    67   197    27    67  1201     0     111  sb
 51571    67   197    30    67  1201     0      67  =
 51572    67   197    32    67  1201     0      59  (
 51573    67   197    33    67  1201     0     111  HeapIntBuffer
 51574    67   197    46    67  1201     0      60  )
 51575    67   197    47    67  1201     0     111  src
 51576    67   197    50    67  1201     0     102  ;
 51577    67   198    13    67  1201     0      36  int
 51578    67   198    17    67  1201     0     111  n
 51579    67   198    19    67  1201     0      67  =
 51580    67   198    21    67  1201     0     111  sb.remaining
 51581    67   198    33    67  1201     0      59  (
 51582    67   198    34    67  1201     0      60  )
 51583    67   198    35    67  1201     0     102  ;
 51584    67   199    13    67  1201     0      31  if
 51585    67   199    16    67  1201     0      59  (
 51586    67   199    17    67  1201     0     111  n
 51587    67   199    19    67  1201     0      89  >
 51588    67   199    21    67  1201     0     111  remaining
 51589    67   199    30    67  1201     0      59  (
 51590    67   199    31    67  1201     0      60  )
 51591    67   199    32    67  1201     0      60  )
 51592    67   200    17    67  1201     0      20  throw
 51593    67   200    23    67  1201     0      15  new
 51594    67   200    27    67  1201     0     111  BufferOverflowException
 51595    67   200    50    67  1201     0      59  (
 51596    67   200    51    67  1201     0      60  )
 51597    67   200    52    67  1201     0     102  ;
 51598    67   201    13    67  1201     0     111  System.arraycopy
 51599    67   201    29    67  1201     0      59  (
 51600    67   201    30    67  1201     0     111  sb.hb
 51601    67   201    35    67  1201     0      66  ,
 51602    67   201    37    67  1201     0     111  sb.ix
 51603    67   201    42    67  1201     0      59  (
 51604    67   201    43    67  1201     0     111  sb.position
 51605    67   201    54    67  1201     0      59  (
 51606    67   201    55    67  1201     0      60  )
 51607    67   201    56    67  1201     0      60  )
 51608    67   201    57    67  1201     0      66  ,
 51609    67   202    30    67  1201     0     111  hb
 51610    67   202    32    67  1201     0      66  ,
 51611    67   202    34    67  1201     0     111  ix
 51612    67   202    36    67  1201     0      59  (
 51613    67   202    37    67  1201     0     111  position
 51614    67   202    45    67  1201     0      59  (
 51615    67   202    46    67  1201     0      60  )
 51616    67   202    47    67  1201     0      60  )
 51617    67   202    48    67  1201     0      66  ,
 51618    67   202    50    67  1201     0     111  n
 51619    67   202    51    67  1201     0      60  )
 51620    67   202    52    67  1201     0     102  ;
 51621    67   203    13    67  1201     1     111  sb.position
 51622    67   203    24    67  1201     1      59  (
 51623    67   203    25    67  1201     1     111  sb.position
 51624    67   203    36    67  1201     1      59  (
 51625    67   203    37    67  1201     1      60  )
 51626    67   203    39    67  1201     1      74  +
 51627    67   203    41    67  1201     1     111  n
 51628    67   203    42    67  1201     1      60  )
 51629    67   203    43    67  1201     1     102  ;
 51630    67   204    13    67  1201     1     111  position
 51631    67   204    21    67  1201     1      59  (
 51632    67   204    22    67  1201     1     111  position
 51633    67   204    30    67  1201     1      59  (
 51634    67   204    31    67  1201     1      60  )
 51635    67   204    33    67  1201     1      74  +
 51636    67   204    35    67  1201     1     111  n
 51637    67   204    36    67  1201     1      60  )
 51638    67   204    37    67  1201     1     102  ;
 51639    67   205     9    67  1201     0      64  }
 51640    67   205    11    67  1201     0      48  else
 51641    67   205    16    67  1201     0      31  if
 51642    67   205    19    67  1201     0      59  (
 51643    67   205    20    67  1201     0     111  src.isDirect
 51644    67   205    32    67  1201     0      59  (
 51645    67   205    33    67  1201     0      60  )
 51646    67   205    34    67  1201     0      60  )
 51647    67   205    36    67  1201     0      63  {
 51648    67   206    13    67  1201     0      36  int
 51649    67   206    17    67  1201     0     111  n
 51650    67   206    19    67  1201     0      67  =
 51651    67   206    21    67  1201     0     111  src.remaining
 51652    67   206    34    67  1201     0      59  (
 51653    67   206    35    67  1201     0      60  )
 51654    67   206    36    67  1201     0     102  ;
 51655    67   207    13    67  1201     0      31  if
 51656    67   207    16    67  1201     0      59  (
 51657    67   207    17    67  1201     0     111  n
 51658    67   207    19    67  1201     0      89  >
 51659    67   207    21    67  1201     0     111  remaining
 51660    67   207    30    67  1201     0      59  (
 51661    67   207    31    67  1201     0      60  )
 51662    67   207    32    67  1201     0      60  )
 51663    67   208    17    67  1201     0      20  throw
 51664    67   208    23    67  1201     0      15  new
 51665    67   208    27    67  1201     0     111  BufferOverflowException
 51666    67   208    50    67  1201     0      59  (
 51667    67   208    51    67  1201     0      60  )
 51668    67   208    52    67  1201     0     102  ;
 51669    67   209    13    67  1201     0     111  src.get
 51670    67   209    20    67  1201     0      59  (
 51671    67   209    21    67  1201     0     111  hb
 51672    67   209    23    67  1201     0      66  ,
 51673    67   209    25    67  1201     0     111  ix
 51674    67   209    27    67  1201     0      59  (
 51675    67   209    28    67  1201     0     111  position
 51676    67   209    36    67  1201     0      59  (
 51677    67   209    37    67  1201     0      60  )
 51678    67   209    38    67  1201     0      60  )
 51679    67   209    39    67  1201     0      66  ,
 51680    67   209    41    67  1201     0     111  n
 51681    67   209    42    67  1201     0      60  )
 51682    67   209    43    67  1201     0     102  ;
 51683    67   210    13    67  1201     0     111  position
 51684    67   210    21    67  1201     0      59  (
 51685    67   210    22    67  1201     0     111  position
 51686    67   210    30    67  1201     0      59  (
 51687    67   210    31    67  1201     0      60  )
 51688    67   210    33    67  1201     0      74  +
 51689    67   210    35    67  1201     0     111  n
 51690    67   210    36    67  1201     0      60  )
 51691    67   210    37    67  1201     0     102  ;
 51692    67   211     9    67  1201     0      64  }
 51693    67   211    11    67  1201     0      48  else
 51694    67   211    16    67  1201     0      63  {
 51695    67   212    13    67  1201     0     111  super.put
 51696    67   212    22    67  1201     0      59  (
 51697    67   212    23    67  1201     0     111  src
 51698    67   212    26    67  1201     0      60  )
 51699    67   212    27    67  1201     0     102  ;
 51700    67   213     9    67  1201     0      64  }
 51701    67   214     9    67  1201     0      19  return
 51702    67   214    16    67  1201     0      44  this
 51703    67   214    20    67  1201     0     102  ;
 51704    67   218     5    67  1201     0      64  }
 51705    67   218     5    67  1201     0    2794  ENDMETHOD
 51706    67   218     5    67  1202     0    2795  STARTMETHOD
 51707    67   220     5    67  1202     0      10  public
 51708    67   220    12    67  1202     0     111  IntBuffer
 51709    67   220    22    67  1202     0     111  compact
 51710    67   220    29    67  1202     0      59  (
 51711    67   220    30    67  1202     0      60  )
 51712    67   220    32    67  1202     0      63  {
 51713    67   222     9    67  1202     0     111  System.arraycopy
 51714    67   222    25    67  1202     0      59  (
 51715    67   222    26    67  1202     0     111  hb
 51716    67   222    28    67  1202     0      66  ,
 51717    67   222    30    67  1202     0     111  ix
 51718    67   222    32    67  1202     0      59  (
 51719    67   222    33    67  1202     0     111  position
 51720    67   222    41    67  1202     0      59  (
 51721    67   222    42    67  1202     0      60  )
 51722    67   222    43    67  1202     0      60  )
 51723    67   222    44    67  1202     0      66  ,
 51724    67   222    46    67  1202     0     111  hb
 51725    67   222    48    67  1202     0      66  ,
 51726    67   222    50    67  1202     0     111  ix
 51727    67   222    52    67  1202     0      59  (
 51728    67   222    53    67  1202     0     112  0
 51729    67   222    54    67  1202     0      60  )
 51730    67   222    55    67  1202     0      66  ,
 51731    67   222    57    67  1202     0     111  remaining
 51732    67   222    66    67  1202     0      59  (
 51733    67   222    67    67  1202     0      60  )
 51734    67   222    68    67  1202     0      60  )
 51735    67   222    69    67  1202     0     102  ;
 51736    67   223     9    67  1202     1     111  position
 51737    67   223    17    67  1202     1      59  (
 51738    67   223    18    67  1202     1     111  remaining
 51739    67   223    27    67  1202     1      59  (
 51740    67   223    28    67  1202     1      60  )
 51741    67   223    29    67  1202     1      60  )
 51742    67   223    30    67  1202     1     102  ;
 51743    67   224     9    67  1202     1     111  limit
 51744    67   224    14    67  1202     1      59  (
 51745    67   224    15    67  1202     1     111  capacity
 51746    67   224    23    67  1202     1      59  (
 51747    67   224    24    67  1202     1      60  )
 51748    67   224    25    67  1202     1      60  )
 51749    67   224    26    67  1202     1     102  ;
 51750    67   225     9    67  1202     0     111  clearMark
 51751    67   225    18    67  1202     0      59  (
 51752    67   225    19    67  1202     0      60  )
 51753    67   225    20    67  1202     0     102  ;
 51754    67   226     9    67  1202     0      19  return
 51755    67   226    16    67  1202     0      44  this
 51756    67   226    20    67  1202     0     102  ;
 51757    67   230     5    67  1202     0      64  }
 51758    67   230     5    67  1202     0    2796  ENDMETHOD
 51759    67   230     5    67  1203     0    2797  STARTMETHOD
 51760    67   586     5    67  1203     0      10  public
 51761    67   586    12    67  1203     0     111  ByteOrder
 51762    67   586    22    67  1203     0     111  order
 51763    67   586    27    67  1203     0      59  (
 51764    67   586    28    67  1203     0      60  )
 51765    67   586    30    67  1203     0      63  {
 51766    67   587     9    67  1203     0      19  return
 51767    67   587    16    67  1203     0     111  ByteOrder.nativeOrder
 51768    67   587    37    67  1203     0      59  (
 51769    67   587    38    67  1203     0      60  )
 51770    67   587    39    67  1203     0     102  ;
 51771    67   588     5    67  1203     0      64  }
 51772    67   588     5    67  1203     0    2798  ENDMETHOD
 51773    67   592     1    67    -1     0      64  }
 51774    67   592     1    67    -1     1    2799  ENDCLASS
 51775    67   592     1    -1    -1     1    2800  ENDFILE C:\javasrc\java\nio\HeapIntBuffer.java
 51776    68     1     1    -1    -1     1    2801  STARTFILE C:\javasrc\java\nio\HeapIntBufferR.java
 51777    68    28     1    -1    -1     0       5  package
 51778    68    28     9    -1    -1     0     111  java.nio
 51779    68    28    17    -1    -1     0     102  ;
 51780    68    42     1    68    -1     0    2802  STARTCLASS
 51781    68    42     1    68    -1     0      24  class
 51782    68    42     7    68    -1     0     111  HeapIntBufferR
 51783    68    43     5    68    -1     0      38  extends
 51784    68    43    13    68    -1     0     111  HeapIntBuffer
 51785    68    44     1    68    -1     0      63  {
 51786    68    44     1    68  1204     0    2803  STARTMETHOD
 51787    68    55     5    68  1204     0     111  HeapIntBufferR
 51788    68    55    19    68  1204     0      59  (
 51789    68    55    20    68  1204     0      36  int
 51790    68    55    24    68  1204     0     111  cap
 51791    68    55    27    68  1204     0      66  ,
 51792    68    55    29    68  1204     0      36  int
 51793    68    55    33    68  1204     0     111  lim
 51794    68    55    36    68  1204     0      60  )
 51795    68    55    38    68  1204     0      63  {
 51796    68    63     9    68  1204     0      27  super
 51797    68    63    14    68  1204     0      59  (
 51798    68    63    15    68  1204     0     111  cap
 51799    68    63    18    68  1204     0      66  ,
 51800    68    63    20    68  1204     0     111  lim
 51801    68    63    23    68  1204     0      60  )
 51802    68    63    24    68  1204     0     102  ;
 51803    68    64     9    68  1204     0     111  this.isReadOnly
 51804    68    64    25    68  1204     0      67  =
 51805    68    64    27    68  1204     0      52  true
 51806    68    64    31    68  1204     0     102  ;
 51807    68    66     5    68  1204     0      64  }
 51808    68    66     5    68  1204     0    2804  ENDMETHOD
 51809    68    66     5    68  1205     0    2805  STARTMETHOD
 51810    68    68     5    68  1205     0     111  HeapIntBufferR
 51811    68    68    19    68  1205     0      59  (
 51812    68    68    20    68  1205     0      36  int
 51813    68    68    23    68  1205     0      61  [
 51814    68    68    24    68  1205     0      62  ]
 51815    68    68    26    68  1205     0     111  buf
 51816    68    68    29    68  1205     0      66  ,
 51817    68    68    31    68  1205     0      36  int
 51818    68    68    35    68  1205     0     111  off
 51819    68    68    38    68  1205     0      66  ,
 51820    68    68    40    68  1205     0      36  int
 51821    68    68    44    68  1205     0     111  len
 51822    68    68    47    68  1205     0      60  )
 51823    68    68    49    68  1205     0      63  {
 51824    68    76     9    68  1205     0      27  super
 51825    68    76    14    68  1205     0      59  (
 51826    68    76    15    68  1205     0     111  buf
 51827    68    76    18    68  1205     0      66  ,
 51828    68    76    20    68  1205     0     111  off
 51829    68    76    23    68  1205     0      66  ,
 51830    68    76    25    68  1205     0     111  len
 51831    68    76    28    68  1205     0      60  )
 51832    68    76    29    68  1205     0     102  ;
 51833    68    77     9    68  1205     0     111  this.isReadOnly
 51834    68    77    25    68  1205     0      67  =
 51835    68    77    27    68  1205     0      52  true
 51836    68    77    31    68  1205     0     102  ;
 51837    68    79     5    68  1205     0      64  }
 51838    68    79     5    68  1205     0    2806  ENDMETHOD
 51839    68    79     5    68  1206     0    2807  STARTMETHOD
 51840    68    81     5    68  1206     0      23  protected
 51841    68    81    15    68  1206     0     111  HeapIntBufferR
 51842    68    81    29    68  1206     0      59  (
 51843    68    81    30    68  1206     0      36  int
 51844    68    81    33    68  1206     0      61  [
 51845    68    81    34    68  1206     0      62  ]
 51846    68    81    36    68  1206     0     111  buf
 51847    68    81    39    68  1206     0      66  ,
 51848    68    82    36    68  1206     0      36  int
 51849    68    82    40    68  1206     0     111  mark
 51850    68    82    44    68  1206     0      66  ,
 51851    68    82    46    68  1206     0      36  int
 51852    68    82    50    68  1206     0     111  pos
 51853    68    82    53    68  1206     0      66  ,
 51854    68    82    55    68  1206     0      36  int
 51855    68    82    59    68  1206     0     111  lim
 51856    68    82    62    68  1206     0      66  ,
 51857    68    82    64    68  1206     0      36  int
 51858    68    82    68    68  1206     0     111  cap
 51859    68    82    71    68  1206     0      66  ,
 51860    68    83    36    68  1206     0      36  int
 51861    68    83    40    68  1206     0     111  off
 51862    68    83    43    68  1206     0      60  )
 51863    68    84     5    68  1206     0      63  {
 51864    68    92     9    68  1206     0      27  super
 51865    68    92    14    68  1206     0      59  (
 51866    68    92    15    68  1206     0     111  buf
 51867    68    92    18    68  1206     0      66  ,
 51868    68    92    20    68  1206     0     111  mark
 51869    68    92    24    68  1206     0      66  ,
 51870    68    92    26    68  1206     0     111  pos
 51871    68    92    29    68  1206     0      66  ,
 51872    68    92    31    68  1206     0     111  lim
 51873    68    92    34    68  1206     0      66  ,
 51874    68    92    36    68  1206     0     111  cap
 51875    68    92    39    68  1206     0      66  ,
 51876    68    92    41    68  1206     0     111  off
 51877    68    92    44    68  1206     0      60  )
 51878    68    92    45    68  1206     0     102  ;
 51879    68    93     9    68  1206     0     111  this.isReadOnly
 51880    68    93    25    68  1206     0      67  =
 51881    68    93    27    68  1206     0      52  true
 51882    68    93    31    68  1206     0     102  ;
 51883    68    95     5    68  1206     0      64  }
 51884    68    95     5    68  1206     0    2808  ENDMETHOD
 51885    68    95     5    68  1207     0    2809  STARTMETHOD
 51886    68    97     5    68  1207     0      10  public
 51887    68    97    12    68  1207     0     111  IntBuffer
 51888    68    97    22    68  1207     0     111  slice
 51889    68    97    27    68  1207     0      59  (
 51890    68    97    28    68  1207     0      60  )
 51891    68    97    30    68  1207     0      63  {
 51892    68    98     9    68  1207     0      19  return
 51893    68    98    16    68  1207     0      15  new
 51894    68    98    20    68  1207     0     111  HeapIntBufferR
 51895    68    98    34    68  1207     0      59  (
 51896    68    98    35    68  1207     0     111  hb
 51897    68    98    37    68  1207     0      66  ,
 51898    68    99    41    68  1207     0      77  -
 51899    68    99    42    68  1207     0     112  1
 51900    68    99    43    68  1207     0      66  ,
 51901    68   100    41    68  1207     0     112  0
 51902    68   100    42    68  1207     0      66  ,
 51903    68   101    41    68  1207     1     111  this.remaining
 51904    68   101    55    68  1207     1      59  (
 51905    68   101    56    68  1207     1      60  )
 51906    68   101    57    68  1207     1      66  ,
 51907    68   102    41    68  1207     1     111  this.remaining
 51908    68   102    55    68  1207     1      59  (
 51909    68   102    56    68  1207     1      60  )
 51910    68   102    57    68  1207     1      66  ,
 51911    68   103    41    68  1207     0     111  this.position
 51912    68   103    54    68  1207     0      59  (
 51913    68   103    55    68  1207     0      60  )
 51914    68   103    57    68  1207     0      74  +
 51915    68   103    59    68  1207     0     111  offset
 51916    68   103    65    68  1207     0      60  )
 51917    68   103    66    68  1207     0     102  ;
 51918    68   104     5    68  1207     0      64  }
 51919    68   104     5    68  1207     0    2810  ENDMETHOD
 51920    68   104     5    68  1208     0    2811  STARTMETHOD
 51921    68   106     5    68  1208     0      10  public
 51922    68   106    12    68  1208     0     111  IntBuffer
 51923    68   106    22    68  1208     0     111  duplicate
 51924    68   106    31    68  1208     0      59  (
 51925    68   106    32    68  1208     0      60  )
 51926    68   106    34    68  1208     0      63  {
 51927    68   107     9    68  1208     0      19  return
 51928    68   107    16    68  1208     0      15  new
 51929    68   107    20    68  1208     0     111  HeapIntBufferR
 51930    68   107    34    68  1208     0      59  (
 51931    68   107    35    68  1208     0     111  hb
 51932    68   107    37    68  1208     0      66  ,
 51933    68   108    41    68  1208     1     111  this.markValue
 51934    68   108    55    68  1208     1      59  (
 51935    68   108    56    68  1208     1      60  )
 51936    68   108    57    68  1208     1      66  ,
 51937    68   109    41    68  1208     1     111  this.position
 51938    68   109    54    68  1208     1      59  (
 51939    68   109    55    68  1208     1      60  )
 51940    68   109    56    68  1208     1      66  ,
 51941    68   110    41    68  1208     1     111  this.limit
 51942    68   110    51    68  1208     1      59  (
 51943    68   110    52    68  1208     1      60  )
 51944    68   110    53    68  1208     1      66  ,
 51945    68   111    41    68  1208     1     111  this.capacity
 51946    68   111    54    68  1208     1      59  (
 51947    68   111    55    68  1208     1      60  )
 51948    68   111    56    68  1208     1      66  ,
 51949    68   112    41    68  1208     0     111  offset
 51950    68   112    47    68  1208     0      60  )
 51951    68   112    48    68  1208     0     102  ;
 51952    68   113     5    68  1208     0      64  }
 51953    68   113     5    68  1208     0    2812  ENDMETHOD
 51954    68   113     5    68  1209     0    2813  STARTMETHOD
 51955    68   115     5    68  1209     0      10  public
 51956    68   115    12    68  1209     0     111  IntBuffer
 51957    68   115    22    68  1209     0     111  asReadOnlyBuffer
 51958    68   115    38    68  1209     0      59  (
 51959    68   115    39    68  1209     0      60  )
 51960    68   115    41    68  1209     0      63  {
 51961    68   124     9    68  1209     0      19  return
 51962    68   124    16    68  1209     0     111  duplicate
 51963    68   124    25    68  1209     0      59  (
 51964    68   124    26    68  1209     0      60  )
 51965    68   124    27    68  1209     0     102  ;
 51966    68   126     5    68  1209     0      64  }
 51967    68   126     5    68  1209     0    2814  ENDMETHOD
 51968    68   126     5    68  1210     0    2815  STARTMETHOD
 51969    68   157     5    68  1210     0      10  public
 51970    68   157    12    68  1210     0      39  boolean
 51971    68   157    20    68  1210     0     111  isReadOnly
 51972    68   157    30    68  1210     0      59  (
 51973    68   157    31    68  1210     0      60  )
 51974    68   157    33    68  1210     0      63  {
 51975    68   158     9    68  1210     0      19  return
 51976    68   158    16    68  1210     0      52  true
 51977    68   158    20    68  1210     0     102  ;
 51978    68   159     5    68  1210     0      64  }
 51979    68   159     5    68  1210     0    2816  ENDMETHOD
 51980    68   159     5    68  1211     0    2817  STARTMETHOD
 51981    68   161     5    68  1211     0      10  public
 51982    68   161    12    68  1211     0     111  IntBuffer
 51983    68   161    22    68  1211     0     111  put
 51984    68   161    25    68  1211     0      59  (
 51985    68   161    26    68  1211     0      36  int
 51986    68   161    30    68  1211     0     111  x
 51987    68   161    31    68  1211     0      60  )
 51988    68   161    33    68  1211     0      63  {
 51989    68   166     9    68  1211     0      20  throw
 51990    68   166    15    68  1211     0      15  new
 51991    68   166    19    68  1211     0     111  ReadOnlyBufferException
 51992    68   166    42    68  1211     0      59  (
 51993    68   166    43    68  1211     0      60  )
 51994    68   166    44    68  1211     0     102  ;
 51995    68   168     5    68  1211     0      64  }
 51996    68   168     5    68  1211     0    2818  ENDMETHOD
 51997    68   168     5    68  1212     0    2819  STARTMETHOD
 51998    68   170     5    68  1212     0      10  public
 51999    68   170    12    68  1212     0     111  IntBuffer
 52000    68   170    22    68  1212     0     111  put
 52001    68   170    25    68  1212     0      59  (
 52002    68   170    26    68  1212     0      36  int
 52003    68   170    30    68  1212     0     111  i
 52004    68   170    31    68  1212     0      66  ,
 52005    68   170    33    68  1212     0      36  int
 52006    68   170    37    68  1212     0     111  x
 52007    68   170    38    68  1212     0      60  )
 52008    68   170    40    68  1212     0      63  {
 52009    68   175     9    68  1212     0      20  throw
 52010    68   175    15    68  1212     0      15  new
 52011    68   175    19    68  1212     0     111  ReadOnlyBufferException
 52012    68   175    42    68  1212     0      59  (
 52013    68   175    43    68  1212     0      60  )
 52014    68   175    44    68  1212     0     102  ;
 52015    68   177     5    68  1212     0      64  }
 52016    68   177     5    68  1212     0    2820  ENDMETHOD
 52017    68   177     5    68  1213     0    2821  STARTMETHOD
 52018    68   179     5    68  1213     0      10  public
 52019    68   179    12    68  1213     0     111  IntBuffer
 52020    68   179    22    68  1213     0     111  put
 52021    68   179    25    68  1213     0      59  (
 52022    68   179    26    68  1213     0      36  int
 52023    68   179    29    68  1213     0      61  [
 52024    68   179    30    68  1213     0      62  ]
 52025    68   179    32    68  1213     0     111  src
 52026    68   179    35    68  1213     0      66  ,
 52027    68   179    37    68  1213     0      36  int
 52028    68   179    41    68  1213     0     111  offset
 52029    68   179    47    68  1213     0      66  ,
 52030    68   179    49    68  1213     0      36  int
 52031    68   179    53    68  1213     0     111  length
 52032    68   179    59    68  1213     0      60  )
 52033    68   179    61    68  1213     0      63  {
 52034    68   188     9    68  1213     0      20  throw
 52035    68   188    15    68  1213     0      15  new
 52036    68   188    19    68  1213     0     111  ReadOnlyBufferException
 52037    68   188    42    68  1213     0      59  (
 52038    68   188    43    68  1213     0      60  )
 52039    68   188    44    68  1213     0     102  ;
 52040    68   190     5    68  1213     0      64  }
 52041    68   190     5    68  1213     0    2822  ENDMETHOD
 52042    68   190     5    68  1214     0    2823  STARTMETHOD
 52043    68   192     5    68  1214     0      10  public
 52044    68   192    12    68  1214     0     111  IntBuffer
 52045    68   192    22    68  1214     0     111  put
 52046    68   192    25    68  1214     0      59  (
 52047    68   192    26    68  1214     0     111  IntBuffer
 52048    68   192    36    68  1214     0     111  src
 52049    68   192    39    68  1214     0      60  )
 52050    68   192    41    68  1214     0      63  {
 52051    68   216     9    68  1214     0      20  throw
 52052    68   216    15    68  1214     0      15  new
 52053    68   216    19    68  1214     0     111  ReadOnlyBufferException
 52054    68   216    42    68  1214     0      59  (
 52055    68   216    43    68  1214     0      60  )
 52056    68   216    44    68  1214     0     102  ;
 52057    68   218     5    68  1214     0      64  }
 52058    68   218     5    68  1214     0    2824  ENDMETHOD
 52059    68   218     5    68  1215     0    2825  STARTMETHOD
 52060    68   220     5    68  1215     0      10  public
 52061    68   220    12    68  1215     0     111  IntBuffer
 52062    68   220    22    68  1215     0     111  compact
 52063    68   220    29    68  1215     0      59  (
 52064    68   220    30    68  1215     0      60  )
 52065    68   220    32    68  1215     0      63  {
 52066    68   228     9    68  1215     0      20  throw
 52067    68   228    15    68  1215     0      15  new
 52068    68   228    19    68  1215     0     111  ReadOnlyBufferException
 52069    68   228    42    68  1215     0      59  (
 52070    68   228    43    68  1215     0      60  )
 52071    68   228    44    68  1215     0     102  ;
 52072    68   230     5    68  1215     0      64  }
 52073    68   230     5    68  1215     0    2826  ENDMETHOD
 52074    68   230     5    68  1216     0    2827  STARTMETHOD
 52075    68   586     5    68  1216     0      10  public
 52076    68   586    12    68  1216     0     111  ByteOrder
 52077    68   586    22    68  1216     0     111  order
 52078    68   586    27    68  1216     0      59  (
 52079    68   586    28    68  1216     0      60  )
 52080    68   586    30    68  1216     0      63  {
 52081    68   587     9    68  1216     0      19  return
 52082    68   587    16    68  1216     0     111  ByteOrder.nativeOrder
 52083    68   587    37    68  1216     0      59  (
 52084    68   587    38    68  1216     0      60  )
 52085    68   587    39    68  1216     0     102  ;
 52086    68   588     5    68  1216     0      64  }
 52087    68   588     5    68  1216     0    2828  ENDMETHOD
 52088    68   592     1    68    -1     0      64  }
 52089    68   592     1    68    -1     1    2829  ENDCLASS
 52090    68   592     1    -1    -1     1    2830  ENDFILE C:\javasrc\java\nio\HeapIntBufferR.java
 52091    69     1     1    -1    -1     1    2831  STARTFILE C:\javasrc\java\nio\HeapLongBuffer.java
 52092    69    28     1    -1    -1     0       5  package
 52093    69    28     9    -1    -1     0     111  java.nio
 52094    69    28    17    -1    -1     0     102  ;
 52095    69    42     1    69    -1     0    2832  STARTCLASS
 52096    69    42     1    69    -1     0      24  class
 52097    69    42     7    69    -1     0     111  HeapLongBuffer
 52098    69    43     5    69    -1     0      38  extends
 52099    69    43    13    69    -1     0     111  LongBuffer
 52100    69    44     1    69    -1     0      63  {
 52101    69    44     1    69  1217     0    2833  STARTMETHOD
 52102    69    55     5    69  1217     0     111  HeapLongBuffer
 52103    69    55    19    69  1217     0      59  (
 52104    69    55    20    69  1217     0      36  int
 52105    69    55    24    69  1217     0     111  cap
 52106    69    55    27    69  1217     0      66  ,
 52107    69    55    29    69  1217     0      36  int
 52108    69    55    33    69  1217     0     111  lim
 52109    69    55    36    69  1217     0      60  )
 52110    69    55    38    69  1217     0      63  {
 52111    69    57     9    69  1217     0      27  super
 52112    69    57    14    69  1217     0      59  (
 52113    69    57    15    69  1217     0      77  -
 52114    69    57    16    69  1217     0     112  1
 52115    69    57    17    69  1217     0      66  ,
 52116    69    57    19    69  1217     0     112  0
 52117    69    57    20    69  1217     0      66  ,
 52118    69    57    22    69  1217     0     111  lim
 52119    69    57    25    69  1217     0      66  ,
 52120    69    57    27    69  1217     0     111  cap
 52121    69    57    30    69  1217     0      66  ,
 52122    69    57    32    69  1217     0      15  new
 52123    69    57    36    69  1217     0      53  long
 52124    69    57    40    69  1217     0      61  [
 52125    69    57    41    69  1217     0     111  cap
 52126    69    57    44    69  1217     0      62  ]
 52127    69    57    45    69  1217     0      66  ,
 52128    69    57    47    69  1217     0     112  0
 52129    69    57    48    69  1217     0      60  )
 52130    69    57    49    69  1217     0     102  ;
 52131    69    66     5    69  1217     0      64  }
 52132    69    66     5    69  1217     0    2834  ENDMETHOD
 52133    69    66     5    69  1218     0    2835  STARTMETHOD
 52134    69    68     5    69  1218     0     111  HeapLongBuffer
 52135    69    68    19    69  1218     0      59  (
 52136    69    68    20    69  1218     0      53  long
 52137    69    68    24    69  1218     0      61  [
 52138    69    68    25    69  1218     0      62  ]
 52139    69    68    27    69  1218     0     111  buf
 52140    69    68    30    69  1218     0      66  ,
 52141    69    68    32    69  1218     0      36  int
 52142    69    68    36    69  1218     0     111  off
 52143    69    68    39    69  1218     0      66  ,
 52144    69    68    41    69  1218     0      36  int
 52145    69    68    45    69  1218     0     111  len
 52146    69    68    48    69  1218     0      60  )
 52147    69    68    50    69  1218     0      63  {
 52148    69    70     9    69  1218     0      27  super
 52149    69    70    14    69  1218     0      59  (
 52150    69    70    15    69  1218     0      77  -
 52151    69    70    16    69  1218     0     112  1
 52152    69    70    17    69  1218     0      66  ,
 52153    69    70    19    69  1218     0     111  off
 52154    69    70    22    69  1218     0      66  ,
 52155    69    70    24    69  1218     0     111  off
 52156    69    70    28    69  1218     0      74  +
 52157    69    70    30    69  1218     0     111  len
 52158    69    70    33    69  1218     0      66  ,
 52159    69    70    35    69  1218     0     111  buf.length
 52160    69    70    45    69  1218     0      66  ,
 52161    69    70    47    69  1218     0     111  buf
 52162    69    70    50    69  1218     0      66  ,
 52163    69    70    52    69  1218     0     112  0
 52164    69    70    53    69  1218     0      60  )
 52165    69    70    54    69  1218     0     102  ;
 52166    69    79     5    69  1218     0      64  }
 52167    69    79     5    69  1218     0    2836  ENDMETHOD
 52168    69    79     5    69  1219     0    2837  STARTMETHOD
 52169    69    81     5    69  1219     0      23  protected
 52170    69    81    15    69  1219     0     111  HeapLongBuffer
 52171    69    81    29    69  1219     0      59  (
 52172    69    81    30    69  1219     0      53  long
 52173    69    81    34    69  1219     0      61  [
 52174    69    81    35    69  1219     0      62  ]
 52175    69    81    37    69  1219     0     111  buf
 52176    69    81    40    69  1219     0      66  ,
 52177    69    82    36    69  1219     0      36  int
 52178    69    82    40    69  1219     0     111  mark
 52179    69    82    44    69  1219     0      66  ,
 52180    69    82    46    69  1219     0      36  int
 52181    69    82    50    69  1219     0     111  pos
 52182    69    82    53    69  1219     0      66  ,
 52183    69    82    55    69  1219     0      36  int
 52184    69    82    59    69  1219     0     111  lim
 52185    69    82    62    69  1219     0      66  ,
 52186    69    82    64    69  1219     0      36  int
 52187    69    82    68    69  1219     0     111  cap
 52188    69    82    71    69  1219     0      66  ,
 52189    69    83    36    69  1219     0      36  int
 52190    69    83    40    69  1219     0     111  off
 52191    69    83    43    69  1219     0      60  )
 52192    69    84     5    69  1219     0      63  {
 52193    69    86     9    69  1219     0      27  super
 52194    69    86    14    69  1219     0      59  (
 52195    69    86    15    69  1219     0     111  mark
 52196    69    86    19    69  1219     0      66  ,
 52197    69    86    21    69  1219     0     111  pos
 52198    69    86    24    69  1219     0      66  ,
 52199    69    86    26    69  1219     0     111  lim
 52200    69    86    29    69  1219     0      66  ,
 52201    69    86    31    69  1219     0     111  cap
 52202    69    86    34    69  1219     0      66  ,
 52203    69    86    36    69  1219     0     111  buf
 52204    69    86    39    69  1219     0      66  ,
 52205    69    86    41    69  1219     0     111  off
 52206    69    86    44    69  1219     0      60  )
 52207    69    86    45    69  1219     0     102  ;
 52208    69    95     5    69  1219     0      64  }
 52209    69    95     5    69  1219     0    2838  ENDMETHOD
 52210    69    95     5    69  1220     0    2839  STARTMETHOD
 52211    69    97     5    69  1220     0      10  public
 52212    69    97    12    69  1220     0     111  LongBuffer
 52213    69    97    23    69  1220     0     111  slice
 52214    69    97    28    69  1220     0      59  (
 52215    69    97    29    69  1220     0      60  )
 52216    69    97    31    69  1220     0      63  {
 52217    69    98     9    69  1220     0      19  return
 52218    69    98    16    69  1220     0      15  new
 52219    69    98    20    69  1220     0     111  HeapLongBuffer
 52220    69    98    34    69  1220     0      59  (
 52221    69    98    35    69  1220     0     111  hb
 52222    69    98    37    69  1220     0      66  ,
 52223    69    99    41    69  1220     0      77  -
 52224    69    99    42    69  1220     0     112  1
 52225    69    99    43    69  1220     0      66  ,
 52226    69   100    41    69  1220     0     112  0
 52227    69   100    42    69  1220     0      66  ,
 52228    69   101    41    69  1220     1     111  this.remaining
 52229    69   101    55    69  1220     1      59  (
 52230    69   101    56    69  1220     1      60  )
 52231    69   101    57    69  1220     1      66  ,
 52232    69   102    41    69  1220     1     111  this.remaining
 52233    69   102    55    69  1220     1      59  (
 52234    69   102    56    69  1220     1      60  )
 52235    69   102    57    69  1220     1      66  ,
 52236    69   103    41    69  1220     0     111  this.position
 52237    69   103    54    69  1220     0      59  (
 52238    69   103    55    69  1220     0      60  )
 52239    69   103    57    69  1220     0      74  +
 52240    69   103    59    69  1220     1     111  offset
 52241    69   103    65    69  1220     1      60  )
 52242    69   103    66    69  1220     1     102  ;
 52243    69   104     5    69  1220     1      64  }
 52244    69   104     5    69  1220     0    2840  ENDMETHOD
 52245    69   104     5    69  1221     0    2841  STARTMETHOD
 52246    69   106     5    69  1221     0      10  public
 52247    69   106    12    69  1221     0     111  LongBuffer
 52248    69   106    23    69  1221     0     111  duplicate
 52249    69   106    32    69  1221     0      59  (
 52250    69   106    33    69  1221     0      60  )
 52251    69   106    35    69  1221     0      63  {
 52252    69   107     9    69  1221     0      19  return
 52253    69   107    16    69  1221     0      15  new
 52254    69   107    20    69  1221     0     111  HeapLongBuffer
 52255    69   107    34    69  1221     0      59  (
 52256    69   107    35    69  1221     0     111  hb
 52257    69   107    37    69  1221     0      66  ,
 52258    69   108    41    69  1221     1     111  this.markValue
 52259    69   108    55    69  1221     1      59  (
 52260    69   108    56    69  1221     1      60  )
 52261    69   108    57    69  1221     1      66  ,
 52262    69   109    41    69  1221     1     111  this.position
 52263    69   109    54    69  1221     1      59  (
 52264    69   109    55    69  1221     1      60  )
 52265    69   109    56    69  1221     1      66  ,
 52266    69   110    41    69  1221     1     111  this.limit
 52267    69   110    51    69  1221     1      59  (
 52268    69   110    52    69  1221     1      60  )
 52269    69   110    53    69  1221     1      66  ,
 52270    69   111    41    69  1221     1     111  this.capacity
 52271    69   111    54    69  1221     1      59  (
 52272    69   111    55    69  1221     1      60  )
 52273    69   111    56    69  1221     1      66  ,
 52274    69   112    41    69  1221     1     111  offset
 52275    69   112    47    69  1221     1      60  )
 52276    69   112    48    69  1221     1     102  ;
 52277    69   113     5    69  1221     1      64  }
 52278    69   113     5    69  1221     0    2842  ENDMETHOD
 52279    69   113     5    69  1222     0    2843  STARTMETHOD
 52280    69   115     5    69  1222     0      10  public
 52281    69   115    12    69  1222     0     111  LongBuffer
 52282    69   115    23    69  1222     0     111  asReadOnlyBuffer
 52283    69   115    39    69  1222     0      59  (
 52284    69   115    40    69  1222     0      60  )
 52285    69   115    42    69  1222     0      63  {
 52286    69   117     9    69  1222     0      19  return
 52287    69   117    16    69  1222     0      15  new
 52288    69   117    20    69  1222     0     111  HeapLongBufferR
 52289    69   117    35    69  1222     0      59  (
 52290    69   117    36    69  1222     0     111  hb
 52291    69   117    38    69  1222     0      66  ,
 52292    69   118    38    69  1222     1     111  this.markValue
 52293    69   118    52    69  1222     1      59  (
 52294    69   118    53    69  1222     1      60  )
 52295    69   118    54    69  1222     1      66  ,
 52296    69   119    38    69  1222     1     111  this.position
 52297    69   119    51    69  1222     1      59  (
 52298    69   119    52    69  1222     1      60  )
 52299    69   119    53    69  1222     1      66  ,
 52300    69   120    38    69  1222     1     111  this.limit
 52301    69   120    48    69  1222     1      59  (
 52302    69   120    49    69  1222     1      60  )
 52303    69   120    50    69  1222     1      66  ,
 52304    69   121    38    69  1222     1     111  this.capacity
 52305    69   121    51    69  1222     1      59  (
 52306    69   121    52    69  1222     1      60  )
 52307    69   121    53    69  1222     1      66  ,
 52308    69   122    38    69  1222     1     111  offset
 52309    69   122    44    69  1222     1      60  )
 52310    69   122    45    69  1222     1     102  ;
 52311    69   126     5    69  1222     1      64  }
 52312    69   126     5    69  1222     0    2844  ENDMETHOD
 52313    69   126     5    69  1223     0    2845  STARTMETHOD
 52314    69   130     5    69  1223     0      23  protected
 52315    69   130    15    69  1223     0      36  int
 52316    69   130    19    69  1223     0     111  ix
 52317    69   130    21    69  1223     0      59  (
 52318    69   130    22    69  1223     0      36  int
 52319    69   130    26    69  1223     0     111  i
 52320    69   130    27    69  1223     0      60  )
 52321    69   130    29    69  1223     0      63  {
 52322    69   131     9    69  1223     0      19  return
 52323    69   131    16    69  1223     0     111  i
 52324    69   131    18    69  1223     0      74  +
 52325    69   131    20    69  1223     0     111  offset
 52326    69   131    26    69  1223     0     102  ;
 52327    69   132     5    69  1223     0      64  }
 52328    69   132     5    69  1223     0    2846  ENDMETHOD
 52329    69   132     5    69  1224     0    2847  STARTMETHOD
 52330    69   134     5    69  1224     0      10  public
 52331    69   134    12    69  1224     0      53  long
 52332    69   134    17    69  1224     0     111  get
 52333    69   134    20    69  1224     0      59  (
 52334    69   134    21    69  1224     0      60  )
 52335    69   134    23    69  1224     0      63  {
 52336    69   135     9    69  1224     0      19  return
 52337    69   135    16    69  1224     0     111  hb
 52338    69   135    18    69  1224     0      61  [
 52339    69   135    19    69  1224     0     111  ix
 52340    69   135    21    69  1224     0      59  (
 52341    69   135    22    69  1224     0     111  nextGetIndex
 52342    69   135    34    69  1224     0      59  (
 52343    69   135    35    69  1224     0      60  )
 52344    69   135    36    69  1224     0      60  )
 52345    69   135    37    69  1224     0      62  ]
 52346    69   135    38    69  1224     0     102  ;
 52347    69   136     5    69  1224     0      64  }
 52348    69   136     5    69  1224     0    2848  ENDMETHOD
 52349    69   136     5    69  1225     0    2849  STARTMETHOD
 52350    69   138     5    69  1225     0      10  public
 52351    69   138    12    69  1225     0      53  long
 52352    69   138    17    69  1225     0     111  get
 52353    69   138    20    69  1225     0      59  (
 52354    69   138    21    69  1225     0      36  int
 52355    69   138    25    69  1225     0     111  i
 52356    69   138    26    69  1225     0      60  )
 52357    69   138    28    69  1225     0      63  {
 52358    69   139     9    69  1225     0      19  return
 52359    69   139    16    69  1225     0     111  hb
 52360    69   139    18    69  1225     0      61  [
 52361    69   139    19    69  1225     0     111  ix
 52362    69   139    21    69  1225     0      59  (
 52363    69   139    22    69  1225     0     111  checkIndex
 52364    69   139    32    69  1225     0      59  (
 52365    69   139    33    69  1225     0     111  i
 52366    69   139    34    69  1225     0      60  )
 52367    69   139    35    69  1225     0      60  )
 52368    69   139    36    69  1225     0      62  ]
 52369    69   139    37    69  1225     0     102  ;
 52370    69   140     5    69  1225     0      64  }
 52371    69   140     5    69  1225     0    2850  ENDMETHOD
 52372    69   140     5    69  1226     0    2851  STARTMETHOD
 52373    69   142     5    69  1226     0      10  public
 52374    69   142    12    69  1226     0     111  LongBuffer
 52375    69   142    23    69  1226     0     111  get
 52376    69   142    26    69  1226     0      59  (
 52377    69   142    27    69  1226     0      53  long
 52378    69   142    31    69  1226     0      61  [
 52379    69   142    32    69  1226     0      62  ]
 52380    69   142    34    69  1226     0     111  dst
 52381    69   142    37    69  1226     0      66  ,
 52382    69   142    39    69  1226     0      36  int
 52383    69   142    43    69  1226     0     111  offset
 52384    69   142    49    69  1226     0      66  ,
 52385    69   142    51    69  1226     0      36  int
 52386    69   142    55    69  1226     0     111  length
 52387    69   142    61    69  1226     0      60  )
 52388    69   142    63    69  1226     0      63  {
 52389    69   143     9    69  1226     0     111  checkBounds
 52390    69   143    20    69  1226     0      59  (
 52391    69   143    21    69  1226     0     111  offset
 52392    69   143    27    69  1226     0      66  ,
 52393    69   143    29    69  1226     0     111  length
 52394    69   143    35    69  1226     0      66  ,
 52395    69   143    37    69  1226     0     111  dst.length
 52396    69   143    47    69  1226     0      60  )
 52397    69   143    48    69  1226     0     102  ;
 52398    69   144     9    69  1226     0      31  if
 52399    69   144    12    69  1226     0      59  (
 52400    69   144    13    69  1226     0     111  length
 52401    69   144    20    69  1226     0      89  >
 52402    69   144    22    69  1226     0     111  remaining
 52403    69   144    31    69  1226     0      59  (
 52404    69   144    32    69  1226     0      60  )
 52405    69   144    33    69  1226     0      60  )
 52406    69   145    13    69  1226     0      20  throw
 52407    69   145    19    69  1226     0      15  new
 52408    69   145    23    69  1226     0     111  BufferUnderflowException
 52409    69   145    47    69  1226     0      59  (
 52410    69   145    48    69  1226     0      60  )
 52411    69   145    49    69  1226     0     102  ;
 52412    69   146     9    69  1226     0     111  System.arraycopy
 52413    69   146    25    69  1226     0      59  (
 52414    69   146    26    69  1226     0     111  hb
 52415    69   146    28    69  1226     0      66  ,
 52416    69   146    30    69  1226     0     111  ix
 52417    69   146    32    69  1226     0      59  (
 52418    69   146    33    69  1226     0     111  position
 52419    69   146    41    69  1226     0      59  (
 52420    69   146    42    69  1226     0      60  )
 52421    69   146    43    69  1226     0      60  )
 52422    69   146    44    69  1226     0      66  ,
 52423    69   146    46    69  1226     0     111  dst
 52424    69   146    49    69  1226     0      66  ,
 52425    69   146    51    69  1226     0     111  offset
 52426    69   146    57    69  1226     0      66  ,
 52427    69   146    59    69  1226     0     111  length
 52428    69   146    65    69  1226     0      60  )
 52429    69   146    66    69  1226     0     102  ;
 52430    69   147     9    69  1226     0     111  position
 52431    69   147    17    69  1226     0      59  (
 52432    69   147    18    69  1226     0     111  position
 52433    69   147    26    69  1226     0      59  (
 52434    69   147    27    69  1226     0      60  )
 52435    69   147    29    69  1226     0      74  +
 52436    69   147    31    69  1226     0     111  length
 52437    69   147    37    69  1226     0      60  )
 52438    69   147    38    69  1226     0     102  ;
 52439    69   148     9    69  1226     0      19  return
 52440    69   148    16    69  1226     0      44  this
 52441    69   148    20    69  1226     1     102  ;
 52442    69   149     5    69  1226     1      64  }
 52443    69   149     5    69  1226     0    2852  ENDMETHOD
 52444    69   149     5    69  1227     0    2853  STARTMETHOD
 52445    69   151     5    69  1227     0      10  public
 52446    69   151    12    69  1227     0      39  boolean
 52447    69   151    20    69  1227     0     111  isDirect
 52448    69   151    28    69  1227     0      59  (
 52449    69   151    29    69  1227     0      60  )
 52450    69   151    31    69  1227     0      63  {
 52451    69   152     9    69  1227     0      19  return
 52452    69   152    16    69  1227     0      43  false
 52453    69   152    21    69  1227     1     102  ;
 52454    69   153     5    69  1227     1      64  }
 52455    69   153     5    69  1227     0    2854  ENDMETHOD
 52456    69   153     5    69  1228     0    2855  STARTMETHOD
 52457    69   157     5    69  1228     0      10  public
 52458    69   157    12    69  1228     0      39  boolean
 52459    69   157    20    69  1228     0     111  isReadOnly
 52460    69   157    30    69  1228     0      59  (
 52461    69   157    31    69  1228     0      60  )
 52462    69   157    33    69  1228     0      63  {
 52463    69   158     9    69  1228     0      19  return
 52464    69   158    16    69  1228     0      43  false
 52465    69   158    21    69  1228     1     102  ;
 52466    69   159     5    69  1228     1      64  }
 52467    69   159     5    69  1228     0    2856  ENDMETHOD
 52468    69   159     5    69  1229     0    2857  STARTMETHOD
 52469    69   161     5    69  1229     0      10  public
 52470    69   161    12    69  1229     0     111  LongBuffer
 52471    69   161    23    69  1229     0     111  put
 52472    69   161    26    69  1229     0      59  (
 52473    69   161    27    69  1229     0      53  long
 52474    69   161    32    69  1229     0     111  x
 52475    69   161    33    69  1229     0      60  )
 52476    69   161    35    69  1229     0      63  {
 52477    69   163     9    69  1229     0     111  hb
 52478    69   163    11    69  1229     0      61  [
 52479    69   163    12    69  1229     0     111  ix
 52480    69   163    14    69  1229     0      59  (
 52481    69   163    15    69  1229     0     111  nextPutIndex
 52482    69   163    27    69  1229     0      59  (
 52483    69   163    28    69  1229     0      60  )
 52484    69   163    29    69  1229     0      60  )
 52485    69   163    30    69  1229     0      62  ]
 52486    69   163    32    69  1229     0      67  =
 52487    69   163    34    69  1229     0     111  x
 52488    69   163    35    69  1229     0     102  ;
 52489    69   164     9    69  1229     0      19  return
 52490    69   164    16    69  1229     0      44  this
 52491    69   164    20    69  1229     0     102  ;
 52492    69   168     5    69  1229     0      64  }
 52493    69   168     5    69  1229     0    2858  ENDMETHOD
 52494    69   168     5    69  1230     0    2859  STARTMETHOD
 52495    69   170     5    69  1230     0      10  public
 52496    69   170    12    69  1230     0     111  LongBuffer
 52497    69   170    23    69  1230     0     111  put
 52498    69   170    26    69  1230     0      59  (
 52499    69   170    27    69  1230     0      36  int
 52500    69   170    31    69  1230     0     111  i
 52501    69   170    32    69  1230     0      66  ,
 52502    69   170    34    69  1230     0      53  long
 52503    69   170    39    69  1230     0     111  x
 52504    69   170    40    69  1230     0      60  )
 52505    69   170    42    69  1230     0      63  {
 52506    69   172     9    69  1230     0     111  hb
 52507    69   172    11    69  1230     0      61  [
 52508    69   172    12    69  1230     0     111  ix
 52509    69   172    14    69  1230     0      59  (
 52510    69   172    15    69  1230     0     111  checkIndex
 52511    69   172    25    69  1230     0      59  (
 52512    69   172    26    69  1230     0     111  i
 52513    69   172    27    69  1230     0      60  )
 52514    69   172    28    69  1230     0      60  )
 52515    69   172    29    69  1230     0      62  ]
 52516    69   172    31    69  1230     0      67  =
 52517    69   172    33    69  1230     0     111  x
 52518    69   172    34    69  1230     0     102  ;
 52519    69   173     9    69  1230     0      19  return
 52520    69   173    16    69  1230     0      44  this
 52521    69   173    20    69  1230     0     102  ;
 52522    69   177     5    69  1230     0      64  }
 52523    69   177     5    69  1230     0    2860  ENDMETHOD
 52524    69   177     5    69  1231     0    2861  STARTMETHOD
 52525    69   179     5    69  1231     0      10  public
 52526    69   179    12    69  1231     0     111  LongBuffer
 52527    69   179    23    69  1231     0     111  put
 52528    69   179    26    69  1231     0      59  (
 52529    69   179    27    69  1231     0      53  long
 52530    69   179    31    69  1231     0      61  [
 52531    69   179    32    69  1231     0      62  ]
 52532    69   179    34    69  1231     0     111  src
 52533    69   179    37    69  1231     0      66  ,
 52534    69   179    39    69  1231     0      36  int
 52535    69   179    43    69  1231     0     111  offset
 52536    69   179    49    69  1231     0      66  ,
 52537    69   179    51    69  1231     0      36  int
 52538    69   179    55    69  1231     0     111  length
 52539    69   179    61    69  1231     0      60  )
 52540    69   179    63    69  1231     0      63  {
 52541    69   181     9    69  1231     0     111  checkBounds
 52542    69   181    20    69  1231     0      59  (
 52543    69   181    21    69  1231     0     111  offset
 52544    69   181    27    69  1231     0      66  ,
 52545    69   181    29    69  1231     0     111  length
 52546    69   181    35    69  1231     0      66  ,
 52547    69   181    37    69  1231     0     111  src.length
 52548    69   181    47    69  1231     0      60  )
 52549    69   181    48    69  1231     0     102  ;
 52550    69   182     9    69  1231     0      31  if
 52551    69   182    12    69  1231     0      59  (
 52552    69   182    13    69  1231     0     111  length
 52553    69   182    20    69  1231     0      89  >
 52554    69   182    22    69  1231     0     111  remaining
 52555    69   182    31    69  1231     0      59  (
 52556    69   182    32    69  1231     0      60  )
 52557    69   182    33    69  1231     0      60  )
 52558    69   183    13    69  1231     0      20  throw
 52559    69   183    19    69  1231     0      15  new
 52560    69   183    23    69  1231     0     111  BufferOverflowException
 52561    69   183    46    69  1231     0      59  (
 52562    69   183    47    69  1231     0      60  )
 52563    69   183    48    69  1231     0     102  ;
 52564    69   184     9    69  1231     0     111  System.arraycopy
 52565    69   184    25    69  1231     0      59  (
 52566    69   184    26    69  1231     0     111  src
 52567    69   184    29    69  1231     0      66  ,
 52568    69   184    31    69  1231     0     111  offset
 52569    69   184    37    69  1231     0      66  ,
 52570    69   184    39    69  1231     0     111  hb
 52571    69   184    41    69  1231     0      66  ,
 52572    69   184    43    69  1231     0     111  ix
 52573    69   184    45    69  1231     0      59  (
 52574    69   184    46    69  1231     0     111  position
 52575    69   184    54    69  1231     0      59  (
 52576    69   184    55    69  1231     0      60  )
 52577    69   184    56    69  1231     0      60  )
 52578    69   184    57    69  1231     0      66  ,
 52579    69   184    59    69  1231     0     111  length
 52580    69   184    65    69  1231     0      60  )
 52581    69   184    66    69  1231     0     102  ;
 52582    69   185     9    69  1231     0     111  position
 52583    69   185    17    69  1231     0      59  (
 52584    69   185    18    69  1231     0     111  position
 52585    69   185    26    69  1231     0      59  (
 52586    69   185    27    69  1231     0      60  )
 52587    69   185    29    69  1231     0      74  +
 52588    69   185    31    69  1231     0     111  length
 52589    69   185    37    69  1231     0      60  )
 52590    69   185    38    69  1231     0     102  ;
 52591    69   186     9    69  1231     0      19  return
 52592    69   186    16    69  1231     0      44  this
 52593    69   186    20    69  1231     0     102  ;
 52594    69   190     5    69  1231     0      64  }
 52595    69   190     5    69  1231     0    2862  ENDMETHOD
 52596    69   190     5    69  1232     0    2863  STARTMETHOD
 52597    69   192     5    69  1232     0      10  public
 52598    69   192    12    69  1232     0     111  LongBuffer
 52599    69   192    23    69  1232     0     111  put
 52600    69   192    26    69  1232     0      59  (
 52601    69   192    27    69  1232     0     111  LongBuffer
 52602    69   192    38    69  1232     0     111  src
 52603    69   192    41    69  1232     0      60  )
 52604    69   192    43    69  1232     0      63  {
 52605    69   194     9    69  1232     0      31  if
 52606    69   194    12    69  1232     0      59  (
 52607    69   194    13    69  1232     0     111  src
 52608    69   194    17    69  1232     0      16  instanceof
 52609    69   194    28    69  1232     0     111  HeapLongBuffer
 52610    69   194    42    69  1232     0      60  )
 52611    69   194    44    69  1232     0      63  {
 52612    69   195    13    69  1232     0      31  if
 52613    69   195    16    69  1232     0      59  (
 52614    69   195    17    69  1232     0     111  src
 52615    69   195    21    69  1232     0      68  ==
 52616    69   195    24    69  1232     0      44  this
 52617    69   195    28    69  1232     0      60  )
 52618    69   196    17    69  1232     0      20  throw
 52619    69   196    23    69  1232     0      15  new
 52620    69   196    27    69  1232     0     111  IllegalArgumentException
 52621    69   196    51    69  1232     0      59  (
 52622    69   196    52    69  1232     0      60  )
 52623    69   196    53    69  1232     0     102  ;
 52624    69   197    13    69  1232     0     111  HeapLongBuffer
 52625    69   197    28    69  1232     0     111  sb
 52626    69   197    31    69  1232     0      67  =
 52627    69   197    33    69  1232     0      59  (
 52628    69   197    34    69  1232     0     111  HeapLongBuffer
 52629    69   197    48    69  1232     0      60  )
 52630    69   197    49    69  1232     0     111  src
 52631    69   197    52    69  1232     0     102  ;
 52632    69   198    13    69  1232     0      36  int
 52633    69   198    17    69  1232     0     111  n
 52634    69   198    19    69  1232     0      67  =
 52635    69   198    21    69  1232     0     111  sb.remaining
 52636    69   198    33    69  1232     0      59  (
 52637    69   198    34    69  1232     0      60  )
 52638    69   198    35    69  1232     0     102  ;
 52639    69   199    13    69  1232     0      31  if
 52640    69   199    16    69  1232     0      59  (
 52641    69   199    17    69  1232     0     111  n
 52642    69   199    19    69  1232     0      89  >
 52643    69   199    21    69  1232     0     111  remaining
 52644    69   199    30    69  1232     0      59  (
 52645    69   199    31    69  1232     0      60  )
 52646    69   199    32    69  1232     0      60  )
 52647    69   200    17    69  1232     0      20  throw
 52648    69   200    23    69  1232     0      15  new
 52649    69   200    27    69  1232     0     111  BufferOverflowException
 52650    69   200    50    69  1232     0      59  (
 52651    69   200    51    69  1232     0      60  )
 52652    69   200    52    69  1232     0     102  ;
 52653    69   201    13    69  1232     0     111  System.arraycopy
 52654    69   201    29    69  1232     0      59  (
 52655    69   201    30    69  1232     0     111  sb.hb
 52656    69   201    35    69  1232     0      66  ,
 52657    69   201    37    69  1232     0     111  sb.ix
 52658    69   201    42    69  1232     0      59  (
 52659    69   201    43    69  1232     0     111  sb.position
 52660    69   201    54    69  1232     0      59  (
 52661    69   201    55    69  1232     0      60  )
 52662    69   201    56    69  1232     0      60  )
 52663    69   201    57    69  1232     0      66  ,
 52664    69   202    30    69  1232     0     111  hb
 52665    69   202    32    69  1232     0      66  ,
 52666    69   202    34    69  1232     0     111  ix
 52667    69   202    36    69  1232     0      59  (
 52668    69   202    37    69  1232     0     111  position
 52669    69   202    45    69  1232     0      59  (
 52670    69   202    46    69  1232     0      60  )
 52671    69   202    47    69  1232     0      60  )
 52672    69   202    48    69  1232     0      66  ,
 52673    69   202    50    69  1232     0     111  n
 52674    69   202    51    69  1232     0      60  )
 52675    69   202    52    69  1232     0     102  ;
 52676    69   203    13    69  1232     1     111  sb.position
 52677    69   203    24    69  1232     1      59  (
 52678    69   203    25    69  1232     1     111  sb.position
 52679    69   203    36    69  1232     1      59  (
 52680    69   203    37    69  1232     1      60  )
 52681    69   203    39    69  1232     1      74  +
 52682    69   203    41    69  1232     1     111  n
 52683    69   203    42    69  1232     1      60  )
 52684    69   203    43    69  1232     1     102  ;
 52685    69   204    13    69  1232     1     111  position
 52686    69   204    21    69  1232     1      59  (
 52687    69   204    22    69  1232     1     111  position
 52688    69   204    30    69  1232     1      59  (
 52689    69   204    31    69  1232     1      60  )
 52690    69   204    33    69  1232     1      74  +
 52691    69   204    35    69  1232     1     111  n
 52692    69   204    36    69  1232     1      60  )
 52693    69   204    37    69  1232     1     102  ;
 52694    69   205     9    69  1232     0      64  }
 52695    69   205    11    69  1232     0      48  else
 52696    69   205    16    69  1232     0      31  if
 52697    69   205    19    69  1232     0      59  (
 52698    69   205    20    69  1232     0     111  src.isDirect
 52699    69   205    32    69  1232     0      59  (
 52700    69   205    33    69  1232     0      60  )
 52701    69   205    34    69  1232     0      60  )
 52702    69   205    36    69  1232     0      63  {
 52703    69   206    13    69  1232     0      36  int
 52704    69   206    17    69  1232     0     111  n
 52705    69   206    19    69  1232     0      67  =
 52706    69   206    21    69  1232     0     111  src.remaining
 52707    69   206    34    69  1232     0      59  (
 52708    69   206    35    69  1232     0      60  )
 52709    69   206    36    69  1232     0     102  ;
 52710    69   207    13    69  1232     0      31  if
 52711    69   207    16    69  1232     0      59  (
 52712    69   207    17    69  1232     0     111  n
 52713    69   207    19    69  1232     0      89  >
 52714    69   207    21    69  1232     0     111  remaining
 52715    69   207    30    69  1232     0      59  (
 52716    69   207    31    69  1232     0      60  )
 52717    69   207    32    69  1232     0      60  )
 52718    69   208    17    69  1232     0      20  throw
 52719    69   208    23    69  1232     0      15  new
 52720    69   208    27    69  1232     0     111  BufferOverflowException
 52721    69   208    50    69  1232     0      59  (
 52722    69   208    51    69  1232     0      60  )
 52723    69   208    52    69  1232     0     102  ;
 52724    69   209    13    69  1232     0     111  src.get
 52725    69   209    20    69  1232     0      59  (
 52726    69   209    21    69  1232     0     111  hb
 52727    69   209    23    69  1232     0      66  ,
 52728    69   209    25    69  1232     0     111  ix
 52729    69   209    27    69  1232     0      59  (
 52730    69   209    28    69  1232     0     111  position
 52731    69   209    36    69  1232     0      59  (
 52732    69   209    37    69  1232     0      60  )
 52733    69   209    38    69  1232     0      60  )
 52734    69   209    39    69  1232     0      66  ,
 52735    69   209    41    69  1232     0     111  n
 52736    69   209    42    69  1232     0      60  )
 52737    69   209    43    69  1232     0     102  ;
 52738    69   210    13    69  1232     0     111  position
 52739    69   210    21    69  1232     0      59  (
 52740    69   210    22    69  1232     0     111  position
 52741    69   210    30    69  1232     0      59  (
 52742    69   210    31    69  1232     0      60  )
 52743    69   210    33    69  1232     0      74  +
 52744    69   210    35    69  1232     0     111  n
 52745    69   210    36    69  1232     0      60  )
 52746    69   210    37    69  1232     0     102  ;
 52747    69   211     9    69  1232     0      64  }
 52748    69   211    11    69  1232     0      48  else
 52749    69   211    16    69  1232     0      63  {
 52750    69   212    13    69  1232     0     111  super.put
 52751    69   212    22    69  1232     0      59  (
 52752    69   212    23    69  1232     0     111  src
 52753    69   212    26    69  1232     0      60  )
 52754    69   212    27    69  1232     0     102  ;
 52755    69   213     9    69  1232     0      64  }
 52756    69   214     9    69  1232     0      19  return
 52757    69   214    16    69  1232     0      44  this
 52758    69   214    20    69  1232     0     102  ;
 52759    69   218     5    69  1232     0      64  }
 52760    69   218     5    69  1232     0    2864  ENDMETHOD
 52761    69   218     5    69  1233     0    2865  STARTMETHOD
 52762    69   220     5    69  1233     0      10  public
 52763    69   220    12    69  1233     0     111  LongBuffer
 52764    69   220    23    69  1233     0     111  compact
 52765    69   220    30    69  1233     0      59  (
 52766    69   220    31    69  1233     0      60  )
 52767    69   220    33    69  1233     0      63  {
 52768    69   222     9    69  1233     0     111  System.arraycopy
 52769    69   222    25    69  1233     0      59  (
 52770    69   222    26    69  1233     0     111  hb
 52771    69   222    28    69  1233     0      66  ,
 52772    69   222    30    69  1233     0     111  ix
 52773    69   222    32    69  1233     0      59  (
 52774    69   222    33    69  1233     0     111  position
 52775    69   222    41    69  1233     0      59  (
 52776    69   222    42    69  1233     0      60  )
 52777    69   222    43    69  1233     0      60  )
 52778    69   222    44    69  1233     0      66  ,
 52779    69   222    46    69  1233     0     111  hb
 52780    69   222    48    69  1233     0      66  ,
 52781    69   222    50    69  1233     0     111  ix
 52782    69   222    52    69  1233     0      59  (
 52783    69   222    53    69  1233     0     112  0
 52784    69   222    54    69  1233     0      60  )
 52785    69   222    55    69  1233     0      66  ,
 52786    69   222    57    69  1233     0     111  remaining
 52787    69   222    66    69  1233     0      59  (
 52788    69   222    67    69  1233     0      60  )
 52789    69   222    68    69  1233     0      60  )
 52790    69   222    69    69  1233     0     102  ;
 52791    69   223     9    69  1233     1     111  position
 52792    69   223    17    69  1233     1      59  (
 52793    69   223    18    69  1233     1     111  remaining
 52794    69   223    27    69  1233     1      59  (
 52795    69   223    28    69  1233     1      60  )
 52796    69   223    29    69  1233     1      60  )
 52797    69   223    30    69  1233     1     102  ;
 52798    69   224     9    69  1233     1     111  limit
 52799    69   224    14    69  1233     1      59  (
 52800    69   224    15    69  1233     1     111  capacity
 52801    69   224    23    69  1233     1      59  (
 52802    69   224    24    69  1233     1      60  )
 52803    69   224    25    69  1233     1      60  )
 52804    69   224    26    69  1233     1     102  ;
 52805    69   225     9    69  1233     0     111  clearMark
 52806    69   225    18    69  1233     0      59  (
 52807    69   225    19    69  1233     0      60  )
 52808    69   225    20    69  1233     0     102  ;
 52809    69   226     9    69  1233     0      19  return
 52810    69   226    16    69  1233     0      44  this
 52811    69   226    20    69  1233     0     102  ;
 52812    69   230     5    69  1233     0      64  }
 52813    69   230     5    69  1233     0    2866  ENDMETHOD
 52814    69   230     5    69  1234     0    2867  STARTMETHOD
 52815    69   586     5    69  1234     0      10  public
 52816    69   586    12    69  1234     0     111  ByteOrder
 52817    69   586    22    69  1234     0     111  order
 52818    69   586    27    69  1234     0      59  (
 52819    69   586    28    69  1234     0      60  )
 52820    69   586    30    69  1234     0      63  {
 52821    69   587     9    69  1234     0      19  return
 52822    69   587    16    69  1234     0     111  ByteOrder.nativeOrder
 52823    69   587    37    69  1234     0      59  (
 52824    69   587    38    69  1234     0      60  )
 52825    69   587    39    69  1234     0     102  ;
 52826    69   588     5    69  1234     0      64  }
 52827    69   588     5    69  1234     0    2868  ENDMETHOD
 52828    69   592     1    69    -1     0      64  }
 52829    69   592     1    69    -1     1    2869  ENDCLASS
 52830    69   592     1    -1    -1     1    2870  ENDFILE C:\javasrc\java\nio\HeapLongBuffer.java
 52831    70     1     1    -1    -1     1    2871  STARTFILE C:\javasrc\java\nio\HeapLongBufferR.java
 52832    70    28     1    -1    -1     0       5  package
 52833    70    28     9    -1    -1     0     111  java.nio
 52834    70    28    17    -1    -1     0     102  ;
 52835    70    42     1    70    -1     0    2872  STARTCLASS
 52836    70    42     1    70    -1     0      24  class
 52837    70    42     7    70    -1     0     111  HeapLongBufferR
 52838    70    43     5    70    -1     0      38  extends
 52839    70    43    13    70    -1     0     111  HeapLongBuffer
 52840    70    44     1    70    -1     0      63  {
 52841    70    44     1    70  1235     0    2873  STARTMETHOD
 52842    70    55     5    70  1235     0     111  HeapLongBufferR
 52843    70    55    20    70  1235     0      59  (
 52844    70    55    21    70  1235     0      36  int
 52845    70    55    25    70  1235     0     111  cap
 52846    70    55    28    70  1235     0      66  ,
 52847    70    55    30    70  1235     0      36  int
 52848    70    55    34    70  1235     0     111  lim
 52849    70    55    37    70  1235     0      60  )
 52850    70    55    39    70  1235     0      63  {
 52851    70    63     9    70  1235     0      27  super
 52852    70    63    14    70  1235     0      59  (
 52853    70    63    15    70  1235     0     111  cap
 52854    70    63    18    70  1235     0      66  ,
 52855    70    63    20    70  1235     0     111  lim
 52856    70    63    23    70  1235     0      60  )
 52857    70    63    24    70  1235     0     102  ;
 52858    70    64     9    70  1235     0     111  this.isReadOnly
 52859    70    64    25    70  1235     0      67  =
 52860    70    64    27    70  1235     0      52  true
 52861    70    64    31    70  1235     0     102  ;
 52862    70    66     5    70  1235     0      64  }
 52863    70    66     5    70  1235     0    2874  ENDMETHOD
 52864    70    66     5    70  1236     0    2875  STARTMETHOD
 52865    70    68     5    70  1236     0     111  HeapLongBufferR
 52866    70    68    20    70  1236     0      59  (
 52867    70    68    21    70  1236     0      53  long
 52868    70    68    25    70  1236     0      61  [
 52869    70    68    26    70  1236     0      62  ]
 52870    70    68    28    70  1236     0     111  buf
 52871    70    68    31    70  1236     0      66  ,
 52872    70    68    33    70  1236     0      36  int
 52873    70    68    37    70  1236     0     111  off
 52874    70    68    40    70  1236     0      66  ,
 52875    70    68    42    70  1236     0      36  int
 52876    70    68    46    70  1236     0     111  len
 52877    70    68    49    70  1236     0      60  )
 52878    70    68    51    70  1236     0      63  {
 52879    70    76     9    70  1236     0      27  super
 52880    70    76    14    70  1236     0      59  (
 52881    70    76    15    70  1236     0     111  buf
 52882    70    76    18    70  1236     0      66  ,
 52883    70    76    20    70  1236     0     111  off
 52884    70    76    23    70  1236     0      66  ,
 52885    70    76    25    70  1236     0     111  len
 52886    70    76    28    70  1236     0      60  )
 52887    70    76    29    70  1236     0     102  ;
 52888    70    77     9    70  1236     0     111  this.isReadOnly
 52889    70    77    25    70  1236     0      67  =
 52890    70    77    27    70  1236     0      52  true
 52891    70    77    31    70  1236     0     102  ;
 52892    70    79     5    70  1236     0      64  }
 52893    70    79     5    70  1236     0    2876  ENDMETHOD
 52894    70    79     5    70  1237     0    2877  STARTMETHOD
 52895    70    81     5    70  1237     0      23  protected
 52896    70    81    15    70  1237     0     111  HeapLongBufferR
 52897    70    81    30    70  1237     0      59  (
 52898    70    81    31    70  1237     0      53  long
 52899    70    81    35    70  1237     0      61  [
 52900    70    81    36    70  1237     0      62  ]
 52901    70    81    38    70  1237     0     111  buf
 52902    70    81    41    70  1237     0      66  ,
 52903    70    82    36    70  1237     0      36  int
 52904    70    82    40    70  1237     0     111  mark
 52905    70    82    44    70  1237     0      66  ,
 52906    70    82    46    70  1237     0      36  int
 52907    70    82    50    70  1237     0     111  pos
 52908    70    82    53    70  1237     0      66  ,
 52909    70    82    55    70  1237     0      36  int
 52910    70    82    59    70  1237     0     111  lim
 52911    70    82    62    70  1237     0      66  ,
 52912    70    82    64    70  1237     0      36  int
 52913    70    82    68    70  1237     0     111  cap
 52914    70    82    71    70  1237     0      66  ,
 52915    70    83    36    70  1237     0      36  int
 52916    70    83    40    70  1237     0     111  off
 52917    70    83    43    70  1237     0      60  )
 52918    70    84     5    70  1237     0      63  {
 52919    70    92     9    70  1237     0      27  super
 52920    70    92    14    70  1237     0      59  (
 52921    70    92    15    70  1237     0     111  buf
 52922    70    92    18    70  1237     0      66  ,
 52923    70    92    20    70  1237     0     111  mark
 52924    70    92    24    70  1237     0      66  ,
 52925    70    92    26    70  1237     0     111  pos
 52926    70    92    29    70  1237     0      66  ,
 52927    70    92    31    70  1237     0     111  lim
 52928    70    92    34    70  1237     0      66  ,
 52929    70    92    36    70  1237     0     111  cap
 52930    70    92    39    70  1237     0      66  ,
 52931    70    92    41    70  1237     0     111  off
 52932    70    92    44    70  1237     0      60  )
 52933    70    92    45    70  1237     0     102  ;
 52934    70    93     9    70  1237     0     111  this.isReadOnly
 52935    70    93    25    70  1237     0      67  =
 52936    70    93    27    70  1237     0      52  true
 52937    70    93    31    70  1237     0     102  ;
 52938    70    95     5    70  1237     0      64  }
 52939    70    95     5    70  1237     0    2878  ENDMETHOD
 52940    70    95     5    70  1238     0    2879  STARTMETHOD
 52941    70    97     5    70  1238     0      10  public
 52942    70    97    12    70  1238     0     111  LongBuffer
 52943    70    97    23    70  1238     0     111  slice
 52944    70    97    28    70  1238     0      59  (
 52945    70    97    29    70  1238     0      60  )
 52946    70    97    31    70  1238     0      63  {
 52947    70    98     9    70  1238     0      19  return
 52948    70    98    16    70  1238     0      15  new
 52949    70    98    20    70  1238     0     111  HeapLongBufferR
 52950    70    98    35    70  1238     0      59  (
 52951    70    98    36    70  1238     0     111  hb
 52952    70    98    38    70  1238     0      66  ,
 52953    70    99    41    70  1238     0      77  -
 52954    70    99    42    70  1238     0     112  1
 52955    70    99    43    70  1238     0      66  ,
 52956    70   100    41    70  1238     0     112  0
 52957    70   100    42    70  1238     0      66  ,
 52958    70   101    41    70  1238     1     111  this.remaining
 52959    70   101    55    70  1238     1      59  (
 52960    70   101    56    70  1238     1      60  )
 52961    70   101    57    70  1238     1      66  ,
 52962    70   102    41    70  1238     1     111  this.remaining
 52963    70   102    55    70  1238     1      59  (
 52964    70   102    56    70  1238     1      60  )
 52965    70   102    57    70  1238     1      66  ,
 52966    70   103    41    70  1238     0     111  this.position
 52967    70   103    54    70  1238     0      59  (
 52968    70   103    55    70  1238     0      60  )
 52969    70   103    57    70  1238     0      74  +
 52970    70   103    59    70  1238     0     111  offset
 52971    70   103    65    70  1238     0      60  )
 52972    70   103    66    70  1238     0     102  ;
 52973    70   104     5    70  1238     0      64  }
 52974    70   104     5    70  1238     0    2880  ENDMETHOD
 52975    70   104     5    70  1239     0    2881  STARTMETHOD
 52976    70   106     5    70  1239     0      10  public
 52977    70   106    12    70  1239     0     111  LongBuffer
 52978    70   106    23    70  1239     0     111  duplicate
 52979    70   106    32    70  1239     0      59  (
 52980    70   106    33    70  1239     0      60  )
 52981    70   106    35    70  1239     0      63  {
 52982    70   107     9    70  1239     0      19  return
 52983    70   107    16    70  1239     0      15  new
 52984    70   107    20    70  1239     0     111  HeapLongBufferR
 52985    70   107    35    70  1239     0      59  (
 52986    70   107    36    70  1239     0     111  hb
 52987    70   107    38    70  1239     0      66  ,
 52988    70   108    41    70  1239     1     111  this.markValue
 52989    70   108    55    70  1239     1      59  (
 52990    70   108    56    70  1239     1      60  )
 52991    70   108    57    70  1239     1      66  ,
 52992    70   109    41    70  1239     1     111  this.position
 52993    70   109    54    70  1239     1      59  (
 52994    70   109    55    70  1239     1      60  )
 52995    70   109    56    70  1239     1      66  ,
 52996    70   110    41    70  1239     1     111  this.limit
 52997    70   110    51    70  1239     1      59  (
 52998    70   110    52    70  1239     1      60  )
 52999    70   110    53    70  1239     1      66  ,
 53000    70   111    41    70  1239     1     111  this.capacity
 53001    70   111    54    70  1239     1      59  (
 53002    70   111    55    70  1239     1      60  )
 53003    70   111    56    70  1239     1      66  ,
 53004    70   112    41    70  1239     0     111  offset
 53005    70   112    47    70  1239     0      60  )
 53006    70   112    48    70  1239     0     102  ;
 53007    70   113     5    70  1239     0      64  }
 53008    70   113     5    70  1239     0    2882  ENDMETHOD
 53009    70   113     5    70  1240     0    2883  STARTMETHOD
 53010    70   115     5    70  1240     0      10  public
 53011    70   115    12    70  1240     0     111  LongBuffer
 53012    70   115    23    70  1240     0     111  asReadOnlyBuffer
 53013    70   115    39    70  1240     0      59  (
 53014    70   115    40    70  1240     0      60  )
 53015    70   115    42    70  1240     0      63  {
 53016    70   124     9    70  1240     0      19  return
 53017    70   124    16    70  1240     0     111  duplicate
 53018    70   124    25    70  1240     0      59  (
 53019    70   124    26    70  1240     0      60  )
 53020    70   124    27    70  1240     0     102  ;
 53021    70   126     5    70  1240     0      64  }
 53022    70   126     5    70  1240     0    2884  ENDMETHOD
 53023    70   126     5    70  1241     0    2885  STARTMETHOD
 53024    70   157     5    70  1241     0      10  public
 53025    70   157    12    70  1241     0      39  boolean
 53026    70   157    20    70  1241     0     111  isReadOnly
 53027    70   157    30    70  1241     0      59  (
 53028    70   157    31    70  1241     0      60  )
 53029    70   157    33    70  1241     0      63  {
 53030    70   158     9    70  1241     0      19  return
 53031    70   158    16    70  1241     0      52  true
 53032    70   158    20    70  1241     0     102  ;
 53033    70   159     5    70  1241     0      64  }
 53034    70   159     5    70  1241     0    2886  ENDMETHOD
 53035    70   159     5    70  1242     0    2887  STARTMETHOD
 53036    70   161     5    70  1242     0      10  public
 53037    70   161    12    70  1242     0     111  LongBuffer
 53038    70   161    23    70  1242     0     111  put
 53039    70   161    26    70  1242     0      59  (
 53040    70   161    27    70  1242     0      53  long
 53041    70   161    32    70  1242     0     111  x
 53042    70   161    33    70  1242     0      60  )
 53043    70   161    35    70  1242     0      63  {
 53044    70   166     9    70  1242     0      20  throw
 53045    70   166    15    70  1242     0      15  new
 53046    70   166    19    70  1242     0     111  ReadOnlyBufferException
 53047    70   166    42    70  1242     0      59  (
 53048    70   166    43    70  1242     0      60  )
 53049    70   166    44    70  1242     0     102  ;
 53050    70   168     5    70  1242     0      64  }
 53051    70   168     5    70  1242     0    2888  ENDMETHOD
 53052    70   168     5    70  1243     0    2889  STARTMETHOD
 53053    70   170     5    70  1243     0      10  public
 53054    70   170    12    70  1243     0     111  LongBuffer
 53055    70   170    23    70  1243     0     111  put
 53056    70   170    26    70  1243     0      59  (
 53057    70   170    27    70  1243     0      36  int
 53058    70   170    31    70  1243     0     111  i
 53059    70   170    32    70  1243     0      66  ,
 53060    70   170    34    70  1243     0      53  long
 53061    70   170    39    70  1243     0     111  x
 53062    70   170    40    70  1243     0      60  )
 53063    70   170    42    70  1243     0      63  {
 53064    70   175     9    70  1243     0      20  throw
 53065    70   175    15    70  1243     0      15  new
 53066    70   175    19    70  1243     0     111  ReadOnlyBufferException
 53067    70   175    42    70  1243     0      59  (
 53068    70   175    43    70  1243     0      60  )
 53069    70   175    44    70  1243     0     102  ;
 53070    70   177     5    70  1243     0      64  }
 53071    70   177     5    70  1243     0    2890  ENDMETHOD
 53072    70   177     5    70  1244     0    2891  STARTMETHOD
 53073    70   179     5    70  1244     0      10  public
 53074    70   179    12    70  1244     0     111  LongBuffer
 53075    70   179    23    70  1244     0     111  put
 53076    70   179    26    70  1244     0      59  (
 53077    70   179    27    70  1244     0      53  long
 53078    70   179    31    70  1244     0      61  [
 53079    70   179    32    70  1244     0      62  ]
 53080    70   179    34    70  1244     0     111  src
 53081    70   179    37    70  1244     0      66  ,
 53082    70   179    39    70  1244     0      36  int
 53083    70   179    43    70  1244     0     111  offset
 53084    70   179    49    70  1244     0      66  ,
 53085    70   179    51    70  1244     0      36  int
 53086    70   179    55    70  1244     0     111  length
 53087    70   179    61    70  1244     0      60  )
 53088    70   179    63    70  1244     0      63  {
 53089    70   188     9    70  1244     0      20  throw
 53090    70   188    15    70  1244     0      15  new
 53091    70   188    19    70  1244     0     111  ReadOnlyBufferException
 53092    70   188    42    70  1244     0      59  (
 53093    70   188    43    70  1244     0      60  )
 53094    70   188    44    70  1244     0     102  ;
 53095    70   190     5    70  1244     0      64  }
 53096    70   190     5    70  1244     0    2892  ENDMETHOD
 53097    70   190     5    70  1245     0    2893  STARTMETHOD
 53098    70   192     5    70  1245     0      10  public
 53099    70   192    12    70  1245     0     111  LongBuffer
 53100    70   192    23    70  1245     0     111  put
 53101    70   192    26    70  1245     0      59  (
 53102    70   192    27    70  1245     0     111  LongBuffer
 53103    70   192    38    70  1245     0     111  src
 53104    70   192    41    70  1245     0      60  )
 53105    70   192    43    70  1245     0      63  {
 53106    70   216     9    70  1245     0      20  throw
 53107    70   216    15    70  1245     0      15  new
 53108    70   216    19    70  1245     0     111  ReadOnlyBufferException
 53109    70   216    42    70  1245     0      59  (
 53110    70   216    43    70  1245     0      60  )
 53111    70   216    44    70  1245     0     102  ;
 53112    70   218     5    70  1245     0      64  }
 53113    70   218     5    70  1245     0    2894  ENDMETHOD
 53114    70   218     5    70  1246     0    2895  STARTMETHOD
 53115    70   220     5    70  1246     0      10  public
 53116    70   220    12    70  1246     0     111  LongBuffer
 53117    70   220    23    70  1246     0     111  compact
 53118    70   220    30    70  1246     0      59  (
 53119    70   220    31    70  1246     0      60  )
 53120    70   220    33    70  1246     0      63  {
 53121    70   228     9    70  1246     0      20  throw
 53122    70   228    15    70  1246     0      15  new
 53123    70   228    19    70  1246     0     111  ReadOnlyBufferException
 53124    70   228    42    70  1246     0      59  (
 53125    70   228    43    70  1246     0      60  )
 53126    70   228    44    70  1246     0     102  ;
 53127    70   230     5    70  1246     0      64  }
 53128    70   230     5    70  1246     0    2896  ENDMETHOD
 53129    70   230     5    70  1247     0    2897  STARTMETHOD
 53130    70   586     5    70  1247     0      10  public
 53131    70   586    12    70  1247     0     111  ByteOrder
 53132    70   586    22    70  1247     0     111  order
 53133    70   586    27    70  1247     0      59  (
 53134    70   586    28    70  1247     0      60  )
 53135    70   586    30    70  1247     0      63  {
 53136    70   587     9    70  1247     0      19  return
 53137    70   587    16    70  1247     0     111  ByteOrder.nativeOrder
 53138    70   587    37    70  1247     0      59  (
 53139    70   587    38    70  1247     0      60  )
 53140    70   587    39    70  1247     0     102  ;
 53141    70   588     5    70  1247     0      64  }
 53142    70   588     5    70  1247     0    2898  ENDMETHOD
 53143    70   592     1    70    -1     0      64  }
 53144    70   592     1    70    -1     1    2899  ENDCLASS
 53145    70   592     1    -1    -1     1    2900  ENDFILE C:\javasrc\java\nio\HeapLongBufferR.java
 53146    71     1     1    -1    -1     1    2901  STARTFILE C:\javasrc\java\nio\HeapShortBuffer.java
 53147    71    28     1    -1    -1     0       5  package
 53148    71    28     9    -1    -1     0     111  java.nio
 53149    71    28    17    -1    -1     0     102  ;
 53150    71    42     1    71    -1     0    2902  STARTCLASS
 53151    71    42     1    71    -1     0      24  class
 53152    71    42     7    71    -1     0     111  HeapShortBuffer
 53153    71    43     5    71    -1     0      38  extends
 53154    71    43    13    71    -1     0     111  ShortBuffer
 53155    71    44     1    71    -1     0      63  {
 53156    71    44     1    71  1248     0    2903  STARTMETHOD
 53157    71    55     5    71  1248     0     111  HeapShortBuffer
 53158    71    55    20    71  1248     0      59  (
 53159    71    55    21    71  1248     0      36  int
 53160    71    55    25    71  1248     0     111  cap
 53161    71    55    28    71  1248     0      66  ,
 53162    71    55    30    71  1248     0      36  int
 53163    71    55    34    71  1248     0     111  lim
 53164    71    55    37    71  1248     0      60  )
 53165    71    55    39    71  1248     0      63  {
 53166    71    57     9    71  1248     0      27  super
 53167    71    57    14    71  1248     0      59  (
 53168    71    57    15    71  1248     0      77  -
 53169    71    57    16    71  1248     0     112  1
 53170    71    57    17    71  1248     0      66  ,
 53171    71    57    19    71  1248     0     112  0
 53172    71    57    20    71  1248     0      66  ,
 53173    71    57    22    71  1248     0     111  lim
 53174    71    57    25    71  1248     0      66  ,
 53175    71    57    27    71  1248     0     111  cap
 53176    71    57    30    71  1248     0      66  ,
 53177    71    57    32    71  1248     0      15  new
 53178    71    57    36    71  1248     0      12  short
 53179    71    57    41    71  1248     0      61  [
 53180    71    57    42    71  1248     0     111  cap
 53181    71    57    45    71  1248     0      62  ]
 53182    71    57    46    71  1248     0      66  ,
 53183    71    57    48    71  1248     0     112  0
 53184    71    57    49    71  1248     0      60  )
 53185    71    57    50    71  1248     0     102  ;
 53186    71    66     5    71  1248     0      64  }
 53187    71    66     5    71  1248     0    2904  ENDMETHOD
 53188    71    66     5    71  1249     0    2905  STARTMETHOD
 53189    71    68     5    71  1249     0     111  HeapShortBuffer
 53190    71    68    20    71  1249     0      59  (
 53191    71    68    21    71  1249     0      12  short
 53192    71    68    26    71  1249     0      61  [
 53193    71    68    27    71  1249     0      62  ]
 53194    71    68    29    71  1249     0     111  buf
 53195    71    68    32    71  1249     0      66  ,
 53196    71    68    34    71  1249     0      36  int
 53197    71    68    38    71  1249     0     111  off
 53198    71    68    41    71  1249     0      66  ,
 53199    71    68    43    71  1249     0      36  int
 53200    71    68    47    71  1249     0     111  len
 53201    71    68    50    71  1249     0      60  )
 53202    71    68    52    71  1249     0      63  {
 53203    71    70     9    71  1249     0      27  super
 53204    71    70    14    71  1249     0      59  (
 53205    71    70    15    71  1249     0      77  -
 53206    71    70    16    71  1249     0     112  1
 53207    71    70    17    71  1249     0      66  ,
 53208    71    70    19    71  1249     0     111  off
 53209    71    70    22    71  1249     0      66  ,
 53210    71    70    24    71  1249     0     111  off
 53211    71    70    28    71  1249     0      74  +
 53212    71    70    30    71  1249     0     111  len
 53213    71    70    33    71  1249     0      66  ,
 53214    71    70    35    71  1249     0     111  buf.length
 53215    71    70    45    71  1249     0      66  ,
 53216    71    70    47    71  1249     0     111  buf
 53217    71    70    50    71  1249     0      66  ,
 53218    71    70    52    71  1249     0     112  0
 53219    71    70    53    71  1249     0      60  )
 53220    71    70    54    71  1249     0     102  ;
 53221    71    79     5    71  1249     0      64  }
 53222    71    79     5    71  1249     0    2906  ENDMETHOD
 53223    71    79     5    71  1250     0    2907  STARTMETHOD
 53224    71    81     5    71  1250     0      23  protected
 53225    71    81    15    71  1250     0     111  HeapShortBuffer
 53226    71    81    30    71  1250     0      59  (
 53227    71    81    31    71  1250     0      12  short
 53228    71    81    36    71  1250     0      61  [
 53229    71    81    37    71  1250     0      62  ]
 53230    71    81    39    71  1250     0     111  buf
 53231    71    81    42    71  1250     0      66  ,
 53232    71    82    36    71  1250     0      36  int
 53233    71    82    40    71  1250     0     111  mark
 53234    71    82    44    71  1250     0      66  ,
 53235    71    82    46    71  1250     0      36  int
 53236    71    82    50    71  1250     0     111  pos
 53237    71    82    53    71  1250     0      66  ,
 53238    71    82    55    71  1250     0      36  int
 53239    71    82    59    71  1250     0     111  lim
 53240    71    82    62    71  1250     0      66  ,
 53241    71    82    64    71  1250     0      36  int
 53242    71    82    68    71  1250     0     111  cap
 53243    71    82    71    71  1250     0      66  ,
 53244    71    83    36    71  1250     0      36  int
 53245    71    83    40    71  1250     0     111  off
 53246    71    83    43    71  1250     0      60  )
 53247    71    84     5    71  1250     0      63  {
 53248    71    86     9    71  1250     0      27  super
 53249    71    86    14    71  1250     0      59  (
 53250    71    86    15    71  1250     0     111  mark
 53251    71    86    19    71  1250     0      66  ,
 53252    71    86    21    71  1250     0     111  pos
 53253    71    86    24    71  1250     0      66  ,
 53254    71    86    26    71  1250     0     111  lim
 53255    71    86    29    71  1250     0      66  ,
 53256    71    86    31    71  1250     0     111  cap
 53257    71    86    34    71  1250     0      66  ,
 53258    71    86    36    71  1250     0     111  buf
 53259    71    86    39    71  1250     0      66  ,
 53260    71    86    41    71  1250     0     111  off
 53261    71    86    44    71  1250     0      60  )
 53262    71    86    45    71  1250     0     102  ;
 53263    71    95     5    71  1250     0      64  }
 53264    71    95     5    71  1250     0    2908  ENDMETHOD
 53265    71    95     5    71  1251     0    2909  STARTMETHOD
 53266    71    97     5    71  1251     0      10  public
 53267    71    97    12    71  1251     0     111  ShortBuffer
 53268    71    97    24    71  1251     0     111  slice
 53269    71    97    29    71  1251     0      59  (
 53270    71    97    30    71  1251     0      60  )
 53271    71    97    32    71  1251     0      63  {
 53272    71    98     9    71  1251     0      19  return
 53273    71    98    16    71  1251     0      15  new
 53274    71    98    20    71  1251     0     111  HeapShortBuffer
 53275    71    98    35    71  1251     0      59  (
 53276    71    98    36    71  1251     0     111  hb
 53277    71    98    38    71  1251     0      66  ,
 53278    71    99    41    71  1251     0      77  -
 53279    71    99    42    71  1251     0     112  1
 53280    71    99    43    71  1251     0      66  ,
 53281    71   100    41    71  1251     0     112  0
 53282    71   100    42    71  1251     0      66  ,
 53283    71   101    41    71  1251     1     111  this.remaining
 53284    71   101    55    71  1251     1      59  (
 53285    71   101    56    71  1251     1      60  )
 53286    71   101    57    71  1251     1      66  ,
 53287    71   102    41    71  1251     1     111  this.remaining
 53288    71   102    55    71  1251     1      59  (
 53289    71   102    56    71  1251     1      60  )
 53290    71   102    57    71  1251     1      66  ,
 53291    71   103    41    71  1251     0     111  this.position
 53292    71   103    54    71  1251     0      59  (
 53293    71   103    55    71  1251     0      60  )
 53294    71   103    57    71  1251     0      74  +
 53295    71   103    59    71  1251     1     111  offset
 53296    71   103    65    71  1251     1      60  )
 53297    71   103    66    71  1251     1     102  ;
 53298    71   104     5    71  1251     1      64  }
 53299    71   104     5    71  1251     0    2910  ENDMETHOD
 53300    71   104     5    71  1252     0    2911  STARTMETHOD
 53301    71   106     5    71  1252     0      10  public
 53302    71   106    12    71  1252     0     111  ShortBuffer
 53303    71   106    24    71  1252     0     111  duplicate
 53304    71   106    33    71  1252     0      59  (
 53305    71   106    34    71  1252     0      60  )
 53306    71   106    36    71  1252     0      63  {
 53307    71   107     9    71  1252     0      19  return
 53308    71   107    16    71  1252     0      15  new
 53309    71   107    20    71  1252     0     111  HeapShortBuffer
 53310    71   107    35    71  1252     0      59  (
 53311    71   107    36    71  1252     0     111  hb
 53312    71   107    38    71  1252     0      66  ,
 53313    71   108    41    71  1252     1     111  this.markValue
 53314    71   108    55    71  1252     1      59  (
 53315    71   108    56    71  1252     1      60  )
 53316    71   108    57    71  1252     1      66  ,
 53317    71   109    41    71  1252     1     111  this.position
 53318    71   109    54    71  1252     1      59  (
 53319    71   109    55    71  1252     1      60  )
 53320    71   109    56    71  1252     1      66  ,
 53321    71   110    41    71  1252     1     111  this.limit
 53322    71   110    51    71  1252     1      59  (
 53323    71   110    52    71  1252     1      60  )
 53324    71   110    53    71  1252     1      66  ,
 53325    71   111    41    71  1252     1     111  this.capacity
 53326    71   111    54    71  1252     1      59  (
 53327    71   111    55    71  1252     1      60  )
 53328    71   111    56    71  1252     1      66  ,
 53329    71   112    41    71  1252     1     111  offset
 53330    71   112    47    71  1252     1      60  )
 53331    71   112    48    71  1252     1     102  ;
 53332    71   113     5    71  1252     1      64  }
 53333    71   113     5    71  1252     0    2912  ENDMETHOD
 53334    71   113     5    71  1253     0    2913  STARTMETHOD
 53335    71   115     5    71  1253     0      10  public
 53336    71   115    12    71  1253     0     111  ShortBuffer
 53337    71   115    24    71  1253     0     111  asReadOnlyBuffer
 53338    71   115    40    71  1253     0      59  (
 53339    71   115    41    71  1253     0      60  )
 53340    71   115    43    71  1253     0      63  {
 53341    71   117     9    71  1253     0      19  return
 53342    71   117    16    71  1253     0      15  new
 53343    71   117    20    71  1253     0     111  HeapShortBufferR
 53344    71   117    36    71  1253     0      59  (
 53345    71   117    37    71  1253     0     111  hb
 53346    71   117    39    71  1253     0      66  ,
 53347    71   118    38    71  1253     1     111  this.markValue
 53348    71   118    52    71  1253     1      59  (
 53349    71   118    53    71  1253     1      60  )
 53350    71   118    54    71  1253     1      66  ,
 53351    71   119    38    71  1253     1     111  this.position
 53352    71   119    51    71  1253     1      59  (
 53353    71   119    52    71  1253     1      60  )
 53354    71   119    53    71  1253     1      66  ,
 53355    71   120    38    71  1253     1     111  this.limit
 53356    71   120    48    71  1253     1      59  (
 53357    71   120    49    71  1253     1      60  )
 53358    71   120    50    71  1253     1      66  ,
 53359    71   121    38    71  1253     1     111  this.capacity
 53360    71   121    51    71  1253     1      59  (
 53361    71   121    52    71  1253     1      60  )
 53362    71   121    53    71  1253     1      66  ,
 53363    71   122    38    71  1253     1     111  offset
 53364    71   122    44    71  1253     1      60  )
 53365    71   122    45    71  1253     1     102  ;
 53366    71   126     5    71  1253     1      64  }
 53367    71   126     5    71  1253     0    2914  ENDMETHOD
 53368    71   126     5    71  1254     0    2915  STARTMETHOD
 53369    71   130     5    71  1254     0      23  protected
 53370    71   130    15    71  1254     0      36  int
 53371    71   130    19    71  1254     0     111  ix
 53372    71   130    21    71  1254     0      59  (
 53373    71   130    22    71  1254     0      36  int
 53374    71   130    26    71  1254     0     111  i
 53375    71   130    27    71  1254     0      60  )
 53376    71   130    29    71  1254     0      63  {
 53377    71   131     9    71  1254     0      19  return
 53378    71   131    16    71  1254     0     111  i
 53379    71   131    18    71  1254     0      74  +
 53380    71   131    20    71  1254     0     111  offset
 53381    71   131    26    71  1254     0     102  ;
 53382    71   132     5    71  1254     0      64  }
 53383    71   132     5    71  1254     0    2916  ENDMETHOD
 53384    71   132     5    71  1255     0    2917  STARTMETHOD
 53385    71   134     5    71  1255     0      10  public
 53386    71   134    12    71  1255     0      12  short
 53387    71   134    18    71  1255     0     111  get
 53388    71   134    21    71  1255     0      59  (
 53389    71   134    22    71  1255     0      60  )
 53390    71   134    24    71  1255     0      63  {
 53391    71   135     9    71  1255     0      19  return
 53392    71   135    16    71  1255     0     111  hb
 53393    71   135    18    71  1255     0      61  [
 53394    71   135    19    71  1255     0     111  ix
 53395    71   135    21    71  1255     0      59  (
 53396    71   135    22    71  1255     0     111  nextGetIndex
 53397    71   135    34    71  1255     0      59  (
 53398    71   135    35    71  1255     0      60  )
 53399    71   135    36    71  1255     0      60  )
 53400    71   135    37    71  1255     0      62  ]
 53401    71   135    38    71  1255     0     102  ;
 53402    71   136     5    71  1255     0      64  }
 53403    71   136     5    71  1255     0    2918  ENDMETHOD
 53404    71   136     5    71  1256     0    2919  STARTMETHOD
 53405    71   138     5    71  1256     0      10  public
 53406    71   138    12    71  1256     0      12  short
 53407    71   138    18    71  1256     0     111  get
 53408    71   138    21    71  1256     0      59  (
 53409    71   138    22    71  1256     0      36  int
 53410    71   138    26    71  1256     0     111  i
 53411    71   138    27    71  1256     0      60  )
 53412    71   138    29    71  1256     0      63  {
 53413    71   139     9    71  1256     0      19  return
 53414    71   139    16    71  1256     0     111  hb
 53415    71   139    18    71  1256     0      61  [
 53416    71   139    19    71  1256     0     111  ix
 53417    71   139    21    71  1256     0      59  (
 53418    71   139    22    71  1256     0     111  checkIndex
 53419    71   139    32    71  1256     0      59  (
 53420    71   139    33    71  1256     0     111  i
 53421    71   139    34    71  1256     0      60  )
 53422    71   139    35    71  1256     0      60  )
 53423    71   139    36    71  1256     0      62  ]
 53424    71   139    37    71  1256     0     102  ;
 53425    71   140     5    71  1256     0      64  }
 53426    71   140     5    71  1256     0    2920  ENDMETHOD
 53427    71   140     5    71  1257     0    2921  STARTMETHOD
 53428    71   142     5    71  1257     0      10  public
 53429    71   142    12    71  1257     0     111  ShortBuffer
 53430    71   142    24    71  1257     0     111  get
 53431    71   142    27    71  1257     0      59  (
 53432    71   142    28    71  1257     0      12  short
 53433    71   142    33    71  1257     0      61  [
 53434    71   142    34    71  1257     0      62  ]
 53435    71   142    36    71  1257     0     111  dst
 53436    71   142    39    71  1257     0      66  ,
 53437    71   142    41    71  1257     0      36  int
 53438    71   142    45    71  1257     0     111  offset
 53439    71   142    51    71  1257     0      66  ,
 53440    71   142    53    71  1257     0      36  int
 53441    71   142    57    71  1257     0     111  length
 53442    71   142    63    71  1257     0      60  )
 53443    71   142    65    71  1257     0      63  {
 53444    71   143     9    71  1257     0     111  checkBounds
 53445    71   143    20    71  1257     0      59  (
 53446    71   143    21    71  1257     0     111  offset
 53447    71   143    27    71  1257     0      66  ,
 53448    71   143    29    71  1257     0     111  length
 53449    71   143    35    71  1257     0      66  ,
 53450    71   143    37    71  1257     0     111  dst.length
 53451    71   143    47    71  1257     0      60  )
 53452    71   143    48    71  1257     0     102  ;
 53453    71   144     9    71  1257     0      31  if
 53454    71   144    12    71  1257     0      59  (
 53455    71   144    13    71  1257     0     111  length
 53456    71   144    20    71  1257     0      89  >
 53457    71   144    22    71  1257     0     111  remaining
 53458    71   144    31    71  1257     0      59  (
 53459    71   144    32    71  1257     0      60  )
 53460    71   144    33    71  1257     0      60  )
 53461    71   145    13    71  1257     0      20  throw
 53462    71   145    19    71  1257     0      15  new
 53463    71   145    23    71  1257     0     111  BufferUnderflowException
 53464    71   145    47    71  1257     0      59  (
 53465    71   145    48    71  1257     0      60  )
 53466    71   145    49    71  1257     0     102  ;
 53467    71   146     9    71  1257     0     111  System.arraycopy
 53468    71   146    25    71  1257     0      59  (
 53469    71   146    26    71  1257     0     111  hb
 53470    71   146    28    71  1257     0      66  ,
 53471    71   146    30    71  1257     0     111  ix
 53472    71   146    32    71  1257     0      59  (
 53473    71   146    33    71  1257     0     111  position
 53474    71   146    41    71  1257     0      59  (
 53475    71   146    42    71  1257     0      60  )
 53476    71   146    43    71  1257     0      60  )
 53477    71   146    44    71  1257     0      66  ,
 53478    71   146    46    71  1257     0     111  dst
 53479    71   146    49    71  1257     0      66  ,
 53480    71   146    51    71  1257     0     111  offset
 53481    71   146    57    71  1257     0      66  ,
 53482    71   146    59    71  1257     0     111  length
 53483    71   146    65    71  1257     0      60  )
 53484    71   146    66    71  1257     0     102  ;
 53485    71   147     9    71  1257     0     111  position
 53486    71   147    17    71  1257     0      59  (
 53487    71   147    18    71  1257     0     111  position
 53488    71   147    26    71  1257     0      59  (
 53489    71   147    27    71  1257     0      60  )
 53490    71   147    29    71  1257     0      74  +
 53491    71   147    31    71  1257     0     111  length
 53492    71   147    37    71  1257     0      60  )
 53493    71   147    38    71  1257     0     102  ;
 53494    71   148     9    71  1257     0      19  return
 53495    71   148    16    71  1257     0      44  this
 53496    71   148    20    71  1257     1     102  ;
 53497    71   149     5    71  1257     1      64  }
 53498    71   149     5    71  1257     0    2922  ENDMETHOD
 53499    71   149     5    71  1258     0    2923  STARTMETHOD
 53500    71   151     5    71  1258     0      10  public
 53501    71   151    12    71  1258     0      39  boolean
 53502    71   151    20    71  1258     0     111  isDirect
 53503    71   151    28    71  1258     0      59  (
 53504    71   151    29    71  1258     0      60  )
 53505    71   151    31    71  1258     0      63  {
 53506    71   152     9    71  1258     0      19  return
 53507    71   152    16    71  1258     0      43  false
 53508    71   152    21    71  1258     1     102  ;
 53509    71   153     5    71  1258     1      64  }
 53510    71   153     5    71  1258     0    2924  ENDMETHOD
 53511    71   153     5    71  1259     0    2925  STARTMETHOD
 53512    71   157     5    71  1259     0      10  public
 53513    71   157    12    71  1259     0      39  boolean
 53514    71   157    20    71  1259     0     111  isReadOnly
 53515    71   157    30    71  1259     0      59  (
 53516    71   157    31    71  1259     0      60  )
 53517    71   157    33    71  1259     0      63  {
 53518    71   158     9    71  1259     0      19  return
 53519    71   158    16    71  1259     0      43  false
 53520    71   158    21    71  1259     1     102  ;
 53521    71   159     5    71  1259     1      64  }
 53522    71   159     5    71  1259     0    2926  ENDMETHOD
 53523    71   159     5    71  1260     0    2927  STARTMETHOD
 53524    71   161     5    71  1260     0      10  public
 53525    71   161    12    71  1260     0     111  ShortBuffer
 53526    71   161    24    71  1260     0     111  put
 53527    71   161    27    71  1260     0      59  (
 53528    71   161    28    71  1260     0      12  short
 53529    71   161    34    71  1260     0     111  x
 53530    71   161    35    71  1260     0      60  )
 53531    71   161    37    71  1260     0      63  {
 53532    71   163     9    71  1260     0     111  hb
 53533    71   163    11    71  1260     0      61  [
 53534    71   163    12    71  1260     0     111  ix
 53535    71   163    14    71  1260     0      59  (
 53536    71   163    15    71  1260     0     111  nextPutIndex
 53537    71   163    27    71  1260     0      59  (
 53538    71   163    28    71  1260     0      60  )
 53539    71   163    29    71  1260     0      60  )
 53540    71   163    30    71  1260     0      62  ]
 53541    71   163    32    71  1260     0      67  =
 53542    71   163    34    71  1260     0     111  x
 53543    71   163    35    71  1260     0     102  ;
 53544    71   164     9    71  1260     0      19  return
 53545    71   164    16    71  1260     0      44  this
 53546    71   164    20    71  1260     0     102  ;
 53547    71   168     5    71  1260     0      64  }
 53548    71   168     5    71  1260     0    2928  ENDMETHOD
 53549    71   168     5    71  1261     0    2929  STARTMETHOD
 53550    71   170     5    71  1261     0      10  public
 53551    71   170    12    71  1261     0     111  ShortBuffer
 53552    71   170    24    71  1261     0     111  put
 53553    71   170    27    71  1261     0      59  (
 53554    71   170    28    71  1261     0      36  int
 53555    71   170    32    71  1261     0     111  i
 53556    71   170    33    71  1261     0      66  ,
 53557    71   170    35    71  1261     0      12  short
 53558    71   170    41    71  1261     0     111  x
 53559    71   170    42    71  1261     0      60  )
 53560    71   170    44    71  1261     0      63  {
 53561    71   172     9    71  1261     0     111  hb
 53562    71   172    11    71  1261     0      61  [
 53563    71   172    12    71  1261     0     111  ix
 53564    71   172    14    71  1261     0      59  (
 53565    71   172    15    71  1261     0     111  checkIndex
 53566    71   172    25    71  1261     0      59  (
 53567    71   172    26    71  1261     0     111  i
 53568    71   172    27    71  1261     0      60  )
 53569    71   172    28    71  1261     0      60  )
 53570    71   172    29    71  1261     0      62  ]
 53571    71   172    31    71  1261     0      67  =
 53572    71   172    33    71  1261     0     111  x
 53573    71   172    34    71  1261     0     102  ;
 53574    71   173     9    71  1261     0      19  return
 53575    71   173    16    71  1261     0      44  this
 53576    71   173    20    71  1261     0     102  ;
 53577    71   177     5    71  1261     0      64  }
 53578    71   177     5    71  1261     0    2930  ENDMETHOD
 53579    71   177     5    71  1262     0    2931  STARTMETHOD
 53580    71   179     5    71  1262     0      10  public
 53581    71   179    12    71  1262     0     111  ShortBuffer
 53582    71   179    24    71  1262     0     111  put
 53583    71   179    27    71  1262     0      59  (
 53584    71   179    28    71  1262     0      12  short
 53585    71   179    33    71  1262     0      61  [
 53586    71   179    34    71  1262     0      62  ]
 53587    71   179    36    71  1262     0     111  src
 53588    71   179    39    71  1262     0      66  ,
 53589    71   179    41    71  1262     0      36  int
 53590    71   179    45    71  1262     0     111  offset
 53591    71   179    51    71  1262     0      66  ,
 53592    71   179    53    71  1262     0      36  int
 53593    71   179    57    71  1262     0     111  length
 53594    71   179    63    71  1262     0      60  )
 53595    71   179    65    71  1262     0      63  {
 53596    71   181     9    71  1262     0     111  checkBounds
 53597    71   181    20    71  1262     0      59  (
 53598    71   181    21    71  1262     0     111  offset
 53599    71   181    27    71  1262     0      66  ,
 53600    71   181    29    71  1262     0     111  length
 53601    71   181    35    71  1262     0      66  ,
 53602    71   181    37    71  1262     0     111  src.length
 53603    71   181    47    71  1262     0      60  )
 53604    71   181    48    71  1262     0     102  ;
 53605    71   182     9    71  1262     0      31  if
 53606    71   182    12    71  1262     0      59  (
 53607    71   182    13    71  1262     0     111  length
 53608    71   182    20    71  1262     0      89  >
 53609    71   182    22    71  1262     0     111  remaining
 53610    71   182    31    71  1262     0      59  (
 53611    71   182    32    71  1262     0      60  )
 53612    71   182    33    71  1262     0      60  )
 53613    71   183    13    71  1262     0      20  throw
 53614    71   183    19    71  1262     0      15  new
 53615    71   183    23    71  1262     0     111  BufferOverflowException
 53616    71   183    46    71  1262     0      59  (
 53617    71   183    47    71  1262     0      60  )
 53618    71   183    48    71  1262     0     102  ;
 53619    71   184     9    71  1262     0     111  System.arraycopy
 53620    71   184    25    71  1262     0      59  (
 53621    71   184    26    71  1262     0     111  src
 53622    71   184    29    71  1262     0      66  ,
 53623    71   184    31    71  1262     0     111  offset
 53624    71   184    37    71  1262     0      66  ,
 53625    71   184    39    71  1262     0     111  hb
 53626    71   184    41    71  1262     0      66  ,
 53627    71   184    43    71  1262     0     111  ix
 53628    71   184    45    71  1262     0      59  (
 53629    71   184    46    71  1262     0     111  position
 53630    71   184    54    71  1262     0      59  (
 53631    71   184    55    71  1262     0      60  )
 53632    71   184    56    71  1262     0      60  )
 53633    71   184    57    71  1262     0      66  ,
 53634    71   184    59    71  1262     0     111  length
 53635    71   184    65    71  1262     0      60  )
 53636    71   184    66    71  1262     0     102  ;
 53637    71   185     9    71  1262     0     111  position
 53638    71   185    17    71  1262     0      59  (
 53639    71   185    18    71  1262     0     111  position
 53640    71   185    26    71  1262     0      59  (
 53641    71   185    27    71  1262     0      60  )
 53642    71   185    29    71  1262     0      74  +
 53643    71   185    31    71  1262     0     111  length
 53644    71   185    37    71  1262     0      60  )
 53645    71   185    38    71  1262     0     102  ;
 53646    71   186     9    71  1262     0      19  return
 53647    71   186    16    71  1262     0      44  this
 53648    71   186    20    71  1262     0     102  ;
 53649    71   190     5    71  1262     0      64  }
 53650    71   190     5    71  1262     0    2932  ENDMETHOD
 53651    71   190     5    71  1263     0    2933  STARTMETHOD
 53652    71   192     5    71  1263     0      10  public
 53653    71   192    12    71  1263     0     111  ShortBuffer
 53654    71   192    24    71  1263     0     111  put
 53655    71   192    27    71  1263     0      59  (
 53656    71   192    28    71  1263     0     111  ShortBuffer
 53657    71   192    40    71  1263     0     111  src
 53658    71   192    43    71  1263     0      60  )
 53659    71   192    45    71  1263     0      63  {
 53660    71   194     9    71  1263     0      31  if
 53661    71   194    12    71  1263     0      59  (
 53662    71   194    13    71  1263     0     111  src
 53663    71   194    17    71  1263     0      16  instanceof
 53664    71   194    28    71  1263     0     111  HeapShortBuffer
 53665    71   194    43    71  1263     0      60  )
 53666    71   194    45    71  1263     0      63  {
 53667    71   195    13    71  1263     0      31  if
 53668    71   195    16    71  1263     0      59  (
 53669    71   195    17    71  1263     0     111  src
 53670    71   195    21    71  1263     0      68  ==
 53671    71   195    24    71  1263     0      44  this
 53672    71   195    28    71  1263     0      60  )
 53673    71   196    17    71  1263     0      20  throw
 53674    71   196    23    71  1263     0      15  new
 53675    71   196    27    71  1263     0     111  IllegalArgumentException
 53676    71   196    51    71  1263     0      59  (
 53677    71   196    52    71  1263     0      60  )
 53678    71   196    53    71  1263     0     102  ;
 53679    71   197    13    71  1263     0     111  HeapShortBuffer
 53680    71   197    29    71  1263     0     111  sb
 53681    71   197    32    71  1263     0      67  =
 53682    71   197    34    71  1263     0      59  (
 53683    71   197    35    71  1263     0     111  HeapShortBuffer
 53684    71   197    50    71  1263     0      60  )
 53685    71   197    51    71  1263     0     111  src
 53686    71   197    54    71  1263     0     102  ;
 53687    71   198    13    71  1263     0      36  int
 53688    71   198    17    71  1263     0     111  n
 53689    71   198    19    71  1263     0      67  =
 53690    71   198    21    71  1263     0     111  sb.remaining
 53691    71   198    33    71  1263     0      59  (
 53692    71   198    34    71  1263     0      60  )
 53693    71   198    35    71  1263     0     102  ;
 53694    71   199    13    71  1263     0      31  if
 53695    71   199    16    71  1263     0      59  (
 53696    71   199    17    71  1263     0     111  n
 53697    71   199    19    71  1263     0      89  >
 53698    71   199    21    71  1263     0     111  remaining
 53699    71   199    30    71  1263     0      59  (
 53700    71   199    31    71  1263     0      60  )
 53701    71   199    32    71  1263     0      60  )
 53702    71   200    17    71  1263     0      20  throw
 53703    71   200    23    71  1263     0      15  new
 53704    71   200    27    71  1263     0     111  BufferOverflowException
 53705    71   200    50    71  1263     0      59  (
 53706    71   200    51    71  1263     0      60  )
 53707    71   200    52    71  1263     0     102  ;
 53708    71   201    13    71  1263     0     111  System.arraycopy
 53709    71   201    29    71  1263     0      59  (
 53710    71   201    30    71  1263     0     111  sb.hb
 53711    71   201    35    71  1263     0      66  ,
 53712    71   201    37    71  1263     0     111  sb.ix
 53713    71   201    42    71  1263     0      59  (
 53714    71   201    43    71  1263     0     111  sb.position
 53715    71   201    54    71  1263     0      59  (
 53716    71   201    55    71  1263     0      60  )
 53717    71   201    56    71  1263     0      60  )
 53718    71   201    57    71  1263     0      66  ,
 53719    71   202    30    71  1263     0     111  hb
 53720    71   202    32    71  1263     0      66  ,
 53721    71   202    34    71  1263     0     111  ix
 53722    71   202    36    71  1263     0      59  (
 53723    71   202    37    71  1263     0     111  position
 53724    71   202    45    71  1263     0      59  (
 53725    71   202    46    71  1263     0      60  )
 53726    71   202    47    71  1263     0      60  )
 53727    71   202    48    71  1263     0      66  ,
 53728    71   202    50    71  1263     0     111  n
 53729    71   202    51    71  1263     0      60  )
 53730    71   202    52    71  1263     0     102  ;
 53731    71   203    13    71  1263     1     111  sb.position
 53732    71   203    24    71  1263     1      59  (
 53733    71   203    25    71  1263     1     111  sb.position
 53734    71   203    36    71  1263     1      59  (
 53735    71   203    37    71  1263     1      60  )
 53736    71   203    39    71  1263     1      74  +
 53737    71   203    41    71  1263     1     111  n
 53738    71   203    42    71  1263     1      60  )
 53739    71   203    43    71  1263     1     102  ;
 53740    71   204    13    71  1263     1     111  position
 53741    71   204    21    71  1263     1      59  (
 53742    71   204    22    71  1263     1     111  position
 53743    71   204    30    71  1263     1      59  (
 53744    71   204    31    71  1263     1      60  )
 53745    71   204    33    71  1263     1      74  +
 53746    71   204    35    71  1263     1     111  n
 53747    71   204    36    71  1263     1      60  )
 53748    71   204    37    71  1263     1     102  ;
 53749    71   205     9    71  1263     0      64  }
 53750    71   205    11    71  1263     0      48  else
 53751    71   205    16    71  1263     0      31  if
 53752    71   205    19    71  1263     0      59  (
 53753    71   205    20    71  1263     0     111  src.isDirect
 53754    71   205    32    71  1263     0      59  (
 53755    71   205    33    71  1263     0      60  )
 53756    71   205    34    71  1263     0      60  )
 53757    71   205    36    71  1263     0      63  {
 53758    71   206    13    71  1263     0      36  int
 53759    71   206    17    71  1263     0     111  n
 53760    71   206    19    71  1263     0      67  =
 53761    71   206    21    71  1263     0     111  src.remaining
 53762    71   206    34    71  1263     0      59  (
 53763    71   206    35    71  1263     0      60  )
 53764    71   206    36    71  1263     0     102  ;
 53765    71   207    13    71  1263     0      31  if
 53766    71   207    16    71  1263     0      59  (
 53767    71   207    17    71  1263     0     111  n
 53768    71   207    19    71  1263     0      89  >
 53769    71   207    21    71  1263     0     111  remaining
 53770    71   207    30    71  1263     0      59  (
 53771    71   207    31    71  1263     0      60  )
 53772    71   207    32    71  1263     0      60  )
 53773    71   208    17    71  1263     0      20  throw
 53774    71   208    23    71  1263     0      15  new
 53775    71   208    27    71  1263     0     111  BufferOverflowException
 53776    71   208    50    71  1263     0      59  (
 53777    71   208    51    71  1263     0      60  )
 53778    71   208    52    71  1263     0     102  ;
 53779    71   209    13    71  1263     0     111  src.get
 53780    71   209    20    71  1263     0      59  (
 53781    71   209    21    71  1263     0     111  hb
 53782    71   209    23    71  1263     0      66  ,
 53783    71   209    25    71  1263     0     111  ix
 53784    71   209    27    71  1263     0      59  (
 53785    71   209    28    71  1263     0     111  position
 53786    71   209    36    71  1263     0      59  (
 53787    71   209    37    71  1263     0      60  )
 53788    71   209    38    71  1263     0      60  )
 53789    71   209    39    71  1263     0      66  ,
 53790    71   209    41    71  1263     0     111  n
 53791    71   209    42    71  1263     0      60  )
 53792    71   209    43    71  1263     0     102  ;
 53793    71   210    13    71  1263     0     111  position
 53794    71   210    21    71  1263     0      59  (
 53795    71   210    22    71  1263     0     111  position
 53796    71   210    30    71  1263     0      59  (
 53797    71   210    31    71  1263     0      60  )
 53798    71   210    33    71  1263     0      74  +
 53799    71   210    35    71  1263     0     111  n
 53800    71   210    36    71  1263     0      60  )
 53801    71   210    37    71  1263     0     102  ;
 53802    71   211     9    71  1263     0      64  }
 53803    71   211    11    71  1263     0      48  else
 53804    71   211    16    71  1263     0      63  {
 53805    71   212    13    71  1263     0     111  super.put
 53806    71   212    22    71  1263     0      59  (
 53807    71   212    23    71  1263     0     111  src
 53808    71   212    26    71  1263     0      60  )
 53809    71   212    27    71  1263     0     102  ;
 53810    71   213     9    71  1263     0      64  }
 53811    71   214     9    71  1263     0      19  return
 53812    71   214    16    71  1263     0      44  this
 53813    71   214    20    71  1263     0     102  ;
 53814    71   218     5    71  1263     0      64  }
 53815    71   218     5    71  1263     0    2934  ENDMETHOD
 53816    71   218     5    71  1264     0    2935  STARTMETHOD
 53817    71   220     5    71  1264     0      10  public
 53818    71   220    12    71  1264     0     111  ShortBuffer
 53819    71   220    24    71  1264     0     111  compact
 53820    71   220    31    71  1264     0      59  (
 53821    71   220    32    71  1264     0      60  )
 53822    71   220    34    71  1264     0      63  {
 53823    71   222     9    71  1264     0     111  System.arraycopy
 53824    71   222    25    71  1264     0      59  (
 53825    71   222    26    71  1264     0     111  hb
 53826    71   222    28    71  1264     0      66  ,
 53827    71   222    30    71  1264     0     111  ix
 53828    71   222    32    71  1264     0      59  (
 53829    71   222    33    71  1264     0     111  position
 53830    71   222    41    71  1264     0      59  (
 53831    71   222    42    71  1264     0      60  )
 53832    71   222    43    71  1264     0      60  )
 53833    71   222    44    71  1264     0      66  ,
 53834    71   222    46    71  1264     0     111  hb
 53835    71   222    48    71  1264     0      66  ,
 53836    71   222    50    71  1264     0     111  ix
 53837    71   222    52    71  1264     0      59  (
 53838    71   222    53    71  1264     0     112  0
 53839    71   222    54    71  1264     0      60  )
 53840    71   222    55    71  1264     0      66  ,
 53841    71   222    57    71  1264     0     111  remaining
 53842    71   222    66    71  1264     0      59  (
 53843    71   222    67    71  1264     0      60  )
 53844    71   222    68    71  1264     0      60  )
 53845    71   222    69    71  1264     0     102  ;
 53846    71   223     9    71  1264     1     111  position
 53847    71   223    17    71  1264     1      59  (
 53848    71   223    18    71  1264     1     111  remaining
 53849    71   223    27    71  1264     1      59  (
 53850    71   223    28    71  1264     1      60  )
 53851    71   223    29    71  1264     1      60  )
 53852    71   223    30    71  1264     1     102  ;
 53853    71   224     9    71  1264     1     111  limit
 53854    71   224    14    71  1264     1      59  (
 53855    71   224    15    71  1264     1     111  capacity
 53856    71   224    23    71  1264     1      59  (
 53857    71   224    24    71  1264     1      60  )
 53858    71   224    25    71  1264     1      60  )
 53859    71   224    26    71  1264     1     102  ;
 53860    71   225     9    71  1264     0     111  clearMark
 53861    71   225    18    71  1264     0      59  (
 53862    71   225    19    71  1264     0      60  )
 53863    71   225    20    71  1264     0     102  ;
 53864    71   226     9    71  1264     0      19  return
 53865    71   226    16    71  1264     0      44  this
 53866    71   226    20    71  1264     0     102  ;
 53867    71   230     5    71  1264     0      64  }
 53868    71   230     5    71  1264     0    2936  ENDMETHOD
 53869    71   230     5    71  1265     0    2937  STARTMETHOD
 53870    71   586     5    71  1265     0      10  public
 53871    71   586    12    71  1265     0     111  ByteOrder
 53872    71   586    22    71  1265     0     111  order
 53873    71   586    27    71  1265     0      59  (
 53874    71   586    28    71  1265     0      60  )
 53875    71   586    30    71  1265     0      63  {
 53876    71   587     9    71  1265     0      19  return
 53877    71   587    16    71  1265     0     111  ByteOrder.nativeOrder
 53878    71   587    37    71  1265     0      59  (
 53879    71   587    38    71  1265     0      60  )
 53880    71   587    39    71  1265     0     102  ;
 53881    71   588     5    71  1265     0      64  }
 53882    71   588     5    71  1265     0    2938  ENDMETHOD
 53883    71   592     1    71    -1     0      64  }
 53884    71   592     1    71    -1     1    2939  ENDCLASS
 53885    71   592     1    -1    -1     1    2940  ENDFILE C:\javasrc\java\nio\HeapShortBuffer.java
 53886    72     1     1    -1    -1     1    2941  STARTFILE C:\javasrc\java\nio\HeapShortBufferR.java
 53887    72    28     1    -1    -1     0       5  package
 53888    72    28     9    -1    -1     0     111  java.nio
 53889    72    28    17    -1    -1     0     102  ;
 53890    72    42     1    72    -1     0    2942  STARTCLASS
 53891    72    42     1    72    -1     0      24  class
 53892    72    42     7    72    -1     0     111  HeapShortBufferR
 53893    72    43     5    72    -1     0      38  extends
 53894    72    43    13    72    -1     0     111  HeapShortBuffer
 53895    72    44     1    72    -1     0      63  {
 53896    72    44     1    72  1266     0    2943  STARTMETHOD
 53897    72    55     5    72  1266     0     111  HeapShortBufferR
 53898    72    55    21    72  1266     0      59  (
 53899    72    55    22    72  1266     0      36  int
 53900    72    55    26    72  1266     0     111  cap
 53901    72    55    29    72  1266     0      66  ,
 53902    72    55    31    72  1266     0      36  int
 53903    72    55    35    72  1266     0     111  lim
 53904    72    55    38    72  1266     0      60  )
 53905    72    55    40    72  1266     0      63  {
 53906    72    63     9    72  1266     0      27  super
 53907    72    63    14    72  1266     0      59  (
 53908    72    63    15    72  1266     0     111  cap
 53909    72    63    18    72  1266     0      66  ,
 53910    72    63    20    72  1266     0     111  lim
 53911    72    63    23    72  1266     0      60  )
 53912    72    63    24    72  1266     0     102  ;
 53913    72    64     9    72  1266     0     111  this.isReadOnly
 53914    72    64    25    72  1266     0      67  =
 53915    72    64    27    72  1266     0      52  true
 53916    72    64    31    72  1266     0     102  ;
 53917    72    66     5    72  1266     0      64  }
 53918    72    66     5    72  1266     0    2944  ENDMETHOD
 53919    72    66     5    72  1267     0    2945  STARTMETHOD
 53920    72    68     5    72  1267     0     111  HeapShortBufferR
 53921    72    68    21    72  1267     0      59  (
 53922    72    68    22    72  1267     0      12  short
 53923    72    68    27    72  1267     0      61  [
 53924    72    68    28    72  1267     0      62  ]
 53925    72    68    30    72  1267     0     111  buf
 53926    72    68    33    72  1267     0      66  ,
 53927    72    68    35    72  1267     0      36  int
 53928    72    68    39    72  1267     0     111  off
 53929    72    68    42    72  1267     0      66  ,
 53930    72    68    44    72  1267     0      36  int
 53931    72    68    48    72  1267     0     111  len
 53932    72    68    51    72  1267     0      60  )
 53933    72    68    53    72  1267     0      63  {
 53934    72    76     9    72  1267     0      27  super
 53935    72    76    14    72  1267     0      59  (
 53936    72    76    15    72  1267     0     111  buf
 53937    72    76    18    72  1267     0      66  ,
 53938    72    76    20    72  1267     0     111  off
 53939    72    76    23    72  1267     0      66  ,
 53940    72    76    25    72  1267     0     111  len
 53941    72    76    28    72  1267     0      60  )
 53942    72    76    29    72  1267     0     102  ;
 53943    72    77     9    72  1267     0     111  this.isReadOnly
 53944    72    77    25    72  1267     0      67  =
 53945    72    77    27    72  1267     0      52  true
 53946    72    77    31    72  1267     0     102  ;
 53947    72    79     5    72  1267     0      64  }
 53948    72    79     5    72  1267     0    2946  ENDMETHOD
 53949    72    79     5    72  1268     0    2947  STARTMETHOD
 53950    72    81     5    72  1268     0      23  protected
 53951    72    81    15    72  1268     0     111  HeapShortBufferR
 53952    72    81    31    72  1268     0      59  (
 53953    72    81    32    72  1268     0      12  short
 53954    72    81    37    72  1268     0      61  [
 53955    72    81    38    72  1268     0      62  ]
 53956    72    81    40    72  1268     0     111  buf
 53957    72    81    43    72  1268     0      66  ,
 53958    72    82    36    72  1268     0      36  int
 53959    72    82    40    72  1268     0     111  mark
 53960    72    82    44    72  1268     0      66  ,
 53961    72    82    46    72  1268     0      36  int
 53962    72    82    50    72  1268     0     111  pos
 53963    72    82    53    72  1268     0      66  ,
 53964    72    82    55    72  1268     0      36  int
 53965    72    82    59    72  1268     0     111  lim
 53966    72    82    62    72  1268     0      66  ,
 53967    72    82    64    72  1268     0      36  int
 53968    72    82    68    72  1268     0     111  cap
 53969    72    82    71    72  1268     0      66  ,
 53970    72    83    36    72  1268     0      36  int
 53971    72    83    40    72  1268     0     111  off
 53972    72    83    43    72  1268     0      60  )
 53973    72    84     5    72  1268     0      63  {
 53974    72    92     9    72  1268     0      27  super
 53975    72    92    14    72  1268     0      59  (
 53976    72    92    15    72  1268     0     111  buf
 53977    72    92    18    72  1268     0      66  ,
 53978    72    92    20    72  1268     0     111  mark
 53979    72    92    24    72  1268     0      66  ,
 53980    72    92    26    72  1268     0     111  pos
 53981    72    92    29    72  1268     0      66  ,
 53982    72    92    31    72  1268     0     111  lim
 53983    72    92    34    72  1268     0      66  ,
 53984    72    92    36    72  1268     0     111  cap
 53985    72    92    39    72  1268     0      66  ,
 53986    72    92    41    72  1268     0     111  off
 53987    72    92    44    72  1268     0      60  )
 53988    72    92    45    72  1268     0     102  ;
 53989    72    93     9    72  1268     0     111  this.isReadOnly
 53990    72    93    25    72  1268     0      67  =
 53991    72    93    27    72  1268     0      52  true
 53992    72    93    31    72  1268     0     102  ;
 53993    72    95     5    72  1268     0      64  }
 53994    72    95     5    72  1268     0    2948  ENDMETHOD
 53995    72    95     5    72  1269     0    2949  STARTMETHOD
 53996    72    97     5    72  1269     0      10  public
 53997    72    97    12    72  1269     0     111  ShortBuffer
 53998    72    97    24    72  1269     0     111  slice
 53999    72    97    29    72  1269     0      59  (
 54000    72    97    30    72  1269     0      60  )
 54001    72    97    32    72  1269     0      63  {
 54002    72    98     9    72  1269     0      19  return
 54003    72    98    16    72  1269     0      15  new
 54004    72    98    20    72  1269     0     111  HeapShortBufferR
 54005    72    98    36    72  1269     0      59  (
 54006    72    98    37    72  1269     0     111  hb
 54007    72    98    39    72  1269     0      66  ,
 54008    72    99    41    72  1269     0      77  -
 54009    72    99    42    72  1269     0     112  1
 54010    72    99    43    72  1269     0      66  ,
 54011    72   100    41    72  1269     0     112  0
 54012    72   100    42    72  1269     0      66  ,
 54013    72   101    41    72  1269     1     111  this.remaining
 54014    72   101    55    72  1269     1      59  (
 54015    72   101    56    72  1269     1      60  )
 54016    72   101    57    72  1269     1      66  ,
 54017    72   102    41    72  1269     1     111  this.remaining
 54018    72   102    55    72  1269     1      59  (
 54019    72   102    56    72  1269     1      60  )
 54020    72   102    57    72  1269     1      66  ,
 54021    72   103    41    72  1269     0     111  this.position
 54022    72   103    54    72  1269     0      59  (
 54023    72   103    55    72  1269     0      60  )
 54024    72   103    57    72  1269     0      74  +
 54025    72   103    59    72  1269     0     111  offset
 54026    72   103    65    72  1269     0      60  )
 54027    72   103    66    72  1269     0     102  ;
 54028    72   104     5    72  1269     0      64  }
 54029    72   104     5    72  1269     0    2950  ENDMETHOD
 54030    72   104     5    72  1270     0    2951  STARTMETHOD
 54031    72   106     5    72  1270     0      10  public
 54032    72   106    12    72  1270     0     111  ShortBuffer
 54033    72   106    24    72  1270     0     111  duplicate
 54034    72   106    33    72  1270     0      59  (
 54035    72   106    34    72  1270     0      60  )
 54036    72   106    36    72  1270     0      63  {
 54037    72   107     9    72  1270     0      19  return
 54038    72   107    16    72  1270     0      15  new
 54039    72   107    20    72  1270     0     111  HeapShortBufferR
 54040    72   107    36    72  1270     0      59  (
 54041    72   107    37    72  1270     0     111  hb
 54042    72   107    39    72  1270     0      66  ,
 54043    72   108    41    72  1270     1     111  this.markValue
 54044    72   108    55    72  1270     1      59  (
 54045    72   108    56    72  1270     1      60  )
 54046    72   108    57    72  1270     1      66  ,
 54047    72   109    41    72  1270     1     111  this.position
 54048    72   109    54    72  1270     1      59  (
 54049    72   109    55    72  1270     1      60  )
 54050    72   109    56    72  1270     1      66  ,
 54051    72   110    41    72  1270     1     111  this.limit
 54052    72   110    51    72  1270     1      59  (
 54053    72   110    52    72  1270     1      60  )
 54054    72   110    53    72  1270     1      66  ,
 54055    72   111    41    72  1270     1     111  this.capacity
 54056    72   111    54    72  1270     1      59  (
 54057    72   111    55    72  1270     1      60  )
 54058    72   111    56    72  1270     1      66  ,
 54059    72   112    41    72  1270     0     111  offset
 54060    72   112    47    72  1270     0      60  )
 54061    72   112    48    72  1270     0     102  ;
 54062    72   113     5    72  1270     0      64  }
 54063    72   113     5    72  1270     0    2952  ENDMETHOD
 54064    72   113     5    72  1271     0    2953  STARTMETHOD
 54065    72   115     5    72  1271     0      10  public
 54066    72   115    12    72  1271     0     111  ShortBuffer
 54067    72   115    24    72  1271     0     111  asReadOnlyBuffer
 54068    72   115    40    72  1271     0      59  (
 54069    72   115    41    72  1271     0      60  )
 54070    72   115    43    72  1271     0      63  {
 54071    72   124     9    72  1271     0      19  return
 54072    72   124    16    72  1271     0     111  duplicate
 54073    72   124    25    72  1271     0      59  (
 54074    72   124    26    72  1271     0      60  )
 54075    72   124    27    72  1271     0     102  ;
 54076    72   126     5    72  1271     0      64  }
 54077    72   126     5    72  1271     0    2954  ENDMETHOD
 54078    72   126     5    72  1272     0    2955  STARTMETHOD
 54079    72   157     5    72  1272     0      10  public
 54080    72   157    12    72  1272     0      39  boolean
 54081    72   157    20    72  1272     0     111  isReadOnly
 54082    72   157    30    72  1272     0      59  (
 54083    72   157    31    72  1272     0      60  )
 54084    72   157    33    72  1272     0      63  {
 54085    72   158     9    72  1272     0      19  return
 54086    72   158    16    72  1272     0      52  true
 54087    72   158    20    72  1272     0     102  ;
 54088    72   159     5    72  1272     0      64  }
 54089    72   159     5    72  1272     0    2956  ENDMETHOD
 54090    72   159     5    72  1273     0    2957  STARTMETHOD
 54091    72   161     5    72  1273     0      10  public
 54092    72   161    12    72  1273     0     111  ShortBuffer
 54093    72   161    24    72  1273     0     111  put
 54094    72   161    27    72  1273     0      59  (
 54095    72   161    28    72  1273     0      12  short
 54096    72   161    34    72  1273     0     111  x
 54097    72   161    35    72  1273     0      60  )
 54098    72   161    37    72  1273     0      63  {
 54099    72   166     9    72  1273     0      20  throw
 54100    72   166    15    72  1273     0      15  new
 54101    72   166    19    72  1273     0     111  ReadOnlyBufferException
 54102    72   166    42    72  1273     0      59  (
 54103    72   166    43    72  1273     0      60  )
 54104    72   166    44    72  1273     0     102  ;
 54105    72   168     5    72  1273     0      64  }
 54106    72   168     5    72  1273     0    2958  ENDMETHOD
 54107    72   168     5    72  1274     0    2959  STARTMETHOD
 54108    72   170     5    72  1274     0      10  public
 54109    72   170    12    72  1274     0     111  ShortBuffer
 54110    72   170    24    72  1274     0     111  put
 54111    72   170    27    72  1274     0      59  (
 54112    72   170    28    72  1274     0      36  int
 54113    72   170    32    72  1274     0     111  i
 54114    72   170    33    72  1274     0      66  ,
 54115    72   170    35    72  1274     0      12  short
 54116    72   170    41    72  1274     0     111  x
 54117    72   170    42    72  1274     0      60  )
 54118    72   170    44    72  1274     0      63  {
 54119    72   175     9    72  1274     0      20  throw
 54120    72   175    15    72  1274     0      15  new
 54121    72   175    19    72  1274     0     111  ReadOnlyBufferException
 54122    72   175    42    72  1274     0      59  (
 54123    72   175    43    72  1274     0      60  )
 54124    72   175    44    72  1274     0     102  ;
 54125    72   177     5    72  1274     0      64  }
 54126    72   177     5    72  1274     0    2960  ENDMETHOD
 54127    72   177     5    72  1275     0    2961  STARTMETHOD
 54128    72   179     5    72  1275     0      10  public
 54129    72   179    12    72  1275     0     111  ShortBuffer
 54130    72   179    24    72  1275     0     111  put
 54131    72   179    27    72  1275     0      59  (
 54132    72   179    28    72  1275     0      12  short
 54133    72   179    33    72  1275     0      61  [
 54134    72   179    34    72  1275     0      62  ]
 54135    72   179    36    72  1275     0     111  src
 54136    72   179    39    72  1275     0      66  ,
 54137    72   179    41    72  1275     0      36  int
 54138    72   179    45    72  1275     0     111  offset
 54139    72   179    51    72  1275     0      66  ,
 54140    72   179    53    72  1275     0      36  int
 54141    72   179    57    72  1275     0     111  length
 54142    72   179    63    72  1275     0      60  )
 54143    72   179    65    72  1275     0      63  {
 54144    72   188     9    72  1275     0      20  throw
 54145    72   188    15    72  1275     0      15  new
 54146    72   188    19    72  1275     0     111  ReadOnlyBufferException
 54147    72   188    42    72  1275     0      59  (
 54148    72   188    43    72  1275     0      60  )
 54149    72   188    44    72  1275     0     102  ;
 54150    72   190     5    72  1275     0      64  }
 54151    72   190     5    72  1275     0    2962  ENDMETHOD
 54152    72   190     5    72  1276     0    2963  STARTMETHOD
 54153    72   192     5    72  1276     0      10  public
 54154    72   192    12    72  1276     0     111  ShortBuffer
 54155    72   192    24    72  1276     0     111  put
 54156    72   192    27    72  1276     0      59  (
 54157    72   192    28    72  1276     0     111  ShortBuffer
 54158    72   192    40    72  1276     0     111  src
 54159    72   192    43    72  1276     0      60  )
 54160    72   192    45    72  1276     0      63  {
 54161    72   216     9    72  1276     0      20  throw
 54162    72   216    15    72  1276     0      15  new
 54163    72   216    19    72  1276     0     111  ReadOnlyBufferException
 54164    72   216    42    72  1276     0      59  (
 54165    72   216    43    72  1276     0      60  )
 54166    72   216    44    72  1276     0     102  ;
 54167    72   218     5    72  1276     0      64  }
 54168    72   218     5    72  1276     0    2964  ENDMETHOD
 54169    72   218     5    72  1277     0    2965  STARTMETHOD
 54170    72   220     5    72  1277     0      10  public
 54171    72   220    12    72  1277     0     111  ShortBuffer
 54172    72   220    24    72  1277     0     111  compact
 54173    72   220    31    72  1277     0      59  (
 54174    72   220    32    72  1277     0      60  )
 54175    72   220    34    72  1277     0      63  {
 54176    72   228     9    72  1277     0      20  throw
 54177    72   228    15    72  1277     0      15  new
 54178    72   228    19    72  1277     0     111  ReadOnlyBufferException
 54179    72   228    42    72  1277     0      59  (
 54180    72   228    43    72  1277     0      60  )
 54181    72   228    44    72  1277     0     102  ;
 54182    72   230     5    72  1277     0      64  }
 54183    72   230     5    72  1277     0    2966  ENDMETHOD
 54184    72   230     5    72  1278     0    2967  STARTMETHOD
 54185    72   586     5    72  1278     0      10  public
 54186    72   586    12    72  1278     0     111  ByteOrder
 54187    72   586    22    72  1278     0     111  order
 54188    72   586    27    72  1278     0      59  (
 54189    72   586    28    72  1278     0      60  )
 54190    72   586    30    72  1278     0      63  {
 54191    72   587     9    72  1278     0      19  return
 54192    72   587    16    72  1278     0     111  ByteOrder.nativeOrder
 54193    72   587    37    72  1278     0      59  (
 54194    72   587    38    72  1278     0      60  )
 54195    72   587    39    72  1278     0     102  ;
 54196    72   588     5    72  1278     0      64  }
 54197    72   588     5    72  1278     0    2968  ENDMETHOD
 54198    72   592     1    72    -1     0      64  }
 54199    72   592     1    72    -1     1    2969  ENDCLASS
 54200    72   592     1    -1    -1     1    2970  ENDFILE C:\javasrc\java\nio\HeapShortBufferR.java
 54201    73     1     1    -1    -1     1    2971  STARTFILE C:\javasrc\java\nio\IntBuffer.java
 54202    73    28     1    -1    -1     0       5  package
 54203    73    28     9    -1    -1     0     111  java.nio
 54204    73    28    17    -1    -1     0     102  ;
 54205    73   257     1    -1    -1     0      10  public
 54206    73   257     8    -1    -1     0       7  abstract
 54207    73   257    17    73    -1     0    2972  STARTCLASS
 54208    73   257    17    73    -1     0      24  class
 54209    73   257    23    73    -1     0     111  IntBuffer
 54210    73   258     5    73    -1     0      38  extends
 54211    73   258    13    73    -1     0     111  Buffer
 54212    73   259     5    73    -1     0      17  implements
 54213    73   259    16    73    -1     0     111  Comparable
 54214    73   259    26    73    -1     0      93  <
 54215    73   259    27    73    -1     0     111  IntBuffer
 54216    73   259    36    73    -1     0      89  >
 54217    73   260     1    73    -1     0      63  {
 54218    73   266     5    73    -1     0       6  final
 54219    73   266    11    73    -1     0      36  int
 54220    73   266    14    73    -1     0      61  [
 54221    73   266    15    73    -1     0      62  ]
 54222    73   266    17    73    -1     0     111  hb
 54223    73   266    19    73    -1     0     102  ;
 54224    73   267     5    73    -1     0       6  final
 54225    73   267    11    73    -1     0      36  int
 54226    73   267    15    73    -1     0     111  offset
 54227    73   267    21    73    -1     0     102  ;
 54228    73   268     5    73    -1     0      39  boolean
 54229    73   268    13    73    -1     0     111  isReadOnly
 54230    73   268    23    73    -1     0     102  ;
 54231    73   268    23    73  1279     0    2973  STARTMETHOD
 54232    73   273     5    73  1279     0     111  IntBuffer
 54233    73   273    14    73  1279     0      59  (
 54234    73   273    15    73  1279     0      36  int
 54235    73   273    19    73  1279     0     111  mark
 54236    73   273    23    73  1279     0      66  ,
 54237    73   273    25    73  1279     0      36  int
 54238    73   273    29    73  1279     0     111  pos
 54239    73   273    32    73  1279     0      66  ,
 54240    73   273    34    73  1279     0      36  int
 54241    73   273    38    73  1279     0     111  lim
 54242    73   273    41    73  1279     0      66  ,
 54243    73   273    43    73  1279     0      36  int
 54244    73   273    47    73  1279     0     111  cap
 54245    73   273    50    73  1279     0      66  ,
 54246    73   274    18    73  1279     0      36  int
 54247    73   274    21    73  1279     0      61  [
 54248    73   274    22    73  1279     0      62  ]
 54249    73   274    24    73  1279     0     111  hb
 54250    73   274    26    73  1279     0      66  ,
 54251    73   274    28    73  1279     0      36  int
 54252    73   274    32    73  1279     0     111  offset
 54253    73   274    38    73  1279     0      60  )
 54254    73   275     5    73  1279     0      63  {
 54255    73   276     9    73  1279     0      27  super
 54256    73   276    14    73  1279     0      59  (
 54257    73   276    15    73  1279     0     111  mark
 54258    73   276    19    73  1279     0      66  ,
 54259    73   276    21    73  1279     0     111  pos
 54260    73   276    24    73  1279     0      66  ,
 54261    73   276    26    73  1279     0     111  lim
 54262    73   276    29    73  1279     0      66  ,
 54263    73   276    31    73  1279     0     111  cap
 54264    73   276    34    73  1279     0      60  )
 54265    73   276    35    73  1279     0     102  ;
 54266    73   277     9    73  1279     1     111  this.hb
 54267    73   277    17    73  1279     1      67  =
 54268    73   277    19    73  1279     1     111  hb
 54269    73   277    21    73  1279     1     102  ;
 54270    73   278     9    73  1279     1     111  this.offset
 54271    73   278    21    73  1279     1      67  =
 54272    73   278    23    73  1279     1     111  offset
 54273    73   278    29    73  1279     1     102  ;
 54274    73   279     5    73  1279     1      64  }
 54275    73   279     5    73  1279     0    2974  ENDMETHOD
 54276    73   279     5    73  1280     0    2975  STARTMETHOD
 54277    73   283     5    73  1280     0     111  IntBuffer
 54278    73   283    14    73  1280     0      59  (
 54279    73   283    15    73  1280     0      36  int
 54280    73   283    19    73  1280     0     111  mark
 54281    73   283    23    73  1280     0      66  ,
 54282    73   283    25    73  1280     0      36  int
 54283    73   283    29    73  1280     0     111  pos
 54284    73   283    32    73  1280     0      66  ,
 54285    73   283    34    73  1280     0      36  int
 54286    73   283    38    73  1280     0     111  lim
 54287    73   283    41    73  1280     0      66  ,
 54288    73   283    43    73  1280     0      36  int
 54289    73   283    47    73  1280     0     111  cap
 54290    73   283    50    73  1280     0      60  )
 54291    73   283    52    73  1280     0      63  {
 54292    73   284     9    73  1280     0      44  this
 54293    73   284    13    73  1280     0      59  (
 54294    73   284    14    73  1280     0     111  mark
 54295    73   284    18    73  1280     0      66  ,
 54296    73   284    20    73  1280     0     111  pos
 54297    73   284    23    73  1280     0      66  ,
 54298    73   284    25    73  1280     0     111  lim
 54299    73   284    28    73  1280     0      66  ,
 54300    73   284    30    73  1280     0     111  cap
 54301    73   284    33    73  1280     0      66  ,
 54302    73   284    35    73  1280     0      21  null
 54303    73   284    39    73  1280     0      66  ,
 54304    73   284    41    73  1280     0     112  0
 54305    73   284    42    73  1280     0      60  )
 54306    73   284    43    73  1280     1     102  ;
 54307    73   285     5    73  1280     1      64  }
 54308    73   285     5    73  1280     0    2976  ENDMETHOD
 54309    73   285     5    73  1281     0    2977  STARTMETHOD
 54310    73   326     5    73  1281     0      10  public
 54311    73   326    12    73  1281     0      45  static
 54312    73   326    19    73  1281     0     111  IntBuffer
 54313    73   326    29    73  1281     0     111  allocate
 54314    73   326    37    73  1281     0      59  (
 54315    73   326    38    73  1281     0      36  int
 54316    73   326    42    73  1281     0     111  capacity
 54317    73   326    50    73  1281     0      60  )
 54318    73   326    52    73  1281     0      63  {
 54319    73   327     9    73  1281     0      31  if
 54320    73   327    12    73  1281     0      59  (
 54321    73   327    13    73  1281     0     111  capacity
 54322    73   327    22    73  1281     0      93  <
 54323    73   327    24    73  1281     0     112  0
 54324    73   327    25    73  1281     0      60  )
 54325    73   328    13    73  1281     0      20  throw
 54326    73   328    19    73  1281     0      15  new
 54327    73   328    23    73  1281     0     111  IllegalArgumentException
 54328    73   328    47    73  1281     0      59  (
 54329    73   328    48    73  1281     0      60  )
 54330    73   328    49    73  1281     0     102  ;
 54331    73   329     9    73  1281     0      19  return
 54332    73   329    16    73  1281     0      15  new
 54333    73   329    20    73  1281     0     111  HeapIntBuffer
 54334    73   329    33    73  1281     0      59  (
 54335    73   329    34    73  1281     0     111  capacity
 54336    73   329    42    73  1281     0      66  ,
 54337    73   329    44    73  1281     0     111  capacity
 54338    73   329    52    73  1281     0      60  )
 54339    73   329    53    73  1281     1     102  ;
 54340    73   330     5    73  1281     1      64  }
 54341    73   330     5    73  1281     0    2978  ENDMETHOD
 54342    73   330     5    73  1282     0    2979  STARTMETHOD
 54343    73   363     5    73  1282     0      10  public
 54344    73   363    12    73  1282     0      45  static
 54345    73   363    19    73  1282     0     111  IntBuffer
 54346    73   363    29    73  1282     0     111  wrap
 54347    73   363    33    73  1282     0      59  (
 54348    73   363    34    73  1282     0      36  int
 54349    73   363    37    73  1282     0      61  [
 54350    73   363    38    73  1282     0      62  ]
 54351    73   363    40    73  1282     0     111  array
 54352    73   363    45    73  1282     0      66  ,
 54353    73   364    37    73  1282     0      36  int
 54354    73   364    41    73  1282     0     111  offset
 54355    73   364    47    73  1282     0      66  ,
 54356    73   364    49    73  1282     0      36  int
 54357    73   364    53    73  1282     0     111  length
 54358    73   364    59    73  1282     0      60  )
 54359    73   365     5    73  1282     0      63  {
 54360    73   366     9    73  1282     0      35  try
 54361    73   366    13    73  1282     0      63  {
 54362    73   367    13    73  1282     0      19  return
 54363    73   367    20    73  1282     0      15  new
 54364    73   367    24    73  1282     0     111  HeapIntBuffer
 54365    73   367    37    73  1282     0      59  (
 54366    73   367    38    73  1282     0     111  array
 54367    73   367    43    73  1282     0      66  ,
 54368    73   367    45    73  1282     0     111  offset
 54369    73   367    51    73  1282     0      66  ,
 54370    73   367    53    73  1282     0     111  length
 54371    73   367    59    73  1282     0      60  )
 54372    73   367    60    73  1282     0     102  ;
 54373    73   368     9    73  1282     0      64  }
 54374    73   368    11    73  1282     0      34  catch
 54375    73   368    17    73  1282     0      59  (
 54376    73   368    18    73  1282     0     111  IllegalArgumentException
 54377    73   368    43    73  1282     0     111  x
 54378    73   368    44    73  1282     0      60  )
 54379    73   368    46    73  1282     0      63  {
 54380    73   369    13    73  1282     0      20  throw
 54381    73   369    19    73  1282     0      15  new
 54382    73   369    23    73  1282     0     111  IndexOutOfBoundsException
 54383    73   369    48    73  1282     0      59  (
 54384    73   369    49    73  1282     0      60  )
 54385    73   369    50    73  1282     0     102  ;
 54386    73   370     9    73  1282     0      64  }
 54387    73   371     5    73  1282     0      64  }
 54388    73   371     5    73  1282     0    2980  ENDMETHOD
 54389    73   371     5    73  1283     0    2981  STARTMETHOD
 54390    73   389     5    73  1283     0      10  public
 54391    73   389    12    73  1283     0      45  static
 54392    73   389    19    73  1283     0     111  IntBuffer
 54393    73   389    29    73  1283     0     111  wrap
 54394    73   389    33    73  1283     0      59  (
 54395    73   389    34    73  1283     0      36  int
 54396    73   389    37    73  1283     0      61  [
 54397    73   389    38    73  1283     0      62  ]
 54398    73   389    40    73  1283     0     111  array
 54399    73   389    45    73  1283     0      60  )
 54400    73   389    47    73  1283     0      63  {
 54401    73   390     9    73  1283     0      19  return
 54402    73   390    16    73  1283     0     111  wrap
 54403    73   390    20    73  1283     0      59  (
 54404    73   390    21    73  1283     0     111  array
 54405    73   390    26    73  1283     0      66  ,
 54406    73   390    28    73  1283     0     112  0
 54407    73   390    29    73  1283     0      66  ,
 54408    73   390    31    73  1283     0     111  array.length
 54409    73   390    43    73  1283     0      60  )
 54410    73   390    44    73  1283     0     102  ;
 54411    73   391     5    73  1283     0      64  }
 54412    73   391     5    73  1283     0    2982  ENDMETHOD
 54413    73   503     5    73    -1     1      10  public
 54414    73   503    12    73    -1     1       7  abstract
 54415    73   503    21    73    -1     1     111  IntBuffer
 54416    73   503    31    73    -1     1     111  slice
 54417    73   503    36    73    -1     1      59  (
 54418    73   503    37    73    -1     1      60  )
 54419    73   503    38    73    -1     1     102  ;
 54420    73   520     5    73    -1     1      10  public
 54421    73   520    12    73    -1     1       7  abstract
 54422    73   520    21    73    -1     1     111  IntBuffer
 54423    73   520    31    73    -1     1     111  duplicate
 54424    73   520    40    73    -1     1      59  (
 54425    73   520    41    73    -1     1      60  )
 54426    73   520    42    73    -1     1     102  ;
 54427    73   540     5    73    -1     1      10  public
 54428    73   540    12    73    -1     1       7  abstract
 54429    73   540    21    73    -1     1     111  IntBuffer
 54430    73   540    31    73    -1     1     111  asReadOnlyBuffer
 54431    73   540    47    73    -1     1      59  (
 54432    73   540    48    73    -1     1      60  )
 54433    73   540    49    73    -1     1     102  ;
 54434    73   554     5    73    -1     0      10  public
 54435    73   554    12    73    -1     0       7  abstract
 54436    73   554    21    73    -1     0      36  int
 54437    73   554    25    73    -1     0     111  get
 54438    73   554    28    73    -1     0      59  (
 54439    73   554    29    73    -1     0      60  )
 54440    73   554    30    73    -1     0     102  ;
 54441    73   573     5    73    -1     0      10  public
 54442    73   573    12    73    -1     0       7  abstract
 54443    73   573    21    73    -1     0     111  IntBuffer
 54444    73   573    31    73    -1     0     111  put
 54445    73   573    34    73    -1     0      59  (
 54446    73   573    35    73    -1     0      36  int
 54447    73   573    39    73    -1     0     111  i
 54448    73   573    40    73    -1     0      60  )
 54449    73   573    41    73    -1     0     102  ;
 54450    73   588     5    73    -1     0      10  public
 54451    73   588    12    73    -1     0       7  abstract
 54452    73   588    21    73    -1     0      36  int
 54453    73   588    25    73    -1     0     111  get
 54454    73   588    28    73    -1     0      59  (
 54455    73   588    29    73    -1     0      36  int
 54456    73   588    33    73    -1     0     111  index
 54457    73   588    38    73    -1     0      60  )
 54458    73   588    39    73    -1     0     102  ;
 54459    73   611     5    73    -1     0      10  public
 54460    73   611    12    73    -1     0       7  abstract
 54461    73   611    21    73    -1     0     111  IntBuffer
 54462    73   611    31    73    -1     0     111  put
 54463    73   611    34    73    -1     0      59  (
 54464    73   611    35    73    -1     0      36  int
 54465    73   611    39    73    -1     0     111  index
 54466    73   611    44    73    -1     0      66  ,
 54467    73   611    46    73    -1     0      36  int
 54468    73   611    50    73    -1     0     111  i
 54469    73   611    51    73    -1     0      60  )
 54470    73   611    52    73    -1     0     102  ;
 54471    73   611    52    73  1284     0    2983  STARTMETHOD
 54472    73   665     5    73  1284     0      10  public
 54473    73   665    12    73  1284     0     111  IntBuffer
 54474    73   665    22    73  1284     0     111  get
 54475    73   665    25    73  1284     0      59  (
 54476    73   665    26    73  1284     0      36  int
 54477    73   665    29    73  1284     0      61  [
 54478    73   665    30    73  1284     0      62  ]
 54479    73   665    32    73  1284     0     111  dst
 54480    73   665    35    73  1284     0      66  ,
 54481    73   665    37    73  1284     0      36  int
 54482    73   665    41    73  1284     0     111  offset
 54483    73   665    47    73  1284     0      66  ,
 54484    73   665    49    73  1284     0      36  int
 54485    73   665    53    73  1284     0     111  length
 54486    73   665    59    73  1284     0      60  )
 54487    73   665    61    73  1284     0      63  {
 54488    73   666     9    73  1284     0     111  checkBounds
 54489    73   666    20    73  1284     0      59  (
 54490    73   666    21    73  1284     0     111  offset
 54491    73   666    27    73  1284     0      66  ,
 54492    73   666    29    73  1284     0     111  length
 54493    73   666    35    73  1284     0      66  ,
 54494    73   666    37    73  1284     0     111  dst.length
 54495    73   666    47    73  1284     0      60  )
 54496    73   666    48    73  1284     0     102  ;
 54497    73   667     9    73  1284     0      31  if
 54498    73   667    12    73  1284     0      59  (
 54499    73   667    13    73  1284     0     111  length
 54500    73   667    20    73  1284     0      89  >
 54501    73   667    22    73  1284     0     111  remaining
 54502    73   667    31    73  1284     0      59  (
 54503    73   667    32    73  1284     0      60  )
 54504    73   667    33    73  1284     0      60  )
 54505    73   668    13    73  1284     0      20  throw
 54506    73   668    19    73  1284     0      15  new
 54507    73   668    23    73  1284     0     111  BufferUnderflowException
 54508    73   668    47    73  1284     0      59  (
 54509    73   668    48    73  1284     0      60  )
 54510    73   668    49    73  1284     0     102  ;
 54511    73   669     9    73  1284     0      36  int
 54512    73   669    13    73  1284     0     111  end
 54513    73   669    17    73  1284     0      67  =
 54514    73   669    19    73  1284     0     111  offset
 54515    73   669    26    73  1284     0      74  +
 54516    73   669    28    73  1284     0     111  length
 54517    73   669    34    73  1284     0     102  ;
 54518    73   670     9    73  1284     0      37  for
 54519    73   670    13    73  1284     0      59  (
 54520    73   670    14    73  1284     0      36  int
 54521    73   670    18    73  1284     0     111  i
 54522    73   670    20    73  1284     0      67  =
 54523    73   670    22    73  1284     0     111  offset
 54524    73   670    28    73  1284     0     102  ;
 54525    73   670    30    73  1284     0     111  i
 54526    73   670    32    73  1284     0      93  <
 54527    73   670    34    73  1284     0     111  end
 54528    73   670    37    73  1284     0     102  ;
 54529    73   670    39    73  1284     0     111  i
 54530    73   670    40    73  1284     0      76  ++
 54531    73   670    42    73  1284     0      60  )
 54532    73   671    13    73  1284     0     111  dst
 54533    73   671    16    73  1284     0      61  [
 54534    73   671    17    73  1284     0     111  i
 54535    73   671    18    73  1284     0      62  ]
 54536    73   671    20    73  1284     0      67  =
 54537    73   671    22    73  1284     0     111  get
 54538    73   671    25    73  1284     0      59  (
 54539    73   671    26    73  1284     0      60  )
 54540    73   671    27    73  1284     0     102  ;
 54541    73   672     9    73  1284     0      19  return
 54542    73   672    16    73  1284     0      44  this
 54543    73   672    20    73  1284     0     102  ;
 54544    73   673     5    73  1284     0      64  }
 54545    73   673     5    73  1284     0    2984  ENDMETHOD
 54546    73   673     5    73  1285     0    2985  STARTMETHOD
 54547    73   691     5    73  1285     0      10  public
 54548    73   691    12    73  1285     0     111  IntBuffer
 54549    73   691    22    73  1285     0     111  get
 54550    73   691    25    73  1285     0      59  (
 54551    73   691    26    73  1285     0      36  int
 54552    73   691    29    73  1285     0      61  [
 54553    73   691    30    73  1285     0      62  ]
 54554    73   691    32    73  1285     0     111  dst
 54555    73   691    35    73  1285     0      60  )
 54556    73   691    37    73  1285     0      63  {
 54557    73   692     9    73  1285     0      19  return
 54558    73   692    16    73  1285     0     111  get
 54559    73   692    19    73  1285     0      59  (
 54560    73   692    20    73  1285     0     111  dst
 54561    73   692    23    73  1285     0      66  ,
 54562    73   692    25    73  1285     0     112  0
 54563    73   692    26    73  1285     0      66  ,
 54564    73   692    28    73  1285     0     111  dst.length
 54565    73   692    38    73  1285     0      60  )
 54566    73   692    39    73  1285     0     102  ;
 54567    73   693     5    73  1285     0      64  }
 54568    73   693     5    73  1285     0    2986  ENDMETHOD
 54569    73   693     5    73  1286     0    2987  STARTMETHOD
 54570    73   739     5    73  1286     0      10  public
 54571    73   739    12    73  1286     0     111  IntBuffer
 54572    73   739    22    73  1286     0     111  put
 54573    73   739    25    73  1286     0      59  (
 54574    73   739    26    73  1286     0     111  IntBuffer
 54575    73   739    36    73  1286     0     111  src
 54576    73   739    39    73  1286     0      60  )
 54577    73   739    41    73  1286     0      63  {
 54578    73   740     9    73  1286     0      31  if
 54579    73   740    12    73  1286     0      59  (
 54580    73   740    13    73  1286     0     111  src
 54581    73   740    17    73  1286     0      68  ==
 54582    73   740    20    73  1286     0      44  this
 54583    73   740    24    73  1286     0      60  )
 54584    73   741    13    73  1286     0      20  throw
 54585    73   741    19    73  1286     0      15  new
 54586    73   741    23    73  1286     0     111  IllegalArgumentException
 54587    73   741    47    73  1286     0      59  (
 54588    73   741    48    73  1286     0      60  )
 54589    73   741    49    73  1286     0     102  ;
 54590    73   742     9    73  1286     0      36  int
 54591    73   742    13    73  1286     0     111  n
 54592    73   742    15    73  1286     0      67  =
 54593    73   742    17    73  1286     0     111  src.remaining
 54594    73   742    30    73  1286     0      59  (
 54595    73   742    31    73  1286     0      60  )
 54596    73   742    32    73  1286     0     102  ;
 54597    73   743     9    73  1286     0      31  if
 54598    73   743    12    73  1286     0      59  (
 54599    73   743    13    73  1286     0     111  n
 54600    73   743    15    73  1286     0      89  >
 54601    73   743    17    73  1286     0     111  remaining
 54602    73   743    26    73  1286     0      59  (
 54603    73   743    27    73  1286     0      60  )
 54604    73   743    28    73  1286     0      60  )
 54605    73   744    13    73  1286     0      20  throw
 54606    73   744    19    73  1286     0      15  new
 54607    73   744    23    73  1286     0     111  BufferOverflowException
 54608    73   744    46    73  1286     0      59  (
 54609    73   744    47    73  1286     0      60  )
 54610    73   744    48    73  1286     0     102  ;
 54611    73   745     9    73  1286     0      37  for
 54612    73   745    13    73  1286     0      59  (
 54613    73   745    14    73  1286     0      36  int
 54614    73   745    18    73  1286     0     111  i
 54615    73   745    20    73  1286     0      67  =
 54616    73   745    22    73  1286     0     112  0
 54617    73   745    23    73  1286     0     102  ;
 54618    73   745    25    73  1286     0     111  i
 54619    73   745    27    73  1286     0      93  <
 54620    73   745    29    73  1286     0     111  n
 54621    73   745    30    73  1286     0     102  ;
 54622    73   745    32    73  1286     0     111  i
 54623    73   745    33    73  1286     0      76  ++
 54624    73   745    35    73  1286     0      60  )
 54625    73   746    13    73  1286     0     111  put
 54626    73   746    16    73  1286     0      59  (
 54627    73   746    17    73  1286     0     111  src.get
 54628    73   746    24    73  1286     0      59  (
 54629    73   746    25    73  1286     0      60  )
 54630    73   746    26    73  1286     0      60  )
 54631    73   746    27    73  1286     0     102  ;
 54632    73   747     9    73  1286     0      19  return
 54633    73   747    16    73  1286     0      44  this
 54634    73   747    20    73  1286     0     102  ;
 54635    73   748     5    73  1286     0      64  }
 54636    73   748     5    73  1286     0    2988  ENDMETHOD
 54637    73   748     5    73  1287     0    2989  STARTMETHOD
 54638    73   800     5    73  1287     0      10  public
 54639    73   800    12    73  1287     0     111  IntBuffer
 54640    73   800    22    73  1287     0     111  put
 54641    73   800    25    73  1287     0      59  (
 54642    73   800    26    73  1287     0      36  int
 54643    73   800    29    73  1287     0      61  [
 54644    73   800    30    73  1287     0      62  ]
 54645    73   800    32    73  1287     0     111  src
 54646    73   800    35    73  1287     0      66  ,
 54647    73   800    37    73  1287     0      36  int
 54648    73   800    41    73  1287     0     111  offset
 54649    73   800    47    73  1287     0      66  ,
 54650    73   800    49    73  1287     0      36  int
 54651    73   800    53    73  1287     0     111  length
 54652    73   800    59    73  1287     0      60  )
 54653    73   800    61    73  1287     0      63  {
 54654    73   801     9    73  1287     0     111  checkBounds
 54655    73   801    20    73  1287     0      59  (
 54656    73   801    21    73  1287     0     111  offset
 54657    73   801    27    73  1287     0      66  ,
 54658    73   801    29    73  1287     0     111  length
 54659    73   801    35    73  1287     0      66  ,
 54660    73   801    37    73  1287     0     111  src.length
 54661    73   801    47    73  1287     0      60  )
 54662    73   801    48    73  1287     0     102  ;
 54663    73   802     9    73  1287     0      31  if
 54664    73   802    12    73  1287     0      59  (
 54665    73   802    13    73  1287     0     111  length
 54666    73   802    20    73  1287     0      89  >
 54667    73   802    22    73  1287     0     111  remaining
 54668    73   802    31    73  1287     0      59  (
 54669    73   802    32    73  1287     0      60  )
 54670    73   802    33    73  1287     0      60  )
 54671    73   803    13    73  1287     0      20  throw
 54672    73   803    19    73  1287     0      15  new
 54673    73   803    23    73  1287     0     111  BufferOverflowException
 54674    73   803    46    73  1287     0      59  (
 54675    73   803    47    73  1287     0      60  )
 54676    73   803    48    73  1287     0     102  ;
 54677    73   804     9    73  1287     0      36  int
 54678    73   804    13    73  1287     0     111  end
 54679    73   804    17    73  1287     0      67  =
 54680    73   804    19    73  1287     0     111  offset
 54681    73   804    26    73  1287     0      74  +
 54682    73   804    28    73  1287     0     111  length
 54683    73   804    34    73  1287     0     102  ;
 54684    73   805     9    73  1287     0      37  for
 54685    73   805    13    73  1287     0      59  (
 54686    73   805    14    73  1287     0      36  int
 54687    73   805    18    73  1287     0     111  i
 54688    73   805    20    73  1287     0      67  =
 54689    73   805    22    73  1287     0     111  offset
 54690    73   805    28    73  1287     0     102  ;
 54691    73   805    30    73  1287     0     111  i
 54692    73   805    32    73  1287     0      93  <
 54693    73   805    34    73  1287     0     111  end
 54694    73   805    37    73  1287     0     102  ;
 54695    73   805    39    73  1287     0     111  i
 54696    73   805    40    73  1287     0      76  ++
 54697    73   805    42    73  1287     0      60  )
 54698    73   806    13    73  1287     0     111  this.put
 54699    73   806    21    73  1287     0      59  (
 54700    73   806    22    73  1287     0     111  src
 54701    73   806    25    73  1287     0      61  [
 54702    73   806    26    73  1287     0     111  i
 54703    73   806    27    73  1287     0      62  ]
 54704    73   806    28    73  1287     0      60  )
 54705    73   806    29    73  1287     0     102  ;
 54706    73   807     9    73  1287     0      19  return
 54707    73   807    16    73  1287     0      44  this
 54708    73   807    20    73  1287     0     102  ;
 54709    73   808     5    73  1287     0      64  }
 54710    73   808     5    73  1287     0    2990  ENDMETHOD
 54711    73   808     5    73  1288     0    2991  STARTMETHOD
 54712    73   829     5    73  1288     0      10  public
 54713    73   829    12    73  1288     0       6  final
 54714    73   829    18    73  1288     0     111  IntBuffer
 54715    73   829    28    73  1288     0     111  put
 54716    73   829    31    73  1288     0      59  (
 54717    73   829    32    73  1288     0      36  int
 54718    73   829    35    73  1288     0      61  [
 54719    73   829    36    73  1288     0      62  ]
 54720    73   829    38    73  1288     0     111  src
 54721    73   829    41    73  1288     0      60  )
 54722    73   829    43    73  1288     0      63  {
 54723    73   830     9    73  1288     0      19  return
 54724    73   830    16    73  1288     0     111  put
 54725    73   830    19    73  1288     0      59  (
 54726    73   830    20    73  1288     0     111  src
 54727    73   830    23    73  1288     0      66  ,
 54728    73   830    25    73  1288     0     112  0
 54729    73   830    26    73  1288     0      66  ,
 54730    73   830    28    73  1288     0     111  src.length
 54731    73   830    38    73  1288     0      60  )
 54732    73   830    39    73  1288     0     102  ;
 54733    73   831     5    73  1288     0      64  }
 54734    73   831     5    73  1288     0    2992  ENDMETHOD
 54735    73   831     5    73  1289     0    2993  STARTMETHOD
 54736    73   932     5    73  1289     0      10  public
 54737    73   932    12    73  1289     0       6  final
 54738    73   932    18    73  1289     0      39  boolean
 54739    73   932    26    73  1289     0     111  hasArray
 54740    73   932    34    73  1289     0      59  (
 54741    73   932    35    73  1289     0      60  )
 54742    73   932    37    73  1289     0      63  {
 54743    73   933     9    73  1289     0      19  return
 54744    73   933    16    73  1289     0      59  (
 54745    73   933    17    73  1289     0     111  hb
 54746    73   933    20    73  1289     0      71  !=
 54747    73   933    23    73  1289     0      21  null
 54748    73   933    27    73  1289     0      60  )
 54749    73   933    29    73  1289     0     101  &&
 54750    73   933    32    73  1289     0      69  !
 54751    73   933    33    73  1289     0     111  isReadOnly
 54752    73   933    43    73  1289     0     102  ;
 54753    73   934     5    73  1289     0      64  }
 54754    73   934     5    73  1289     0    2994  ENDMETHOD
 54755    73   934     5    73  1290     0    2995  STARTMETHOD
 54756    73   955     5    73  1290     0      10  public
 54757    73   955    12    73  1290     0       6  final
 54758    73   955    18    73  1290     0      36  int
 54759    73   955    21    73  1290     0      61  [
 54760    73   955    22    73  1290     0      62  ]
 54761    73   955    24    73  1290     0     111  array
 54762    73   955    29    73  1290     0      59  (
 54763    73   955    30    73  1290     0      60  )
 54764    73   955    32    73  1290     0      63  {
 54765    73   956     9    73  1290     0      31  if
 54766    73   956    12    73  1290     0      59  (
 54767    73   956    13    73  1290     0     111  hb
 54768    73   956    16    73  1290     0      68  ==
 54769    73   956    19    73  1290     0      21  null
 54770    73   956    23    73  1290     0      60  )
 54771    73   957    13    73  1290     0      20  throw
 54772    73   957    19    73  1290     0      15  new
 54773    73   957    23    73  1290     0     111  UnsupportedOperationException
 54774    73   957    52    73  1290     0      59  (
 54775    73   957    53    73  1290     0      60  )
 54776    73   957    54    73  1290     0     102  ;
 54777    73   958     9    73  1290     0      31  if
 54778    73   958    12    73  1290     0      59  (
 54779    73   958    13    73  1290     0     111  isReadOnly
 54780    73   958    23    73  1290     0      60  )
 54781    73   959    13    73  1290     0      20  throw
 54782    73   959    19    73  1290     0      15  new
 54783    73   959    23    73  1290     0     111  ReadOnlyBufferException
 54784    73   959    46    73  1290     0      59  (
 54785    73   959    47    73  1290     0      60  )
 54786    73   959    48    73  1290     0     102  ;
 54787    73   960     9    73  1290     0      19  return
 54788    73   960    16    73  1290     0     111  hb
 54789    73   960    18    73  1290     0     102  ;
 54790    73   961     5    73  1290     0      64  }
 54791    73   961     5    73  1290     0    2996  ENDMETHOD
 54792    73   961     5    73  1291     0    2997  STARTMETHOD
 54793    73   983     5    73  1291     0      10  public
 54794    73   983    12    73  1291     0       6  final
 54795    73   983    18    73  1291     0      36  int
 54796    73   983    22    73  1291     0     111  arrayOffset
 54797    73   983    33    73  1291     0      59  (
 54798    73   983    34    73  1291     0      60  )
 54799    73   983    36    73  1291     0      63  {
 54800    73   984     9    73  1291     0      31  if
 54801    73   984    12    73  1291     0      59  (
 54802    73   984    13    73  1291     0     111  hb
 54803    73   984    16    73  1291     0      68  ==
 54804    73   984    19    73  1291     0      21  null
 54805    73   984    23    73  1291     0      60  )
 54806    73   985    13    73  1291     0      20  throw
 54807    73   985    19    73  1291     0      15  new
 54808    73   985    23    73  1291     0     111  UnsupportedOperationException
 54809    73   985    52    73  1291     0      59  (
 54810    73   985    53    73  1291     0      60  )
 54811    73   985    54    73  1291     0     102  ;
 54812    73   986     9    73  1291     0      31  if
 54813    73   986    12    73  1291     0      59  (
 54814    73   986    13    73  1291     0     111  isReadOnly
 54815    73   986    23    73  1291     0      60  )
 54816    73   987    13    73  1291     0      20  throw
 54817    73   987    19    73  1291     0      15  new
 54818    73   987    23    73  1291     0     111  ReadOnlyBufferException
 54819    73   987    46    73  1291     0      59  (
 54820    73   987    47    73  1291     0      60  )
 54821    73   987    48    73  1291     0     102  ;
 54822    73   988     9    73  1291     0      19  return
 54823    73   988    16    73  1291     0     111  offset
 54824    73   988    22    73  1291     0     102  ;
 54825    73   989     5    73  1291     0      64  }
 54826    73   989     5    73  1291     0    2998  ENDMETHOD
 54827    73  1030     5    73    -1     0      10  public
 54828    73  1030    12    73    -1     0       7  abstract
 54829    73  1030    21    73    -1     0     111  IntBuffer
 54830    73  1030    31    73    -1     0     111  compact
 54831    73  1030    38    73    -1     0      59  (
 54832    73  1030    39    73    -1     0      60  )
 54833    73  1030    40    73    -1     0     102  ;
 54834    73  1037     5    73    -1     0      10  public
 54835    73  1037    12    73    -1     0       7  abstract
 54836    73  1037    21    73    -1     0      39  boolean
 54837    73  1037    29    73    -1     0     111  isDirect
 54838    73  1037    37    73    -1     0      59  (
 54839    73  1037    38    73    -1     0      60  )
 54840    73  1037    39    73    -1     0     102  ;
 54841    73  1037    39    73  1292     0    2999  STARTMETHOD
 54842    73  1046     5    73  1292     0      10  public
 54843    73  1046    12    73  1292     0     111  String
 54844    73  1046    19    73  1292     0     111  toString
 54845    73  1046    27    73  1292     0      59  (
 54846    73  1046    28    73  1292     0      60  )
 54847    73  1046    30    73  1292     0      63  {
 54848    73  1047     9    73  1292     0     111  StringBuffer
 54849    73  1047    22    73  1292     0     111  sb
 54850    73  1047    25    73  1292     0      67  =
 54851    73  1047    27    73  1292     0      15  new
 54852    73  1047    31    73  1292     0     111  StringBuffer
 54853    73  1047    43    73  1292     0      59  (
 54854    73  1047    44    73  1292     0      60  )
 54855    73  1047    45    73  1292     0     102  ;
 54856    73  1048     9    73  1292     0     111  sb.append
 54857    73  1048    18    73  1292     0      59  (
 54858    73  1048    19    73  1292     0     111  getClass
 54859    73  1048    27    73  1292     0      59  (
 54860    73  1048    28    73  1292     0      60  )
 54861    73  1048    29    73  1292     0      54  .
 54862    73  1048    30    73  1292     0     111  getName
 54863    73  1048    37    73  1292     0      59  (
 54864    73  1048    38    73  1292     0      60  )
 54865    73  1048    39    73  1292     0      60  )
 54866    73  1048    40    73  1292     0     102  ;
 54867    73  1049     9    73  1292     0     111  sb.append
 54868    73  1049    18    73  1292     0      59  (
 54869    73  1049    19    73  1292     0     107  "[pos="
 54870    73  1049    26    73  1292     0      60  )
 54871    73  1049    27    73  1292     0     102  ;
 54872    73  1050     9    73  1292     0     111  sb.append
 54873    73  1050    18    73  1292     0      59  (
 54874    73  1050    19    73  1292     0     111  position
 54875    73  1050    27    73  1292     0      59  (
 54876    73  1050    28    73  1292     0      60  )
 54877    73  1050    29    73  1292     0      60  )
 54878    73  1050    30    73  1292     0     102  ;
 54879    73  1051     9    73  1292     0     111  sb.append
 54880    73  1051    18    73  1292     0      59  (
 54881    73  1051    19    73  1292     0     107  " lim="
 54882    73  1051    26    73  1292     0      60  )
 54883    73  1051    27    73  1292     0     102  ;
 54884    73  1052     9    73  1292     0     111  sb.append
 54885    73  1052    18    73  1292     0      59  (
 54886    73  1052    19    73  1292     0     111  limit
 54887    73  1052    24    73  1292     0      59  (
 54888    73  1052    25    73  1292     0      60  )
 54889    73  1052    26    73  1292     0      60  )
 54890    73  1052    27    73  1292     0     102  ;
 54891    73  1053     9    73  1292     0     111  sb.append
 54892    73  1053    18    73  1292     0      59  (
 54893    73  1053    19    73  1292     0     107  " cap="
 54894    73  1053    26    73  1292     0      60  )
 54895    73  1053    27    73  1292     0     102  ;
 54896    73  1054     9    73  1292     0     111  sb.append
 54897    73  1054    18    73  1292     0      59  (
 54898    73  1054    19    73  1292     0     111  capacity
 54899    73  1054    27    73  1292     0      59  (
 54900    73  1054    28    73  1292     0      60  )
 54901    73  1054    29    73  1292     0      60  )
 54902    73  1054    30    73  1292     0     102  ;
 54903    73  1055     9    73  1292     0     111  sb.append
 54904    73  1055    18    73  1292     0      59  (
 54905    73  1055    19    73  1292     0     107  "]"
 54906    73  1055    22    73  1292     0      60  )
 54907    73  1055    23    73  1292     0     102  ;
 54908    73  1056     9    73  1292     0      19  return
 54909    73  1056    16    73  1292     0     111  sb.toString
 54910    73  1056    27    73  1292     0      59  (
 54911    73  1056    28    73  1292     0      60  )
 54912    73  1056    29    73  1292     0     102  ;
 54913    73  1057     5    73  1292     0      64  }
 54914    73  1057     5    73  1292     0    3000  ENDMETHOD
 54915    73  1057     5    73  1293     0    3001  STARTMETHOD
 54916    73  1077     5    73  1293     0      10  public
 54917    73  1077    12    73  1293     0      36  int
 54918    73  1077    16    73  1293     0     111  hashCode
 54919    73  1077    24    73  1293     0      59  (
 54920    73  1077    25    73  1293     0      60  )
 54921    73  1077    27    73  1293     0      63  {
 54922    73  1078     9    73  1293     0      36  int
 54923    73  1078    13    73  1293     0     111  h
 54924    73  1078    15    73  1293     0      67  =
 54925    73  1078    17    73  1293     0     112  1
 54926    73  1078    18    73  1293     0     102  ;
 54927    73  1079     9    73  1293     0      36  int
 54928    73  1079    13    73  1293     0     111  p
 54929    73  1079    15    73  1293     0      67  =
 54930    73  1079    17    73  1293     0     111  position
 54931    73  1079    25    73  1293     0      59  (
 54932    73  1079    26    73  1293     0      60  )
 54933    73  1079    27    73  1293     0     102  ;
 54934    73  1080     9    73  1293     0      37  for
 54935    73  1080    13    73  1293     0      59  (
 54936    73  1080    14    73  1293     0      36  int
 54937    73  1080    18    73  1293     0     111  i
 54938    73  1080    20    73  1293     0      67  =
 54939    73  1080    22    73  1293     0     111  limit
 54940    73  1080    27    73  1293     0      59  (
 54941    73  1080    28    73  1293     0      60  )
 54942    73  1080    30    73  1293     0      77  -
 54943    73  1080    32    73  1293     0     112  1
 54944    73  1080    33    73  1293     0     102  ;
 54945    73  1080    35    73  1293     0     111  i
 54946    73  1080    37    73  1293     0      88  >=
 54947    73  1080    40    73  1293     0     111  p
 54948    73  1080    41    73  1293     0     102  ;
 54949    73  1080    43    73  1293     0     111  i
 54950    73  1080    44    73  1293     0      79  --
 54951    73  1080    46    73  1293     0      60  )
 54952    73  1081    13    73  1293     0     111  h
 54953    73  1081    15    73  1293     0      67  =
 54954    73  1081    17    73  1293     0     112  31
 54955    73  1081    20    73  1293     0      80  *
 54956    73  1081    22    73  1293     0     111  h
 54957    73  1081    24    73  1293     0      74  +
 54958    73  1081    26    73  1293     0      59  (
 54959    73  1081    27    73  1293     0      36  int
 54960    73  1081    30    73  1293     0      60  )
 54961    73  1081    31    73  1293     0     111  get
 54962    73  1081    34    73  1293     0      59  (
 54963    73  1081    35    73  1293     0     111  i
 54964    73  1081    36    73  1293     0      60  )
 54965    73  1081    37    73  1293     0     102  ;
 54966    73  1082     9    73  1293     0      19  return
 54967    73  1082    16    73  1293     0     111  h
 54968    73  1082    17    73  1293     0     102  ;
 54969    73  1083     5    73  1293     0      64  }
 54970    73  1083     5    73  1293     0    3002  ENDMETHOD
 54971    73  1083     5    73  1294     0    3003  STARTMETHOD
 54972    73  1110     5    73  1294     0      10  public
 54973    73  1110    12    73  1294     0      39  boolean
 54974    73  1110    20    73  1294     0     111  equals
 54975    73  1110    26    73  1294     0      59  (
 54976    73  1110    27    73  1294     0     111  Object
 54977    73  1110    34    73  1294     0     111  ob
 54978    73  1110    36    73  1294     0      60  )
 54979    73  1110    38    73  1294     0      63  {
 54980    73  1111     9    73  1294     0      31  if
 54981    73  1111    12    73  1294     0      59  (
 54982    73  1111    13    73  1294     0      44  this
 54983    73  1111    18    73  1294     0      68  ==
 54984    73  1111    21    73  1294     0     111  ob
 54985    73  1111    23    73  1294     0      60  )
 54986    73  1112    13    73  1294     0      19  return
 54987    73  1112    20    73  1294     0      52  true
 54988    73  1112    24    73  1294     0     102  ;
 54989    73  1113     9    73  1294     0      31  if
 54990    73  1113    12    73  1294     0      59  (
 54991    73  1113    13    73  1294     0      69  !
 54992    73  1113    14    73  1294     0      59  (
 54993    73  1113    15    73  1294     0     111  ob
 54994    73  1113    18    73  1294     0      16  instanceof
 54995    73  1113    29    73  1294     0     111  IntBuffer
 54996    73  1113    38    73  1294     0      60  )
 54997    73  1113    39    73  1294     0      60  )
 54998    73  1114    13    73  1294     0      19  return
 54999    73  1114    20    73  1294     0      43  false
 55000    73  1114    25    73  1294     0     102  ;
 55001    73  1115     9    73  1294     0     111  IntBuffer
 55002    73  1115    19    73  1294     0     111  that
 55003    73  1115    24    73  1294     0      67  =
 55004    73  1115    26    73  1294     0      59  (
 55005    73  1115    27    73  1294     0     111  IntBuffer
 55006    73  1115    36    73  1294     0      60  )
 55007    73  1115    37    73  1294     0     111  ob
 55008    73  1115    39    73  1294     0     102  ;
 55009    73  1116     9    73  1294     0      31  if
 55010    73  1116    12    73  1294     0      59  (
 55011    73  1116    13    73  1294     0     111  this.remaining
 55012    73  1116    27    73  1294     0      59  (
 55013    73  1116    28    73  1294     0      60  )
 55014    73  1116    30    73  1294     0      71  !=
 55015    73  1116    33    73  1294     0     111  that.remaining
 55016    73  1116    47    73  1294     0      59  (
 55017    73  1116    48    73  1294     0      60  )
 55018    73  1116    49    73  1294     0      60  )
 55019    73  1117    13    73  1294     0      19  return
 55020    73  1117    20    73  1294     0      43  false
 55021    73  1117    25    73  1294     0     102  ;
 55022    73  1118     9    73  1294     0      36  int
 55023    73  1118    13    73  1294     0     111  p
 55024    73  1118    15    73  1294     0      67  =
 55025    73  1118    17    73  1294     0     111  this.position
 55026    73  1118    30    73  1294     0      59  (
 55027    73  1118    31    73  1294     0      60  )
 55028    73  1118    32    73  1294     0     102  ;
 55029    73  1119     9    73  1294     0      37  for
 55030    73  1119    13    73  1294     0      59  (
 55031    73  1119    14    73  1294     0      36  int
 55032    73  1119    18    73  1294     0     111  i
 55033    73  1119    20    73  1294     0      67  =
 55034    73  1119    22    73  1294     0     111  this.limit
 55035    73  1119    32    73  1294     0      59  (
 55036    73  1119    33    73  1294     0      60  )
 55037    73  1119    35    73  1294     0      77  -
 55038    73  1119    37    73  1294     0     112  1
 55039    73  1119    38    73  1294     0      66  ,
 55040    73  1119    40    73  1294     0     111  j
 55041    73  1119    42    73  1294     0      67  =
 55042    73  1119    44    73  1294     0     111  that.limit
 55043    73  1119    54    73  1294     0      59  (
 55044    73  1119    55    73  1294     0      60  )
 55045    73  1119    57    73  1294     0      77  -
 55046    73  1119    59    73  1294     0     112  1
 55047    73  1119    60    73  1294     0     102  ;
 55048    73  1119    62    73  1294     0     111  i
 55049    73  1119    64    73  1294     0      88  >=
 55050    73  1119    67    73  1294     0     111  p
 55051    73  1119    68    73  1294     0     102  ;
 55052    73  1119    70    73  1294     0     111  i
 55053    73  1119    71    73  1294     0      79  --
 55054    73  1119    73    73  1294     0      66  ,
 55055    73  1119    75    73  1294     0     111  j
 55056    73  1119    76    73  1294     0      79  --
 55057    73  1119    78    73  1294     0      60  )
 55058    73  1119    80    73  1294     0      63  {
 55059    73  1120    13    73  1294     1      36  int
 55060    73  1120    17    73  1294     1     111  v1
 55061    73  1120    20    73  1294     1      67  =
 55062    73  1120    22    73  1294     1     111  this.get
 55063    73  1120    30    73  1294     1      59  (
 55064    73  1120    31    73  1294     1     111  i
 55065    73  1120    32    73  1294     1      60  )
 55066    73  1120    33    73  1294     1     102  ;
 55067    73  1121    13    73  1294     1      36  int
 55068    73  1121    17    73  1294     1     111  v2
 55069    73  1121    20    73  1294     1      67  =
 55070    73  1121    22    73  1294     1     111  that.get
 55071    73  1121    30    73  1294     1      59  (
 55072    73  1121    31    73  1294     1     111  j
 55073    73  1121    32    73  1294     1      60  )
 55074    73  1121    33    73  1294     1     102  ;
 55075    73  1122    13    73  1294     0      31  if
 55076    73  1122    16    73  1294     0      59  (
 55077    73  1122    17    73  1294     0     111  v1
 55078    73  1122    20    73  1294     0      71  !=
 55079    73  1122    23    73  1294     0     111  v2
 55080    73  1122    25    73  1294     0      60  )
 55081    73  1122    27    73  1294     0      63  {
 55082    73  1123    17    73  1294     0      31  if
 55083    73  1123    20    73  1294     0      59  (
 55084    73  1123    21    73  1294     0      59  (
 55085    73  1123    22    73  1294     0     111  v1
 55086    73  1123    25    73  1294     0      71  !=
 55087    73  1123    28    73  1294     0     111  v1
 55088    73  1123    30    73  1294     0      60  )
 55089    73  1123    32    73  1294     0     101  &&
 55090    73  1123    35    73  1294     0      59  (
 55091    73  1123    36    73  1294     0     111  v2
 55092    73  1123    39    73  1294     0      71  !=
 55093    73  1123    42    73  1294     0     111  v2
 55094    73  1123    44    73  1294     0      60  )
 55095    73  1123    45    73  1294     0      60  )
 55096    73  1124    21    73  1294     0      46  continue
 55097    73  1124    29    73  1294     0     102  ;
 55098    73  1125    17    73  1294     0      19  return
 55099    73  1125    24    73  1294     0      43  false
 55100    73  1125    29    73  1294     0     102  ;
 55101    73  1126    13    73  1294     1      64  }
 55102    73  1127     9    73  1294     1      64  }
 55103    73  1128     9    73  1294     0      19  return
 55104    73  1128    16    73  1294     0      52  true
 55105    73  1128    20    73  1294     0     102  ;
 55106    73  1129     5    73  1294     0      64  }
 55107    73  1129     5    73  1294     0    3004  ENDMETHOD
 55108    73  1129     5    73  1295     0    3005  STARTMETHOD
 55109    73  1143     5    73  1295     0      10  public
 55110    73  1143    12    73  1295     0      36  int
 55111    73  1143    16    73  1295     0     111  compareTo
 55112    73  1143    25    73  1295     0      59  (
 55113    73  1143    26    73  1295     0     111  IntBuffer
 55114    73  1143    36    73  1295     0     111  that
 55115    73  1143    40    73  1295     0      60  )
 55116    73  1143    42    73  1295     0      63  {
 55117    73  1144     9    73  1295     0      36  int
 55118    73  1144    13    73  1295     0     111  n
 55119    73  1144    15    73  1295     0      67  =
 55120    73  1144    17    73  1295     0     111  this.position
 55121    73  1144    30    73  1295     0      59  (
 55122    73  1144    31    73  1295     0      60  )
 55123    73  1144    33    73  1295     0      74  +
 55124    73  1144    35    73  1295     0     111  Math.min
 55125    73  1144    43    73  1295     0      59  (
 55126    73  1144    44    73  1295     0     111  this.remaining
 55127    73  1144    58    73  1295     0      59  (
 55128    73  1144    59    73  1295     0      60  )
 55129    73  1144    60    73  1295     0      66  ,
 55130    73  1144    62    73  1295     0     111  that.remaining
 55131    73  1144    76    73  1295     0      59  (
 55132    73  1144    77    73  1295     0      60  )
 55133    73  1144    78    73  1295     0      60  )
 55134    73  1144    79    73  1295     0     102  ;
 55135    73  1145     9    73  1295     0      37  for
 55136    73  1145    13    73  1295     0      59  (
 55137    73  1145    14    73  1295     0      36  int
 55138    73  1145    18    73  1295     0     111  i
 55139    73  1145    20    73  1295     0      67  =
 55140    73  1145    22    73  1295     0     111  this.position
 55141    73  1145    35    73  1295     0      59  (
 55142    73  1145    36    73  1295     0      60  )
 55143    73  1145    37    73  1295     0      66  ,
 55144    73  1145    39    73  1295     0     111  j
 55145    73  1145    41    73  1295     0      67  =
 55146    73  1145    43    73  1295     0     111  that.position
 55147    73  1145    56    73  1295     0      59  (
 55148    73  1145    57    73  1295     0      60  )
 55149    73  1145    58    73  1295     0     102  ;
 55150    73  1145    60    73  1295     0     111  i
 55151    73  1145    62    73  1295     0      93  <
 55152    73  1145    64    73  1295     0     111  n
 55153    73  1145    65    73  1295     0     102  ;
 55154    73  1145    67    73  1295     0     111  i
 55155    73  1145    68    73  1295     0      76  ++
 55156    73  1145    70    73  1295     0      66  ,
 55157    73  1145    72    73  1295     0     111  j
 55158    73  1145    73    73  1295     0      76  ++
 55159    73  1145    75    73  1295     0      60  )
 55160    73  1145    77    73  1295     0      63  {
 55161    73  1146    13    73  1295     1      36  int
 55162    73  1146    17    73  1295     1     111  v1
 55163    73  1146    20    73  1295     1      67  =
 55164    73  1146    22    73  1295     1     111  this.get
 55165    73  1146    30    73  1295     1      59  (
 55166    73  1146    31    73  1295     1     111  i
 55167    73  1146    32    73  1295     1      60  )
 55168    73  1146    33    73  1295     1     102  ;
 55169    73  1147    13    73  1295     1      36  int
 55170    73  1147    17    73  1295     1     111  v2
 55171    73  1147    20    73  1295     1      67  =
 55172    73  1147    22    73  1295     1     111  that.get
 55173    73  1147    30    73  1295     1      59  (
 55174    73  1147    31    73  1295     1     111  j
 55175    73  1147    32    73  1295     1      60  )
 55176    73  1147    33    73  1295     1     102  ;
 55177    73  1148    13    73  1295     0      31  if
 55178    73  1148    16    73  1295     0      59  (
 55179    73  1148    17    73  1295     0     111  v1
 55180    73  1148    20    73  1295     0      68  ==
 55181    73  1148    23    73  1295     0     111  v2
 55182    73  1148    25    73  1295     0      60  )
 55183    73  1149    17    73  1295     0      46  continue
 55184    73  1149    25    73  1295     0     102  ;
 55185    73  1150    13    73  1295     0      31  if
 55186    73  1150    16    73  1295     0      59  (
 55187    73  1150    17    73  1295     0      59  (
 55188    73  1150    18    73  1295     0     111  v1
 55189    73  1150    21    73  1295     0      71  !=
 55190    73  1150    24    73  1295     0     111  v1
 55191    73  1150    26    73  1295     0      60  )
 55192    73  1150    28    73  1295     0     101  &&
 55193    73  1150    31    73  1295     0      59  (
 55194    73  1150    32    73  1295     0     111  v2
 55195    73  1150    35    73  1295     0      71  !=
 55196    73  1150    38    73  1295     0     111  v2
 55197    73  1150    40    73  1295     0      60  )
 55198    73  1150    41    73  1295     0      60  )
 55199    73  1151    17    73  1295     0      46  continue
 55200    73  1151    25    73  1295     0     102  ;
 55201    73  1152    13    73  1295     0      31  if
 55202    73  1152    16    73  1295     0      59  (
 55203    73  1152    17    73  1295     0     111  v1
 55204    73  1152    20    73  1295     0      93  <
 55205    73  1152    22    73  1295     0     111  v2
 55206    73  1152    24    73  1295     0      60  )
 55207    73  1153    17    73  1295     0      19  return
 55208    73  1153    24    73  1295     0      77  -
 55209    73  1153    25    73  1295     0     112  1
 55210    73  1153    26    73  1295     0     102  ;
 55211    73  1154    13    73  1295     0      19  return
 55212    73  1154    20    73  1295     0      74  +
 55213    73  1154    21    73  1295     0     112  1
 55214    73  1154    22    73  1295     0     102  ;
 55215    73  1155     9    73  1295     0      64  }
 55216    73  1156     9    73  1295     0      19  return
 55217    73  1156    16    73  1295     0     111  this.remaining
 55218    73  1156    30    73  1295     0      59  (
 55219    73  1156    31    73  1295     0      60  )
 55220    73  1156    33    73  1295     0      77  -
 55221    73  1156    35    73  1295     0     111  that.remaining
 55222    73  1156    49    73  1295     0      59  (
 55223    73  1156    50    73  1295     0      60  )
 55224    73  1156    51    73  1295     0     102  ;
 55225    73  1157     5    73  1295     0      64  }
 55226    73  1157     5    73  1295     0    3006  ENDMETHOD
 55227    73  1372     5    73    -1     0      10  public
 55228    73  1372    12    73    -1     0       7  abstract
 55229    73  1372    21    73    -1     0     111  ByteOrder
 55230    73  1372    31    73    -1     0     111  order
 55231    73  1372    36    73    -1     0      59  (
 55232    73  1372    37    73    -1     0      60  )
 55233    73  1372    38    73    -1     0     102  ;
 55234    73  1426     1    73    -1     0      64  }
 55235    73  1426     1    73    -1     1    3007  ENDCLASS
 55236    73  1426     1    -1    -1     1    3008  ENDFILE C:\javasrc\java\nio\IntBuffer.java
 55237    74     1     1    -1    -1     1    3009  STARTFILE C:\javasrc\java\nio\InvalidMarkException.java
 55238    74    30     1    -1    -1     0       5  package
 55239    74    30     9    -1    -1     0     111  java.nio
 55240    74    30    17    -1    -1     0     102  ;
 55241    74    40     1    -1    -1     0      10  public
 55242    74    40     8    74    -1     0    3010  STARTCLASS
 55243    74    40     8    74    -1     0      24  class
 55244    74    40    14    74    -1     0     111  InvalidMarkException
 55245    74    41     5    74    -1     0      38  extends
 55246    74    41    13    74    -1     0     111  IllegalStateException
 55247    74    42     1    74    -1     0      63  {
 55248    74    44     5    74    -1     0      41  private
 55249    74    44    13    74    -1     0      45  static
 55250    74    44    20    74    -1     0       6  final
 55251    74    44    26    74    -1     0      53  long
 55252    74    44    31    74    -1     0     111  serialVersionUID
 55253    74    44    48    74    -1     0      67  =
 55254    74    44    50    74    -1     0      55  1698329710438510774L
 55255    74    44    70    74    -1     0     102  ;
 55256    74    44    70    74  1296     0    3011  STARTMETHOD
 55257    74    49     5    74  1296     0      10  public
 55258    74    49    12    74  1296     0     111  InvalidMarkException
 55259    74    49    32    74  1296     0      59  (
 55260    74    49    33    74  1296     0      60  )
 55261    74    49    35    74  1296     0      63  {
 55262    74    49    37    74  1296     0      64  }
 55263    74    49    37    74  1296     0    3012  ENDMETHOD
 55264    74    51     1    74    -1     0      64  }
 55265    74    51     1    74    -1     1    3013  ENDCLASS
 55266    74    51     1    -1    -1     1    3014  ENDFILE C:\javasrc\java\nio\InvalidMarkException.java
 55267    75     1     1    -1    -1     1    3015  STARTFILE C:\javasrc\java\nio\LongBuffer.java
 55268    75    28     1    -1    -1     0       5  package
 55269    75    28     9    -1    -1     0     111  java.nio
 55270    75    28    17    -1    -1     0     102  ;
 55271    75   257     1    -1    -1     0      10  public
 55272    75   257     8    -1    -1     0       7  abstract
 55273    75   257    17    75    -1     0    3016  STARTCLASS
 55274    75   257    17    75    -1     0      24  class
 55275    75   257    23    75    -1     0     111  LongBuffer
 55276    75   258     5    75    -1     0      38  extends
 55277    75   258    13    75    -1     0     111  Buffer
 55278    75   259     5    75    -1     0      17  implements
 55279    75   259    16    75    -1     0     111  Comparable
 55280    75   259    26    75    -1     0      93  <
 55281    75   259    27    75    -1     0     111  LongBuffer
 55282    75   259    37    75    -1     0      89  >
 55283    75   260     1    75    -1     0      63  {
 55284    75   266     5    75    -1     0       6  final
 55285    75   266    11    75    -1     0      53  long
 55286    75   266    15    75    -1     0      61  [
 55287    75   266    16    75    -1     0      62  ]
 55288    75   266    18    75    -1     0     111  hb
 55289    75   266    20    75    -1     0     102  ;
 55290    75   267     5    75    -1     0       6  final
 55291    75   267    11    75    -1     0      36  int
 55292    75   267    15    75    -1     0     111  offset
 55293    75   267    21    75    -1     0     102  ;
 55294    75   268     5    75    -1     0      39  boolean
 55295    75   268    13    75    -1     0     111  isReadOnly
 55296    75   268    23    75    -1     0     102  ;
 55297    75   268    23    75  1297     0    3017  STARTMETHOD
 55298    75   273     5    75  1297     0     111  LongBuffer
 55299    75   273    15    75  1297     0      59  (
 55300    75   273    16    75  1297     0      36  int
 55301    75   273    20    75  1297     0     111  mark
 55302    75   273    24    75  1297     0      66  ,
 55303    75   273    26    75  1297     0      36  int
 55304    75   273    30    75  1297     0     111  pos
 55305    75   273    33    75  1297     0      66  ,
 55306    75   273    35    75  1297     0      36  int
 55307    75   273    39    75  1297     0     111  lim
 55308    75   273    42    75  1297     0      66  ,
 55309    75   273    44    75  1297     0      36  int
 55310    75   273    48    75  1297     0     111  cap
 55311    75   273    51    75  1297     0      66  ,
 55312    75   274    18    75  1297     0      53  long
 55313    75   274    22    75  1297     0      61  [
 55314    75   274    23    75  1297     0      62  ]
 55315    75   274    25    75  1297     0     111  hb
 55316    75   274    27    75  1297     0      66  ,
 55317    75   274    29    75  1297     0      36  int
 55318    75   274    33    75  1297     0     111  offset
 55319    75   274    39    75  1297     0      60  )
 55320    75   275     5    75  1297     0      63  {
 55321    75   276     9    75  1297     0      27  super
 55322    75   276    14    75  1297     0      59  (
 55323    75   276    15    75  1297     0     111  mark
 55324    75   276    19    75  1297     0      66  ,
 55325    75   276    21    75  1297     0     111  pos
 55326    75   276    24    75  1297     0      66  ,
 55327    75   276    26    75  1297     0     111  lim
 55328    75   276    29    75  1297     0      66  ,
 55329    75   276    31    75  1297     0     111  cap
 55330    75   276    34    75  1297     0      60  )
 55331    75   276    35    75  1297     0     102  ;
 55332    75   277     9    75  1297     1     111  this.hb
 55333    75   277    17    75  1297     1      67  =
 55334    75   277    19    75  1297     1     111  hb
 55335    75   277    21    75  1297     1     102  ;
 55336    75   278     9    75  1297     1     111  this.offset
 55337    75   278    21    75  1297     1      67  =
 55338    75   278    23    75  1297     1     111  offset
 55339    75   278    29    75  1297     1     102  ;
 55340    75   279     5    75  1297     1      64  }
 55341    75   279     5    75  1297     0    3018  ENDMETHOD
 55342    75   279     5    75  1298     0    3019  STARTMETHOD
 55343    75   283     5    75  1298     0     111  LongBuffer
 55344    75   283    15    75  1298     0      59  (
 55345    75   283    16    75  1298     0      36  int
 55346    75   283    20    75  1298     0     111  mark
 55347    75   283    24    75  1298     0      66  ,
 55348    75   283    26    75  1298     0      36  int
 55349    75   283    30    75  1298     0     111  pos
 55350    75   283    33    75  1298     0      66  ,
 55351    75   283    35    75  1298     0      36  int
 55352    75   283    39    75  1298     0     111  lim
 55353    75   283    42    75  1298     0      66  ,
 55354    75   283    44    75  1298     0      36  int
 55355    75   283    48    75  1298     0     111  cap
 55356    75   283    51    75  1298     0      60  )
 55357    75   283    53    75  1298     0      63  {
 55358    75   284     9    75  1298     0      44  this
 55359    75   284    13    75  1298     0      59  (
 55360    75   284    14    75  1298     0     111  mark
 55361    75   284    18    75  1298     0      66  ,
 55362    75   284    20    75  1298     0     111  pos
 55363    75   284    23    75  1298     0      66  ,
 55364    75   284    25    75  1298     0     111  lim
 55365    75   284    28    75  1298     0      66  ,
 55366    75   284    30    75  1298     0     111  cap
 55367    75   284    33    75  1298     0      66  ,
 55368    75   284    35    75  1298     0      21  null
 55369    75   284    39    75  1298     0      66  ,
 55370    75   284    41    75  1298     0     112  0
 55371    75   284    42    75  1298     0      60  )
 55372    75   284    43    75  1298     1     102  ;
 55373    75   285     5    75  1298     1      64  }
 55374    75   285     5    75  1298     0    3020  ENDMETHOD
 55375    75   285     5    75  1299     0    3021  STARTMETHOD
 55376    75   326     5    75  1299     0      10  public
 55377    75   326    12    75  1299     0      45  static
 55378    75   326    19    75  1299     0     111  LongBuffer
 55379    75   326    30    75  1299     0     111  allocate
 55380    75   326    38    75  1299     0      59  (
 55381    75   326    39    75  1299     0      36  int
 55382    75   326    43    75  1299     0     111  capacity
 55383    75   326    51    75  1299     0      60  )
 55384    75   326    53    75  1299     0      63  {
 55385    75   327     9    75  1299     0      31  if
 55386    75   327    12    75  1299     0      59  (
 55387    75   327    13    75  1299     0     111  capacity
 55388    75   327    22    75  1299     0      93  <
 55389    75   327    24    75  1299     0     112  0
 55390    75   327    25    75  1299     0      60  )
 55391    75   328    13    75  1299     0      20  throw
 55392    75   328    19    75  1299     0      15  new
 55393    75   328    23    75  1299     0     111  IllegalArgumentException
 55394    75   328    47    75  1299     0      59  (
 55395    75   328    48    75  1299     0      60  )
 55396    75   328    49    75  1299     0     102  ;
 55397    75   329     9    75  1299     0      19  return
 55398    75   329    16    75  1299     0      15  new
 55399    75   329    20    75  1299     0     111  HeapLongBuffer
 55400    75   329    34    75  1299     0      59  (
 55401    75   329    35    75  1299     0     111  capacity
 55402    75   329    43    75  1299     0      66  ,
 55403    75   329    45    75  1299     0     111  capacity
 55404    75   329    53    75  1299     0      60  )
 55405    75   329    54    75  1299     1     102  ;
 55406    75   330     5    75  1299     1      64  }
 55407    75   330     5    75  1299     0    3022  ENDMETHOD
 55408    75   330     5    75  1300     0    3023  STARTMETHOD
 55409    75   363     5    75  1300     0      10  public
 55410    75   363    12    75  1300     0      45  static
 55411    75   363    19    75  1300     0     111  LongBuffer
 55412    75   363    30    75  1300     0     111  wrap
 55413    75   363    34    75  1300     0      59  (
 55414    75   363    35    75  1300     0      53  long
 55415    75   363    39    75  1300     0      61  [
 55416    75   363    40    75  1300     0      62  ]
 55417    75   363    42    75  1300     0     111  array
 55418    75   363    47    75  1300     0      66  ,
 55419    75   364    37    75  1300     0      36  int
 55420    75   364    41    75  1300     0     111  offset
 55421    75   364    47    75  1300     0      66  ,
 55422    75   364    49    75  1300     0      36  int
 55423    75   364    53    75  1300     0     111  length
 55424    75   364    59    75  1300     0      60  )
 55425    75   365     5    75  1300     0      63  {
 55426    75   366     9    75  1300     0      35  try
 55427    75   366    13    75  1300     0      63  {
 55428    75   367    13    75  1300     0      19  return
 55429    75   367    20    75  1300     0      15  new
 55430    75   367    24    75  1300     0     111  HeapLongBuffer
 55431    75   367    38    75  1300     0      59  (
 55432    75   367    39    75  1300     0     111  array
 55433    75   367    44    75  1300     0      66  ,
 55434    75   367    46    75  1300     0     111  offset
 55435    75   367    52    75  1300     0      66  ,
 55436    75   367    54    75  1300     0     111  length
 55437    75   367    60    75  1300     0      60  )
 55438    75   367    61    75  1300     0     102  ;
 55439    75   368     9    75  1300     0      64  }
 55440    75   368    11    75  1300     0      34  catch
 55441    75   368    17    75  1300     0      59  (
 55442    75   368    18    75  1300     0     111  IllegalArgumentException
 55443    75   368    43    75  1300     0     111  x
 55444    75   368    44    75  1300     0      60  )
 55445    75   368    46    75  1300     0      63  {
 55446    75   369    13    75  1300     0      20  throw
 55447    75   369    19    75  1300     0      15  new
 55448    75   369    23    75  1300     0     111  IndexOutOfBoundsException
 55449    75   369    48    75  1300     0      59  (
 55450    75   369    49    75  1300     0      60  )
 55451    75   369    50    75  1300     0     102  ;
 55452    75   370     9    75  1300     0      64  }
 55453    75   371     5    75  1300     0      64  }
 55454    75   371     5    75  1300     0    3024  ENDMETHOD
 55455    75   371     5    75  1301     0    3025  STARTMETHOD
 55456    75   389     5    75  1301     0      10  public
 55457    75   389    12    75  1301     0      45  static
 55458    75   389    19    75  1301     0     111  LongBuffer
 55459    75   389    30    75  1301     0     111  wrap
 55460    75   389    34    75  1301     0      59  (
 55461    75   389    35    75  1301     0      53  long
 55462    75   389    39    75  1301     0      61  [
 55463    75   389    40    75  1301     0      62  ]
 55464    75   389    42    75  1301     0     111  array
 55465    75   389    47    75  1301     0      60  )
 55466    75   389    49    75  1301     0      63  {
 55467    75   390     9    75  1301     0      19  return
 55468    75   390    16    75  1301     0     111  wrap
 55469    75   390    20    75  1301     0      59  (
 55470    75   390    21    75  1301     0     111  array
 55471    75   390    26    75  1301     0      66  ,
 55472    75   390    28    75  1301     0     112  0
 55473    75   390    29    75  1301     0      66  ,
 55474    75   390    31    75  1301     0     111  array.length
 55475    75   390    43    75  1301     0      60  )
 55476    75   390    44    75  1301     0     102  ;
 55477    75   391     5    75  1301     0      64  }
 55478    75   391     5    75  1301     0    3026  ENDMETHOD
 55479    75   503     5    75    -1     1      10  public
 55480    75   503    12    75    -1     1       7  abstract
 55481    75   503    21    75    -1     1     111  LongBuffer
 55482    75   503    32    75    -1     1     111  slice
 55483    75   503    37    75    -1     1      59  (
 55484    75   503    38    75    -1     1      60  )
 55485    75   503    39    75    -1     1     102  ;
 55486    75   520     5    75    -1     1      10  public
 55487    75   520    12    75    -1     1       7  abstract
 55488    75   520    21    75    -1     1     111  LongBuffer
 55489    75   520    32    75    -1     1     111  duplicate
 55490    75   520    41    75    -1     1      59  (
 55491    75   520    42    75    -1     1      60  )
 55492    75   520    43    75    -1     1     102  ;
 55493    75   540     5    75    -1     1      10  public
 55494    75   540    12    75    -1     1       7  abstract
 55495    75   540    21    75    -1     1     111  LongBuffer
 55496    75   540    32    75    -1     1     111  asReadOnlyBuffer
 55497    75   540    48    75    -1     1      59  (
 55498    75   540    49    75    -1     1      60  )
 55499    75   540    50    75    -1     1     102  ;
 55500    75   554     5    75    -1     0      10  public
 55501    75   554    12    75    -1     0       7  abstract
 55502    75   554    21    75    -1     0      53  long
 55503    75   554    26    75    -1     0     111  get
 55504    75   554    29    75    -1     0      59  (
 55505    75   554    30    75    -1     0      60  )
 55506    75   554    31    75    -1     0     102  ;
 55507    75   573     5    75    -1     0      10  public
 55508    75   573    12    75    -1     0       7  abstract
 55509    75   573    21    75    -1     0     111  LongBuffer
 55510    75   573    32    75    -1     0     111  put
 55511    75   573    35    75    -1     0      59  (
 55512    75   573    36    75    -1     0      53  long
 55513    75   573    41    75    -1     0     111  l
 55514    75   573    42    75    -1     0      60  )
 55515    75   573    43    75    -1     0     102  ;
 55516    75   588     5    75    -1     0      10  public
 55517    75   588    12    75    -1     0       7  abstract
 55518    75   588    21    75    -1     0      53  long
 55519    75   588    26    75    -1     0     111  get
 55520    75   588    29    75    -1     0      59  (
 55521    75   588    30    75    -1     0      36  int
 55522    75   588    34    75    -1     0     111  index
 55523    75   588    39    75    -1     0      60  )
 55524    75   588    40    75    -1     0     102  ;
 55525    75   611     5    75    -1     0      10  public
 55526    75   611    12    75    -1     0       7  abstract
 55527    75   611    21    75    -1     0     111  LongBuffer
 55528    75   611    32    75    -1     0     111  put
 55529    75   611    35    75    -1     0      59  (
 55530    75   611    36    75    -1     0      36  int
 55531    75   611    40    75    -1     0     111  index
 55532    75   611    45    75    -1     0      66  ,
 55533    75   611    47    75    -1     0      53  long
 55534    75   611    52    75    -1     0     111  l
 55535    75   611    53    75    -1     0      60  )
 55536    75   611    54    75    -1     0     102  ;
 55537    75   611    54    75  1302     0    3027  STARTMETHOD
 55538    75   665     5    75  1302     0      10  public
 55539    75   665    12    75  1302     0     111  LongBuffer
 55540    75   665    23    75  1302     0     111  get
 55541    75   665    26    75  1302     0      59  (
 55542    75   665    27    75  1302     0      53  long
 55543    75   665    31    75  1302     0      61  [
 55544    75   665    32    75  1302     0      62  ]
 55545    75   665    34    75  1302     0     111  dst
 55546    75   665    37    75  1302     0      66  ,
 55547    75   665    39    75  1302     0      36  int
 55548    75   665    43    75  1302     0     111  offset
 55549    75   665    49    75  1302     0      66  ,
 55550    75   665    51    75  1302     0      36  int
 55551    75   665    55    75  1302     0     111  length
 55552    75   665    61    75  1302     0      60  )
 55553    75   665    63    75  1302     0      63  {
 55554    75   666     9    75  1302     0     111  checkBounds
 55555    75   666    20    75  1302     0      59  (
 55556    75   666    21    75  1302     0     111  offset
 55557    75   666    27    75  1302     0      66  ,
 55558    75   666    29    75  1302     0     111  length
 55559    75   666    35    75  1302     0      66  ,
 55560    75   666    37    75  1302     0     111  dst.length
 55561    75   666    47    75  1302     0      60  )
 55562    75   666    48    75  1302     0     102  ;
 55563    75   667     9    75  1302     0      31  if
 55564    75   667    12    75  1302     0      59  (
 55565    75   667    13    75  1302     0     111  length
 55566    75   667    20    75  1302     0      89  >
 55567    75   667    22    75  1302     0     111  remaining
 55568    75   667    31    75  1302     0      59  (
 55569    75   667    32    75  1302     0      60  )
 55570    75   667    33    75  1302     0      60  )
 55571    75   668    13    75  1302     0      20  throw
 55572    75   668    19    75  1302     0      15  new
 55573    75   668    23    75  1302     0     111  BufferUnderflowException
 55574    75   668    47    75  1302     0      59  (
 55575    75   668    48    75  1302     0      60  )
 55576    75   668    49    75  1302     0     102  ;
 55577    75   669     9    75  1302     0      36  int
 55578    75   669    13    75  1302     0     111  end
 55579    75   669    17    75  1302     0      67  =
 55580    75   669    19    75  1302     0     111  offset
 55581    75   669    26    75  1302     0      74  +
 55582    75   669    28    75  1302     0     111  length
 55583    75   669    34    75  1302     0     102  ;
 55584    75   670     9    75  1302     0      37  for
 55585    75   670    13    75  1302     0      59  (
 55586    75   670    14    75  1302     0      36  int
 55587    75   670    18    75  1302     0     111  i
 55588    75   670    20    75  1302     0      67  =
 55589    75   670    22    75  1302     0     111  offset
 55590    75   670    28    75  1302     0     102  ;
 55591    75   670    30    75  1302     0     111  i
 55592    75   670    32    75  1302     0      93  <
 55593    75   670    34    75  1302     0     111  end
 55594    75   670    37    75  1302     0     102  ;
 55595    75   670    39    75  1302     0     111  i
 55596    75   670    40    75  1302     0      76  ++
 55597    75   670    42    75  1302     0      60  )
 55598    75   671    13    75  1302     0     111  dst
 55599    75   671    16    75  1302     0      61  [
 55600    75   671    17    75  1302     0     111  i
 55601    75   671    18    75  1302     0      62  ]
 55602    75   671    20    75  1302     0      67  =
 55603    75   671    22    75  1302     0     111  get
 55604    75   671    25    75  1302     0      59  (
 55605    75   671    26    75  1302     0      60  )
 55606    75   671    27    75  1302     0     102  ;
 55607    75   672     9    75  1302     0      19  return
 55608    75   672    16    75  1302     0      44  this
 55609    75   672    20    75  1302     0     102  ;
 55610    75   673     5    75  1302     0      64  }
 55611    75   673     5    75  1302     0    3028  ENDMETHOD
 55612    75   673     5    75  1303     0    3029  STARTMETHOD
 55613    75   691     5    75  1303     0      10  public
 55614    75   691    12    75  1303     0     111  LongBuffer
 55615    75   691    23    75  1303     0     111  get
 55616    75   691    26    75  1303     0      59  (
 55617    75   691    27    75  1303     0      53  long
 55618    75   691    31    75  1303     0      61  [
 55619    75   691    32    75  1303     0      62  ]
 55620    75   691    34    75  1303     0     111  dst
 55621    75   691    37    75  1303     0      60  )
 55622    75   691    39    75  1303     0      63  {
 55623    75   692     9    75  1303     0      19  return
 55624    75   692    16    75  1303     0     111  get
 55625    75   692    19    75  1303     0      59  (
 55626    75   692    20    75  1303     0     111  dst
 55627    75   692    23    75  1303     0      66  ,
 55628    75   692    25    75  1303     0     112  0
 55629    75   692    26    75  1303     0      66  ,
 55630    75   692    28    75  1303     0     111  dst.length
 55631    75   692    38    75  1303     0      60  )
 55632    75   692    39    75  1303     0     102  ;
 55633    75   693     5    75  1303     0      64  }
 55634    75   693     5    75  1303     0    3030  ENDMETHOD
 55635    75   693     5    75  1304     0    3031  STARTMETHOD
 55636    75   739     5    75  1304     0      10  public
 55637    75   739    12    75  1304     0     111  LongBuffer
 55638    75   739    23    75  1304     0     111  put
 55639    75   739    26    75  1304     0      59  (
 55640    75   739    27    75  1304     0     111  LongBuffer
 55641    75   739    38    75  1304     0     111  src
 55642    75   739    41    75  1304     0      60  )
 55643    75   739    43    75  1304     0      63  {
 55644    75   740     9    75  1304     0      31  if
 55645    75   740    12    75  1304     0      59  (
 55646    75   740    13    75  1304     0     111  src
 55647    75   740    17    75  1304     0      68  ==
 55648    75   740    20    75  1304     0      44  this
 55649    75   740    24    75  1304     0      60  )
 55650    75   741    13    75  1304     0      20  throw
 55651    75   741    19    75  1304     0      15  new
 55652    75   741    23    75  1304     0     111  IllegalArgumentException
 55653    75   741    47    75  1304     0      59  (
 55654    75   741    48    75  1304     0      60  )
 55655    75   741    49    75  1304     0     102  ;
 55656    75   742     9    75  1304     0      36  int
 55657    75   742    13    75  1304     0     111  n
 55658    75   742    15    75  1304     0      67  =
 55659    75   742    17    75  1304     0     111  src.remaining
 55660    75   742    30    75  1304     0      59  (
 55661    75   742    31    75  1304     0      60  )
 55662    75   742    32    75  1304     0     102  ;
 55663    75   743     9    75  1304     0      31  if
 55664    75   743    12    75  1304     0      59  (
 55665    75   743    13    75  1304     0     111  n
 55666    75   743    15    75  1304     0      89  >
 55667    75   743    17    75  1304     0     111  remaining
 55668    75   743    26    75  1304     0      59  (
 55669    75   743    27    75  1304     0      60  )
 55670    75   743    28    75  1304     0      60  )
 55671    75   744    13    75  1304     0      20  throw
 55672    75   744    19    75  1304     0      15  new
 55673    75   744    23    75  1304     0     111  BufferOverflowException
 55674    75   744    46    75  1304     0      59  (
 55675    75   744    47    75  1304     0      60  )
 55676    75   744    48    75  1304     0     102  ;
 55677    75   745     9    75  1304     0      37  for
 55678    75   745    13    75  1304     0      59  (
 55679    75   745    14    75  1304     0      36  int
 55680    75   745    18    75  1304     0     111  i
 55681    75   745    20    75  1304     0      67  =
 55682    75   745    22    75  1304     0     112  0
 55683    75   745    23    75  1304     0     102  ;
 55684    75   745    25    75  1304     0     111  i
 55685    75   745    27    75  1304     0      93  <
 55686    75   745    29    75  1304     0     111  n
 55687    75   745    30    75  1304     0     102  ;
 55688    75   745    32    75  1304     0     111  i
 55689    75   745    33    75  1304     0      76  ++
 55690    75   745    35    75  1304     0      60  )
 55691    75   746    13    75  1304     0     111  put
 55692    75   746    16    75  1304     0      59  (
 55693    75   746    17    75  1304     0     111  src.get
 55694    75   746    24    75  1304     0      59  (
 55695    75   746    25    75  1304     0      60  )
 55696    75   746    26    75  1304     0      60  )
 55697    75   746    27    75  1304     0     102  ;
 55698    75   747     9    75  1304     0      19  return
 55699    75   747    16    75  1304     0      44  this
 55700    75   747    20    75  1304     0     102  ;
 55701    75   748     5    75  1304     0      64  }
 55702    75   748     5    75  1304     0    3032  ENDMETHOD
 55703    75   748     5    75  1305     0    3033  STARTMETHOD
 55704    75   800     5    75  1305     0      10  public
 55705    75   800    12    75  1305     0     111  LongBuffer
 55706    75   800    23    75  1305     0     111  put
 55707    75   800    26    75  1305     0      59  (
 55708    75   800    27    75  1305     0      53  long
 55709    75   800    31    75  1305     0      61  [
 55710    75   800    32    75  1305     0      62  ]
 55711    75   800    34    75  1305     0     111  src
 55712    75   800    37    75  1305     0      66  ,
 55713    75   800    39    75  1305     0      36  int
 55714    75   800    43    75  1305     0     111  offset
 55715    75   800    49    75  1305     0      66  ,
 55716    75   800    51    75  1305     0      36  int
 55717    75   800    55    75  1305     0     111  length
 55718    75   800    61    75  1305     0      60  )
 55719    75   800    63    75  1305     0      63  {
 55720    75   801     9    75  1305     0     111  checkBounds
 55721    75   801    20    75  1305     0      59  (
 55722    75   801    21    75  1305     0     111  offset
 55723    75   801    27    75  1305     0      66  ,
 55724    75   801    29    75  1305     0     111  length
 55725    75   801    35    75  1305     0      66  ,
 55726    75   801    37    75  1305     0     111  src.length
 55727    75   801    47    75  1305     0      60  )
 55728    75   801    48    75  1305     0     102  ;
 55729    75   802     9    75  1305     0      31  if
 55730    75   802    12    75  1305     0      59  (
 55731    75   802    13    75  1305     0     111  length
 55732    75   802    20    75  1305     0      89  >
 55733    75   802    22    75  1305     0     111  remaining
 55734    75   802    31    75  1305     0      59  (
 55735    75   802    32    75  1305     0      60  )
 55736    75   802    33    75  1305     0      60  )
 55737    75   803    13    75  1305     0      20  throw
 55738    75   803    19    75  1305     0      15  new
 55739    75   803    23    75  1305     0     111  BufferOverflowException
 55740    75   803    46    75  1305     0      59  (
 55741    75   803    47    75  1305     0      60  )
 55742    75   803    48    75  1305     0     102  ;
 55743    75   804     9    75  1305     0      36  int
 55744    75   804    13    75  1305     0     111  end
 55745    75   804    17    75  1305     0      67  =
 55746    75   804    19    75  1305     0     111  offset
 55747    75   804    26    75  1305     0      74  +
 55748    75   804    28    75  1305     0     111  length
 55749    75   804    34    75  1305     0     102  ;
 55750    75   805     9    75  1305     0      37  for
 55751    75   805    13    75  1305     0      59  (
 55752    75   805    14    75  1305     0      36  int
 55753    75   805    18    75  1305     0     111  i
 55754    75   805    20    75  1305     0      67  =
 55755    75   805    22    75  1305     0     111  offset
 55756    75   805    28    75  1305     0     102  ;
 55757    75   805    30    75  1305     0     111  i
 55758    75   805    32    75  1305     0      93  <
 55759    75   805    34    75  1305     0     111  end
 55760    75   805    37    75  1305     0     102  ;
 55761    75   805    39    75  1305     0     111  i
 55762    75   805    40    75  1305     0      76  ++
 55763    75   805    42    75  1305     0      60  )
 55764    75   806    13    75  1305     0     111  this.put
 55765    75   806    21    75  1305     0      59  (
 55766    75   806    22    75  1305     0     111  src
 55767    75   806    25    75  1305     0      61  [
 55768    75   806    26    75  1305     0     111  i
 55769    75   806    27    75  1305     0      62  ]
 55770    75   806    28    75  1305     0      60  )
 55771    75   806    29    75  1305     0     102  ;
 55772    75   807     9    75  1305     0      19  return
 55773    75   807    16    75  1305     0      44  this
 55774    75   807    20    75  1305     0     102  ;
 55775    75   808     5    75  1305     0      64  }
 55776    75   808     5    75  1305     0    3034  ENDMETHOD
 55777    75   808     5    75  1306     0    3035  STARTMETHOD
 55778    75   829     5    75  1306     0      10  public
 55779    75   829    12    75  1306     0       6  final
 55780    75   829    18    75  1306     0     111  LongBuffer
 55781    75   829    29    75  1306     0     111  put
 55782    75   829    32    75  1306     0      59  (
 55783    75   829    33    75  1306     0      53  long
 55784    75   829    37    75  1306     0      61  [
 55785    75   829    38    75  1306     0      62  ]
 55786    75   829    40    75  1306     0     111  src
 55787    75   829    43    75  1306     0      60  )
 55788    75   829    45    75  1306     0      63  {
 55789    75   830     9    75  1306     0      19  return
 55790    75   830    16    75  1306     0     111  put
 55791    75   830    19    75  1306     0      59  (
 55792    75   830    20    75  1306     0     111  src
 55793    75   830    23    75  1306     0      66  ,
 55794    75   830    25    75  1306     0     112  0
 55795    75   830    26    75  1306     0      66  ,
 55796    75   830    28    75  1306     0     111  src.length
 55797    75   830    38    75  1306     0      60  )
 55798    75   830    39    75  1306     0     102  ;
 55799    75   831     5    75  1306     0      64  }
 55800    75   831     5    75  1306     0    3036  ENDMETHOD
 55801    75   831     5    75  1307     0    3037  STARTMETHOD
 55802    75   932     5    75  1307     0      10  public
 55803    75   932    12    75  1307     0       6  final
 55804    75   932    18    75  1307     0      39  boolean
 55805    75   932    26    75  1307     0     111  hasArray
 55806    75   932    34    75  1307     0      59  (
 55807    75   932    35    75  1307     0      60  )
 55808    75   932    37    75  1307     0      63  {
 55809    75   933     9    75  1307     0      19  return
 55810    75   933    16    75  1307     0      59  (
 55811    75   933    17    75  1307     0     111  hb
 55812    75   933    20    75  1307     0      71  !=
 55813    75   933    23    75  1307     0      21  null
 55814    75   933    27    75  1307     0      60  )
 55815    75   933    29    75  1307     0     101  &&
 55816    75   933    32    75  1307     0      69  !
 55817    75   933    33    75  1307     0     111  isReadOnly
 55818    75   933    43    75  1307     0     102  ;
 55819    75   934     5    75  1307     0      64  }
 55820    75   934     5    75  1307     0    3038  ENDMETHOD
 55821    75   934     5    75  1308     0    3039  STARTMETHOD
 55822    75   955     5    75  1308     0      10  public
 55823    75   955    12    75  1308     0       6  final
 55824    75   955    18    75  1308     0      53  long
 55825    75   955    22    75  1308     0      61  [
 55826    75   955    23    75  1308     0      62  ]
 55827    75   955    25    75  1308     0     111  array
 55828    75   955    30    75  1308     0      59  (
 55829    75   955    31    75  1308     0      60  )
 55830    75   955    33    75  1308     0      63  {
 55831    75   956     9    75  1308     0      31  if
 55832    75   956    12    75  1308     0      59  (
 55833    75   956    13    75  1308     0     111  hb
 55834    75   956    16    75  1308     0      68  ==
 55835    75   956    19    75  1308     0      21  null
 55836    75   956    23    75  1308     0      60  )
 55837    75   957    13    75  1308     0      20  throw
 55838    75   957    19    75  1308     0      15  new
 55839    75   957    23    75  1308     0     111  UnsupportedOperationException
 55840    75   957    52    75  1308     0      59  (
 55841    75   957    53    75  1308     0      60  )
 55842    75   957    54    75  1308     0     102  ;
 55843    75   958     9    75  1308     0      31  if
 55844    75   958    12    75  1308     0      59  (
 55845    75   958    13    75  1308     0     111  isReadOnly
 55846    75   958    23    75  1308     0      60  )
 55847    75   959    13    75  1308     0      20  throw
 55848    75   959    19    75  1308     0      15  new
 55849    75   959    23    75  1308     0     111  ReadOnlyBufferException
 55850    75   959    46    75  1308     0      59  (
 55851    75   959    47    75  1308     0      60  )
 55852    75   959    48    75  1308     0     102  ;
 55853    75   960     9    75  1308     0      19  return
 55854    75   960    16    75  1308     0     111  hb
 55855    75   960    18    75  1308     0     102  ;
 55856    75   961     5    75  1308     0      64  }
 55857    75   961     5    75  1308     0    3040  ENDMETHOD
 55858    75   961     5    75  1309     0    3041  STARTMETHOD
 55859    75   983     5    75  1309     0      10  public
 55860    75   983    12    75  1309     0       6  final
 55861    75   983    18    75  1309     0      36  int
 55862    75   983    22    75  1309     0     111  arrayOffset
 55863    75   983    33    75  1309     0      59  (
 55864    75   983    34    75  1309     0      60  )
 55865    75   983    36    75  1309     0      63  {
 55866    75   984     9    75  1309     0      31  if
 55867    75   984    12    75  1309     0      59  (
 55868    75   984    13    75  1309     0     111  hb
 55869    75   984    16    75  1309     0      68  ==
 55870    75   984    19    75  1309     0      21  null
 55871    75   984    23    75  1309     0      60  )
 55872    75   985    13    75  1309     0      20  throw
 55873    75   985    19    75  1309     0      15  new
 55874    75   985    23    75  1309     0     111  UnsupportedOperationException
 55875    75   985    52    75  1309     0      59  (
 55876    75   985    53    75  1309     0      60  )
 55877    75   985    54    75  1309     0     102  ;
 55878    75   986     9    75  1309     0      31  if
 55879    75   986    12    75  1309     0      59  (
 55880    75   986    13    75  1309     0     111  isReadOnly
 55881    75   986    23    75  1309     0      60  )
 55882    75   987    13    75  1309     0      20  throw
 55883    75   987    19    75  1309     0      15  new
 55884    75   987    23    75  1309     0     111  ReadOnlyBufferException
 55885    75   987    46    75  1309     0      59  (
 55886    75   987    47    75  1309     0      60  )
 55887    75   987    48    75  1309     0     102  ;
 55888    75   988     9    75  1309     0      19  return
 55889    75   988    16    75  1309     0     111  offset
 55890    75   988    22    75  1309     0     102  ;
 55891    75   989     5    75  1309     0      64  }
 55892    75   989     5    75  1309     0    3042  ENDMETHOD
 55893    75  1030     5    75    -1     0      10  public
 55894    75  1030    12    75    -1     0       7  abstract
 55895    75  1030    21    75    -1     0     111  LongBuffer
 55896    75  1030    32    75    -1     0     111  compact
 55897    75  1030    39    75    -1     0      59  (
 55898    75  1030    40    75    -1     0      60  )
 55899    75  1030    41    75    -1     0     102  ;
 55900    75  1037     5    75    -1     0      10  public
 55901    75  1037    12    75    -1     0       7  abstract
 55902    75  1037    21    75    -1     0      39  boolean
 55903    75  1037    29    75    -1     0     111  isDirect
 55904    75  1037    37    75    -1     0      59  (
 55905    75  1037    38    75    -1     0      60  )
 55906    75  1037    39    75    -1     0     102  ;
 55907    75  1037    39    75  1310     0    3043  STARTMETHOD
 55908    75  1046     5    75  1310     0      10  public
 55909    75  1046    12    75  1310     0     111  String
 55910    75  1046    19    75  1310     0     111  toString
 55911    75  1046    27    75  1310     0      59  (
 55912    75  1046    28    75  1310     0      60  )
 55913    75  1046    30    75  1310     0      63  {
 55914    75  1047     9    75  1310     0     111  StringBuffer
 55915    75  1047    22    75  1310     0     111  sb
 55916    75  1047    25    75  1310     0      67  =
 55917    75  1047    27    75  1310     0      15  new
 55918    75  1047    31    75  1310     0     111  StringBuffer
 55919    75  1047    43    75  1310     0      59  (
 55920    75  1047    44    75  1310     0      60  )
 55921    75  1047    45    75  1310     0     102  ;
 55922    75  1048     9    75  1310     0     111  sb.append
 55923    75  1048    18    75  1310     0      59  (
 55924    75  1048    19    75  1310     0     111  getClass
 55925    75  1048    27    75  1310     0      59  (
 55926    75  1048    28    75  1310     0      60  )
 55927    75  1048    29    75  1310     0      54  .
 55928    75  1048    30    75  1310     0     111  getName
 55929    75  1048    37    75  1310     0      59  (
 55930    75  1048    38    75  1310     0      60  )
 55931    75  1048    39    75  1310     0      60  )
 55932    75  1048    40    75  1310     0     102  ;
 55933    75  1049     9    75  1310     0     111  sb.append
 55934    75  1049    18    75  1310     0      59  (
 55935    75  1049    19    75  1310     0     107  "[pos="
 55936    75  1049    26    75  1310     0      60  )
 55937    75  1049    27    75  1310     0     102  ;
 55938    75  1050     9    75  1310     0     111  sb.append
 55939    75  1050    18    75  1310     0      59  (
 55940    75  1050    19    75  1310     0     111  position
 55941    75  1050    27    75  1310     0      59  (
 55942    75  1050    28    75  1310     0      60  )
 55943    75  1050    29    75  1310     0      60  )
 55944    75  1050    30    75  1310     0     102  ;
 55945    75  1051     9    75  1310     0     111  sb.append
 55946    75  1051    18    75  1310     0      59  (
 55947    75  1051    19    75  1310     0     107  " lim="
 55948    75  1051    26    75  1310     0      60  )
 55949    75  1051    27    75  1310     0     102  ;
 55950    75  1052     9    75  1310     0     111  sb.append
 55951    75  1052    18    75  1310     0      59  (
 55952    75  1052    19    75  1310     0     111  limit
 55953    75  1052    24    75  1310     0      59  (
 55954    75  1052    25    75  1310     0      60  )
 55955    75  1052    26    75  1310     0      60  )
 55956    75  1052    27    75  1310     0     102  ;
 55957    75  1053     9    75  1310     0     111  sb.append
 55958    75  1053    18    75  1310     0      59  (
 55959    75  1053    19    75  1310     0     107  " cap="
 55960    75  1053    26    75  1310     0      60  )
 55961    75  1053    27    75  1310     0     102  ;
 55962    75  1054     9    75  1310     0     111  sb.append
 55963    75  1054    18    75  1310     0      59  (
 55964    75  1054    19    75  1310     0     111  capacity
 55965    75  1054    27    75  1310     0      59  (
 55966    75  1054    28    75  1310     0      60  )
 55967    75  1054    29    75  1310     0      60  )
 55968    75  1054    30    75  1310     0     102  ;
 55969    75  1055     9    75  1310     0     111  sb.append
 55970    75  1055    18    75  1310     0      59  (
 55971    75  1055    19    75  1310     0     107  "]"
 55972    75  1055    22    75  1310     0      60  )
 55973    75  1055    23    75  1310     0     102  ;
 55974    75  1056     9    75  1310     0      19  return
 55975    75  1056    16    75  1310     0     111  sb.toString
 55976    75  1056    27    75  1310     0      59  (
 55977    75  1056    28    75  1310     0      60  )
 55978    75  1056    29    75  1310     0     102  ;
 55979    75  1057     5    75  1310     0      64  }
 55980    75  1057     5    75  1310     0    3044  ENDMETHOD
 55981    75  1057     5    75  1311     0    3045  STARTMETHOD
 55982    75  1077     5    75  1311     0      10  public
 55983    75  1077    12    75  1311     0      36  int
 55984    75  1077    16    75  1311     0     111  hashCode
 55985    75  1077    24    75  1311     0      59  (
 55986    75  1077    25    75  1311     0      60  )
 55987    75  1077    27    75  1311     0      63  {
 55988    75  1078     9    75  1311     0      36  int
 55989    75  1078    13    75  1311     0     111  h
 55990    75  1078    15    75  1311     0      67  =
 55991    75  1078    17    75  1311     0     112  1
 55992    75  1078    18    75  1311     0     102  ;
 55993    75  1079     9    75  1311     0      36  int
 55994    75  1079    13    75  1311     0     111  p
 55995    75  1079    15    75  1311     0      67  =
 55996    75  1079    17    75  1311     0     111  position
 55997    75  1079    25    75  1311     0      59  (
 55998    75  1079    26    75  1311     0      60  )
 55999    75  1079    27    75  1311     0     102  ;
 56000    75  1080     9    75  1311     0      37  for
 56001    75  1080    13    75  1311     0      59  (
 56002    75  1080    14    75  1311     0      36  int
 56003    75  1080    18    75  1311     0     111  i
 56004    75  1080    20    75  1311     0      67  =
 56005    75  1080    22    75  1311     0     111  limit
 56006    75  1080    27    75  1311     0      59  (
 56007    75  1080    28    75  1311     0      60  )
 56008    75  1080    30    75  1311     0      77  -
 56009    75  1080    32    75  1311     0     112  1
 56010    75  1080    33    75  1311     0     102  ;
 56011    75  1080    35    75  1311     0     111  i
 56012    75  1080    37    75  1311     0      88  >=
 56013    75  1080    40    75  1311     0     111  p
 56014    75  1080    41    75  1311     0     102  ;
 56015    75  1080    43    75  1311     0     111  i
 56016    75  1080    44    75  1311     0      79  --
 56017    75  1080    46    75  1311     0      60  )
 56018    75  1081    13    75  1311     0     111  h
 56019    75  1081    15    75  1311     0      67  =
 56020    75  1081    17    75  1311     0     112  31
 56021    75  1081    20    75  1311     0      80  *
 56022    75  1081    22    75  1311     0     111  h
 56023    75  1081    24    75  1311     0      74  +
 56024    75  1081    26    75  1311     0      59  (
 56025    75  1081    27    75  1311     0      36  int
 56026    75  1081    30    75  1311     0      60  )
 56027    75  1081    31    75  1311     0     111  get
 56028    75  1081    34    75  1311     0      59  (
 56029    75  1081    35    75  1311     0     111  i
 56030    75  1081    36    75  1311     0      60  )
 56031    75  1081    37    75  1311     0     102  ;
 56032    75  1082     9    75  1311     0      19  return
 56033    75  1082    16    75  1311     0     111  h
 56034    75  1082    17    75  1311     0     102  ;
 56035    75  1083     5    75  1311     0      64  }
 56036    75  1083     5    75  1311     0    3046  ENDMETHOD
 56037    75  1083     5    75  1312     0    3047  STARTMETHOD
 56038    75  1110     5    75  1312     0      10  public
 56039    75  1110    12    75  1312     0      39  boolean
 56040    75  1110    20    75  1312     0     111  equals
 56041    75  1110    26    75  1312     0      59  (
 56042    75  1110    27    75  1312     0     111  Object
 56043    75  1110    34    75  1312     0     111  ob
 56044    75  1110    36    75  1312     0      60  )
 56045    75  1110    38    75  1312     0      63  {
 56046    75  1111     9    75  1312     0      31  if
 56047    75  1111    12    75  1312     0      59  (
 56048    75  1111    13    75  1312     0      44  this
 56049    75  1111    18    75  1312     0      68  ==
 56050    75  1111    21    75  1312     0     111  ob
 56051    75  1111    23    75  1312     0      60  )
 56052    75  1112    13    75  1312     0      19  return
 56053    75  1112    20    75  1312     0      52  true
 56054    75  1112    24    75  1312     0     102  ;
 56055    75  1113     9    75  1312     0      31  if
 56056    75  1113    12    75  1312     0      59  (
 56057    75  1113    13    75  1312     0      69  !
 56058    75  1113    14    75  1312     0      59  (
 56059    75  1113    15    75  1312     0     111  ob
 56060    75  1113    18    75  1312     0      16  instanceof
 56061    75  1113    29    75  1312     0     111  LongBuffer
 56062    75  1113    39    75  1312     0      60  )
 56063    75  1113    40    75  1312     0      60  )
 56064    75  1114    13    75  1312     0      19  return
 56065    75  1114    20    75  1312     0      43  false
 56066    75  1114    25    75  1312     0     102  ;
 56067    75  1115     9    75  1312     0     111  LongBuffer
 56068    75  1115    20    75  1312     0     111  that
 56069    75  1115    25    75  1312     0      67  =
 56070    75  1115    27    75  1312     0      59  (
 56071    75  1115    28    75  1312     0     111  LongBuffer
 56072    75  1115    38    75  1312     0      60  )
 56073    75  1115    39    75  1312     0     111  ob
 56074    75  1115    41    75  1312     0     102  ;
 56075    75  1116     9    75  1312     0      31  if
 56076    75  1116    12    75  1312     0      59  (
 56077    75  1116    13    75  1312     0     111  this.remaining
 56078    75  1116    27    75  1312     0      59  (
 56079    75  1116    28    75  1312     0      60  )
 56080    75  1116    30    75  1312     0      71  !=
 56081    75  1116    33    75  1312     0     111  that.remaining
 56082    75  1116    47    75  1312     0      59  (
 56083    75  1116    48    75  1312     0      60  )
 56084    75  1116    49    75  1312     0      60  )
 56085    75  1117    13    75  1312     0      19  return
 56086    75  1117    20    75  1312     0      43  false
 56087    75  1117    25    75  1312     0     102  ;
 56088    75  1118     9    75  1312     0      36  int
 56089    75  1118    13    75  1312     0     111  p
 56090    75  1118    15    75  1312     0      67  =
 56091    75  1118    17    75  1312     0     111  this.position
 56092    75  1118    30    75  1312     0      59  (
 56093    75  1118    31    75  1312     0      60  )
 56094    75  1118    32    75  1312     0     102  ;
 56095    75  1119     9    75  1312     0      37  for
 56096    75  1119    13    75  1312     0      59  (
 56097    75  1119    14    75  1312     0      36  int
 56098    75  1119    18    75  1312     0     111  i
 56099    75  1119    20    75  1312     0      67  =
 56100    75  1119    22    75  1312     0     111  this.limit
 56101    75  1119    32    75  1312     0      59  (
 56102    75  1119    33    75  1312     0      60  )
 56103    75  1119    35    75  1312     0      77  -
 56104    75  1119    37    75  1312     0     112  1
 56105    75  1119    38    75  1312     0      66  ,
 56106    75  1119    40    75  1312     0     111  j
 56107    75  1119    42    75  1312     0      67  =
 56108    75  1119    44    75  1312     0     111  that.limit
 56109    75  1119    54    75  1312     0      59  (
 56110    75  1119    55    75  1312     0      60  )
 56111    75  1119    57    75  1312     0      77  -
 56112    75  1119    59    75  1312     0     112  1
 56113    75  1119    60    75  1312     0     102  ;
 56114    75  1119    62    75  1312     0     111  i
 56115    75  1119    64    75  1312     0      88  >=
 56116    75  1119    67    75  1312     0     111  p
 56117    75  1119    68    75  1312     0     102  ;
 56118    75  1119    70    75  1312     0     111  i
 56119    75  1119    71    75  1312     0      79  --
 56120    75  1119    73    75  1312     0      66  ,
 56121    75  1119    75    75  1312     0     111  j
 56122    75  1119    76    75  1312     0      79  --
 56123    75  1119    78    75  1312     0      60  )
 56124    75  1119    80    75  1312     0      63  {
 56125    75  1120    13    75  1312     1      53  long
 56126    75  1120    18    75  1312     1     111  v1
 56127    75  1120    21    75  1312     1      67  =
 56128    75  1120    23    75  1312     1     111  this.get
 56129    75  1120    31    75  1312     1      59  (
 56130    75  1120    32    75  1312     1     111  i
 56131    75  1120    33    75  1312     1      60  )
 56132    75  1120    34    75  1312     1     102  ;
 56133    75  1121    13    75  1312     1      53  long
 56134    75  1121    18    75  1312     1     111  v2
 56135    75  1121    21    75  1312     1      67  =
 56136    75  1121    23    75  1312     1     111  that.get
 56137    75  1121    31    75  1312     1      59  (
 56138    75  1121    32    75  1312     1     111  j
 56139    75  1121    33    75  1312     1      60  )
 56140    75  1121    34    75  1312     1     102  ;
 56141    75  1122    13    75  1312     0      31  if
 56142    75  1122    16    75  1312     0      59  (
 56143    75  1122    17    75  1312     0     111  v1
 56144    75  1122    20    75  1312     0      71  !=
 56145    75  1122    23    75  1312     0     111  v2
 56146    75  1122    25    75  1312     0      60  )
 56147    75  1122    27    75  1312     0      63  {
 56148    75  1123    17    75  1312     0      31  if
 56149    75  1123    20    75  1312     0      59  (
 56150    75  1123    21    75  1312     0      59  (
 56151    75  1123    22    75  1312     0     111  v1
 56152    75  1123    25    75  1312     0      71  !=
 56153    75  1123    28    75  1312     0     111  v1
 56154    75  1123    30    75  1312     0      60  )
 56155    75  1123    32    75  1312     0     101  &&
 56156    75  1123    35    75  1312     0      59  (
 56157    75  1123    36    75  1312     0     111  v2
 56158    75  1123    39    75  1312     0      71  !=
 56159    75  1123    42    75  1312     0     111  v2
 56160    75  1123    44    75  1312     0      60  )
 56161    75  1123    45    75  1312     0      60  )
 56162    75  1124    21    75  1312     0      46  continue
 56163    75  1124    29    75  1312     0     102  ;
 56164    75  1125    17    75  1312     0      19  return
 56165    75  1125    24    75  1312     0      43  false
 56166    75  1125    29    75  1312     0     102  ;
 56167    75  1126    13    75  1312     1      64  }
 56168    75  1127     9    75  1312     1      64  }
 56169    75  1128     9    75  1312     0      19  return
 56170    75  1128    16    75  1312     0      52  true
 56171    75  1128    20    75  1312     0     102  ;
 56172    75  1129     5    75  1312     0      64  }
 56173    75  1129     5    75  1312     0    3048  ENDMETHOD
 56174    75  1129     5    75  1313     0    3049  STARTMETHOD
 56175    75  1143     5    75  1313     0      10  public
 56176    75  1143    12    75  1313     0      36  int
 56177    75  1143    16    75  1313     0     111  compareTo
 56178    75  1143    25    75  1313     0      59  (
 56179    75  1143    26    75  1313     0     111  LongBuffer
 56180    75  1143    37    75  1313     0     111  that
 56181    75  1143    41    75  1313     0      60  )
 56182    75  1143    43    75  1313     0      63  {
 56183    75  1144     9    75  1313     0      36  int
 56184    75  1144    13    75  1313     0     111  n
 56185    75  1144    15    75  1313     0      67  =
 56186    75  1144    17    75  1313     0     111  this.position
 56187    75  1144    30    75  1313     0      59  (
 56188    75  1144    31    75  1313     0      60  )
 56189    75  1144    33    75  1313     0      74  +
 56190    75  1144    35    75  1313     0     111  Math.min
 56191    75  1144    43    75  1313     0      59  (
 56192    75  1144    44    75  1313     0     111  this.remaining
 56193    75  1144    58    75  1313     0      59  (
 56194    75  1144    59    75  1313     0      60  )
 56195    75  1144    60    75  1313     0      66  ,
 56196    75  1144    62    75  1313     0     111  that.remaining
 56197    75  1144    76    75  1313     0      59  (
 56198    75  1144    77    75  1313     0      60  )
 56199    75  1144    78    75  1313     0      60  )
 56200    75  1144    79    75  1313     0     102  ;
 56201    75  1145     9    75  1313     0      37  for
 56202    75  1145    13    75  1313     0      59  (
 56203    75  1145    14    75  1313     0      36  int
 56204    75  1145    18    75  1313     0     111  i
 56205    75  1145    20    75  1313     0      67  =
 56206    75  1145    22    75  1313     0     111  this.position
 56207    75  1145    35    75  1313     0      59  (
 56208    75  1145    36    75  1313     0      60  )
 56209    75  1145    37    75  1313     0      66  ,
 56210    75  1145    39    75  1313     0     111  j
 56211    75  1145    41    75  1313     0      67  =
 56212    75  1145    43    75  1313     0     111  that.position
 56213    75  1145    56    75  1313     0      59  (
 56214    75  1145    57    75  1313     0      60  )
 56215    75  1145    58    75  1313     0     102  ;
 56216    75  1145    60    75  1313     0     111  i
 56217    75  1145    62    75  1313     0      93  <
 56218    75  1145    64    75  1313     0     111  n
 56219    75  1145    65    75  1313     0     102  ;
 56220    75  1145    67    75  1313     0     111  i
 56221    75  1145    68    75  1313     0      76  ++
 56222    75  1145    70    75  1313     0      66  ,
 56223    75  1145    72    75  1313     0     111  j
 56224    75  1145    73    75  1313     0      76  ++
 56225    75  1145    75    75  1313     0      60  )
 56226    75  1145    77    75  1313     0      63  {
 56227    75  1146    13    75  1313     1      53  long
 56228    75  1146    18    75  1313     1     111  v1
 56229    75  1146    21    75  1313     1      67  =
 56230    75  1146    23    75  1313     1     111  this.get
 56231    75  1146    31    75  1313     1      59  (
 56232    75  1146    32    75  1313     1     111  i
 56233    75  1146    33    75  1313     1      60  )
 56234    75  1146    34    75  1313     1     102  ;
 56235    75  1147    13    75  1313     1      53  long
 56236    75  1147    18    75  1313     1     111  v2
 56237    75  1147    21    75  1313     1      67  =
 56238    75  1147    23    75  1313     1     111  that.get
 56239    75  1147    31    75  1313     1      59  (
 56240    75  1147    32    75  1313     1     111  j
 56241    75  1147    33    75  1313     1      60  )
 56242    75  1147    34    75  1313     1     102  ;
 56243    75  1148    13    75  1313     0      31  if
 56244    75  1148    16    75  1313     0      59  (
 56245    75  1148    17    75  1313     0     111  v1
 56246    75  1148    20    75  1313     0      68  ==
 56247    75  1148    23    75  1313     0     111  v2
 56248    75  1148    25    75  1313     0      60  )
 56249    75  1149    17    75  1313     0      46  continue
 56250    75  1149    25    75  1313     0     102  ;
 56251    75  1150    13    75  1313     0      31  if
 56252    75  1150    16    75  1313     0      59  (
 56253    75  1150    17    75  1313     0      59  (
 56254    75  1150    18    75  1313     0     111  v1
 56255    75  1150    21    75  1313     0      71  !=
 56256    75  1150    24    75  1313     0     111  v1
 56257    75  1150    26    75  1313     0      60  )
 56258    75  1150    28    75  1313     0     101  &&
 56259    75  1150    31    75  1313     0      59  (
 56260    75  1150    32    75  1313     0     111  v2
 56261    75  1150    35    75  1313     0      71  !=
 56262    75  1150    38    75  1313     0     111  v2
 56263    75  1150    40    75  1313     0      60  )
 56264    75  1150    41    75  1313     0      60  )
 56265    75  1151    17    75  1313     0      46  continue
 56266    75  1151    25    75  1313     0     102  ;
 56267    75  1152    13    75  1313     0      31  if
 56268    75  1152    16    75  1313     0      59  (
 56269    75  1152    17    75  1313     0     111  v1
 56270    75  1152    20    75  1313     0      93  <
 56271    75  1152    22    75  1313     0     111  v2
 56272    75  1152    24    75  1313     0      60  )
 56273    75  1153    17    75  1313     0      19  return
 56274    75  1153    24    75  1313     0      77  -
 56275    75  1153    25    75  1313     0     112  1
 56276    75  1153    26    75  1313     0     102  ;
 56277    75  1154    13    75  1313     0      19  return
 56278    75  1154    20    75  1313     0      74  +
 56279    75  1154    21    75  1313     0     112  1
 56280    75  1154    22    75  1313     0     102  ;
 56281    75  1155     9    75  1313     0      64  }
 56282    75  1156     9    75  1313     0      19  return
 56283    75  1156    16    75  1313     0     111  this.remaining
 56284    75  1156    30    75  1313     0      59  (
 56285    75  1156    31    75  1313     0      60  )
 56286    75  1156    33    75  1313     0      77  -
 56287    75  1156    35    75  1313     0     111  that.remaining
 56288    75  1156    49    75  1313     0      59  (
 56289    75  1156    50    75  1313     0      60  )
 56290    75  1156    51    75  1313     0     102  ;
 56291    75  1157     5    75  1313     0      64  }
 56292    75  1157     5    75  1313     0    3050  ENDMETHOD
 56293    75  1372     5    75    -1     0      10  public
 56294    75  1372    12    75    -1     0       7  abstract
 56295    75  1372    21    75    -1     0     111  ByteOrder
 56296    75  1372    31    75    -1     0     111  order
 56297    75  1372    36    75    -1     0      59  (
 56298    75  1372    37    75    -1     0      60  )
 56299    75  1372    38    75    -1     0     102  ;
 56300    75  1426     1    75    -1     0      64  }
 56301    75  1426     1    75    -1     1    3051  ENDCLASS
 56302    75  1426     1    -1    -1     1    3052  ENDFILE C:\javasrc\java\nio\LongBuffer.java
 56303    76     1     1    -1    -1     1    3053  STARTFILE C:\javasrc\java\nio\MappedByteBuffer.java
 56304    76    26     1    -1    -1     0       5  package
 56305    76    26     9    -1    -1     0     111  java.nio
 56306    76    26    17    -1    -1     0     102  ;
 56307    76    63     1    -1    -1     0      10  public
 56308    76    63     8    -1    -1     0       7  abstract
 56309    76    63    17    76    -1     0    3054  STARTCLASS
 56310    76    63    17    76    -1     0      24  class
 56311    76    63    23    76    -1     0     111  MappedByteBuffer
 56312    76    64     5    76    -1     0      38  extends
 56313    76    64    13    76    -1     0     111  ByteBuffer
 56314    76    65     1    76    -1     0      63  {
 56315    76    74     5    76    -1     0      33  volatile
 56316    76    74    14    76    -1     0      39  boolean
 56317    76    74    22    76    -1     0     111  isAMappedBuffer
 56318    76    74    37    76    -1     0     102  ;
 56319    76    74    37    76  1314     0    3055  STARTMETHOD
 56320    76    78     5    76  1314     0     111  MappedByteBuffer
 56321    76    78    21    76  1314     0      59  (
 56322    76    78    22    76  1314     0      36  int
 56323    76    78    26    76  1314     0     111  mark
 56324    76    78    30    76  1314     0      66  ,
 56325    76    78    32    76  1314     0      36  int
 56326    76    78    36    76  1314     0     111  pos
 56327    76    78    39    76  1314     0      66  ,
 56328    76    78    41    76  1314     0      36  int
 56329    76    78    45    76  1314     0     111  lim
 56330    76    78    48    76  1314     0      66  ,
 56331    76    78    50    76  1314     0      36  int
 56332    76    78    54    76  1314     0     111  cap
 56333    76    78    57    76  1314     0      66  ,
 56334    76    79    22    76  1314     0      39  boolean
 56335    76    79    30    76  1314     0     111  mapped
 56336    76    79    36    76  1314     0      60  )
 56337    76    80     5    76  1314     0      63  {
 56338    76    81     9    76  1314     0      27  super
 56339    76    81    14    76  1314     0      59  (
 56340    76    81    15    76  1314     0     111  mark
 56341    76    81    19    76  1314     0      66  ,
 56342    76    81    21    76  1314     0     111  pos
 56343    76    81    24    76  1314     0      66  ,
 56344    76    81    26    76  1314     0     111  lim
 56345    76    81    29    76  1314     0      66  ,
 56346    76    81    31    76  1314     0     111  cap
 56347    76    81    34    76  1314     0      60  )
 56348    76    81    35    76  1314     0     102  ;
 56349    76    82     9    76  1314     0     111  isAMappedBuffer
 56350    76    82    25    76  1314     0      67  =
 56351    76    82    27    76  1314     0     111  mapped
 56352    76    82    33    76  1314     0     102  ;
 56353    76    83     5    76  1314     0      64  }
 56354    76    83     5    76  1314     0    3056  ENDMETHOD
 56355    76    83     5    76  1315     0    3057  STARTMETHOD
 56356    76    85     5    76  1315     0     111  MappedByteBuffer
 56357    76    85    21    76  1315     0      59  (
 56358    76    85    22    76  1315     0      36  int
 56359    76    85    26    76  1315     0     111  mark
 56360    76    85    30    76  1315     0      66  ,
 56361    76    85    32    76  1315     0      36  int
 56362    76    85    36    76  1315     0     111  pos
 56363    76    85    39    76  1315     0      66  ,
 56364    76    85    41    76  1315     0      36  int
 56365    76    85    45    76  1315     0     111  lim
 56366    76    85    48    76  1315     0      66  ,
 56367    76    85    50    76  1315     0      36  int
 56368    76    85    54    76  1315     0     111  cap
 56369    76    85    57    76  1315     0      60  )
 56370    76    85    59    76  1315     0      63  {
 56371    76    86     9    76  1315     0      27  super
 56372    76    86    14    76  1315     0      59  (
 56373    76    86    15    76  1315     0     111  mark
 56374    76    86    19    76  1315     0      66  ,
 56375    76    86    21    76  1315     0     111  pos
 56376    76    86    24    76  1315     0      66  ,
 56377    76    86    26    76  1315     0     111  lim
 56378    76    86    29    76  1315     0      66  ,
 56379    76    86    31    76  1315     0     111  cap
 56380    76    86    34    76  1315     0      60  )
 56381    76    86    35    76  1315     0     102  ;
 56382    76    87     9    76  1315     0     111  isAMappedBuffer
 56383    76    87    25    76  1315     0      67  =
 56384    76    87    27    76  1315     0      43  false
 56385    76    87    32    76  1315     0     102  ;
 56386    76    88     5    76  1315     0      64  }
 56387    76    88     5    76  1315     0    3058  ENDMETHOD
 56388    76    88     5    76  1316     0    3059  STARTMETHOD
 56389    76    90     5    76  1316     0      41  private
 56390    76    90    13    76  1316     0      50  void
 56391    76    90    18    76  1316     0     111  checkMapped
 56392    76    90    29    76  1316     0      59  (
 56393    76    90    30    76  1316     0      60  )
 56394    76    90    32    76  1316     0      63  {
 56395    76    91     9    76  1316     0      31  if
 56396    76    91    12    76  1316     0      59  (
 56397    76    91    13    76  1316     0      69  !
 56398    76    91    14    76  1316     0     111  isAMappedBuffer
 56399    76    91    29    76  1316     0      60  )
 56400    76    93    13    76  1316     0      20  throw
 56401    76    93    19    76  1316     0      15  new
 56402    76    93    23    76  1316     0     111  UnsupportedOperationException
 56403    76    93    52    76  1316     0      59  (
 56404    76    93    53    76  1316     0      60  )
 56405    76    93    54    76  1316     0     102  ;
 56406    76    94     5    76  1316     0      64  }
 56407    76    94     5    76  1316     0    3060  ENDMETHOD
 56408    76    94     5    76  1317     0    3061  STARTMETHOD
 56409    76   114     5    76  1317     0      10  public
 56410    76   114    12    76  1317     0       6  final
 56411    76   114    18    76  1317     0      39  boolean
 56412    76   114    26    76  1317     0     111  isLoaded
 56413    76   114    34    76  1317     0      59  (
 56414    76   114    35    76  1317     0      60  )
 56415    76   114    37    76  1317     0      63  {
 56416    76   115     9    76  1317     0     111  checkMapped
 56417    76   115    20    76  1317     0      59  (
 56418    76   115    21    76  1317     0      60  )
 56419    76   115    22    76  1317     0     102  ;
 56420    76   116     9    76  1317     0      31  if
 56421    76   116    12    76  1317     0      59  (
 56422    76   116    13    76  1317     0      59  (
 56423    76   116    14    76  1317     0     111  address
 56424    76   116    22    76  1317     0      68  ==
 56425    76   116    25    76  1317     0     112  0
 56426    76   116    26    76  1317     0      60  )
 56427    76   116    28    76  1317     0      98  ||
 56428    76   116    31    76  1317     0      59  (
 56429    76   116    32    76  1317     0     111  capacity
 56430    76   116    40    76  1317     0      59  (
 56431    76   116    41    76  1317     0      60  )
 56432    76   116    43    76  1317     0      68  ==
 56433    76   116    46    76  1317     0     112  0
 56434    76   116    47    76  1317     0      60  )
 56435    76   116    48    76  1317     0      60  )
 56436    76   117    13    76  1317     0      19  return
 56437    76   117    20    76  1317     0      52  true
 56438    76   117    24    76  1317     0     102  ;
 56439    76   118     9    76  1317     0      19  return
 56440    76   118    16    76  1317     0     111  isLoaded0
 56441    76   118    25    76  1317     0      59  (
 56442    76   118    26    76  1317     0      59  (
 56443    76   118    27    76  1317     0      59  (
 56444    76   118    28    76  1317     0     111  DirectByteBuffer
 56445    76   118    44    76  1317     0      60  )
 56446    76   118    45    76  1317     0      44  this
 56447    76   118    49    76  1317     0      60  )
 56448    76   118    50    76  1317     0      54  .
 56449    76   118    51    76  1317     0     111  address
 56450    76   118    58    76  1317     0      59  (
 56451    76   118    59    76  1317     0      60  )
 56452    76   118    60    76  1317     0      66  ,
 56453    76   118    62    76  1317     0     111  capacity
 56454    76   118    70    76  1317     0      59  (
 56455    76   118    71    76  1317     0      60  )
 56456    76   118    72    76  1317     0      60  )
 56457    76   118    73    76  1317     0     102  ;
 56458    76   119     5    76  1317     0      64  }
 56459    76   119     5    76  1317     0    3062  ENDMETHOD
 56460    76   119     5    76  1318     0    3063  STARTMETHOD
 56461    76   131     5    76  1318     0      10  public
 56462    76   131    12    76  1318     0       6  final
 56463    76   131    18    76  1318     0     111  MappedByteBuffer
 56464    76   131    35    76  1318     0     111  load
 56465    76   131    39    76  1318     0      59  (
 56466    76   131    40    76  1318     0      60  )
 56467    76   131    42    76  1318     0      63  {
 56468    76   132     9    76  1318     0     111  checkMapped
 56469    76   132    20    76  1318     0      59  (
 56470    76   132    21    76  1318     0      60  )
 56471    76   132    22    76  1318     0     102  ;
 56472    76   133     9    76  1318     0      31  if
 56473    76   133    12    76  1318     0      59  (
 56474    76   133    13    76  1318     0      59  (
 56475    76   133    14    76  1318     0     111  address
 56476    76   133    22    76  1318     0      68  ==
 56477    76   133    25    76  1318     0     112  0
 56478    76   133    26    76  1318     0      60  )
 56479    76   133    28    76  1318     0      98  ||
 56480    76   133    31    76  1318     0      59  (
 56481    76   133    32    76  1318     0     111  capacity
 56482    76   133    40    76  1318     0      59  (
 56483    76   133    41    76  1318     0      60  )
 56484    76   133    43    76  1318     0      68  ==
 56485    76   133    46    76  1318     0     112  0
 56486    76   133    47    76  1318     0      60  )
 56487    76   133    48    76  1318     0      60  )
 56488    76   134    13    76  1318     0      19  return
 56489    76   134    20    76  1318     0      44  this
 56490    76   134    24    76  1318     0     102  ;
 56491    76   135     9    76  1318     0     111  load0
 56492    76   135    14    76  1318     0      59  (
 56493    76   135    15    76  1318     0      59  (
 56494    76   135    16    76  1318     0      59  (
 56495    76   135    17    76  1318     0     111  DirectByteBuffer
 56496    76   135    33    76  1318     0      60  )
 56497    76   135    34    76  1318     0      44  this
 56498    76   135    38    76  1318     0      60  )
 56499    76   135    39    76  1318     0      54  .
 56500    76   135    40    76  1318     0     111  address
 56501    76   135    47    76  1318     0      59  (
 56502    76   135    48    76  1318     0      60  )
 56503    76   135    49    76  1318     0      66  ,
 56504    76   135    51    76  1318     0     111  capacity
 56505    76   135    59    76  1318     0      59  (
 56506    76   135    60    76  1318     0      60  )
 56507    76   135    61    76  1318     0      66  ,
 56508    76   135    63    76  1318     0     111  Bits.pageSize
 56509    76   135    76    76  1318     0      59  (
 56510    76   135    77    76  1318     0      60  )
 56511    76   135    78    76  1318     0      60  )
 56512    76   135    79    76  1318     0     102  ;
 56513    76   136     9    76  1318     0      19  return
 56514    76   136    16    76  1318     0      44  this
 56515    76   136    20    76  1318     0     102  ;
 56516    76   137     5    76  1318     0      64  }
 56517    76   137     5    76  1318     0    3064  ENDMETHOD
 56518    76   137     5    76  1319     0    3065  STARTMETHOD
 56519    76   157     5    76  1319     0      10  public
 56520    76   157    12    76  1319     0       6  final
 56521    76   157    18    76  1319     0     111  MappedByteBuffer
 56522    76   157    35    76  1319     0     111  force
 56523    76   157    40    76  1319     0      59  (
 56524    76   157    41    76  1319     0      60  )
 56525    76   157    43    76  1319     0      63  {
 56526    76   158     9    76  1319     0     111  checkMapped
 56527    76   158    20    76  1319     0      59  (
 56528    76   158    21    76  1319     0      60  )
 56529    76   158    22    76  1319     0     102  ;
 56530    76   159     9    76  1319     0      31  if
 56531    76   159    12    76  1319     0      59  (
 56532    76   159    13    76  1319     0      59  (
 56533    76   159    14    76  1319     0     111  address
 56534    76   159    22    76  1319     0      68  ==
 56535    76   159    25    76  1319     0     112  0
 56536    76   159    26    76  1319     0      60  )
 56537    76   159    28    76  1319     0      98  ||
 56538    76   159    31    76  1319     0      59  (
 56539    76   159    32    76  1319     0     111  capacity
 56540    76   159    40    76  1319     0      59  (
 56541    76   159    41    76  1319     0      60  )
 56542    76   159    43    76  1319     0      68  ==
 56543    76   159    46    76  1319     0     112  0
 56544    76   159    47    76  1319     0      60  )
 56545    76   159    48    76  1319     0      60  )
 56546    76   160    13    76  1319     0      19  return
 56547    76   160    20    76  1319     0      44  this
 56548    76   160    24    76  1319     0     102  ;
 56549    76   161     9    76  1319     0     111  force0
 56550    76   161    15    76  1319     0      59  (
 56551    76   161    16    76  1319     0      59  (
 56552    76   161    17    76  1319     0      59  (
 56553    76   161    18    76  1319     0     111  DirectByteBuffer
 56554    76   161    34    76  1319     0      60  )
 56555    76   161    35    76  1319     0      44  this
 56556    76   161    39    76  1319     0      60  )
 56557    76   161    40    76  1319     0      54  .
 56558    76   161    41    76  1319     0     111  address
 56559    76   161    48    76  1319     0      59  (
 56560    76   161    49    76  1319     0      60  )
 56561    76   161    50    76  1319     0      66  ,
 56562    76   161    52    76  1319     0     111  capacity
 56563    76   161    60    76  1319     0      59  (
 56564    76   161    61    76  1319     0      60  )
 56565    76   161    62    76  1319     0      60  )
 56566    76   161    63    76  1319     0     102  ;
 56567    76   162     9    76  1319     0      19  return
 56568    76   162    16    76  1319     0      44  this
 56569    76   162    20    76  1319     0     102  ;
 56570    76   163     5    76  1319     0      64  }
 56571    76   163     5    76  1319     0    3066  ENDMETHOD
 56572    76   165     5    76    -1     0      41  private
 56573    76   165    13    76    -1     0      29  native
 56574    76   165    20    76    -1     0      39  boolean
 56575    76   165    28    76    -1     0     111  isLoaded0
 56576    76   165    37    76    -1     0      59  (
 56577    76   165    38    76    -1     0      53  long
 56578    76   165    43    76    -1     0     111  address
 56579    76   165    50    76    -1     0      66  ,
 56580    76   165    52    76    -1     0      53  long
 56581    76   165    57    76    -1     0     111  length
 56582    76   165    63    76    -1     0      60  )
 56583    76   165    64    76    -1     0     102  ;
 56584    76   166     5    76    -1     0      41  private
 56585    76   166    13    76    -1     0      29  native
 56586    76   166    20    76    -1     0      36  int
 56587    76   166    24    76    -1     0     111  load0
 56588    76   166    29    76    -1     0      59  (
 56589    76   166    30    76    -1     0      53  long
 56590    76   166    35    76    -1     0     111  address
 56591    76   166    42    76    -1     0      66  ,
 56592    76   166    44    76    -1     0      53  long
 56593    76   166    49    76    -1     0     111  length
 56594    76   166    55    76    -1     0      66  ,
 56595    76   166    57    76    -1     0      36  int
 56596    76   166    61    76    -1     0     111  pageSize
 56597    76   166    69    76    -1     0      60  )
 56598    76   166    70    76    -1     0     102  ;
 56599    76   167     5    76    -1     0      41  private
 56600    76   167    13    76    -1     0      29  native
 56601    76   167    20    76    -1     0      50  void
 56602    76   167    25    76    -1     0     111  force0
 56603    76   167    31    76    -1     0      59  (
 56604    76   167    32    76    -1     0      53  long
 56605    76   167    37    76    -1     0     111  address
 56606    76   167    44    76    -1     0      66  ,
 56607    76   167    46    76    -1     0      53  long
 56608    76   167    51    76    -1     0     111  length
 56609    76   167    57    76    -1     0      60  )
 56610    76   167    58    76    -1     0     102  ;
 56611    76   169     1    76    -1     0      64  }
 56612    76   169     1    76    -1     1    3067  ENDCLASS
 56613    76   169     1    -1    -1     1    3068  ENDFILE C:\javasrc\java\nio\MappedByteBuffer.java
 56614    77     1     1    -1    -1     1    3069  STARTFILE C:\javasrc\java\nio\ReadOnlyBufferException.java
 56615    77    30     1    -1    -1     0       5  package
 56616    77    30     9    -1    -1     0     111  java.nio
 56617    77    30    17    -1    -1     0     102  ;
 56618    77    40     1    -1    -1     0      10  public
 56619    77    40     8    77    -1     0    3070  STARTCLASS
 56620    77    40     8    77    -1     0      24  class
 56621    77    40    14    77    -1     0     111  ReadOnlyBufferException
 56622    77    41     5    77    -1     0      38  extends
 56623    77    41    13    77    -1     0     111  UnsupportedOperationException
 56624    77    42     1    77    -1     0      63  {
 56625    77    44     5    77    -1     0      41  private
 56626    77    44    13    77    -1     0      45  static
 56627    77    44    20    77    -1     0       6  final
 56628    77    44    26    77    -1     0      53  long
 56629    77    44    31    77    -1     0     111  serialVersionUID
 56630    77    44    48    77    -1     0      67  =
 56631    77    44    50    77    -1     0      77  -
 56632    77    44    51    77    -1     0      55  1210063976496234090L
 56633    77    44    71    77    -1     0     102  ;
 56634    77    44    71    77  1320     0    3071  STARTMETHOD
 56635    77    49     5    77  1320     0      10  public
 56636    77    49    12    77  1320     0     111  ReadOnlyBufferException
 56637    77    49    35    77  1320     0      59  (
 56638    77    49    36    77  1320     0      60  )
 56639    77    49    38    77  1320     0      63  {
 56640    77    49    40    77  1320     0      64  }
 56641    77    49    40    77  1320     0    3072  ENDMETHOD
 56642    77    51     1    77    -1     0      64  }
 56643    77    51     1    77    -1     1    3073  ENDCLASS
 56644    77    51     1    -1    -1     1    3074  ENDFILE C:\javasrc\java\nio\ReadOnlyBufferException.java
 56645    78     1     1    -1    -1     1    3075  STARTFILE C:\javasrc\java\nio\ShortBuffer.java
 56646    78    28     1    -1    -1     0       5  package
 56647    78    28     9    -1    -1     0     111  java.nio
 56648    78    28    17    -1    -1     0     102  ;
 56649    78   257     1    -1    -1     0      10  public
 56650    78   257     8    -1    -1     0       7  abstract
 56651    78   257    17    78    -1     0    3076  STARTCLASS
 56652    78   257    17    78    -1     0      24  class
 56653    78   257    23    78    -1     0     111  ShortBuffer
 56654    78   258     5    78    -1     0      38  extends
 56655    78   258    13    78    -1     0     111  Buffer
 56656    78   259     5    78    -1     0      17  implements
 56657    78   259    16    78    -1     0     111  Comparable
 56658    78   259    26    78    -1     0      93  <
 56659    78   259    27    78    -1     0     111  ShortBuffer
 56660    78   259    38    78    -1     0      89  >
 56661    78   260     1    78    -1     0      63  {
 56662    78   266     5    78    -1     0       6  final
 56663    78   266    11    78    -1     0      12  short
 56664    78   266    16    78    -1     0      61  [
 56665    78   266    17    78    -1     0      62  ]
 56666    78   266    19    78    -1     0     111  hb
 56667    78   266    21    78    -1     0     102  ;
 56668    78   267     5    78    -1     0       6  final
 56669    78   267    11    78    -1     0      36  int
 56670    78   267    15    78    -1     0     111  offset
 56671    78   267    21    78    -1     0     102  ;
 56672    78   268     5    78    -1     0      39  boolean
 56673    78   268    13    78    -1     0     111  isReadOnly
 56674    78   268    23    78    -1     0     102  ;
 56675    78   268    23    78  1321     0    3077  STARTMETHOD
 56676    78   273     5    78  1321     0     111  ShortBuffer
 56677    78   273    16    78  1321     0      59  (
 56678    78   273    17    78  1321     0      36  int
 56679    78   273    21    78  1321     0     111  mark
 56680    78   273    25    78  1321     0      66  ,
 56681    78   273    27    78  1321     0      36  int
 56682    78   273    31    78  1321     0     111  pos
 56683    78   273    34    78  1321     0      66  ,
 56684    78   273    36    78  1321     0      36  int
 56685    78   273    40    78  1321     0     111  lim
 56686    78   273    43    78  1321     0      66  ,
 56687    78   273    45    78  1321     0      36  int
 56688    78   273    49    78  1321     0     111  cap
 56689    78   273    52    78  1321     0      66  ,
 56690    78   274    18    78  1321     0      12  short
 56691    78   274    23    78  1321     0      61  [
 56692    78   274    24    78  1321     0      62  ]
 56693    78   274    26    78  1321     0     111  hb
 56694    78   274    28    78  1321     0      66  ,
 56695    78   274    30    78  1321     0      36  int
 56696    78   274    34    78  1321     0     111  offset
 56697    78   274    40    78  1321     0      60  )
 56698    78   275     5    78  1321     0      63  {
 56699    78   276     9    78  1321     0      27  super
 56700    78   276    14    78  1321     0      59  (
 56701    78   276    15    78  1321     0     111  mark
 56702    78   276    19    78  1321     0      66  ,
 56703    78   276    21    78  1321     0     111  pos
 56704    78   276    24    78  1321     0      66  ,
 56705    78   276    26    78  1321     0     111  lim
 56706    78   276    29    78  1321     0      66  ,
 56707    78   276    31    78  1321     0     111  cap
 56708    78   276    34    78  1321     0      60  )
 56709    78   276    35    78  1321     0     102  ;
 56710    78   277     9    78  1321     1     111  this.hb
 56711    78   277    17    78  1321     1      67  =
 56712    78   277    19    78  1321     1     111  hb
 56713    78   277    21    78  1321     1     102  ;
 56714    78   278     9    78  1321     1     111  this.offset
 56715    78   278    21    78  1321     1      67  =
 56716    78   278    23    78  1321     1     111  offset
 56717    78   278    29    78  1321     1     102  ;
 56718    78   279     5    78  1321     1      64  }
 56719    78   279     5    78  1321     0    3078  ENDMETHOD
 56720    78   279     5    78  1322     0    3079  STARTMETHOD
 56721    78   283     5    78  1322     0     111  ShortBuffer
 56722    78   283    16    78  1322     0      59  (
 56723    78   283    17    78  1322     0      36  int
 56724    78   283    21    78  1322     0     111  mark
 56725    78   283    25    78  1322     0      66  ,
 56726    78   283    27    78  1322     0      36  int
 56727    78   283    31    78  1322     0     111  pos
 56728    78   283    34    78  1322     0      66  ,
 56729    78   283    36    78  1322     0      36  int
 56730    78   283    40    78  1322     0     111  lim
 56731    78   283    43    78  1322     0      66  ,
 56732    78   283    45    78  1322     0      36  int
 56733    78   283    49    78  1322     0     111  cap
 56734    78   283    52    78  1322     0      60  )
 56735    78   283    54    78  1322     0      63  {
 56736    78   284     9    78  1322     0      44  this
 56737    78   284    13    78  1322     0      59  (
 56738    78   284    14    78  1322     0     111  mark
 56739    78   284    18    78  1322     0      66  ,
 56740    78   284    20    78  1322     0     111  pos
 56741    78   284    23    78  1322     0      66  ,
 56742    78   284    25    78  1322     0     111  lim
 56743    78   284    28    78  1322     0      66  ,
 56744    78   284    30    78  1322     0     111  cap
 56745    78   284    33    78  1322     0      66  ,
 56746    78   284    35    78  1322     0      21  null
 56747    78   284    39    78  1322     0      66  ,
 56748    78   284    41    78  1322     0     112  0
 56749    78   284    42    78  1322     0      60  )
 56750    78   284    43    78  1322     1     102  ;
 56751    78   285     5    78  1322     1      64  }
 56752    78   285     5    78  1322     0    3080  ENDMETHOD
 56753    78   285     5    78  1323     0    3081  STARTMETHOD
 56754    78   326     5    78  1323     0      10  public
 56755    78   326    12    78  1323     0      45  static
 56756    78   326    19    78  1323     0     111  ShortBuffer
 56757    78   326    31    78  1323     0     111  allocate
 56758    78   326    39    78  1323     0      59  (
 56759    78   326    40    78  1323     0      36  int
 56760    78   326    44    78  1323     0     111  capacity
 56761    78   326    52    78  1323     0      60  )
 56762    78   326    54    78  1323     0      63  {
 56763    78   327     9    78  1323     0      31  if
 56764    78   327    12    78  1323     0      59  (
 56765    78   327    13    78  1323     0     111  capacity
 56766    78   327    22    78  1323     0      93  <
 56767    78   327    24    78  1323     0     112  0
 56768    78   327    25    78  1323     0      60  )
 56769    78   328    13    78  1323     0      20  throw
 56770    78   328    19    78  1323     0      15  new
 56771    78   328    23    78  1323     0     111  IllegalArgumentException
 56772    78   328    47    78  1323     0      59  (
 56773    78   328    48    78  1323     0      60  )
 56774    78   328    49    78  1323     0     102  ;
 56775    78   329     9    78  1323     0      19  return
 56776    78   329    16    78  1323     0      15  new
 56777    78   329    20    78  1323     0     111  HeapShortBuffer
 56778    78   329    35    78  1323     0      59  (
 56779    78   329    36    78  1323     0     111  capacity
 56780    78   329    44    78  1323     0      66  ,
 56781    78   329    46    78  1323     0     111  capacity
 56782    78   329    54    78  1323     0      60  )
 56783    78   329    55    78  1323     1     102  ;
 56784    78   330     5    78  1323     1      64  }
 56785    78   330     5    78  1323     0    3082  ENDMETHOD
 56786    78   330     5    78  1324     0    3083  STARTMETHOD
 56787    78   363     5    78  1324     0      10  public
 56788    78   363    12    78  1324     0      45  static
 56789    78   363    19    78  1324     0     111  ShortBuffer
 56790    78   363    31    78  1324     0     111  wrap
 56791    78   363    35    78  1324     0      59  (
 56792    78   363    36    78  1324     0      12  short
 56793    78   363    41    78  1324     0      61  [
 56794    78   363    42    78  1324     0      62  ]
 56795    78   363    44    78  1324     0     111  array
 56796    78   363    49    78  1324     0      66  ,
 56797    78   364    37    78  1324     0      36  int
 56798    78   364    41    78  1324     0     111  offset
 56799    78   364    47    78  1324     0      66  ,
 56800    78   364    49    78  1324     0      36  int
 56801    78   364    53    78  1324     0     111  length
 56802    78   364    59    78  1324     0      60  )
 56803    78   365     5    78  1324     0      63  {
 56804    78   366     9    78  1324     0      35  try
 56805    78   366    13    78  1324     0      63  {
 56806    78   367    13    78  1324     0      19  return
 56807    78   367    20    78  1324     0      15  new
 56808    78   367    24    78  1324     0     111  HeapShortBuffer
 56809    78   367    39    78  1324     0      59  (
 56810    78   367    40    78  1324     0     111  array
 56811    78   367    45    78  1324     0      66  ,
 56812    78   367    47    78  1324     0     111  offset
 56813    78   367    53    78  1324     0      66  ,
 56814    78   367    55    78  1324     0     111  length
 56815    78   367    61    78  1324     0      60  )
 56816    78   367    62    78  1324     0     102  ;
 56817    78   368     9    78  1324     0      64  }
 56818    78   368    11    78  1324     0      34  catch
 56819    78   368    17    78  1324     0      59  (
 56820    78   368    18    78  1324     0     111  IllegalArgumentException
 56821    78   368    43    78  1324     0     111  x
 56822    78   368    44    78  1324     0      60  )
 56823    78   368    46    78  1324     0      63  {
 56824    78   369    13    78  1324     0      20  throw
 56825    78   369    19    78  1324     0      15  new
 56826    78   369    23    78  1324     0     111  IndexOutOfBoundsException
 56827    78   369    48    78  1324     0      59  (
 56828    78   369    49    78  1324     0      60  )
 56829    78   369    50    78  1324     0     102  ;
 56830    78   370     9    78  1324     0      64  }
 56831    78   371     5    78  1324     0      64  }
 56832    78   371     5    78  1324     0    3084  ENDMETHOD
 56833    78   371     5    78  1325     0    3085  STARTMETHOD
 56834    78   389     5    78  1325     0      10  public
 56835    78   389    12    78  1325     0      45  static
 56836    78   389    19    78  1325     0     111  ShortBuffer
 56837    78   389    31    78  1325     0     111  wrap
 56838    78   389    35    78  1325     0      59  (
 56839    78   389    36    78  1325     0      12  short
 56840    78   389    41    78  1325     0      61  [
 56841    78   389    42    78  1325     0      62  ]
 56842    78   389    44    78  1325     0     111  array
 56843    78   389    49    78  1325     0      60  )
 56844    78   389    51    78  1325     0      63  {
 56845    78   390     9    78  1325     0      19  return
 56846    78   390    16    78  1325     0     111  wrap
 56847    78   390    20    78  1325     0      59  (
 56848    78   390    21    78  1325     0     111  array
 56849    78   390    26    78  1325     0      66  ,
 56850    78   390    28    78  1325     0     112  0
 56851    78   390    29    78  1325     0      66  ,
 56852    78   390    31    78  1325     0     111  array.length
 56853    78   390    43    78  1325     0      60  )
 56854    78   390    44    78  1325     0     102  ;
 56855    78   391     5    78  1325     0      64  }
 56856    78   391     5    78  1325     0    3086  ENDMETHOD
 56857    78   503     5    78    -1     1      10  public
 56858    78   503    12    78    -1     1       7  abstract
 56859    78   503    21    78    -1     1     111  ShortBuffer
 56860    78   503    33    78    -1     1     111  slice
 56861    78   503    38    78    -1     1      59  (
 56862    78   503    39    78    -1     1      60  )
 56863    78   503    40    78    -1     1     102  ;
 56864    78   520     5    78    -1     1      10  public
 56865    78   520    12    78    -1     1       7  abstract
 56866    78   520    21    78    -1     1     111  ShortBuffer
 56867    78   520    33    78    -1     1     111  duplicate
 56868    78   520    42    78    -1     1      59  (
 56869    78   520    43    78    -1     1      60  )
 56870    78   520    44    78    -1     1     102  ;
 56871    78   540     5    78    -1     1      10  public
 56872    78   540    12    78    -1     1       7  abstract
 56873    78   540    21    78    -1     1     111  ShortBuffer
 56874    78   540    33    78    -1     1     111  asReadOnlyBuffer
 56875    78   540    49    78    -1     1      59  (
 56876    78   540    50    78    -1     1      60  )
 56877    78   540    51    78    -1     1     102  ;
 56878    78   554     5    78    -1     0      10  public
 56879    78   554    12    78    -1     0       7  abstract
 56880    78   554    21    78    -1     0      12  short
 56881    78   554    27    78    -1     0     111  get
 56882    78   554    30    78    -1     0      59  (
 56883    78   554    31    78    -1     0      60  )
 56884    78   554    32    78    -1     0     102  ;
 56885    78   573     5    78    -1     0      10  public
 56886    78   573    12    78    -1     0       7  abstract
 56887    78   573    21    78    -1     0     111  ShortBuffer
 56888    78   573    33    78    -1     0     111  put
 56889    78   573    36    78    -1     0      59  (
 56890    78   573    37    78    -1     0      12  short
 56891    78   573    43    78    -1     0     111  s
 56892    78   573    44    78    -1     0      60  )
 56893    78   573    45    78    -1     0     102  ;
 56894    78   588     5    78    -1     0      10  public
 56895    78   588    12    78    -1     0       7  abstract
 56896    78   588    21    78    -1     0      12  short
 56897    78   588    27    78    -1     0     111  get
 56898    78   588    30    78    -1     0      59  (
 56899    78   588    31    78    -1     0      36  int
 56900    78   588    35    78    -1     0     111  index
 56901    78   588    40    78    -1     0      60  )
 56902    78   588    41    78    -1     0     102  ;
 56903    78   611     5    78    -1     0      10  public
 56904    78   611    12    78    -1     0       7  abstract
 56905    78   611    21    78    -1     0     111  ShortBuffer
 56906    78   611    33    78    -1     0     111  put
 56907    78   611    36    78    -1     0      59  (
 56908    78   611    37    78    -1     0      36  int
 56909    78   611    41    78    -1     0     111  index
 56910    78   611    46    78    -1     0      66  ,
 56911    78   611    48    78    -1     0      12  short
 56912    78   611    54    78    -1     0     111  s
 56913    78   611    55    78    -1     0      60  )
 56914    78   611    56    78    -1     0     102  ;
 56915    78   611    56    78  1326     0    3087  STARTMETHOD
 56916    78   665     5    78  1326     0      10  public
 56917    78   665    12    78  1326     0     111  ShortBuffer
 56918    78   665    24    78  1326     0     111  get
 56919    78   665    27    78  1326     0      59  (
 56920    78   665    28    78  1326     0      12  short
 56921    78   665    33    78  1326     0      61  [
 56922    78   665    34    78  1326     0      62  ]
 56923    78   665    36    78  1326     0     111  dst
 56924    78   665    39    78  1326     0      66  ,
 56925    78   665    41    78  1326     0      36  int
 56926    78   665    45    78  1326     0     111  offset
 56927    78   665    51    78  1326     0      66  ,
 56928    78   665    53    78  1326     0      36  int
 56929    78   665    57    78  1326     0     111  length
 56930    78   665    63    78  1326     0      60  )
 56931    78   665    65    78  1326     0      63  {
 56932    78   666     9    78  1326     0     111  checkBounds
 56933    78   666    20    78  1326     0      59  (
 56934    78   666    21    78  1326     0     111  offset
 56935    78   666    27    78  1326     0      66  ,
 56936    78   666    29    78  1326     0     111  length
 56937    78   666    35    78  1326     0      66  ,
 56938    78   666    37    78  1326     0     111  dst.length
 56939    78   666    47    78  1326     0      60  )
 56940    78   666    48    78  1326     0     102  ;
 56941    78   667     9    78  1326     0      31  if
 56942    78   667    12    78  1326     0      59  (
 56943    78   667    13    78  1326     0     111  length
 56944    78   667    20    78  1326     0      89  >
 56945    78   667    22    78  1326     0     111  remaining
 56946    78   667    31    78  1326     0      59  (
 56947    78   667    32    78  1326     0      60  )
 56948    78   667    33    78  1326     0      60  )
 56949    78   668    13    78  1326     0      20  throw
 56950    78   668    19    78  1326     0      15  new
 56951    78   668    23    78  1326     0     111  BufferUnderflowException
 56952    78   668    47    78  1326     0      59  (
 56953    78   668    48    78  1326     0      60  )
 56954    78   668    49    78  1326     0     102  ;
 56955    78   669     9    78  1326     0      36  int
 56956    78   669    13    78  1326     0     111  end
 56957    78   669    17    78  1326     0      67  =
 56958    78   669    19    78  1326     0     111  offset
 56959    78   669    26    78  1326     0      74  +
 56960    78   669    28    78  1326     0     111  length
 56961    78   669    34    78  1326     0     102  ;
 56962    78   670     9    78  1326     0      37  for
 56963    78   670    13    78  1326     0      59  (
 56964    78   670    14    78  1326     0      36  int
 56965    78   670    18    78  1326     0     111  i
 56966    78   670    20    78  1326     0      67  =
 56967    78   670    22    78  1326     0     111  offset
 56968    78   670    28    78  1326     0     102  ;
 56969    78   670    30    78  1326     0     111  i
 56970    78   670    32    78  1326     0      93  <
 56971    78   670    34    78  1326     0     111  end
 56972    78   670    37    78  1326     0     102  ;
 56973    78   670    39    78  1326     0     111  i
 56974    78   670    40    78  1326     0      76  ++
 56975    78   670    42    78  1326     0      60  )
 56976    78   671    13    78  1326     0     111  dst
 56977    78   671    16    78  1326     0      61  [
 56978    78   671    17    78  1326     0     111  i
 56979    78   671    18    78  1326     0      62  ]
 56980    78   671    20    78  1326     0      67  =
 56981    78   671    22    78  1326     0     111  get
 56982    78   671    25    78  1326     0      59  (
 56983    78   671    26    78  1326     0      60  )
 56984    78   671    27    78  1326     0     102  ;
 56985    78   672     9    78  1326     0      19  return
 56986    78   672    16    78  1326     0      44  this
 56987    78   672    20    78  1326     0     102  ;
 56988    78   673     5    78  1326     0      64  }
 56989    78   673     5    78  1326     0    3088  ENDMETHOD
 56990    78   673     5    78  1327     0    3089  STARTMETHOD
 56991    78   691     5    78  1327     0      10  public
 56992    78   691    12    78  1327     0     111  ShortBuffer
 56993    78   691    24    78  1327     0     111  get
 56994    78   691    27    78  1327     0      59  (
 56995    78   691    28    78  1327     0      12  short
 56996    78   691    33    78  1327     0      61  [
 56997    78   691    34    78  1327     0      62  ]
 56998    78   691    36    78  1327     0     111  dst
 56999    78   691    39    78  1327     0      60  )
 57000    78   691    41    78  1327     0      63  {
 57001    78   692     9    78  1327     0      19  return
 57002    78   692    16    78  1327     0     111  get
 57003    78   692    19    78  1327     0      59  (
 57004    78   692    20    78  1327     0     111  dst
 57005    78   692    23    78  1327     0      66  ,
 57006    78   692    25    78  1327     0     112  0
 57007    78   692    26    78  1327     0      66  ,
 57008    78   692    28    78  1327     0     111  dst.length
 57009    78   692    38    78  1327     0      60  )
 57010    78   692    39    78  1327     0     102  ;
 57011    78   693     5    78  1327     0      64  }
 57012    78   693     5    78  1327     0    3090  ENDMETHOD
 57013    78   693     5    78  1328     0    3091  STARTMETHOD
 57014    78   739     5    78  1328     0      10  public
 57015    78   739    12    78  1328     0     111  ShortBuffer
 57016    78   739    24    78  1328     0     111  put
 57017    78   739    27    78  1328     0      59  (
 57018    78   739    28    78  1328     0     111  ShortBuffer
 57019    78   739    40    78  1328     0     111  src
 57020    78   739    43    78  1328     0      60  )
 57021    78   739    45    78  1328     0      63  {
 57022    78   740     9    78  1328     0      31  if
 57023    78   740    12    78  1328     0      59  (
 57024    78   740    13    78  1328     0     111  src
 57025    78   740    17    78  1328     0      68  ==
 57026    78   740    20    78  1328     0      44  this
 57027    78   740    24    78  1328     0      60  )
 57028    78   741    13    78  1328     0      20  throw
 57029    78   741    19    78  1328     0      15  new
 57030    78   741    23    78  1328     0     111  IllegalArgumentException
 57031    78   741    47    78  1328     0      59  (
 57032    78   741    48    78  1328     0      60  )
 57033    78   741    49    78  1328     0     102  ;
 57034    78   742     9    78  1328     0      36  int
 57035    78   742    13    78  1328     0     111  n
 57036    78   742    15    78  1328     0      67  =
 57037    78   742    17    78  1328     0     111  src.remaining
 57038    78   742    30    78  1328     0      59  (
 57039    78   742    31    78  1328     0      60  )
 57040    78   742    32    78  1328     0     102  ;
 57041    78   743     9    78  1328     0      31  if
 57042    78   743    12    78  1328     0      59  (
 57043    78   743    13    78  1328     0     111  n
 57044    78   743    15    78  1328     0      89  >
 57045    78   743    17    78  1328     0     111  remaining
 57046    78   743    26    78  1328     0      59  (
 57047    78   743    27    78  1328     0      60  )
 57048    78   743    28    78  1328     0      60  )
 57049    78   744    13    78  1328     0      20  throw
 57050    78   744    19    78  1328     0      15  new
 57051    78   744    23    78  1328     0     111  BufferOverflowException
 57052    78   744    46    78  1328     0      59  (
 57053    78   744    47    78  1328     0      60  )
 57054    78   744    48    78  1328     0     102  ;
 57055    78   745     9    78  1328     0      37  for
 57056    78   745    13    78  1328     0      59  (
 57057    78   745    14    78  1328     0      36  int
 57058    78   745    18    78  1328     0     111  i
 57059    78   745    20    78  1328     0      67  =
 57060    78   745    22    78  1328     0     112  0
 57061    78   745    23    78  1328     0     102  ;
 57062    78   745    25    78  1328     0     111  i
 57063    78   745    27    78  1328     0      93  <
 57064    78   745    29    78  1328     0     111  n
 57065    78   745    30    78  1328     0     102  ;
 57066    78   745    32    78  1328     0     111  i
 57067    78   745    33    78  1328     0      76  ++
 57068    78   745    35    78  1328     0      60  )
 57069    78   746    13    78  1328     0     111  put
 57070    78   746    16    78  1328     0      59  (
 57071    78   746    17    78  1328     0     111  src.get
 57072    78   746    24    78  1328     0      59  (
 57073    78   746    25    78  1328     0      60  )
 57074    78   746    26    78  1328     0      60  )
 57075    78   746    27    78  1328     0     102  ;
 57076    78   747     9    78  1328     0      19  return
 57077    78   747    16    78  1328     0      44  this
 57078    78   747    20    78  1328     0     102  ;
 57079    78   748     5    78  1328     0      64  }
 57080    78   748     5    78  1328     0    3092  ENDMETHOD
 57081    78   748     5    78  1329     0    3093  STARTMETHOD
 57082    78   800     5    78  1329     0      10  public
 57083    78   800    12    78  1329     0     111  ShortBuffer
 57084    78   800    24    78  1329     0     111  put
 57085    78   800    27    78  1329     0      59  (
 57086    78   800    28    78  1329     0      12  short
 57087    78   800    33    78  1329     0      61  [
 57088    78   800    34    78  1329     0      62  ]
 57089    78   800    36    78  1329     0     111  src
 57090    78   800    39    78  1329     0      66  ,
 57091    78   800    41    78  1329     0      36  int
 57092    78   800    45    78  1329     0     111  offset
 57093    78   800    51    78  1329     0      66  ,
 57094    78   800    53    78  1329     0      36  int
 57095    78   800    57    78  1329     0     111  length
 57096    78   800    63    78  1329     0      60  )
 57097    78   800    65    78  1329     0      63  {
 57098    78   801     9    78  1329     0     111  checkBounds
 57099    78   801    20    78  1329     0      59  (
 57100    78   801    21    78  1329     0     111  offset
 57101    78   801    27    78  1329     0      66  ,
 57102    78   801    29    78  1329     0     111  length
 57103    78   801    35    78  1329     0      66  ,
 57104    78   801    37    78  1329     0     111  src.length
 57105    78   801    47    78  1329     0      60  )
 57106    78   801    48    78  1329     0     102  ;
 57107    78   802     9    78  1329     0      31  if
 57108    78   802    12    78  1329     0      59  (
 57109    78   802    13    78  1329     0     111  length
 57110    78   802    20    78  1329     0      89  >
 57111    78   802    22    78  1329     0     111  remaining
 57112    78   802    31    78  1329     0      59  (
 57113    78   802    32    78  1329     0      60  )
 57114    78   802    33    78  1329     0      60  )
 57115    78   803    13    78  1329     0      20  throw
 57116    78   803    19    78  1329     0      15  new
 57117    78   803    23    78  1329     0     111  BufferOverflowException
 57118    78   803    46    78  1329     0      59  (
 57119    78   803    47    78  1329     0      60  )
 57120    78   803    48    78  1329     0     102  ;
 57121    78   804     9    78  1329     0      36  int
 57122    78   804    13    78  1329     0     111  end
 57123    78   804    17    78  1329     0      67  =
 57124    78   804    19    78  1329     0     111  offset
 57125    78   804    26    78  1329     0      74  +
 57126    78   804    28    78  1329     0     111  length
 57127    78   804    34    78  1329     0     102  ;
 57128    78   805     9    78  1329     0      37  for
 57129    78   805    13    78  1329     0      59  (
 57130    78   805    14    78  1329     0      36  int
 57131    78   805    18    78  1329     0     111  i
 57132    78   805    20    78  1329     0      67  =
 57133    78   805    22    78  1329     0     111  offset
 57134    78   805    28    78  1329     0     102  ;
 57135    78   805    30    78  1329     0     111  i
 57136    78   805    32    78  1329     0      93  <
 57137    78   805    34    78  1329     0     111  end
 57138    78   805    37    78  1329     0     102  ;
 57139    78   805    39    78  1329     0     111  i
 57140    78   805    40    78  1329     0      76  ++
 57141    78   805    42    78  1329     0      60  )
 57142    78   806    13    78  1329     0     111  this.put
 57143    78   806    21    78  1329     0      59  (
 57144    78   806    22    78  1329     0     111  src
 57145    78   806    25    78  1329     0      61  [
 57146    78   806    26    78  1329     0     111  i
 57147    78   806    27    78  1329     0      62  ]
 57148    78   806    28    78  1329     0      60  )
 57149    78   806    29    78  1329     0     102  ;
 57150    78   807     9    78  1329     0      19  return
 57151    78   807    16    78  1329     0      44  this
 57152    78   807    20    78  1329     0     102  ;
 57153    78   808     5    78  1329     0      64  }
 57154    78   808     5    78  1329     0    3094  ENDMETHOD
 57155    78   808     5    78  1330     0    3095  STARTMETHOD
 57156    78   829     5    78  1330     0      10  public
 57157    78   829    12    78  1330     0       6  final
 57158    78   829    18    78  1330     0     111  ShortBuffer
 57159    78   829    30    78  1330     0     111  put
 57160    78   829    33    78  1330     0      59  (
 57161    78   829    34    78  1330     0      12  short
 57162    78   829    39    78  1330     0      61  [
 57163    78   829    40    78  1330     0      62  ]
 57164    78   829    42    78  1330     0     111  src
 57165    78   829    45    78  1330     0      60  )
 57166    78   829    47    78  1330     0      63  {
 57167    78   830     9    78  1330     0      19  return
 57168    78   830    16    78  1330     0     111  put
 57169    78   830    19    78  1330     0      59  (
 57170    78   830    20    78  1330     0     111  src
 57171    78   830    23    78  1330     0      66  ,
 57172    78   830    25    78  1330     0     112  0
 57173    78   830    26    78  1330     0      66  ,
 57174    78   830    28    78  1330     0     111  src.length
 57175    78   830    38    78  1330     0      60  )
 57176    78   830    39    78  1330     0     102  ;
 57177    78   831     5    78  1330     0      64  }
 57178    78   831     5    78  1330     0    3096  ENDMETHOD
 57179    78   831     5    78  1331     0    3097  STARTMETHOD
 57180    78   932     5    78  1331     0      10  public
 57181    78   932    12    78  1331     0       6  final
 57182    78   932    18    78  1331     0      39  boolean
 57183    78   932    26    78  1331     0     111  hasArray
 57184    78   932    34    78  1331     0      59  (
 57185    78   932    35    78  1331     0      60  )
 57186    78   932    37    78  1331     0      63  {
 57187    78   933     9    78  1331     0      19  return
 57188    78   933    16    78  1331     0      59  (
 57189    78   933    17    78  1331     0     111  hb
 57190    78   933    20    78  1331     0      71  !=
 57191    78   933    23    78  1331     0      21  null
 57192    78   933    27    78  1331     0      60  )
 57193    78   933    29    78  1331     0     101  &&
 57194    78   933    32    78  1331     0      69  !
 57195    78   933    33    78  1331     0     111  isReadOnly
 57196    78   933    43    78  1331     0     102  ;
 57197    78   934     5    78  1331     0      64  }
 57198    78   934     5    78  1331     0    3098  ENDMETHOD
 57199    78   934     5    78  1332     0    3099  STARTMETHOD
 57200    78   955     5    78  1332     0      10  public
 57201    78   955    12    78  1332     0       6  final
 57202    78   955    18    78  1332     0      12  short
 57203    78   955    23    78  1332     0      61  [
 57204    78   955    24    78  1332     0      62  ]
 57205    78   955    26    78  1332     0     111  array
 57206    78   955    31    78  1332     0      59  (
 57207    78   955    32    78  1332     0      60  )
 57208    78   955    34    78  1332     0      63  {
 57209    78   956     9    78  1332     0      31  if
 57210    78   956    12    78  1332     0      59  (
 57211    78   956    13    78  1332     0     111  hb
 57212    78   956    16    78  1332     0      68  ==
 57213    78   956    19    78  1332     0      21  null
 57214    78   956    23    78  1332     0      60  )
 57215    78   957    13    78  1332     0      20  throw
 57216    78   957    19    78  1332     0      15  new
 57217    78   957    23    78  1332     0     111  UnsupportedOperationException
 57218    78   957    52    78  1332     0      59  (
 57219    78   957    53    78  1332     0      60  )
 57220    78   957    54    78  1332     0     102  ;
 57221    78   958     9    78  1332     0      31  if
 57222    78   958    12    78  1332     0      59  (
 57223    78   958    13    78  1332     0     111  isReadOnly
 57224    78   958    23    78  1332     0      60  )
 57225    78   959    13    78  1332     0      20  throw
 57226    78   959    19    78  1332     0      15  new
 57227    78   959    23    78  1332     0     111  ReadOnlyBufferException
 57228    78   959    46    78  1332     0      59  (
 57229    78   959    47    78  1332     0      60  )
 57230    78   959    48    78  1332     0     102  ;
 57231    78   960     9    78  1332     0      19  return
 57232    78   960    16    78  1332     0     111  hb
 57233    78   960    18    78  1332     0     102  ;
 57234    78   961     5    78  1332     0      64  }
 57235    78   961     5    78  1332     0    3100  ENDMETHOD
 57236    78   961     5    78  1333     0    3101  STARTMETHOD
 57237    78   983     5    78  1333     0      10  public
 57238    78   983    12    78  1333     0       6  final
 57239    78   983    18    78  1333     0      36  int
 57240    78   983    22    78  1333     0     111  arrayOffset
 57241    78   983    33    78  1333     0      59  (
 57242    78   983    34    78  1333     0      60  )
 57243    78   983    36    78  1333     0      63  {
 57244    78   984     9    78  1333     0      31  if
 57245    78   984    12    78  1333     0      59  (
 57246    78   984    13    78  1333     0     111  hb
 57247    78   984    16    78  1333     0      68  ==
 57248    78   984    19    78  1333     0      21  null
 57249    78   984    23    78  1333     0      60  )
 57250    78   985    13    78  1333     0      20  throw
 57251    78   985    19    78  1333     0      15  new
 57252    78   985    23    78  1333     0     111  UnsupportedOperationException
 57253    78   985    52    78  1333     0      59  (
 57254    78   985    53    78  1333     0      60  )
 57255    78   985    54    78  1333     0     102  ;
 57256    78   986     9    78  1333     0      31  if
 57257    78   986    12    78  1333     0      59  (
 57258    78   986    13    78  1333     0     111  isReadOnly
 57259    78   986    23    78  1333     0      60  )
 57260    78   987    13    78  1333     0      20  throw
 57261    78   987    19    78  1333     0      15  new
 57262    78   987    23    78  1333     0     111  ReadOnlyBufferException
 57263    78   987    46    78  1333     0      59  (
 57264    78   987    47    78  1333     0      60  )
 57265    78   987    48    78  1333     0     102  ;
 57266    78   988     9    78  1333     0      19  return
 57267    78   988    16    78  1333     0     111  offset
 57268    78   988    22    78  1333     0     102  ;
 57269    78   989     5    78  1333     0      64  }
 57270    78   989     5    78  1333     0    3102  ENDMETHOD
 57271    78  1030     5    78    -1     0      10  public
 57272    78  1030    12    78    -1     0       7  abstract
 57273    78  1030    21    78    -1     0     111  ShortBuffer
 57274    78  1030    33    78    -1     0     111  compact
 57275    78  1030    40    78    -1     0      59  (
 57276    78  1030    41    78    -1     0      60  )
 57277    78  1030    42    78    -1     0     102  ;
 57278    78  1037     5    78    -1     0      10  public
 57279    78  1037    12    78    -1     0       7  abstract
 57280    78  1037    21    78    -1     0      39  boolean
 57281    78  1037    29    78    -1     0     111  isDirect
 57282    78  1037    37    78    -1     0      59  (
 57283    78  1037    38    78    -1     0      60  )
 57284    78  1037    39    78    -1     0     102  ;
 57285    78  1037    39    78  1334     0    3103  STARTMETHOD
 57286    78  1046     5    78  1334     0      10  public
 57287    78  1046    12    78  1334     0     111  String
 57288    78  1046    19    78  1334     0     111  toString
 57289    78  1046    27    78  1334     0      59  (
 57290    78  1046    28    78  1334     0      60  )
 57291    78  1046    30    78  1334     0      63  {
 57292    78  1047     9    78  1334     0     111  StringBuffer
 57293    78  1047    22    78  1334     0     111  sb
 57294    78  1047    25    78  1334     0      67  =
 57295    78  1047    27    78  1334     0      15  new
 57296    78  1047    31    78  1334     0     111  StringBuffer
 57297    78  1047    43    78  1334     0      59  (
 57298    78  1047    44    78  1334     0      60  )
 57299    78  1047    45    78  1334     0     102  ;
 57300    78  1048     9    78  1334     0     111  sb.append
 57301    78  1048    18    78  1334     0      59  (
 57302    78  1048    19    78  1334     0     111  getClass
 57303    78  1048    27    78  1334     0      59  (
 57304    78  1048    28    78  1334     0      60  )
 57305    78  1048    29    78  1334     0      54  .
 57306    78  1048    30    78  1334     0     111  getName
 57307    78  1048    37    78  1334     0      59  (
 57308    78  1048    38    78  1334     0      60  )
 57309    78  1048    39    78  1334     0      60  )
 57310    78  1048    40    78  1334     0     102  ;
 57311    78  1049     9    78  1334     0     111  sb.append
 57312    78  1049    18    78  1334     0      59  (
 57313    78  1049    19    78  1334     0     107  "[pos="
 57314    78  1049    26    78  1334     0      60  )
 57315    78  1049    27    78  1334     0     102  ;
 57316    78  1050     9    78  1334     0     111  sb.append
 57317    78  1050    18    78  1334     0      59  (
 57318    78  1050    19    78  1334     0     111  position
 57319    78  1050    27    78  1334     0      59  (
 57320    78  1050    28    78  1334     0      60  )
 57321    78  1050    29    78  1334     0      60  )
 57322    78  1050    30    78  1334     0     102  ;
 57323    78  1051     9    78  1334     0     111  sb.append
 57324    78  1051    18    78  1334     0      59  (
 57325    78  1051    19    78  1334     0     107  " lim="
 57326    78  1051    26    78  1334     0      60  )
 57327    78  1051    27    78  1334     0     102  ;
 57328    78  1052     9    78  1334     0     111  sb.append
 57329    78  1052    18    78  1334     0      59  (
 57330    78  1052    19    78  1334     0     111  limit
 57331    78  1052    24    78  1334     0      59  (
 57332    78  1052    25    78  1334     0      60  )
 57333    78  1052    26    78  1334     0      60  )
 57334    78  1052    27    78  1334     0     102  ;
 57335    78  1053     9    78  1334     0     111  sb.append
 57336    78  1053    18    78  1334     0      59  (
 57337    78  1053    19    78  1334     0     107  " cap="
 57338    78  1053    26    78  1334     0      60  )
 57339    78  1053    27    78  1334     0     102  ;
 57340    78  1054     9    78  1334     0     111  sb.append
 57341    78  1054    18    78  1334     0      59  (
 57342    78  1054    19    78  1334     0     111  capacity
 57343    78  1054    27    78  1334     0      59  (
 57344    78  1054    28    78  1334     0      60  )
 57345    78  1054    29    78  1334     0      60  )
 57346    78  1054    30    78  1334     0     102  ;
 57347    78  1055     9    78  1334     0     111  sb.append
 57348    78  1055    18    78  1334     0      59  (
 57349    78  1055    19    78  1334     0     107  "]"
 57350    78  1055    22    78  1334     0      60  )
 57351    78  1055    23    78  1334     0     102  ;
 57352    78  1056     9    78  1334     0      19  return
 57353    78  1056    16    78  1334     0     111  sb.toString
 57354    78  1056    27    78  1334     0      59  (
 57355    78  1056    28    78  1334     0      60  )
 57356    78  1056    29    78  1334     0     102  ;
 57357    78  1057     5    78  1334     0      64  }
 57358    78  1057     5    78  1334     0    3104  ENDMETHOD
 57359    78  1057     5    78  1335     0    3105  STARTMETHOD
 57360    78  1077     5    78  1335     0      10  public
 57361    78  1077    12    78  1335     0      36  int
 57362    78  1077    16    78  1335     0     111  hashCode
 57363    78  1077    24    78  1335     0      59  (
 57364    78  1077    25    78  1335     0      60  )
 57365    78  1077    27    78  1335     0      63  {
 57366    78  1078     9    78  1335     0      36  int
 57367    78  1078    13    78  1335     0     111  h
 57368    78  1078    15    78  1335     0      67  =
 57369    78  1078    17    78  1335     0     112  1
 57370    78  1078    18    78  1335     0     102  ;
 57371    78  1079     9    78  1335     0      36  int
 57372    78  1079    13    78  1335     0     111  p
 57373    78  1079    15    78  1335     0      67  =
 57374    78  1079    17    78  1335     0     111  position
 57375    78  1079    25    78  1335     0      59  (
 57376    78  1079    26    78  1335     0      60  )
 57377    78  1079    27    78  1335     0     102  ;
 57378    78  1080     9    78  1335     0      37  for
 57379    78  1080    13    78  1335     0      59  (
 57380    78  1080    14    78  1335     0      36  int
 57381    78  1080    18    78  1335     0     111  i
 57382    78  1080    20    78  1335     0      67  =
 57383    78  1080    22    78  1335     0     111  limit
 57384    78  1080    27    78  1335     0      59  (
 57385    78  1080    28    78  1335     0      60  )
 57386    78  1080    30    78  1335     0      77  -
 57387    78  1080    32    78  1335     0     112  1
 57388    78  1080    33    78  1335     0     102  ;
 57389    78  1080    35    78  1335     0     111  i
 57390    78  1080    37    78  1335     0      88  >=
 57391    78  1080    40    78  1335     0     111  p
 57392    78  1080    41    78  1335     0     102  ;
 57393    78  1080    43    78  1335     0     111  i
 57394    78  1080    44    78  1335     0      79  --
 57395    78  1080    46    78  1335     0      60  )
 57396    78  1081    13    78  1335     0     111  h
 57397    78  1081    15    78  1335     0      67  =
 57398    78  1081    17    78  1335     0     112  31
 57399    78  1081    20    78  1335     0      80  *
 57400    78  1081    22    78  1335     0     111  h
 57401    78  1081    24    78  1335     0      74  +
 57402    78  1081    26    78  1335     0      59  (
 57403    78  1081    27    78  1335     0      36  int
 57404    78  1081    30    78  1335     0      60  )
 57405    78  1081    31    78  1335     0     111  get
 57406    78  1081    34    78  1335     0      59  (
 57407    78  1081    35    78  1335     0     111  i
 57408    78  1081    36    78  1335     0      60  )
 57409    78  1081    37    78  1335     0     102  ;
 57410    78  1082     9    78  1335     0      19  return
 57411    78  1082    16    78  1335     0     111  h
 57412    78  1082    17    78  1335     0     102  ;
 57413    78  1083     5    78  1335     0      64  }
 57414    78  1083     5    78  1335     0    3106  ENDMETHOD
 57415    78  1083     5    78  1336     0    3107  STARTMETHOD
 57416    78  1110     5    78  1336     0      10  public
 57417    78  1110    12    78  1336     0      39  boolean
 57418    78  1110    20    78  1336     0     111  equals
 57419    78  1110    26    78  1336     0      59  (
 57420    78  1110    27    78  1336     0     111  Object
 57421    78  1110    34    78  1336     0     111  ob
 57422    78  1110    36    78  1336     0      60  )
 57423    78  1110    38    78  1336     0      63  {
 57424    78  1111     9    78  1336     0      31  if
 57425    78  1111    12    78  1336     0      59  (
 57426    78  1111    13    78  1336     0      44  this
 57427    78  1111    18    78  1336     0      68  ==
 57428    78  1111    21    78  1336     0     111  ob
 57429    78  1111    23    78  1336     0      60  )
 57430    78  1112    13    78  1336     0      19  return
 57431    78  1112    20    78  1336     0      52  true
 57432    78  1112    24    78  1336     0     102  ;
 57433    78  1113     9    78  1336     0      31  if
 57434    78  1113    12    78  1336     0      59  (
 57435    78  1113    13    78  1336     0      69  !
 57436    78  1113    14    78  1336     0      59  (
 57437    78  1113    15    78  1336     0     111  ob
 57438    78  1113    18    78  1336     0      16  instanceof
 57439    78  1113    29    78  1336     0     111  ShortBuffer
 57440    78  1113    40    78  1336     0      60  )
 57441    78  1113    41    78  1336     0      60  )
 57442    78  1114    13    78  1336     0      19  return
 57443    78  1114    20    78  1336     0      43  false
 57444    78  1114    25    78  1336     0     102  ;
 57445    78  1115     9    78  1336     0     111  ShortBuffer
 57446    78  1115    21    78  1336     0     111  that
 57447    78  1115    26    78  1336     0      67  =
 57448    78  1115    28    78  1336     0      59  (
 57449    78  1115    29    78  1336     0     111  ShortBuffer
 57450    78  1115    40    78  1336     0      60  )
 57451    78  1115    41    78  1336     0     111  ob
 57452    78  1115    43    78  1336     0     102  ;
 57453    78  1116     9    78  1336     0      31  if
 57454    78  1116    12    78  1336     0      59  (
 57455    78  1116    13    78  1336     0     111  this.remaining
 57456    78  1116    27    78  1336     0      59  (
 57457    78  1116    28    78  1336     0      60  )
 57458    78  1116    30    78  1336     0      71  !=
 57459    78  1116    33    78  1336     0     111  that.remaining
 57460    78  1116    47    78  1336     0      59  (
 57461    78  1116    48    78  1336     0      60  )
 57462    78  1116    49    78  1336     0      60  )
 57463    78  1117    13    78  1336     0      19  return
 57464    78  1117    20    78  1336     0      43  false
 57465    78  1117    25    78  1336     0     102  ;
 57466    78  1118     9    78  1336     0      36  int
 57467    78  1118    13    78  1336     0     111  p
 57468    78  1118    15    78  1336     0      67  =
 57469    78  1118    17    78  1336     0     111  this.position
 57470    78  1118    30    78  1336     0      59  (
 57471    78  1118    31    78  1336     0      60  )
 57472    78  1118    32    78  1336     0     102  ;
 57473    78  1119     9    78  1336     0      37  for
 57474    78  1119    13    78  1336     0      59  (
 57475    78  1119    14    78  1336     0      36  int
 57476    78  1119    18    78  1336     0     111  i
 57477    78  1119    20    78  1336     0      67  =
 57478    78  1119    22    78  1336     0     111  this.limit
 57479    78  1119    32    78  1336     0      59  (
 57480    78  1119    33    78  1336     0      60  )
 57481    78  1119    35    78  1336     0      77  -
 57482    78  1119    37    78  1336     0     112  1
 57483    78  1119    38    78  1336     0      66  ,
 57484    78  1119    40    78  1336     0     111  j
 57485    78  1119    42    78  1336     0      67  =
 57486    78  1119    44    78  1336     0     111  that.limit
 57487    78  1119    54    78  1336     0      59  (
 57488    78  1119    55    78  1336     0      60  )
 57489    78  1119    57    78  1336     0      77  -
 57490    78  1119    59    78  1336     0     112  1
 57491    78  1119    60    78  1336     0     102  ;
 57492    78  1119    62    78  1336     0     111  i
 57493    78  1119    64    78  1336     0      88  >=
 57494    78  1119    67    78  1336     0     111  p
 57495    78  1119    68    78  1336     0     102  ;
 57496    78  1119    70    78  1336     0     111  i
 57497    78  1119    71    78  1336     0      79  --
 57498    78  1119    73    78  1336     0      66  ,
 57499    78  1119    75    78  1336     0     111  j
 57500    78  1119    76    78  1336     0      79  --
 57501    78  1119    78    78  1336     0      60  )
 57502    78  1119    80    78  1336     0      63  {
 57503    78  1120    13    78  1336     1      12  short
 57504    78  1120    19    78  1336     1     111  v1
 57505    78  1120    22    78  1336     1      67  =
 57506    78  1120    24    78  1336     1     111  this.get
 57507    78  1120    32    78  1336     1      59  (
 57508    78  1120    33    78  1336     1     111  i
 57509    78  1120    34    78  1336     1      60  )
 57510    78  1120    35    78  1336     1     102  ;
 57511    78  1121    13    78  1336     1      12  short
 57512    78  1121    19    78  1336     1     111  v2
 57513    78  1121    22    78  1336     1      67  =
 57514    78  1121    24    78  1336     1     111  that.get
 57515    78  1121    32    78  1336     1      59  (
 57516    78  1121    33    78  1336     1     111  j
 57517    78  1121    34    78  1336     1      60  )
 57518    78  1121    35    78  1336     1     102  ;
 57519    78  1122    13    78  1336     0      31  if
 57520    78  1122    16    78  1336     0      59  (
 57521    78  1122    17    78  1336     0     111  v1
 57522    78  1122    20    78  1336     0      71  !=
 57523    78  1122    23    78  1336     0     111  v2
 57524    78  1122    25    78  1336     0      60  )
 57525    78  1122    27    78  1336     0      63  {
 57526    78  1123    17    78  1336     0      31  if
 57527    78  1123    20    78  1336     0      59  (
 57528    78  1123    21    78  1336     0      59  (
 57529    78  1123    22    78  1336     0     111  v1
 57530    78  1123    25    78  1336     0      71  !=
 57531    78  1123    28    78  1336     0     111  v1
 57532    78  1123    30    78  1336     0      60  )
 57533    78  1123    32    78  1336     0     101  &&
 57534    78  1123    35    78  1336     0      59  (
 57535    78  1123    36    78  1336     0     111  v2
 57536    78  1123    39    78  1336     0      71  !=
 57537    78  1123    42    78  1336     0     111  v2
 57538    78  1123    44    78  1336     0      60  )
 57539    78  1123    45    78  1336     0      60  )
 57540    78  1124    21    78  1336     0      46  continue
 57541    78  1124    29    78  1336     0     102  ;
 57542    78  1125    17    78  1336     0      19  return
 57543    78  1125    24    78  1336     0      43  false
 57544    78  1125    29    78  1336     0     102  ;
 57545    78  1126    13    78  1336     1      64  }
 57546    78  1127     9    78  1336     1      64  }
 57547    78  1128     9    78  1336     0      19  return
 57548    78  1128    16    78  1336     0      52  true
 57549    78  1128    20    78  1336     0     102  ;
 57550    78  1129     5    78  1336     0      64  }
 57551    78  1129     5    78  1336     0    3108  ENDMETHOD
 57552    78  1129     5    78  1337     0    3109  STARTMETHOD
 57553    78  1143     5    78  1337     0      10  public
 57554    78  1143    12    78  1337     0      36  int
 57555    78  1143    16    78  1337     0     111  compareTo
 57556    78  1143    25    78  1337     0      59  (
 57557    78  1143    26    78  1337     0     111  ShortBuffer
 57558    78  1143    38    78  1337     0     111  that
 57559    78  1143    42    78  1337     0      60  )
 57560    78  1143    44    78  1337     0      63  {
 57561    78  1144     9    78  1337     0      36  int
 57562    78  1144    13    78  1337     0     111  n
 57563    78  1144    15    78  1337     0      67  =
 57564    78  1144    17    78  1337     0     111  this.position
 57565    78  1144    30    78  1337     0      59  (
 57566    78  1144    31    78  1337     0      60  )
 57567    78  1144    33    78  1337     0      74  +
 57568    78  1144    35    78  1337     0     111  Math.min
 57569    78  1144    43    78  1337     0      59  (
 57570    78  1144    44    78  1337     0     111  this.remaining
 57571    78  1144    58    78  1337     0      59  (
 57572    78  1144    59    78  1337     0      60  )
 57573    78  1144    60    78  1337     0      66  ,
 57574    78  1144    62    78  1337     0     111  that.remaining
 57575    78  1144    76    78  1337     0      59  (
 57576    78  1144    77    78  1337     0      60  )
 57577    78  1144    78    78  1337     0      60  )
 57578    78  1144    79    78  1337     0     102  ;
 57579    78  1145     9    78  1337     0      37  for
 57580    78  1145    13    78  1337     0      59  (
 57581    78  1145    14    78  1337     0      36  int
 57582    78  1145    18    78  1337     0     111  i
 57583    78  1145    20    78  1337     0      67  =
 57584    78  1145    22    78  1337     0     111  this.position
 57585    78  1145    35    78  1337     0      59  (
 57586    78  1145    36    78  1337     0      60  )
 57587    78  1145    37    78  1337     0      66  ,
 57588    78  1145    39    78  1337     0     111  j
 57589    78  1145    41    78  1337     0      67  =
 57590    78  1145    43    78  1337     0     111  that.position
 57591    78  1145    56    78  1337     0      59  (
 57592    78  1145    57    78  1337     0      60  )
 57593    78  1145    58    78  1337     0     102  ;
 57594    78  1145    60    78  1337     0     111  i
 57595    78  1145    62    78  1337     0      93  <
 57596    78  1145    64    78  1337     0     111  n
 57597    78  1145    65    78  1337     0     102  ;
 57598    78  1145    67    78  1337     0     111  i
 57599    78  1145    68    78  1337     0      76  ++
 57600    78  1145    70    78  1337     0      66  ,
 57601    78  1145    72    78  1337     0     111  j
 57602    78  1145    73    78  1337     0      76  ++
 57603    78  1145    75    78  1337     0      60  )
 57604    78  1145    77    78  1337     0      63  {
 57605    78  1146    13    78  1337     1      12  short
 57606    78  1146    19    78  1337     1     111  v1
 57607    78  1146    22    78  1337     1      67  =
 57608    78  1146    24    78  1337     1     111  this.get
 57609    78  1146    32    78  1337     1      59  (
 57610    78  1146    33    78  1337     1     111  i
 57611    78  1146    34    78  1337     1      60  )
 57612    78  1146    35    78  1337     1     102  ;
 57613    78  1147    13    78  1337     1      12  short
 57614    78  1147    19    78  1337     1     111  v2
 57615    78  1147    22    78  1337     1      67  =
 57616    78  1147    24    78  1337     1     111  that.get
 57617    78  1147    32    78  1337     1      59  (
 57618    78  1147    33    78  1337     1     111  j
 57619    78  1147    34    78  1337     1      60  )
 57620    78  1147    35    78  1337     1     102  ;
 57621    78  1148    13    78  1337     0      31  if
 57622    78  1148    16    78  1337     0      59  (
 57623    78  1148    17    78  1337     0     111  v1
 57624    78  1148    20    78  1337     0      68  ==
 57625    78  1148    23    78  1337     0     111  v2
 57626    78  1148    25    78  1337     0      60  )
 57627    78  1149    17    78  1337     0      46  continue
 57628    78  1149    25    78  1337     0     102  ;
 57629    78  1150    13    78  1337     0      31  if
 57630    78  1150    16    78  1337     0      59  (
 57631    78  1150    17    78  1337     0      59  (
 57632    78  1150    18    78  1337     0     111  v1
 57633    78  1150    21    78  1337     0      71  !=
 57634    78  1150    24    78  1337     0     111  v1
 57635    78  1150    26    78  1337     0      60  )
 57636    78  1150    28    78  1337     0     101  &&
 57637    78  1150    31    78  1337     0      59  (
 57638    78  1150    32    78  1337     0     111  v2
 57639    78  1150    35    78  1337     0      71  !=
 57640    78  1150    38    78  1337     0     111  v2
 57641    78  1150    40    78  1337     0      60  )
 57642    78  1150    41    78  1337     0      60  )
 57643    78  1151    17    78  1337     0      46  continue
 57644    78  1151    25    78  1337     0     102  ;
 57645    78  1152    13    78  1337     0      31  if
 57646    78  1152    16    78  1337     0      59  (
 57647    78  1152    17    78  1337     0     111  v1
 57648    78  1152    20    78  1337     0      93  <
 57649    78  1152    22    78  1337     0     111  v2
 57650    78  1152    24    78  1337     0      60  )
 57651    78  1153    17    78  1337     0      19  return
 57652    78  1153    24    78  1337     0      77  -
 57653    78  1153    25    78  1337     0     112  1
 57654    78  1153    26    78  1337     0     102  ;
 57655    78  1154    13    78  1337     0      19  return
 57656    78  1154    20    78  1337     0      74  +
 57657    78  1154    21    78  1337     0     112  1
 57658    78  1154    22    78  1337     0     102  ;
 57659    78  1155     9    78  1337     0      64  }
 57660    78  1156     9    78  1337     0      19  return
 57661    78  1156    16    78  1337     0     111  this.remaining
 57662    78  1156    30    78  1337     0      59  (
 57663    78  1156    31    78  1337     0      60  )
 57664    78  1156    33    78  1337     0      77  -
 57665    78  1156    35    78  1337     0     111  that.remaining
 57666    78  1156    49    78  1337     0      59  (
 57667    78  1156    50    78  1337     0      60  )
 57668    78  1156    51    78  1337     0     102  ;
 57669    78  1157     5    78  1337     0      64  }
 57670    78  1157     5    78  1337     0    3110  ENDMETHOD
 57671    78  1372     5    78    -1     0      10  public
 57672    78  1372    12    78    -1     0       7  abstract
 57673    78  1372    21    78    -1     0     111  ByteOrder
 57674    78  1372    31    78    -1     0     111  order
 57675    78  1372    36    78    -1     0      59  (
 57676    78  1372    37    78    -1     0      60  )
 57677    78  1372    38    78    -1     0     102  ;
 57678    78  1426     1    78    -1     0      64  }
 57679    78  1426     1    78    -1     1    3111  ENDCLASS
 57680    78  1426     1    -1    -1     1    3112  ENDFILE C:\javasrc\java\nio\ShortBuffer.java
 57681    79     1     1    -1    -1     1    3113  STARTFILE C:\javasrc\java\nio\StringCharBuffer.java
 57682    79    26     1    -1    -1     0       5  package
 57683    79    26     9    -1    -1     0     111  java.nio
 57684    79    26    17    -1    -1     0     102  ;
 57685    79    31     1    79    -1     0    3114  STARTCLASS
 57686    79    31     1    79    -1     0      24  class
 57687    79    31     7    79    -1     0     111  StringCharBuffer
 57688    79    32     5    79    -1     0      38  extends
 57689    79    32    13    79    -1     0     111  CharBuffer
 57690    79    33     1    79    -1     0      63  {
 57691    79    34     5    79    -1     0     111  CharSequence
 57692    79    34    18    79    -1     0     111  str
 57693    79    34    21    79    -1     0     102  ;
 57694    79    34    21    79  1338     0    3115  STARTMETHOD
 57695    79    36     5    79  1338     0     111  StringCharBuffer
 57696    79    36    21    79  1338     0      59  (
 57697    79    36    22    79  1338     0     111  CharSequence
 57698    79    36    35    79  1338     0     111  s
 57699    79    36    36    79  1338     0      66  ,
 57700    79    36    38    79  1338     0      36  int
 57701    79    36    42    79  1338     0     111  start
 57702    79    36    47    79  1338     0      66  ,
 57703    79    36    49    79  1338     0      36  int
 57704    79    36    53    79  1338     0     111  end
 57705    79    36    56    79  1338     0      60  )
 57706    79    36    58    79  1338     0      63  {
 57707    79    37     9    79  1338     0      27  super
 57708    79    37    14    79  1338     0      59  (
 57709    79    37    15    79  1338     0      77  -
 57710    79    37    16    79  1338     0     112  1
 57711    79    37    17    79  1338     0      66  ,
 57712    79    37    19    79  1338     0     111  start
 57713    79    37    24    79  1338     0      66  ,
 57714    79    37    26    79  1338     0     111  end
 57715    79    37    29    79  1338     0      66  ,
 57716    79    37    31    79  1338     0     111  s.length
 57717    79    37    39    79  1338     0      59  (
 57718    79    37    40    79  1338     0      60  )
 57719    79    37    41    79  1338     0      60  )
 57720    79    37    42    79  1338     0     102  ;
 57721    79    38     9    79  1338     0      36  int
 57722    79    38    13    79  1338     0     111  n
 57723    79    38    15    79  1338     0      67  =
 57724    79    38    17    79  1338     0     111  s.length
 57725    79    38    25    79  1338     0      59  (
 57726    79    38    26    79  1338     0      60  )
 57727    79    38    27    79  1338     0     102  ;
 57728    79    39     9    79  1338     0      31  if
 57729    79    39    12    79  1338     0      59  (
 57730    79    39    13    79  1338     0      59  (
 57731    79    39    14    79  1338     0     111  start
 57732    79    39    20    79  1338     0      93  <
 57733    79    39    22    79  1338     0     112  0
 57734    79    39    23    79  1338     0      60  )
 57735    79    39    25    79  1338     0      98  ||
 57736    79    39    28    79  1338     0      59  (
 57737    79    39    29    79  1338     0     111  start
 57738    79    39    35    79  1338     0      89  >
 57739    79    39    37    79  1338     0     111  n
 57740    79    39    38    79  1338     0      60  )
 57741    79    39    40    79  1338     0      98  ||
 57742    79    39    43    79  1338     0      59  (
 57743    79    39    44    79  1338     0     111  end
 57744    79    39    48    79  1338     0      93  <
 57745    79    39    50    79  1338     0     111  start
 57746    79    39    55    79  1338     0      60  )
 57747    79    39    57    79  1338     0      98  ||
 57748    79    39    60    79  1338     0      59  (
 57749    79    39    61    79  1338     0     111  end
 57750    79    39    65    79  1338     0      89  >
 57751    79    39    67    79  1338     0     111  n
 57752    79    39    68    79  1338     0      60  )
 57753    79    39    69    79  1338     0      60  )
 57754    79    40    13    79  1338     0      20  throw
 57755    79    40    19    79  1338     0      15  new
 57756    79    40    23    79  1338     0     111  IndexOutOfBoundsException
 57757    79    40    48    79  1338     0      59  (
 57758    79    40    49    79  1338     0      60  )
 57759    79    40    50    79  1338     0     102  ;
 57760    79    41     9    79  1338     0     111  str
 57761    79    41    13    79  1338     0      67  =
 57762    79    41    15    79  1338     0     111  s
 57763    79    41    16    79  1338     0     102  ;
 57764    79    42     5    79  1338     0      64  }
 57765    79    42     5    79  1338     0    3116  ENDMETHOD
 57766    79    42     5    79  1339     0    3117  STARTMETHOD
 57767    79    44     5    79  1339     0      10  public
 57768    79    44    12    79  1339     0     111  CharBuffer
 57769    79    44    23    79  1339     0     111  slice
 57770    79    44    28    79  1339     0      59  (
 57771    79    44    29    79  1339     0      60  )
 57772    79    44    31    79  1339     0      63  {
 57773    79    45     9    79  1339     0      19  return
 57774    79    45    16    79  1339     0      15  new
 57775    79    45    20    79  1339     0     111  StringCharBuffer
 57776    79    45    36    79  1339     0      59  (
 57777    79    45    37    79  1339     0     111  str
 57778    79    45    40    79  1339     0      66  ,
 57779    79    46    37    79  1339     0      77  -
 57780    79    46    38    79  1339     0     112  1
 57781    79    46    39    79  1339     0      66  ,
 57782    79    47    37    79  1339     0     112  0
 57783    79    47    38    79  1339     0      66  ,
 57784    79    48    37    79  1339     1     111  this.remaining
 57785    79    48    51    79  1339     1      59  (
 57786    79    48    52    79  1339     1      60  )
 57787    79    48    53    79  1339     1      66  ,
 57788    79    49    37    79  1339     1     111  this.remaining
 57789    79    49    51    79  1339     1      59  (
 57790    79    49    52    79  1339     1      60  )
 57791    79    49    53    79  1339     1      66  ,
 57792    79    50    37    79  1339     0     111  this.position
 57793    79    50    50    79  1339     0      59  (
 57794    79    50    51    79  1339     0      60  )
 57795    79    50    52    79  1339     0      60  )
 57796    79    50    53    79  1339     0     102  ;
 57797    79    51     5    79  1339     0      64  }
 57798    79    51     5    79  1339     0    3118  ENDMETHOD
 57799    79    51     5    79  1340     0    3119  STARTMETHOD
 57800    79    53     5    79  1340     0      41  private
 57801    79    53    13    79  1340     0     111  StringCharBuffer
 57802    79    53    29    79  1340     0      59  (
 57803    79    53    30    79  1340     0     111  CharSequence
 57804    79    53    43    79  1340     0     111  s
 57805    79    53    44    79  1340     0      66  ,
 57806    79    54    30    79  1340     1      36  int
 57807    79    54    34    79  1340     1     111  mark
 57808    79    54    38    79  1340     1      66  ,
 57809    79    55    30    79  1340     1      36  int
 57810    79    55    34    79  1340     1     111  pos
 57811    79    55    37    79  1340     1      66  ,
 57812    79    56    30    79  1340     1      36  int
 57813    79    56    34    79  1340     1     111  limit
 57814    79    56    39    79  1340     1      66  ,
 57815    79    57    30    79  1340     1      36  int
 57816    79    57    34    79  1340     1     111  cap
 57817    79    57    37    79  1340     1      66  ,
 57818    79    58    30    79  1340     0      36  int
 57819    79    58    34    79  1340     0     111  offset
 57820    79    58    40    79  1340     0      60  )
 57821    79    58    42    79  1340     0      63  {
 57822    79    59     9    79  1340     0      27  super
 57823    79    59    14    79  1340     0      59  (
 57824    79    59    15    79  1340     0     111  mark
 57825    79    59    19    79  1340     0      66  ,
 57826    79    59    21    79  1340     0     111  pos
 57827    79    59    24    79  1340     0      66  ,
 57828    79    59    26    79  1340     0     111  limit
 57829    79    59    31    79  1340     0      66  ,
 57830    79    59    33    79  1340     0     111  cap
 57831    79    59    36    79  1340     0      66  ,
 57832    79    59    38    79  1340     0      21  null
 57833    79    59    42    79  1340     0      66  ,
 57834    79    59    44    79  1340     0     111  offset
 57835    79    59    50    79  1340     0      60  )
 57836    79    59    51    79  1340     0     102  ;
 57837    79    60     9    79  1340     0     111  str
 57838    79    60    13    79  1340     0      67  =
 57839    79    60    15    79  1340     0     111  s
 57840    79    60    16    79  1340     0     102  ;
 57841    79    61     5    79  1340     0      64  }
 57842    79    61     5    79  1340     0    3120  ENDMETHOD
 57843    79    61     5    79  1341     0    3121  STARTMETHOD
 57844    79    63     5    79  1341     0      41  private
 57845    79    63    13    79  1341     0     111  StringCharBuffer
 57846    79    63    29    79  1341     0      59  (
 57847    79    63    30    79  1341     0     111  CharSequence
 57848    79    63    43    79  1341     0     111  s
 57849    79    63    44    79  1341     0      66  ,
 57850    79    63    46    79  1341     0      36  int
 57851    79    63    50    79  1341     0     111  mark
 57852    79    63    54    79  1341     0      66  ,
 57853    79    64    30    79  1341     0      36  int
 57854    79    64    34    79  1341     0     111  pos
 57855    79    64    37    79  1341     0      66  ,
 57856    79    64    39    79  1341     0      36  int
 57857    79    64    43    79  1341     0     111  limit
 57858    79    64    48    79  1341     0      66  ,
 57859    79    64    50    79  1341     0      36  int
 57860    79    64    54    79  1341     0     111  cap
 57861    79    64    57    79  1341     0      60  )
 57862    79    65     5    79  1341     0      63  {
 57863    79    66     9    79  1341     0      27  super
 57864    79    66    14    79  1341     0      59  (
 57865    79    66    15    79  1341     0     111  mark
 57866    79    66    19    79  1341     0      66  ,
 57867    79    66    21    79  1341     0     111  pos
 57868    79    66    24    79  1341     0      66  ,
 57869    79    66    26    79  1341     0     111  limit
 57870    79    66    31    79  1341     0      66  ,
 57871    79    66    33    79  1341     0     111  cap
 57872    79    66    36    79  1341     0      60  )
 57873    79    66    37    79  1341     0     102  ;
 57874    79    67     9    79  1341     0     111  str
 57875    79    67    13    79  1341     0      67  =
 57876    79    67    15    79  1341     0     111  s
 57877    79    67    16    79  1341     0     102  ;
 57878    79    68     5    79  1341     0      64  }
 57879    79    68     5    79  1341     0    3122  ENDMETHOD
 57880    79    68     5    79  1342     0    3123  STARTMETHOD
 57881    79    70     5    79  1342     0      10  public
 57882    79    70    12    79  1342     0     111  CharBuffer
 57883    79    70    23    79  1342     0     111  duplicate
 57884    79    70    32    79  1342     0      59  (
 57885    79    70    33    79  1342     0      60  )
 57886    79    70    35    79  1342     0      63  {
 57887    79    71     9    79  1342     0      19  return
 57888    79    71    16    79  1342     0      15  new
 57889    79    71    20    79  1342     0     111  StringCharBuffer
 57890    79    71    36    79  1342     0      59  (
 57891    79    71    37    79  1342     0     111  str
 57892    79    71    40    79  1342     0      66  ,
 57893    79    71    42    79  1342     0     111  markValue
 57894    79    71    51    79  1342     0      59  (
 57895    79    71    52    79  1342     0      60  )
 57896    79    71    53    79  1342     0      66  ,
 57897    79    72    37    79  1342     0     111  position
 57898    79    72    45    79  1342     0      59  (
 57899    79    72    46    79  1342     0      60  )
 57900    79    72    47    79  1342     0      66  ,
 57901    79    72    49    79  1342     0     111  limit
 57902    79    72    54    79  1342     0      59  (
 57903    79    72    55    79  1342     0      60  )
 57904    79    72    56    79  1342     0      66  ,
 57905    79    72    58    79  1342     0     111  capacity
 57906    79    72    66    79  1342     0      59  (
 57907    79    72    67    79  1342     0      60  )
 57908    79    72    68    79  1342     0      60  )
 57909    79    72    69    79  1342     0     102  ;
 57910    79    73     5    79  1342     0      64  }
 57911    79    73     5    79  1342     0    3124  ENDMETHOD
 57912    79    73     5    79  1343     0    3125  STARTMETHOD
 57913    79    75     5    79  1343     0      10  public
 57914    79    75    12    79  1343     0     111  CharBuffer
 57915    79    75    23    79  1343     0     111  asReadOnlyBuffer
 57916    79    75    39    79  1343     0      59  (
 57917    79    75    40    79  1343     0      60  )
 57918    79    75    42    79  1343     0      63  {
 57919    79    76     9    79  1343     0      19  return
 57920    79    76    16    79  1343     0     111  duplicate
 57921    79    76    25    79  1343     0      59  (
 57922    79    76    26    79  1343     0      60  )
 57923    79    76    27    79  1343     0     102  ;
 57924    79    77     5    79  1343     0      64  }
 57925    79    77     5    79  1343     0    3126  ENDMETHOD
 57926    79    77     5    79  1344     0    3127  STARTMETHOD
 57927    79    79     5    79  1344     0      10  public
 57928    79    79    12    79  1344     0       6  final
 57929    79    79    18    79  1344     0      40  char
 57930    79    79    23    79  1344     0     111  get
 57931    79    79    26    79  1344     0      59  (
 57932    79    79    27    79  1344     0      60  )
 57933    79    79    29    79  1344     0      63  {
 57934    79    80     9    79  1344     0      19  return
 57935    79    80    16    79  1344     0     111  str.charAt
 57936    79    80    26    79  1344     0      59  (
 57937    79    80    27    79  1344     0     111  nextGetIndex
 57938    79    80    39    79  1344     0      59  (
 57939    79    80    40    79  1344     0      60  )
 57940    79    80    41    79  1344     0      60  )
 57941    79    80    42    79  1344     0     102  ;
 57942    79    81     5    79  1344     0      64  }
 57943    79    81     5    79  1344     0    3128  ENDMETHOD
 57944    79    81     5    79  1345     0    3129  STARTMETHOD
 57945    79    83     5    79  1345     0      10  public
 57946    79    83    12    79  1345     0       6  final
 57947    79    83    18    79  1345     0      40  char
 57948    79    83    23    79  1345     0     111  get
 57949    79    83    26    79  1345     0      59  (
 57950    79    83    27    79  1345     0      36  int
 57951    79    83    31    79  1345     0     111  index
 57952    79    83    36    79  1345     0      60  )
 57953    79    83    38    79  1345     0      63  {
 57954    79    84     9    79  1345     0      19  return
 57955    79    84    16    79  1345     0     111  str.charAt
 57956    79    84    26    79  1345     0      59  (
 57957    79    84    27    79  1345     0     111  checkIndex
 57958    79    84    37    79  1345     0      59  (
 57959    79    84    38    79  1345     0     111  index
 57960    79    84    43    79  1345     0      60  )
 57961    79    84    44    79  1345     0      60  )
 57962    79    84    45    79  1345     0     102  ;
 57963    79    85     5    79  1345     0      64  }
 57964    79    85     5    79  1345     0    3130  ENDMETHOD
 57965    79    85     5    79  1346     0    3131  STARTMETHOD
 57966    79    89     5    79  1346     0      10  public
 57967    79    89    12    79  1346     0       6  final
 57968    79    89    18    79  1346     0     111  CharBuffer
 57969    79    89    29    79  1346     0     111  put
 57970    79    89    32    79  1346     0      59  (
 57971    79    89    33    79  1346     0      40  char
 57972    79    89    38    79  1346     0     111  c
 57973    79    89    39    79  1346     0      60  )
 57974    79    89    41    79  1346     0      63  {
 57975    79    90     9    79  1346     0      20  throw
 57976    79    90    15    79  1346     0      15  new
 57977    79    90    19    79  1346     0     111  ReadOnlyBufferException
 57978    79    90    42    79  1346     0      59  (
 57979    79    90    43    79  1346     0      60  )
 57980    79    90    44    79  1346     0     102  ;
 57981    79    91     5    79  1346     0      64  }
 57982    79    91     5    79  1346     0    3132  ENDMETHOD
 57983    79    91     5    79  1347     0    3133  STARTMETHOD
 57984    79    93     5    79  1347     0      10  public
 57985    79    93    12    79  1347     0       6  final
 57986    79    93    18    79  1347     0     111  CharBuffer
 57987    79    93    29    79  1347     0     111  put
 57988    79    93    32    79  1347     0      59  (
 57989    79    93    33    79  1347     0      36  int
 57990    79    93    37    79  1347     0     111  index
 57991    79    93    42    79  1347     0      66  ,
 57992    79    93    44    79  1347     0      40  char
 57993    79    93    49    79  1347     0     111  c
 57994    79    93    50    79  1347     0      60  )
 57995    79    93    52    79  1347     0      63  {
 57996    79    94     9    79  1347     0      20  throw
 57997    79    94    15    79  1347     0      15  new
 57998    79    94    19    79  1347     0     111  ReadOnlyBufferException
 57999    79    94    42    79  1347     0      59  (
 58000    79    94    43    79  1347     0      60  )
 58001    79    94    44    79  1347     0     102  ;
 58002    79    95     5    79  1347     0      64  }
 58003    79    95     5    79  1347     0    3134  ENDMETHOD
 58004    79    95     5    79  1348     0    3135  STARTMETHOD
 58005    79    97     5    79  1348     0      10  public
 58006    79    97    12    79  1348     0       6  final
 58007    79    97    18    79  1348     0     111  CharBuffer
 58008    79    97    29    79  1348     0     111  compact
 58009    79    97    36    79  1348     0      59  (
 58010    79    97    37    79  1348     0      60  )
 58011    79    97    39    79  1348     0      63  {
 58012    79    98     9    79  1348     0      20  throw
 58013    79    98    15    79  1348     0      15  new
 58014    79    98    19    79  1348     0     111  ReadOnlyBufferException
 58015    79    98    42    79  1348     0      59  (
 58016    79    98    43    79  1348     0      60  )
 58017    79    98    44    79  1348     0     102  ;
 58018    79    99     5    79  1348     0      64  }
 58019    79    99     5    79  1348     0    3136  ENDMETHOD
 58020    79    99     5    79  1349     0    3137  STARTMETHOD
 58021    79   101     5    79  1349     0      10  public
 58022    79   101    12    79  1349     0       6  final
 58023    79   101    18    79  1349     0      39  boolean
 58024    79   101    26    79  1349     0     111  isReadOnly
 58025    79   101    36    79  1349     0      59  (
 58026    79   101    37    79  1349     0      60  )
 58027    79   101    39    79  1349     0      63  {
 58028    79   102     9    79  1349     0      19  return
 58029    79   102    16    79  1349     0      52  true
 58030    79   102    20    79  1349     0     102  ;
 58031    79   103     5    79  1349     0      64  }
 58032    79   103     5    79  1349     0    3138  ENDMETHOD
 58033    79   103     5    79  1350     0    3139  STARTMETHOD
 58034    79   105     5    79  1350     0       6  final
 58035    79   105    11    79  1350     0     111  String
 58036    79   105    18    79  1350     0     111  toString
 58037    79   105    26    79  1350     0      59  (
 58038    79   105    27    79  1350     0      36  int
 58039    79   105    31    79  1350     0     111  start
 58040    79   105    36    79  1350     0      66  ,
 58041    79   105    38    79  1350     0      36  int
 58042    79   105    42    79  1350     0     111  end
 58043    79   105    45    79  1350     0      60  )
 58044    79   105    47    79  1350     0      63  {
 58045    79   106     9    79  1350     0      19  return
 58046    79   106    16    79  1350     0     111  str.toString
 58047    79   106    28    79  1350     0      59  (
 58048    79   106    29    79  1350     0      60  )
 58049    79   106    30    79  1350     0      54  .
 58050    79   106    31    79  1350     0     111  substring
 58051    79   106    40    79  1350     0      59  (
 58052    79   106    41    79  1350     0     111  start
 58053    79   106    46    79  1350     0      66  ,
 58054    79   106    48    79  1350     0     111  end
 58055    79   106    51    79  1350     0      60  )
 58056    79   106    52    79  1350     0     102  ;
 58057    79   107     5    79  1350     0      64  }
 58058    79   107     5    79  1350     0    3140  ENDMETHOD
 58059    79   107     5    79  1351     0    3141  STARTMETHOD
 58060    79   109     5    79  1351     0      10  public
 58061    79   109    12    79  1351     0       6  final
 58062    79   109    18    79  1351     0     111  CharSequence
 58063    79   109    31    79  1351     0     111  subSequence
 58064    79   109    42    79  1351     0      59  (
 58065    79   109    43    79  1351     0      36  int
 58066    79   109    47    79  1351     0     111  start
 58067    79   109    52    79  1351     0      66  ,
 58068    79   109    54    79  1351     0      36  int
 58069    79   109    58    79  1351     0     111  end
 58070    79   109    61    79  1351     0      60  )
 58071    79   109    63    79  1351     0      63  {
 58072    79   110     9    79  1351     0      35  try
 58073    79   110    13    79  1351     0      63  {
 58074    79   111    13    79  1351     0      36  int
 58075    79   111    17    79  1351     0     111  pos
 58076    79   111    21    79  1351     0      67  =
 58077    79   111    23    79  1351     0     111  position
 58078    79   111    31    79  1351     0      59  (
 58079    79   111    32    79  1351     0      60  )
 58080    79   111    33    79  1351     0     102  ;
 58081    79   112    13    79  1351     0      19  return
 58082    79   112    20    79  1351     0      15  new
 58083    79   112    24    79  1351     0     111  StringCharBuffer
 58084    79   112    40    79  1351     0      59  (
 58085    79   112    41    79  1351     0     111  str
 58086    79   112    44    79  1351     0      66  ,
 58087    79   113    41    79  1351     0     111  pos
 58088    79   113    45    79  1351     0      74  +
 58089    79   113    47    79  1351     0     111  checkIndex
 58090    79   113    57    79  1351     0      59  (
 58091    79   113    58    79  1351     0     111  start
 58092    79   113    63    79  1351     0      66  ,
 58093    79   113    65    79  1351     0     111  pos
 58094    79   113    68    79  1351     0      60  )
 58095    79   113    69    79  1351     0      66  ,
 58096    79   114    41    79  1351     0     111  pos
 58097    79   114    45    79  1351     0      74  +
 58098    79   114    47    79  1351     0     111  checkIndex
 58099    79   114    57    79  1351     0      59  (
 58100    79   114    58    79  1351     0     111  end
 58101    79   114    61    79  1351     0      66  ,
 58102    79   114    63    79  1351     0     111  pos
 58103    79   114    66    79  1351     0      60  )
 58104    79   114    67    79  1351     0      60  )
 58105    79   114    68    79  1351     0     102  ;
 58106    79   115     9    79  1351     0      64  }
 58107    79   115    11    79  1351     0      34  catch
 58108    79   115    17    79  1351     0      59  (
 58109    79   115    18    79  1351     0     111  IllegalArgumentException
 58110    79   115    43    79  1351     0     111  x
 58111    79   115    44    79  1351     0      60  )
 58112    79   115    46    79  1351     0      63  {
 58113    79   116    13    79  1351     0      20  throw
 58114    79   116    19    79  1351     0      15  new
 58115    79   116    23    79  1351     0     111  IndexOutOfBoundsException
 58116    79   116    48    79  1351     0      59  (
 58117    79   116    49    79  1351     0      60  )
 58118    79   116    50    79  1351     0     102  ;
 58119    79   117     9    79  1351     0      64  }
 58120    79   118     5    79  1351     0      64  }
 58121    79   118     5    79  1351     0    3142  ENDMETHOD
 58122    79   118     5    79  1352     0    3143  STARTMETHOD
 58123    79   120     5    79  1352     0      10  public
 58124    79   120    12    79  1352     0      39  boolean
 58125    79   120    20    79  1352     0     111  isDirect
 58126    79   120    28    79  1352     0      59  (
 58127    79   120    29    79  1352     0      60  )
 58128    79   120    31    79  1352     0      63  {
 58129    79   121     9    79  1352     0      19  return
 58130    79   121    16    79  1352     0      43  false
 58131    79   121    21    79  1352     0     102  ;
 58132    79   122     5    79  1352     0      64  }
 58133    79   122     5    79  1352     0    3144  ENDMETHOD
 58134    79   122     5    79  1353     0    3145  STARTMETHOD
 58135    79   124     5    79  1353     0      10  public
 58136    79   124    12    79  1353     0     111  ByteOrder
 58137    79   124    22    79  1353     0     111  order
 58138    79   124    27    79  1353     0      59  (
 58139    79   124    28    79  1353     0      60  )
 58140    79   124    30    79  1353     0      63  {
 58141    79   125     9    79  1353     0      19  return
 58142    79   125    16    79  1353     0     111  ByteOrder.nativeOrder
 58143    79   125    37    79  1353     0      59  (
 58144    79   125    38    79  1353     0      60  )
 58145    79   125    39    79  1353     0     102  ;
 58146    79   126     5    79  1353     0      64  }
 58147    79   126     5    79  1353     0    3146  ENDMETHOD
 58148    79   128     1    79    -1     0      64  }
 58149    79   128     1    79    -1     0    3147  ENDCLASS
 58150    79   128     1    -1    -1     0    3148  ENDFILE C:\javasrc\java\nio\StringCharBuffer.java
